(() => {
  var e = {
      71993: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.buildAnnotations = void 0);
        const r = i(29371),
          s = i(89171),
          o = i(48882),
          a = i(96696),
          n = i(84736),
          l = i(28677),
          d = i(74370),
          h = i(49617),
          u = i(98409),
          c = i(11043),
          p = i(58996),
          g = i(45921);
        (0, g.registerType)(
          c.EBaseType.Annotation,
          n.EAnnotationType.RenderContextAxisMarkerAnnotation,
          (e) => new r.AxisMarkerAnnotation(e),
          !0
        ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.RenderContextBoxAnnotation,
            (e) => new s.BoxAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.RenderContextHorizontalLineAnnotation,
            (e) => new a.HorizontalLineAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.RenderContextLineAnnotation,
            (e) => new l.LineAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.RenderContextVerticalLineAnnotation,
            (e) => new u.VerticalLineAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.SVGTextAnnotation,
            (e) => new h.TextAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.SVGCustomAnnotation,
            (e) => new o.CustomAnnotation(e),
            !0
          ),
          (0, g.registerType)(
            c.EBaseType.Annotation,
            n.EAnnotationType.RenderContextNativeTextAnnotation,
            (e) => new d.NativeTextAnnotation(e),
            !0
          ),
          (t.buildAnnotations = (e) => {
            "string" == typeof e && (e = JSON.parse(e, p.chartReviver));
            const t = [];
            if (Array.isArray(e))
              for (const i of e)
                t.push(
                  (0, g.createType)(
                    c.EBaseType.Annotation,
                    i.type,
                    null,
                    i.options
                  )
                );
            else
              t.push(
                (0, g.createType)(
                  c.EBaseType.Annotation,
                  e.type,
                  null,
                  e.options
                )
              );
            return t;
          });
      },
      25924: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.buildAxes = void 0);
        const r = i(59516),
          s = i(2296),
          o = i(78471),
          a = i(48767),
          n = i(39920),
          l = i(92596),
          d = i(68695),
          h = i(18184),
          u = i(51392),
          c = i(54948),
          p = i(2192),
          g = i(11043),
          y = i(40359),
          f = i(58996),
          v = i(45921);
        (0, v.registerType)(
          g.EBaseType.LabelProvider,
          y.ELabelProviderType.Numeric,
          (e) => new n.NumericLabelProvider(e),
          !0
        ),
          (0, v.registerType)(
            g.EBaseType.LabelProvider,
            y.ELabelProviderType.Date,
            (e) => new o.DateLabelProvider(e),
            !0
          ),
          (0, v.registerType)(
            g.EBaseType.LabelProvider,
            y.ELabelProviderType.Logarithmic,
            (e) => new a.LogarithmicLabelProvider(e),
            !0
          ),
          (0, v.registerType)(
            g.EBaseType.LabelProvider,
            y.ELabelProviderType.SmartDate,
            (e) => new d.SmartDateLabelProvider(),
            !0
          ),
          (0, v.registerType)(
            g.EBaseType.LabelProvider,
            y.ELabelProviderType.Text,
            (e) => new h.TextLabelProvider(e),
            !0
          ),
          (0, v.registerType)(
            g.EBaseType.LabelProvider,
            y.ELabelProviderType.Pie,
            (e) => new l.PieLabelProvider(e),
            !0
          ),
          (t.buildAxes = (e, t) => {
            "string" == typeof t && (t = JSON.parse(t, f.chartReviver));
            const i = [];
            if (Array.isArray(t)) for (const r of t) i.push(m(e, r));
            else i.push(m(e, t));
            return i;
          });
        const m = (e, t) => {
          let i;
          switch (t.type) {
            case p.EAxisType.CategoryAxis:
              i = new r.CategoryAxis(e, t.options);
              break;
            case p.EAxisType.NumericAxis:
              i = new c.NumericAxis(e, t.options);
              break;
            case p.EAxisType.LogarithmicAxis:
              i = new u.LogarithmicAxis(e, t.options);
              break;
            case p.EAxisType.DateTimeNumericAxis:
              i = new s.DateTimeNumericAxis(e, t.options);
              break;
            default:
              i = new c.NumericAxis(e, {});
          }
          return i;
        };
      },
      44544: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.buildDataSeries = void 0);
        const r = i(58465),
          s = i(73165),
          o = i(26974),
          a = i(95632),
          n = i(55007),
          l = i(39892),
          d = i(91154),
          h = i(92475),
          u = i(22382),
          c = i(51885),
          p = i(43427),
          g = i(35471),
          y = i(15799),
          f = i(9682),
          v = i(29803),
          m = i(75650),
          S = i(35508),
          P = i(51097),
          C = i(58996);
        t.buildDataSeries = (e, t, i, r) => {
          if (!t) return;
          let s, o;
          if (
            ("string" == typeof t && (t = JSON.parse(t, C.chartReviver)),
            "string" == typeof i && (i = JSON.parse(i, C.chartReviver)),
            (s = b(e, t, i)),
            "filter" in t.options && (o = t.options.filter),
            o &&
              t.type !== c.EDataSeriesType.HeatmapUniform &&
              t.type !== c.EDataSeriesType.HeatmapNonUniform &&
              s)
          ) {
            const e = x(null != r ? r : s, o);
            e && (s = e);
          }
          return s;
        };
        const x = (e, t) => {
            if (t.type === P.EDataFilterType.HlcScaleOffset)
              return new r.HlcScaleOffsetFilter(e, t.options);
            if (t.type === P.EDataFilterType.OhlcScaleOffset)
              return new s.OhlcScaleOffsetFilter(e, t.options);
            if (t.type === P.EDataFilterType.XyLinearTrend)
              return new o.XyLinearTrendFilter(e, t.options);
            if (t.type === P.EDataFilterType.XyMovingAverage)
              return new a.XyMovingAverageFilter(e, t.options);
            if (t.type === P.EDataFilterType.XyRatio) {
              const i = t.options;
              if (Array.isArray(i.divisorSeries)) {
                const r = new Array(e.count()).fill(0);
                t.options.divisorSeries = new f.XyDataSeries(
                  e.webAssemblyContext,
                  { xValues: r, yValues: i.divisorSeries }
                );
              }
              return new n.XyRatioFilter(e, t.options);
            }
            return t.type === P.EDataFilterType.XyScaleOffset
              ? new l.XyScaleOffsetFilter(e, t.options)
              : t.type === P.EDataFilterType.XyyScaleOffset
              ? new d.XyyScaleOffsetFilter(e, t.options)
              : t.type === P.EDataFilterType.XyzScaleOffset
              ? new h.XyzScaleOffsetFilter(e, t.options)
              : void 0;
          },
          b = (e, t, i) => {
            const r = Object.assign({}, t.options);
            switch (t.type) {
              case c.EDataSeriesType.Xy: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]), (t.yValues = i[t.yDataId])),
                  new f.XyDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.Xyy: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]),
                    (t.yValues = i[t.yDataId]),
                    (t.y1Values = i[t.y1DataId])),
                  new m.XyyDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.Xyz: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]),
                    (t.yValues = i[t.yDataId]),
                    (t.zValues = i[t.zDataId])),
                  new S.XyzDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.XyText: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]), (t.yValues = i[t.yDataId])),
                  new v.XyTextDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.Hlc: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]),
                    (t.highValues = i[t.highDataId]),
                    (t.lowValues = i[t.lowDataId]),
                    (t.yValues = i[t.closeDataId])),
                  new u.HlcDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.Ohlc: {
                const t = r;
                return (
                  i &&
                    t.xDataId &&
                    ((t.xValues = i[t.xDataId]),
                    (t.openValues = i[t.openDataId]),
                    (t.highValues = i[t.highDataId]),
                    (t.lowValues = i[t.lowDataId]),
                    (t.closeValues = i[t.closeDataId])),
                  new g.OhlcDataSeries(e, t)
                );
              }
              case c.EDataSeriesType.HeatmapUniform: {
                const t = r;
                return new y.UniformHeatmapDataSeries(e, t);
              }
              case c.EDataSeriesType.HeatmapNonUniform: {
                const t = r;
                return new p.NonUniformHeatmapDataSeries(e, t);
              }
              default:
                return ((e) => {
                  throw new Error(`Invalid Data Series Type value: "${e}"!`);
                })(t.type);
            }
          };
      },
      96841: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.buildModifiers = void 0);
        const r = i(62773),
          s = i(71575),
          o = i(9656),
          a = i(56985),
          n = i(55526),
          l = i(21562),
          d = i(63903),
          h = i(96408),
          u = i(18809),
          c = i(32545),
          p = i(9809),
          g = i(3397),
          y = i(63407),
          f = i(64171),
          v = i(11043),
          m = i(89955),
          S = i(58996),
          P = i(45921),
          C = i(49975);
        (0, P.registerType)(
          v.EBaseType.Chart2DModifier,
          m.EChart2DModifierType.Cursor,
          (e) => new r.CursorModifier(e),
          !0
        ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.DataPointSelection,
            (e) => new s.DataPointSelectionModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.MouseWheelZoom,
            (e) => new a.MouseWheelZoomModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.PinchZoom,
            (e) => new l.PinchZoomModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.Rollover,
            (e) => new d.RolloverModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.VerticalSlice,
            (e) => new h.VerticalSliceModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.RubberBandXYZoom,
            (e) => new u.RubberBandXyZoomModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.SeriesSelection,
            (e) => new c.SeriesSelectionModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.AnnotationHover,
            (e) => new C.AnnotationHoverModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.XAxisDrag,
            (e) => new p.XAxisDragModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.YAxisDrag,
            (e) => new g.YAxisDragModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.ZoomExtents,
            (e) => new y.ZoomExtentsModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.ZoomPan,
            (e) => new f.ZoomPanModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.OverviewRangeSelection,
            (e) => new n.OverviewRangeSelectionModifier(e),
            !0
          ),
          (0, P.registerType)(
            v.EBaseType.Chart2DModifier,
            m.EChart2DModifierType.Legend,
            (e) => new o.LegendModifier(e),
            !0
          ),
          (t.buildModifiers = (e) => {
            "string" == typeof e && (e = JSON.parse(e, S.chartReviver));
            const t = [];
            if (Array.isArray(e)) for (const i of e) t.push(x(i));
            else t.push(x(e));
            return t;
          });
        const x = (e) =>
          e.type === m.EChart2DModifierType.Custom
            ? (0, P.createType)(
                v.EBaseType.Chart2DModifier,
                e.customType,
                null,
                e.options
              )
            : (0, P.createType)(
                v.EBaseType.Chart2DModifier,
                e.type,
                null,
                e.options
              );
      },
      12193: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.buildSeries = void 0);
        const r = i(75619),
          s = i(51885),
          o = i(33906),
          a = i(52881),
          n = i(22745),
          l = i(10749),
          d = i(21033),
          h = i(77057),
          u = i(58229),
          c = i(61704),
          p = i(62314),
          g = i(56705),
          y = i(592),
          f = i(56498),
          v = i(81856),
          m = i(15273),
          S = i(1367),
          P = i(9488),
          C = i(96852),
          x = i(75933),
          b = i(33802),
          A = i(31544),
          T = i(1126),
          E = i(98550),
          R = i(11555),
          w = i(12641),
          D = i(20667),
          L = i(43852),
          M = i(93522),
          I = i(65297),
          O = i(72362),
          k = i(95179),
          _ = i(89078),
          V = i(21037),
          N = i(50085),
          F = i(68264),
          B = i(78146),
          H = i(32471),
          z = i(86109),
          Y = i(56664),
          G = i(1406),
          X = i(83262),
          j = i(71719),
          W = i(1391),
          U = i(88189),
          $ = i(70033),
          q = i(52954),
          K = i(10763),
          Z = i(11043),
          J = i(2963),
          Q = i(28436),
          ee = i(30323),
          te = i(5337),
          ie = i(75323),
          re = i(44544),
          se = i(58996),
          oe = i(45921);
        function ae(e, t) {
          return e.hasOwnProperty(t);
        }
        (0, oe.registerWasmType)(
          Z.EBaseType.PointMarker,
          ee.EPointMarkerType.Cross,
          (e, t) => new n.CrossPointMarker(e, t),
          !0
        ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PointMarker,
            ee.EPointMarkerType.Ellipse,
            (e, t) => new l.EllipsePointMarker(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PointMarker,
            ee.EPointMarkerType.Sprite,
            (e, t) => new d.SpritePointMarker(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PointMarker,
            ee.EPointMarkerType.Square,
            (e, t) => new h.SquarePointMarker(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PointMarker,
            ee.EPointMarkerType.Triangle,
            (e, t) => new u.TrianglePointMarker(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PointMarker,
            ee.EPointMarkerType.X,
            (e, t) => new c.XPointMarker(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.ShaderEffect,
            ie.EShaderEffectType.Glow,
            (e, t) => new V.GlowEffect(e, t),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.ShaderEffect,
            ie.EShaderEffectType.Shadow,
            (e, t) => new F.ShadowEffect(e, t),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.Animation,
            K.EAnimationType.Fade,
            (e) => new p.FadeAnimation(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.Animation,
            K.EAnimationType.Scale,
            (e) => new g.ScaleAnimation(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.Animation,
            K.EAnimationType.Sweep,
            (e) => new y.SweepAnimation(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.Animation,
            K.EAnimationType.Wave,
            (e) => new f.WaveAnimation(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Default,
            (e) => new C.DataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Line,
            (e) => new b.LineSeriesDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Column,
            (e) => new S.ColumnSeriesDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Text,
            (e) => new T.TextDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Heatmap,
            (e) => new x.HeatMapDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.NonUniformHeatmap,
            (e) => new A.NonUniformHeatMapDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Bubble,
            (e) => new m.BubbleSeriesDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Band,
            (e) => new v.BandSeriesDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.DataLabelProvider,
            J.EDataLabelProviderType.Contours,
            (e) => new P.ContoursDataLabelProvider(e),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.MetadataGenerator,
            "Template",
            (e) => new o.TemplateMetadataGenerator(e),
            !0
          ),
          (0, oe.registerWasmType)(
            Z.EBaseType.PaletteProvider,
            Q.EPaletteProviderType.Gradient,
            (e, t) => a.PaletteFactory.createGradient(e, t),
            !0
          ),
          (0, oe.registerType)(
            Z.EBaseType.PaletteProvider,
            Q.EPaletteProviderType.DataPointSelection,
            (e) => new r.DataPointSelectionPaletteProvider(e),
            !0
          ),
          (t.buildSeries = (e, i, r) => {
            "string" == typeof i && (i = JSON.parse(i, se.chartReviver)),
              "string" == typeof r && (r = JSON.parse(r, se.chartReviver));
            const s = [];
            Array.isArray(i) || (i = [i]);
            for (const o of i) {
              let i;
              if (o.type === te.ESeriesType.BandSeries)
                i = new E.FastBandRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.BubbleSeries)
                i = new R.FastBubbleRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.CandlestickSeries)
                i = new w.FastCandlestickRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.ColumnSeries)
                i = new D.FastColumnRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.ImpulseSeries)
                i = new M.FastImpulseRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.LineSeries)
                i = new I.FastLineRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.MountainSeries)
                i = new O.FastMountainRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.ErrorBarsSeries)
                i = new L.FastErrorBarsRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.OhlcSeries)
                i = new k.FastOhlcRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.ScatterSeries)
                i = new q.XyScatterRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.SplineBandSeries)
                i = new B.SplineBandRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.SplineLineSeries)
                i = new H.SplineLineRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.SplineMountainSeries)
                i = new z.SplineMountainRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.UniformHeatmapSeries)
                i = new $.UniformHeatmapRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.NonUniformHeatmapSeries)
                i = new N.NonUniformHeatmapRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.UniformContoursSeries)
                i = new U.UniformContoursRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.TextSeries)
                i = new _.FastTextRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.StackedColumnSeries)
                i = new X.StackedColumnRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.StackedMountainSeries)
                i = new W.StackedMountainRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.SmoothStackedMountainSeries)
                i = new Y.SmoothStackedMountainRenderableSeries(e, o.options);
              else if (o.type === te.ESeriesType.StackedColumnCollection) {
                const s = new G.StackedColumnCollection(e, o.options);
                s.add(...(0, t.buildSeries)(e, o.series, r)), (i = s);
              } else if (o.type === te.ESeriesType.StackedMountainCollection) {
                const s = new j.StackedMountainCollection(e, o.options);
                s.add(...(0, t.buildSeries)(e, o.series, r)), (i = s);
              }
              if (i) {
                const t = ne(e, o, r);
                t && (i.dataSeries = t);
              }
              i && s.push(i);
            }
            return s;
          });
        const ne = (e, t, i) => {
          const r = ae((o = t), "xyData")
            ? { type: s.EDataSeriesType.Xy, options: o.xyData }
            : ae(o, "xyyData")
            ? { type: s.EDataSeriesType.Xyy, options: o.xyyData }
            : ae(o, "xyzData")
            ? { type: s.EDataSeriesType.Xyz, options: o.xyzData }
            : ae(o, "xyTextData")
            ? { type: s.EDataSeriesType.XyText, options: o.xyTextData }
            : ae(o, "hlcData")
            ? { type: s.EDataSeriesType.Hlc, options: o.hlcData }
            : ae(o, "ohlcData")
            ? { type: s.EDataSeriesType.Ohlc, options: o.ohlcData }
            : !ae(o, "heatmapData") ||
              (o.type !== te.ESeriesType.UniformHeatmapSeries &&
                o.type !== te.ESeriesType.UniformContoursSeries)
            ? ae(o, "heatmapData") &&
              o.type === te.ESeriesType.NonUniformHeatmapSeries
              ? {
                  type: s.EDataSeriesType.HeatmapNonUniform,
                  options: o.heatmapData,
                }
              : void 0
            : {
                type: s.EDataSeriesType.HeatmapUniform,
                options: o.heatmapData,
              };
          var o;
          if (r)
            return t.options &&
              "dataSeries" in t.options &&
              t.options.dataSeries &&
              r.options &&
              "filter" in r.options &&
              r.options.filter
              ? (0, re.buildDataSeries)(e, r, i, t.options.dataSeries)
              : (0, re.buildDataSeries)(e, r, i);
        };
      },
      64931: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.configure2DSurface = t.buildPieChart = t.build2DChart = void 0);
        const s = i(60872),
          o = i(53521),
          a = i(57384),
          n = i(70397),
          l = i(45481),
          d = i(83638),
          h = i(6153),
          u = i(55173),
          c = i(24478),
          p = i(27282),
          g = i(12119),
          y = i(27194),
          f = i(73145),
          v = i(55696),
          m = i(66010),
          S = i(99016),
          P = i(2705),
          C = i(60819),
          x = i(54948),
          b = i(66570),
          A = i(57419),
          T = i(79548),
          E = i(84626),
          R = i(11043),
          w = i(28709),
          D = i(73785),
          L = i(71993),
          M = i(25924),
          I = i(96841),
          O = i(12193),
          k = i(58996),
          _ = i(45921),
          V = i(62916),
          N = i(68021);
        function F(e, t, i) {
          if (
            (e.xAxes && t.xAxes.add(...(0, M.buildAxes)(i, e.xAxes)),
            0 !== t.xAxes.size() ||
              e.subCharts ||
              t.xAxes.add(new x.NumericAxis(i)),
            e.yAxes && t.yAxes.add(...(0, M.buildAxes)(i, e.yAxes)),
            0 !== t.yAxes.size() ||
              e.subCharts ||
              t.yAxes.add(new x.NumericAxis(i)),
            e.series &&
              t.renderableSeries.add(
                ...(0, O.buildSeries)(i, e.series, e.sharedData)
              ),
            e.modifiers &&
              t.chartModifiers.add(...(0, I.buildModifiers)(e.modifiers)),
            e.annotations &&
              t.annotations.add(...(0, L.buildAnnotations)(e.annotations)),
            e.subCharts && !t.isSubSurface)
          )
            for (const r of e.subCharts) F(r, t.addSubChart(r.surface), i);
        }
        (0, _.registerType)(
          R.EBaseType.ThemeProvider,
          V.EThemeProviderType.Light,
          () => new C.SciChartJSLightTheme(),
          !0
        ),
          (0, _.registerType)(
            R.EBaseType.ThemeProvider,
            V.EThemeProviderType.DarkV2,
            () => new P.SciChartJSDarkv2Theme(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.ThemeProvider,
            V.EThemeProviderType.Dark,
            () => new S.SciChartJSDarkTheme(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.ThemeProvider,
            V.EThemeProviderType.Navy,
            () => new m.SciChartJsNavyTheme(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutManager,
            w.ELayoutManagerType.Default,
            (e) => new l.LayoutManager(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutManager,
            w.ELayoutManagerType.CentralAxes,
            (e) => new n.CentralAxesLayoutManager(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.BottomInner,
            (e) => new s.BottomAlignedInnerAxisLayoutStrategy(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.BottomOuter,
            (e) => new o.BottomAlignedOuterAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.BottomStacked,
            (e) =>
              new a.BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.LeftInner,
            (e) => new d.LeftAlignedInnerAxisLayoutStrategy(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.LeftOuter,
            (e) => new h.LeftAlignedOuterAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.LeftStacked,
            (e) => new u.LeftAlignedOuterVerticallyStackedAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.RightInner,
            (e) => new c.RightAlignedInnerAxisLayoutStrategy(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.RightOuter,
            (e) => new p.RightAlignedOuterAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.RightStacked,
            (e) => new g.RightAlignedOuterVerticallyStackedAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.TopInner,
            (e) => new y.TopAlignedInnerAxisLayoutStrategy(e),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.TopOuter,
            (e) => new f.TopAlignedOuterAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.LayoutStrategy,
            D.ELayoutStrategyType.TopStacked,
            (e) => new v.TopAlignedOuterHorizontallyStackedAxisLayoutStrategy(),
            !0
          ),
          (0, _.registerType)(
            R.EBaseType.Loader,
            "Default",
            () => new b.DefaultSciChartLoader(),
            !0
          ),
          (t.build2DChart = (e, t) =>
            r(void 0, void 0, void 0, function* () {
              var i;
              let r;
              "string" == typeof t && (t = JSON.parse(t, k.chartReviver)),
                (r = (null == t ? void 0 : t.createSingle)
                  ? yield E.SciChartSurface.createSingle(
                      e,
                      null == t ? void 0 : t.surface
                    )
                  : yield E.SciChartSurface.create(
                      e,
                      null == t ? void 0 : t.surface
                    ));
              let { wasmContext: s, sciChartSurface: o } = r;
              const a = N.PerformanceDebugHelper.mark(
                N.EPerformanceMarkType.SetupStart,
                { contextId: o.id }
              );
              return (
                F(t, o, s),
                t.onCreated &&
                  ("string" == typeof t.onCreated &&
                    ((o.onCreatedName = t.onCreated),
                    (t.onCreated = (0, _.getFunction)(
                      R.EBaseType.OnCreateFunction,
                      t.onCreated
                    ))),
                  yield t.onCreated(o)),
                N.PerformanceDebugHelper.mark(N.EPerformanceMarkType.SetupEnd, {
                  contextId: o.id,
                  relatedId:
                    null === (i = null == a ? void 0 : a.detail) || void 0 === i
                      ? void 0
                      : i.relatedId,
                }),
                { wasmContext: s, sciChartSurface: o }
              );
            })),
          (t.buildPieChart = (e, t) =>
            r(void 0, void 0, void 0, function* () {
              "string" == typeof t && (t = JSON.parse(t, k.chartReviver));
              const i = yield T.SciChartPieSurface.create(
                e,
                null == t ? void 0 : t.surface
              );
              if (null == t ? void 0 : t.segments)
                for (const e of null == t ? void 0 : t.segments) {
                  const t = new A.PieSegment(e);
                  i.pieSegments.add(t);
                }
              return (
                t.onCreated &&
                  ("string" == typeof t.onCreated &&
                    ((i.onCreatedName = t.onCreated),
                    (t.onCreated = (0, _.getFunction)(
                      R.EBaseType.OnCreateFunction,
                      t.onCreated
                    ))),
                  t.onCreated(i)),
                i
              );
            })),
          (t.configure2DSurface = F);
      },
      58996: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.chartBuilder =
            t.ensureRegistrations =
            t.configureChart =
            t.buildChart =
            t.chartReviver =
              void 0);
        const s = i(98140),
          o = i(87108),
          a = i(91465),
          n = i(71993),
          l = i(25924),
          d = i(44544),
          h = i(96841),
          u = i(12193),
          c = i(64931),
          p = i(45921);
        function g(e, t) {
          switch (e) {
            case "visibleRange":
            case "visibleRangeLimit":
            case "growBy":
              return new s.NumberRange(t.min, t.max);
            case "padding":
              const e = t;
              return new o.Thickness(e.top, e.right, e.bottom, e.left);
            default:
              return null === t ? NaN : t;
          }
        }
        (t.chartReviver = g),
          (t.buildChart = (e, t) =>
            r(void 0, void 0, void 0, function* () {
              if (
                ("string" == typeof t && (t = JSON.parse(t, g)),
                t || (t = {}),
                "type" in t)
              ) {
                if (t.type === a.ESciChartSurfaceType.Default2D)
                  return yield (0, c.build2DChart)(e, t.options);
                if (t.type === a.ESciChartSurfaceType.Pie2D)
                  return yield (0, c.buildPieChart)(e, t.options);
                throw new Error(
                  `Surface type: ${t.type} is not yet supported by the builder api`
                );
              }
              return yield (0, c.build2DChart)(e, t);
            })),
          (t.configureChart = (e, t, i) => {
            if (
              ("string" == typeof i && (i = JSON.parse(i, g)),
              i || (i = {}),
              "type" in i)
            ) {
              if (i.type === a.ESciChartSurfaceType.Default2D)
                (0, c.configure2DSurface)(i.options, e, t);
              else if (i.type !== a.ESciChartSurfaceType.Pie2D)
                throw new Error(
                  `Surface type: ${i.type} is not yet supported by the builder api`
                );
            } else (0, c.configure2DSurface)(i, e, t);
          }),
          (t.ensureRegistrations = () => {}),
          (t.chartBuilder = {
            buildChart: t.buildChart,
            chartReviver: g,
            build2DChart: c.build2DChart,
            buildPieChart: c.buildPieChart,
            configureChart: t.configureChart,
            buildSeries: u.buildSeries,
            buildDataSeries: d.buildDataSeries,
            buildModifiers: h.buildModifiers,
            buildAxes: l.buildAxes,
            buildAnnotations: n.buildAnnotations,
            registerType: p.registerType,
            registerWasmType: p.registerWasmType,
            registerFunction: p.registerFunction,
          });
      },
      45921: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getSubTypes =
            t.createType =
            t.getFunction =
            t.registerFunction =
            t.registerWasmType =
            t.registerType =
              void 0);
        const i = new Map();
        (t.registerType = (e, t, r, s = !1) => {
          const o = e + ":" + t;
          if (i.has(o) && !s)
            throw new Error(
              "Type " +
                o +
                " is already registered.  Call with overWrite: true if you intended to replace it."
            );
          i.set(o, { func: r });
        }),
          (t.registerWasmType = (e, t, r, s = !1) => {
            const o = e + ":" + t;
            if (i.has(o) && !s)
              throw new Error(
                "Type " +
                  o +
                  " is already registered.  Call with overWrite: true if you intended to replace it."
              );
            i.set(o, { wasm: !0, func: r });
          }),
          (t.registerFunction = (e, t, r, s = !1) => {
            const o = e + ":" + t;
            if (i.has(o) && !s)
              throw new Error(
                "Function " +
                  o +
                  " is already registered.  Call with overWrite: true if you intended to replace it."
              );
            i.set(o, { func: r });
          }),
          (t.getFunction = (e, t) => {
            const r = e + ":" + t,
              s = i.get(r);
            if (s) return s.func;
            throw new Error("Nothing registered for " + r);
          }),
          (t.createType = (e, t, r, s) => {
            const o = e + ":" + t,
              a = i.get(o);
            if (a) {
              const { wasm: e, func: t } = a;
              return e ? t(r, s) : t(s);
            }
            throw new Error("Nothing registered for " + o);
          }),
          (t.getSubTypes = (e) =>
            Array.from(i.keys())
              .map((e) => e.split(":"))
              .filter((t) => t[0] === e)
              .map((e) => e[1]));
      },
      3810: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CameraController = t.ECameraProjectionMode = void 0);
        const r = i(3214),
          s = i(23866),
          o = i(50605),
          a = i(16110),
          n = i(17542);
        var l;
        !(function (e) {
          (e.Perspective = "Perspective"), (e.Orthogonal = "Orthogonal");
        })((l = t.ECameraProjectionMode || (t.ECameraProjectionMode = {}))),
          (t.CameraController = class {
            constructor(e, t) {
              var i;
              (this.aspectRatioProperty = 1.5),
                (this.idProperty = "Default"),
                (this.farClipProperty = 4e3),
                (this.fieldOfViewProperty = 60),
                (this.nearClipProperty = 1),
                (this.orbitalPitchProperty = 0),
                (this.orbitalYawProperty = 0),
                (this.orthoHeightProperty = 400),
                (this.orthoWidthProperty = 600),
                (this.positionProperty = a.Vector3.zero),
                (this.projectionModeProperty = l.Perspective),
                (this.targetProperty = a.Vector3.zero),
                (this.webAssemblyContext = e),
                (this.propertyChanged = new r.EventHandler()),
                this.resetToDefaults(),
                (this.position =
                  (null == t ? void 0 : t.position) || this.position),
                (this.target = (null == t ? void 0 : t.target) || this.target),
                (this.id = (null == t ? void 0 : t.id) || this.id),
                (this.debugPositionsProperty =
                  null !== (i = null == t ? void 0 : t.debugPositions) &&
                  void 0 !== i &&
                  i);
            }
            get id() {
              return this.idProperty;
            }
            set id(e) {
              (this.idProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_ID);
            }
            get orthoHeight() {
              return this.orthoHeightProperty;
            }
            set orthoHeight(e) {
              this.orthoHeightProperty !== e &&
                ((this.orthoHeightProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_ORTHOHEIGHT));
            }
            get orthoWidth() {
              return this.orthoWidthProperty;
            }
            set orthoWidth(e) {
              this.orthoWidthProperty !== e &&
                ((this.orthoWidthProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_ORTHOWIDTH));
            }
            get projectionMode() {
              return this.projectionModeProperty;
            }
            set projectionMode(e) {
              this.projectionModeProperty !== e &&
                ((this.projectionModeProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_PROJECTIONMODE));
            }
            get aspectRatio() {
              return this.aspectRatioProperty;
            }
            set aspectRatio(e) {
              this.aspectRatioProperty !== e &&
                ((this.aspectRatioProperty = e),
                (this.orthoWidth = this.orthoHeight * this.aspectRatioProperty),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_ASPECTRATIO));
            }
            get isAttached() {
              return this.isAttachedProperty;
            }
            set isAttached(e) {
              (this.isAttachedProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_ISATTACHED);
            }
            get radius() {
              return this.target.subtract(this.position).length;
            }
            set radius(e) {
              e <= 1 && (e = 1),
                this.radius !== e &&
                  ((this.position = this.target.subtract(
                    this.forward.scalarMultiply(e)
                  )),
                  this.notifyPropertyChanged(n.PROPERTY.CAMERA_RADIUS));
            }
            get orbitalPitch() {
              return this.orbitalPitchProperty;
            }
            set orbitalPitch(e) {
              if (this.orbitalPitchProperty === e) return;
              this.orbitalPitchProperty = e > 90 ? 89.9 : e < -90 ? -89.9 : e;
              const t = this.webAssemblyContext.Math3D.PitchAndYawToDirection(
                this.orbitalPitchProperty,
                this.orbitalYawProperty
              );
              try {
                let e = new a.Vector3(t.x, t.y, t.z);
                (e = e.scalarMultiply(this.radius)),
                  (this.position = this.target.subtract(e)),
                  this.notifyPropertyChanged(n.PROPERTY.CAMERA_ORBITALPITCH);
              } finally {
                null == t || t.delete();
              }
            }
            get orbitalYaw() {
              return this.orbitalYawProperty;
            }
            set orbitalYaw(e) {
              if (this.orbitalYawProperty === e) return;
              this.orbitalYawProperty = e;
              const t = this.webAssemblyContext.Math3D.PitchAndYawToDirection(
                this.orbitalPitchProperty,
                this.orbitalYawProperty
              );
              try {
                let e = new a.Vector3(t.x, t.y, t.z);
                (e = e.scalarMultiply(this.radius)),
                  (this.position = this.target.subtract(e)),
                  this.notifyPropertyChanged(n.PROPERTY.CAMERA_ORBITALYAW);
              } finally {
                null == t || t.delete();
              }
            }
            get farClip() {
              return this.farClipProperty;
            }
            set farClip(e) {
              (this.farClipProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_FARCLIP);
            }
            get nearClip() {
              return this.nearClipProperty;
            }
            set nearClip(e) {
              (this.nearClipProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_NEARCLIP);
            }
            get fieldOfView() {
              return this.fieldOfViewProperty;
            }
            set fieldOfView(e) {
              (this.fieldOfViewProperty = e),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_FIELDOFVIEW);
            }
            get upGlobal() {
              return new a.Vector3(0, 1, 0);
            }
            get side() {
              const e = this.forward,
                t = e
                  .crossProduct(this.upGlobal)
                  .crossProduct(e)
                  .crossProduct(e);
              return t.normalize(), t;
            }
            get forward() {
              const e = this.target.subtract(this.position);
              return e.normalize(), e;
            }
            get up() {
              const e = this.forward,
                t = e.crossProduct(this.upGlobal).crossProduct(e);
              return t.normalize(), t;
            }
            get target() {
              return this.targetProperty;
            }
            set target(e) {
              if (this.targetProperty === e) return;
              let t, i;
              this.targetProperty = e;
              try {
                (t = this.forward.toTsrVector3(this.webAssemblyContext)),
                  (i =
                    this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(t)),
                  (this.orbitalPitchProperty = i.pitch),
                  (this.orbitalYawProperty = i.yaw),
                  this.notifyPropertyChanged(n.PROPERTY.CAMERA_TARGET);
              } finally {
                null == t || t.delete(), null == i || i.delete();
              }
            }
            get position() {
              return this.positionProperty;
            }
            set position(e) {
              if (this.positionProperty === e) return;
              let t, i;
              this.positionProperty = e;
              try {
                (t = this.forward.toTsrVector3(this.webAssemblyContext)),
                  (i =
                    this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(t)),
                  (this.orbitalPitchProperty = i.pitch),
                  (this.orbitalYawProperty = i.yaw),
                  this.notifyPropertyChanged(n.PROPERTY.CAMERA_POSITION);
              } finally {
                null == t || t.delete(), null == i || i.delete();
              }
            }
            toOrthogonal() {
              this.projectionModeProperty !== l.Orthogonal &&
                ((this.projectionModeProperty = l.Orthogonal),
                (this.orthoWidthProperty = this.radius),
                (this.orthoHeightProperty = this.orthoWidth / this.aspectRatio),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_PROJECTIONMODE));
            }
            toPerspective() {
              this.projectionModeProperty !== l.Perspective &&
                ((this.projectionModeProperty = l.Perspective),
                (this.radius = this.orthoWidth),
                this.notifyPropertyChanged(n.PROPERTY.CAMERA_PROJECTIONMODE));
            }
            resetToDefaults() {
              let e, t;
              (this.positionProperty = new a.Vector3(-1e3, 1e3, -1e3)),
                (this.targetProperty = new a.Vector3(0, 0, 0)),
                (this.fieldOfViewProperty = 60),
                (this.nearClipProperty = 1),
                (this.farClipProperty = 4e3),
                (this.projectionModeProperty = l.Perspective),
                (this.aspectRatioProperty = 1.5),
                (this.orthoWidthProperty = 600),
                (this.orthoHeightProperty = 400);
              try {
                (e = this.forward.toTsrVector3(this.webAssemblyContext)),
                  (t =
                    this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(e)),
                  (this.orbitalPitch = t.pitch),
                  (this.orbitalYaw = t.yaw);
              } finally {
                null == t || t.delete(), null == e || e.delete();
              }
            }
            updateEngineCamera(e) {
              let t, i, r;
              s.Guard.notNull(e, "tsrCamera");
              try {
                (t = this.position.toTsrVector3(this.webAssemblyContext)),
                  (i = this.target.toTsrVector3(this.webAssemblyContext)),
                  (r = this.up.toTsrVector3(this.webAssemblyContext)),
                  e.SetLoc(t),
                  e.SetAt(i),
                  e.SetFarClip(this.farClip),
                  e.SetNearClip(this.nearClip),
                  e.SetFovAngle(
                    this.webAssemblyContext.Math3D.DegToRad(this.fieldOfView)
                  ),
                  e.SetProjectionMode(
                    this.projectionMode === l.Perspective
                      ? this.webAssemblyContext.eTSRCameraProjectionMode
                          .CAMERA_PROJECTIONMODE_PERSPECTIVE
                      : this.webAssemblyContext.eTSRCameraProjectionMode
                          .CAMERA_PROJECTIONMODE_ORTHOGONAL
                  ),
                  e.SetOrthoWidth(this.orthoWidth),
                  e.SetOrthoHeight(this.orthoHeight),
                  e.SetAspectRatio(this.aspectRatio),
                  e.SetYaw(
                    this.webAssemblyContext.Math3D.DegToRad(this.orbitalYaw)
                  ),
                  e.SetPitch(
                    this.webAssemblyContext.Math3D.DegToRad(this.orbitalPitch)
                  ),
                  e.SetUp(r);
              } finally {
                null == t || t.delete(),
                  null == i || i.delete(),
                  null == r || r.delete();
              }
            }
            notifyPropertyChanged(e) {
              var t;
              !this.debugPositionsProperty ||
                (e !== n.PROPERTY.CAMERA_POSITION &&
                  e !== n.PROPERTY.CAMERA_TARGET) ||
                console.log(
                  `SciChart.js Camera P=${this.position.toString()}, T=${this.target.toString()}`
                ),
                null === (t = this.propertyChanged) ||
                  void 0 === t ||
                  t.raiseEvent(new o.PropertyChangedEventArgs(e));
            }
            debugOutput() {
              const e = [
                `Camera id='${this.id}': `,
                `  position: ${this.position.toString()}`,
                `  target: ${this.target.toString()}`,
                `  pitch: ${this.orbitalPitch.toFixed(2)} degrees`,
                `  yaw: ${this.orbitalYaw.toFixed(2)} degrees`,
                `  up Vector: ${this.up.toString()}`,
                `  forward Vector: ${this.forward.toString()}`,
                `  projectionMode: ${this.projectionMode}`,
              ];
              return (
                this.projectionMode === l.Orthogonal
                  ? (e.push(`  orthoWidth: ${this.orthoWidth.toFixed(2)}`),
                    e.push(`  orthoHeight: ${this.orthoHeight.toFixed(2)}`))
                  : (e.push(`  radius: ${this.radius.toFixed(2)}`),
                    e.push(
                      `  fieldOfView: ${this.fieldOfView.toFixed(2)} degrees`
                    )),
                e.forEach((e) => console.log(e)),
                e
              );
            }
          });
      },
      63220: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ChartModifierBase3D = void 0);
        const r = i(13063);
        class s extends r.ChartModifierBase {
          constructor(e) {
            super(e), (this.typeMap = new Map());
          }
          get modifierType() {
            return r.EModifierType.Chart3DModifier;
          }
          toJSON() {
            const e = { id: this.id, executeOn: this.executeOn };
            return { type: this.type, options: e };
          }
        }
        t.ChartModifierBase3D = s;
      },
      89577: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CustomChartModifier3D = void 0);
        const r = i(89955),
          s = i(63220);
        class o extends s.ChartModifierBase3D {
          constructor(e) {
            super(e), (this.type = r.EChart3DModifierType.Custom);
          }
        }
        t.CustomChartModifier3D = o;
      },
      47737: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MouseWheelZoomModifier3D = void 0);
        const r = i(89955),
          s = i(3810),
          o = i(63220);
        class a extends o.ChartModifierBase3D {
          constructor(e) {
            super(e),
              (this.type = r.EChart3DModifierType.MouseWheelZoom),
              (this.mouseWheelSensitivity =
                (null == e ? void 0 : e.mouseWheelSensitivity) || 0.1);
          }
          modifierMouseWheel(e) {
            super.modifierMouseWheel(e);
            const t = this.parentSurface;
            if (!t) return;
            const i = t.camera;
            if (!i) return;
            const r = e.mouseWheelDelta,
              o = i.radius,
              a = (o + r * this.mouseWheelSensitivity) / o;
            i.projectionMode === s.ECameraProjectionMode.Perspective
              ? (i.radius *= a)
              : ((i.orthoWidth *= a), (i.orthoHeight *= a)),
              (e.handled = !0);
          }
          toJSON() {
            const e = super.toJSON(),
              t = { mouseWheelSensitivity: this.mouseWheelSensitivity };
            return Object.assign(e.options, t), e;
          }
        }
        t.MouseWheelZoomModifier3D = a;
      },
      17707: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OrbitModifier3D = void 0);
        const r = i(89955),
          s = i(73792);
        class o extends s.PinchZoomModifier3D {
          constructor(e) {
            var t;
            super(e),
              (this.type = r.EChart3DModifierType.Orbit),
              (this.enableZoom = !1),
              (this.enableZoom =
                null !== (t = null == e ? void 0 : e.enableZoom) && void 0 !== t
                  ? t
                  : this.enableZoom);
          }
          modifierMouseDown(e) {
            if (!this.isAttached)
              throw new Error(
                "Should not call OrbitModifier3D.modifierMouseDown if not attached"
              );
            this.executeOn === e.button &&
              (super.modifierMouseDown(e),
              this.activePointerEvents.set(e.pointerId, e));
          }
          modifierMouseMove(e) {
            this.updatePointerInfo(e),
              this.previousPoint &&
                (this.enableZoom &&
                  super.getIsActionAllowed(e) &&
                  super.performModifierAction(e),
                this.getIsActionAllowed(e) && this.performModifierAction(e));
          }
          modifierMouseUp(e) {
            if ((super.modifierMouseUp(e), this.activePointerEvents.size > 0)) {
              const t = this.activePointerEvents.values().next().value;
              e.target.setPointerCapture(t.pointerId);
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = { enableZoom: this.enableZoom };
            return Object.assign(e.options, t), e;
          }
          performModifierAction(e) {
            const t = this.parentSurface.camera;
            if (!t) return;
            const i = e.mousePoint,
              r = 0.2 * (this.previousPoint.x - i.x),
              s = 0.2 * (this.previousPoint.y - i.y);
            (t.orbitalYaw += r), (t.orbitalPitch -= s);
          }
          getIsActionAllowed(e) {
            return !(
              this.activePointerEvents.values().next().value.pointerId !==
                e.pointerId || this.activePointerEvents.size > 1
            );
          }
        }
        t.OrbitModifier3D = o;
      },
      73792: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PinchZoomModifier3D = void 0);
        const r = i(89955),
          s = i(3810),
          o = i(63220);
        class a extends o.ChartModifierBase3D {
          constructor(e) {
            var t;
            super(e),
              (this.growFactor = 0.5),
              (this.type = r.EChart3DModifierType.PinchZoom),
              (this.growFactor =
                null !== (t = null == e ? void 0 : e.growFactor) && void 0 !== t
                  ? t
                  : this.growFactor);
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), !this.isAttached))
              throw new Error(
                "Should not call PinchZoomModifier3D.modifierMouseDown if not attached"
              );
            ("touch" === e.pointerType || "pen" === e.pointerType) &&
              this.activePointerEvents.set(e.pointerId, e);
          }
          modifierMouseMove(e) {
            var t;
            super.modifierMouseMove(e),
              null === (t = this.activePointerEvents.get(e.pointerId)) ||
                void 0 === t ||
                t.mousePoint,
              this.activePointerEvents.has(e.pointerId) &&
                this.activePointerEvents.set(e.pointerId, e),
              this.getIsActionAllowed(e) && this.performModifierAction(e);
          }
          modifierMouseUp(e) {
            super.modifierMouseUp(e), this.removeFromActiveTouchEvents(e);
          }
          toJSON() {
            const e = super.toJSON(),
              t = { growFactor: this.growFactor };
            return Object.assign(e.options, t), e;
          }
          performZoom(e, t, i) {
            const r = this.parentSurface;
            if (!r) return;
            const o = r.camera;
            if (!o) return;
            const a = Math.sqrt(Math.pow(t, 2) + Math.pow(i, 2)),
              n = Math.sqrt(
                Math.pow(this.previousHorizontalTouchPointsDistance, 2) +
                  Math.pow(this.previousVerticalTouchPointsDistance, 2)
              ),
              l = o.radius,
              d = (l + (n - a) * this.growFactor) / l;
            o.projectionMode === s.ECameraProjectionMode.Perspective
              ? (o.radius *= d)
              : ((o.orthoWidth *= d), (o.orthoHeight *= d));
          }
          removeFromActiveTouchEvents(e) {
            this.activePointerEvents.delete(e.pointerId),
              this.activePointerEvents.size < 2 &&
                ((this.previousHorizontalTouchPointsDistance = void 0),
                (this.previousVerticalTouchPointsDistance = void 0));
          }
          performModifierAction(e) {
            const [{ mousePoint: t }, { mousePoint: i }] = Array.from(
                this.activePointerEvents.values()
              ),
              r = Math.abs(t.x - i.x),
              s = Math.abs(t.y - i.y);
            void 0 !== this.previousHorizontalTouchPointsDistance &&
              void 0 !== this.previousVerticalTouchPointsDistance &&
              this.performZoom(e.mousePoint, r, s),
              (this.previousHorizontalTouchPointsDistance = r),
              (this.previousVerticalTouchPointsDistance = s);
          }
          getIsActionAllowed(e) {
            return (
              ("touch" === e.pointerType || "pen" === e.pointerType) &&
              this.activePointerEvents.size >= 2
            );
          }
        }
        t.PinchZoomModifier3D = a;
      },
      68491: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ResetCamera3DModifier = void 0);
        const r = i(33485),
          s = i(10276),
          o = i(70162),
          a = i(89955),
          n = i(3810),
          l = i(63220);
        class d extends l.ChartModifierBase3D {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type = a.EChart3DModifierType.ZoomExtents),
              (this.isAnimated = !0),
              (this.animationDuration = 400),
              (this.easingFunction = s.easing.outExpo),
              (this.isAnimated =
                null === (t = null == e ? void 0 : e.isAnimated) ||
                void 0 === t ||
                t),
              (this.animationDuration =
                null !== (i = null == e ? void 0 : e.animationDuration) &&
                void 0 !== i
                  ? i
                  : 400),
              (null == e ? void 0 : e.easingFunction) &&
                "string" == typeof e.easingFunction &&
                (e.easingFunction = s.easing[e.easingFunction]),
              (this.easingFunction =
                null !== (r = null == e ? void 0 : e.easingFunction) &&
                void 0 !== r
                  ? r
                  : s.easing.outExpo),
              (this.destination = null == e ? void 0 : e.destination);
          }
          onAttach() {
            if (!this.destination) {
              const e = this.parentSurface;
              if (!e) return;
              const t = e.camera;
              if (!t) return;
              this.destination = {
                radius: t.radius,
                pitch: t.orbitalPitch,
                yaw: t.orbitalYaw,
                width: t.orthoWidth,
                height: t.orthoHeight,
              };
            }
          }
          modifierDoubleClick(e) {
            var t, i;
            const s = this.parentSurface;
            if (!s) return;
            const a = s.camera;
            if (a) {
              if (a.projectionMode === n.ECameraProjectionMode.Perspective) {
                const e = new o.GenericAnimation({
                  from: {
                    radius: a.radius,
                    pitch: a.orbitalPitch,
                    yaw: a.orbitalYaw,
                  },
                  to:
                    null !== (t = this.destination) && void 0 !== t
                      ? t
                      : { radius: 1, pitch: 0, yaw: 0 },
                  onAnimate: (e, t, i) => {
                    (a.radius = r.DoubleAnimator.interpolate(
                      e.radius,
                      t.radius,
                      i
                    )),
                      (a.orbitalPitch = r.DoubleAnimator.interpolate(
                        e.pitch,
                        t.pitch,
                        i
                      )),
                      (a.orbitalYaw = r.DoubleAnimator.interpolate(
                        e.yaw,
                        t.yaw,
                        i
                      ));
                  },
                  duration: this.isAnimated ? this.animationDuration : 0,
                  ease: this.easingFunction,
                });
                s.addAnimation(e);
              } else {
                const e = new o.GenericAnimation({
                  from: { width: a.orthoWidth, height: a.orthoHeight },
                  to:
                    null !== (i = this.destination) && void 0 !== i
                      ? i
                      : { width: 1, height: 1 },
                  onAnimate: (e, t, i) => {
                    (a.orthoWidth = r.DoubleAnimator.interpolate(
                      e.width,
                      t.width,
                      i
                    )),
                      (a.orthoHeight = r.DoubleAnimator.interpolate(
                        e.height,
                        t.height,
                        i
                      ));
                  },
                  duration: this.isAnimated ? this.animationDuration : 0,
                  ease: this.easingFunction,
                });
                s.addAnimation(e);
              }
              e.handled = !0;
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                animationDuration: this.animationDuration,
                easingFunction: this.easingFunction.name,
                isAnimated: this.isAnimated,
                destination: this.destination,
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.ResetCamera3DModifier = d;
      },
      66477: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.adjustTooltipPosition3D = t.TooltipModifier3D = void 0);
        const r = i(62773),
          s = i(31306),
          o = i(56744),
          a = i(89955),
          n = i(32873),
          l = i(23291),
          d = i(58042),
          h = i(26079),
          u = i(63220);
        class c extends u.ChartModifierBase3D {
          constructor(e) {
            var t, i, r, s, o, n, l, d, h, u, c, y;
            super(e),
              (this.type = a.EChart3DModifierType.Tooltip),
              (this.showTooltip = !0),
              (this.includedSeriesMap = new Map()),
              (this.tooltipSvgTemplateProperty = g),
              (this.tooltipContainerBackgroundProperty = "#228B22"),
              (this.tooltipTextStrokeProperty = "#fff"),
              (this.tooltipDataTemplateProperty = p),
              (this.crosshairStrokeProperty =
                null !== (t = null == e ? void 0 : e.crosshairStroke) &&
                void 0 !== t
                  ? t
                  : "#FF6600"),
              (this.crosshairStrokeThicknessProperty =
                null !==
                  (i = null == e ? void 0 : e.crosshairStrokeThickness) &&
                void 0 !== i
                  ? i
                  : 2),
              (this.isCrosshairVisibleProperty =
                null === (r = null == e ? void 0 : e.isCrosshairVisible) ||
                void 0 === r ||
                r),
              (null == e ? void 0 : e.tooltipSvgTemplate) &&
                "string" == typeof e.tooltipSvgTemplate &&
                (this.typeMap.set("tooltipSvgTemplate", e.tooltipSvgTemplate),
                (e.tooltipSvgTemplate = getFunction(
                  EBaseType.OptionFunction,
                  e.tooltipSvgTemplate
                ))),
              (this.tooltipSvgTemplateProperty =
                null !== (s = null == e ? void 0 : e.tooltipSvgTemplate) &&
                void 0 !== s
                  ? s
                  : this.tooltipSvgTemplateProperty),
              (this.tooltipContainerBackgroundProperty =
                null !==
                  (o = null == e ? void 0 : e.tooltipContainerBackground) &&
                void 0 !== o
                  ? o
                  : this.tooltipContainerBackgroundProperty),
              (this.tooltipTextStrokeProperty =
                null !== (n = null == e ? void 0 : e.tooltipTextStroke) &&
                void 0 !== n
                  ? n
                  : this.tooltipTextStrokeProperty),
              (this.showTooltip =
                null !== (l = null == e ? void 0 : e.showTooltip) &&
                void 0 !== l
                  ? l
                  : this.showTooltip),
              (this.placementDivIdProperty =
                null !== (d = null == e ? void 0 : e.placementDivId) &&
                void 0 !== d
                  ? d
                  : this.placementDivIdProperty),
              (null == e ? void 0 : e.tooltipLegendTemplate) &&
                "string" == typeof e.tooltipLegendTemplate &&
                (this.typeMap.set(
                  "tooltipLegendTemplate",
                  e.tooltipLegendTemplate
                ),
                (e.tooltipLegendTemplate = getFunction(
                  EBaseType.OptionFunction,
                  e.tooltipLegendTemplate
                ))),
              (this.tooltipLegendTemplateProperty =
                null !== (h = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== h
                  ? h
                  : this.tooltipLegendTemplateProperty),
              (this.tooltipLegendOffsetXProperty =
                null !== (u = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== u
                  ? u
                  : this.tooltipLegendOffsetX),
              (this.tooltipLegendOffsetYProperty =
                null !== (c = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== c
                  ? c
                  : this.tooltipLegendOffsetY),
              (null == e ? void 0 : e.tooltipDataTemplate) &&
                "string" == typeof e.tooltipDataTemplate &&
                (this.typeMap.set("tooltipDataTemplate", e.tooltipDataTemplate),
                (e.tooltipDataTemplate = getFunction(
                  EBaseType.OptionFunction,
                  e.tooltipDataTemplate
                ))),
              (this.tooltipDataTemplateProperty =
                null !== (y = null == e ? void 0 : e.tooltipDataTemplate) &&
                void 0 !== y
                  ? y
                  : this.tooltipDataTemplateProperty);
          }
          includeSeries(e, t) {
            this.includedSeriesMap.set(e, t);
          }
          getIncludedSeries() {
            return this.parentSurface.renderableSeries
              .asArray()
              .filter(
                (e) => e.isVisible && !1 !== this.includedSeriesMap.get(e)
              );
          }
          get isCrosshairVisible() {
            return this.isCrosshairVisibleProperty;
          }
          set isCrosshairVisible(e) {
            var t;
            (this.isCrosshairVisibleProperty = e),
              null === (t = this.parentSurface) ||
                void 0 === t ||
                t.invalidateElement();
          }
          get crosshairStroke() {
            return this.crosshairStrokeProperty;
          }
          set crosshairStroke(e) {
            var t;
            (this.crosshairStrokeProperty = e),
              null === (t = this.parentSurface) ||
                void 0 === t ||
                t.invalidateElement();
          }
          get crosshairStrokeThickness() {
            return this.crosshairStrokeThicknessProperty;
          }
          set crosshairStrokeThickness(e) {
            var t;
            (this.crosshairStrokeThicknessProperty = e),
              null === (t = this.parentSurface) ||
                void 0 === t ||
                t.invalidateElement();
          }
          get tooltipSvgTemplate() {
            return this.tooltipSvgTemplateProperty;
          }
          set tooltipSvgTemplate(e) {
            (this.tooltipSvgTemplateProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.tooltipSvgTemplate = e);
          }
          get tooltipLegendTemplate() {
            return this.tooltipLegendTemplateProperty;
          }
          set tooltipLegendTemplate(e) {
            (this.tooltipLegendTemplateProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.tooltipLegendTemplate = e);
          }
          get tooltipDataTemplate() {
            return this.tooltipDataTemplateProperty;
          }
          set tooltipDataTemplate(e) {
            (this.tooltipDataTemplateProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.tooltipDataTemplate = e);
          }
          get tooltipContainerBackground() {
            return this.tooltipContainerBackgroundProperty;
          }
          set tooltipContainerBackground(e) {
            this.tooltipContainerBackgroundProperty !== e &&
              ((this.tooltipContainerBackgroundProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.containerBackground = e));
          }
          get tooltipLegendOffsetX() {
            return this.tooltipLegendOffsetXProperty;
          }
          set tooltipLegendOffsetX(e) {
            this.tooltipLegendOffsetXProperty !== e &&
              ((this.tooltipLegendOffsetXProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.tooltipLegendOffsetX = e));
          }
          get tooltipLegendOffsetY() {
            return this.tooltipLegendOffsetYProperty;
          }
          set tooltipLegendOffsetY(e) {
            this.tooltipLegendOffsetYProperty !== e &&
              ((this.tooltipLegendOffsetYProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.tooltipLegendOffsetY = e));
          }
          get tooltipTextStroke() {
            return this.tooltipTextStrokeProperty;
          }
          set tooltipTextStroke(e) {
            this.tooltipTextStrokeProperty !== e &&
              ((this.tooltipTextStrokeProperty = e),
              this.tooltipAnnotation &&
                (this.tooltipAnnotation.textStroke = e));
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            this.placementDivIdProperty !== e &&
              ((this.placementDivIdProperty = e),
              this.notifyPropertyChanged("PLACEMENT_DIV_ID"));
          }
          onAttach() {
            super.onAttach(),
              this.parentSurface &&
                ((this.parentSurface.isHitTestEnabled = !0),
                (this.crosshairEntity = (0, o.deleteSafe)(
                  this.crosshairEntity
                )),
                (this.crosshairEntity = new h.CrosshairLinesSceneEntity(
                  this.parentSurface.webAssemblyContext3D
                )),
                this.parentSurface.rootEntity.children.add(
                  this.crosshairEntity
                ),
                (this.tooltipAnnotation = new d.TooltipSvgAnnotation3D({
                  xCoordinateMode: s.ECoordinateMode.Pixel,
                  yCoordinateMode: s.ECoordinateMode.Pixel,
                  tooltipSvgTemplate: this.tooltipSvgTemplate,
                  containerBackground: this.tooltipContainerBackground,
                  textStroke: this.tooltipTextStroke,
                  tooltipLegendTemplate: this.tooltipLegendTemplate,
                  tooltipLegendOffsetX: this.tooltipLegendOffsetX,
                  tooltipLegendOffsetY: this.tooltipLegendOffsetY,
                  placementDivId: this.placementDivId,
                  tooltipDataTemplate: this.tooltipDataTemplate,
                })),
                this.parentSurface.modifierAnnotations.add(
                  this.tooltipAnnotation
                ));
          }
          onDetach() {
            super.onDetach(),
              this.parentSurface &&
                (this.parentSurface.rootEntity.children.remove(
                  this.crosshairEntity
                ),
                this.tooltipAnnotation.delete(),
                this.parentSurface.modifierAnnotations.remove(
                  this.tooltipAnnotation
                )),
              (this.crosshairEntity = (0, o.deleteSafe)(this.crosshairEntity));
          }
          modifierMouseMove(e) {
            this.activePointerEvents.set(e.pointerId, e),
              super.modifierMouseMove(e),
              this.getIsActionAllowed(e) && this.update();
          }
          onParentSurfaceRendered() {
            this.update();
          }
          update() {
            var e, t, i, r, s;
            if (!this.mousePoint) return;
            const { x: o, y: a } = this.mousePoint,
              l = this.getIncludedSeries()
                .map((e) => e.hitTest(this.mousePoint))
                .find((e) => e.isHit);
            if (null == l ? void 0 : l.isHit) {
              if (
                (this.crosshairEntity &&
                  this.isCrosshairVisible &&
                  ((this.crosshairEntity.worldDimensions =
                    null === (e = this.parentSurface) || void 0 === e
                      ? void 0
                      : e.worldDimensions),
                  (this.crosshairEntity.cameraPosition =
                    null ===
                      (i =
                        null === (t = this.parentSurface) || void 0 === t
                          ? void 0
                          : t.camera) || void 0 === i
                      ? void 0
                      : i.position),
                  (this.crosshairEntity.stroke = this.crosshairStroke),
                  (this.crosshairEntity.strokeThickness =
                    this.crosshairStrokeThickness),
                  (this.crosshairEntity.location = l.hitWorldCoords),
                  (this.crosshairEntity.isVisible = this.isCrosshairVisible),
                  null === (r = this.parentSurface) ||
                    void 0 === r ||
                    r.invalidateElement()),
                (this.tooltipAnnotation.isHidden = !this.showTooltip),
                this.showTooltip)
              ) {
                const e = (0, n.translateToNotScaled)(o),
                  t = (0, n.translateToNotScaled)(a);
                (this.tooltipAnnotation.x1 = e),
                  (this.tooltipAnnotation.y1 = t);
              }
              (this.showTooltip || this.tooltipLegendTemplate) &&
                (this.tooltipAnnotation.seriesInfo = l);
            } else
              (this.tooltipAnnotation.seriesInfo = void 0),
                (this.crosshairEntity.isVisible = !1),
                (this.tooltipAnnotation.isHidden = !0),
                null === (s = this.parentSurface) ||
                  void 0 === s ||
                  s.invalidateElement();
          }
        }
        t.TooltipModifier3D = c;
        const p = (e, t) => {
            const i = [];
            return (
              t.title && i.push(t.title),
              e &&
                e.isHit &&
                (e.dataSeriesName && i.push(e.dataSeriesName),
                (e.dataSeriesType === l.EDataSeriesType3D.Xyz3D ||
                  e.dataSeriesType === l.EDataSeriesType3D.UniformGrid3D) &&
                  (i.push(`X: ${e.xValue}`),
                  i.push(`Y: ${e.yValue}`),
                  i.push(`Z: ${e.zValue}`))),
              i
            );
          },
          g = (e, i) => {
            var s;
            const o = `id_${Date.now()}`,
              a = (
                null !== (s = i.tooltipDataTemplate) && void 0 !== s ? s : p
              )(e, i);
            if (0 === a.length) return "<svg></svg>";
            const { width: n, height: l } = (0, r.calcTooltipSize)(a);
            (0, t.adjustTooltipPosition3D)(n, l, i);
            let d = "";
            return (
              a.forEach((e, t) => {
                d += `<tspan x="8" dy="1.2em">${e}</tspan>`;
              }),
              `<svg class="scichart__cursor-tooltip" width="${n}" height="${l}">\n        <defs>\n            <filter id="${o}" x="0" y="0" width="200%" height="200%">\n                <feOffset result="offOut" in="SourceAlpha" dx="3" dy="3" />\n                <feGaussianBlur result="blurOut" in="offOut" stdDeviation="3" />\n                <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n            </filter>\n        </defs>\n        <rect rx="4" ry="4" width="95%" height="90%" fill="${i.containerBackground}" filter="url(#${o})" />\n        <svg width="100%">\n            <text x="8" y="3" font-size="13" font-family="Verdana" dy="0" fill="${i.textStroke}">${d}</text>\n        </svg>\n    </svg>`
            );
          };
        t.adjustTooltipPosition3D = (e, t, i) => {
          const { seriesViewRect: r } = i.parentSurface,
            s = i.x1,
            o = i.y1,
            a = (0, n.translateToNotScaled)(r.width) - s < e ? -e : 5,
            l = (0, n.translateToNotScaled)(r.height) - o < t ? -t : 5;
          (i.xCoordShift = a), (i.yCoordShift = l);
        };
      },
      23291: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseDataSeries3D = t.EDataSeriesType3D = void 0);
        const r = i(55023),
          s = i(3214);
        var o;
        ((o = t.EDataSeriesType3D || (t.EDataSeriesType3D = {})).Xyz3D = "Xyz"),
          (o.UniformGrid3D = "UniformGrid3D"),
          (o.NonUniformGrid3D = "NonUniformGrid3D");
        class a extends r.DeletableEntity {
          constructor(e, t) {
            var i;
            super(),
              (this.webAssemblyContext = e),
              (this.dataSeriesNameProperty =
                null !== (i = null == t ? void 0 : t.dataSeriesName) &&
                void 0 !== i
                  ? i
                  : this.dataSeriesNameProperty),
              (this.dataChanged = new s.EventHandler()),
              (this.isModifiedProperty = !0);
          }
          get dataSeriesName() {
            return this.dataSeriesNameProperty;
          }
          set dataSeriesName(e) {
            (this.dataSeriesNameProperty = e), this.notifyDataChanged();
          }
          get isModified() {
            return this.isModifiedProperty;
          }
          getIsDeleted() {
            return this.isDeleted;
          }
          delete() {
            (this.isDeleted = !0), (this.webAssemblyContext = void 0);
          }
          notifyDataChanged() {
            (this.isModifiedProperty = !0), this.dataChanged.raiseEvent();
          }
          resetModified() {
            this.isModifiedProperty = !1;
          }
        }
        t.BaseDataSeries3D = a;
      },
      13426: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseGridDataSeries3D = void 0);
        const r = i(98140),
          s = i(23291);
        class o extends s.BaseDataSeries3D {
          constructor(e, t) {
            super(e, t), this.setYValues(null == t ? void 0 : t.yValues);
          }
          get yRange() {
            if (!this.yRangeCached) {
              let e = -Number.MAX_VALUE,
                t = Number.MAX_VALUE;
              for (let i = 0; i < this.zSizeProperty; i++)
                for (let r = 0; r < this.xSizeProperty; r++) {
                  const s = this.yValuesProperty[i][r];
                  (e = Math.max(s, e)), (t = Math.min(s, t));
                }
              this.yRangeCached = new r.NumberRange(t, e);
            }
            return this.yRangeCached;
          }
          get zSize() {
            return this.zSizeProperty;
          }
          get xSize() {
            return this.xSizeProperty;
          }
          setYValues(e) {
            if (!e || !e[0])
              return (
                (this.yValuesProperty = void 0),
                (this.xSizeProperty = 0),
                void (this.zSizeProperty = 0)
              );
            const t = e[0].length;
            e.forEach((e) => {
              if (!e)
                throw new Error(
                  "Each row in YValues must be defined. See how to declare a 2D array in Javascript here https://stackoverflow.com/a/966234/303612"
                );
              if (e.length !== t)
                throw new Error(
                  "Each row in YValues must be the same length, so that the overall 2D array is square"
                );
            });
            const i = e[0].length,
              r = e.length;
            (this.xSizeProperty = i),
              (this.zSizeProperty = r),
              (this.yValuesProperty = e),
              this.notifyDataChanged();
          }
          getYValues() {
            return this.yValuesProperty;
          }
          getYValue(e, t) {
            try {
              return this.yValuesProperty[e][t];
            } catch (i) {
              return console.log(`error at get z,x ${e}, ${t}`), 0;
            }
          }
          setYValue(e, t, i) {
            (this.yValuesProperty[e][t] = i), this.notifyDataChanged();
          }
          notifyDataChanged() {
            super.notifyDataChanged(), (this.yRangeCached = void 0);
          }
        }
        t.BaseGridDataSeries3D = o;
      },
      75869: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformGridDataSeries3D = void 0);
        const r = i(98140),
          s = i(23291),
          o = i(13426);
        class a extends o.BaseGridDataSeries3D {
          constructor(e, t) {
            super(e, t),
              (this.type = s.EDataSeriesType3D.UniformGrid3D),
              (this.xStartProperty = (null == t ? void 0 : t.xStart) || 0),
              (this.xStepProperty = (null == t ? void 0 : t.xStep) || 1),
              (this.zStartProperty = (null == t ? void 0 : t.zStart) || 0),
              (this.zStepProperty = (null == t ? void 0 : t.zStep) || 1);
          }
          get xStart() {
            return this.xStartProperty;
          }
          set xStart(e) {
            (this.xStartProperty = e), this.notifyDataChanged();
          }
          get xStep() {
            return this.xStepProperty;
          }
          set xStep(e) {
            (this.xStepProperty = e), this.notifyDataChanged();
          }
          get zStart() {
            return this.zStartProperty;
          }
          set zStart(e) {
            (this.zStartProperty = e), this.notifyDataChanged();
          }
          get zStep() {
            return this.zStepProperty;
          }
          set zStep(e) {
            (this.zStepProperty = e), this.notifyDataChanged();
          }
          get xRange() {
            return new r.NumberRange(
              this.xStart,
              this.xStart + this.xStep * (this.xSize - 1)
            );
          }
          get zRange() {
            return new r.NumberRange(
              this.zStart,
              this.zStart + this.zStep * (this.zSize - 1)
            );
          }
          getX(e) {
            return this.xStart + e * this.xStep;
          }
          getZ(e) {
            return this.zStart + e * this.zStep;
          }
        }
        t.UniformGridDataSeries3D = a;
      },
      98102: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzDataSeries3D = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(23291);
        class n extends a.BaseDataSeries3D {
          constructor(e, t) {
            super(e, t),
              (this.type = a.EDataSeriesType3D.Xyz3D),
              (this.xValues = new e.SCRTDoubleVector()),
              (this.yValues = new e.SCRTDoubleVector()),
              (this.zValues = new e.SCRTDoubleVector()),
              (this.metadata = []),
              (null == t ? void 0 : t.xValues) &&
                (null == t ? void 0 : t.yValues) &&
                (null == t ? void 0 : t.zValues) &&
                this.appendRange(
                  t.xValues,
                  t.yValues,
                  t.zValues,
                  null == t ? void 0 : t.metadata
                );
          }
          getNativeXValues() {
            return this.xValues;
          }
          getNativeYValues() {
            return this.yValues;
          }
          getNativeZValues() {
            return this.zValues;
          }
          getMetadataValues() {
            return this.metadata;
          }
          get xRange() {
            const e = this.webAssemblyContext.NumberUtil.MinMax(this.xValues),
              t = new o.NumberRange(e.minD, e.maxD);
            return e.delete(), t;
          }
          get yRange() {
            const e = this.webAssemblyContext.NumberUtil.MinMax(this.yValues),
              t = new o.NumberRange(e.minD, e.maxD);
            return e.delete(), t;
          }
          get zRange() {
            const e = this.webAssemblyContext.NumberUtil.MinMax(this.zValues),
              t = new o.NumberRange(e.minD, e.maxD);
            return e.delete(), t;
          }
          append(e, t, i, r) {
            this.getIsDeleted() ||
              (this.xValues.push_back(e),
              this.yValues.push_back(t),
              this.zValues.push_back(i),
              this.metadata.push(r),
              this.notifyDataChanged());
          }
          appendRange(e, t, i, r) {
            if (!this.getIsDeleted()) {
              s.Guard.arraysSameLength(e, "xValues", t, "yValues"),
                s.Guard.arraysSameLength(t, "yValues", i, "zValues");
              const o = this.xValues,
                a = this.yValues,
                n = this.zValues;
              for (let s = 0; s < e.length; s++)
                if (
                  (o.push_back(e[s]), a.push_back(t[s]), n.push_back(i[s]), r)
                ) {
                  const e = r[s];
                  this.metadata.push(e);
                } else this.metadata.push(void 0);
              this.notifyDataChanged();
            }
          }
          update(e, t, i, r, s) {
            this.getIsDeleted() ||
              (this.xValues.set(e, t),
              this.yValues.set(e, i),
              this.zValues.set(e, r),
              (this.metadata[e] = s),
              this.notifyDataChanged());
          }
          insert(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              if (e < 0 || e >= this.count())
                throw new Error("Start index is out of range");
              this.xValues.insertAt(e, t),
                this.yValues.insertAt(e, i),
                this.zValues.insertAt(e, r),
                this.metadata.splice(e, 0, s),
                this.notifyDataChanged();
            }
          }
          insertRange(e, t, i, r, o) {
            if (!this.getIsDeleted()) {
              if (
                (s.Guard.arraysSameLength(t, "xValues", i, "yValues"),
                s.Guard.arraysSameLength(r, "zValues", i, "yValues"),
                e < 0 || e >= this.count())
              )
                throw new Error("Start index is out of range");
              const a = t.length;
              for (let s = 0; s < a; s++, e++)
                this.xValues.insertAt(e, t[s]),
                  this.yValues.insertAt(e, i[s]),
                  this.zValues.insertAt(e, r[s]),
                  this.metadata.splice(e, 0, o ? o[s] : void 0);
              this.notifyDataChanged();
            }
          }
          removeAt(e) {
            if (!this.getIsDeleted()) {
              if (e < 0 || e >= this.count())
                throw new Error("index is out of range");
              this.xValues.removeAt(e),
                this.yValues.removeAt(e),
                this.zValues.removeAt(e),
                this.metadata.splice(e, 1),
                this.notifyDataChanged();
            }
          }
          removeRange(e, t) {
            if (!this.getIsDeleted()) {
              if (e < 0 || e + t > this.count())
                throw new Error("index is out of range");
              this.xValues.removeRange(e, t),
                this.yValues.removeRange(e, t),
                this.zValues.removeRange(e, t),
                this.metadata.splice(e, t),
                this.notifyDataChanged();
            }
          }
          clear() {
            this.getIsDeleted() ||
              (this.xValues.clear(),
              this.yValues.clear(),
              this.zValues.clear(),
              (this.metadata = []),
              this.notifyDataChanged());
          }
          delete() {
            (this.xValues = (0, r.deleteSafe)(this.xValues)),
              (this.yValues = (0, r.deleteSafe)(this.yValues)),
              (this.zValues = (0, r.deleteSafe)(this.zValues)),
              (this.metadata = []),
              super.delete();
          }
          count() {
            return this.xValues ? this.xValues.size() : 0;
          }
        }
        t.XyzDataSeries3D = n;
      },
      16110: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Vector3 = void 0);
        const r = i(23866);
        class s {
          constructor(e, t, i) {
            (this.xProperty = e), (this.yProperty = t), (this.zProperty = i);
          }
          static get zero() {
            return s.zeroVector;
          }
          get x() {
            return this.xProperty;
          }
          get y() {
            return this.yProperty;
          }
          get z() {
            return this.zProperty;
          }
          toTsrVector3(e) {
            return (
              r.Guard.notNull(e, "webAssemblyContext"),
              new e.TSRVector3(this.x, this.y, this.z)
            );
          }
          subtract(e) {
            return new s(this.x - e.x, this.y - e.y, this.z - e.z);
          }
          add(e) {
            return new s(this.x + e.x, this.y + e.y, this.z + e.z);
          }
          scalarMultiply(e) {
            return new s(this.x * e, this.y * e, this.z * e);
          }
          dotProduct(e) {
            return this.x * e.x + this.y * e.y + this.z * e.z;
          }
          crossProduct(e) {
            return new s(
              this.y * e.z - this.z * e.y,
              this.z * e.x - this.x * e.z,
              this.x * e.y - this.y * e.x
            );
          }
          get length() {
            return Math.sqrt(
              this.x * this.x + this.y * this.y + this.z * this.z
            );
          }
          normalize() {
            const e = 1 / this.length;
            if (0 === e)
              throw new Error("Vector3 magnitude is zero, cannot normalize!");
            (this.xProperty = this.xProperty * e),
              (this.yProperty = this.yProperty * e),
              (this.zProperty = this.zProperty * e);
          }
          toString() {
            return `Vector3 (${this.xProperty.toFixed(
              2
            )}, ${this.yProperty.toFixed(2)}, ${this.zProperty.toFixed(2)})`;
          }
        }
        (t.Vector3 = s), (s.zeroVector = new s(0, 0, 0));
      },
      58042: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TooltipSvgAnnotation3D = void 0);
        const r = i(92415),
          s = i(84736),
          o = i(84690),
          a = i(91380);
        class n extends o.SvgAnnotationBase {
          constructor(e) {
            var t, i, r, o, a, n, l, d;
            if (
              (super(e),
              (this.type = s.EAnnotationType.SVG),
              (this.tooltipLegendOffsetXProperty = 10),
              (this.tooltipLegendOffsetYProperty = 10),
              (this.isDirty = !0),
              (this.isHidden = !0),
              (this.titleProperty =
                null !== (t = null == e ? void 0 : e.title) && void 0 !== t
                  ? t
                  : this.titleProperty),
              (this.tooltipSvgTemplateProperty =
                null !== (i = null == e ? void 0 : e.tooltipSvgTemplate) &&
                void 0 !== i
                  ? i
                  : this.tooltipSvgTemplateProperty),
              (this.containerBackgroundProperty =
                null !== (r = null == e ? void 0 : e.containerBackground) &&
                void 0 !== r
                  ? r
                  : this.containerBackgroundProperty),
              (this.textStrokeProperty =
                null !== (o = null == e ? void 0 : e.textStroke) && void 0 !== o
                  ? o
                  : this.textStrokeProperty),
              (this.tooltipLegendTemplateProperty =
                null !== (a = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== a
                  ? a
                  : this.tooltipLegendTemplateProperty),
              (this.tooltipLegendOffsetXProperty =
                null !== (n = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== n
                  ? n
                  : this.tooltipLegendOffsetXProperty),
              (this.tooltipLegendOffsetYProperty =
                null !== (l = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== l
                  ? l
                  : this.tooltipLegendOffsetYProperty),
              (this.placementDivIdProperty =
                null !== (d = null == e ? void 0 : e.placementDivId) &&
                void 0 !== d
                  ? d
                  : this.placementDivId),
              (this.tooltipDataTemplateProperty =
                null == e ? void 0 : e.tooltipDataTemplate),
              this.placementDivId)
            ) {
              const e = document.querySelector(`[id='${this.placementDivId}']`);
              this.svgDivRoot = e;
            }
          }
          get seriesInfo() {
            return this.seriesInfoProperty;
          }
          set seriesInfo(e) {
            this.seriesInfoProperty !== e &&
              ((this.seriesInfoProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.SERIES_INFOS));
          }
          get title() {
            return this.titleProperty;
          }
          set title(e) {
            this.titleProperty !== e &&
              ((this.titleProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TITLE));
          }
          get tooltipSvgTemplate() {
            return this.tooltipSvgTemplateProperty;
          }
          set tooltipSvgTemplate(e) {
            (this.tooltipSvgTemplateProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TOOLTIP_SVG_TEMPLATE);
          }
          get tooltipLegendTemplate() {
            return this.tooltipLegendTemplateProperty;
          }
          set tooltipLegendTemplate(e) {
            (this.tooltipLegendTemplateProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TOOLTIP_LEGEND_TEMPLATE);
          }
          get tooltipDataTemplate() {
            return this.tooltipDataTemplateProperty;
          }
          set tooltipDataTemplate(e) {
            (this.tooltipDataTemplateProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TOOLTIP_DATA_TEMPLATE);
          }
          get containerBackground() {
            return this.containerBackgroundProperty;
          }
          set containerBackground(e) {
            this.containerBackgroundProperty !== e &&
              ((this.containerBackgroundProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CONTAINER_BACKGROUND));
          }
          get tooltipLegendOffsetX() {
            return this.tooltipLegendOffsetXProperty;
          }
          set tooltipLegendOffsetX(e) {
            this.tooltipLegendOffsetXProperty !== e &&
              ((this.tooltipLegendOffsetXProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TOOLTIP_LEGEND_OFFSET_X));
          }
          get tooltipLegendOffsetY() {
            return this.tooltipLegendOffsetYProperty;
          }
          set tooltipLegendOffsetY(e) {
            this.tooltipLegendOffsetYProperty !== e &&
              ((this.tooltipLegendOffsetYProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TOOLTIP_LEGEND_OFFSET_Y));
          }
          get textStroke() {
            return this.textStrokeProperty;
          }
          set textStroke(e) {
            this.textStrokeProperty !== e &&
              ((this.textStrokeProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.TEXT_STROKE));
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            this.placementDivIdProperty !== e &&
              ((this.placementDivIdProperty = e),
              this.notifyPropertyChanged("PLACEMENT_DIV_ID"));
          }
          update(e, t, i, r) {
            this.isDirty &&
              ((this.isDirty = !1),
              this.svg && this.delete(),
              this.create(e, t, i, r),
              this.placementDivId
                ? this.updateExternalLegendTooltip()
                : (this.updateTooltip(i, r), this.updateLegendTooltip()));
          }
          delete() {
            this.parentSurface &&
              !this.parentSurface.isDeleted &&
              this.svg &&
              (this.placementDivId
                ? this.svgDivRoot.removeChild(this.svg)
                : this.svgRoot.removeChild(this.svg),
              this.setSvg(void 0),
              this.svgLegend &&
                (this.svgRoot.removeChild(this.svgLegend),
                (this.svgLegend = void 0)));
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e), (this.isDirty = !0);
          }
          create(e, t, i, s) {
            if (!this.tooltipSvgTemplate)
              throw Error(
                "Please provide a tooltipSvgTemplate for CursorTooltipSvgAnnotation"
              );
            const o = this.tooltipSvgTemplate(this.seriesInfo, this);
            if (this.placementDivId) {
              const e = r.annotationHelpers.createSvg(
                o,
                this.svgDivRoot,
                this.nextSibling
              );
              this.setSvg(e);
            } else {
              const e = r.annotationHelpers.createSvg(
                o,
                this.svgRoot,
                this.nextSibling
              );
              this.setSvg(e);
            }
          }
          updateTooltip(e, t) {
            var i, r, s, o;
            const a = null !== (i = this.xCoordShift) && void 0 !== i ? i : 0,
              n = null !== (r = this.yCoordShift) && void 0 !== r ? r : 0;
            this.svg.style.display = this.isHidden ? "none" : "block";
            const l = a + (null !== (s = this.x1) && void 0 !== s ? s : 0) + e,
              d = n + (null !== (o = this.y1) && void 0 !== o ? o : 0) + t;
            isNaN(l) || isNaN(d)
              ? (this.svg.style.display = "none")
              : (this.setSvgAttribute("x", l), this.setSvgAttribute("y", d));
          }
          updateLegendTooltip() {
            if (this.tooltipLegendTemplate) {
              const e = this.seriesInfo
                ? this.tooltipLegendTemplate(this.seriesInfo, this)
                : "<svg></svg>";
              this.svgLegend && this.svgRoot.removeChild(this.svgLegend);
              const t = r.annotationHelpers.createSvg(
                e,
                this.svgRoot,
                this.nextSibling
              );
              (this.svgLegend = t),
                this.svgLegend.setAttribute(
                  "x",
                  this.tooltipLegendOffsetX.toString()
                ),
                this.svgLegend.setAttribute(
                  "y",
                  this.tooltipLegendOffsetY.toString()
                );
            }
          }
          updateExternalLegendTooltip() {
            if (this.tooltipLegendTemplate) {
              const e = this.seriesInfo
                ? this.tooltipLegendTemplate(this.seriesInfo, this)
                : "<svg style='display: none'></svg>";
              this.svgLegend && this.svgLegend.removeChild(this.svgLegend);
              const t = r.annotationHelpers.createSvg(
                e,
                this.svgRoot,
                this.nextSibling
              );
              this.svgLegend = t;
            }
          }
        }
        t.TooltipSvgAnnotation3D = n;
      },
      79135: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisBase3D = t.EWhichAxis = void 0);
        const r = i(42241),
          s = i(14184),
          o = i(86127),
          a = i(98140),
          n = i(48008),
          l = i(50513),
          d = i(23223);
        var h;
        !(function (e) {
          (e[(e.xAxis = 0)] = "xAxis"),
            (e[(e.yAxis = 1)] = "yAxis"),
            (e[(e.zAxis = 2)] = "zAxis");
        })((h = t.EWhichAxis || (t.EWhichAxis = {})));
        class u extends r.AxisCore {
          constructor(e, t) {
            var i, r, o, a, n;
            super(t),
              (this.labelDepthTestEnabledProperty = !1),
              (this.planeBorderColorProperty =
                s.SciChartSurfaceBase.DEFAULT_THEME.planeBorderColor),
              (this.axisPlaneBackgroundFillProperty =
                s.SciChartSurfaceBase.DEFAULT_THEME.axisPlaneBackgroundFill),
              (this.isYAxisProperty = !1),
              (this.isZAxisProperty = !1),
              (this.labelStyle = new l.AxisBase3DLabelStyle(this)),
              (this.webAssemblyContext3D = e),
              (this.isXAxisProperty = !1),
              (this.tickLabelsOffsetProperty =
                null !== (i = null == t ? void 0 : t.tickLabelsOffset) &&
                void 0 !== i
                  ? i
                  : 10),
              (this.titleOffsetProperty =
                null !== (r = null == t ? void 0 : t.titleOffset) &&
                void 0 !== r
                  ? r
                  : 50),
              (this.planeBorderColorProperty =
                null !== (o = null == t ? void 0 : t.planeBorderColor) &&
                void 0 !== o
                  ? o
                  : this.planeBorderColorProperty),
              (this.planeBorderThicknessProperty =
                null !== (a = null == t ? void 0 : t.planeBorderThickness) &&
                void 0 !== a
                  ? a
                  : 2),
              (this.axisPlaneBackgroundFillProperty =
                null !== (n = null == t ? void 0 : t.planeBackgroundFill) &&
                void 0 !== n
                  ? n
                  : this.axisPlaneBackgroundFillProperty);
          }
          applyTheme(e) {
            var t, i, r, s, o, a;
            const n = this.parentSurface.previousThemeProvider;
            (null === (t = this.labelStyle) || void 0 === t
              ? void 0
              : t.foreground) === n.labelForegroundBrush &&
              (this.labelStyle.foreground = e.labelForegroundBrush),
              this.axisBandsFill === n.axisBandsFill &&
                (this.axisBandsFill = e.axisBandsFill),
              (null === (i = this.majorGridLineStyle) || void 0 === i
                ? void 0
                : i.color) === n.majorGridLineBrush &&
                (this.majorGridLineStyle = { color: e.majorGridLineBrush }),
              (null === (r = this.majorTickLineStyle) || void 0 === r
                ? void 0
                : r.color) === n.majorGridLineBrush &&
                (this.majorTickLineStyle = { color: e.majorGridLineBrush }),
              (null === (s = this.minorGridLineStyle) || void 0 === s
                ? void 0
                : s.color) === n.minorGridLineBrush &&
                (this.minorGridLineStyle = { color: e.minorGridLineBrush }),
              (null === (o = this.minorTickLineStyle) || void 0 === o
                ? void 0
                : o.color) === n.minorGridLineBrush &&
                (this.minorTickLineStyle = { color: e.minorGridLineBrush }),
              (null === (a = this.axisTitleStyle) || void 0 === a
                ? void 0
                : a.color) === n.axisTitleColor &&
                (this.axisTitleStyle = { color: e.axisTitleColor }),
              this.planeBorderColor === n.planeBorderColor &&
                (this.planeBorderColor = e.planeBorderColor),
              this.axisPlaneBackgroundFill === n.axisPlaneBackgroundFill &&
                (this.axisPlaneBackgroundFill = e.axisPlaneBackgroundFill);
          }
          get isYAxis() {
            return this.isYAxisProperty;
          }
          setIsYAxis(e) {
            (this.isYAxisProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.IS_Y_AXIS);
          }
          get isZAxis() {
            return this.isZAxisProperty;
          }
          setIsZAxis(e) {
            (this.isZAxisProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.IS_Z_AXIS);
          }
          get labelDepthTestEnabled() {
            return this.labelDepthTestEnabledProperty;
          }
          set labelDepthTestEnabled(e) {
            (this.labelDepthTestEnabledProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.LABEL_DEPTH_TEST);
          }
          get planeBorderThickness() {
            return this.planeBorderThicknessProperty;
          }
          set planeBorderThickness(e) {
            (this.planeBorderThicknessProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.PLANE_BORDER_THICKNESS);
          }
          get planeBorderColor() {
            return this.planeBorderColorProperty;
          }
          set planeBorderColor(e) {
            (this.planeBorderColorProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.PLANE_BORDER_COLOR);
          }
          get tickLabelAlignment() {
            return this.tickLabelAlignmentProperty;
          }
          set tickLabelAlignment(e) {
            (this.tickLabelAlignmentProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.TICK_LABEL_ALIGNMENT);
          }
          get positiveSideClipping() {
            return this.positiveSideClippingProperty;
          }
          set positiveSideClipping(e) {
            (this.positiveSideClippingProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.POSITIVE_SIDE_CLIPPING);
          }
          get negativeSideClipping() {
            return this.negativeSideClippingProperty;
          }
          set negativeSideClipping(e) {
            (this.negativeSideClippingProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.NEGATIVE_SIDE_CLIPPING);
          }
          get axisPlaneBackgroundFill() {
            return this.axisPlaneBackgroundFillProperty;
          }
          set axisPlaneBackgroundFill(e) {
            (this.axisPlaneBackgroundFillProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.AXIS_PLANE_BACKGROUND_FILL);
          }
          get titleOffset() {
            return this.titleOffsetProperty;
          }
          set titleOffset(e) {
            (this.titleOffsetProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.TITLE_OFFSET);
          }
          get backgroundColor() {
            return this.axisPlaneBackgroundFill;
          }
          set backgroundColor(e) {
            (this.axisPlaneBackgroundFill = e),
              this.notifyPropertyChanged(d.PROPERTY.BACKGROUND_COLOR);
          }
          get tickLabelsOffset() {
            return this.tickLabelsOffsetProperty;
          }
          set tickLabelsOffset(e) {
            (this.tickLabelsOffsetProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.TICK_LABELS_OFFSET);
          }
          onAttach(e, t, i, r) {
            (this.parentSurface = e),
              this.setIsXAxis(t),
              this.setIsYAxis(i),
              this.setIsZAxis(r);
          }
          toAxisDescriptor() {
            const e = "transparent",
              {
                majorTickCoords: t,
                minorTickCoords: i,
                majorTickLabels: r,
              } = this.getTickCoordsAndLabels();
            return {
              axisTitle: Array.isArray(this.axisTitle)
                ? this.axisTitle.join(" ")
                : this.axisTitle,
              axisSize: this.getAxisSize(),
              backgroundColor: (0, n.parseColorToTArgb)(
                this.axisPlaneBackgroundFill || e
              ),
              bandColor: (0, n.parseColorToTArgb)(
                this.axisBandsFill || "#202123"
              ),
              borderColor: (0, n.parseColorToTArgb)(this.planeBorderColor || e),
              borderThickness: this.planeBorderThickness,
              drawBands: this.drawMajorBands,
              drawMajorGridlines: this.drawMajorGridLines,
              drawMajorTicks: this.drawMajorTickLines,
              drawMinorGridlines: this.drawMinorGridLines,
              drawMinorTicks: this.drawMinorTickLines,
              isVisible: this.isVisible,
              labelDepthTestEnabled: this.labelDepthTestEnabled,
              labelStyle: {
                alignment: this.labelStyle.alignment,
                dpiScaling: this.labelStyle.dpiScaling / 96,
                fontFamily: this.labelStyle.fontFamily,
                fontSize: this.labelStyle.fontSize * o.DpiHelper.PIXEL_RATIO,
                foreground: (0, n.parseColorToUIntArgb)(
                  this.labelStyle.foreground
                ),
              },
              majorCoordinates: t,
              majorLineStyle: c(this.majorGridLineStyle),
              minorLineStyle: c(this.minorGridLineStyle),
              majorTickStyle: p(this.majorTickLineStyle),
              minorTickStyle: p(this.minorTickLineStyle),
              minorCoordinates: i,
              smoothLabelOverlapAvoidance: !1,
              tickLabels: r,
              tickLabelsOffset: this.tickLabelsOffset * o.DpiHelper.PIXEL_RATIO,
              titleOffset: this.titleOffset * o.DpiHelper.PIXEL_RATIO,
              titleStyle: void 0,
            };
          }
          validateAxis() {}
          getMaximumRange() {
            var e, t, i, r, s;
            let o = new a.NumberRange(NaN, NaN);
            if (
              (null ===
                (t =
                  null === (e = this.parentSurface) || void 0 === e
                    ? void 0
                    : e.renderableSeries) || void 0 === t
                ? void 0
                : t.size()) > 0
            ) {
              let e;
              if (this.isXAxis) e = h.xAxis;
              else if (this.isYAxis) e = h.yAxis;
              else {
                if (!this.isZAxis)
                  throw Error(
                    "AxisBase3D: isXAxis, isYAxis, isZAxis flag are not set"
                  );
                e = h.zAxis;
              }
              (o =
                null !==
                  (i = this.getMaximumRangeAs(
                    this.parentSurface.renderableSeries,
                    e
                  )) && void 0 !== i
                  ? i
                  : o),
                o.isZero() && (o = this.coerceZeroVisibleRange(o)),
                (null === (r = this.growBy) || void 0 === r
                  ? void 0
                  : r.isDefined()) && (o = o.growBy(this.growBy));
            }
            const n = (
              null === (s = this.visibleRange) || void 0 === s
                ? void 0
                : s.isDefined()
            )
              ? this.visibleRange
              : this.getDefaultNonZeroRange();
            return (null == o ? void 0 : o.isDefined()) ? o : n;
          }
          getMaximumRangeAs(e, t) {
            let i;
            return (
              e.asArray().forEach((e) => {
                if (e.isVisible && e.dataSeries) {
                  const r =
                    t === h.xAxis
                      ? e.dataSeries.xRange
                      : t === h.yAxis
                      ? e.dataSeries.yRange
                      : e.dataSeries.zRange;
                  (null == r ? void 0 : r.isDefined()) &&
                    (i = i ? r.union(i) : r);
                }
              }),
              i
            );
          }
          getAxisSize() {
            if (!this.parentSurface) return 0;
            const e = this.parentSurface.worldDimensions;
            if (!e)
              throw new Error(
                "Must set property sciChart3DSurface.worldDimensions to a valid Vector3 with X,Y,Z world size"
              );
            return this.isXAxis ? e.x : this.isYAxis ? e.y : e.z;
          }
          getLabels(e) {
            return e.map((e) => this.labelProvider.formatLabel(e));
          }
          getTicks() {
            const e = this.getMaxAutoTicks();
            if (this.autoTicks) {
              const t = this.deltaCalculator.getDeltaFromRange(
                this.visibleRange.min,
                this.visibleRange.max,
                this.minorsPerMajor,
                e
              );
              (this.minorDeltaProperty = t.min),
                (this.majorDeltaProperty = t.max);
            }
            return {
              majorTicks: this.tickProvider.getMajorTicks(
                this.minorDeltaProperty,
                this.majorDeltaProperty,
                this.visibleRange
              ),
              minorTicks: this.tickProvider.getMinorTicks(
                this.minorDeltaProperty,
                this.majorDeltaProperty,
                this.visibleRange
              ),
            };
          }
          getTickCoordsAndLabels() {
            const e = this.getCurrentCoordinateCalculator(),
              t = (t) => t.map((t) => e.getCoordinate(t)),
              { majorTicks: i, minorTicks: r } = this.getTicks();
            return {
              majorTicks: i,
              majorTickLabels: this.getLabels(i),
              majorTickCoords: t(i),
              minorTicks: r,
              minorTickCoords: t(r),
            };
          }
        }
        t.AxisBase3D = u;
        const c = (e) => ({
            stroke: (0, n.parseColorToTArgb)(e.color),
            strokeThickness: e.strokeThickness * o.DpiHelper.PIXEL_RATIO,
            start: 1,
            end: 1,
          }),
          p = (e) => ({
            stroke: (0, n.parseColorToTArgb)(e.color),
            strokeThickness: e.strokeThickness * o.DpiHelper.PIXEL_RATIO,
            start: 0,
            end: e.tickSize * o.DpiHelper.PIXEL_RATIO,
          });
      },
      50513: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisBase3DLabelStyle = void 0);
        const r = i(14184),
          s = i(23223);
        t.AxisBase3DLabelStyle = class {
          constructor(e) {
            (this.dpiScalingProperty = 96),
              (this.fontFamilyProperty = "Arial"),
              (this.fontSizeProperty = 14),
              (this.foregroundProperty =
                r.SciChartSurfaceBase.DEFAULT_THEME.labelForegroundBrush),
              (this.parentAxis = e);
          }
          get alignment() {
            return this.alignmentProperty;
          }
          set alignment(e) {
            (this.alignmentProperty = e),
              this.notifyPropertyChanged(s.TEXT_STYLE_PROPERTY.ALIGNMENT);
          }
          get dpiScaling() {
            return this.dpiScalingProperty;
          }
          set dpiScaling(e) {
            (this.dpiScalingProperty = e),
              this.notifyPropertyChanged(s.TEXT_STYLE_PROPERTY.DPI_SCALING);
          }
          get fontFamily() {
            return this.fontFamilyProperty;
          }
          set fontFamily(e) {
            (this.fontFamilyProperty = e),
              this.notifyPropertyChanged(s.TEXT_STYLE_PROPERTY.FONT_FAMILY);
          }
          get fontSize() {
            return this.fontSizeProperty;
          }
          set fontSize(e) {
            (this.fontSizeProperty = e),
              this.notifyPropertyChanged(s.TEXT_STYLE_PROPERTY.FONT_SIZE);
          }
          get foreground() {
            return this.foregroundProperty;
          }
          set foreground(e) {
            (this.foregroundProperty = e),
              this.notifyPropertyChanged(s.TEXT_STYLE_PROPERTY.FOREGROUND);
          }
          notifyPropertyChanged(e) {
            var t;
            const i =
              null === (t = this.parentAxis) || void 0 === t
                ? void 0
                : t.invalidateParentCallback;
            i && i();
          }
        };
      },
      22054: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.toScrtTextStyle =
            t.updateScrtLineStyle =
            t.updateScrtAxisDescriptor =
            t.AxisCubeEntity =
              void 0);
        const r = i(34116),
          s = i(11727),
          o = i(85418),
          a = i(77103);
        class n extends o.BaseSceneEntity3D {
          constructor(e, t) {
            super(e),
              (this.type = r.ESceneEntityType.AxisCubeEntity),
              (this.sciChart3DSurface = t),
              this.setNativeEntity(e.SCRTAxisCubeEntity.implement(this));
          }
          Update(e) {
            var i, r;
            if (!this.currentRenderPassData) return;
            const s = this.nativeEntity,
              o = s.GetDescriptorPtr(),
              {
                sceneDescriptor: {
                  axisCubeDescriptor: {
                    xAxisDescriptor: n,
                    yAxisDescriptor: l,
                    zAxisDescriptor: d,
                  },
                },
              } = this.currentRenderPassData;
            ((0, a.getDescriptorsEqual)(n, this.lastXDescriptor) &&
              (0, a.getDescriptorsEqual)(l, this.lastYDescriptor) &&
              (0, a.getDescriptorsEqual)(d, this.lastZDescriptor)) ||
              s.DestroyMeshes(),
              (this.lastXDescriptor = n),
              (this.lastYDescriptor = l),
              (this.lastZDescriptor = d),
              [
                [o.GetXAxisDescPtr(), n],
                [o.GetYAxisDescPtr(), l],
                [o.GetZAxisDescPtr(), d],
              ].forEach((e) =>
                (0, t.updateScrtAxisDescriptor)(
                  this.webAssemblyContext,
                  e[0],
                  e[1]
                )
              ),
              super.Update(e),
              (null === (i = this.sciChart3DSurface) || void 0 === i
                ? void 0
                : i.isAxisCubeRendered) ||
                (null === (r = this.sciChart3DSurface) ||
                  void 0 === r ||
                  r.setIsAxisCubeRendered(),
                setTimeout(() => {
                  var e;
                  return null === (e = this.sciChart3DSurface) || void 0 === e
                    ? void 0
                    : e.invalidateElement();
                }, 0));
          }
        }
        (t.AxisCubeEntity = n),
          (t.updateScrtAxisDescriptor = (e, i, r) => {
            var o;
            (i.m_strTitle =
              null !== (o = r.axisTitle) && void 0 !== o ? o : ""),
              (i.m_fRangeSize = r.axisSize),
              (i.m_fTitleOffset = r.titleOffset),
              (i.m_fTextOffset = r.tickLabelsOffset),
              (i.m_bBandsEnabled = r.drawBands),
              (i.m_bMajorLinesEnabled = r.drawMajorGridlines),
              (i.m_bMajorTicksEnabled = r.drawMajorTicks),
              (i.m_bMinorLinesEnabled = r.drawMinorGridlines),
              (i.m_bMinorTicksEnabled = r.drawMinorTicks),
              (i.m_fBorderThickness = r.borderThickness),
              (0, s.updateTsrVector4)(r.borderColor, i.GetBorderColorPtr()),
              (0, s.updateTsrVector4)(
                r.backgroundColor,
                i.GetBackgroundColorPtr()
              ),
              (0, s.updateTsrVector4)(r.bandColor, i.GetBandColorPtr()),
              (0, t.updateScrtLineStyle)(
                r.majorLineStyle,
                i.GetMajorLineStylePtr()
              ),
              (0, t.updateScrtLineStyle)(
                r.minorLineStyle,
                i.GetMinorLineStylePtr()
              ),
              (0, t.toScrtTextStyle)(r.labelStyle, i.GetTextStylePtr()),
              (0, t.updateScrtLineStyle)(
                r.majorTickStyle,
                i.GetMajorTickStylePtr()
              ),
              (0, t.updateScrtLineStyle)(
                r.minorTickStyle,
                i.GetMinorTickStylePtr()
              );
            const a = new e.FloatVector();
            r.majorCoordinates.forEach((e) => a.push_back(e)),
              i.SetMajors(a),
              a.delete();
            const n = new e.FloatVector();
            r.minorCoordinates.forEach((e) => n.push_back(e)),
              i.SetMinors(n),
              n.delete();
            const l = new e.WStringVector();
            r.tickLabels.forEach((e) => l.push_back(e)),
              i.SetMajorLabels(l),
              l.delete();
          }),
          (t.updateScrtLineStyle = (e, t) => {
            (t.m_fStrokeThickness = e.strokeThickness),
              (t.m_fStart = e.start),
              (t.m_fEnd = e.end),
              (0, s.updateTsrVector4)(e.stroke, t.GetStrokeColorPtr());
          }),
          (t.toScrtTextStyle = (e, t) => (
            (t.m_fSize = e.fontSize),
            (t.m_strFont = e.fontFamily),
            (t.m_uiARGBColor = e.foreground),
            (t.m_fDpiScaling = e.dpiScaling),
            e.alignment && t.SetAlignment(e.alignment),
            t
          ));
      },
      99441: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAxisSideClipping = void 0),
          ((i = t.EAxisSideClipping || (t.EAxisSideClipping = {}))[
            (i.Default = 0)
          ] = "Default"),
          (i[(i.None = 1)] = "None"),
          (i[(i.VisibleRange = 2)] = "VisibleRange");
      },
      69412: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ETextAlignment3D = void 0),
          ((i = t.ETextAlignment3D || (t.ETextAlignment3D = {}))[
            (i.Default = 0)
          ] = "Default"),
          (i[(i.Camera = 1)] = "Camera"),
          (i[(i.ScreenHorizontal = 2)] = "ScreenHorizontal"),
          (i[(i.ScreenAutoRotated = 3)] = "ScreenAutoRotated");
      },
      77103: (e, t) => {
        "use strict";
        function i(e, t) {
          return (
            (void 0 !== e || void 0 === t) &&
            (void 0 !== t || void 0 === e) &&
            ((void 0 === e && void 0 === t) ||
              (e.start === t.start &&
                e.end === t.end &&
                r(e.stroke, t.stroke) &&
                e.strokeThickness === t.strokeThickness))
          );
        }
        function r(e, t) {
          return (
            (void 0 !== e || void 0 === t) &&
            (void 0 !== t || void 0 === e) &&
            ((void 0 === e && void 0 === t) ||
              (e.red === t.red &&
                e.green === t.green &&
                e.blue === t.blue &&
                e.opacity === t.opacity))
          );
        }
        function s(e, t) {
          return (
            (void 0 !== e || void 0 === t) &&
            (void 0 !== t || void 0 === e) &&
            ((void 0 === e && void 0 === t) ||
              (e.alignment === t.alignment &&
                e.dpiScaling === t.dpiScaling &&
                e.fontFamily === t.fontFamily &&
                e.fontSize === t.fontSize &&
                e.foreground === t.foreground))
          );
        }
        function o(e, t) {
          if (void 0 === e && void 0 !== t) return !1;
          if (void 0 === t && void 0 !== e) return !1;
          if (void 0 === t && void 0 === e) return !0;
          if (e.length !== t.length) return !1;
          for (let i = 0; i < e.length; i++) if (e[i] !== t[i]) return !1;
          return !0;
        }
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getArraysEqual =
            t.getTextStylesEqual =
            t.getTArgbEqual =
            t.getLineStylesEqual =
            t.getDescriptorsEqual =
              void 0),
          (t.getDescriptorsEqual = function (e, t) {
            return void 0 === e
              ? void 0 === t
              : void 0 === t
              ? void 0 === e
              : e.axisTitle === t.axisTitle &&
                e.axisSize === t.axisSize &&
                r(e.backgroundColor, t.backgroundColor) &&
                r(e.bandColor, t.bandColor) &&
                r(e.borderColor, t.borderColor) &&
                o(e.majorCoordinates, t.majorCoordinates) &&
                o(e.minorCoordinates, t.minorCoordinates) &&
                o(e.tickLabels, t.tickLabels) &&
                i(e.majorLineStyle, t.majorLineStyle) &&
                i(e.minorLineStyle, t.minorLineStyle) &&
                i(e.majorTickStyle, t.majorTickStyle) &&
                i(e.minorTickStyle, t.minorTickStyle) &&
                s(e.titleStyle, t.titleStyle) &&
                s(e.labelStyle, t.labelStyle) &&
                e.drawMajorGridlines === t.drawMajorGridlines &&
                e.drawMinorGridlines === t.drawMinorGridlines &&
                e.drawMajorTicks === t.drawMajorTicks &&
                e.drawMinorTicks === t.drawMinorTicks &&
                e.drawBands === t.drawBands &&
                e.isVisible === t.isVisible &&
                e.borderThickness === t.borderThickness &&
                e.labelDepthTestEnabled === t.labelDepthTestEnabled &&
                e.titleOffset === t.titleOffset &&
                e.tickLabelsOffset === t.tickLabelsOffset &&
                e.smoothLabelOverlapAvoidance === t.smoothLabelOverlapAvoidance;
          }),
          (t.getLineStylesEqual = i),
          (t.getTArgbEqual = r),
          (t.getTextStylesEqual = s),
          (t.getArraysEqual = o);
      },
      48936: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericAxis3D = void 0);
        const r = i(33166),
          s = i(40194),
          o = i(3346),
          a = i(40059),
          n = i(39920),
          l = i(10276),
          d = i(31194),
          h = i(98140),
          u = i(2192),
          c = i(79135);
        class p extends c.AxisBase3D {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.type = u.EAxisType.NumericAxis3D),
              (this.tickProvider = new o.NumericTickProvider(
                this.webAssemblyContext3D
              )),
              (this.labelProvider = new n.NumericLabelProvider()),
              (this.deltaCalculator = new a.NumericDeltaCalculator(
                this.webAssemblyContext3D
              )),
              (null == t ? void 0 : t.precision) &&
                (t.labelPrecision = t.precision),
              (this.labelProvider =
                null !== (i = null == t ? void 0 : t.labelProvider) &&
                void 0 !== i
                  ? i
                  : new n.NumericLabelProvider(t));
          }
          getDefaultNonZeroRange() {
            return new h.NumberRange(0, 10);
          }
          animateVisibleRange(e, t, i = l.easing.outCubic, r = () => {}) {
            var s;
            return t <= 0
              ? ((this.visibleRange = e || this.visibleRange), void r())
              : (null === (s = this.visibleRangeAnimationToken) ||
                  void 0 === s ||
                  s.cancel(),
                (this.visibleRangeAnimationToken =
                  d.NumberRangeAnimator.animate(
                    this.visibleRange,
                    e,
                    t,
                    (e) => {
                      this.visibleRange = e;
                    },
                    () => {
                      (this.visibleRangeAnimationToken = void 0), r();
                    },
                    i
                  )),
                this.parentSurface.addAnimation(
                  this.visibleRangeAnimationToken
                ),
                this.visibleRangeAnimationToken);
          }
          getCurrentCoordinateCalculatorInternal() {
            const e = this.visibleRange.min,
              t = this.visibleRange.max,
              i = this.getAxisSize();
            return this.flippedCoordinatesProperty
              ? new s.NumericCoordinateCalculator(
                  this.webAssemblyContext3D,
                  i,
                  e,
                  t
                )
              : new r.FlippedNumericCoordinateCalculator(
                  this.webAssemblyContext3D,
                  i,
                  e,
                  t
                );
          }
        }
        t.NumericAxis3D = p;
      },
      23223: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TEXT_STYLE_PROPERTY = t.PROPERTY = void 0),
          ((r = t.PROPERTY || (t.PROPERTY = {})).AXIS_PLANE_BACKGROUND_FILL =
            "AXIS_PLANE_BACKGROUND_FILL"),
          (r.IS_Y_AXIS = "IS_Y_AXIS"),
          (r.IS_Z_AXIS = "IS_Z_AXIS"),
          (r.LABEL_DEPTH_TEST = "LABEL_DEPTH_TEST"),
          (r.NEGATIVE_SIDE_CLIPPING = "NEGATIVE_SIDE_CLIPPING"),
          (r.PLANE_BORDER_COLOR = "PLANE_BORDER_COLOR"),
          (r.PLANE_BORDER_THICKNESS = "PLANE_BORDER_THICKNESS"),
          (r.POSITIVE_SIDE_CLIPPING = "POSITIVE_SIDE_CLIPPING"),
          (r.TICK_LABEL_ALIGNMENT = "TICK_LABEL_ALIGNMENT"),
          (r.TICK_LABELS_OFFSET = "TICK_LABELS_OFFSET"),
          (r.TITLE_OFFSET = "TITLE_OFFSET"),
          (r.BACKGROUND_COLOR = "BACKGROUND_COLOR"),
          ((i =
            t.TEXT_STYLE_PROPERTY || (t.TEXT_STYLE_PROPERTY = {})).ALIGNMENT =
            "ALIGNMENT"),
          (i.DPI_SCALING = "DPI_SCALING"),
          (i.FONT_FAMILY = "FONT_FAMILY"),
          (i.FONT_SIZE = "FONT_SIZE"),
          (i.FOREGROUND = "FOREGROUND");
      },
      17542: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).CAMERA_POSITION =
            "CAMERA_POSITION"),
          (i.CAMERA_TARGET = "CAMERA_TARGET"),
          (i.CAMERA_ORTHOHEIGHT = "CAMERA_ORTHOHEIGHT"),
          (i.CAMERA_ORTHOWIDTH = "CAMERA_ORTHOWIDTH"),
          (i.CAMERA_FIELDOFVIEW = "CAMERA_FIELDOFVIEW"),
          (i.CAMERA_PROJECTIONMODE = "CAMERA_PROJECTIONMODE"),
          (i.CAMERA_ISATTACHED = "CAMERA_ISATTACHED"),
          (i.CAMERA_ORBITALPITCH = "CAMERA_ORBITALPITCH"),
          (i.CAMERA_ORBITALYAW = "CAMERA_ORBITALYAW"),
          (i.CAMERA_RADIUS = "CAMERA_RADIUS"),
          (i.CAMERA_FORWARD = "CAMERA_FORWARD"),
          (i.CAMERA_SIDE = "CAMERA_SIDE"),
          (i.CAMERA_UP = "CAMERA_UP"),
          (i.CAMERA_UPGLOBAL = "CAMERA_UPGLOBAL"),
          (i.CAMERA_ASPECTRATIO = "CAMERA_ASPECTRATIO"),
          (i.CAMERA_ID = "CAMERA_ID"),
          (i.CAMERA_FARCLIP = "CAMERA_FARCLIP"),
          (i.CAMERA_NEARCLIP = "CAMERA_NEARCLIP"),
          (i.SURFACE_CAMERA = "SURFACE_CAMERA"),
          (i.SURFACE_XAXIS = "SURFACE_XAXIS"),
          (i.SURFACE_YAXIS = "SURFACE_YAXIS"),
          (i.SURFACE_ZAXIS = "SURFACE_ZAXIS"),
          (i.SURFACE_VIEWPORT_MANAGER = "SURFACE_VIEWPORT_MANAGER"),
          (i.SURFACE_WORLD_DIMENSIONS = "SURFACE_WORLD_DIMENSIONS");
      },
      36561: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DefaultViewportManager3D = void 0);
        const r = i(61981);
        class s extends r.ViewportManager3DBase {}
        t.DefaultViewportManager3D = s;
      },
      1989: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GizmoEntity = void 0);
        const r = i(34116),
          s = i(85418);
        class o extends s.BaseSceneEntity3D {
          constructor(e) {
            super(e),
              (this.type = r.ESceneEntityType.GizmoEntity),
              this.setNativeEntity(e.SCRTXyzGizmoEntity.implement(this));
          }
          get enableGizmo() {
            return this.nativeEntity.GetOverrideEnableGizmo();
          }
          set enableGizmo(e) {
            this.nativeEntity.SetOverrideEnableGizmo(e);
          }
        }
        t.GizmoEntity = o;
      },
      49706: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseMeshPointMarker3D = void 0);
        const r = i(71906);
        class s extends r.BasePointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get markerType() {
            return r.EMarkerType.InstancedMesh;
          }
        }
        t.BaseMeshPointMarker3D = s;
      },
      71906: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BasePointMarker3D = t.EMarkerType = void 0);
        const r = i(3214),
          s = i(23866),
          o = i(50605),
          a = i(88862);
        var n;
        ((n = t.EMarkerType || (t.EMarkerType = {}))[(n.Pixel = 0)] = "Pixel"),
          (n[(n.TexturedQuad = 1)] = "TexturedQuad"),
          (n[(n.InstancedMesh = 2)] = "InstancedMesh"),
          (t.BasePointMarker3D = class {
            constructor(e, t) {
              s.Guard.notNull(e, "webAssemblyContext"),
                (this.webAssemblyContext = e),
                (this.propertyChanged = new r.EventHandler()),
                (this.fillProperty =
                  (null == t ? void 0 : t.fill) || "#FF3333"),
                (this.sizeProperty = (null == t ? void 0 : t.size) || 3);
            }
            get fill() {
              return this.fillProperty;
            }
            set fill(e) {
              (this.fillProperty = e),
                this.notifyPropertyChanged(a.PROPERTY.FILL);
            }
            get size() {
              return this.sizeProperty;
            }
            set size(e) {
              (this.sizeProperty = e),
                this.notifyPropertyChanged(a.PROPERTY.SIZE);
            }
            notifyPropertyChanged(e) {
              var t;
              null === (t = this.propertyChanged) ||
                void 0 === t ||
                t.raiseEvent(new o.PropertyChangedEventArgs(e));
            }
          });
      },
      29336: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseTexturePointMarker3D = void 0);
        const r = i(71906);
        class s extends r.BasePointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get markerType() {
            return r.EMarkerType.TexturedQuad;
          }
        }
        t.BaseTexturePointMarker3D = s;
      },
      88862: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).FILL = "Fill"),
          (i.SIZE = "Size");
      },
      37622: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TrianglePointMarker3D =
            t.EllipsePointMarker3D =
            t.QuadPointMarker =
            t.PixelPointMarker3D =
            t.CylinderPointMarker3D =
            t.PyramidPointMarker3D =
            t.CubePointMarker3D =
            t.SpherePointMarker3D =
              void 0);
        const r = i(49706),
          s = i(71906),
          o = i(29336);
        class a extends r.BaseMeshPointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsMesh() {
            return this.webAssemblyContext.SCRTGetTemplateMesh(
              this.webAssemblyContext.eSCRTMesh.SCRT_MESH_SPHERE
            );
          }
        }
        t.SpherePointMarker3D = a;
        class n extends r.BaseMeshPointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsMesh() {
            return this.webAssemblyContext.SCRTGetTemplateMesh(
              this.webAssemblyContext.eSCRTMesh.SCRT_MESH_CUBE
            );
          }
        }
        t.CubePointMarker3D = n;
        class l extends r.BaseMeshPointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsMesh() {
            return this.webAssemblyContext.SCRTGetTemplateMesh(
              this.webAssemblyContext.eSCRTMesh.SCRT_MESH_PYRAMID
            );
          }
        }
        t.PyramidPointMarker3D = l;
        class d extends r.BaseMeshPointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsMesh() {
            return this.webAssemblyContext.SCRTGetTemplateMesh(
              this.webAssemblyContext.eSCRTMesh.SCRT_MESH_CYLINDER
            );
          }
        }
        t.CylinderPointMarker3D = d;
        class h extends s.BasePointMarker3D {
          constructor(e, t) {
            super(e, t), (this.size = 0);
          }
          get markerType() {
            return s.EMarkerType.Pixel;
          }
        }
        t.PixelPointMarker3D = h;
        class u extends o.BaseTexturePointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsTexture() {
            return this.webAssemblyContext.SCRTGetTemplateTexture(
              this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_SOLIDWHITE
            );
          }
        }
        t.QuadPointMarker = u;
        class c extends o.BaseTexturePointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsTexture() {
            return this.webAssemblyContext.SCRTGetTemplateTexture(
              this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_CIRCLE
            );
          }
        }
        t.EllipsePointMarker3D = c;
        class p extends o.BaseTexturePointMarker3D {
          constructor(e, t) {
            super(e, t);
          }
          get pointsTexture() {
            return this.webAssemblyContext.SCRTGetTemplateTexture(
              this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_TRIANGLE
            );
          }
        }
        t.TrianglePointMarker3D = p;
      },
      33517: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisCubeDescriptor = void 0),
          (t.AxisCubeDescriptor = class {});
      },
      85418: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseSceneEntity3D = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(23866),
          a = i(37796),
          n = i(34116),
          l = i(73538);
        class d extends r.DeletableEntity {
          constructor(e) {
            super(),
              (this.id = (0, l.generateGuid)()),
              (this.isVisible = !0),
              (this.entityIdProperty = void 0),
              o.Guard.notNull(e, "webAssemblyContext"),
              (this.webAssemblyContext = e),
              (this.detachChild = this.detachChild.bind(this)),
              (this.attachChild = this.attachChild.bind(this)),
              (this.children = new a.ObservableArray()),
              this.children.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach(this.detachChild),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach(this.attachChild);
              }),
              (this.onDpiChanged = this.onDpiChanged.bind(this));
          }
          get entityIdProvider() {
            return this.entityIdProviderProperty;
          }
          set entityIdProvider(e) {
            (this.entityIdProviderProperty = e),
              !this.entityId &&
                this.entityIdProviderProperty &&
                (this.entityId =
                  this.entityIdProviderProperty.getNextEntityId()),
              this.visitEntities((t) => {
                t !== this && (t.entityIdProvider = e);
              });
          }
          get entityId() {
            return this.entityIdProperty;
          }
          set entityId(e) {
            var t;
            (this.entityIdProperty = e),
              null === (t = this.nativeEntityProperty) ||
                void 0 === t ||
                t.SetEntityId(e),
              this.invalidateScene();
          }
          getRoot() {
            if (this.type === n.ESceneEntityType.RootSceneEntity) return this;
            let e = this.parent;
            for (; void 0 !== e; ) {
              if (e.type === n.ESceneEntityType.RootSceneEntity) return e;
              e = e.parent;
            }
          }
          delete() {
            var e;
            this.children.asArray().forEach((e) => e.delete()),
              null === (e = this.entityIdProvider) ||
                void 0 === e ||
                e.releaseEntityId(this.entityId),
              this.nativeEntity &&
                this.world &&
                this.world.RemoveEntity(this.nativeEntity),
              (this.nativeEntityProperty = (0, s.deleteSafe)(
                this.nativeEntityProperty
              )),
              (this.webAssemblyContext = void 0);
          }
          Update(e) {
            if (this.currentRenderPassData) {
              if (!this.nativeEntity)
                throw new Error(
                  "BaseSceneEntity.nativeSceneEntity must be set by calling setEntity() in the constructor"
                );
              this.isVisible && this.nativeEntity.Update(e);
            }
          }
          Render() {
            if (this.currentRenderPassData) {
              if (!this.nativeEntity)
                throw new Error(
                  "BaseSceneEntity.nativeSceneEntity must be set by calling setEntity() in the constructor"
                );
              this.isVisible && this.nativeEntity.Render();
            }
          }
          onEngineRestart() {}
          onDpiChanged(e) {}
          setRenderPassData(e) {
            this.currentRenderPassData = e;
          }
          getEntity(e) {
            for (let t = 0; t < this.children.size(); t++) {
              const i = this.children.get(t);
              if (i.type === e) return i;
            }
          }
          invalidateScene() {
            var e, t;
            null ===
              (t =
                null === (e = this.rootSceneEntity) || void 0 === e
                  ? void 0
                  : e.parentSurface) ||
              void 0 === t ||
              t.invalidateElement();
          }
          onAttached() {
            this.parent.type, n.ESceneEntityType.SCRTSceneEntity;
          }
          onDetached() {}
          visitEntities(e) {
            e(this),
              this.children.asArray().forEach((t) => {
                t.visitEntities(e);
              });
          }
          get nativeEntity() {
            return this.nativeEntityProperty;
          }
          attachChild(e) {
            var t;
            null === (t = this.nativeEntity) ||
              void 0 === t ||
              t.AddChildEntityInternal(e.nativeEntity),
              (e.parent = this),
              (e.entityIdProvider = this.entityIdProvider),
              e.onAttached();
          }
          detachChild(e) {
            var t;
            null === (t = this.nativeEntity) ||
              void 0 === t ||
              t.RemoveChildEntityInternal(e.nativeEntity),
              e.onDetached(),
              (e.parent = void 0);
          }
          setNativeEntity(e) {
            var t;
            (this.nativeEntityProperty = e),
              this.entityId &&
                (null === (t = this.nativeEntityProperty) ||
                  void 0 === t ||
                  t.SetEntityId(this.entityId));
          }
          get world() {
            var e, t;
            return null ===
              (t =
                null === (e = this.getRoot()) || void 0 === e
                  ? void 0
                  : e.parentSurface) || void 0 === t
              ? void 0
              : t.getSceneWorld();
          }
        }
        t.BaseSceneEntity3D = d;
      },
      26079: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CrosshairLinesSceneEntity = void 0);
        const r = i(56744),
          s = i(34116),
          o = i(48008),
          a = i(16110),
          n = i(85418);
        class l extends n.BaseSceneEntity3D {
          constructor(e) {
            super(e),
              (this.type = s.ESceneEntityType.Custom),
              (this.strokeThickness = 2),
              (this.stroke = "#FF6600"),
              (this.antiAliased = !0),
              this.setNativeEntity(e.SCRTSceneEntity.implement(this));
          }
          delete() {
            super.delete(),
              (this.linesMesh = (0, r.deleteSafe)(this.linesMesh));
          }
          Render() {
            if (
              !(
                this.isVisible &&
                this.worldDimensions &&
                this.cameraPosition &&
                this.location
              )
            )
              return;
            const e = this.getWallVector();
            this.linesMesh = (0, r.deleteSafe)(this.linesMesh);
            const t = new this.webAssemblyContext.SCRTLinesMesh(
              this.strokeThickness,
              !1,
              this.antiAliased
            );
            t.SetVertexColor((0, o.parseColorToUIntArgb)(this.stroke)),
              this.inInWorldDimensions(
                this.location.x,
                this.location.y,
                0,
                this.worldDimensions
              ) &&
                (t.SetVertex3(
                  this.location.x,
                  this.location.y,
                  this.location.z
                ),
                t.SetVertex3(this.location.x, this.location.y, e.z)),
              this.inInWorldDimensions(
                this.location.x,
                0,
                this.location.z,
                this.worldDimensions
              ) &&
                (t.SetVertex3(
                  this.location.x,
                  this.location.y,
                  this.location.z
                ),
                t.SetVertex3(this.location.x, e.y, this.location.z)),
              this.inInWorldDimensions(
                0,
                this.location.y,
                0,
                this.worldDimensions
              ) &&
                (t.SetVertex3(
                  this.location.x,
                  this.location.y,
                  this.location.z
                ),
                t.SetVertex3(e.x, this.location.y, this.location.z)),
              t.Freeze(),
              t.Render();
          }
          inInWorldDimensions(e, t, i, r) {
            return (
              t >= 0 &&
              t <= r.y &&
              i >= -r.z / 2 &&
              i <= r.z / 2 &&
              e >= -r.x / 2 &&
              e <= r.x / 2
            );
          }
          getWallVector() {
            const e =
                this.cameraPosition.dotProduct(new a.Vector3(1, 0, 0)) > 0
                  ? 0.5 * -this.worldDimensions.x
                  : 0.5 * this.worldDimensions.x,
              t =
                this.cameraPosition.dotProduct(new a.Vector3(0, 1, 0)) > 0
                  ? 0
                  : this.worldDimensions.y,
              i =
                this.cameraPosition.dotProduct(new a.Vector3(0, 0, 1)) > 0
                  ? 0.5 * -this.worldDimensions.z
                  : 0.5 * this.worldDimensions.z;
            return new a.Vector3(e, t, i);
          }
        }
        t.CrosshairLinesSceneEntity = l;
      },
      21240: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DefaultEntityIdProvider = void 0),
          (t.DefaultEntityIdProvider = class {
            constructor() {
              (this.currentId = -1), (this.maxId = 4294967295);
            }
            getNextEntityId() {
              const e = ++this.currentId;
              if (e >= this.maxId)
                throw new Error(
                  "The max Mesh ID has been exceeded.  Please see https://www.scichart.com/questions/wpf/maximum-mesh-id"
                );
              return e;
            }
            releaseEntityId(e) {}
          });
      },
      54005: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PointLine3DSceneEntity = void 0);
        const r = i(56744),
          s = i(34116),
          o = i(48008),
          a = i(23291),
          n = i(60063),
          l = i(71906),
          d = i(61325),
          h = i(75816);
        class u extends d.RenderableSeriesSceneEntity {
          constructor(e, t) {
            super(e, t, new h.RenderableSeriesSceneEntityState()),
              (this.type = s.ESceneEntityType.PointLine3DSceneEntity),
              this.setNativeEntity(
                e.SCRTPointLine3DSceneEntity.implement(this)
              );
          }
          delete() {
            (this.pointColors = (0, r.deleteSafe)(this.pointColors)),
              (this.pointScales = (0, r.deleteSafe)(this.pointScales)),
              super.delete();
          }
          Render() {
            this.nativeEntity.SetOpacity(this.parentSeries.opacity),
              super.Render();
          }
          notifySeriesPropertyChanged(e) {
            e === n.PROPERTY.STROKE_THICKNESS &&
              this.nativeEntity.SetLineStrokeThickness(
                this.parentSeries.strokeThickness
              ),
              e === n.PROPERTY.STROKE &&
                this.nativeEntity.SetStrokeColor(
                  (0, o.parseColorToUIntArgb)(this.parentSeries.stroke)
                ),
              e === n.PROPERTY.POINT_MARKER3D && this.updateSeries(),
              super.notifySeriesPropertyChanged(e);
          }
          hitTest(e) {
            return super.hitTestXyz(e);
          }
          updateSeries() {
            const e = this.parentSeries.dataSeries;
            if (!e) return;
            if (e.type !== a.EDataSeriesType3D.Xyz3D)
              throw new Error(
                "DataSeries type for a PointLineRenderableSeries3D must be XyzDataSeries3D"
              );
            const t = (0, o.parseColorToUIntArgb)(this.parentSeries.stroke);
            this.nativeEntity.SetLineStrokeThickness(
              this.parentSeries.strokeThickness
            ),
              this.nativeEntity.SetIsLineStrips(this.parentSeries.isLineStrip),
              this.nativeEntity.SetIsLineAntialiased(
                this.parentSeries.isAntiAliased
              ),
              this.nativeEntity.SetStrokeColor(t),
              this.updatePointMarker(this.parentSeries.pointMarker);
            const i = e.getNativeXValues(),
              s = e.getNativeYValues(),
              n = e.getNativeZValues(),
              l = e.getMetadataValues(),
              d = e.count(),
              {
                lineColors: h,
                pointColors: u,
                scales: c,
                hasDefaultColors: p,
                hasDefaultScales: g,
              } = this.rebuildPointMetadata(l, d, t);
            let y;
            try {
              (y =
                new this.webAssemblyContext.SCRTPointLines3DSceneEntityParams()),
                (y.useDefaultColors = p),
                (y.useDefaultScale = g),
                y.SetCoordinateCalculators(
                  this.currentRenderPassData.xCalc.nativeCalculator,
                  this.currentRenderPassData.yCalc.nativeCalculator,
                  this.currentRenderPassData.zCalc.nativeCalculator
                ),
                this.nativeEntity.UpdateMeshesVec(i, s, n, u, h, c, y);
            } finally {
              (0, r.deleteSafe)(y);
            }
          }
          updatePointMarker(e) {
            const t = this.webAssemblyContext.eSCRT_POINT_MARKER_TYPE;
            if (void 0 === e || e.markerType === l.EMarkerType.Pixel)
              this.nativeEntity.SetPointMarkerType(
                t.SCRT_POINT_MARKER_TYPE_PIXEL
              ),
                this.nativeEntity.SetPointSize(0);
            else if (e.markerType === l.EMarkerType.InstancedMesh) {
              const i = e;
              if (!i.pointsMesh)
                throw new Error(
                  "Expected a BaseMeshPointMarker3D.pointsMesh on 3D pointmarker of type InstancedMesh"
                );
              this.nativeEntity.SetPointMarkerType(
                t.SCRT_POINT_MARKER_TYPE_INSTANCED_MESH
              ),
                this.nativeEntity.SetPointSize(e.size),
                this.nativeEntity.SetPointMarkerMesh(i.pointsMesh);
            } else {
              if (e.markerType !== l.EMarkerType.TexturedQuad)
                throw new Error(
                  "PointLine3DSceneEntity: Unknown pointMarker.markerType " +
                    e.markerType
                );
              {
                const i = e;
                if (!i.pointsTexture)
                  throw new Error(
                    "Expected a BaseTexturePointMarker3D.pointsTexture on 3D pointmarker of type TexturedQuad"
                  );
                this.nativeEntity.SetPointMarkerType(
                  t.SCRT_POINT_MARKER_TYPE_TEXTURED_QUAD
                ),
                  this.nativeEntity.SetPointSize(e.size),
                  this.nativeEntity.SetPointMarkerTexture(i.pointsTexture);
              }
            }
          }
          rebuildPointMetadata(e, t, i) {
            this.pointColors ||
              (this.pointColors = new this.webAssemblyContext.UIntVector()),
              this.pointScales ||
                (this.pointScales = new this.webAssemblyContext.FloatVector()),
              this.pointColors.resize(t, i),
              this.pointScales.resize(t, 1);
            let r = !0,
              s = !0;
            return (
              e.forEach((e, t) => {
                var i;
                if (e) {
                  const o =
                    null !== (i = e.vertexColorAbgr) && void 0 !== i
                      ? i
                      : e.vertexColor;
                  o && ((s = !1), this.pointColors.set(t, o)),
                    e.pointScale &&
                      ((r = !1), this.pointScales.set(t, e.pointScale));
                }
              }),
              {
                lineColors: this.pointColors,
                pointColors: this.pointColors,
                scales: this.pointScales,
                hasDefaultScales: r,
                hasDefaultColors: s,
              }
            );
          }
        }
        t.PointLine3DSceneEntity = u;
      },
      72476: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderPassInfo3D = void 0),
          (t.RenderPassInfo3D = class {});
      },
      61325: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderableSeriesSceneEntity = void 0);
        const r = i(56172),
          s = i(85418);
        class o extends s.BaseSceneEntity3D {
          constructor(e, t, i) {
            super(e),
              (this.parentSeries = t),
              (this.state = i),
              this.state.setInitialState(),
              (this.hitTest = this.hitTest.bind(this));
          }
          Update(e) {
            this.currentRenderPassData &&
              (this.state.validate(
                this.parentSeries,
                this.currentRenderPassData
              ) ||
                (this.updateSeries(),
                this.state.reset(
                  this.parentSeries,
                  this.currentRenderPassData
                )),
              super.Update(e));
          }
          onEngineRestart() {
            super.onEngineRestart(), this.state.setInitialState();
          }
          notifySeriesPropertyChanged(e) {
            this.state.setRenderableSeriesPropertyChanged();
          }
          hitTestXyz(e) {
            var t;
            const i = Math.round(e.x),
              s = Math.round(e.y),
              o = this.webAssemblyContext.SCRTGetSelectionInfo(i, s),
              a = new r.HitTestInfo3D(this.parentSeries, !1);
            return (
              (a.isHit =
                o.m_uiSelectionIndex > 0 &&
                (null === (t = o.GetEntity()) || void 0 === t
                  ? void 0
                  : t.GetEntityId()) === this.entityId),
              (a.selectionIndex = a.isHit ? o.m_uiSelectionIndex : -1),
              (a.hitTestPoint = e),
              a
            );
          }
        }
        t.RenderableSeriesSceneEntity = o;
      },
      75816: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderableSeriesSceneEntityState = void 0),
          (t.RenderableSeriesSceneEntityState = class {
            constructor(
              e = !0,
              t = !0,
              i = !0,
              r = !0,
              s = {
                xVisibleMin: 0,
                xVisibleMax: 0,
                yVisibleMin: 0,
                yVisibleMax: 0,
                zVisibleMin: 0,
                zVisibleMax: 0,
                xWorldDimension: 0,
                yWorldDimension: 0,
                zWorldDimension: 0,
              }
            ) {
              (this.isInitialStateProperty = e),
                (this.isDataSeriesModifiedProperty = t),
                (this.isRenderableSeriesPropertyChangedProperty = i),
                (this.isAxisCubeStateChangedProperty = r),
                (this.axisCubeState = s);
            }
            get isInitialState() {
              return this.isInitialStateProperty;
            }
            setInitialState() {
              this.isInitialStateProperty = !0;
            }
            get isDataSeriesModified() {
              return this.isDataSeriesModifiedProperty;
            }
            get isRenderableSeriesPropertyChanged() {
              return this.isRenderableSeriesPropertyChangedProperty;
            }
            setRenderableSeriesPropertyChanged() {
              this.isRenderableSeriesPropertyChangedProperty = !0;
            }
            get isAxisCubeStateChanged() {
              return this.isAxisCubeStateChangedProperty;
            }
            validate(e, t) {
              this.isDataSeriesModifiedProperty = e.dataSeries.isModified;
              const i = 0.001;
              return (
                (this.isAxisCubeStateChangedProperty =
                  Math.abs(
                    this.axisCubeState.xVisibleMin - t.xCalc.visibleMin
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.xVisibleMax - t.xCalc.visibleMax
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.yVisibleMin - t.yCalc.visibleMin
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.yVisibleMax - t.yCalc.visibleMax
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.zVisibleMin - t.zCalc.visibleMin
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.zVisibleMax - t.zCalc.visibleMax
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.xWorldDimension - t.worldDimensions.x
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.yWorldDimension - t.worldDimensions.y
                  ) > i ||
                  Math.abs(
                    this.axisCubeState.zWorldDimension - t.worldDimensions.z
                  ) > i),
                !(
                  this.isInitialState ||
                  this.isDataSeriesModified ||
                  this.isDataSeriesModified ||
                  this.isAxisCubeStateChanged
                )
              );
            }
            reset(e, t) {
              (this.isInitialStateProperty = !1),
                (this.isDataSeriesModifiedProperty = !1),
                (this.isRenderableSeriesPropertyChangedProperty = !1),
                (this.isAxisCubeStateChangedProperty = !1),
                (this.axisCubeState = {
                  xVisibleMin: t.xCalc.visibleMin,
                  xVisibleMax: t.xCalc.visibleMax,
                  yVisibleMin: t.yCalc.visibleMin,
                  yVisibleMax: t.yCalc.visibleMax,
                  zVisibleMin: t.zCalc.visibleMin,
                  zVisibleMax: t.zCalc.visibleMax,
                  xWorldDimension: t.worldDimensions.x,
                  yWorldDimension: t.worldDimensions.y,
                  zWorldDimension: t.worldDimensions.z,
                }),
                e.dataSeries.resetModified();
            }
          });
      },
      77162: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ScatterPointsSceneEntity = void 0);
        const r = i(56744),
          s = i(34116),
          o = i(48008),
          a = i(23291),
          n = i(71906),
          l = i(60063),
          d = i(61325),
          h = i(75816);
        class u extends d.RenderableSeriesSceneEntity {
          constructor(e, t) {
            super(e, t, new h.RenderableSeriesSceneEntityState()),
              (this.type = s.ESceneEntityType.ScatterPointsSceneEntity),
              this.setNativeEntity(e.SCRTPoint3DSceneEntity.implement(this));
          }
          delete() {
            (this.pointColors = (0, r.deleteSafe)(this.pointColors)),
              (this.pointScales = (0, r.deleteSafe)(this.pointScales)),
              super.delete();
          }
          Render() {
            this.nativeEntity.SetOpacity(this.parentSeries.opacity),
              super.Render();
          }
          notifySeriesPropertyChanged(e) {
            e === l.PROPERTY.POINT_MARKER3D && this.updateSeries(),
              super.notifySeriesPropertyChanged(e);
          }
          hitTest(e) {
            return super.hitTestXyz(e);
          }
          updateSeries() {
            const e = this.parentSeries.dataSeries;
            if (!e) return;
            if (e.type !== a.EDataSeriesType3D.Xyz3D)
              throw new Error(
                "DataSeries type for a ScatterRenderableSeries3D must be XyzDataSeries3D"
              );
            const t = this.parentSeries.pointMarker;
            if (!t)
              throw new Error(
                "To render 3D Scatter, bubble or point-clouds, you must provider a PointMarker on BaseRenderableSeries3D"
              );
            const i = this.webAssemblyContext.eSCRT_POINT_MARKER_TYPE,
              s = (0, o.parseColorToUIntArgb)(t.fill);
            switch (t.markerType) {
              case n.EMarkerType.Pixel:
                this.nativeEntity.SetPointMarkerType(
                  i.SCRT_POINT_MARKER_TYPE_PIXEL
                ),
                  this.nativeEntity.SetPointSize(0),
                  this.nativeEntity.SetPointColor(s);
                break;
              case n.EMarkerType.TexturedQuad:
                const e = t;
                if (!e.pointsTexture)
                  throw new Error(
                    "Expected a BaseTexturePointMarker3D.pointsTexture on 3D pointmarker of type TexturedQuad"
                  );
                this.nativeEntity.SetPointMarkerType(
                  i.SCRT_POINT_MARKER_TYPE_TEXTURED_QUAD
                ),
                  this.nativeEntity.SetPointSize(t.size),
                  this.nativeEntity.SetPointColor(s),
                  this.nativeEntity.SetPointMarkerTexture(e.pointsTexture);
                break;
              case n.EMarkerType.InstancedMesh:
                const r = t;
                if (!r.pointsMesh)
                  throw new Error(
                    "Expected a BaseMeshPointMarker3D.pointsMesh on 3D pointmarker of type InstancedMesh"
                  );
                this.nativeEntity.SetPointMarkerType(
                  i.SCRT_POINT_MARKER_TYPE_INSTANCED_MESH
                ),
                  this.nativeEntity.SetPointSize(t.size),
                  this.nativeEntity.SetPointColor(s),
                  this.nativeEntity.SetPointMarkerMesh(r.pointsMesh);
                break;
              default:
                throw new Error(
                  "Unknown pointMarker.markerType " + t.markerType
                );
            }
            const l = e.getNativeXValues(),
              d = e.getNativeYValues(),
              h = e.getNativeZValues(),
              u = e.getMetadataValues(),
              c = e.count(),
              { colors: p, scales: g } = this.rebuildPointMetadata(u, c, s);
            let y;
            try {
              (y = new this.webAssemblyContext.SCRTPoint3DSceneEntityParams()),
                (y.useDefaultColors = !1),
                (y.useDefaultScale = !1),
                y.SetCoordinateCalculators(
                  this.currentRenderPassData.xCalc.nativeCalculator,
                  this.currentRenderPassData.yCalc.nativeCalculator,
                  this.currentRenderPassData.zCalc.nativeCalculator
                ),
                this.nativeEntity.UpdateMeshesVec(l, d, h, p, g, y);
            } finally {
              (0, r.deleteSafe)(y);
            }
          }
          rebuildPointMetadata(e, t, i) {
            return (
              this.pointColors ||
                (this.pointColors = new this.webAssemblyContext.UIntVector()),
              this.pointScales ||
                (this.pointScales = new this.webAssemblyContext.FloatVector()),
              this.pointColors.resize(t, i),
              this.pointScales.resize(t, 1),
              e.forEach((e, t) => {
                var i;
                if (e) {
                  const r =
                    null !== (i = e.vertexColorAbgr) && void 0 !== i
                      ? i
                      : e.vertexColor;
                  r && this.pointColors.set(t, r),
                    e.pointScale && this.pointScales.set(t, e.pointScale);
                }
              }),
              { colors: this.pointColors, scales: this.pointScales }
            );
          }
        }
        t.ScatterPointsSceneEntity = u;
      },
      41859: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SceneDescriptor = void 0),
          (t.SceneDescriptor = class {});
      },
      98694: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SurfaceMeshSceneEntity = t.SurfaceMeshSceneEntityState = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(75772),
          n = i(34116),
          l = i(48008),
          d = i(11727),
          h = i(23291),
          u = i(60063),
          c = i(56172),
          p = i(10435),
          g = i(61325),
          y = i(75816);
        var f;
        !(function (e) {
          (e[(e.SCRT_GRID_DRAWING_FEATURES_SOLID = 1)] =
            "SCRT_GRID_DRAWING_FEATURES_SOLID"),
            (e[(e.SCRT_GRID_DRAWING_FEATURES_WIREFRAME = 2)] =
              "SCRT_GRID_DRAWING_FEATURES_WIREFRAME"),
            (e[(e.SCRT_GRID_DRAWING_FEATURES_CONTOURS = 4)] =
              "SCRT_GRID_DRAWING_FEATURES_CONTOURS"),
            (e[(e.SCRT_GRID_DRAWING_FEATURES_SKIRT = 8)] =
              "SCRT_GRID_DRAWING_FEATURES_SKIRT");
        })(f || (f = {}));
        class v extends y.RenderableSeriesSceneEntityState {
          get isColorMapTextureInvalid() {
            return this.isColorMapTextureInvalidProperty;
          }
          setColorMapTextureInvalid() {
            this.isColorMapTextureInvalidProperty = !0;
          }
          validate(e, t) {
            return super.validate(e, t) && this.isColorMapTextureInvalid;
          }
          reset(e, t) {
            super.reset(e, t), (this.isColorMapTextureInvalidProperty = !1);
          }
        }
        t.SurfaceMeshSceneEntityState = v;
        class m extends g.RenderableSeriesSceneEntity {
          constructor(e, t) {
            var i;
            super(e, t, new v()),
              (this.type = n.ESceneEntityType.SurfaceMeshSceneEntity),
              this.setNativeEntity(e.SCRTGridMeshEntity.implement(this)),
              (this.colorMapTexture = (0, r.deleteSafe)(this.colorMapTexture)),
              (this.colorMapTexture =
                null === (i = this.parentSeries.meshColorPalette) ||
                void 0 === i
                  ? void 0
                  : i.getTexture(this.parentSeries.colorMapTextureSize));
          }
          notifySeriesPropertyChanged(e) {
            (e !== u.PROPERTY.MESH_COLOR_PALETTE &&
              e !== u.PROPERTY.MESH_PALETTE_MODE &&
              e !== u.PROPERTY.MESH_RESOLUTION &&
              e !== u.PROPERTY.COLOR_MAP_TEXTURE_SIZE) ||
              this.state.setColorMapTextureInvalid(),
              super.notifySeriesPropertyChanged(e);
          }
          delete() {
            super.delete(),
              (this.colorMapTexture = (0, r.deleteSafe)(this.colorMapTexture));
          }
          hitTest(e) {
            var t;
            const i = Math.round(e.x),
              r = Math.round(e.y),
              s = this.webAssemblyContext.SCRTGetSelectionInfo(i, r),
              o = new c.HitTestInfo3D(this.parentSeries, !1);
            return (
              (o.isHit =
                (null === (t = s.GetEntity()) || void 0 === t
                  ? void 0
                  : t.GetEntityId()) === this.entityId),
              (o.selectionIjIndices = o.isHit
                ? new a.Point(s.m_uiHeightMapIndexI, s.m_uiHeightMapIndexJ)
                : void 0),
              (o.hitTestPoint = e),
              o
            );
          }
          Render() {
            if (!this.currentRenderPassData) return;
            if (!this.colorMapTexture || !this.parentSeries.dataSeries)
              return void console.log(
                "Cannot draw a SurfaceMeshRenderableSeries3D without a meshColorPalette or dataSeries!"
              );
            let e;
            this.nativeEntity.SetOpacity(this.parentSeries.opacity);
            try {
              e = new this.webAssemblyContext.SCRTGridDrawingProperties();
              let t = 0;
              this.hasFlag(this.parentSeries.drawMeshAs, [
                p.EDrawMeshAs.SOLID_WIREFRAME,
                p.EDrawMeshAs.SOLID_WIREFRAME,
                p.EDrawMeshAs.SOLID_WIREFRAME_WITH_CONTOURS,
              ]) && (t |= f.SCRT_GRID_DRAWING_FEATURES_WIREFRAME),
                this.hasFlag(this.parentSeries.drawMeshAs, [
                  p.EDrawMeshAs.SOLID_WIREFRAME,
                  p.EDrawMeshAs.SOLID_MESH,
                  p.EDrawMeshAs.SOLID_WITH_CONTOURS,
                  p.EDrawMeshAs.SOLID_WIREFRAME_WITH_CONTOURS,
                ]) && (t |= f.SCRT_GRID_DRAWING_FEATURES_SOLID),
                this.hasFlag(this.parentSeries.drawMeshAs, [
                  p.EDrawMeshAs.CONTOURS,
                  p.EDrawMeshAs.SOLID_WITH_CONTOURS,
                  p.EDrawMeshAs.SOLID_WIREFRAME_WITH_CONTOURS,
                ]) && (t |= f.SCRT_GRID_DRAWING_FEATURES_CONTOURS),
                this.parentSeries.drawSkirt &&
                  (t |= f.SCRT_GRID_DRAWING_FEATURES_SKIRT);
              const i = this.hasFlag(this.parentSeries.meshPaletteMode, [
                  p.EMeshPaletteMode.HEIGHT_MAP_INTERPOLATED,
                  p.EMeshPaletteMode.HEIGHT_MAP_SOLID_CELLS,
                ]),
                r = this.hasFlag(this.parentSeries.meshPaletteMode, [
                  p.EMeshPaletteMode.HEIGHT_MAP_SOLID_CELLS,
                  p.EMeshPaletteMode.TEXTURED_SOLID_CELLS,
                ]);
              if (
                (e.SetDrawMeshAsInteger(t),
                (e.m_bUseGradient = i),
                (e.m_bUseSolidCells = r),
                (e.m_fStrokeThickness = this.parentSeries.strokeThickness),
                (e.m_fContourThickness =
                  this.parentSeries.contourStrokeThickness),
                (e.m_fContourInterval = this.parentSeries.contourInterval),
                (e.m_fContourOffset = this.parentSeries.contourOffset),
                this.parentSeries.stroke)
              ) {
                const t = (0, l.parseColorToTArgb)(this.parentSeries.stroke);
                (0, d.updateTsrVector4)(t, e.GetWireframeStrokePtr());
              }
              this.parentSeries.contourStroke &&
                (0, d.updateTsrVector4)(
                  (0, l.parseColorToTArgb)(this.parentSeries.contourStroke),
                  e.GetContourColorPtr()
                ),
                (e.m_fHardNormals = this.parentSeries.cellHardnessFactor),
                (e.m_fHighlight = this.parentSeries.highlight),
                (e.m_fShininess = this.parentSeries.shininess),
                (e.m_fLightingAmount = this.parentSeries.lightingFactor),
                this.nativeEntity.SetGridDrawingProperties(e);
            } finally {
              (0, r.deleteSafe)(e);
            }
            const t = this.currentRenderPassData.xCalc,
              i = this.currentRenderPassData.yCalc,
              s = this.currentRenderPassData.zCalc;
            let a, n, h, u, c, g;
            try {
              const e = new o.NumberRange(
                this.parentSeries.minimum,
                this.parentSeries.maximum
              );
              (a = this.rangeToSCRTAxisRange(
                this.webAssemblyContext,
                t,
                this.parentSeries.dataSeries.xRange
              )),
                (n = this.rangeToSCRTAxisRange(this.webAssemblyContext, i, e)),
                (h = this.rangeToSCRTAxisRange(
                  this.webAssemblyContext,
                  s,
                  this.parentSeries.dataSeries.zRange
                )),
                this.nativeEntity.SetMeshRange(a, n, h),
                (u = this.toSCRTAxisRange(
                  this.webAssemblyContext,
                  t,
                  t.visibleMin,
                  t.visibleMax
                )),
                (c = this.toSCRTAxisRange(
                  this.webAssemblyContext,
                  i,
                  i.visibleMin,
                  i.visibleMax
                )),
                (g = this.toSCRTAxisRange(
                  this.webAssemblyContext,
                  s,
                  s.visibleMin,
                  s.visibleMax
                )),
                this.nativeEntity.SetVisibleRange(u, c, g);
            } finally {
              (0, r.deleteSafe)(a),
                (0, r.deleteSafe)(n),
                (0, r.deleteSafe)(h),
                (0, r.deleteSafe)(u),
                (0, r.deleteSafe)(c),
                (0, r.deleteSafe)(g);
            }
            const y = this.parentSeries.yOffset
              ? i.getCoordinate(this.parentSeries.yOffset)
              : 0;
            this.nativeEntity.SetHeightmapScaleOffset(
              this.parentSeries.heightScaleFactor,
              y
            ),
              this.nativeEntity.SetTexture(this.colorMapTexture.getTexture()),
              super.Render();
          }
          updateSeries() {
            var e;
            const t = this.parentSeries.dataSeries;
            if (t) {
              s.Guard.isTrue(
                t.type === h.EDataSeriesType3D.UniformGrid3D ||
                  t.type === h.EDataSeriesType3D.NonUniformGrid3D,
                "SurfaceMeshSceneEntity dataSeries must be type UniformGrid3D or NonUniformGrid3D"
              );
              const i = t.xSize,
                o = t.zSize;
              s.Guard.notNull(
                this.currentRenderPassData,
                "SurfaceMeshSceneEntity.currentRenderPassData"
              ),
                this.state.isColorMapTextureInvalid &&
                  ((this.colorMapTexture = (0, r.deleteSafe)(
                    this.colorMapTexture
                  )),
                  (this.colorMapTexture =
                    null === (e = this.parentSeries.meshColorPalette) ||
                    void 0 === e
                      ? void 0
                      : e.getTexture(this.parentSeries.colorMapTextureSize)));
              const a = this.state.isInitialState,
                n = this.state.isDataSeriesModified;
              if (a) {
                let e;
                switch (this.parentSeries.meshResolution) {
                  case p.EMeshResolution.MESH_RESOLUTION_X1:
                    e =
                      this.webAssemblyContext.eSCRTGridMeshResolution
                        .SCRT_GRID_MESH_RES_X1;
                    break;
                  case p.EMeshResolution.MESH_RESOLUTION_X2:
                    e =
                      this.webAssemblyContext.eSCRTGridMeshResolution
                        .SCRT_GRID_MESH_RES_X2;
                    break;
                  case p.EMeshResolution.MESH_RESOLUTION_X4:
                    e =
                      this.webAssemblyContext.eSCRTGridMeshResolution
                        .SCRT_GRID_MESH_RES_X4;
                    break;
                  default:
                    throw Error(
                      "Unknown SurfaceMeshSceneEntity.meshResolution " +
                        this.parentSeries.meshResolution
                    );
                }
                const t = new this.webAssemblyContext.FloatVector(),
                  s = new this.webAssemblyContext.FloatVector(),
                  a = new this.webAssemblyContext.UIntVector();
                t.resize(i * o, 0),
                  s.resize(i * o, 0),
                  a.resize(i * o, 0),
                  this.nativeEntity.UpdateMeshesVec(t, s, a, i, o, e),
                  (0, r.deleteSafe)(t),
                  (0, r.deleteSafe)(s),
                  (0, r.deleteSafe)(a);
              }
              if (n) {
                const e = new this.webAssemblyContext.FloatVector(),
                  s = i * o;
                e.reserve(s);
                const a = this.currentRenderPassData.yCalc;
                for (let i = 0; i < t.zSize; i++)
                  for (let r = 0; r < t.xSize; r++)
                    e.push_back(a.getCoordinate(t.getYValue(i, r)));
                this.nativeEntity.UpdateHeightCoordinatesVec(e, i, o),
                  (0, r.deleteSafe)(e);
              }
            }
          }
          hasFlag(e, t) {
            return t.some((t) => t === e);
          }
          toSCRTAxisRange(e, t, i, r) {
            const s = new e.SCRTAxisRange();
            return (
              (s.m_fMin = t ? t.getCoordinate(i) : i),
              (s.m_fMax = t ? t.getCoordinate(r) : r),
              (s.m_fDiff = t ? t.getCoordinate(r - i) : r - i),
              s
            );
          }
          rangeToSCRTAxisRange(e, t, i) {
            return this.toSCRTAxisRange(e, t, i.min, i.max);
          }
        }
        t.SurfaceMeshSceneEntity = m;
      },
      83653: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseRenderableSeries3D = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(73538),
          a = i(23291),
          n = i(60063),
          l = i(94574),
          d = i(80995),
          h = i(19221);
        class u extends r.DeletableEntity {
          constructor(e, t) {
            var i, r;
            super(),
              (this.id =
                null !== (i = null == t ? void 0 : t.id) && void 0 !== i
                  ? i
                  : (0, o.generateGuid)()),
              (this.webAssemblyContext = e),
              (this.dataSeriesDataChanged =
                this.dataSeriesDataChanged.bind(this)),
              (this.pointMarkerPropertyChanged =
                this.pointMarkerPropertyChanged.bind(this)),
              (this.onDpiChanged = this.onDpiChanged.bind(this)),
              (this.hitTest = this.hitTest.bind(this)),
              (this.enrichHitTest = this.enrichHitTest.bind(this)),
              (this.dataSeries = (null == t ? void 0 : t.dataSeries) || void 0),
              (this.isVisibleProperty =
                void 0 === (null == t ? void 0 : t.isVisible) ||
                (null == t ? void 0 : t.isVisible)),
              (this.pointMarkerProperty =
                (null == t ? void 0 : t.pointMarker) || void 0),
              (this.strokeProperty =
                (null == t ? void 0 : t.stroke) || "#FFFFFF"),
              (this.shininessProperty =
                void 0 === (null == t ? void 0 : t.shininess)
                  ? 64
                  : t.shininess),
              (this.opacityProperty =
                null !== (r = null == t ? void 0 : t.opacity) && void 0 !== r
                  ? r
                  : 1);
          }
          applyTheme(e) {}
          get opacity() {
            return this.opacityProperty;
          }
          set opacity(e) {
            (this.opacityProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.OPACITY);
          }
          get sceneEntity() {
            return this.sceneEntityProperty;
          }
          get shininess() {
            return this.shininessProperty;
          }
          set shininess(e) {
            (this.shininessProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.SHININESS);
          }
          get paletteProvider() {
            return this.paletteProviderProperty;
          }
          set paletteProvider(e) {
            (this.paletteProviderProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.PALETTE_PROVIDER);
          }
          get stroke() {
            return this.strokeProperty;
          }
          set stroke(e) {
            (this.strokeProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.STROKE);
          }
          get dataSeries() {
            return this.dataSeriesProperty;
          }
          set dataSeries(e) {
            var t, i;
            (this.dataSeriesProperty = e),
              null === (t = this.dataSeriesProperty) ||
                void 0 === t ||
                t.dataChanged.unsubscribe(this.dataSeriesDataChanged),
              (this.dataSeriesProperty = e),
              null === (i = this.dataSeriesProperty) ||
                void 0 === i ||
                i.dataChanged.subscribe(this.dataSeriesDataChanged),
              this.notifyPropertyChanged(n.PROPERTY.DATA_SERIES);
          }
          get pointMarker() {
            return this.pointMarkerProperty;
          }
          set pointMarker(e) {
            this.detachPointMarker(this.pointMarkerProperty),
              (this.pointMarkerProperty = e),
              this.attachPointMarker(this.pointMarkerProperty),
              this.notifyPropertyChanged(n.PROPERTY.POINT_MARKER3D);
          }
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          set parentSurface(e) {
            (this.parentSurfaceProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.PARENT_SURFACE);
          }
          get isVisible() {
            return this.isVisibleProperty;
          }
          set isVisible(e) {
            (this.isVisibleProperty = e),
              this.sceneEntityProperty &&
                (this.sceneEntityProperty.isVisible = this.isVisibleProperty),
              this.notifyPropertyChanged(n.PROPERTY.IS_VISIBLE);
          }
          onAttach(e) {
            if (((this.parentSurface = e), this.invalidateParentCallback))
              throw new Error(
                "Invalid operation in sciChart3DSurface.attachSeries, this series has already been attached to a SciChart3DSurface. Please detach it from a SciChart3DSurface before attaching to another"
              );
            this.invalidateParentCallback = e.invalidateElement;
          }
          onDetach() {
            (this.invalidateParentCallback = void 0),
              (this.parentSurface = void 0);
          }
          delete() {
            (this.sceneEntityProperty = (0, s.deleteSafe)(
              this.sceneEntityProperty
            )),
              (this.dataSeries = (0, s.deleteSafe)(this.dataSeries));
          }
          onDpiChanged(e) {
            var t;
            null === (t = this.sceneEntityProperty) ||
              void 0 === t ||
              t.onDpiChanged(e);
          }
          hitTest(e) {
            if (this.parentSurface && !this.parentSurface.isHitTestEnabled)
              throw new Error(
                "Enable hit-test functions by setting SciChart3DSurface.isHitTestEnabled = true"
              );
            const t = this.sceneEntity.hitTest;
            return t ? this.enrichHitTest(t(e)) : l.SeriesInfo3D.empty();
          }
          dataSeriesDataChanged() {
            this.invalidateParentCallback && this.invalidateParentCallback();
          }
          enrichHitTest(e) {
            var t;
            const i =
              null === (t = e.associatedSeries) || void 0 === t
                ? void 0
                : t.dataSeries;
            if (!i) return l.SeriesInfo3D.empty();
            switch (i.type) {
              case a.EDataSeriesType3D.Xyz3D:
                return new h.XyzSeriesInfo3D(this, e);
              case a.EDataSeriesType3D.UniformGrid3D:
                return new d.SurfaceMeshSeriesInfo3D(this, e);
              default:
                throw new Error("Unknown data series type " + i.type);
            }
          }
          setSceneEntity(e) {
            (this.sceneEntityProperty = e),
              this.sceneEntityProperty &&
                (this.sceneEntityProperty.isVisible = this.isVisible),
              this.notifyPropertyChanged(n.PROPERTY.SCENE_ENTITY);
          }
          notifyPropertyChanged(e) {
            var t;
            null === (t = this.sceneEntityProperty) ||
              void 0 === t ||
              t.notifySeriesPropertyChanged(e),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          attachPointMarker(e) {
            e && e.propertyChanged.subscribe(this.pointMarkerPropertyChanged);
          }
          detachPointMarker(e) {
            e && e.propertyChanged.unsubscribe(this.pointMarkerPropertyChanged);
          }
          pointMarkerPropertyChanged(e) {
            this.notifyPropertyChanged("pointMarker." + e.propertyName);
          }
        }
        t.BaseRenderableSeries3D = u;
      },
      60063: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).CELL_HARDNESS_FACTOR =
            "CELL_HARDNESS_FACTOR"),
          (i.COLOR_MAP_TEXTURE_SIZE = "COLOR_MAP_TEXTURE_SIZE"),
          (i.CONTOUR_STROKE = "CONTOUR_STROKE"),
          (i.CONTOUR_OFFSET = "CONTOUR_OFFSET"),
          (i.CONTOUR_INTERVAL = "CONTOUR_INTERVAL"),
          (i.CONTOUR_STROKE_THICKNESS = "CONTOUR_STROKE_THICKNESS"),
          (i.DATA_SERIES = "DATA_SERIES"),
          (i.DRAW_MESH_AS = "DRAW_MESH_AS"),
          (i.DRAW_SKIRT = "DRAW_SKIRT"),
          (i.FILL = "FILL"),
          (i.GRADIENT_STOPS = "GRADIENT_STOPS"),
          (i.HEIGHT_SCALE_FACTOR = "HEIGHT_SCALE_FACTOR"),
          (i.HIGHLIGHT = "HIGHLIGHT"),
          (i.IS_ANTIALIASED = "IS_ANTIALIASED"),
          (i.IS_LINE_STRIP = "IS_LINE_STRIP"),
          (i.IS_VISIBLE = "IS_VISIBLE"),
          (i.LIGHTING_FACTOR = "LIGHTING_FACTOR"),
          (i.MAXIMUM = "MAXIMUM"),
          (i.MESH_COLOR_PALETTE = "MESH_COLOR_PALETTE"),
          (i.MESH_PALETTE_MODE = "MESH_PALETTE_MODE"),
          (i.MESH_RESOLUTION = "MESH_RESOLUTION"),
          (i.MINIMUM = "MINIMUM"),
          (i.OPACITY = "OPACITY"),
          (i.PALETTE_PROVIDER = "PALETTE_PROVIDER"),
          (i.PARENT_SURFACE = "PARENT_SURFACE"),
          (i.POINT_MARKER3D = "POINT_MARKER3D"),
          (i.SCENE_ENTITY = "SCENE_ENTITY"),
          (i.SHININESS = "SHININESS"),
          (i.STROKE = "STROKE"),
          (i.STROKE_THICKNESS = "STROKE_THICKNESS"),
          (i.Y_OFFSET = "Y_OFFSET");
      },
      45265: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ESeriesType3D = void 0),
          ((i =
            t.ESeriesType3D ||
            (t.ESeriesType3D = {})).ScatterRenderableSeries3D =
            "ScatterRenderableSeries3D"),
          (i.SurfaceMeshRenderableSeries3D = "SurfaceMeshRenderableSeries3D"),
          (i.PointLineRenderableSeries3D = "PointLineRenderableSeries3D");
      },
      56172: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HitTestInfo3D = void 0);
        class i {
          constructor(e, t = !1) {
            (this.isEmpty = t), (this.associatedSeries = e);
          }
          static empty() {
            return new i(void 0, !0);
          }
        }
        t.HitTestInfo3D = i;
      },
      39927: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PointLineRenderableSeries3D = void 0);
        const r = i(54005),
          s = i(83653),
          o = i(60063),
          a = i(45265);
        class n extends s.BaseRenderableSeries3D {
          constructor(e, t) {
            var i, s, o;
            super(e, t),
              (this.type = a.ESeriesType3D.PointLineRenderableSeries3D),
              (this.strokeThicknessProperty =
                null !== (i = null == t ? void 0 : t.strokeThickness) &&
                void 0 !== i
                  ? i
                  : 2),
              (this.isLineStripProperty =
                null === (s = null == t ? void 0 : t.isLineStrip) ||
                void 0 === s ||
                s),
              (this.isAntiAliasedProperty =
                null === (o = null == t ? void 0 : t.isAntiAliased) ||
                void 0 === o ||
                o),
              this.setSceneEntity(new r.PointLine3DSceneEntity(e, this));
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.STROKE_THICKNESS);
          }
          get isLineStrip() {
            return this.isLineStripProperty;
          }
          set isLineStrip(e) {
            (this.isLineStripProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.IS_LINE_STRIP);
          }
          get isAntiAliased() {
            return this.isAntiAliasedProperty;
          }
          set isAntiAliased(e) {
            (this.isAntiAliasedProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.IS_ANTIALIASED);
          }
        }
        t.PointLineRenderableSeries3D = n;
      },
      72954: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ScatterRenderableSeries3D = void 0);
        const r = i(77162),
          s = i(83653),
          o = i(45265);
        class a extends s.BaseRenderableSeries3D {
          constructor(e, t) {
            super(e, t),
              (this.type = o.ESeriesType3D.ScatterRenderableSeries3D),
              this.setSceneEntity(new r.ScatterPointsSceneEntity(e, this));
          }
        }
        t.ScatterRenderableSeries3D = a;
      },
      94574: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesInfo3D = void 0);
        class i {
          constructor(e, t) {
            var i;
            (this.isEmpty = !1),
              (this.renderableSeries = e),
              (this.dataSeriesName =
                null === (i = null == e ? void 0 : e.dataSeries) || void 0 === i
                  ? void 0
                  : i.dataSeriesName),
              (this.isHit = t.isHit),
              (this.hitTestInfo = t);
          }
          static empty() {
            const e = new i(void 0, void 0);
            return (e.isEmpty = !0), e;
          }
        }
        t.SeriesInfo3D = i;
      },
      80995: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SurfaceMeshSeriesInfo3D = void 0);
        const r = i(21670),
          s = i(23291),
          o = i(16110),
          a = i(94574);
        class n extends a.SeriesInfo3D {
          constructor(e, t) {
            super(e, t),
              (this.dataSeriesType = s.EDataSeriesType3D.UniformGrid3D),
              this.enrichSeriesInfo();
          }
          enrichSeriesInfo() {
            if (!this.isHit || !this.renderableSeries) return;
            const e = this.renderableSeries.dataSeries;
            if (!e) return;
            const t = {
                x: this.hitTestInfo.selectionIjIndices.x,
                z: this.hitTestInfo.selectionIjIndices.y,
              },
              i = { x: e.getX(t.x), y: e.getYValue(t.z, t.x), z: e.getZ(t.z) },
              s = {
                x: e.getX(t.x + 1),
                y: e.getYValue(t.z, t.x + 1),
                z: e.getZ(t.z),
              },
              a = {
                x: e.getX(t.x),
                y: e.getYValue(t.z + 1, t.x),
                z: e.getZ(t.z + 1),
              },
              n = {
                x: e.getX(t.x + 1),
                y: e.getYValue(t.z + 1, t.x + 1),
                z: e.getZ(t.z + 1),
              },
              l = this.renderableSeries.parentSurface;
            if (!(l && l.xAxis && l.yAxis && l.zAxis)) return;
            const d = l.xAxis.getCurrentCoordinateCalculator(),
              h = l.yAxis.getCurrentCoordinateCalculator(),
              u = l.zAxis.getCurrentCoordinateCalculator(),
              c = new o.Vector3(
                d.getCoordinate(i.x),
                h.getCoordinate(i.y),
                u.getCoordinate(i.z)
              ),
              p = new o.Vector3(
                d.getCoordinate(s.x),
                h.getCoordinate(s.y),
                u.getCoordinate(s.z)
              ),
              g = new o.Vector3(
                d.getCoordinate(a.x),
                h.getCoordinate(a.y),
                u.getCoordinate(a.z)
              ),
              y = new o.Vector3(
                d.getCoordinate(n.x),
                h.getCoordinate(n.y),
                u.getCoordinate(n.z)
              ),
              f = l.worldToScreenCoord(c),
              v = l.worldToScreenCoord(p),
              m = l.worldToScreenCoord(g),
              S = l.worldToScreenCoord(y),
              P = (0, r.calcDistance)(
                f.x,
                f.y,
                this.hitTestInfo.hitTestPoint.x,
                this.hitTestInfo.hitTestPoint.y
              ),
              C = (0, r.calcDistance)(
                v.x,
                v.y,
                this.hitTestInfo.hitTestPoint.x,
                this.hitTestInfo.hitTestPoint.y
              ),
              x = (0, r.calcDistance)(
                m.x,
                m.y,
                this.hitTestInfo.hitTestPoint.x,
                this.hitTestInfo.hitTestPoint.y
              ),
              b = (0, r.calcDistance)(
                S.x,
                S.y,
                this.hitTestInfo.hitTestPoint.x,
                this.hitTestInfo.hitTestPoint.y
              ),
              A = 0.5 * l.worldDimensions.x,
              T = 0.5 * l.worldDimensions.z,
              E = Math.min(P, C, x, b);
            E === P &&
              ((this.xIndex = t.x),
              (this.zIndex = t.z),
              (this.xValue = i.x),
              (this.yValue = i.y),
              (this.zValue = i.z),
              (this.hitWorldCoords = new o.Vector3(c.x - A, c.y, c.z - T))),
              E === x &&
                ((this.xIndex = t.x),
                (this.zIndex = t.z + 1),
                (this.xValue = a.x),
                (this.yValue = a.y),
                (this.zValue = a.z),
                (this.hitWorldCoords = new o.Vector3(g.x - A, g.y, g.z - T))),
              E === C &&
                ((this.xIndex = t.x + 1),
                (this.zIndex = t.z),
                (this.xValue = s.x),
                (this.yValue = s.y),
                (this.zValue = s.z),
                (this.hitWorldCoords = new o.Vector3(p.x - A, p.y, p.z - T))),
              E === b &&
                ((this.xIndex = t.x + 1),
                (this.zIndex = t.z + 1),
                (this.xValue = n.x),
                (this.yValue = n.y),
                (this.zValue = n.z),
                (this.hitWorldCoords = new o.Vector3(y.x - A, y.y, y.z - T)));
          }
        }
        t.SurfaceMeshSeriesInfo3D = n;
      },
      28009: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GradientColorPalette = void 0);
        const r = i(35992),
          s = i(84745),
          o = i(23866),
          a = i(60063),
          n = i(46294);
        class l extends n.MeshColorPalette {
          constructor(e, t) {
            super(e),
              (this.gradientStops = (null == t ? void 0 : t.gradientStops) || [
                { offset: 0, color: "Red" },
                { offset: 1, color: "Green" },
              ]);
          }
          get gradientStops() {
            return this.gradientStopsProperty;
          }
          set gradientStops(e) {
            (this.gradientStopsProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.GRADIENT_STOPS);
          }
          getTexture(e) {
            if (s.IS_TEST_ENV) return;
            o.Guard.notNull(e, "size"),
              o.Guard.isTrue(e.width > 0, "size.width must be greater than 0"),
              o.Guard.isTrue(
                e.height > 0,
                "size.height must be greater than 0"
              ),
              o.Guard.notNull(
                this.gradientStopsProperty,
                "GradientColorPalette.gradientStops"
              );
            const t = new r.CanvasTexture(
              this.webAssemblyContext,
              e.width,
              e.height
            );
            t.clear();
            const i = t.getContext(),
              a = e.width,
              n = i.createLinearGradient(0, 0, a, 0);
            return (
              this.gradientStops.forEach((e) => {
                n.addColorStop(e.offset, e.color);
              }),
              (i.fillStyle = n),
              i.fillRect(0, 0, e.width, e.height),
              t.copyTexture(),
              t
            );
          }
        }
        t.GradientColorPalette = l;
      },
      46294: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MeshColorPalette = void 0);
        const r = i(3214),
          s = i(50605);
        t.MeshColorPalette = class {
          constructor(e) {
            (this.webAssemblyContext = e),
              (this.propertyChanged = new r.EventHandler());
          }
          notifyPropertyChanged(e) {
            var t;
            null === (t = this.propertyChanged) ||
              void 0 === t ||
              t.raiseEvent(new s.PropertyChangedEventArgs(e));
          }
        };
      },
      25889: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SolidColorBrushPalette = void 0);
        const r = i(35992),
          s = i(84745),
          o = i(23866),
          a = i(48008),
          n = i(60063),
          l = i(46294);
        class d extends l.MeshColorPalette {
          constructor(e, t) {
            super(e),
              (this.fillProperty = (null == t ? void 0 : t.fill) || "#777777");
          }
          get fill() {
            return this.fillProperty;
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.FILL);
          }
          getTexture(e) {
            if (
              (o.Guard.notNull(e, "size"),
              o.Guard.isTrue(e.width > 0, "size.width must be greater than 0"),
              o.Guard.isTrue(
                e.height > 0,
                "size.height must be greater than 0"
              ),
              s.IS_TEST_ENV)
            )
              return;
            const t = (0, a.parseColorToUIntArgb)(this.fill);
            if (isNaN(t))
              throw Error(
                `SolidColorBrushPalette.fill ${this.fill} cannot be converted to an ABGR color`
              );
            const i = new r.CanvasTexture(
              this.webAssemblyContext,
              e.width,
              e.height
            );
            i.clear();
            const n = i.getContext();
            return (
              (n.fillStyle = this.fill),
              n.fillRect(0, 0, e.width, e.height),
              i.copyTexture(),
              i
            );
          }
        }
        t.SolidColorBrushPalette = d;
      },
      10435: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SurfaceMeshRenderableSeries3D =
            t.EMeshResolution =
            t.EMeshPaletteMode =
            t.EDrawMeshAs =
              void 0);
        const r = i(22022),
          s = i(98694),
          o = i(83653),
          a = i(60063),
          n = i(45265);
        var l, d, h;
        !(function (e) {
          (e.WIREFRAME = "WIREFRAME"),
            (e.SOLID_WIREFRAME = "SOLID_WIREFRAME"),
            (e.SOLID_WIREFRAME_WITH_CONTOURS = "SOLID_WIREFRAME_WITH_CONTOURS"),
            (e.SOLID_MESH = "SOLID_MESH"),
            (e.SOLID_WITH_CONTOURS = "SOLID_WITH_CONTOURS"),
            (e.CONTOURS = "CONTOURS");
        })((l = t.EDrawMeshAs || (t.EDrawMeshAs = {}))),
          (function (e) {
            (e.HEIGHT_MAP_INTERPOLATED = "HEIGHT_MAP_INTERPOLATED"),
              (e.HEIGHT_MAP_SOLID_CELLS = "HEIGHT_MAP_SOLID_CELLS"),
              (e.TEXTURED_SOLID_CELLS = "TEXTURED_SOLID_CELLS");
          })((d = t.EMeshPaletteMode || (t.EMeshPaletteMode = {}))),
          (function (e) {
            (e[(e.MESH_RESOLUTION_X1 = 1)] = "MESH_RESOLUTION_X1"),
              (e[(e.MESH_RESOLUTION_X2 = 2)] = "MESH_RESOLUTION_X2"),
              (e[(e.MESH_RESOLUTION_X4 = 4)] = "MESH_RESOLUTION_X4");
          })((h = t.EMeshResolution || (t.EMeshResolution = {})));
        class u extends o.BaseRenderableSeries3D {
          constructor(e, t) {
            super(e, t),
              (this.drawMeshAsProperty =
                (null == t ? void 0 : t.drawMeshAs) || l.SOLID_WIREFRAME),
              (this.strokeThicknessProperty =
                void 0 !== (null == t ? void 0 : t.strokeThickness)
                  ? null == t
                    ? void 0
                    : t.strokeThickness
                  : 1),
              (this.drawSkirtProperty =
                void 0 === (null == t ? void 0 : t.drawSkirt) ||
                (null == t ? void 0 : t.drawSkirt)),
              (this.meshColorPaletteProperty =
                null == t ? void 0 : t.meshColorPalette),
              (this.minimumProperty =
                void 0 !== (null == t ? void 0 : t.minimum)
                  ? null == t
                    ? void 0
                    : t.minimum
                  : 0),
              (this.maximumProperty =
                void 0 !== (null == t ? void 0 : t.maximum)
                  ? null == t
                    ? void 0
                    : t.maximum
                  : 1),
              (this.meshPaletteModeProperty =
                (null == t ? void 0 : t.meshPaletteMode) ||
                d.HEIGHT_MAP_INTERPOLATED),
              (this.colorMapTextureSizeProperty =
                (null == t ? void 0 : t.colorMapTextureSize) ||
                new r.Size(1024, 1)),
              (this.heightScaleFactorProperty =
                void 0 !== (null == t ? void 0 : t.heightScaleFactor)
                  ? null == t
                    ? void 0
                    : t.heightScaleFactor
                  : 1),
              (this.meshResolutionProperty =
                (null == t ? void 0 : t.meshResolution) ||
                h.MESH_RESOLUTION_X1),
              (this.yOffsetProperty =
                void 0 !== (null == t ? void 0 : t.yOffset)
                  ? null == t
                    ? void 0
                    : t.yOffset
                  : 0),
              (this.cellHardnessFactorProperty =
                void 0 !== (null == t ? void 0 : t.cellHardnessFactor)
                  ? null == t
                    ? void 0
                    : t.cellHardnessFactor
                  : 1),
              (this.lightingFactorProperty =
                void 0 !== (null == t ? void 0 : t.lightingFactor)
                  ? null == t
                    ? void 0
                    : t.lightingFactor
                  : 0.8),
              (this.contourStrokeThicknessProperty =
                void 0 !== (null == t ? void 0 : t.contourStrokeThickness)
                  ? null == t
                    ? void 0
                    : t.contourStrokeThickness
                  : 2),
              (this.contourIntervalProperty =
                void 0 !== (null == t ? void 0 : t.contourInterval)
                  ? null == t
                    ? void 0
                    : t.contourInterval
                  : 20),
              (this.contourOffsetProperty =
                void 0 !== (null == t ? void 0 : t.contourOffset)
                  ? t.contourOffset
                  : 0.1),
              (this.contourStrokeProperty =
                (null == t ? void 0 : t.contourStroke) || "#FFFFFF"),
              (this.highlightProperty =
                void 0 !== (null == t ? void 0 : t.highlight)
                  ? null == t
                    ? void 0
                    : t.highlight
                  : 0.05),
              this.setSceneEntity(new s.SurfaceMeshSceneEntity(e, this));
          }
          get type() {
            return n.ESeriesType3D.SurfaceMeshRenderableSeries3D;
          }
          get colorMapTextureSize() {
            return this.colorMapTextureSizeProperty;
          }
          set colorMapTextureSize(e) {
            (this.colorMapTextureSizeProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.COLOR_MAP_TEXTURE_SIZE);
          }
          get drawMeshAs() {
            return this.drawMeshAsProperty;
          }
          set drawMeshAs(e) {
            (this.drawMeshAsProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.DRAW_MESH_AS);
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.STROKE_THICKNESS);
          }
          get drawSkirt() {
            return this.drawSkirtProperty;
          }
          set drawSkirt(e) {
            (this.drawSkirtProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.DRAW_SKIRT);
          }
          get meshColorPalette() {
            return this.meshColorPaletteProperty;
          }
          set meshColorPalette(e) {
            (this.meshColorPaletteProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.MESH_COLOR_PALETTE);
          }
          get minimum() {
            return this.minimumProperty;
          }
          set minimum(e) {
            (this.minimumProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.MINIMUM);
          }
          get maximum() {
            return this.maximumProperty;
          }
          set maximum(e) {
            (this.maximumProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.MAXIMUM);
          }
          get meshPaletteMode() {
            return this.meshPaletteModeProperty;
          }
          set meshPaletteMode(e) {
            (this.meshPaletteModeProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.MESH_PALETTE_MODE);
          }
          get heightScaleFactor() {
            return this.heightScaleFactorProperty;
          }
          set heightScaleFactor(e) {
            (this.heightScaleFactorProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.HEIGHT_SCALE_FACTOR);
          }
          get meshResolution() {
            return this.meshResolutionProperty;
          }
          set meshResolution(e) {
            (this.meshResolutionProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.MESH_RESOLUTION);
          }
          get yOffset() {
            return this.yOffsetProperty;
          }
          set yOffset(e) {
            (this.yOffsetProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.Y_OFFSET);
          }
          get cellHardnessFactor() {
            return this.cellHardnessFactorProperty;
          }
          set cellHardnessFactor(e) {
            (this.cellHardnessFactorProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CELL_HARDNESS_FACTOR);
          }
          get lightingFactor() {
            return this.lightingFactorProperty;
          }
          set lightingFactor(e) {
            (this.lightingFactorProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.LIGHTING_FACTOR);
          }
          get contourStrokeThickness() {
            return this.contourStrokeThicknessProperty;
          }
          set contourStrokeThickness(e) {
            (this.contourStrokeThicknessProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CONTOUR_STROKE_THICKNESS);
          }
          get contourInterval() {
            return this.contourIntervalProperty;
          }
          set contourInterval(e) {
            (this.contourIntervalProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CONTOUR_INTERVAL);
          }
          get contourOffset() {
            return this.contourOffsetProperty;
          }
          set contourOffset(e) {
            (this.contourOffsetProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CONTOUR_OFFSET);
          }
          get contourStroke() {
            return this.contourStrokeProperty;
          }
          set contourStroke(e) {
            (this.contourStrokeProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.CONTOUR_STROKE);
          }
          get highlight() {
            return this.highlightProperty;
          }
          set highlight(e) {
            (this.highlightProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.HIGHLIGHT);
          }
        }
        t.SurfaceMeshRenderableSeries3D = u;
      },
      19221: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzSeriesInfo3D = void 0);
        const r = i(23291),
          s = i(16110),
          o = i(94574);
        class a extends o.SeriesInfo3D {
          constructor(e, t) {
            super(e, t),
              (this.dataSeriesType = r.EDataSeriesType3D.Xyz3D),
              this.enrichSeriesInfo();
          }
          enrichSeriesInfo() {
            if (!this.isHit || !this.renderableSeries) return;
            this.dataSeriesIndex = this.hitTestInfo.selectionIndex - 1;
            const e = this.renderableSeries.dataSeries;
            if (e) {
              (this.xValue = e.getNativeXValues().get(this.dataSeriesIndex)),
                (this.yValue = e.getNativeYValues().get(this.dataSeriesIndex)),
                (this.zValue = e.getNativeZValues().get(this.dataSeriesIndex));
              const t = e.getMetadataValues();
              t &&
                t.length > this.dataSeriesIndex &&
                (this.pointMetadata = t[this.dataSeriesIndex]);
              const i = this.renderableSeries.parentSurface;
              if (i) {
                const e = 0.5 * i.worldDimensions.x,
                  t = 0.5 * i.worldDimensions.z,
                  r =
                    i.xAxis
                      .getCurrentCoordinateCalculator()
                      .getCoordinate(this.xValue) - e,
                  o = i.yAxis
                    .getCurrentCoordinateCalculator()
                    .getCoordinate(this.yValue),
                  a =
                    i.zAxis
                      .getCurrentCoordinateCalculator()
                      .getCoordinate(this.zValue) - t;
                this.hitWorldCoords = new s.Vector3(r, o, a);
              }
            }
          }
        }
        t.XyzSeriesInfo3D = a;
      },
      228: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RootSceneEntity = void 0);
        const r = i(34116),
          s = i(85418),
          o = i(21240),
          a = i(23866);
        class n extends s.BaseSceneEntity3D {
          constructor(e, t) {
            super(e),
              (this.type = r.ESceneEntityType.RootSceneEntity),
              a.Guard.notNull(t, "parentSurface"),
              (this.parentSurface = t),
              (this.entityIdProvider = new o.DefaultEntityIdProvider());
          }
          attachChild(e) {
            (null == e ? void 0 : e.nativeEntity) &&
              this.world.AddEntity(e.nativeEntity),
              (e.entityIdProvider = this.entityIdProvider),
              (e.parent = this),
              e.onAttached();
          }
          detachChild(e) {
            (null == e ? void 0 : e.nativeEntity) &&
              this.world.RemoveEntity(e.nativeEntity),
              e.onDetached(),
              (e.parent = void 0);
          }
        }
        t.RootSceneEntity = n;
      },
      20254: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChart3DRenderer = void 0);
        const r = i(84736),
          s = i(56744),
          o = i(23866),
          a = i(87459),
          n = i(12785),
          l = i(24149),
          d = i(68021),
          h = i(33517),
          u = i(72476),
          c = i(41859);
        class p {
          constructor(e, t) {
            (this.isInvalidated = !1),
              o.Guard.notNull(e, "scs"),
              (this.scs = e),
              (this.wasmContext = t);
          }
          static getSceneDescriptor(e) {
            var t, i, r;
            const s = new c.SceneDescriptor();
            return (
              (s.axisCubeDescriptor = new h.AxisCubeDescriptor()),
              (s.axisCubeDescriptor.dimensions = e.worldDimensions),
              (s.axisCubeDescriptor.isVisible = !0),
              (s.axisCubeDescriptor.xAxisDescriptor =
                null === (t = e.xAxis) || void 0 === t
                  ? void 0
                  : t.toAxisDescriptor()),
              (s.axisCubeDescriptor.yAxisDescriptor =
                null === (i = e.yAxis) || void 0 === i
                  ? void 0
                  : i.toAxisDescriptor()),
              (s.axisCubeDescriptor.zAxisDescriptor =
                null === (r = e.zAxis) || void 0 === r
                  ? void 0
                  : r.toAxisDescriptor()),
              s
            );
          }
          static prepareRenderData(e) {
            const t = new u.RenderPassInfo3D();
            return (
              (t.xCalc = e.xAxis.getCurrentCoordinateCalculator()),
              (t.yCalc = e.yAxis.getCurrentCoordinateCalculator()),
              (t.zCalc = e.zAxis.getCurrentCoordinateCalculator()),
              (t.worldDimensions = e.worldDimensions),
              (t.sceneDescriptor = p.getSceneDescriptor(e)),
              t
            );
          }
          static tryPerformAutoRangeOn(e, t) {
            if (
              ((!e.hasValidVisibleRange() || e.hasDefaultVisibleRange()) &&
                e.autoRange === n.EAutoRange.Once) ||
              e.autoRange === n.EAutoRange.Always
            ) {
              const i = t.viewportManager.calculateAutoRange(e);
              i &&
                i !== e.visibleRange &&
                e.isValidRange(i) &&
                (e.visibleRange = i);
            }
          }
          render() {
            var e;
            if (this.scs.isDeleted || !this.scs.isInitialized) return;
            if (!this.isSurfaceValid(this.scs))
              throw Error("SciChart3DSurface is not valid");
            const t = d.PerformanceDebugHelper.mark(
              d.EPerformanceMarkType.RenderStart,
              { contextId: this.scs.id }
            );
            (this.isInvalidated = !1),
              this.scs.webAssemblyContext3D.SCRTSetIsSelectionBufferEnabled(
                this.scs.isHitTestEnabled
              );
            const i = this.scs.getSceneWorld();
            if (!i)
              return void console.warn(
                "SciChart3DRenderer: Undefined scene world!"
              );
            this.scs.preRender.raiseEvent(),
              this.wasmContext.SCRTSetActiveWorld(i),
              this.updateWorldDimensions(i, this.scs.worldDimensions);
            const s = i.GetMainCamera();
            this.scs.camera.updateEngineCamera(s);
            const { width: o, height: n } = this.scs.viewportManager,
              l = new a.Rect(0, 0, o, n);
            this.scs.setSeriesViewRect(l);
            const h = this.previousTime
              ? Date.now() - this.previousTime
              : void 0;
            (this.previousTime = Date.now()),
              this.scs.onAnimate(h),
              this.scs.updateBackground(),
              this.prepareAxes(this.scs.xAxis, this.scs.yAxis, this.scs.zAxis);
            const u = p.prepareRenderData(this.scs);
            this.scs.rootEntity.visitEntities((e) => e.setRenderPassData(u)),
              [
                ...this.scs.annotations.asArray(),
                ...this.scs.modifierAnnotations.asArray(),
              ]
                .filter(
                  (e) =>
                    e.type === r.EAnnotationType.SVG ||
                    e.type === r.EAnnotationType.SVGTextAnnotation ||
                    e.type === r.EAnnotationType.SVGCustomAnnotation
                )
                .forEach((e) => e.update(void 0, void 0, 0, 0)),
              this.updateWatermark(),
              d.PerformanceDebugHelper.mark(d.EPerformanceMarkType.RenderEnd, {
                contextId: this.scs.id,
                relatedId:
                  null === (e = null == t ? void 0 : t.detail) || void 0 === e
                    ? void 0
                    : e.relatedId,
              }),
              this.scs.onSciChartRendered(),
              this.scs.isRunningAnimation &&
                setTimeout(this.scs.invalidateElement, 0);
          }
          updateWatermark() {
            const e = this.scs.getMainCanvas().clientHeight,
              t = this.scs.getMainCanvas().clientWidth;
            let i = 5,
              r = e - 10;
            const s = Math.max(72, Math.min(0.25 * t, 256)),
              o = (42 * s) / 256;
            switch (this.scs.watermarkPosition) {
              case l.EWatermarkPosition.BottomRight:
                (i = t - s - 5), (r = 12);
                break;
              case l.EWatermarkPosition.TopLeft:
                (i = 5), (r = e - (5 + o));
                break;
              case l.EWatermarkPosition.TopRight:
                (i = t - s - 5), (r = e - (5 + o));
                break;
              case l.EWatermarkPosition.BottomLeft:
                (i = 5), (r = 12);
            }
            this.scs.updateWatermark(i, r);
          }
          isSurfaceValid(e, t) {
            if (!e.xAxis)
              throw new Error(
                "Unable to draw SciChart3DSurface as the xAxis is undefined"
              );
            if (!e.yAxis)
              throw new Error(
                "Unable to draw SciChart3DSurface as the yAxis is undefined"
              );
            if (!e.zAxis)
              throw new Error(
                "Unable to draw SciChart3DSurface as the zAxis is undefined"
              );
            return !0;
          }
          prepareAxes(...e) {
            e.forEach((e) => {
              e.validateAxis(),
                p.tryPerformAutoRangeOn(e, this.scs),
                (e.isMeasured = !0);
            });
          }
          updateWorldDimensions(e, t) {
            let i;
            o.Guard.notNull(t, "worldDimensions");
            try {
              (i = this.scs.worldDimensions.toTsrVector3(this.wasmContext)),
                e.SetWorldDimensions(i);
            } finally {
              (0, s.deleteSafe)(i);
            }
          }
        }
        t.SciChart3DRenderer = p;
      },
      52361: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChart3DSurface = t.sciChartConfig3D = void 0);
        const r = i(14184),
          s = i(86127),
          o = i(84745),
          a = i(56744),
          n = i(37796),
          l = i(75772),
          d = i(3810),
          h = i(16110),
          u = i(22054),
          c = i(17542),
          p = i(38051),
          g = i(86753),
          y = i(36561),
          f = i(1989),
          v = i(228),
          m = i(20254),
          S = i(34238),
          P = i(85479),
          C = i(62049),
          x = i(99263),
          b = i(23447),
          A = i(3214),
          T = i(87108),
          E = i(68021),
          R = i(87459),
          w = i(32873),
          D = i(9254);
        t.sciChartConfig3D = {};
        class L extends r.SciChartSurfaceBase {
          constructor(e, t) {
            var i, r, a, l;
            super(e, null == t ? void 0 : t.canvases),
              (this.watermarkPosition = P.SciChartDefaults.watermarkPosition),
              (this.preRender = new A.EventHandler()),
              (this.animationList = []),
              (this.isAxisCubeRenderedProperty = !1),
              (this.isHitTestEnabledProperty = !1);
            const d =
                null !==
                  (r =
                    null === (i = this.domCanvas2D) || void 0 === i
                      ? void 0
                      : i.width) && void 0 !== r
                  ? r
                  : o.DEFAULT_WIDTH,
              c =
                null !==
                  (l =
                    null === (a = this.domCanvas2D) || void 0 === a
                      ? void 0
                      : a.height) && void 0 !== l
                  ? l
                  : o.DEFAULT_HEIGHT;
            if (((this.webAssemblyContext3D = e), !o.IS_TEST_ENV)) {
              const t = d / s.DpiHelper.PIXEL_RATIO,
                i = c / s.DpiHelper.PIXEL_RATIO;
              this.isCopyCanvasSurface
                ? this.changeMasterCanvasViewportSize(e, t, i)
                : this.changeWebGLCanvasViewportSize(e, t, i);
            }
            (this.invalidateElement = this.invalidateElement.bind(this)),
              (this.sciChart3DRenderer = new m.SciChart3DRenderer(this, e)),
              (this.viewportManager = new y.DefaultViewportManager3D(d, c)),
              (this.worldDimensionsProperty =
                (null == t ? void 0 : t.worldDimensions) ||
                new h.Vector3(300, 200, 300)),
              (this.detachSeries = this.detachSeries.bind(this)),
              (this.attachSeries = this.attachSeries.bind(this)),
              (this.renderableSeries = new n.ObservableArray()),
              this.renderableSeries.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach((e) => this.detachSeries(e)),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach((e) => this.attachSeries(e));
              }),
              (this.childPropertyChanged =
                this.childPropertyChanged.bind(this)),
              (this.sceneWorldProperty =
                new this.webAssemblyContext3D.SCRTSceneWorld()),
              this.sceneWorldProperty.Init(),
              (this.rootEntity = new v.RootSceneEntity(e, this)),
              (this.axisCubeEntity = new u.AxisCubeEntity(e, this)),
              this.rootEntity.children.add(this.axisCubeEntity),
              (this.gizmoEntity = new f.GizmoEntity(e)),
              (this.gizmoEntity.enableGizmo = !0),
              this.rootEntity.children.add(this.gizmoEntity),
              o.IS_TEST_ENV ||
                ((this.watermarkProperties = new e.SCRTWaterMarkProperties()),
                (this.watermarkProperties.m_fCanvasWidth = d),
                (this.watermarkPropertyPosition = new e.TSRVector2(0, 0)),
                this.watermarkProperties.SetPosition(
                  this.watermarkPropertyPosition
                ),
                this.watermarkProperties.SetOpacity(0.5),
                e.SCRT3DSetWaterMarkProperties(this.watermarkProperties));
          }
          static createSingle(e, t) {
            const i = E.PerformanceDebugHelper.mark(
              E.EPerformanceMarkType.InitializationStart,
              { contextId: null == t ? void 0 : t.id }
            );
            return (0, g.createSingle3dInternal)(e, t).then((e) => {
              var r;
              return (
                e.sciChart3DSurface.applyOptions(t),
                E.PerformanceDebugHelper.mark(
                  E.EPerformanceMarkType.InitializationEnd,
                  {
                    contextId: e.sciChart3DSurface.id,
                    relatedId:
                      null === (r = null == i ? void 0 : i.detail) ||
                      void 0 === r
                        ? void 0
                        : r.relatedId,
                  }
                ),
                e
              );
            });
          }
          static configure(e) {
            var i, r;
            (t.sciChartConfig3D.dataUrl =
              null !== (i = null == e ? void 0 : e.dataUrl) && void 0 !== i
                ? i
                : void 0),
              (t.sciChartConfig3D.wasmUrl =
                null !== (r = null == e ? void 0 : e.wasmUrl) && void 0 !== r
                  ? r
                  : void 0);
          }
          static useWasmFromCDN() {
            (t.sciChartConfig3D.dataUrl = `https://cdn.jsdelivr.net/npm/scichart@3.5.704${S.libraryVersion}/_wasm/scichart3d.data`),
              (t.sciChartConfig3D.wasmUrl = `https://cdn.jsdelivr.net/npm/scichart@3.5.704${S.libraryVersion}/_wasm/scichart3d.wasm`);
          }
          static loadWasmFromCDN() {
            return L.useWasmFromCDN();
          }
          static loadWasmLocal() {
            return L.configure(void 0);
          }
          static create(e, t) {
            const i = E.PerformanceDebugHelper.mark(
              E.EPerformanceMarkType.InitializationStart,
              { contextId: null == t ? void 0 : t.id }
            );
            return (0, p.createMultichart3d)(e, t).then((e) => {
              var r, s;
              return (
                e.sciChart3DSurface.applyOptions(t),
                E.PerformanceDebugHelper.mark(
                  E.EPerformanceMarkType.InitializationEnd,
                  {
                    contextId:
                      null === (r = e.sciChart3DSurface) || void 0 === r
                        ? void 0
                        : r.id,
                    relatedId:
                      null === (s = null == i ? void 0 : i.detail) ||
                      void 0 === s
                        ? void 0
                        : s.relatedId,
                  }
                ),
                e
              );
            });
          }
          static disposeSharedWasmContext() {
            0 === x.sciChart3DDestinations.length &&
              0 === x.sciChartDestinations.length &&
              ((0, b.disposeMultiChart)(), (0, p.disposeMultiChart3d)()),
              super.disposeSharedWasmContext();
          }
          getSceneWorld() {
            return this.sceneWorldProperty;
          }
          worldToScreenCoord(e) {
            const t = this.getSceneWorld();
            if (!t) return;
            const i = e.toTsrVector3(this.webAssemblyContext3D),
              r = t.TransformWorldToScreenCoords(i),
              s = new l.Point(r.x, r.y);
            return r.delete(), i.delete(), s;
          }
          delete(e = !0) {
            this.renderableSeries.asArray().forEach((e) => e.delete()),
              this.renderableSeries.clear(),
              (this.xAxis = (0, a.deleteSafe)(this.xAxis)),
              (this.yAxis = (0, a.deleteSafe)(this.yAxis)),
              (this.zAxis = (0, a.deleteSafe)(this.zAxis)),
              (this.rootEntity = (0, a.deleteSafe)(this.rootEntity)),
              (this.watermarkProperties = (0, a.deleteSafe)(
                this.watermarkProperties
              )),
              (this.watermarkPropertyPosition = (0, a.deleteSafe)(
                this.watermarkPropertyPosition
              )),
              (this.sceneWorldProperty = (0, a.deleteSafe)(
                this.sceneWorldProperty
              )),
              o.IS_TEST_ENV ||
                this.webAssemblyContext3D.SCRTSetActiveWorld(null),
              this.clearRootElement(e),
              super.delete();
          }
          get enableGizmo() {
            return this.gizmoEntity.enableGizmo;
          }
          set enableGizmo(e) {
            this.gizmoEntity.enableGizmo = e;
          }
          get viewportManager() {
            return this.viewportManagerProperty;
          }
          set viewportManager(e) {
            var t, i;
            null === (t = this.viewportManagerProperty) ||
              void 0 === t ||
              t.detachSciChartSurface(),
              (this.viewportManagerProperty = e),
              null === (i = this.viewportManagerProperty) ||
                void 0 === i ||
                i.attachSciChartSurface(this),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_VIEWPORT_MANAGER);
          }
          get worldDimensions() {
            return this.worldDimensionsProperty;
          }
          set worldDimensions(e) {
            (this.worldDimensionsProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_WORLD_DIMENSIONS);
          }
          get camera() {
            return this.cameraProperty;
          }
          set camera(e) {
            var t, i;
            null === (t = this.cameraProperty) ||
              void 0 === t ||
              t.propertyChanged.unsubscribe(this.childPropertyChanged),
              (this.cameraProperty = e),
              null === (i = this.cameraProperty) ||
                void 0 === i ||
                i.propertyChanged.subscribe(this.childPropertyChanged),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_CAMERA);
          }
          get xAxis() {
            return this.xAxisProperty;
          }
          set xAxis(e) {
            this.detachAxis(this.xAxisProperty),
              (this.xAxisProperty = e),
              this.attachAxis(this.xAxisProperty),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_XAXIS);
          }
          get yAxis() {
            return this.yAxisProperty;
          }
          set yAxis(e) {
            this.detachAxis(this.yAxisProperty),
              (this.yAxisProperty = e),
              this.attachAxis(this.yAxisProperty),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_YAXIS);
          }
          get zAxis() {
            return this.zAxisProperty;
          }
          set zAxis(e) {
            this.detachAxis(this.zAxisProperty),
              (this.zAxisProperty = e),
              this.attachAxis(this.zAxisProperty),
              this.notifyPropertyChanged(c.PROPERTY.SURFACE_ZAXIS);
          }
          set isHitTestEnabled(e) {
            e !== this.isHitTestEnabledProperty &&
              ((this.isHitTestEnabledProperty = e), this.invalidateElement());
          }
          get isHitTestEnabled() {
            return this.isHitTestEnabledProperty;
          }
          setIsAxisCubeRendered() {
            this.isAxisCubeRenderedProperty = !0;
          }
          get isAxisCubeRendered() {
            return this.isAxisCubeRenderedProperty;
          }
          invalidateElement(e) {
            var t, i, r;
            if (
              (D.Logger.debug(
                `Invalidating ${
                  null !==
                    (i =
                      null === (t = this.domChartRoot) || void 0 === t
                        ? void 0
                        : t.id) && void 0 !== i
                    ? i
                    : this.id
                }: force=${null == e ? void 0 : e.force} isSuspended=${
                  this.isSuspended
                } isInitialized=${this.isInitialized}.`
              ),
              !(null == e ? void 0 : e.force) &&
                (this.isSuspended || this.isDeleted || !this.isInitialized))
            )
              return;
            if (
              (E.PerformanceDebugHelper.mark(
                this.sciChart3DRenderer.isInvalidated
                  ? E.EPerformanceMarkType.Invalidate
                  : E.EPerformanceMarkType.LeadingInvalidate,
                { contextId: this.id }
              ),
              null ===
                (r = C.WebGlHelper.getContext(
                  this.webAssemblyContext3D.canvas
                )) || void 0 === r
                ? void 0
                : r.isContextLost())
            )
              return;
            this.sciChart3DRenderer.isInvalidated = !0;
            const s = this.domCanvas2D
              ? this.domCanvas2D.id
              : "undefinedCanvasId";
            this.webAssemblyContext3D.TSRRequestCanvasDraw(s);
          }
          onDpiChanged(e) {
            var t, i;
            this.renderableSeries.asArray().forEach((t) => t.onDpiChanged(e)),
              this.changeViewportSize(
                null === (t = this.getMainCanvas()) || void 0 === t
                  ? void 0
                  : t.clientWidth,
                null === (i = this.getMainCanvas()) || void 0 === i
                  ? void 0
                  : i.clientHeight
              ),
              super.onDpiChanged(e);
          }
          get surfaceType() {
            return r.ESurfaceType.SciChart3DSurfaceType;
          }
          get isInvalidated() {
            var e;
            return null === (e = this.sciChart3DRenderer) || void 0 === e
              ? void 0
              : e.isInvalidated;
          }
          onSciChartRendered() {
            this.chartModifiers.asArray().forEach((e) => {
              e.onParentSurfaceRendered();
            }),
              this.isCopyCanvasSurface ||
                this.rendered.raiseEvent(this.sciChart3DRenderer.isInvalidated);
          }
          doDrawingLoop() {
            this.sciChart3DRenderer.render();
          }
          applyTheme(e) {
            var t, i, r;
            super.applyTheme(e),
              this.renderableSeries.asArray().forEach((t) => t.applyTheme(e)),
              null === (t = this.xAxis) || void 0 === t || t.applyTheme(e),
              null === (i = this.yAxis) || void 0 === i || i.applyTheme(e),
              null === (r = this.zAxis) || void 0 === r || r.applyTheme(e),
              this.invalidateElement();
          }
          changeViewportSize(e, t) {
            if (!e || !t || this.isDeleted) return;
            const i = e * s.DpiHelper.PIXEL_RATIO,
              r = t * s.DpiHelper.PIXEL_RATIO;
            this.viewportManager.setSize(i, r),
              this.isCopyCanvasSurface
                ? (this.changeMasterCanvasViewportSize(
                    this.webAssemblyContext3D,
                    e,
                    t
                  ),
                  this.domCanvas2D &&
                    s.DpiHelper.setSize(this.domCanvas2D, e, t))
                : this.changeWebGLCanvasViewportSize(
                    this.webAssemblyContext3D,
                    e,
                    t
                  );
            const o = this.domSvgContainer;
            o && (0, w.fitSvgToViewRect)(o, new R.Rect(0, 0, e, t));
            const a = this.domBackgroundSvgContainer;
            a && (0, w.fitSvgToViewRect)(a, new R.Rect(0, 0, e, t));
            const n = this.domSeriesBackground;
            n && (0, w.fitElementToViewRect)(n, new R.Rect(0, 0, e, t)),
              this.domSvgAdornerLayer &&
                (this.domSvgAdornerLayer.setAttribute("width", e.toString()),
                this.domSvgAdornerLayer.setAttribute("height", t.toString())),
              this.invalidateElement();
          }
          getAnimations() {
            return this.animationList;
          }
          addAnimation(...e) {
            void 0 !== e &&
              (e.forEach((e) => this.animationList.push(e)),
              this.invalidateElement());
          }
          get isRunningAnimation() {
            return this.animationList.some((e) => !e.isComplete);
          }
          onAnimate(e) {
            if (e) {
              const t = [];
              for (let i = 0; i < this.animationList.length; i++) {
                const r = this.animationList[i];
                r.isComplete ||
                  (r.update(e),
                  r.isComplete || (this.invalidateElement(), t.push(r)));
              }
              this.animationList = t;
            }
          }
          getXAxisById(e) {
            return this.xAxis;
          }
          getYAxisById(e) {
            return this.yAxis;
          }
          updateWatermark(e, t) {
            var i, r;
            if (!o.IS_TEST_ENV) {
              (this.watermarkPropertyPosition.x = e),
                (this.watermarkPropertyPosition.y = t),
                (this.watermarkProperties.m_fCanvasWidth =
                  null === (i = this.getMainCanvas()) || void 0 === i
                    ? void 0
                    : i.clientWidth),
                this.watermarkProperties.SetPosition(
                  this.watermarkPropertyPosition
                );
              const s =
                null === (r = this.themeProvider) || void 0 === r
                  ? void 0
                  : r.isLightBackground;
              (this.watermarkProperties.m_bIsDarkBackground =
                void 0 !== s && !s),
                this.webAssemblyContext3D.SCRT3DSetWaterMarkProperties(
                  this.watermarkProperties
                );
            }
          }
          getSeriesViewRectPadding(e) {
            return T.Thickness.fromNumber(0);
          }
          applyOptions(e) {
            super.applyOptions(e),
              (this.camera = new d.CameraController(
                this.webAssemblyContext3D,
                null == e ? void 0 : e.cameraOptions
              )),
              (null == e ? void 0 : e.worldDimensions) &&
                (this.worldDimensions = e.worldDimensions);
          }
          attachChartModifier(e) {
            super.attachChartModifier(e),
              e.setParentSurface(this),
              (e.invalidateParentCallback = this.invalidateElement),
              e.onAttach(),
              this.invalidateElement();
          }
          applySciChartBackground(e, t = !0) {
            (this.backgroundProperty = e),
              this.domChartRoot && (this.domChartRoot.style.background = e),
              this.webAssemblyContext3D.SCRT3DSetClearColor(0, 0, 0, 0);
          }
          detachSeries(e) {
            this.rootEntity && this.rootEntity.children.remove(e.sceneEntity),
              e.onDetach(),
              this.invalidateElement();
          }
          attachSeries(e) {
            if ((e.onAttach(this), !e.sceneEntity))
              throw new Error(
                "IRenderableSeries3D.sceneEntity must be set before attaching to SciChart3DSurface"
              );
            this.rootEntity && this.rootEntity.children.add(e.sceneEntity),
              this.invalidateElement();
          }
          detachAxis(e) {
            e &&
              ((e.invalidateParentCallback = void 0),
              (e.parentSurface = void 0));
          }
          attachAxis(e) {
            if (e) {
              if (e.invalidateParentCallback)
                throw new Error(
                  "Invalid operation in sciChart3DSurface.attachAxis, this axis has already been attached to a SciChart3DSurface. Please detach it from a SciChart3DSurface before attaching to another"
                );
              e.onAttach(
                this,
                e === this.xAxis,
                e === this.yAxis,
                e === this.zAxis
              ),
                this.themeProviderProperty &&
                  e.applyTheme(this.themeProviderProperty),
                (e.invalidateParentCallback = this.invalidateElement);
            }
          }
          childPropertyChanged(e) {
            this.invalidateElement();
          }
        }
        t.SciChart3DSurface = L;
      },
      61981: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ViewportManager3DBase = void 0);
        const r = i(12785);
        t.ViewportManager3DBase = class {
          constructor(e, t) {
            (this.width = e), (this.height = t);
          }
          setSize(e, t) {
            (this.width = e), (this.height = t);
          }
          attachSciChartSurface(e) {
            if (this.isAttached)
              throw Error(
                "This ViewportManager instance is already attached to a SciChart3DSurface. Detach it before attaching to another"
              );
            (this.parentSurface = e), (this.isAttached = !0);
          }
          detachSciChartSurface() {
            (this.isAttached = !1), (this.parentSurface = void 0);
          }
          calculateAutoRange(e) {
            if (
              e.autoRange === r.EAutoRange.Always ||
              e.autoRange === r.EAutoRange.Once
            ) {
              const t = e.getMaximumRange();
              if (t && t.isDefined) return t;
            }
            return e.visibleRange;
          }
        };
      },
      38051: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.disposeMultiChart3d = t.createMultichart3d = void 0);
        const s = i(5877),
          o = i(58996),
          a = i(13639),
          n = i(84518),
          l = i(66570),
          d = i(85479),
          h = i(25606),
          u = i(14184),
          c = i(34238),
          p = i(55023),
          g = i(99263),
          y = (i(27307), i(43621)),
          f = i(52361),
          v = {
            wasmContext: void 0,
            getChildSurfaces: void 0,
            createChildSurface: void 0,
          };
        let m, S;
        (t.createMultichart3d = (e, t) =>
          r(void 0, void 0, void 0, function* () {
            var i, r, s, a, n, d, p;
            (0, o.ensureRegistrations)(), h.default.checkChartDivExists(e);
            const g = h.default.initCanvas(
                e,
                null !== (i = null == t ? void 0 : t.widthAspect) &&
                  void 0 !== i
                  ? i
                  : 0,
                null !== (r = null == t ? void 0 : t.heightAspect) &&
                  void 0 !== r
                  ? r
                  : 0,
                h.default.ECanvasType.canvas2D,
                void 0,
                null == t ? void 0 : t.touchAction
              ),
              f =
                null !== (s = null == t ? void 0 : t.loader) && void 0 !== s
                  ? s
                  : new l.DefaultSciChartLoader(),
              S =
                null === (a = f.addChartLoader) || void 0 === a
                  ? void 0
                  : a.call(
                      f,
                      g.domDivContainer,
                      null !== (n = null == t ? void 0 : t.theme) &&
                        void 0 !== n
                        ? n
                        : u.SciChartSurfaceBase.DEFAULT_THEME
                    );
            try {
              if (
                !v.wasmContext ||
                !v.createChildSurface ||
                !v.getChildSurfaces
              ) {
                m || ((0, y.forceReapplyLicense3D)(), (m = P()));
                const e = yield m;
                (0, c.checkBuildStamp)(e.wasmContext),
                  (v.wasmContext = e.wasmContext),
                  (v.createChildSurface = e.createChildSurface),
                  (v.getChildSurfaces = e.getChildSurfaces);
              }
              const { createChildSurface: e, wasmContext: i } = v,
                r = e(
                  g.domChartRoot.id,
                  g,
                  null !== (d = null == t ? void 0 : t.theme) && void 0 !== d
                    ? d
                    : u.SciChartSurfaceBase.DEFAULT_THEME
                );
              return new Promise((e) => {
                setTimeout(() => {
                  var t;
                  null === (t = f.removeChartLoader) ||
                    void 0 === t ||
                    t.call(f, g.domDivContainer, S),
                    r.setIsInitialized(),
                    e({ wasmContext: i, sciChart3DSurface: r });
                }, 0);
              });
            } catch (e) {
              return (
                console.error(e),
                null === (p = f.removeChartLoader) ||
                  void 0 === p ||
                  p.call(f, g.domDivContainer, S),
                Promise.reject(e)
              );
            }
          })),
          (t.disposeMultiChart3d = () => {
            S && S(),
              (v.createChildSurface = void 0),
              (v.getChildSurfaces = void 0),
              (v.wasmContext = void 0),
              (m = void 0),
              n.licenseManager.clear();
          });
        const P = () => {
            const e = (e, t, i, r, s, o) => {
              const a = (0, u.createChartDestination)(i.domCanvas2D);
              if (!a) return void i.delete();
              const n = e.SCRTSurfaceDestination.implement(a);
              o.AddDestination(n),
                g.sciChart3DDestinations.push({
                  canvasElementId: t,
                  sciChartSurface: i,
                  width: r,
                  height: s,
                });
            };
            return new Promise((t, i) => {
              const r = (0, u.getLocateFile)(f.sciChartConfig3D);
              new s({ locateFile: r, noInitialRun: !0 })
                .then((i) => {
                  let r = (0, p.createWasmContextRevocableProxy)(i);
                  const s = r.proxy;
                  S = () => {
                    s.TSRRequestExit(),
                      v.delete(),
                      s
                        .SCRTGetGlobalSampleChartInterface()
                        .SetFrameRenderer(null),
                      s.SCRTGetGlobalSampleChartInterface().delete(),
                      s.SCRTSetGlobalSampleChartInterface(null),
                      m.delete(),
                      s.SCRTSetGlobalCopyToDestinationInterface(null),
                      r.revoke(),
                      (r = void 0),
                      (S = void 0);
                  };
                  const o = () =>
                      g.sciChart3DDestinations.map((e) => e.sciChartSurface),
                    n = (t, i, r) => {
                      const o = h.default.getCanvas2dId(t),
                        a = g.sciChart3DDestinations.filter(
                          (e) => e.canvasElementId !== o
                        );
                      for (
                        c.ClearDestinations(),
                          g.sciChart3DDestinations
                            .filter((e) => e.canvasElementId === o)
                            .forEach((e) => e.sciChartSurface.delete());
                        g.sciChart3DDestinations.length > 0;

                      )
                        g.sciChart3DDestinations.pop();
                      a.forEach((t) =>
                        e(
                          s,
                          t.canvasElementId,
                          t.sciChartSurface,
                          t.width,
                          t.height,
                          c
                        )
                      );
                      const n = ((e, t, i, r) => {
                        const s = new f.SciChart3DSurface(e, { canvases: i });
                        s.applyTheme(r),
                          s.setDestinations(g.sciChart3DDestinations);
                        const o = h.default.subscribeToResize(
                          i.domChartRoot,
                          i.aspect,
                          s
                        );
                        return s.addDeletable(o), s;
                      })(s, 0, i, r);
                      return (
                        n.addDeletable({
                          delete: () => {
                            f.SciChart3DSurface.autoDisposeWasmContext &&
                              0 === n.otherSurfaces.length &&
                              (f.SciChart3DSurface.wasmContextDisposeTimeout
                                ? setTimeout(() => {
                                    0 === g.sciChart3DDestinations.length &&
                                      f.SciChart3DSurface.disposeSharedWasmContext();
                                  }, f.SciChart3DSurface.wasmContextDisposeTimeout)
                                : f.SciChart3DSurface.disposeSharedWasmContext());
                          },
                        }),
                        e(
                          s,
                          o,
                          n,
                          i.domCanvas2D.width,
                          i.domCanvas2D.height,
                          c
                        ),
                        (0, y.applyLicense3D)(s, n, !1),
                        n
                      );
                    };
                  s.canvas = (0, u.getMasterCanvas)();
                  const l = {
                      InitializeChart() {
                        t({
                          getChildSurfaces: o,
                          createChildSurface: n,
                          wasmContext: s,
                        });
                      },
                      Draw(e) {
                        const t = g.sciChart3DDestinations.find(
                          (t) => t.canvasElementId === e
                        );
                        t && t.sciChartSurface.doDrawingLoop();
                      },
                      Update(e) {},
                      ShutDownChart() {},
                    },
                    c = s.SCRTSampleChartInterface.implement(l),
                    v = new s.SCRTFrameRenderer3D();
                  c.SetFrameRenderer(v),
                    c.SetFPSCounterEnabled(!1),
                    c.SetWasmBufferSizesKb(
                      d.SciChartDefaults.wasmBufferSizesKb
                    ),
                    s.SCRTSetGlobalSampleChartInterface(c);
                  const m = s.SCRTCopyToDestinationInterface.implement({
                    CopyToDestination: (0, a.copyToCanvas)(
                      u.SciChartSurfaceBase.domMasterCanvas,
                      C
                    ),
                  });
                  s.SCRTSetGlobalCopyToDestinationInterface(m),
                    s.TSRSetDrawRequestsEnabled(!0),
                    u.SciChartSurfaceBase.domMasterCanvas &&
                      s.SCRTSetMainWindowSize(
                        u.SciChartSurfaceBase.domMasterCanvas.width,
                        u.SciChartSurfaceBase.domMasterCanvas.height
                      ),
                    s.callMain();
                })
                .catch(() => {
                  i(
                    "Could not load SciChart WebAssembly module.\n            Check your build process and ensure that your scichart3d.wasm, scichart3d.data and scichart3d.js files are from the same version"
                  );
                });
            });
          },
          C = (e) =>
            g.sciChart3DDestinations.find((t) => t.canvasElementId === e);
      },
      86753: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createSingle3dInternal = void 0);
        const r = i(5877),
          s = i(58996),
          o = i(84518),
          a = i(66570),
          n = i(85479),
          l = i(25606),
          d = i(14184),
          h = i(34238),
          u = i(55023),
          c = i(62049),
          p = i(43621),
          g = i(52361);
        t.createSingle3dInternal = (e, t) => (
          (0, s.ensureRegistrations)(),
          new Promise((i, s) => {
            var o, n, p, f, v;
            const m = l.default.initCanvas(
                e,
                null !== (o = null == t ? void 0 : t.widthAspect) &&
                  void 0 !== o
                  ? o
                  : 0,
                null !== (n = null == t ? void 0 : t.heightAspect) &&
                  void 0 !== n
                  ? n
                  : 0,
                void 0,
                void 0,
                null == t ? void 0 : t.touchAction
              ),
              S =
                null !== (p = null == t ? void 0 : t.loader) && void 0 !== p
                  ? p
                  : new a.DefaultSciChartLoader(),
              P =
                null === (f = S.addChartLoader) || void 0 === f
                  ? void 0
                  : f.call(
                      S,
                      m.domDivContainer,
                      null !== (v = null == t ? void 0 : t.theme) &&
                        void 0 !== v
                        ? v
                        : d.SciChartSurfaceBase.DEFAULT_THEME
                    ),
              C = c.WebGlHelper.getWebGlSupport();
            if (C !== c.EWebGLSupport.WebGL2 && C !== c.EWebGLSupport.WebGL1)
              throw Error("Sorry Your browser does not support WebGL.");
            {
              const e = (0, d.getLocateFile)(g.sciChartConfig3D);
              new r({ locateFile: e, noInitialRun: !0 })
                .then((e) => {
                  var r, s;
                  null === (r = S.removeChartLoader) ||
                    void 0 === r ||
                    r.call(S, m.domDivContainer, P),
                    (e.doNotCaptureKeyboard = !0);
                  let o = (0, u.createWasmContextRevocableProxy)(e);
                  y(
                    o.proxy,
                    m,
                    (e) => {
                      e.sciChart3DSurface.addDeletable({
                        delete: () => {
                          o.revoke(), (o = void 0);
                        },
                      }),
                        i(e);
                    },
                    null !== (s = null == t ? void 0 : t.theme) && void 0 !== s
                      ? s
                      : d.SciChartSurfaceBase.DEFAULT_THEME
                  ),
                    (0, h.checkBuildStamp)(e);
                })
                .catch((e) => {
                  var t;
                  throw (
                    (null === (t = S.removeChartLoader) ||
                      void 0 === t ||
                      t.call(S, m.domDivContainer, P),
                    e)
                  );
                });
            }
          })
        );
        const y = (e, t, i, r) => {
          let s;
          e.preRun.push(
            () => (ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#chart_WebGL")
          ),
            (e.canvas = t.domCanvasWebGL);
          const a = {
              InitializeChart() {
                (s = new g.SciChart3DSurface(e, { canvases: t })),
                  s.applyTheme(r),
                  s.addDeletable({
                    delete: () => {
                      e.TSRRequestExit(),
                        h.delete(),
                        e
                          .SCRTGetGlobalSampleChartInterface()
                          .SetFrameRenderer(null),
                        e.SCRTGetGlobalSampleChartInterface().delete(),
                        e.SCRTSetGlobalSampleChartInterface(null),
                        o.licenseManager.clear();
                    },
                  }),
                  setTimeout(() => {
                    s.invalidateElement(), (0, p.applyLicense3D)(e, s, !0);
                    const r = l.default.subscribeToResize(
                      t.domChartRoot,
                      t.aspect,
                      s
                    );
                    s.addDeletable(r),
                      s.setIsInitialized(),
                      i({ wasmContext: e, sciChart3DSurface: s });
                  }, 0);
              },
              Draw(e) {
                s.isInitialized && s.doDrawingLoop();
              },
              Update(e) {},
              ShutDownChart() {},
            },
            d = e.SCRTSampleChartInterface.implement(a),
            h = new e.SCRTFrameRenderer3D();
          d.SetFrameRenderer(h),
            d.SetFPSCounterEnabled(!1),
            d.SetWasmBufferSizesKb(n.SciChartDefaults.wasmBufferSizesKb),
            e.SCRTSetGlobalSampleChartInterface(d),
            e.callMain();
        };
      },
      43621: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.applyLicense3D = t.forceReapplyLicense3D = void 0);
        const r = i(84518);
        t.forceReapplyLicense3D = () => {
          s = !0;
        };
        let s = !0;
        t.applyLicense3D = (e, t, i) => {
          i || s
            ? ((0, r.setCallbacks3D)(
                ((e, t) => ({
                  getLicenseChallenge3D: () => ({
                    challenge: e.SCRTCredentials.GetLicenseChallenge(),
                    orderId: e.SCRTCredentials.GetOrderId(),
                  }),
                  setChallengeResponse3D: (t) =>
                    e.SCRTCredentials.ApplyLicenseResponse(t),
                  setNewLicense3D: (i) => {
                    let s,
                      o = !1;
                    return (
                      e.SCRTCredentials.SetRuntimeLicenseKeyW(i),
                      (o = e.SCRTCredentials.RequiresValidation()),
                      (s =
                        e.SCRTCredentials.GetLicenseType() ===
                        e.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED),
                      (0, r.updateLicenseDisplay)(
                        (0, r.getLicenseInfo)(e),
                        t,
                        !1,
                        !0
                      ),
                      { requiresValidation: o, trialExpired: s }
                    );
                  },
                  updateLicenseDisplay3D: () =>
                    (0, r.updateLicenseDisplay)(
                      (0, r.getLicenseInfo)(e),
                      t,
                      !1,
                      !0
                    ),
                }))(e, t)
              ),
              (0, r.applyLicense)(e, t))
            : (0, r.updateLicenseDisplay)((0, r.getLicenseInfo)(e), t, !1, !1),
            i || (s = !1);
        };
      },
      49975: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnnotationHoverModifier = void 0);
        const r = i(84736),
          s = i(89955),
          o = i(78615);
        class a extends o.PointerEventsMediatorModifier {
          constructor(e) {
            super(e),
              (this.type = s.EChart2DModifierType.AnnotationHover),
              (this.enableHoverProperty = !0);
          }
          getAllTargets() {
            const e = this.parentSurface.annotations
                .asArray()
                .filter((e) => !e.isHidden),
              t = e.filter((e) => e.isSvgAnnotation),
              i = e.filter((e) => !e.isSvgAnnotation),
              s = t.filter(
                (e) => e.annotationLayer === r.EAnnotationLayer.Background
              ),
              o = t.filter(
                (e) => e.annotationLayer === r.EAnnotationLayer.AboveChart
              );
            return [
              ...s,
              ...i.filter(
                (e) => e.annotationLayer === r.EAnnotationLayer.Background
              ),
              ...i.filter(
                (e) => e.annotationLayer === r.EAnnotationLayer.BelowChart
              ),
              ...i.filter(
                (e) => e.annotationLayer === r.EAnnotationLayer.AboveChart
              ),
              ...o,
            ];
          }
        }
        t.AnnotationHoverModifier = a;
      },
      13063: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ChartModifierBase = t.EModifierType = void 0);
        const r = i(55023),
          s = i(59481),
          o = i(73538),
          a = i(14184),
          n = i(22486);
        var l;
        !(function (e) {
          (e.Chart2DModifier = "2D Chart Modifier"),
            (e.Chart3DModifier = "3D Chart Modifier"),
            (e.MultiChart2DModifier = "Multiple 2D Chart Modifier");
        })((l = t.EModifierType || (t.EModifierType = {})));
        class d extends r.DeletableEntity {
          constructor(e) {
            var t, i;
            super(),
              (this.isEnabledProperty = !0),
              (this.executeOnProperty = s.EExecuteOn.MouseLeftButton),
              (this.activePointerEvents = new Map()),
              (this.id =
                null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                  ? t
                  : (0, o.generateGuid)()),
              (this.executeOnProperty =
                null !== (i = null == e ? void 0 : e.executeOn) && void 0 !== i
                  ? i
                  : this.executeOn);
          }
          applyTheme(e) {}
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          get isEnabled() {
            return this.isEnabledProperty;
          }
          set isEnabled(e) {
            (this.isEnabledProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.IS_ENABLED);
          }
          get isAttached() {
            return this.isAttachedProperty;
          }
          get receiveHandledEvents() {
            return this.receiveHandledEventsProperty;
          }
          set receiveHandledEvents(e) {
            (this.receiveHandledEventsProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.RECEIVE_HANDLED_EVENTS);
          }
          get executeOn() {
            return this.executeOnProperty;
          }
          set executeOn(e) {
            (this.executeOnProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.EXECUTE_ON);
          }
          get canReceiveMouseEvents() {
            return (
              this.isEnabled &&
              this.isAttached &&
              void 0 !== this.parentSurfaceProperty
            );
          }
          onAttach() {}
          onDetach() {}
          onAttachSeries(e) {}
          onDetachSeries(e) {}
          onAttachSubSurface(e) {}
          onDetachSubSurface(e) {}
          onParentSurfaceRendered() {}
          modifierMouseDown(e) {
            this.executeOn === s.EExecuteOn.MouseMiddleButton &&
              e.nativeEvent.preventDefault(),
              ("touch" === e.pointerType || "pen" === e.pointerType) &&
                this.activePointerEvents.set(e.pointerId, e);
          }
          modifierMouseMove(e) {
            this.updatePointerInfo(e);
          }
          modifierMouseUp(e) {
            ("touch" === e.pointerType || "pen" === e.pointerType) &&
              this.activePointerEvents.delete(e.pointerId);
          }
          modifierMouseWheel(e) {}
          modifierDoubleClick(e) {}
          modifierMouseEnter(e) {}
          modifierMouseLeave(e) {
            this.activePointerEvents.delete(e.pointerId);
          }
          modifierDrop(e) {}
          modifierPointerCancel(e) {
            this.activePointerEvents.delete(e.pointerId);
          }
          setParentSurface(e) {
            if (e) {
              if (
                e.surfaceType === a.ESurfaceType.SciChartSurfaceType &&
                this.modifierType === l.Chart3DModifier
              )
                throw new Error(
                  "A 3D Chart Modifier cannot be added to a 2D SciChartSurface. Please check surfaceType and ModifierType properties for modifierType"
                );
              if (
                e.surfaceType === a.ESurfaceType.SciChart3DSurfaceType &&
                this.modifierType === l.Chart2DModifier
              )
                throw new Error(
                  "A 2D Chart Modifier cannot be added to a 3D SciChartSurface. Please check surfaceType and ModifierType properties for modifierType"
                );
              this.parentSurfaceProperty = e;
            } else this.parentSurfaceProperty = void 0;
            (this.isAttachedProperty = void 0 !== this.parentSurfaceProperty),
              this.notifyPropertyChanged(n.PROPERTY.PARENT_SURFACE);
          }
          delete() {}
          notifyPropertyChanged(e) {
            this.invalidateParentCallback && this.invalidateParentCallback();
          }
          updatePointerInfo(e) {
            var t;
            (0 !== this.activePointerEvents.size &&
              this.activePointerEvents.keys().next().value !== e.pointerId) ||
              (this.mousePoint = e.mousePoint),
              (this.previousPoint =
                null === (t = this.activePointerEvents.get(e.pointerId)) ||
                void 0 === t
                  ? void 0
                  : t.mousePoint),
              this.activePointerEvents.has(e.pointerId) &&
                this.activePointerEvents.set(e.pointerId, e);
          }
          getIsActionAllowed(e) {
            return !0;
          }
        }
        t.ChartModifierBase = d;
      },
      89046: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.scaleAxes =
            t.getActiveAxes =
            t.testIsOverAxes =
            t.ChartModifierBase2D =
              void 0);
        const r = i(86699),
          s = i(21670),
          o = i(42241),
          a = i(13063),
          n = i(22486);
        class l extends a.ChartModifierBase {
          constructor(e) {
            var t, i, s, a;
            super(e),
              (this.xyDirection = r.EXyDirection.XyDirection),
              (this.changedPropertiesList = []),
              (this.xAxisIdProperty = o.AxisCore.DEFAULT_AXIS_ID),
              (this.yAxisIdProperty = o.AxisCore.DEFAULT_AXIS_ID),
              (this.typeMap = new Map()),
              (this.xyDirection =
                null !== (t = null == e ? void 0 : e.xyDirection) &&
                void 0 !== t
                  ? t
                  : this.xyDirection),
              (this.modifierGroup =
                null !== (i = null == e ? void 0 : e.modifierGroup) &&
                void 0 !== i
                  ? i
                  : this.modifierGroup),
              (this.xAxisIdProperty =
                null !== (s = null == e ? void 0 : e.xAxisId) && void 0 !== s
                  ? s
                  : this.xAxisIdProperty),
              (this.yAxisIdProperty =
                null !== (a = null == e ? void 0 : e.yAxisId) && void 0 !== a
                  ? a
                  : this.yAxisIdProperty);
          }
          get modifierType() {
            return a.EModifierType.Chart2DModifier;
          }
          get xAxisId() {
            return this.xAxisIdProperty;
          }
          set xAxisId(e) {
            (this.xAxisIdProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.X_AXIS_ID);
          }
          get yAxisId() {
            return this.yAxisIdProperty;
          }
          set yAxisId(e) {
            (this.yAxisIdProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.Y_AXIS_ID);
          }
          getAllSeries() {
            return this.parentSurface.renderableSeries.asArray();
          }
          toJSON() {
            const e = {
              id: this.id,
              modifierGroup: this.modifierGroup,
              executeOn: this.executeOn,
              xyDirection: this.xyDirection,
              xAxisId: this.xAxisId,
              yAxisId: this.yAxisId,
            };
            return { type: this.type, options: e };
          }
          testPropertyChanged(e) {
            return this.changedPropertiesList.includes(e);
          }
          notifyPropertyChanged(e) {
            this.changedPropertiesList.includes(e) ||
              this.changedPropertiesList.push(e),
              super.notifyPropertyChanged(e);
          }
          growBy(e, t, i) {
            const {
                isHorizontalAxis: r,
                isAxisFlipped: s,
                viewRect: o,
                flippedCoordinates: a,
              } = t,
              { seriesViewRect: n } = this.parentSurface;
            let l = r ? o.width : o.height;
            t.isStackedAxis &&
              this.parentSurface &&
              (l = r ? n.width : n.height);
            const d = r ? e.x : e.y,
              h = (d / l) * i,
              u = (1 - d / l) * i;
            (s && !a) || (!s && a) ? t.zoomBy(u, h) : t.zoomBy(h, u);
          }
        }
        (t.ChartModifierBase2D = l),
          (t.testIsOverAxes = (e, t) => {
            let i = !1;
            return (
              e.forEach((e) => {
                if (e.viewRect) {
                  const { left: r, right: o, top: a, bottom: n } = e.viewRect;
                  (0, s.testIsInBounds)(t.x, t.y, r, n, o, a) && (i = !0);
                }
              }),
              i
            );
          }),
          (t.getActiveAxes = (e, t) => {
            const i = [];
            return (
              e.forEach((e) => {
                if (e.viewRect) {
                  const { left: r, right: o, top: a, bottom: n } = e.viewRect;
                  (0, s.testIsInBounds)(t.x, t.y, r, n, o, a) && i.push(e);
                }
              }),
              i
            );
          }),
          (t.scaleAxes = (e, t, i, r) => {
            e.forEach((e, s) => {
              const o = t[s];
              e.scale(o, i, r);
            });
          });
      },
      62773: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.adjustTooltipPosition =
            t.calcTooltipSize =
            t.CursorModifier =
              void 0);
        const r = i(45921),
          s = i(56744),
          o = i(11043),
          a = i(89955),
          n = i(57935),
          l = i(48008),
          d = i(32873),
          h = i(51885),
          u = i(31306),
          c = i(64584),
          p = i(28677),
          g = i(14184),
          y = i(89046),
          f = i(22486);
        class v extends y.ChartModifierBase2D {
          constructor(e) {
            var t,
              i,
              s,
              l,
              d,
              h,
              u,
              c,
              p,
              y,
              f,
              v,
              m,
              P,
              C,
              x,
              b,
              A,
              T,
              E,
              R,
              w,
              D;
            super(e),
              (this.type = a.EChart2DModifierType.Cursor),
              (this.tooltipSvgTemplate = S),
              (this.crosshairStrokeThickness = 2),
              (this.crosshairStrokeDashArray = []),
              (this.tooltipContainerBackground = "#228B22"),
              (this.tooltipTextStroke = "#fff"),
              (this.showTooltip = !1),
              (this.axisLabelStroke = "#fff"),
              (this.axisLabelFill = "#228B22"),
              (this.xAxisLabelStroke = void 0),
              (this.xAxisLabelFill = void 0),
              (this.yAxisLabelStroke = void 0),
              (this.yAxisLabelFill = void 0),
              (this.tooltipLegendOffsetX = 0),
              (this.tooltipLegendOffsetY = 0),
              (this.hitTestRadius = 0),
              (this.mousePosition = n.EMousePosition.OutOfCanvas),
              (this.crosshairStrokeProperty =
                g.SciChartSurfaceBase.DEFAULT_THEME.cursorLineBrush),
              (this.tooltipShadowProperty =
                g.SciChartSurfaceBase.DEFAULT_THEME.shadowEffectColor),
              (this.includedSeriesMap = new Map()),
              (this.showXLineProperty = !0),
              (this.showYLineProperty = !0),
              (this.showAxisLabelsProperty = !0),
              (null == e ? void 0 : e.tooltipSvgTemplate) &&
                "string" == typeof e.tooltipSvgTemplate &&
                (this.typeMap.set("tooltipSvgTemplate", e.tooltipSvgTemplate),
                (e.tooltipSvgTemplate = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.tooltipSvgTemplate
                ))),
              (this.tooltipSvgTemplate =
                null !== (t = null == e ? void 0 : e.tooltipSvgTemplate) &&
                void 0 !== t
                  ? t
                  : this.tooltipSvgTemplate),
              (this.crosshairStrokeThickness =
                null !==
                  (i = null == e ? void 0 : e.crosshairStrokeThickness) &&
                void 0 !== i
                  ? i
                  : this.crosshairStrokeThickness),
              (this.crosshairStrokeDashArray =
                null !==
                  (s = null == e ? void 0 : e.crosshairStrokeDashArray) &&
                void 0 !== s
                  ? s
                  : this.crosshairStrokeDashArray),
              (this.crosshairStroke =
                null !== (l = null == e ? void 0 : e.crosshairStroke) &&
                void 0 !== l
                  ? l
                  : this.crosshairStroke),
              (this.tooltipContainerBackground =
                null !==
                  (d = null == e ? void 0 : e.tooltipContainerBackground) &&
                void 0 !== d
                  ? d
                  : this.tooltipContainerBackground),
              (this.tooltipTextStroke =
                null !== (h = null == e ? void 0 : e.tooltipTextStroke) &&
                void 0 !== h
                  ? h
                  : this.tooltipTextStroke),
              (this.tooltipShadow =
                null !== (u = null == e ? void 0 : e.tooltipShadow) &&
                void 0 !== u
                  ? u
                  : this.tooltipShadowProperty),
              (this.showTooltip =
                null !== (c = null == e ? void 0 : e.showTooltip) &&
                void 0 !== c
                  ? c
                  : this.showTooltip),
              (this.showAxisLabels =
                null !== (p = null == e ? void 0 : e.showAxisLabels) &&
                void 0 !== p
                  ? p
                  : this.showAxisLabels),
              (this.axisLabelFill =
                null !== (y = null == e ? void 0 : e.axisLabelFill) &&
                void 0 !== y
                  ? y
                  : this.axisLabelFill),
              (this.axisLabelStroke =
                null !== (f = null == e ? void 0 : e.axisLabelStroke) &&
                void 0 !== f
                  ? f
                  : this.axisLabelStroke),
              (this.xAxisLabelStroke =
                null !== (v = null == e ? void 0 : e.xAxisLabelStroke) &&
                void 0 !== v
                  ? v
                  : this.xAxisLabelStroke),
              (this.xAxisLabelFill =
                null !== (m = null == e ? void 0 : e.xAxisLabelFill) &&
                void 0 !== m
                  ? m
                  : this.xAxisLabelFill),
              (this.yAxisLabelStroke =
                null !== (P = null == e ? void 0 : e.yAxisLabelStroke) &&
                void 0 !== P
                  ? P
                  : this.yAxisLabelStroke),
              (this.yAxisLabelFill =
                null !== (C = null == e ? void 0 : e.yAxisLabelFill) &&
                void 0 !== C
                  ? C
                  : this.yAxisLabelFill),
              (this.placementDivIdProperty =
                null !== (x = null == e ? void 0 : e.placementDivId) &&
                void 0 !== x
                  ? x
                  : this.placementDivIdProperty),
              (null == e ? void 0 : e.tooltipLegendTemplate) &&
                "string" == typeof e.tooltipLegendTemplate &&
                (this.typeMap.set(
                  "tooltipLegendTemplate",
                  e.tooltipLegendTemplate
                ),
                (e.tooltipLegendTemplate = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.tooltipLegendTemplate
                ))),
              (this.tooltipLegendTemplate =
                null !== (b = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== b
                  ? b
                  : this.tooltipLegendTemplate),
              (this.tooltipLegendOffsetX =
                null !== (A = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== A
                  ? A
                  : this.tooltipLegendOffsetX),
              (this.tooltipLegendOffsetY =
                null !== (T = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== T
                  ? T
                  : this.tooltipLegendOffsetY),
              (null == e ? void 0 : e.tooltipDataTemplate) &&
                "string" == typeof e.tooltipDataTemplate &&
                (this.typeMap.set("tooltipDataTemplate", e.tooltipDataTemplate),
                (e.tooltipDataTemplate = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.tooltipDataTemplate
                ))),
              (this.tooltipDataTemplateProperty =
                null !== (E = null == e ? void 0 : e.tooltipDataTemplate) &&
                void 0 !== E
                  ? E
                  : this.tooltipDataTemplateProperty),
              (this.showXLine =
                null !== (R = null == e ? void 0 : e.showXLine) && void 0 !== R
                  ? R
                  : this.showXLine),
              (this.showYLine =
                null !== (w = null == e ? void 0 : e.showYLine) && void 0 !== w
                  ? w
                  : this.showYLine),
              (this.hitTestRadius =
                null !== (D = null == e ? void 0 : e.hitTestRadius) &&
                void 0 !== D
                  ? D
                  : this.hitTestRadius);
          }
          applyTheme(e) {
            this.testPropertyChanged(f.PROPERTY.CROSSHAIR_STROKE) ||
              (this.crosshairStroke = e.cursorLineBrush),
              this.testPropertyChanged(f.PROPERTY.TOOLTIP_SHADOW) ||
                (this.tooltipShadow = e.shadowEffectColor);
          }
          onAttach() {
            var e;
            super.onAttach();
            const t = this.xAxisLabelFill
                ? this.xAxisLabelFill
                : this.axisLabelFill,
              i = this.yAxisLabelFill
                ? this.yAxisLabelFill
                : this.axisLabelFill,
              r = this.xAxisLabelStroke
                ? this.xAxisLabelStroke
                : this.axisLabelStroke,
              s = this.yAxisLabelStroke
                ? this.yAxisLabelStroke
                : this.axisLabelStroke;
            this.showXLine &&
              ((this.xLineAnnotation = this.newLineAnnotation(t, r)),
              this.parentSurface.modifierAnnotations.add(this.xLineAnnotation)),
              this.showYLine &&
                ((this.yLineAnnotation = this.newLineAnnotation(i, s)),
                this.parentSurface.modifierAnnotations.add(
                  this.yLineAnnotation
                )),
              (this.tooltipAnnotation = new c.CursorTooltipSvgAnnotation({
                cursorModifier: this,
                xCoordinateMode: u.ECoordinateMode.Pixel,
                yCoordinateMode: u.ECoordinateMode.Pixel,
                tooltipSvgTemplate:
                  null !== (e = this.tooltipSvgTemplate) && void 0 !== e
                    ? e
                    : S,
                containerBackground: this.tooltipContainerBackground,
                textStroke: this.tooltipTextStroke,
                tooltipLegendTemplate: this.tooltipLegendTemplate,
                tooltipLegendOffsetX: this.tooltipLegendOffsetX,
                tooltipLegendOffsetY: this.tooltipLegendOffsetY,
                xAxisId: this.xAxisId,
                yAxisId: this.yAxisId,
                placementDivId: this.placementDivId,
              })),
              this.parentSurface.modifierAnnotations.add(
                this.tooltipAnnotation
              );
          }
          onDetach() {
            super.onDetach(),
              this.xLineAnnotation &&
                this.parentSurface.modifierAnnotations.remove(
                  this.xLineAnnotation,
                  !0
                ),
              this.yLineAnnotation &&
                this.parentSurface.modifierAnnotations.remove(
                  this.yLineAnnotation,
                  !0
                ),
              this.parentSurface.modifierAnnotations.remove(
                this.tooltipAnnotation,
                !0
              );
          }
          onAttachSeries(e) {
            this.tooltipAnnotation.seriesInfos = this.getSeriesInfos();
          }
          onDetachSeries(e) {
            this.tooltipAnnotation.seriesInfos = this.getSeriesInfos();
          }
          modifierMouseMove(e) {
            if (this.parentSurface.isSubSurface && !e.isActiveSubChartEvent)
              return;
            let t;
            this.activePointerEvents.set(e.pointerId, e),
              super.modifierMouseMove(e),
              this.mousePoint
                ? ((t = (0, d.translateFromCanvasToSeriesViewRect)(
                    this.mousePoint,
                    this.parentSurface.seriesViewRect
                  )),
                  (this.mousePosition = t
                    ? n.EMousePosition.SeriesArea
                    : n.EMousePosition.AxisArea))
                : (this.mousePosition = n.EMousePosition.OutOfCanvas),
              this.getIsActionAllowed(e) && this.update();
          }
          modifierMouseLeave(e) {
            super.modifierMouseLeave(e),
              (this.mousePosition = n.EMousePosition.OutOfCanvas),
              this.update();
          }
          onParentSurfaceRendered() {
            this.update();
          }
          get crosshairStroke() {
            return this.crosshairStrokeProperty;
          }
          set crosshairStroke(e) {
            this.crosshairStrokeProperty !== e &&
              ((this.crosshairStrokeProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.CROSSHAIR_STROKE));
          }
          get tooltipShadow() {
            return this.tooltipShadowProperty;
          }
          set tooltipShadow(e) {
            this.tooltipShadowProperty !== e &&
              ((this.tooltipShadowProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.TOOLTIP_SHADOW));
          }
          get showXLine() {
            return this.showXLineProperty;
          }
          set showXLine(e) {
            if (this.showXLineProperty !== e) {
              if (
                ((this.showXLineProperty = e),
                this.showXLineProperty && !this.xLineAnnotation)
              ) {
                const e = this.xAxisLabelFill
                    ? this.xAxisLabelFill
                    : this.axisLabelFill,
                  t = this.xAxisLabelStroke
                    ? this.xAxisLabelStroke
                    : this.axisLabelStroke;
                (this.xLineAnnotation = this.newLineAnnotation(e, t)),
                  this.parentSurface.modifierAnnotations.add(
                    this.xLineAnnotation
                  );
              } else
                !this.showXLineProperty &&
                  this.xLineAnnotation &&
                  (this.parentSurface.modifierAnnotations.remove(
                    this.xLineAnnotation
                  ),
                  (this.xLineAnnotation = (0, s.deleteSafe)(
                    this.xLineAnnotation
                  )));
              this.notifyPropertyChanged(f.PROPERTY.X_LINE);
            }
          }
          get showYLine() {
            return this.showYLineProperty;
          }
          set showYLine(e) {
            if (this.showYLineProperty !== e) {
              if (
                ((this.showYLineProperty = e),
                this.showYLineProperty && !this.yLineAnnotation)
              ) {
                const e = this.yAxisLabelFill
                    ? this.yAxisLabelFill
                    : this.axisLabelFill,
                  t = this.yAxisLabelStroke
                    ? this.yAxisLabelStroke
                    : this.axisLabelStroke;
                (this.yLineAnnotation = this.newLineAnnotation(e, t)),
                  this.parentSurface.modifierAnnotations.add(
                    this.yLineAnnotation
                  );
              } else
                !this.showYLineProperty &&
                  this.yLineAnnotation &&
                  (this.parentSurface.modifierAnnotations.remove(
                    this.yLineAnnotation
                  ),
                  (this.yLineAnnotation = (0, s.deleteSafe)(
                    this.yLineAnnotation
                  )));
              this.notifyPropertyChanged(f.PROPERTY.Y_LINE);
            }
          }
          get showAxisLabels() {
            return this.showAxisLabelsProperty;
          }
          set showAxisLabels(e) {
            this.showAxisLabelsProperty !== e &&
              ((this.showAxisLabelsProperty = e),
              this.xLineAnnotation &&
                (this.xLineAnnotation.showLabel = this.showAxisLabelsProperty),
              this.yLineAnnotation &&
                (this.yLineAnnotation.showLabel = this.showAxisLabelsProperty),
              this.notifyPropertyChanged(f.PROPERTY.AXIS_LABELS));
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            this.placementDivIdProperty !== e &&
              ((this.placementDivIdProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.PLACEMENT_DIV_ID));
          }
          includeSeries(e, t) {
            this.includedSeriesMap.set(e, t),
              this.isAttached &&
                (this.tooltipAnnotation.seriesInfos = this.getSeriesInfos());
          }
          getIncludedRenderableSeries() {
            const e = this.parentSurface.renderableSeries
                .asArray()
                .filter(
                  (e) =>
                    !e.isStacked && e.isVisible && this.testIsIncludedSeries(e)
                ),
              t = this.parentSurface.renderableSeries
                .asArray()
                .filter((e) => e.isStacked),
              i = e;
            return (
              t.forEach((e) => {
                e.getVisibleSeries().forEach((e) => {
                  this.testIsIncludedSeries(e) && i.push(e);
                });
              }),
              i
            );
          }
          get tooltipDataTemplate() {
            return this.tooltipDataTemplateProperty;
          }
          set tooltipDataTemplate(e) {
            (this.tooltipDataTemplateProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.TOOLTIP_DATA_TEMPLATE);
          }
          hitTestRenderableSeries(e, t) {
            if (t)
              return this.hitTestRadius <= 0
                ? e.hitTestProvider.hitTestXSlice(t.x, t.y)
                : e.hitTestProvider.hitTestDataPoint(
                    t.x,
                    t.y,
                    this.hitTestRadius
                  );
          }
          getMousePosition() {
            return this.mousePosition;
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                axisLabelFill: this.axisLabelFill,
                axisLabelStroke: this.axisLabelStroke,
                xAxisLabelFill: this.xAxisLabelFill,
                xAxisLabelStroke: this.xAxisLabelStroke,
                yAxisLabelFill: this.yAxisLabelFill,
                yAxisLabelStroke: this.yAxisLabelStroke,
                crosshairStroke: this.crosshairStroke,
                crosshairStrokeDashArray: this.crosshairStrokeDashArray,
                crosshairStrokeThickness: this.crosshairStrokeThickness,
                hitTestRadius: this.hitTestRadius,
                placementDivId: this.placementDivId,
                showAxisLabels: this.showAxisLabels,
                showTooltip: this.showTooltip,
                showXLine: this.showXLine,
                showYLine: this.showYLine,
                tooltipContainerBackground: this.tooltipContainerBackground,
                tooltipDataTemplate: this.typeMap.get("tooltipDataTemplate"),
                tooltipLegendOffsetX: this.tooltipLegendOffsetX,
                tooltipLegendOffsetY: this.tooltipLegendOffsetY,
                tooltipLegendTemplate: this.typeMap.get(
                  "tooltipLegendTemplate"
                ),
                tooltipSvgTemplate: this.typeMap.get("tooltipSvgTemplate"),
                tooltipTextStroke: this.tooltipTextStroke,
                tooltipShadow: this.tooltipShadow,
              };
            return Object.assign(e.options, t), e;
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              e === f.PROPERTY.X_AXIS_ID &&
                ((this.tooltipAnnotation.xAxisId = this.xAxisId),
                this.xLineAnnotation &&
                  (this.xLineAnnotation.xAxisId = this.xAxisId),
                this.yLineAnnotation &&
                  (this.yLineAnnotation.xAxisId = this.xAxisId)),
              e === f.PROPERTY.Y_AXIS_ID &&
                ((this.tooltipAnnotation.yAxisId = this.yAxisId),
                this.xLineAnnotation &&
                  (this.xLineAnnotation.yAxisId = this.yAxisId),
                this.yLineAnnotation &&
                  (this.yLineAnnotation.yAxisId = this.yAxisId));
          }
          getSeriesInfos() {
            return this.getIncludedRenderableSeries()
              .map((e) => {
                const t = this.hitTestRenderableSeries(e, this.mousePoint);
                if (t) return e.getSeriesInfo(t);
              })
              .filter((e) => void 0 !== e);
          }
          update() {
            if (this.mousePosition !== n.EMousePosition.SeriesArea)
              return (
                this.xLineAnnotation && (this.xLineAnnotation.isHidden = !0),
                this.yLineAnnotation && (this.yLineAnnotation.isHidden = !0),
                (this.tooltipAnnotation.isHidden = !0),
                (this.tooltipAnnotation.seriesInfos = []),
                void (this.placementDivId && this.tooltipAnnotation.delete())
              );
            const e = (0, d.translateFromCanvasToSeriesViewRect)(
              this.mousePoint,
              this.parentSurface.seriesViewRect
            );
            if (
              (this.xLineAnnotation && (this.xLineAnnotation.isHidden = !1),
              this.yLineAnnotation && (this.yLineAnnotation.isHidden = !1),
              this.showTooltip && (this.tooltipAnnotation.isHidden = !1),
              e)
            ) {
              const t = (0, d.translateToNotScaled)(e.x),
                i = (0, d.translateToNotScaled)(e.y);
              this.xLineAnnotation && (this.xLineAnnotation.y1 = 0),
                this.yLineAnnotation && (this.yLineAnnotation.x1 = 0),
                this.isVerticalChart()
                  ? (this.xLineAnnotation &&
                      ((this.xLineAnnotation.y2 = (0, d.translateToNotScaled)(
                        this.parentSurface.seriesViewRect.right
                      )),
                      (this.xLineAnnotation.x1 = i),
                      (this.xLineAnnotation.x2 = i)),
                    this.yLineAnnotation &&
                      ((this.yLineAnnotation.x2 = (0, d.translateToNotScaled)(
                        this.parentSurface.seriesViewRect.bottom
                      )),
                      (this.yLineAnnotation.y1 = t),
                      (this.yLineAnnotation.y2 = t)))
                  : (this.xLineAnnotation &&
                      ((this.xLineAnnotation.y2 = (0, d.translateToNotScaled)(
                        this.parentSurface.seriesViewRect.bottom
                      )),
                      (this.xLineAnnotation.x1 = t),
                      (this.xLineAnnotation.x2 = t)),
                    this.yLineAnnotation &&
                      ((this.yLineAnnotation.x2 = (0, d.translateToNotScaled)(
                        this.parentSurface.seriesViewRect.right
                      )),
                      (this.yLineAnnotation.y1 = i),
                      (this.yLineAnnotation.y2 = i))),
                this.showTooltip &&
                  ((this.tooltipAnnotation.x1 = t),
                  (this.tooltipAnnotation.y1 = i)),
                (this.showTooltip || this.tooltipLegendTemplate) &&
                  (this.tooltipAnnotation.seriesInfos = this.getSeriesInfos());
            }
          }
          newLineAnnotation(e, t) {
            return new p.LineAnnotation({
              xCoordinateMode: u.ECoordinateMode.Pixel,
              yCoordinateMode: u.ECoordinateMode.Pixel,
              strokeThickness: this.crosshairStrokeThickness,
              strokeDashArray: this.crosshairStrokeDashArray,
              stroke: this.crosshairStroke,
              isHidden: !0,
              showLabel: this.showAxisLabels,
              axisLabelFill: e,
              axisLabelStroke: t,
              xAxisId: this.xAxisId,
              yAxisId: this.yAxisId,
            });
          }
          testIsIncludedSeries(e) {
            return !1 !== this.includedSeriesMap.get(e);
          }
          isVerticalChart() {
            var e, t;
            const i =
              (null === (e = this.parentSurface) || void 0 === e
                ? void 0
                : e.getXAxisById(this.xAxisId)) ||
              (null === (t = this.parentSurface) || void 0 === t
                ? void 0
                : t.xAxes.get(0));
            return !!i && i.isVerticalChart;
          }
        }
        t.CursorModifier = v;
        const m = (e, t) => {
            const i = [];
            return (
              t && i.push(t),
              e.forEach((t, r) => {
                if (t.isHit)
                  if (
                    (t.seriesName
                      ? i.push(t.seriesName)
                      : e.length > 1 && i.push(`Series #${r + 1}`),
                    t.dataSeriesType === h.EDataSeriesType.Ohlc)
                  ) {
                    const e = t;
                    i.push(`X: ${e.formattedXValue}`),
                      i.push(`Open: ${e.formattedOpenValue}`),
                      i.push(`Highest: ${e.formattedHighValue}`),
                      i.push(`Lowest: ${e.formattedLowValue}`),
                      i.push(`Close: ${e.formattedCloseValue}`);
                  } else if (t.dataSeriesType === h.EDataSeriesType.Xyy) {
                    const e = t;
                    i.push(`X: ${e.formattedXValue}`),
                      i.push(`Y: ${e.formattedYValue}`),
                      i.push(`Y1: ${e.formattedY1Value}`);
                  } else if (t.dataSeriesType === h.EDataSeriesType.Xyz) {
                    const e = t;
                    i.push(`X: ${e.formattedXValue}`),
                      i.push(`Y: ${e.formattedYValue}`),
                      i.push(`Z: ${e.formattedZValue}`);
                  } else if (
                    [
                      h.EDataSeriesType.HeatmapUniform,
                      h.EDataSeriesType.HeatmapNonUniform,
                    ].includes(t.dataSeriesType)
                  ) {
                    const e = t;
                    i.push(`X: ${e.formattedXValue}`),
                      i.push(`Y: ${e.formattedYValue}`),
                      null !== e.zValue &&
                        void 0 !== e.zValue &&
                        i.push(`Z: ${e.formattedZValue}`);
                  } else {
                    const e = t;
                    i.push(`X: ${e.formattedXValue} Y: ${e.formattedYValue}`);
                  }
              }),
              i
            );
          },
          S = (e, i) => {
            var r;
            const s = `id_${Date.now()}`,
              o = (
                null !== (r = i.cursorModifier.tooltipDataTemplate) &&
                  void 0 !== r
                  ? r
                  : m
              )(e, i.title);
            if (0 === o.length) return "<svg></svg>";
            const { width: a, height: n } = (0, t.calcTooltipSize)(o, 13);
            (0, t.adjustTooltipPosition)(a, n, i);
            let h = "";
            o.forEach((e, t) => {
              h += `<tspan x="8" dy="1.2em">${e}</tspan>`;
            });
            let u = "95%";
            i.yCoordShift < 0 &&
              n >
                (0, d.translateToNotScaled)(
                  i.parentSurface.seriesViewRect.height
                ) -
                  i.y1 &&
              (u = (n - 5).toFixed(0));
            const c = i.containerBackground,
              p = i.textStroke,
              g = i.cursorModifier.tooltipShadow;
            let y =
              '<feGaussianBlur result="blurOut" in="offOut" stdDeviation="3" />';
            if (void 0 !== g) {
              const e = (0, l.parseColorToTArgb)(g);
              y = `<feColorMatrix result="matrixOut" in="offOut" type="matrix"\n        values="0 0 0 0 ${
                e.red / 255
              }\n                0 0 0 0 ${
                e.green / 255
              }\n                0 0 0 0 ${
                e.blue / 255
              }\n                0 0 0 ${
                e.opacity / 255
              } 0" />\n        <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="3" />`;
            }
            return `<svg class="scichart__cursor-tooltip" width="${a}" height="${n}">\n        <defs>\n            <filter id="${s}" x="0" y="0" width="200%" height="200%">\n                <feOffset result="offOut" in="SourceAlpha" dx="3" dy="3" />\n                ${y}\n                <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n            </filter>\n        </defs>\n        <rect rx="4" ry="4" width="95%" height="${u}" fill="${c}" filter="url(#${s})" />\n        <svg width="100%">\n            <text x="8" y="3" font-size="13" font-family="Verdana" dy="0" fill="${p}">${h}</text>\n        </svg>\n    </svg>`;
          };
        (t.calcTooltipSize = (e, t = 13) => ({
          width: 8 * e.reduce((e, t) => (t.length > e ? t.length : e), 0) + 20,
          height: 1.2 * t * e.length + 16,
        })),
          (t.adjustTooltipPosition = (e, t, i) => {
            const { seriesViewRect: r } = i.parentSurface,
              s = i.x1,
              o = i.y1,
              a = (0, d.translateToNotScaled)(r.width) - s < e ? -e : 5,
              n = (0, d.translateToNotScaled)(r.height) - o < t ? -t : 5;
            (i.xCoordShift = a), (i.yCoordShift = n);
          });
      },
      42639: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CustomChartModifier2D = void 0);
        const r = i(89955),
          s = i(89046);
        class o extends s.ChartModifierBase2D {
          constructor(e) {
            super(e), (this.type = r.EChart2DModifierType.Custom);
          }
        }
        t.CustomChartModifier2D = o;
      },
      36534: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataPointInfo = void 0),
          (t.DataPointInfo = class {
            constructor(e, t, i) {
              (this.renderableSeriesProperty = e),
                (this.indexProperty = i),
                (this.metadataProperty = t);
            }
            get metadata() {
              return this.metadataProperty;
            }
            set metadata(e) {
              this.metadataProperty = e;
            }
            get index() {
              return this.indexProperty;
            }
            get xValue() {
              return this.dataSeries.getNativeXValues().get(this.index);
            }
            get yValue() {
              return this.dataSeries.getNativeYValues().get(this.index);
            }
            get renderableSeries() {
              return this.renderableSeriesProperty;
            }
            get dataSeries() {
              return this.renderableSeries.dataSeries;
            }
            get seriesName() {
              return this.dataSeries.dataSeriesName;
            }
          });
      },
      897: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataPointSelectionChangedArgs = void 0),
          (t.DataPointSelectionChangedArgs = class {
            constructor(e, t) {
              (this.source = e), (this.selectedDataPoints = t);
            }
          });
      },
      71575: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataPointSelectionModifier = t.ESelectionMode = void 0);
        const r = i(45921),
          s = i(56744),
          o = i(3214),
          a = i(87459),
          n = i(11043),
          l = i(89955),
          d = i(21670),
          h = i(32873),
          u = i(51885),
          c = i(33906),
          p = i(7541),
          g = i(90182),
          y = i(89046),
          f = i(22486),
          v = i(36534),
          m = i(897),
          S = i(18809);
        var P;
        !(function (e) {
          (e.Union = "Union"), (e.Inverse = "Inverse"), (e.Replace = "Replace");
        })((P = t.ESelectionMode || (t.ESelectionMode = {})));
        class C extends y.ChartModifierBase2D {
          constructor(e) {
            var t, i, s;
            super(e),
              (this.type = l.EChart2DModifierType.DataPointSelection),
              (this.selectionChanged = new o.EventHandler()),
              (this.includedSeriesMap = new Map()),
              (this.selectedDataPointsMap = new Map()),
              (this.selectionHasChanged = !1),
              (this.allowClickSelect =
                null === (t = null == e ? void 0 : e.allowClickSelect) ||
                void 0 === t ||
                t),
              (this.allowDragSelect =
                null === (i = null == e ? void 0 : e.allowDragSelect) ||
                void 0 === i ||
                i),
              (null == e ? void 0 : e.selectionStroke) &&
                (this.selectionStroke = e.selectionStroke),
              (null == e ? void 0 : e.selectionFill) &&
                (this.selectionFill = null == e ? void 0 : e.selectionFill),
              (this.selectionStrokeThicknessProperty =
                null !==
                  (s = null == e ? void 0 : e.selectionStrokeThickness) &&
                void 0 !== s
                  ? s
                  : 1),
              (null == e ? void 0 : e.onSelectionChanged) &&
                ("string" == typeof e.onSelectionChanged
                  ? (this.typeMap.set(
                      "onSelectionChanged",
                      e.onSelectionChanged
                    ),
                    this.selectionChanged.subscribe(
                      (0, r.getFunction)(
                        n.EBaseType.OptionFunction,
                        e.onSelectionChanged
                      )
                    ))
                  : this.selectionChanged.subscribe(e.onSelectionChanged)),
              (null == e ? void 0 : e.getSelectionMode) &&
                ("string" == typeof e.getSelectionMode
                  ? (this.typeMap.set("getSelectionMode", e.getSelectionMode),
                    (this.getSelectionMode = (0, r.getFunction)(
                      n.EBaseType.OptionFunction,
                      e.getSelectionMode
                    )))
                  : (this.getSelectionMode = e.getSelectionMode));
          }
          applyTheme(e) {
            this.testPropertyChanged(f.PROPERTY.SELECTION_FILL) ||
              (this.selectionFill = e.rubberBandFillBrush),
              this.testPropertyChanged(f.PROPERTY.SELECTION_STROKE) ||
                (this.selectionStroke = e.rubberBandStrokeBrush);
          }
          onAttach() {
            var e, t;
            super.onAttach(),
              (this.selectionRect = new g.RubberBandSvgRect(
                null === (e = this.parentSurface) || void 0 === e
                  ? void 0
                  : e.domSvgContainer,
                this.selectionFill,
                this.selectionStroke,
                this.selectionStrokeThickness
              )),
              this.clearSelectedDataPoints(),
              null === (t = this.getAllSeries()) ||
                void 0 === t ||
                t.forEach((e) => this.onAttachSeries(e));
          }
          onDetach() {
            var e;
            super.onDetach(),
              (this.selectionRect = (0, s.deleteSafe)(this.selectionRect)),
              this.clearSelectedDataPoints(),
              null === (e = this.getAllSeries()) ||
                void 0 === e ||
                e.forEach((e) => this.onDetachSeries(e));
          }
          get selectedDataPoints() {
            return Array.from(this.selectedDataPointsMap.values());
          }
          onAttachSeries(e) {
            if (
              (super.onAttachSeries(e),
              !e.dataSeries ||
                e.dataSeries.type === u.EDataSeriesType.HeatmapUniform)
            )
              return;
            const t = e.dataSeries;
            t.hasMetadataGenerator() ||
              t.setMetadataGenerator(
                new c.TemplateMetadataGenerator({ isSelected: !1 })
              );
            for (let i = 0; i < t.getMetadataLength(); i++) {
              const r = t.getMetadataAt(i);
              if (null == r ? void 0 : r.isSelected) {
                const t = new v.DataPointInfo(e, r, i);
                this.addSelectedDataPoint(e, i, t);
              }
            }
            this.raiseSelectionChanged(!1);
          }
          onDetachSeries(e) {
            super.onDetachSeries(e),
              e.dataSeries &&
                (this.removeSelectedDataPointsForSeries(e),
                this.raiseSelectionChanged(!1));
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), this.executeOn !== e.button))
              return;
            if (!this.isAttached)
              throw new Error(
                "Should not call DataPointSelectionModifier.modifierMouseDown if not attached"
              );
            const t = (0, h.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect
            );
            t &&
              ((this.startPoint = t), (this.isClicked = !0), (e.handled = !0));
          }
          modifierMouseMove(e) {
            super.modifierMouseMove(e);
            const { seriesViewRect: t } = this.parentSurface;
            if (this.isClicked) {
              this.endPoint = (0, h.translateFromCanvasToSeriesViewRect)(
                a.Rect.clipPointToRect(e.mousePoint, t),
                t
              );
              const {
                x: i,
                right: r,
                y: s,
                bottom: o,
              } = (0, S.getRubberBandRect)(
                this.startPoint,
                this.endPoint,
                this.xyDirection,
                this.parentSurface.seriesViewRect
              );
              (this.selectionRect.isHidden = !this.allowDragSelect),
                (this.selectionRect.x1 = (0, h.translateToNotScaled)(i)),
                (this.selectionRect.x2 = (0, h.translateToNotScaled)(r)),
                (this.selectionRect.y1 = (0, h.translateToNotScaled)(s)),
                (this.selectionRect.y2 = (0, h.translateToNotScaled)(o));
            }
          }
          modifierMouseUp(e) {
            if ((super.modifierMouseUp(e), this.executeOn === e.button)) {
              if (!this.isAttached)
                throw new Error(
                  "Should not call DataPointSelectionModifier.modifierMouseUp if not attached"
                );
              if (this.isClicked) {
                const { seriesViewRect: t } = this.parentSurface;
                this.endPoint = (0, h.translateFromCanvasToSeriesViewRect)(
                  a.Rect.clipPointToRect(e.mousePoint, t),
                  t
                );
                const i = (0, S.getRubberBandRect)(
                    this.startPoint,
                    this.endPoint,
                    this.xyDirection,
                    this.parentSurface.seriesViewRect
                  ),
                  r = i.width >= 3 && i.height >= 3 && this.allowDragSelect,
                  s = this.getSelectionMode(e, r);
                r && this.allowDragSelect
                  ? this.selectManyPoints(i, s)
                  : this.allowClickSelect &&
                    this.selectSinglePoint(e.mousePoint, s),
                  (this.isClicked = !1),
                  (this.selectionRect.isHidden = !0);
              }
            }
          }
          get selectionStrokeThickness() {
            return this.selectionStrokeThicknessProperty;
          }
          set selectionStrokeThickness(e) {
            (this.selectionStrokeThicknessProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.SELECTION_STROKE_THICKNESS);
          }
          get selectionStroke() {
            return this.selectionStrokeProperty;
          }
          set selectionStroke(e) {
            (this.selectionStrokeProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.SELECTION_STROKE);
          }
          get selectionFill() {
            return this.selectionFillProperty;
          }
          set selectionFill(e) {
            (this.selectionFillProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.SELECTION_FILL);
          }
          getIncludedRenderableSeries() {
            return this.getAllSeries().filter(
              (e) => !1 !== this.includedSeriesMap.get(e)
            );
          }
          includeSeries(e, t) {
            t || this.includedSeriesMap.set(e, t),
              t && this.includedSeriesMap.delete(e);
          }
          get includedSeries() {
            return this.includedSeriesMap;
          }
          getSelectionMode(e, t) {
            return e.ctrlKey ? P.Union : e.shiftKey ? P.Inverse : P.Replace;
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                allowClickSelect: this.allowClickSelect,
                allowDragSelect: this.allowDragSelect,
                getSelectionMode: this.typeMap.get("getSelectionMode"),
                onSelectionChanged: this.typeMap.get("onSelectionChanged"),
                selectionFill: this.selectionFill,
                selectionStroke: this.selectionStroke,
                selectionStrokeThickness: this.selectionStrokeThickness,
              };
            return Object.assign(e.options, t), e;
          }
          delete() {
            this.selectionChanged.unsubscribeAll(),
              (this.selectionRect = (0, s.deleteSafe)(this.selectionRect)),
              super.delete();
          }
          selectManyPoints(e, t) {
            this.parentSurface &&
              (t !== P.Replace || this.deselectAllPoints(!1),
              this.getIncludedRenderableSeries()
                .filter((e) => e.isVisible && e.dataSeries)
                .forEach((i, r) => {
                  const s = i.xAxis.getCurrentCoordinateCalculator(),
                    o = i.yAxis.getCurrentCoordinateCalculator();
                  let a, n, l, h;
                  if (
                    (s.getDataValue(e.left) <= s.getDataValue(e.right)
                      ? ((a = s.getDataValue(e.left)),
                        (n = s.getDataValue(e.right)))
                      : ((a = s.getDataValue(e.right)),
                        (n = s.getDataValue(e.left))),
                    o.getDataValue(e.top) <= o.getDataValue(e.bottom)
                      ? ((l = o.getDataValue(e.top)),
                        (h = o.getDataValue(e.bottom)))
                      : ((l = o.getDataValue(e.bottom)),
                        (h = o.getDataValue(e.top))),
                    i.dataSeries.type === u.EDataSeriesType.HeatmapUniform)
                  );
                  else {
                    const e = i.dataSeries;
                    for (let r = 0; r < e.count(); r++) {
                      const s = e.getNativeXValues().get(r),
                        o = e.getNativeYValues().get(r);
                      if ((0, d.testIsInBounds)(s, o, a, h, n, l)) {
                        const s = e.getMetadataAt(r);
                        t !== P.Inverse
                          ? ((s.isSelected = !0),
                            this.addSelectedDataPoint(
                              i,
                              r,
                              new v.DataPointInfo(i, s, r)
                            ))
                          : s.isSelected
                          ? ((s.isSelected = !1),
                            this.removeSelectedDataPoint(i, r))
                          : ((s.isSelected = !0),
                            this.addSelectedDataPoint(
                              i,
                              r,
                              new v.DataPointInfo(i, s, r)
                            ));
                      }
                    }
                  }
                }),
              this.raiseSelectionChanged(!0));
          }
          selectSinglePoint(e, t) {
            if (this.parentSurface) {
              const i = this.getIncludedRenderableSeries()
                .filter((e) => e.isVisible && e.dataSeries)
                .map((t) => ({
                  renderableSeries: t,
                  hitTestInfo:
                    t.hitTestProvider.hitTestForDataPointSelectionModifier(
                      e.x,
                      e.y,
                      p.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
                    ),
                }));
              t !== P.Replace || this.deselectAllPoints(!1),
                i.forEach((e) => {
                  const i = e.hitTestInfo,
                    r = e.renderableSeries;
                  if (i.isHit)
                    if (i.metadata)
                      if (t === P.Union) {
                        i.metadata.isSelected = !0;
                        const e = new v.DataPointInfo(
                          i.associatedSeries,
                          i.metadata,
                          i.dataSeriesIndex
                        );
                        this.addSelectedDataPoint(
                          i.associatedSeries,
                          i.dataSeriesIndex,
                          e
                        );
                      } else
                        (i.metadata.isSelected = !i.metadata.isSelected),
                          i.metadata.isSelected
                            ? this.addSelectedDataPoint(
                                r,
                                i.dataSeriesIndex,
                                new v.DataPointInfo(
                                  i.associatedSeries,
                                  i.metadata,
                                  i.dataSeriesIndex
                                )
                              )
                            : this.removeSelectedDataPoint(
                                r,
                                i.dataSeriesIndex
                              );
                    else
                      console.warn(
                        `Cannot select datapoint for series ${i.dataSeriesName} as it does not have metadata. To solve this either:\nConfigure metadata when you create the series or when you add data eg renderableSeries.dataSeries = new XyDataSeries(wasmContext, { metadata: { isSelected: false }}), or:\nAdd the DataPointSelectionModifier after all series have had their dataSeries set.`
                      );
                }),
                this.raiseSelectionChanged(!0);
            }
          }
          deselectAllPoints(e = !0) {
            this.selectedDataPoints.forEach((e) => {
              e.renderableSeries && e.metadata && (e.metadata.isSelected = !1);
            }),
              this.clearSelectedDataPoints(),
              e && this.raiseSelectionChanged(!0);
          }
          addSelectedDataPoint(e, t, i) {
            this.selectedDataPointsMap.set(x(e, t), i),
              (this.selectionHasChanged = !0);
          }
          removeSelectedDataPoint(e, t) {
            this.selectedDataPointsMap.delete(x(e, t)),
              (this.selectionHasChanged = !0);
          }
          clearSelectedDataPoints() {
            this.selectedDataPointsMap.size > 0 &&
              (this.selectionHasChanged = !0),
              this.selectedDataPointsMap.clear();
          }
          removeSelectedDataPointsForSeries(e) {
            this.selectedDataPointsMap.forEach((t, i) => {
              t.renderableSeries === e &&
                (this.selectedDataPointsMap.delete(i),
                (this.selectionHasChanged = !0));
            });
          }
          raiseSelectionChanged(e) {
            var t;
            this.selectionHasChanged &&
              (this.selectionChanged.raiseEvent(
                new m.DataPointSelectionChangedArgs(
                  this,
                  this.selectedDataPoints
                )
              ),
              (this.selectionHasChanged = !1),
              e &&
                (null === (t = this.parentSurface) ||
                  void 0 === t ||
                  t.invalidateElement()));
          }
        }
        t.DataPointSelectionModifier = C;
        const x = (e, t) => `${e.id}_${t}`;
      },
      9656: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LegendModifier = void 0);
        const r = i(3214),
          s = i(89955),
          o = i(96260),
          a = i(89046);
        class n extends a.ChartModifierBase2D {
          constructor(e) {
            var t, i, a;
            super(e),
              (this.type = s.EChart2DModifierType.Legend),
              (this.isCheckedChanged = new r.EventHandler()),
              (this.includedSeriesMap = new Map()),
              (this.legendItemCheckedChanged =
                this.legendItemCheckedChanged.bind(this)),
              (this.sciChartLegend =
                null !== (t = null == e ? void 0 : e.legend) && void 0 !== t
                  ? t
                  : new o.SciChartLegend(e)),
              (this.sciChartLegend.showCheckboxes =
                null !== (i = null == e ? void 0 : e.showCheckboxes) &&
                void 0 !== i
                  ? i
                  : this.sciChartLegend.showCheckboxes),
              (this.sciChartLegend.showSeriesMarkers =
                null !== (a = null == e ? void 0 : e.showSeriesMarkers) &&
                void 0 !== a
                  ? a
                  : this.sciChartLegend.showSeriesMarkers),
              (this.sciChartLegend.legendItemCheckedChangedCallback =
                this.legendItemCheckedChanged),
              (null == e ? void 0 : e.isCheckedChangedCallback) &&
                this.isCheckedChanged.subscribe((t) =>
                  e.isCheckedChangedCallback(t.series, t.isChecked)
                );
          }
          applyTheme(e) {
            super.applyTheme(e), this.sciChartLegend.applyTheme();
          }
          onAttachSeries(e) {
            super.onAttachSeries(e),
              this.sciChartLegend.setRenderableSeriesArray(
                this.getIncludedRenderableSeries()
              ),
              this.sciChartLegend.setInvalidateParentSurface(
                this.parentSurface.invalidateElement
              );
          }
          onDetachSeries(e) {
            super.onDetachSeries(e),
              this.sciChartLegend.setRenderableSeriesArray(
                this.getIncludedRenderableSeries()
              );
          }
          onParentSurfaceRendered() {
            super.onParentSurfaceRendered();
          }
          onAttach() {
            super.onAttach(),
              this.sciChartLegend.attachTo(this.parentSurface),
              this.sciChartLegend.setRenderableSeriesArray(
                this.getIncludedRenderableSeries()
              );
          }
          onDetach() {
            var e, t;
            super.onDetach(),
              null === (e = this.sciChartLegend) ||
                void 0 === e ||
                e.setRenderableSeriesArray([]),
              null === (t = this.sciChartLegend) || void 0 === t || t.detach(),
              (this.sciChartLegend = void 0);
          }
          includeSeries(e, t) {
            var i;
            ((void 0 === this.includedSeriesMap.get(e) && !t) ||
              (!0 === this.includedSeriesMap.get(e) && !t) ||
              (!1 === this.includedSeriesMap.get(e) && t)) &&
              (this.includedSeriesMap.set(e, t),
              this.isAttached &&
                this.sciChartLegend.setRenderableSeriesArray(
                  this.getIncludedRenderableSeries()
                ),
              null === (i = this.parentSurface) ||
                void 0 === i ||
                i.invalidateElement());
          }
          getIncludedRenderableSeries() {
            const e = this.parentSurface.renderableSeries
                .asArray()
                .filter((e) => !e.isStacked && this.testIsIncludedSeries(e)),
              t = this.parentSurface.renderableSeries
                .asArray()
                .filter((e) => e.isStacked),
              i = e;
            return (
              t.forEach((e) => {
                e.asArray().forEach((e) => {
                  this.testIsIncludedSeries(e) && i.push(e);
                });
              }),
              i
            );
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                margin: this.sciChartLegend.margin,
                orientation: this.sciChartLegend.orientation,
                placement: this.sciChartLegend.placement,
                showCheckboxes: this.sciChartLegend.showCheckboxes,
                showLegend: this.sciChartLegend.showLegend,
                showSeriesMarkers: this.sciChartLegend.showSeriesMarkers,
              };
            return Object.assign(e.options, t), e;
          }
          delete() {
            super.delete(), this.onDetach();
          }
          legendItemCheckedChanged(e, t) {
            var i;
            null === (i = this.isCheckedChanged) ||
              void 0 === i ||
              i.raiseEvent({ series: e, isChecked: t });
          }
          testIsIncludedSeries(e) {
            return !1 !== this.includedSeriesMap.get(e);
          }
        }
        t.LegendModifier = n;
      },
      14290: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ModifierArgsBase = void 0),
          (t.ModifierArgsBase = class {
            constructor() {
              this.handled = !1;
            }
          });
      },
      39299: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ModifierMouseArgs = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(86127),
          a = i(14290);
        class n extends a.ModifierArgsBase {
          constructor(e, t) {
            var i;
            super(),
              (this.isActiveSubChartEvent = !0),
              (this.mousePoint = e),
              (this.button = null == t ? void 0 : t.button),
              (this.mouseWheelDelta =
                null !== (i = null == t ? void 0 : t.mouseWheelDelta) &&
                void 0 !== i
                  ? i
                  : 0),
              (this.pointerId = null == t ? void 0 : t.pointerId),
              (this.pointerType = null == t ? void 0 : t.pointerType),
              (this.target = null == t ? void 0 : t.target),
              (this.isMaster = null == t ? void 0 : t.isMaster),
              (this.modifierGroup = null == t ? void 0 : t.modifierGroup),
              (this.shiftKey = null == t ? void 0 : t.shiftKey),
              (this.altKey = null == t ? void 0 : t.altKey),
              (this.ctrlKey = null == t ? void 0 : t.ctrlKey),
              (this.nativeEvent = null == t ? void 0 : t.nativeEvent);
          }
          static fromMouseEvent(e) {
            r.Guard.notNull(e, "mouseEvent");
            const t = new s.Point(
                e.offsetX * o.DpiHelper.PIXEL_RATIO,
                e.offsetY * o.DpiHelper.PIXEL_RATIO
              ),
              i = {
                target: e.target,
                isMaster: !0,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                altKey: e.altKey,
                nativeEvent: e,
              };
            return new n(t, i);
          }
          static fromWheelEvent(e) {
            r.Guard.notNull(e, "wheelEvent");
            const t = new s.Point(
                e.offsetX * o.DpiHelper.PIXEL_RATIO,
                e.offsetY * o.DpiHelper.PIXEL_RATIO
              ),
              i = {
                mouseWheelDelta: e.deltaY,
                target: e.target,
                isMaster: !0,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                altKey: e.altKey,
                nativeEvent: e,
              };
            return new n(t, i);
          }
          static fromPointerEvent(e) {
            r.Guard.notNull(e, "pointerEvent");
            const t = new s.Point(
                e.offsetX * o.DpiHelper.PIXEL_RATIO,
                e.offsetY * o.DpiHelper.PIXEL_RATIO
              ),
              i = {
                button: e.button,
                pointerId: e.pointerId,
                pointerType: e.pointerType,
                target: e.target,
                isMaster: !0,
                shiftKey: e.shiftKey,
                ctrlKey: e.ctrlKey,
                altKey: e.altKey,
                nativeEvent: e,
              };
            return new n(t, i);
          }
          static copy(e, t, i, r, o) {
            let a = e.mousePoint;
            if (i && r) {
              const t = e.mousePoint.x - i.x,
                o = e.mousePoint.y - i.y,
                n = r.width / i.width,
                l = r.height / i.height;
              a = new s.Point(r.x + t * n, r.y + o * l);
            }
            return Object.assign(Object.assign({}, e), {
              isMaster: !1,
              masterData: o,
              handled: !1,
              modifierGroup: t,
              mousePoint: a,
            });
          }
          static copyForSubChart(e, t, i, r, o) {
            let a = e.mousePoint;
            if (i && r) {
              const t = r.width / i.width,
                o = r.height / i.height;
              a = new s.Point(
                (e.mousePoint.x - i.x) * t + r.x,
                (e.mousePoint.y - i.y) * o + r.y
              );
            }
            return Object.assign(Object.assign({}, e), {
              isMaster: !1,
              masterData: o,
              handled: !1,
              modifierGroup: t,
              mousePoint: a,
            });
          }
        }
        t.ModifierMouseArgs = n;
      },
      56985: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MouseWheelZoomModifier = t.EActionType = void 0);
        const r = i(89955),
          s = i(86699),
          o = i(14379),
          a = i(74617),
          n = i(32873),
          l = i(57397),
          d = i(89046);
        var h;
        !(function (e) {
          (e[(e.Zoom = 0)] = "Zoom"), (e[(e.Pan = 1)] = "Pan");
        })((h = t.EActionType || (t.EActionType = {})));
        class u extends d.ChartModifierBase2D {
          constructor(e) {
            var t, i, o, a, n, l, d, u, c, p, g, y;
            if (
              (super(e),
              (this.type = r.EChart2DModifierType.MouseWheelZoom),
              (this.growFactor = 0.001),
              (this.actionType = h.Zoom),
              (this.applyToSeriesViewRect = !0),
              (this.applyToAxes = !0),
              (this.includedXAxisMap = new Map()),
              (this.includedYAxisMap = new Map()),
              (this.growFactor =
                null !== (t = null == e ? void 0 : e.growFactor) && void 0 !== t
                  ? t
                  : this.growFactor),
              (this.actionType =
                null !== (i = null == e ? void 0 : e.actionType) && void 0 !== i
                  ? i
                  : this.actionType),
              (this.applyToSeriesViewRect =
                null !== (o = null == e ? void 0 : e.applyToSeriesViewRect) &&
                void 0 !== o
                  ? o
                  : this.applyToSeriesViewRect),
              (this.applyToAxes =
                null !== (a = null == e ? void 0 : e.applyToAxes) &&
                void 0 !== a
                  ? a
                  : this.applyToAxes),
              this.actionType === h.Pan &&
                this.xyDirection === s.EXyDirection.XyDirection &&
                (console.warn(
                  "SciChart MouseWheelZoomModifier: actionType=Pan and xyDirection=Xy conflict. Auto setting XyDirection to X"
                ),
                (this.xyDirection = s.EXyDirection.XDirection)),
              (null === (n = null == e ? void 0 : e.includedXAxisIds) ||
              void 0 === n
                ? void 0
                : n.length) > 0 &&
                (null === (l = null == e ? void 0 : e.excludedXAxisIds) ||
                void 0 === l
                  ? void 0
                  : l.length) > 0)
            )
              throw new Error(
                "You either should use includedXAxisIds or excludedXAxisIds"
              );
            if (
              (null === (d = null == e ? void 0 : e.includedYAxisIds) ||
              void 0 === d
                ? void 0
                : d.length) > 0 &&
              (null === (u = null == e ? void 0 : e.excludedYAxisIds) ||
              void 0 === u
                ? void 0
                : u.length) > 0
            )
              throw new Error(
                "You either should use includedYAxisIds or excludedYAxisIds"
              );
            null === (c = null == e ? void 0 : e.includedXAxisIds) ||
              void 0 === c ||
              c.forEach((e) => {
                this.includedXAxisMap.set(e, !0);
              }),
              null === (p = null == e ? void 0 : e.includedYAxisIds) ||
                void 0 === p ||
                p.forEach((e) => {
                  this.includedYAxisMap.set(e, !0);
                }),
              null === (g = null == e ? void 0 : e.excludedXAxisIds) ||
                void 0 === g ||
                g.forEach((e) => {
                  this.includedXAxisMap.set(e, !1);
                }),
              null === (y = null == e ? void 0 : e.excludedYAxisIds) ||
                void 0 === y ||
                y.forEach((e) => {
                  this.includedYAxisMap.set(e, !1);
                });
          }
          modifierMouseWheel(e) {
            super.modifierMouseWheel(e);
            const t = (0, n.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect
            );
            if (t && this.applyToSeriesViewRect)
              this.actionType === h.Zoom
                ? (e.handled = this.performZoom(t, e.mouseWheelDelta))
                : this.actionType === h.Pan &&
                  (e.handled = this.performPan(e.mouseWheelDelta));
            else if (this.applyToAxes) {
              const t = [];
              [s.EXyDirection.XDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) && t.push(...this.getIncludedXAxis()),
                [
                  s.EXyDirection.YDirection,
                  s.EXyDirection.XyDirection,
                ].includes(this.xyDirection) &&
                  t.push(...this.getIncludedYAxis());
              const i = (0, d.getActiveAxes)(t, e.mousePoint);
              if (i.length > 0)
                if (((e.handled = !0), this.actionType === h.Zoom)) {
                  const t = this.growFactor * e.mouseWheelDelta,
                    r = (0, n.translateFromCanvasToSeriesViewRect)(
                      e.mousePoint,
                      this.parentSurface.seriesViewRect,
                      !0
                    );
                  i.forEach((e) => {
                    this.growBy(r, e, t);
                  });
                } else
                  this.actionType === h.Pan &&
                    i.forEach((t) => {
                      const i = this.getAxisSize(t),
                        r = e.mouseWheelDelta * this.growFactor * i;
                      t.scroll(r, l.EClipMode.None);
                    });
            }
            e.handled &&
              this.parentSurface.setZoomState(o.EZoomState.UserZooming);
          }
          performZoom(e, t) {
            const i = this.growFactor * t;
            let r = !1;
            return (
              [s.EXyDirection.XDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedXAxis().forEach((t) => {
                  this.growBy(e, t, i), (r = !0);
                }),
              [s.EXyDirection.YDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedYAxis().forEach((t) => {
                  this.growBy(e, t, i), (r = !0);
                }),
              r
            );
          }
          performPan(e) {
            let t = !1;
            return (
              [s.EXyDirection.XDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedXAxis().forEach((i) => {
                  const r = this.getAxisSize(i),
                    s = e * this.growFactor * r;
                  i.scroll(s, l.EClipMode.None), (t = !0);
                }),
              [s.EXyDirection.YDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedYAxis().forEach((i) => {
                  const r = this.getAxisSize(i),
                    s = e * this.growFactor * r;
                  i.scroll(s, l.EClipMode.None), (t = !0);
                }),
              t
            );
          }
          includeXAxis(e, t) {
            this.includedXAxisMap.set(e.id, t);
          }
          includeYAxis(e, t) {
            this.includedYAxisMap.set(e.id, t);
          }
          includeAllAxes() {
            this.includedXAxisMap.clear();
          }
          getIncludedXAxis() {
            return (0, a.getIncludedAxis)(
              this.parentSurface.xAxes.asArray(),
              this.includedXAxisMap
            );
          }
          getIncludedYAxis() {
            return (0, a.getIncludedAxis)(
              this.parentSurface.yAxes.asArray(),
              this.includedYAxisMap
            );
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                actionType: this.actionType,
                growFactor: this.growFactor,
                applyToSeriesViewRect: this.applyToSeriesViewRect,
                applyToAxes: this.applyToAxes,
                includedXAxisIds: Array.from(this.includedXAxisMap.entries())
                  .filter((e) => e[1])
                  .map((e) => e[0]),
                includedYAxisIds: Array.from(this.includedYAxisMap.entries())
                  .filter((e) => e[1])
                  .map((e) => e[0]),
                excludedXAxisIds: Array.from(this.includedXAxisMap.entries())
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
                excludedYAxisIds: Array.from(this.includedYAxisMap.entries())
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
              };
            return Object.assign(e.options, t), e;
          }
          getAxisSize(e) {
            let t = e.isHorizontalAxis ? e.viewRect.width : e.viewRect.height;
            return (
              Math.abs(t) < 1e-8 &&
                this.parentSurface &&
                (t = e.isHorizontalAxis
                  ? this.parentSurface.seriesViewRect.width
                  : this.parentSurface.seriesViewRect.height),
              t
            );
          }
        }
        t.MouseWheelZoomModifier = u;
      },
      55526: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OverviewRangeSelectionModifier = void 0);
        const r = i(31194),
          s = i(56744),
          o = i(98140),
          a = i(87459),
          n = i(89955),
          l = i(86699),
          d = i(32873),
          h = i(31306),
          u = i(12021),
          c = i(89046);
        class p extends c.ChartModifierBase2D {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = n.EChart2DModifierType.OverviewRangeSelection),
              (this.animationDuration = 1e3),
              (this.animate = !0),
              (this.isClicked = !1),
              (this.onSelectedAreaChanged =
                null == e ? void 0 : e.onSelectedAreaChanged),
              (this.xAxisId =
                null !== (t = null == e ? void 0 : e.xAxisId) && void 0 !== t
                  ? t
                  : this.xAxisId),
              (this.yAxisId =
                null !== (i = null == e ? void 0 : e.yAxisId) && void 0 !== i
                  ? i
                  : this.yAxisId);
          }
          onAttach() {
            super.onAttach(), this.updateSelectionAnnotation();
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), this.executeOn === e.button)) {
              if (!this.isAttached)
                throw new Error(
                  "Should not call OverviewRangeSelectionModifier.modifierMouseDown if not attached"
                );
              (0, d.translateFromCanvasToSeriesViewRect)(
                e.mousePoint,
                this.parentSurface.seriesViewRect
              ) && (this.isClicked = !0);
            }
          }
          modifierMouseUp(e) {
            var t;
            if ((super.modifierMouseUp(e), this.executeOn === e.button)) {
              if (!this.isAttached)
                throw new Error(
                  "Should not call OverviewRangeSelectionModifier.modifierMouseUp if not attached"
                );
              if (this.isClicked) {
                (e.handled = !0),
                  null === (t = this.overviewPositionAnimation) ||
                    void 0 === t ||
                    t.cancel();
                const { seriesViewRect: i } = this.parentSurface;
                (this.pointTo = (0, d.translateFromCanvasToSeriesViewRect)(
                  a.Rect.clipPointToRect(e.mousePoint, i),
                  i
                )),
                  (this.isClicked = !1);
                const s = this.parentSurface.getXAxisById(this.xAxisId),
                  n =
                    s
                      .getCurrentCoordinateCalculator()
                      .getDataValue(
                        s.isHorizontalAxis ? this.pointTo.x : this.pointTo.y
                      ) -
                    (this.rangeSelectionAnnotation.x1 +
                      this.rangeSelectionAnnotation.x2) /
                      2,
                  l = new o.NumberRange(
                    this.rangeSelectionAnnotation.x1,
                    this.rangeSelectionAnnotation.x2
                  ),
                  h = new o.NumberRange(
                    this.rangeSelectionAnnotation.x1 + n,
                    this.rangeSelectionAnnotation.x2 + n
                  ),
                  u = (e) => {
                    var t, i, r;
                    null === (t = this.rangeSelectionAnnotation) ||
                      void 0 === t ||
                      t.setCoordinates({ x1: e.min, x2: e.max }),
                      (this.annotationBeforeSelectedAreaProperty.x2 =
                        null === (i = this.rangeSelectionAnnotation) ||
                        void 0 === i
                          ? void 0
                          : i.x1),
                      (this.annotationAfterSelectedAreaProperty.x1 =
                        null === (r = this.rangeSelectionAnnotation) ||
                        void 0 === r
                          ? void 0
                          : r.x2),
                      this.onSelectedAreaChanged(
                        new o.NumberRange(
                          this.rangeSelectionAnnotation.x1,
                          this.rangeSelectionAnnotation.x2
                        )
                      );
                  };
                this.animate
                  ? ((this.overviewPositionAnimation =
                      r.NumberRangeAnimator.animate(
                        l,
                        h,
                        this.animationDuration,
                        u,
                        null
                      )),
                    this.parentSurface.addAnimation(
                      this.overviewPositionAnimation
                    ))
                  : u(h);
              }
            }
          }
          get rangeSelectionAnnotation() {
            return this.rangeSelectionAnnotationProperty;
          }
          get unselectedsvgString() {
            return this.annotationBeforeSelectedAreaProperty.svgString;
          }
          set unselectedsvgString(e) {
            (this.annotationBeforeSelectedAreaProperty.svgString = e),
              (this.annotationAfterSelectedAreaProperty.svgString = e);
          }
          get selectedArea() {
            return this.selectedAreaProperty;
          }
          set selectedArea(e) {
            var t, i, r, s, o, a;
            this.selectedAreaProperty = e;
            const n =
              null === (t = this.parentSurface) || void 0 === t
                ? void 0
                : t.getXAxisById(this.xAxisId);
            n &&
              (null === (i = this.rangeSelectionAnnotation) ||
                void 0 === i ||
                i.setCoordinates({ x1: e.min, x2: e.max }),
              null === (r = this.annotationBeforeSelectedAreaProperty) ||
                void 0 === r ||
                r.setCoordinates({
                  x1: n.visibleRange.min,
                  x2:
                    null === (s = this.rangeSelectionAnnotation) || void 0 === s
                      ? void 0
                      : s.x1,
                }),
              null === (o = this.annotationAfterSelectedAreaProperty) ||
                void 0 === o ||
                o.setCoordinates({
                  x1:
                    null === (a = this.rangeSelectionAnnotation) || void 0 === a
                      ? void 0
                      : a.x2,
                  x2: n.visibleRange.max,
                }));
          }
          createAnnotation(e) {
            return new u.OverviewCustomResizableAnnotation(e);
          }
          updateSelectionAnnotation() {
            var e;
            if (this.parentSurface) {
              const t = () => {
                  var e;
                  null === (e = this.overviewPositionAnimation) ||
                    void 0 === e ||
                    e.cancel();
                  const t = new o.NumberRange(
                    this.rangeSelectionAnnotation.x1,
                    this.rangeSelectionAnnotation.x2
                  );
                  (this.selectedAreaProperty = t),
                    (this.annotationBeforeSelectedAreaProperty.x2 =
                      this.rangeSelectionAnnotation.x1),
                    (this.annotationAfterSelectedAreaProperty.x1 =
                      this.rangeSelectionAnnotation.x2),
                    this.onSelectedAreaChanged(t);
                },
                i =
                  null === (e = this.parentSurface) || void 0 === e
                    ? void 0
                    : e.getXAxisById(this.xAxisId),
                r = {
                  xAxisId: this.xAxisId,
                  yAxisId: this.yAxisId,
                  opacity: 0.5,
                  y1: 0,
                  y2: 1,
                  xCoordinateMode: h.ECoordinateMode.DataValue,
                  yCoordinateMode: h.ECoordinateMode.Relative,
                  resizeDirections: l.EXyDirection.XDirection,
                },
                a = this.createAnnotation(
                  Object.assign(Object.assign({}, r), {
                    x1: this.selectedArea.min,
                    x2: this.selectedArea.max,
                    isEditable: !0,
                    svgString: f,
                    onDrag: t,
                  })
                ),
                n = this.createAnnotation(
                  Object.assign(Object.assign({}, r), {
                    x1: i.visibleRange.min,
                    x2: this.selectedArea.min,
                    svgString: v,
                  })
                ),
                d = this.createAnnotation(
                  Object.assign(Object.assign({}, r), {
                    x1: this.selectedArea.max,
                    x2: i.visibleRange.max,
                    svgString: v,
                  })
                );
              i.isHorizontalAxis
                ? ((a.adornerSvgStringTemplate = g),
                  (n.minWidth = 0),
                  (d.minWidth = 0))
                : ((a.adornerSvgStringTemplate = y),
                  (n.minHeight = 0),
                  (d.minHeight = 0)),
                (this.rangeSelectionAnnotationProperty = (0, s.deleteSafe)(
                  this.rangeSelectionAnnotation
                )),
                (this.annotationBeforeSelectedAreaProperty = (0, s.deleteSafe)(
                  this.annotationBeforeSelectedAreaProperty
                )),
                (this.annotationAfterSelectedAreaProperty = (0, s.deleteSafe)(
                  this.annotationAfterSelectedAreaProperty
                )),
                this.parentSurface.modifierAnnotations.remove(
                  this.rangeSelectionAnnotation
                ),
                this.parentSurface.modifierAnnotations.remove(
                  this.annotationBeforeSelectedAreaProperty
                ),
                this.parentSurface.modifierAnnotations.remove(
                  this.annotationAfterSelectedAreaProperty
                ),
                this.parentSurface.modifierAnnotations.add(a),
                this.parentSurface.modifierAnnotations.add(n),
                this.parentSurface.modifierAnnotations.add(d),
                (this.rangeSelectionAnnotationProperty = a),
                (this.annotationBeforeSelectedAreaProperty = n),
                (this.annotationAfterSelectedAreaProperty = d);
            }
          }
        }
        t.OverviewRangeSelectionModifier = p;
        const g = (e, t, i, r) => {
            const s = "black",
              o = "#2e2e2e",
              a = i - e,
              n = r - t;
            return `<svg x="${e}" y="${t}" width="${a}px" height="${n}px" viewBox="0 0 ${a} ${n}" overflow="visible" xmlns="http://www.w3.org/2000/svg">\n        <line x1="0" y1="0" x2="${a}" y2="0" stroke="${s}" stroke-width="1" />\n        <line x1="0" y1="${n}" x2="${a}" y2="${n}" stroke="${s}" stroke-width="1" />\n        <line x1="0" y1="0" x2="0" y2="${n}" stroke="${s}" stroke-width="1" />\n        <line x1="${a}" y1="0" x2="${a}" y2="${n}" stroke="${s}" stroke-width="1" />\n        <rect x="-3" y="30%" width="7" height="40%" fill="${o}" rx="5" stroke="${s}" />\n        <rect x="${
              a - 3
            }" y="30%" width="7" height="40%" fill="${o}" rx="5" stroke="${s}" />\n        </svg>`;
          },
          y = (e, t, i, r) => {
            const s = "black",
              o = "#2e2e2e",
              a = i - e,
              n = r - t;
            return `<svg x="${e}" y="${t}" width="${a}px" height="${n}px" viewBox="0 0 ${a} ${n}" overflow="visible" xmlns="http://www.w3.org/2000/svg">\n        <line x1="0" y1="0" x2="${a}" y2="0" stroke="${s}" stroke-width="1" />\n        <line x1="0" y1="${n}" x2="${a}" y2="${n}" stroke="${s}" stroke-width="1" />\n        <line x1="0" y1="0" x2="0" y2="${n}" stroke="${s}" stroke-width="1" />\n        <line x1="${a}" y1="0" x2="${a}" y2="${n}" stroke="${s}" stroke-width="1" />\n        <rect x="30%" y="-3" width="40%" height="7" fill="${o}" rx="5" stroke="${s}" />\n        <rect x="30%" y="${
              n - 3
            }" width="40%" height="7" fill="${o}" rx="5" stroke="${s}" />\n        </svg>`;
          },
          f =
            '<svg width="50" height="50" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">\n    <rect width="100%" height="100%" style="fill:transparent">\n    </rect>\n</svg>',
          v =
            '<svg width="50" height="50" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg">\n        <rect width="100%" height="100%" style="fill:black">\n        </rect>\n    </svg>';
      },
      21562: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PinchZoomModifier = void 0);
        const r = i(75772),
          s = i(89955),
          o = i(86699),
          a = i(14379),
          n = i(74617),
          l = i(32873),
          d = i(89046);
        class h extends d.ChartModifierBase2D {
          constructor(e) {
            var t, i, o, a, n, l, d, h, u, c;
            if (
              (super(e),
              (this.horizontalGrowFactor = 0.005),
              (this.verticalGrowFactor = 0.005),
              (this.includedXAxisMap = new Map()),
              (this.includedYAxisMap = new Map()),
              (this.getMiddlePoint = (e, t) =>
                new r.Point((e.x + t.x) / 2, (e.y + t.y) / 2)),
              (this.type = s.EChart2DModifierType.PinchZoom),
              (null === (t = null == e ? void 0 : e.includedXAxisIds) ||
              void 0 === t
                ? void 0
                : t.length) > 0 &&
                (null === (i = null == e ? void 0 : e.excludedXAxisIds) ||
                void 0 === i
                  ? void 0
                  : i.length) > 0)
            )
              throw new Error(
                "You either should use includedXAxisIds or excludedXAxisIds"
              );
            if (
              (null === (o = null == e ? void 0 : e.includedYAxisIds) ||
              void 0 === o
                ? void 0
                : o.length) > 0 &&
              (null === (a = null == e ? void 0 : e.excludedYAxisIds) ||
              void 0 === a
                ? void 0
                : a.length) > 0
            )
              throw new Error(
                "You either should use includedYAxisIds or excludedYAxisIds"
              );
            null === (n = null == e ? void 0 : e.includedXAxisIds) ||
              void 0 === n ||
              n.forEach((e) => {
                this.includedXAxisMap.set(e, !0);
              }),
              null === (l = null == e ? void 0 : e.includedYAxisIds) ||
                void 0 === l ||
                l.forEach((e) => {
                  this.includedYAxisMap.set(e, !0);
                }),
              null === (d = null == e ? void 0 : e.excludedXAxisIds) ||
                void 0 === d ||
                d.forEach((e) => {
                  this.includedXAxisMap.set(e, !1);
                }),
              null === (h = null == e ? void 0 : e.excludedYAxisIds) ||
                void 0 === h ||
                h.forEach((e) => {
                  this.includedYAxisMap.set(e, !1);
                }),
              (this.horizontalGrowFactor =
                null !== (u = null == e ? void 0 : e.horizontalGrowFactor) &&
                void 0 !== u
                  ? u
                  : this.horizontalGrowFactor),
              (this.verticalGrowFactor =
                null !== (c = null == e ? void 0 : e.verticalGrowFactor) &&
                void 0 !== c
                  ? c
                  : this.verticalGrowFactor);
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), !this.isAttached))
              throw new Error(
                "Should not call PinchZoomModifier.modifierMouseDown if not attached"
              );
            (0, l.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect
            ) &&
              ("touch" === e.pointerType || "pen" === e.pointerType) &&
              this.activePointerEvents.set(e.pointerId, e);
          }
          modifierMouseMove(e) {
            super.modifierMouseMove(e),
              this.getIsActionAllowed(e) &&
                (this.parentSurface.setZoomState(a.EZoomState.UserZooming),
                this.performModifierAction(e));
          }
          modifierMouseUp(e) {
            super.modifierMouseUp(e), this.removeFromActiveTouchEvents(e);
          }
          modifierPointerCancel(e) {
            super.modifierPointerCancel(e), this.removeFromActiveTouchEvents(e);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                horizontalGrowFactor: this.horizontalGrowFactor,
                verticalGrowFactor: this.verticalGrowFactor,
                includedXAxisIds: Array.from(this.includedXAxisMap.entries())
                  .filter((e) => e[1])
                  .map((e) => e[0]),
                includedYAxisIds: Array.from(this.includedYAxisMap.entries())
                  .filter((e) => e[1])
                  .map((e) => e[0]),
                excludedXAxisIds: Array.from(this.includedXAxisMap.entries())
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
                excludedYAxisIds: Array.from(this.includedYAxisMap.entries())
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
              };
            return Object.assign(e.options, t), e;
          }
          includeXAxis(e, t) {
            this.includedXAxisMap.set(e.id, t);
          }
          includeYAxis(e, t) {
            this.includedYAxisMap.set(e.id, t);
          }
          includeAllAxes() {
            this.includedXAxisMap.clear();
          }
          getIncludedXAxis() {
            return (0, n.getIncludedAxis)(
              this.parentSurface.xAxes.asArray(),
              this.includedXAxisMap
            );
          }
          getIncludedYAxis() {
            return (0, n.getIncludedAxis)(
              this.parentSurface.yAxes.asArray(),
              this.includedYAxisMap
            );
          }
          performZoom(e, t, i, r, s) {
            const a = r * t,
              n = s * i;
            [o.EXyDirection.XDirection, o.EXyDirection.XyDirection].includes(
              this.xyDirection
            ) &&
              this.getIncludedXAxis().forEach((t) => {
                this.growBy(e, t, a);
              }),
              [o.EXyDirection.YDirection, o.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedYAxis().forEach((t) => {
                  this.growBy(e, t, n);
                });
          }
          removeFromActiveTouchEvents(e) {
            this.activePointerEvents.delete(e.pointerId),
              this.activePointerEvents.size < 2 &&
                ((this.previousHorizontalTouchPointsDistance = void 0),
                (this.previousVerticalTouchPointsDistance = void 0));
          }
          performModifierAction(e) {
            const [{ mousePoint: t }, { mousePoint: i }] = Array.from(
                this.activePointerEvents.values()
              ),
              r = Math.abs(t.x - i.x),
              s = Math.abs(t.y - i.y),
              o = this.getMiddlePoint(t, i),
              a = (0, l.translateFromCanvasToSeriesViewRect)(
                o,
                this.parentSurface.seriesViewRect
              );
            if (
              a &&
              void 0 !== this.previousHorizontalTouchPointsDistance &&
              void 0 !== this.previousVerticalTouchPointsDistance
            ) {
              const e = this.previousHorizontalTouchPointsDistance - r,
                t = this.previousVerticalTouchPointsDistance - s;
              this.performZoom(
                a,
                e,
                t,
                this.horizontalGrowFactor,
                this.verticalGrowFactor
              );
            }
            (this.previousHorizontalTouchPointsDistance = r),
              (this.previousVerticalTouchPointsDistance = s);
          }
          getIsActionAllowed(e) {
            return (
              ("touch" === e.pointerType || "pen" === e.pointerType) &&
              this.activePointerEvents.size >= 2
            );
          }
        }
        t.PinchZoomModifier = h;
      },
      78615: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PointerEventsMediatorModifier = void 0);
        const r = i(45921),
          s = i(89046),
          o = i(3214),
          a = i(11043),
          n = i(10581),
          l = i(57935),
          d = i(32873);
        class h extends s.ChartModifierBase2D {
          constructor(e) {
            var t, i, s, d;
            if (
              (super(e),
              (this.notifyOutEvent = !0),
              (this.notifyPositionUpdate = !1),
              (this.hoverChanged = new o.EventHandler()),
              (this.previousHoveredEntities = []),
              (this.mousePosition = l.EMousePosition.OutOfCanvas),
              (this.enableHoverProperty = !1),
              (this.hoverModeProperty = n.EHoverMode.AbsoluteTopmost),
              (this.enableHoverProperty =
                null !== (t = null == e ? void 0 : e.enableHover) &&
                void 0 !== t
                  ? t
                  : this.enableHoverProperty),
              (this.hoverModeProperty =
                null !== (i = null == e ? void 0 : e.hoverMode) && void 0 !== i
                  ? i
                  : this.hoverModeProperty),
              (this.notifyOutEvent =
                null !== (s = null == e ? void 0 : e.notifyOutEvent) &&
                void 0 !== s
                  ? s
                  : this.notifyOutEvent),
              (this.notifyPositionUpdate =
                null !== (d = null == e ? void 0 : e.notifyPositionUpdate) &&
                void 0 !== d
                  ? d
                  : this.notifyPositionUpdate),
              (null == e ? void 0 : e.onHover) &&
                ("string" == typeof e.onHover &&
                  (this.typeMap.set("onHover", e.onHover),
                  (e.onHover = (0, r.getFunction)(
                    a.EBaseType.OptionFunction,
                    e.onHover
                  ))),
                this.hoverChanged.subscribe(null == e ? void 0 : e.onHover)),
              null == e ? void 0 : e.targets)
            )
              if (Array.isArray(e.targets) && "string" != typeof e.targets[0])
                this.targets = e.targets;
              else if (
                Array.isArray(e.targets) &&
                "string" == typeof e.targets[0]
              ) {
                const t = e.targets;
                (this.includeList = new Map(t.map((e) => [e, !0]))),
                  (this.targetsSelector = () =>
                    this.getAllTargets().filter((e) =>
                      this.includeList.get(e.id)
                    ));
              } else
                "string" == typeof e.targets
                  ? (this.typeMap.set("targetsSelector", e.targets),
                    (e.targets = (0, r.getFunction)(
                      a.EBaseType.OptionFunction,
                      e.targets
                    )),
                    (this.targetsSelector = e.targets))
                  : (this.targetsSelector = e.targets);
          }
          get hoverMode() {
            return this.hoverModeProperty;
          }
          set hoverMode(e) {
            this.hoverModeProperty = e;
          }
          toJSON() {
            var e;
            const t = super.toJSON().options,
              i = {
                hoverMode: this.hoverMode,
                enableHover: this.enableHoverProperty,
                notifyOutEvent: this.notifyOutEvent,
                notifyPositionUpdate: this.notifyPositionUpdate,
                onHover: this.typeMap.get("onHover"),
                targets: this.includeList
                  ? Array.from(this.includeList)
                      .filter(([e, t]) => t)
                      .map(([e]) => e)
                  : this.typeMap.get("targetsSelector") ||
                    (null === (e = this.targets) || void 0 === e
                      ? void 0
                      : e.map(({ id: e }) => e)),
              };
            return {
              type: this.type,
              options: Object.assign(Object.assign({}, t), i),
            };
          }
          modifierMouseMove(e) {
            if (this.parentSurface.isSubSurface && !e.isActiveSubChartEvent)
              return;
            let t;
            this.activePointerEvents.set(e.pointerId, e),
              super.modifierMouseMove(e),
              this.mousePoint
                ? ((t = (0, d.translateFromCanvasToSeriesViewRect)(
                    this.mousePoint,
                    this.parentSurface.seriesViewRect
                  )),
                  (this.mousePosition = t
                    ? l.EMousePosition.SeriesArea
                    : l.EMousePosition.AxisArea),
                  this.getIsActionAllowed(e) &&
                    this.enableHoverProperty &&
                    this.performHoverAction(e))
                : (this.mousePosition = l.EMousePosition.OutOfCanvas);
          }
          modifierMouseLeave(e) {
            if (
              (super.modifierMouseLeave(e),
              (this.mousePosition = l.EMousePosition.OutOfCanvas),
              this.enableHoverProperty)
            ) {
              const t = this.getIncludedTargets();
              let i = null,
                r = !1;
              for (let s = t.length - 1; s > -1; --s)
                (i = t[s]), this.performHoverOnEntity(i, e, r);
              this.previousHoveredEntities.length > 0 &&
                this.hoverChanged.raiseEvent({
                  sender: this,
                  mouseArgs: e,
                  hoveredEntities: [],
                  includedEntities: t,
                  unhoveredEntities: this.previousHoveredEntities,
                  previousHoveredEntities: this.previousHoveredEntities,
                }),
                (this.previousHoveredEntities = []);
            }
          }
          modifierPointerCancel(e) {
            this.modifierMouseLeave(e);
          }
          getIncludedTargets() {
            var e, t, i;
            return null !==
              (i =
                null !== (e = this.targets) && void 0 !== e
                  ? e
                  : null === (t = this.targetsSelector) || void 0 === t
                  ? void 0
                  : t.call(this, this)) && void 0 !== i
              ? i
              : this.getAllTargets();
          }
          performHoverAction(e) {
            const t = this.getIncludedTargets(),
              i = [],
              r = [];
            if (this.hoverMode === n.EHoverMode.TopmostIncluded) {
              for (let r = t.length - 1; r > -1; --r) {
                const s = t[r],
                  o = s.checkIsWithinBounds(e);
                if (o) {
                  i.push(s), this.performHoverOnEntity(s, e, o);
                  break;
                }
              }
              this.previousHoveredEntities.forEach((t) => {
                t !== i[0] && (r.push(t), this.performHoverOnEntity(t, e, !1));
              });
            } else if (this.hoverMode === n.EHoverMode.AbsoluteTopmost) {
              const s = this.getAllTargets();
              for (let r = s.length - 1; r > -1; --r) {
                const o = s[r],
                  a = o.checkIsWithinBounds(e);
                if (a) {
                  t.find((e) => e === o) &&
                    (i.push(o), this.performHoverOnEntity(o, e, a));
                  break;
                }
              }
              this.previousHoveredEntities.forEach((t) => {
                t !== i[0] && (r.push(t), this.performHoverOnEntity(t, e, !1));
              });
            } else if (this.hoverMode === n.EHoverMode.Multi)
              for (let s = t.length - 1; s > -1; --s) {
                const o = t[s],
                  a = o.checkIsWithinBounds(e),
                  n = o.isHovered;
                a
                  ? (i.push(o), this.performHoverOnEntity(o, e, a))
                  : n && (r.push(o), this.performHoverOnEntity(o, e, a));
              }
            const s =
                i.length > this.previousHoveredEntities.length ||
                (r.length && i.length === this.previousHoveredEntities.length),
              o = this.notifyOutEvent && r.length,
              a = this.notifyPositionUpdate && i.length;
            (s || a || o) &&
              this.hoverChanged.raiseEvent({
                sender: this,
                mouseArgs: e,
                hoveredEntities: i,
                previousHoveredEntities: this.previousHoveredEntities,
                includedEntities: t,
                unhoveredEntities: r,
              }),
              (this.previousHoveredEntities = i);
          }
          performHoverOnEntity(e, t, i) {
            e.hover({
              args: t,
              isHovered: i,
              notifyOutEvent: this.notifyOutEvent,
              notifyPositionUpdate: this.notifyPositionUpdate,
            });
          }
        }
        t.PointerEventsMediatorModifier = h;
      },
      63903: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.updateRolloverModifierProps =
            t.calcTooltipPositions =
            t.calcTooltipProps =
            t.RolloverModifier =
            t.TOOLTIP_SPACING =
              void 0);
        const r = i(45921),
          s = i(11043),
          o = i(89955),
          a = i(57935),
          n = i(5337),
          l = i(58345),
          d = i(32873),
          h = i(84392),
          u = i(31306),
          c = i(28677),
          p = i(69302),
          g = i(66443),
          y = i(60915),
          f = i(14184),
          v = i(86127),
          m = i(89046),
          S = i(22486);
        t.TOOLTIP_SPACING = 4;
        class P extends m.ChartModifierBase2D {
          constructor(e) {
            var t, i, n, l, d, h, u, c, g, y;
            super(e),
              (this.type = o.EChart2DModifierType.Rollover),
              (this.tooltipLegendOffsetX = 0),
              (this.tooltipLegendOffsetY = 0),
              (this.snapToDataPoint = !1),
              (this.hitTestRadius = 0),
              (this.showRolloverLineProperty = !0),
              (this.showTooltipProperty = !0),
              (this.absoluteXCoord = 0),
              (this.mousePosition = a.EMousePosition.OutOfCanvas),
              (this.allowTooltipOverlappingProperty = !1),
              (this.includedSeriesMap = new Map()),
              (this.hitTestRenderableSeries =
                this.hitTestRenderableSeries.bind(this)),
              (this.placementDivIdProperty =
                null !== (t = null == e ? void 0 : e.placementDivId) &&
                void 0 !== t
                  ? t
                  : this.placementDivIdProperty),
              (this.rolloverLineAnnotation = this.createLine(e)),
              (null == e ? void 0 : e.tooltipLegendTemplate) &&
                "string" == typeof e.tooltipLegendTemplate &&
                (this.typeMap.set(
                  "tooltipLegendTemplate",
                  e.tooltipLegendTemplate
                ),
                (e.tooltipLegendTemplate = (0, r.getFunction)(
                  s.EBaseType.OptionFunction,
                  e.tooltipLegendTemplate
                ))),
              (this.tooltipLegendTemplate =
                null !== (i = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== i
                  ? i
                  : this.tooltipLegendTemplate),
              (this.tooltipLegendOffsetX =
                null !== (n = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== n
                  ? n
                  : this.tooltipLegendOffsetX),
              (this.tooltipLegendOffsetY =
                null !== (l = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== l
                  ? l
                  : this.tooltipLegendOffsetY),
              (null == e ? void 0 : e.tooltipDataTemplate) &&
                "string" == typeof e.tooltipDataTemplate &&
                (this.typeMap.set("tooltipDataTemplate", e.tooltipDataTemplate),
                (e.tooltipDataTemplate = (0, r.getFunction)(
                  s.EBaseType.OptionFunction,
                  e.tooltipDataTemplate
                ))),
              (this.tooltipDataTemplateProperty =
                null !== (d = null == e ? void 0 : e.tooltipDataTemplate) &&
                void 0 !== d
                  ? d
                  : this.tooltipDataTemplateProperty),
              (this.showRolloverLineProperty =
                null !== (h = null == e ? void 0 : e.showRolloverLine) &&
                void 0 !== h
                  ? h
                  : this.showRolloverLineProperty),
              (this.showTooltipProperty =
                null !== (u = null == e ? void 0 : e.showTooltip) &&
                void 0 !== u
                  ? u
                  : this.showTooltipProperty),
              (this.legendAnnotation = new p.RolloverLegendSvgAnnotation({
                tooltipLegendTemplate: this.tooltipLegendTemplate,
                tooltipLegendOffsetX: this.tooltipLegendOffsetX,
                tooltipLegendOffsetY: this.tooltipLegendOffsetY,
                xAxisId: this.xAxisId,
                yAxisId: this.yAxisId,
              })),
              (this.allowTooltipOverlappingProperty =
                null !== (c = null == e ? void 0 : e.allowTooltipOverlapping) &&
                void 0 !== c
                  ? c
                  : this.allowTooltipOverlappingProperty),
              (this.snapToDataPoint =
                null !== (g = null == e ? void 0 : e.snapToDataPoint) &&
                void 0 !== g
                  ? g
                  : this.snapToDataPoint),
              (this.hitTestRadius =
                null !== (y = null == e ? void 0 : e.hitTestRadius) &&
                void 0 !== y
                  ? y
                  : this.hitTestRadius);
          }
          createLine(e) {
            var t, i, r;
            return new c.LineAnnotation({
              xCoordinateMode: u.ECoordinateMode.Pixel,
              yCoordinateMode: u.ECoordinateMode.Pixel,
              strokeDashArray:
                null == e ? void 0 : e.rolloverLineStrokeDashArray,
              strokeThickness:
                null !==
                  (t = null == e ? void 0 : e.rolloverLineStrokeThickness) &&
                void 0 !== t
                  ? t
                  : 2,
              stroke:
                null !== (i = null == e ? void 0 : e.rolloverLineStroke) &&
                void 0 !== i
                  ? i
                  : f.SciChartSurfaceBase.DEFAULT_THEME.cursorLineBrush,
              xAxisId: this.xAxisId,
              yAxisId: this.yAxisId,
              showLabel:
                null !== (r = null == e ? void 0 : e.showAxisLabel) &&
                void 0 !== r &&
                r,
            });
          }
          applyTheme(e) {
            if (this.parentSurface) {
              const t = this.parentSurface.previousThemeProvider;
              this.rolloverLineAnnotation.stroke === t.cursorLineBrush &&
                (this.rolloverLineAnnotation.stroke = e.cursorLineBrush);
            }
          }
          get rolloverLineStroke() {
            return this.rolloverLineAnnotation.stroke;
          }
          set rolloverLineStroke(e) {
            (this.rolloverLineAnnotation.stroke = e),
              this.notifyPropertyChanged(S.PROPERTY.STROKE);
          }
          get rolloverLineStrokeThickness() {
            return this.rolloverLineAnnotation.strokeThickness;
          }
          set rolloverLineStrokeThickness(e) {
            (this.rolloverLineAnnotation.strokeThickness = e),
              this.notifyPropertyChanged(S.PROPERTY.STROKE_THICKNESS);
          }
          get rolloverLineStrokeDashArray() {
            return this.rolloverLineAnnotation.strokeDashArray;
          }
          set rolloverLineStrokeDashArray(e) {
            (this.rolloverLineAnnotation.strokeDashArray = e),
              this.notifyPropertyChanged(S.PROPERTY.STROKE_DASH_ARRAY);
          }
          get showRolloverLine() {
            return this.showRolloverLineProperty;
          }
          set showRolloverLine(e) {
            (this.showRolloverLineProperty = e),
              this.notifyPropertyChanged(S.PROPERTY.SHOW_ROLLOVER_LINE);
          }
          get tooltipDataTemplate() {
            return this.tooltipDataTemplateProperty;
          }
          set tooltipDataTemplate(e) {
            (this.tooltipDataTemplateProperty = e),
              this.notifyPropertyChanged(S.PROPERTY.TOOLTIP_DATA_TEMPLATE);
          }
          get showTooltip() {
            return this.showTooltipProperty;
          }
          set showTooltip(e) {
            (this.showTooltipProperty = e),
              this.notifyPropertyChanged(S.PROPERTY.SHOW_TOOLTIP);
          }
          get allowTooltipOverlapping() {
            return this.allowTooltipOverlappingProperty;
          }
          set allowTooltipOverlapping(e) {
            (this.allowTooltipOverlappingProperty = e),
              this.notifyPropertyChanged(S.PROPERTY.ALLOW_TOOLTIP_OVERLAPPING);
          }
          onAttach() {
            super.onAttach(),
              this.addLineAnnotationToSurface(),
              this.parentSurface.modifierAnnotations.add(this.legendAnnotation),
              this.getIncludedRenderableSeries().forEach((e) =>
                this.addSeriesAnnotationsToParentSurface(e)
              );
          }
          addLineAnnotationToSurface() {
            this.parentSurface.modifierAnnotations.add(
              this.rolloverLineAnnotation
            );
          }
          onDetach() {
            super.onDetach(),
              this.parentSurface.modifierAnnotations.remove(
                this.rolloverLineAnnotation,
                !0
              ),
              this.parentSurface.modifierAnnotations.remove(
                this.legendAnnotation
              ),
              this.getIncludedRenderableSeries().forEach((e) =>
                this.removeSeriesAnnotationsFromParentSurface(e)
              );
          }
          onAttachSeries(e) {
            super.onAttachSeries(e),
              this.parentSurface.renderableSeries.size(),
              this.addSeriesAnnotationsToParentSurface(e),
              (this.legendAnnotation.seriesInfos = this.getSeriesInfos());
          }
          onDetachSeries(e) {
            super.onDetachSeries(e),
              this.removeSeriesAnnotationsFromParentSurface(e);
          }
          modifierMouseMove(e) {
            if (this.parentSurface.isSubSurface && !e.isActiveSubChartEvent)
              return;
            let t;
            this.activePointerEvents.set(e.pointerId, e),
              super.modifierMouseMove(e),
              this.mousePoint
                ? ((t = (0, d.translateFromCanvasToSeriesViewRect)(
                    this.mousePoint,
                    this.parentSurface.seriesViewRect
                  )),
                  (this.mousePosition = t
                    ? a.EMousePosition.SeriesArea
                    : a.EMousePosition.AxisArea))
                : (this.mousePosition = a.EMousePosition.OutOfCanvas),
              this.getIsActionAllowed(e) && this.update();
          }
          modifierMouseLeave(e) {
            super.modifierMouseLeave(e),
              (this.mousePosition = a.EMousePosition.OutOfCanvas),
              this.update();
          }
          onParentSurfaceRendered() {
            this.update();
          }
          includeSeries(e, t) {
            var i;
            ((void 0 === this.includedSeriesMap.get(e) && !t) ||
              (!0 === this.includedSeriesMap.get(e) && !t) ||
              (!1 === this.includedSeriesMap.get(e) && t)) &&
              (this.includedSeriesMap.set(e, t),
              this.isAttached &&
                (!0 === t && this.addSeriesAnnotationsToParentSurface(e),
                !1 === t && this.removeSeriesAnnotationsFromParentSurface(e),
                this.parentSurface &&
                  (this.legendAnnotation.seriesInfos = this.getSeriesInfos()),
                null === (i = this.parentSurface) ||
                  void 0 === i ||
                  i.invalidateElement()));
          }
          getIncludedRenderableSeries() {
            const e = this.parentSurface.renderableSeries
                .asArray()
                .filter(
                  (e) =>
                    !e.isStacked &&
                    e.isVisible &&
                    e.rolloverModifierProps.showRollover &&
                    this.testIsIncludedSeries(e)
                ),
              t = this.parentSurface.renderableSeries
                .asArray()
                .filter((e) => e.isStacked),
              i = e;
            return (
              t.forEach((e) => {
                e.getVisibleSeries().forEach((e) => {
                  e.rolloverModifierProps.showRollover &&
                    this.testIsIncludedSeries(e) &&
                    i.push(e);
                });
              }),
              i
            );
          }
          hitTestRenderableSeries(e, t) {
            if (t)
              return this.hitTestRadius <= 0
                ? e.hitTestProvider.hitTestXSlice(t.x, t.y)
                : e.hitTestProvider.hitTestDataPoint(
                    t.x,
                    t.y,
                    this.hitTestRadius
                  );
          }
          getMousePosition() {
            return this.mousePosition;
          }
          toJSON() {
            var e, t;
            const i = super.toJSON(),
              r = {
                snapToDataPoint: this.snapToDataPoint,
                placementDivId: this.placementDivId,
                hitTestRadius: this.hitTestRadius,
                allowTooltipOverlapping: this.allowTooltipOverlapping,
                rolloverLineStrokeDashArray: this.rolloverLineStrokeDashArray,
                rolloverLineStroke: this.rolloverLineStroke,
                rolloverLineStrokeThickness: this.rolloverLineStrokeThickness,
                showRolloverLine: this.showRolloverLine,
                showTooltip: this.showTooltip,
                showAxisLabel:
                  null !==
                    (t =
                      null === (e = this.rolloverLineAnnotation) || void 0 === e
                        ? void 0
                        : e.showLabel) &&
                  void 0 !== t &&
                  t,
                tooltipDataTemplate: this.typeMap.get("tooltipDataTemplate"),
                tooltipLegendOffsetX: this.tooltipLegendOffsetX,
                tooltipLegendOffsetY: this.tooltipLegendOffsetY,
                tooltipLegendTemplate: this.typeMap.get(
                  "tooltipLegendTemplate"
                ),
              };
            return Object.assign(i.options, r), i;
          }
          CalculateTooltipPositions(e, i, r, s, o, a = !1) {
            return (0, t.calcTooltipPositions)(e, i, r, s, o, a);
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              e === S.PROPERTY.X_AXIS_ID &&
                ((this.rolloverLineAnnotation.xAxisId = this.xAxisId),
                (this.legendAnnotation.xAxisId = this.xAxisId)),
              e === S.PROPERTY.Y_AXIS_ID &&
                ((this.rolloverLineAnnotation.yAxisId = this.yAxisId),
                (this.legendAnnotation.yAxisId = this.yAxisId));
          }
          isVerticalChart() {
            var e, t;
            const i =
              (null === (e = this.parentSurface) || void 0 === e
                ? void 0
                : e.getXAxisById(this.xAxisId)) ||
              (null === (t = this.parentSurface) || void 0 === t
                ? void 0
                : t.xAxes.get(0));
            return !!i && i.isVerticalChart;
          }
          removeSeriesAnnotationsFromParentSurface(e) {
            this.parentSurface &&
              (e.isStacked
                ? e.asArray().forEach((e) => {
                    this.parentSurface.modifierAnnotations.remove(
                      this.getRolloverProps(e).marker
                    ),
                      this.parentSurface.modifierAnnotations.remove(
                        this.getRolloverProps(e).tooltip
                      ),
                      this.getRolloverProps(e).delete();
                  })
                : (this.parentSurface.modifierAnnotations.remove(
                    this.getRolloverProps(e).marker
                  ),
                  this.parentSurface.modifierAnnotations.remove(
                    this.getRolloverProps(e).tooltip
                  ),
                  this.getRolloverProps(e).delete(),
                  e.type === n.ESeriesType.BandSeries &&
                    (this.parentSurface.modifierAnnotations.remove(
                      this.getRolloverProps1(e).marker
                    ),
                    this.parentSurface.modifierAnnotations.remove(
                      this.getRolloverProps1(e).tooltip
                    ),
                    this.getRolloverProps1(e).delete())));
          }
          addSeriesAnnotationsToParentSurface(e) {
            if (
              !this.parentSurface ||
              e.type === n.ESeriesType.StackedMountainCollection ||
              e.type === n.ESeriesType.StackedColumnCollection
            )
              return;
            (this.getRolloverProps(e).rolloverModifier = this),
              C(
                e,
                this.getRolloverProps(e),
                this.getRolloverProps1(e),
                this.placementDivIdProperty
              );
            const t = this.getRolloverProps(e).marker;
            this.parentSurface.modifierAnnotations.contains(t) ||
              (this.parentSurface.modifierAnnotations.add(
                this.getRolloverProps(e).marker
              ),
              this.parentSurface.modifierAnnotations.add(
                this.getRolloverProps(e).tooltip
              ),
              e.type === n.ESeriesType.BandSeries &&
                ((this.getRolloverProps1(e).rolloverModifier = this),
                this.parentSurface.modifierAnnotations.add(
                  this.getRolloverProps1(e).marker
                ),
                this.parentSurface.modifierAnnotations.add(
                  this.getRolloverProps1(e).tooltip
                )));
          }
          getRolloverProps(e) {
            return e.rolloverModifierProps;
          }
          getRolloverProps1(e) {
            return e.rolloverModifierProps1;
          }
          update() {
            this.updateLine(),
              this.updateSeriesAnnotations(),
              this.tooltipLegendTemplate &&
                (this.legendAnnotation.seriesInfos = this.getSeriesInfos());
          }
          updateLine() {
            if (this.mousePosition === a.EMousePosition.SeriesArea)
              if (this.showRolloverLineProperty)
                if (this.snapToDataPoint) {
                  const e = this.getIncludedRenderableSeries()[0];
                  if (e) {
                    const t = this.hitTestRenderableSeries(e, this.mousePoint);
                    if (t && t.isWithinDataBounds) {
                      this.rolloverLineAnnotation.isHidden = !1;
                      const e = (0, d.translateToNotScaled)(t.xCoord);
                      (this.rolloverLineAnnotation.x1 = e),
                        (this.rolloverLineAnnotation.x2 = e),
                        (this.rolloverLineAnnotation.y1 = 0),
                        (this.rolloverLineAnnotation.y2 = this.isVerticalChart()
                          ? (0, d.translateToNotScaled)(
                              this.parentSurface.seriesViewRect.right
                            )
                          : (0, d.translateToNotScaled)(
                              this.parentSurface.seriesViewRect.bottom
                            ));
                    } else this.rolloverLineAnnotation.isHidden = !0;
                  } else this.rolloverLineAnnotation.isHidden = !0;
                } else {
                  this.rolloverLineAnnotation.isHidden = !1;
                  const e = (0, d.translateFromCanvasToSeriesViewRect)(
                    this.mousePoint,
                    this.parentSurface.seriesViewRect
                  );
                  if (e) {
                    const t = (0, d.translateToNotScaled)(e.x),
                      i = (0, d.translateToNotScaled)(e.y);
                    this.isVerticalChart()
                      ? ((this.rolloverLineAnnotation.x1 = i),
                        (this.rolloverLineAnnotation.x2 = i),
                        (this.rolloverLineAnnotation.y1 = 0),
                        (this.rolloverLineAnnotation.y2 = (0,
                        d.translateToNotScaled)(
                          this.parentSurface.seriesViewRect.right
                        )))
                      : ((this.rolloverLineAnnotation.x1 = t),
                        (this.rolloverLineAnnotation.x2 = t),
                        (this.rolloverLineAnnotation.y1 = 0),
                        (this.rolloverLineAnnotation.y2 = (0,
                        d.translateToNotScaled)(
                          this.parentSurface.seriesViewRect.bottom
                        )));
                  }
                }
              else this.rolloverLineAnnotation.isHidden = !0;
            else this.rolloverLineAnnotation.isHidden = !0;
          }
          updateSeriesAnnotations() {
            const e = this.getIncludedRenderableSeries();
            if (
              (e.forEach((e) => {
                const t = this.getRolloverProps(e);
                t.marker || this.addSeriesAnnotationsToParentSurface(e),
                  t.marker.suspendInvalidate(),
                  t.tooltip.suspendInvalidate(),
                  (t.marker.isHidden = !0),
                  (t.tooltip.isHidden = !0),
                  (t.tooltip.x1 = void 0),
                  (t.tooltip.y1 = void 0),
                  e.type === n.ESeriesType.BandSeries &&
                    (t.marker.suspendInvalidate(),
                    t.tooltip.suspendInvalidate(),
                    (t.marker.isHidden = !0),
                    (t.tooltip.isHidden = !0),
                    (t.tooltip.x1 = void 0),
                    (t.tooltip.y1 = void 0));
              }),
              this.mousePosition !== a.EMousePosition.SeriesArea)
            )
              return void e.forEach((e) => {
                const t = this.getRolloverProps(e);
                t.marker.resumeInvalidate(),
                  t.tooltip.resumeInvalidate(),
                  e.type === n.ESeriesType.BandSeries &&
                    (this.getRolloverProps1(e).marker.resumeInvalidate(),
                    this.getRolloverProps1(e).tooltip.resumeInvalidate());
              });
            const i = [],
              r = this.isVerticalChart()
                ? this.parentSurface.seriesViewRect.width
                : this.parentSurface.seriesViewRect.height;
            let s;
            e.forEach((e, s) => {
              const o = this.hitTestRenderableSeries(e, this.mousePoint);
              if (o) {
                if (
                  ((e.type !== n.ESeriesType.StackedColumnSeries &&
                    0 === this.hitTestRadius) ||
                    o.isHit) &&
                  0 <= o.yCoord &&
                  o.yCoord <= r
                ) {
                  this.absoluteXCoord = this.isVerticalChart()
                    ? o.yCoord
                    : o.xCoord;
                  const r = this.isVerticalChart() ? o.xCoord : o.yCoord,
                    a = (0, t.calcTooltipProps)(
                      s,
                      e,
                      this.getRolloverProps(e),
                      this.parentSurface.seriesViewRect,
                      o.xValue,
                      o.yValue,
                      this.absoluteXCoord,
                      r,
                      o,
                      v.DpiHelper.PIXEL_RATIO,
                      !1,
                      this.isVerticalChart()
                    );
                  a && i.push(a);
                }
                if (
                  e.type === n.ESeriesType.BandSeries &&
                  0 <= o.y1Coord &&
                  o.y1Coord <= r
                ) {
                  const r = this.isVerticalChart() ? o.y1Coord : o.xCoord,
                    a = this.isVerticalChart() ? o.xCoord : o.y1Coord,
                    n = (0, t.calcTooltipProps)(
                      s,
                      e,
                      this.getRolloverProps1(e),
                      this.parentSurface.seriesViewRect,
                      o.xValue,
                      o.y1Value,
                      r,
                      a,
                      o,
                      v.DpiHelper.PIXEL_RATIO,
                      !0,
                      this.isVerticalChart()
                    );
                  n && i.push(n);
                }
              }
            }),
              (s = this.isVerticalChart()
                ? i.sort((e, t) =>
                    e.xCoord > t.xCoord ? 1 : t.xCoord > e.xCoord ? -1 : 0
                  )
                : i.sort((e, t) =>
                    e.yCoord > t.yCoord ? 1 : t.yCoord > e.yCoord ? -1 : 0
                  )),
              this.CalculateTooltipPositions(
                s,
                this.allowTooltipOverlapping,
                t.TOOLTIP_SPACING * v.DpiHelper.PIXEL_RATIO,
                this.parentSurface.seriesViewRect,
                v.DpiHelper.PIXEL_RATIO,
                this.isVerticalChart()
              ).forEach((i) => {
                const r = e[i.index],
                  s = this.showTooltip && i.seriesInfo.isHit,
                  o = i.seriesInfo.isHit;
                i.isY1
                  ? (0, t.updateRolloverModifierProps)(
                      this.getRolloverProps1(r),
                      r,
                      i,
                      s,
                      o,
                      this.placementDivId
                    )
                  : (0, t.updateRolloverModifierProps)(
                      this.getRolloverProps(r),
                      r,
                      i,
                      s,
                      o,
                      this.placementDivId
                    );
              }),
              e.forEach((e) => {
                this.getRolloverProps(e).marker.resumeInvalidate(),
                  this.getRolloverProps(e).tooltip.resumeInvalidate(),
                  e.type === n.ESeriesType.BandSeries &&
                    (this.getRolloverProps1(e).marker.resumeInvalidate(),
                    this.getRolloverProps1(e).tooltip.resumeInvalidate());
              });
          }
          testIsIncludedSeries(e) {
            return !1 !== this.includedSeriesMap.get(e);
          }
          getSeriesInfos() {
            return this.getIncludedRenderableSeries()
              .map((e) => {
                const t = this.hitTestRenderableSeries(e, this.mousePoint);
                if (t) return e.getSeriesInfo(t);
              })
              .filter((e) => void 0 !== e);
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            var t;
            this.placementDivIdProperty !== e &&
              ((this.placementDivIdProperty = e),
              null === (t = this.parentSurface) ||
                void 0 === t ||
                t.renderableSeries.asArray().forEach((e) => {
                  (this.getRolloverProps(e).tooltip.placementDivId =
                    this.placementDivIdProperty),
                    (this.getRolloverProps1(e).tooltip.placementDivId =
                      this.placementDivIdProperty);
                }));
          }
        }
        (t.RolloverModifier = P),
          (t.calcTooltipProps = (
            e,
            t,
            i,
            r,
            s,
            o,
            a,
            n,
            l,
            d,
            h = !1,
            u = !1
          ) => {
            const c = t.getSeriesInfo(l),
              p = i.tooltip.width,
              g = p * d,
              y = i.tooltip.height,
              f = y * d,
              v = n,
              m = r.height - n,
              S = 5 * d,
              P = r.width - a < g ? -p : 5;
            let C = u ? S : -y / 2;
            return (
              u
                ? m < f + S && (C = ((f + S) / d) * -1)
                : v < f / 2
                ? (C = -v / d)
                : m < f / 2 && (C = -(f - m) / d),
              {
                index: e,
                isY1: h,
                xValue: s,
                yValue: o,
                xCoord: a,
                yCoord: n,
                hitTestPointValues: l.hitTestPointValues,
                isCategoryAxis: l.isCategoryAxis,
                xCoordShift: P,
                yCoordShift: C,
                height: f,
                width: g,
                seriesInfo: c,
              }
            );
          }),
          (t.calcTooltipPositions = (e, t, i, r, s, o = !1) => {
            const a = (0, l.getTooltipPositionProperties)(o);
            o &&
              e.forEach((e) => {
                const t = e.width / 2 / s;
                e.xCoord > t && (e[a.shiftPropertyName] = -e.width / 2 / s);
              });
            const n = (0, l.checkHasOverlap)(e, i, s, a),
              d = e.length;
            if (!t && d >= 2 && n) {
              const t = (0, l.spreadTooltips)(e, s, a, i, r);
              e.forEach((e) => {
                e[a.shiftPropertyName] = t.get(e.index);
              });
            }
            return e;
          });
        const C = (e, t, i, r) => {
          var s, o, a, l;
          if (
            (t.marker ||
              ((t.marker = new g.RolloverMarkerSvgAnnotation(t)),
              (t.marker.xAxisId = e.xAxisId),
              (t.marker.yAxisId = e.yAxisId)),
            t.tooltip ||
              ((t.tooltipTitle =
                null !==
                  (o =
                    null !== (s = t.tooltipTitle) && void 0 !== s
                      ? s
                      : e.getDataSeriesName()) && void 0 !== o
                  ? o
                  : ""),
              (t.tooltipColor = t.tooltipColor),
              (t.shadowColor = e.parentSurface.themeProvider.shadowEffectColor),
              (t.tooltip = new y.RolloverTooltipSvgAnnotation(t, {
                seriesType: e.type,
                placementDivId: r,
              })),
              (t.tooltip.xAxisId = e.xAxisId),
              (t.tooltip.yAxisId = e.yAxisId)),
            e.type === n.ESeriesType.BandSeries)
          ) {
            const t = e;
            i.marker ||
              ((i.marker = new g.RolloverMarkerSvgAnnotation(i)),
              (i.marker.xAxisId = t.xAxisId),
              (i.marker.yAxisId = t.yAxisId)),
              i.tooltip ||
                ((i.tooltipTitle =
                  null !==
                    (l =
                      null !== (a = i.tooltipTitle) && void 0 !== a
                        ? a
                        : t.getDataSeriesName()) && void 0 !== l
                    ? l
                    : ""),
                (i.tooltipColor = i.tooltipColor),
                (i.tooltip = new y.RolloverTooltipSvgAnnotation(i, {
                  placementDivId: r,
                })),
                (i.tooltip.xAxisId = t.xAxisId),
                (i.tooltip.yAxisId = t.yAxisId));
          }
        };
        t.updateRolloverModifierProps = (e, t, i, r, s, o) => {
          (e.tooltip.seriesInfo = i.seriesInfo),
            i.isY1 && (e.tooltip.seriesInfo.isFirstSeries = !1),
            s &&
              ((e.marker.isHidden = !1),
              (e.marker.x1 = i.xValue),
              (e.marker.y1 = i.yValue),
              e.markerColor.startsWith(h.AUTO_COLOR) &&
                (e.markerColor = i.isY1 ? t.strokeY1 : t.stroke)),
            r
              ? ((e.tooltip.isHidden = !1),
                (e.tooltip.x1 = i.xValue),
                (e.tooltip.y1 = i.yValue),
                (e.tooltip.xCoordShift = i.xCoordShift),
                (e.tooltip.yCoordShift = i.yCoordShift),
                e.tooltipColor.startsWith(h.AUTO_COLOR) &&
                  (e.tooltipColor = i.isY1 ? t.strokeY1 : t.stroke))
              : o && e.tooltip.delete();
        };
      },
      18809: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getRubberBandRect = t.RubberBandXyZoomModifier = void 0);
        const r = i(10276),
          s = i(56744),
          o = i(75772),
          a = i(87459),
          n = i(89955),
          l = i(86699),
          d = i(14379),
          h = i(32873),
          u = i(90182),
          c = i(89046),
          p = i(22486);
        class g extends c.ChartModifierBase2D {
          constructor(e) {
            var t, i, s, o, a, l;
            super(e),
              (this.type = n.EChart2DModifierType.RubberBandXYZoom),
              (this.isAnimated = !0),
              (this.animationDuration = 400),
              (this.easingFunction = r.easing.outExpo),
              (this.isClicked = !1),
              (this.fillProperty = "#42b64933"),
              (this.strokeProperty = "#42b64977"),
              (this.strokeThicknessProperty = 2),
              (this.fill =
                null !== (t = null == e ? void 0 : e.fill) && void 0 !== t
                  ? t
                  : this.fillProperty),
              (this.stroke =
                null !== (i = null == e ? void 0 : e.stroke) && void 0 !== i
                  ? i
                  : this.strokeProperty),
              (this.strokeThickness =
                null !== (s = null == e ? void 0 : e.strokeThickness) &&
                void 0 !== s
                  ? s
                  : this.strokeThicknessProperty),
              (this.isAnimated =
                null === (o = null == e ? void 0 : e.isAnimated) ||
                void 0 === o ||
                o),
              (this.animationDuration =
                null !== (a = null == e ? void 0 : e.animationDuration) &&
                void 0 !== a
                  ? a
                  : 400),
              (null == e ? void 0 : e.easingFunction) &&
                "string" == typeof e.easingFunction &&
                (e.easingFunction = r.easing[e.easingFunction]),
              (this.easingFunction =
                null !== (l = null == e ? void 0 : e.easingFunction) &&
                void 0 !== l
                  ? l
                  : r.easing.outExpo);
          }
          applyTheme(e) {
            this.testPropertyChanged(p.PROPERTY.FILL) ||
              (this.fill = e.rubberBandFillBrush),
              this.testPropertyChanged(p.PROPERTY.STROKE) ||
                (this.stroke = e.rubberBandStrokeBrush);
          }
          onDetach() {
            super.onDetach(),
              (this.rubberBandRect = (0, s.deleteSafe)(this.rubberBandRect));
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), this.executeOn !== e.button))
              return;
            if (!this.isAttached)
              throw new Error(
                "Should not call RubberBandXyZoomModifier.modifierMouseDown if not attached"
              );
            this.parentSurface.setZoomState(d.EZoomState.UserZooming);
            const t = (0, h.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect
            );
            t && ((this.pointFrom = t), (this.isClicked = !0));
          }
          modifierMouseMove(e) {
            super.modifierMouseMove(e);
            const { seriesViewRect: t } = this.parentSurface;
            if (this.isClicked) {
              this.pointTo = (0, h.translateFromCanvasToSeriesViewRect)(
                a.Rect.clipPointToRect(e.mousePoint, t),
                t
              );
              const i = this.parentSurface.getCoordSvgTranslation(),
                {
                  x: r,
                  right: s,
                  y: o,
                  bottom: n,
                } = y(
                  this.pointFrom,
                  this.pointTo,
                  this.xyDirection,
                  this.parentSurface.seriesViewRect
                );
              (this.rubberBandRect.isHidden = !1),
                (this.rubberBandRect.x1 = (0, h.translateToNotScaled)(r + i.x)),
                (this.rubberBandRect.x2 = (0, h.translateToNotScaled)(s + i.x)),
                (this.rubberBandRect.y1 = (0, h.translateToNotScaled)(o + i.y)),
                (this.rubberBandRect.y2 = (0, h.translateToNotScaled)(n + i.y));
            }
          }
          modifierMouseUp(e) {
            if (
              (super.modifierMouseUp(e),
              this.executeOn === e.button && this.isClicked)
            ) {
              const { seriesViewRect: t } = this.parentSurface;
              this.pointTo = (0, h.translateFromCanvasToSeriesViewRect)(
                a.Rect.clipPointToRect(e.mousePoint, t),
                t
              );
              const {
                x: i,
                right: r,
                y: s,
                bottom: n,
              } = y(
                this.pointFrom,
                this.pointTo,
                this.xyDirection,
                this.parentSurface.seriesViewRect
              );
              (this.isClicked = !1),
                (this.rubberBandRect.isHidden = !0),
                this.calculateDraggedDistance() > g.MIN_DRAG_SENSITIVITY &&
                  this.performZoom(new o.Point(i, s), new o.Point(r, n));
            }
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.STROKE_THICKNESS);
          }
          get stroke() {
            return this.strokeProperty;
          }
          set stroke(e) {
            (this.strokeProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.STROKE);
          }
          get fill() {
            return this.fillProperty;
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.FILL);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                animationDuration: this.animationDuration,
                easingFunction: this.easingFunction.name,
                fill: this.fill,
                isAnimated: this.isAnimated,
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
              };
            return Object.assign(e.options, t), e;
          }
          delete() {
            (this.parentSurfaceProperty = void 0),
              (this.rubberBandRect = (0, s.deleteSafe)(this.rubberBandRect)),
              super.delete();
          }
          performZoom(e, t) {
            const i = [
                l.EXyDirection.XDirection,
                l.EXyDirection.XyDirection,
              ].includes(this.xyDirection),
              r = [
                l.EXyDirection.YDirection,
                l.EXyDirection.XyDirection,
              ].includes(this.xyDirection);
            this.parentSurface.xAxes.asArray().forEach((s) => {
              ((!s.isVerticalChart && i) || (s.isVerticalChart && r)) &&
                this.performZoomOnAxis(
                  s,
                  s.isVerticalChart ? e.y : e.x,
                  s.isVerticalChart ? t.y : t.x
                );
            }),
              this.parentSurface.yAxes.asArray().forEach((s) => {
                ((!s.isVerticalChart && r) || (s.isVerticalChart && i)) &&
                  this.performZoomOnAxis(
                    s,
                    s.isVerticalChart ? e.x : e.y,
                    s.isVerticalChart ? t.x : t.y
                  );
              });
          }
          performZoomOnAxis(e, t, i) {
            e.zoom(
              t,
              i,
              this.isAnimated ? this.animationDuration : 0,
              this.easingFunction
            );
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e), this.updateRubberBandRect();
          }
          calculateDraggedDistance() {
            const e = Math.pow(this.pointFrom.x - this.pointTo.x, 2),
              t = Math.pow(this.pointFrom.y - this.pointTo.y, 2);
            return Math.sqrt(e + t);
          }
          updateRubberBandRect() {
            this.parentSurface &&
              ((this.rubberBandRect = (0, s.deleteSafe)(this.rubberBandRect)),
              (this.rubberBandRect = new u.RubberBandSvgRect(
                this.parentSurface.domSvgContainer,
                this.fill,
                this.stroke,
                this.strokeThickness
              )));
          }
        }
        function y(e, t, i, r) {
          let s = t.x <= e.x ? t.x : e.x,
            n = t.x <= e.x ? e.x : t.x,
            d = t.y <= e.y ? t.y : e.y,
            h = t.y <= e.y ? e.y : t.y;
          return (
            i === l.EXyDirection.XDirection && ((d = 0), (h = r.height)),
            i === l.EXyDirection.YDirection && ((s = 0), (n = r.width)),
            a.Rect.createWithPoints(new o.Point(s, d), new o.Point(n, h))
          );
        }
        (t.RubberBandXyZoomModifier = g),
          (g.MIN_DRAG_SENSITIVITY = 5),
          (t.getRubberBandRect = y);
      },
      32545: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesSelectionModifier = void 0);
        const r = i(45921),
          s = i(3214),
          o = i(11043),
          a = i(89955),
          n = i(45215),
          l = i(7541),
          d = i(69570),
          h = i(9150),
          u = i(89046),
          c = i(22486);
        class p extends u.ChartModifierBase2D {
          constructor(e) {
            var t, i;
            if (
              (super(e),
              (this.type = a.EChart2DModifierType.SeriesSelection),
              (this.selectedSeries = []),
              (this.hoveredSeries = []),
              (this.selectionChanged = new s.EventHandler()),
              (this.hoverChanged = new s.EventHandler()),
              (this.hitTestRadiusProperty =
                (null == e ? void 0 : e.hitTestRadius) ||
                l.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS),
              (this.enableSelection =
                null === (t = null == e ? void 0 : e.enableSelection) ||
                void 0 === t ||
                t),
              (this.enableHover =
                null !== (i = null == e ? void 0 : e.enableHover) &&
                void 0 !== i &&
                i),
              null == e ? void 0 : e.onSelectionChanged)
            )
              if ("string" == typeof e.onSelectionChanged) {
                this.typeMap.set("onSelectionChanged", e.onSelectionChanged);
                const t = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.onSelectionChanged
                );
                this.selectionChanged.subscribe(t);
              } else this.selectionChanged.subscribe(e.onSelectionChanged);
            if (null == e ? void 0 : e.onHoverChanged)
              if ("string" == typeof e.onHoverChanged) {
                this.typeMap.set("onHoverChanged", e.onHoverChanged);
                const t = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.onHoverChanged
                );
                this.hoverChanged.subscribe(t);
              } else this.hoverChanged.subscribe(e.onHoverChanged);
            (this.updateSeriesSelected = this.updateSeriesSelected.bind(this)),
              (this.updateSeriesHovered = this.updateSeriesHovered.bind(this)),
              (this.getAllSeries = this.getAllSeries.bind(this));
          }
          get hitTestRadius() {
            return this.hitTestRadiusProperty;
          }
          set hitTestRadius(e) {
            (this.hitTestRadiusProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.HIT_TEST_RADIUS);
          }
          onAttach() {
            var e;
            super.onAttach(),
              (this.selectedSeries = []),
              null === (e = this.getAllSeries()) ||
                void 0 === e ||
                e.forEach((e) => this.onAttachSeries(e));
          }
          onDetach() {
            var e;
            super.onDetach(),
              (this.selectedSeries = []),
              null === (e = this.getAllSeries()) ||
                void 0 === e ||
                e.forEach((e) => this.onDetachSeries(e));
          }
          onAttachSeries(e) {
            super.onAttachSeries(e),
              e.isSelected && this.selectedSeries.push(e),
              e.selected.subscribe(this.updateSeriesSelected),
              e.isHovered && this.hoveredSeries.push(e),
              e.hovered.subscribe(this.updateSeriesHovered);
          }
          onDetachSeries(e) {
            super.onDetachSeries(e),
              (this.selectedSeries = (0, n.arrayRemove)(
                this.selectedSeries,
                e
              )),
              e.selected.unsubscribe(this.updateSeriesSelected),
              (this.hoveredSeries = (0, n.arrayRemove)(this.hoveredSeries, e)),
              e.hovered.unsubscribe(this.updateSeriesHovered);
          }
          modifierMouseDown(e) {
            if (
              (super.modifierMouseDown(e),
              this.executeOn === e.button && !this.isAttached)
            )
              throw new Error(
                "Should not call SeriesSelectionModifier.modifierMouseDown if not attached"
              );
          }
          modifierMouseMove(e) {
            var t;
            if ((super.modifierMouseMove(e), !this.enableHover)) return;
            const i = this.getAllSeries(),
              r = i.map((t) =>
                t.hitTestProvider.hitTest(
                  e.mousePoint.x,
                  e.mousePoint.y,
                  this.hitTestRadius
                )
              );
            try {
              this.preventReentrancy = !0;
              const e = [...this.hoveredSeries];
              let s;
              (this.hoveredSeries = []),
                (null == r ? void 0 : r.length) > 0
                  ? ((s = r
                      .filter((e) => e.isHit)
                      .sort(
                        (e, t) =>
                          e.getEuclideanDistance() - t.getEuclideanDistance()
                      )[0]),
                    s
                      ? ((s.associatedSeries.isHovered = !0),
                        this.hoveredSeries.push(s.associatedSeries))
                      : i.forEach((e) => (e.isHovered = !1)),
                    r
                      .filter((e) => e !== s)
                      .forEach((e) => {
                        (null == e ? void 0 : e.associatedSeries) &&
                          (e.associatedSeries.isHovered = !1);
                      }))
                  : i.forEach((e) => (e.isHovered = !1)),
                (e.length !== this.hoveredSeries.length ||
                  e.some((e) => !this.hoveredSeries.includes(e))) &&
                  (null === (t = this.hoverChanged) ||
                    void 0 === t ||
                    t.raiseEvent(
                      new d.HoveredChangedArgs(this, this.hoveredSeries, i, s)
                    ));
            } finally {
              this.preventReentrancy = !1;
            }
          }
          modifierMouseLeave(e) {
            var t;
            this.preventReentrancy = !0;
            const i = this.getAllSeries();
            [...this.hoveredSeries].length > 0 &&
              (i.forEach((e) => (e.isHovered = !1)),
              null === (t = this.hoverChanged) ||
                void 0 === t ||
                t.raiseEvent(
                  new d.HoveredChangedArgs(this, this.hoveredSeries, i, void 0)
                )),
              (this.preventReentrancy = !1);
          }
          modifierPointerCancel(e) {
            this.modifierMouseLeave(e);
          }
          modifierMouseUp(e) {
            var t;
            if ((super.modifierMouseUp(e), this.executeOn !== e.button)) return;
            if (!this.enableSelection) return;
            if (!this.isAttached)
              throw new Error(
                "Should not call SeriesSelectionModifier.modifierMouseUp if not attached"
              );
            const i = this.getAllSeries(),
              r = i.map((t) =>
                t.hitTestProvider.hitTest(
                  e.mousePoint.x,
                  e.mousePoint.y,
                  this.hitTestRadius
                )
              );
            try {
              let e;
              (this.preventReentrancy = !0),
                (this.selectedSeries = []),
                i.forEach((e) => (e.isSelected = !1)),
                (null == r ? void 0 : r.length) > 0 &&
                  ((e = r.sort(
                    (e, t) =>
                      e.getEuclideanDistance() - t.getEuclideanDistance()
                  )[0]),
                  e.isHit &&
                    ((e.associatedSeries.isSelected = !0),
                    this.selectedSeries.push(e.associatedSeries))),
                null === (t = this.selectionChanged) ||
                  void 0 === t ||
                  t.raiseEvent(
                    new h.SelectionChangedArgs(this, this.selectedSeries, i, e)
                  );
            } finally {
              this.preventReentrancy = !1;
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                enableHover: this.enableHover,
                enableSelection: this.enableSelection,
                hitTestRadius: this.hitTestRadius,
                onHoverChanged: this.typeMap.get("onHoverChanged"),
                onSelectionChanged: this.typeMap.get("onSelectionChanged"),
              };
            return Object.assign(e.options, t), e;
          }
          getAllSeries() {
            return super.getAllSeries().filter((e) => e.isVisible);
          }
          updateSeriesSelected(e) {
            var t, i;
            this.preventReentrancy ||
              (e.isSelected
                ? (this.selectedSeries.push(e.sourceSeries),
                  null === (t = this.selectionChanged) ||
                    void 0 === t ||
                    t.raiseEvent(
                      new h.SelectionChangedArgs(
                        this,
                        this.selectedSeries,
                        this.getAllSeries(),
                        void 0
                      )
                    ))
                : ((this.selectedSeries = (0, n.arrayRemove)(
                    this.selectedSeries,
                    e.sourceSeries
                  )),
                  null === (i = this.selectionChanged) ||
                    void 0 === i ||
                    i.raiseEvent(
                      new h.SelectionChangedArgs(
                        this,
                        this.selectedSeries,
                        this.getAllSeries(),
                        void 0
                      )
                    )));
          }
          updateSeriesHovered(e) {
            var t, i;
            this.preventReentrancy ||
              (e.hovered
                ? (this.hoveredSeries.push(e.sourceSeries),
                  null === (t = this.hoverChanged) ||
                    void 0 === t ||
                    t.raiseEvent(
                      new d.HoveredChangedArgs(
                        this,
                        this.hoveredSeries,
                        this.getAllSeries(),
                        void 0
                      )
                    ))
                : ((this.hoveredSeries = (0, n.arrayRemove)(
                    this.hoveredSeries,
                    e.sourceSeries
                  )),
                  null === (i = this.hoverChanged) ||
                    void 0 === i ||
                    i.raiseEvent(
                      new d.HoveredChangedArgs(
                        this,
                        this.hoveredSeries,
                        this.getAllSeries(),
                        void 0
                      )
                    )));
          }
        }
        t.SeriesSelectionModifier = p;
      },
      96408: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.VerticalSliceModifier = void 0);
        const r = i(63903),
          s = i(32873),
          o = i(75772),
          a = i(57935),
          n = i(54962),
          l = i(31306),
          d = i(5337),
          h = i(22486),
          u = i(89955);
        class c extends r.RolloverModifier {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.xCoordinateModeProperty = l.ECoordinateMode.Pixel),
              (this.isDraggableProperty = !1),
              (this.rmrsProps = new Map()),
              (this.rmrsProps1 = new Map()),
              (this.type = u.EChart2DModifierType.VerticalSlice),
              (this.x1Property = null !== (t = e.x1) && void 0 !== t ? t : 0),
              (this.mousePosition = a.EMousePosition.SeriesArea),
              (this.xCoordinateModeProperty =
                null !== (i = e.xCoordinateMode) && void 0 !== i
                  ? i
                  : this.xCoordinateModeProperty),
              (this.isDraggableProperty =
                null !== (r = e.isDraggable) && void 0 !== r
                  ? r
                  : this.isDraggableProperty),
              (this.lineSelectionColorProperty = e.lineSelectionColor),
              (this.rolloverLineAnnotation.isEditable =
                this.isDraggableProperty),
              (this.rolloverLineAnnotation.selectionBoxStroke =
                this.lineSelectionColor);
          }
          get x1() {
            return this.x1Property;
          }
          set x1(e) {
            e !== this.x1Property &&
              ((this.x1Property = e),
              this.notifyPropertyChanged(h.PROPERTY.X1));
          }
          get xCoordinateMode() {
            return this.xCoordinateModeProperty;
          }
          set xCoordinateMode(e) {
            e !== this.xCoordinateModeProperty &&
              ((this.xCoordinateModeProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.X_COORDINATE_MODE));
          }
          get verticalLine() {
            return this.rolloverLineAnnotation;
          }
          get isDraggable() {
            return this.isDraggableProperty;
          }
          set isDraggable(e) {
            e != this.isDraggableProperty &&
              ((this.isDraggableProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.IS_DRAGGABLE));
          }
          get lineSelectionColor() {
            return this.lineSelectionColorProperty;
          }
          set lineSelectionColor(e) {
            e !== this.lineSelectionColorProperty &&
              ((this.lineSelectionColorProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.LINE_SELECTION_COLOR));
          }
          modifierMouseMove(e) {
            if (this.rolloverLineAnnotation.isDraggingStarted) {
              this.mousePoint = new o.Point(e.mousePoint.x, e.mousePoint.y);
              const t = this.isVerticalChart()
                  ? e.mousePoint.y
                  : e.mousePoint.x,
                i = this.parentSurface.getXAxisById(this.xAxisId),
                r = i.getCurrentCoordinateCalculator();
              if (this.xCoordinateMode === l.ECoordinateMode.Pixel)
                this.x1 = Math.min(
                  Math.max(i.viewRect.left, (0, s.translateToNotScaled)(t)),
                  i.viewRect.right
                );
              else if (this.xCoordinateMode === l.ECoordinateMode.Relative) {
                const e =
                  (t -
                    (this.isVerticalChart()
                      ? i.viewRect.top
                      : i.viewRect.left)) /
                  r.viewportDimension;
                this.x1 = Math.min(Math.max(0, e), 1);
              } else {
                const e = this.isVerticalChart()
                    ? (0, s.translateFromCanvasToSeriesViewRectY)(
                        t,
                        this.parentSurface.seriesViewRect
                      )
                    : (0, s.translateFromCanvasToSeriesViewRectX)(
                        t,
                        this.parentSurface.seriesViewRect
                      ),
                  i = r.getDataValue(e);
                isNaN(i) || (this.x1 = i);
              }
              this.update();
            }
          }
          modifierMouseLeave(e) {}
          toJSON() {
            const e = super.toJSON(),
              t = {
                x1: this.x1,
                xCoordinateMode: this.xCoordinateMode,
                isDraggable: this.isDraggable,
                lineSelectionColor: this.lineSelectionColor,
              };
            return Object.assign(e.options, t), e;
          }
          getRolloverProps(e) {
            return this.rmrsProps.get(e);
          }
          getRolloverProps1(e) {
            return this.rmrsProps.get(e);
          }
          removeSeriesAnnotationsFromParentSurface(e) {
            super.removeSeriesAnnotationsFromParentSurface(e),
              this.rmrsProps.get(e).delete(),
              this.rmrsProps.delete(e),
              e.type === d.ESeriesType.BandSeries &&
                (this.rmrsProps1.get(e).delete(), this.rmrsProps1.delete(e));
          }
          addSeriesAnnotationsToParentSurface(e) {
            const t = new n.RolloverModifierRenderableSeriesProps(e, !1);
            if (
              (n.RolloverModifierRenderableSeriesProps.copy(
                e.rolloverModifierProps,
                t
              ),
              this.rmrsProps.set(e, t),
              e.type === d.ESeriesType.BandSeries)
            ) {
              const t = new n.RolloverModifierRenderableSeriesProps(e, !1);
              n.RolloverModifierRenderableSeriesProps.copy(
                e.rolloverModifierProps1,
                t
              ),
                this.rmrsProps1.set(e, t);
            }
            super.addSeriesAnnotationsToParentSurface(e);
          }
          createLine(e) {
            const t = super.createLine(e);
            return (t.annotationsGripsRadius = 0), t;
          }
          update() {
            this.calculateXPosition(),
              this.updateLine(),
              this.updateSeriesAnnotations(),
              Array.from(this.rmrsProps.values()).forEach((e) => {
                (e.renderableSeries.isVisible && e.showRollover) ||
                  ((e.tooltip.isHidden = !0), (e.marker.isHidden = !0));
              }),
              this.tooltipLegendTemplate &&
                (this.legendAnnotation.seriesInfos = this.getSeriesInfos());
          }
          notifyPropertyChanged(e) {
            switch ((super.notifyPropertyChanged(e), e)) {
              case h.PROPERTY.X1:
              case h.PROPERTY.X_COORDINATE_MODE:
                this.calculateXPosition();
                break;
              case h.PROPERTY.IS_DRAGGABLE:
                this.rolloverLineAnnotation.isEditable =
                  this.isDraggableProperty;
            }
          }
          calculateXPosition() {
            const e = this.parentSurface.getXAxisById(this.xAxisId),
              t = this.isVerticalChart();
            if (e) {
              const i = e.getCurrentCoordinateCalculator();
              let r = this.rolloverLineAnnotation.getCoordinate(
                this.x1Property,
                i,
                this.xCoordinateModeProperty
              );
              (this.xCoordinateMode !== l.ECoordinateMode.Relative &&
                this.xCoordinateMode !== l.ECoordinateMode.DataValue) ||
                (r += t ? e.viewRect.top : e.viewRect.left);
              const s = t
                ? this.parentSurface.seriesViewRect.width / 2
                : this.parentSurface.seriesViewRect.height / 2;
              this.mousePoint = t ? new o.Point(s, r) : new o.Point(r, s);
            }
          }
        }
        t.VerticalSliceModifier = c;
      },
      9809: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XAxisDragModifier = void 0);
        const r = i(14278),
          s = i(7980),
          o = i(32873),
          a = i(57397),
          n = i(89046),
          l = i(23866),
          d = i(89955);
        class h extends n.ChartModifierBase2D {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = d.EChart2DModifierType.XAxisDrag),
              (this.dragMode = s.EDragMode.Scaling),
              (this.isClickedOverXAxis = !1),
              (this.isVerticalChart = !1),
              (this.cursorStyle = r.ECursorStyle.Defalut),
              (this.includedSeriesMapProperty = new Map()),
              (this.dragMode =
                null !== (t = null == e ? void 0 : e.dragMode) && void 0 !== t
                  ? t
                  : this.dragMode),
              null === (i = null == e ? void 0 : e.excludedAxisIds) ||
                void 0 === i ||
                i.forEach((e) => {
                  this.includedSeriesMapProperty.set(e, !1);
                });
          }
          includeAxis(e, t) {
            l.Guard.notNull(e, "axis"),
              t || this.includedSeriesMapProperty.set(e.id, t),
              t && this.includedSeriesMapProperty.delete(e.id);
          }
          getIncludedAxis() {
            var e, t;
            return null !==
              (t =
                null === (e = this.parentSurface) || void 0 === e
                  ? void 0
                  : e.xAxes
                      .asArray()
                      .filter(
                        (e) => !1 !== this.includedSeriesMapProperty.get(e.id)
                      )) && void 0 !== t
              ? t
              : [];
          }
          get includedAxisMap() {
            return this.includedSeriesMapProperty;
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), !this.isAttached))
              throw new Error(
                "Should not call XAxisDragModifier.modifierMouseDown if not attached"
              );
            (0, n.testIsOverAxes)(this.getHorizontalXAxes(), e.mousePoint)
              ? ((this.isVerticalChart = !1),
                this.startDragging(this.getHorizontalXAxes(), e))
              : (0, n.testIsOverAxes)(this.getVerticalXAxes(), e.mousePoint) &&
                ((this.isVerticalChart = !0),
                this.startDragging(this.getVerticalXAxes(), e));
          }
          modifierMouseMove(e) {
            if (this.isClickedOverXAxis) {
              if ((super.modifierMouseMove(e), void 0 === this.pointFrom))
                return;
              this.dragMode === s.EDragMode.Panning
                ? this.doPanning(e.mousePoint)
                : this.dragMode === s.EDragMode.Scaling &&
                  this.doScaling(e.mousePoint);
            } else this.updateCursor(e.mousePoint);
          }
          modifierMouseUp(e) {
            super.modifierMouseUp(e),
              this.updateCursor(e.mousePoint),
              (this.pointFrom = void 0),
              (this.isClickedOverXAxis = !1);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                dragMode: this.dragMode,
                excludedAxisIds: Array.from(
                  this.includedSeriesMapProperty.entries()
                )
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
              };
            return Object.assign(e.options, t), e;
          }
          updateCursor(e) {
            const t = this.parentSurface.getMainCanvas();
            (0, n.testIsOverAxes)(this.getHorizontalXAxes(), e)
              ? this.cursorStyle !== r.ECursorStyle.EW &&
                ((t.style.cursor = r.ECursorStyle.EW),
                (this.cursorStyle = r.ECursorStyle.EW))
              : (0, n.testIsOverAxes)(this.getVerticalXAxes(), e)
              ? this.cursorStyle !== r.ECursorStyle.NS &&
                ((t.style.cursor = r.ECursorStyle.NS),
                (this.cursorStyle = r.ECursorStyle.NS))
              : this.cursorStyle !== r.ECursorStyle.Defalut &&
                ((t.style.cursor = r.ECursorStyle.Defalut),
                (this.cursorStyle = r.ECursorStyle.Defalut));
          }
          doPanning(e) {
            const t = e;
            if (this.isVerticalChart) {
              const e = t.y - this.pointFrom.y;
              this.activeAxes.forEach((t) => {
                const i = t.flippedCoordinates ? -e : e;
                t.scroll(i, a.EClipMode.None);
              });
            } else {
              const e = t.x - this.pointFrom.x;
              this.activeAxes.forEach((t) => {
                const i = t.flippedCoordinates ? -e : e;
                t.scroll(i, a.EClipMode.None);
              });
            }
            this.pointFrom = t;
          }
          doScaling(e) {
            const { seriesViewRect: t } = this.parentSurface;
            if (this.isVerticalChart) {
              const i =
                  (0, o.translateFromCanvasToSeriesViewRectY)(
                    this.pointFrom.y,
                    t
                  ) >=
                  t.height / 2,
                r = (e.y - this.pointFrom.y) / t.width;
              (0, n.scaleAxes)(
                this.activeAxes,
                this.initialVisibleRanges,
                r,
                i
              );
            } else {
              const i =
                  (0, o.translateFromCanvasToSeriesViewRectX)(
                    this.pointFrom.x,
                    t
                  ) >=
                  t.width / 2,
                r = (e.x - this.pointFrom.x) / t.width;
              (0, n.scaleAxes)(
                this.activeAxes,
                this.initialVisibleRanges,
                r,
                i
              );
            }
          }
          getHorizontalXAxes() {
            return this.getIncludedAxis().filter((e) => e.isHorizontalAxis);
          }
          getVerticalXAxes() {
            return this.getIncludedAxis().filter((e) => !e.isHorizontalAxis);
          }
          startDragging(e, t) {
            this.isClickedOverXAxis = !0;
            const i = (0, n.getActiveAxes)(e, t.mousePoint),
              r = [];
            i.forEach((e) => {
              r.push(e.visibleRange);
            }),
              (this.activeAxes = i),
              (this.initialVisibleRanges = r),
              (this.pointFrom = t.mousePoint),
              (t.handled = !0);
          }
        }
        t.XAxisDragModifier = h;
      },
      3397: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.YAxisDragModifier = void 0);
        const r = i(89955),
          s = i(14278),
          o = i(7980),
          a = i(32873),
          n = i(57397),
          l = i(89046);
        class d extends l.ChartModifierBase2D {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EChart2DModifierType.YAxisDrag),
              (this.dragMode = o.EDragMode.Scaling),
              (this.isClickedOverYAxis = !1),
              (this.isVerticalChart = !1),
              (this.cursorStyle = s.ECursorStyle.Defalut),
              (this.includedSeriesMapProperty = new Map()),
              (this.dragMode =
                null !== (t = null == e ? void 0 : e.dragMode) && void 0 !== t
                  ? t
                  : this.dragMode),
              null === (i = null == e ? void 0 : e.excludedAxisIds) ||
                void 0 === i ||
                i.forEach((e) => {
                  this.includedSeriesMapProperty.set(e, !1);
                });
          }
          includeAxis(e, t) {
            t || this.includedSeriesMapProperty.set(e.id, t),
              t && this.includedSeriesMapProperty.delete(e.id);
          }
          getIncludedAxis() {
            var e, t;
            return null !==
              (t =
                null === (e = this.parentSurface) || void 0 === e
                  ? void 0
                  : e.yAxes
                      .asArray()
                      .filter(
                        (e) => !1 !== this.includedSeriesMapProperty.get(e.id)
                      )) && void 0 !== t
              ? t
              : [];
          }
          get includedAxisMap() {
            return this.includedSeriesMapProperty;
          }
          modifierMouseDown(e) {
            if ((super.modifierMouseDown(e), !this.isAttached))
              throw new Error(
                "Should not call YAxisDragModifier.modifierMouseDown if not attached"
              );
            (0, l.testIsOverAxes)(this.getVerticalYAxes(), e.mousePoint)
              ? ((this.isVerticalChart = !1),
                this.startDragging(this.getVerticalYAxes(), e))
              : (0, l.testIsOverAxes)(
                  this.getHorizontalYAxes(),
                  e.mousePoint
                ) &&
                ((this.isVerticalChart = !0),
                this.startDragging(this.getHorizontalYAxes(), e));
          }
          modifierMouseMove(e) {
            if (this.isClickedOverYAxis) {
              if ((super.modifierMouseMove(e), void 0 === this.pointFrom))
                return;
              this.dragMode === o.EDragMode.Panning
                ? this.doPanning(e.mousePoint)
                : this.dragMode === o.EDragMode.Scaling &&
                  this.doScaling(e.mousePoint);
            } else this.updateCursor(e.mousePoint);
          }
          modifierMouseUp(e) {
            super.modifierMouseUp(e),
              this.updateCursor(e.mousePoint),
              (this.pointFrom = void 0),
              (this.isClickedOverYAxis = !1);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                dragMode: this.dragMode,
                excludedAxisIds: Array.from(
                  this.includedSeriesMapProperty.entries()
                )
                  .filter((e) => !e[1])
                  .map((e) => e[0]),
              };
            return Object.assign(e.options, t), e;
          }
          updateCursor(e) {
            const t = this.parentSurface.getMainCanvas();
            (0, l.testIsOverAxes)(this.getVerticalYAxes(), e)
              ? this.cursorStyle !== s.ECursorStyle.NS &&
                ((t.style.cursor = s.ECursorStyle.NS),
                (this.cursorStyle = s.ECursorStyle.NS))
              : (0, l.testIsOverAxes)(this.getHorizontalYAxes(), e)
              ? this.cursorStyle !== s.ECursorStyle.EW &&
                ((t.style.cursor = s.ECursorStyle.EW),
                (this.cursorStyle = s.ECursorStyle.EW))
              : this.cursorStyle !== s.ECursorStyle.Defalut &&
                ((t.style.cursor = s.ECursorStyle.Defalut),
                (this.cursorStyle = s.ECursorStyle.Defalut));
          }
          doPanning(e) {
            const t = e;
            if (this.isVerticalChart) {
              const e = t.x - this.pointFrom.x;
              this.activeAxes.forEach((t) => {
                const i = t.flippedCoordinates ? e : -e;
                t.scroll(i, n.EClipMode.None);
              });
            } else {
              const e = t.y - this.pointFrom.y;
              this.activeAxes.forEach((t) => {
                const i = t.flippedCoordinates ? e : -e;
                t.scroll(i, n.EClipMode.None);
              });
            }
            this.pointFrom = t;
          }
          doScaling(e) {
            const { seriesViewRect: t } = this.parentSurface;
            if (this.isVerticalChart) {
              const i =
                  (0, a.translateFromCanvasToSeriesViewRectX)(
                    this.pointFrom.x,
                    t
                  ) <=
                  t.width / 2,
                r = -(e.x - this.pointFrom.x) / t.width;
              (0, l.scaleAxes)(
                this.activeAxes,
                this.initialVisibleRanges,
                r,
                i
              );
            } else {
              const i =
                  (0, a.translateFromCanvasToSeriesViewRectY)(
                    this.pointFrom.y,
                    t
                  ) <=
                  t.height / 2,
                r = -(e.y - this.pointFrom.y) / t.height;
              (0, l.scaleAxes)(
                this.activeAxes,
                this.initialVisibleRanges,
                r,
                i
              );
            }
          }
          getVerticalYAxes() {
            return this.getIncludedAxis().filter((e) => !e.isHorizontalAxis);
          }
          getHorizontalYAxes() {
            return this.getIncludedAxis().filter((e) => e.isHorizontalAxis);
          }
          startDragging(e, t) {
            this.isClickedOverYAxis = !0;
            const i = (0, l.getActiveAxes)(e, t.mousePoint),
              r = [];
            i.forEach((e) => {
              r.push(e.visibleRange);
            }),
              (this.activeAxes = i),
              (this.initialVisibleRanges = r),
              (this.pointFrom = t.mousePoint),
              (t.handled = !0);
          }
        }
        t.YAxisDragModifier = d;
      },
      63407: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ZoomExtentsModifier = void 0);
        const r = i(45921),
          s = i(10276),
          o = i(11043),
          a = i(89955),
          n = i(86699),
          l = i(14379),
          d = i(32873),
          h = i(89046);
        class u extends h.ChartModifierBase2D {
          constructor(e) {
            var t, i, n, l, d;
            super(e),
              (this.type = a.EChart2DModifierType.ZoomExtents),
              (this.isAnimated = !0),
              (this.animationDuration = 400),
              (this.easingFunction = s.easing.outExpo),
              (this.applyToSeriesViewRect = !0),
              (this.applyToAxes = !0),
              (this.isAnimated =
                null !== (t = null == e ? void 0 : e.isAnimated) && void 0 !== t
                  ? t
                  : this.isAnimated),
              (this.animationDuration =
                null !== (i = null == e ? void 0 : e.animationDuration) &&
                void 0 !== i
                  ? i
                  : this.animationDuration),
              (this.applyToSeriesViewRect =
                null !== (n = null == e ? void 0 : e.applyToSeriesViewRect) &&
                void 0 !== n
                  ? n
                  : this.applyToSeriesViewRect),
              (this.applyToAxes =
                null !== (l = null == e ? void 0 : e.applyToAxes) &&
                void 0 !== l
                  ? l
                  : this.applyToAxes),
              (null == e ? void 0 : e.easingFunction) &&
                "string" == typeof e.easingFunction &&
                (e.easingFunction = s.easing[e.easingFunction]),
              (this.easingFunction =
                null !== (d = null == e ? void 0 : e.easingFunction) &&
                void 0 !== d
                  ? d
                  : s.easing.outExpo),
              (null == e ? void 0 : e.onZoomExtents) &&
                "string" == typeof e.onZoomExtents &&
                (this.typeMap.set("onZoomExtents", e.onZoomExtents),
                (e.onZoomExtents = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.onZoomExtents
                ))),
              (this.onZoomExtents = null == e ? void 0 : e.onZoomExtents);
          }
          modifierDoubleClick(e) {
            const t = this.parentSurface,
              i = this.isAnimated ? this.animationDuration : 0;
            if (void 0 !== t)
              if (
                (0, d.translateFromCanvasToSeriesViewRect)(
                  e.mousePoint,
                  this.parentSurface.seriesViewRect
                ) &&
                this.applyToSeriesViewRect
              ) {
                if (!this.onZoomExtents || this.onZoomExtents(t)) {
                  switch (this.xyDirection) {
                    case n.EXyDirection.XyDirection:
                      t.zoomExtents(i, this.easingFunction, () =>
                        t.setZoomState(l.EZoomState.AtExtents)
                      );
                      break;
                    case n.EXyDirection.XDirection:
                      t.zoomExtentsX(i, this.easingFunction);
                      break;
                    case n.EXyDirection.YDirection:
                      t.zoomExtentsY(i, this.easingFunction);
                  }
                  e.handled = !0;
                }
              } else if (this.applyToAxes) {
                const t = [];
                [
                  n.EXyDirection.XDirection,
                  n.EXyDirection.XyDirection,
                ].includes(this.xyDirection) &&
                  t.push(...this.parentSurface.xAxes.asArray()),
                  [
                    n.EXyDirection.YDirection,
                    n.EXyDirection.XyDirection,
                  ].includes(this.xyDirection) &&
                    t.push(...this.parentSurface.yAxes.asArray());
                const r = (0, h.getActiveAxes)(t, e.mousePoint);
                r.length > 0 &&
                  ((e.handled = !0),
                  r.forEach((e) => {
                    if (e.isXAxis) {
                      const t = e.getMaximumRange();
                      e.animateVisibleRange(t, i, this.easingFunction);
                    } else {
                      const t = e.getWindowedYRange(void 0);
                      e.animateVisibleRange(t, i, this.easingFunction);
                    }
                  }));
              }
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                animationDuration: this.animationDuration,
                easingFunction: this.easingFunction.name,
                isAnimated: this.isAnimated,
                applyToSeriesViewRect: this.applyToSeriesViewRect,
                applyToAxes: this.applyToAxes,
                onZoomExtents: this.typeMap.get("onZoomExtents"),
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.ZoomExtentsModifier = u;
      },
      64171: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ZoomPanModifier = void 0);
        const r = i(89955),
          s = i(86699),
          o = i(14379),
          a = i(32873),
          n = i(57397),
          l = i(21562);
        class d extends l.PinchZoomModifier {
          constructor(e) {
            var t;
            super(e),
              (this.enableZoom = !1),
              (this.type = r.EChart2DModifierType.ZoomPan),
              (this.enableZoom =
                null !== (t = null == e ? void 0 : e.enableZoom) && void 0 !== t
                  ? t
                  : this.enableZoom);
          }
          modifierMouseDown(e) {
            if ((e.nativeEvent.preventDefault(), this.executeOn === e.button)) {
              if (!this.isAttached)
                throw new Error(
                  "Should not call ZoomPanModifier.modifierMouseDown if not attached"
                );
              super.modifierMouseDown(e),
                (0, a.translateFromCanvasToSeriesViewRect)(
                  e.mousePoint,
                  this.parentSurface.seriesViewRect
                ) &&
                  (this.activePointerEvents.set(e.pointerId, e),
                  this.parentSurface.setZoomState(o.EZoomState.UserZooming));
            }
          }
          modifierMouseMove(e) {
            (this.parentSurface.isSubSurface && !e.isActiveSubChartEvent) ||
              (this.updatePointerInfo(e),
              this.previousPoint &&
                (this.enableZoom &&
                  super.getIsActionAllowed(e) &&
                  super.performModifierAction(e),
                this.getIsActionAllowed(e) && this.performModifierAction(e)));
          }
          modifierMouseUp(e) {
            if ((super.modifierMouseUp(e), this.activePointerEvents.size > 0)) {
              const t = this.activePointerEvents.values().next().value;
              e.target.setPointerCapture(t.pointerId);
            }
          }
          modifierPointerCancel(e) {
            super.modifierPointerCancel(e), this.activePointerEvents.clear();
          }
          toJSON() {
            const e = super.toJSON(),
              t = { enableZoom: this.enableZoom };
            return Object.assign(e.options, t), e;
          }
          performModifierAction(e) {
            const t = e.mousePoint,
              i = t.x - this.previousPoint.x,
              r = this.previousPoint.y - t.y;
            this.performPan(i, r);
          }
          getIsActionAllowed(e) {
            return (
              this.activePointerEvents.values().next().value.pointerId ===
              e.pointerId
            );
          }
          performPan(e, t) {
            [s.EXyDirection.XDirection, s.EXyDirection.XyDirection].includes(
              this.xyDirection
            ) &&
              this.getIncludedXAxis().forEach((i) => {
                const r = i.isHorizontalAxis ? e : -t;
                i.scroll(i.flippedCoordinates ? -r : r, n.EClipMode.None);
              }),
              [s.EXyDirection.YDirection, s.EXyDirection.XyDirection].includes(
                this.xyDirection
              ) &&
                this.getIncludedYAxis().forEach((i) => {
                  const r = i.isHorizontalAxis ? -e : t;
                  i.scroll(i.flippedCoordinates ? -r : r, n.EClipMode.None);
                });
          }
        }
        t.ZoomPanModifier = d;
      },
      22486: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).ALLOWS_MULTI_SELECTION =
            "ALLOWS_MULTI_SELECTION"),
          (i.ALLOW_TOOLTIP_OVERLAPPING = "ALLOW_TOOLTIP_OVERLAPPING"),
          (i.CROSSHAIR_STROKE = "CROSSHAIR_STROKE"),
          (i.EXECUTE_ON = "EXECUTE_ON"),
          (i.FILL = "FILL"),
          (i.HIT_TEST_RADIUS = "HIT_TEST_RADIUS"),
          (i.IS_ATTACHED = "IS_ATTACHED"),
          (i.IS_ENABLED = "IS_ENABLED"),
          (i.PARENT_SURFACE = "PARENT_SURFACE"),
          (i.RECEIVE_HANDLED_EVENTS = "RECEIVE_HANDLED_EVENTS"),
          (i.SHOW_ROLLOVER_LINE = "SHOW_ROLLOVER_LINE"),
          (i.SHOW_TOOLTIP = "SHOW_TOOLTIP"),
          (i.SELECTED_AREA = "SELECTED_AREA"),
          (i.SELECTION_FILL = "SELECTION_FILL"),
          (i.SELECTION_STROKE = "SELECTION_STROKE"),
          (i.SELECTION_STROKE_THICKNESS = "SELECTION_STROKE_THICKNESS"),
          (i.STROKE = "STROKE"),
          (i.STROKE_THICKNESS = "STROKE_THICKNESS"),
          (i.STROKE_DASH_ARRAY = "STROKE_DASH_ARRAY"),
          (i.TOOLTIP_DATA_TEMPLATE = "TOOLTIP_DATA_TEMPLATE"),
          (i.X_AXIS_ID = "X_AXIS_ID"),
          (i.Y_AXIS_ID = "Y_AXIS_ID"),
          (i.PLACEMENT_DIV_ID = "PLACEMENT_DIV_ID"),
          (i.X_LINE = "X_LINE"),
          (i.Y_LINE = "Y_LINE"),
          (i.AXIS_LABELS = "AXIS_LABELS"),
          (i.X1 = "X1"),
          (i.X_COORDINATE_MODE = "X_COORDINATE_MODE"),
          (i.IS_DRAGGABLE = "IS_DRAGGABLE"),
          (i.LINE_ANNOTATIONS_OPTIONS = "LINE_ANNOTATIONS_OPTIONS"),
          (i.LINE_SELECTION_COLOR = "LINE_SELECTION_COLOR"),
          (i.TOOLTIP_SHADOW = "TOOLTIP_SHADOW");
      },
      63915: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseCache = void 0);
        const r = i(55023),
          s = i(56744),
          o = (i(27307), i(16185));
        class a extends r.DeletableEntity {
          constructor(e) {
            super(),
              (this.webAssemblyContext = e),
              e && o.WebGlRenderContext2D.webGlResourcesRefs.add(this);
          }
          get value() {
            return this.cachedEntity;
          }
          invalidateCache() {
            this.cachedEntity = (0, s.deleteSafe)(this.cachedEntity);
          }
          resetCache() {
            this.invalidateCache();
          }
          delete() {
            (this.cachedEntity = (0, s.deleteSafe)(this.cachedEntity)),
              o.WebGlRenderContext2D.webGlResourcesRefs.delete(this),
              (this.webAssemblyContext = void 0);
          }
        }
        t.BaseCache = a;
      },
      93113: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BatchRenderContext = void 0);
        const r = i(16185);
        class s extends r.WebGlRenderContext2D {
          constructor() {
            super(...arguments), (this.doDraw = !1);
          }
          drawLayers() {
            this.doDraw && super.drawLayers();
          }
          endFonts(e = !1) {
            (this.doDraw || e) && super.endFonts();
          }
        }
        t.BatchRenderContext = s;
      },
      51269: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createBrushInCache =
            t.getScrtBrushFromCache =
            t.getWebGlBrushFromCache =
            t.BrushCache =
              void 0);
        const r = i(56744),
          s = i(23866),
          o = i(33841),
          a = i(35992),
          n = i(63915),
          l = i(33512),
          d = 256;
        class h extends n.BaseCache {
          get value() {
            return (
              this.cachedEntity ||
                (!this.fill && !this.fillLinearGradient) ||
                (this.cachedEntity = this.create(
                  this.fill,
                  this.opacity,
                  this.textureHeightRatio,
                  this.textureWidthRatio,
                  this.fillLinearGradient
                )),
              this.cachedEntity
            );
          }
          create(e, t, i, r, s) {
            if (
              this.cachedEntity &&
              e === this.fill &&
              t === this.opacity &&
              i === this.textureHeightRatio &&
              r === this.textureWidthRatio &&
              s === this.fillLinearGradient
            )
              return this.cachedEntity;
            this.invalidateCache(),
              (this.fill = e),
              (this.opacity = t),
              (this.textureHeightRatio = i),
              (this.textureWidthRatio = r),
              (this.fillLinearGradient = s);
            const o = s
              ? this.createGradientBrush()
              : this.createSolidBrush(e, t);
            return (this.cachedEntity = new l.WebGlBrush(o));
          }
          invalidateCache() {
            super.invalidateCache(),
              (this.canvasTexture = (0, r.deleteSafe)(this.canvasTexture));
          }
          reset() {
            this.invalidateCache(),
              (this.fill = void 0),
              (this.opacity = void 0),
              (this.fillLinearGradient = void 0);
          }
          delete() {
            this.invalidateCache();
          }
          createSolidBrush(e, t) {
            return (0, o.createSolidBrush)(this.webAssemblyContext, e, t);
          }
          createGradientBrush() {
            const e = this.createGradientTexture().getTexture();
            return new this.webAssemblyContext.SCRTTextureBrush(
              e,
              this.webAssemblyContext.eSCRTBrushMappingMode.PerPrimitive,
              1
            );
          }
          createGradientTexture() {
            s.Guard.notNull(this.fillLinearGradient, "fillLinearGradient");
            const {
              startPoint: e,
              endPoint: t,
              gradientStops: i,
            } = this.fillLinearGradient;
            (this.canvasTexture = new a.CanvasTexture(
              this.webAssemblyContext,
              d,
              d
            )),
              this.canvasTexture.clear();
            const r = this.canvasTexture.getContext(),
              o = u(e.x, d * this.textureWidthRatio),
              n = u(e.y, d * this.textureHeightRatio),
              l = u(t.x, d * this.textureWidthRatio),
              h = u(t.y, d * this.textureHeightRatio),
              c = r.createLinearGradient(o, n, l, h);
            return (
              i.forEach((e) => {
                c.addColorStop(e.offset, e.color);
              }),
              (r.fillStyle = c),
              r.fillRect(0, 0, d, d),
              this.canvasTexture.copyTexture(),
              this.canvasTexture
            );
          }
        }
        (t.BrushCache = h),
          (t.getWebGlBrushFromCache = (e) => (
            s.Guard.notNull(e, "cache"), e.value
          )),
          (t.getScrtBrushFromCache = (e) => {
            const i = (0, t.getWebGlBrushFromCache)(e);
            return null == i ? void 0 : i.scrtBrush;
          }),
          (t.createBrushInCache = (e, t, i, r, o, a) => (
            s.Guard.notNull(e, "brushCache"), e.create(t, i, r, o, a).scrtBrush
          ));
        const u = (e, t) => e * t;
      },
      59348: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PaletteCache = void 0);
        const r = i(56744),
          s = i(63915);
        class o extends s.BaseCache {
          get value() {
            return (
              !this.cachedEntity &&
                this.fillColors &&
                (this.cachedEntity = this.create(this.fillColors)),
              this.cachedEntity
            );
          }
          create(e) {
            return this.cachedEntity && e === this.fillColors
              ? this.cachedEntity
              : ((0, r.deleteSafe)(this.cachedEntity),
                (this.fillColors = e),
                (this.cachedEntity =
                  new this.webAssemblyContext.SCRTCreatePalette(e)));
          }
          reset() {
            this.invalidateCache(), (this.fillColors = void 0);
          }
        }
        t.PaletteCache = o;
      },
      21915: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createPenInCache =
            t.getScrtPenFromCache =
            t.getWebGlPenFromCache =
            t.Pen2DCache =
              void 0);
        const r = i(56744),
          s = i(23866),
          o = i(45215),
          a = i(48008),
          n = i(47376),
          l = i(86127),
          d = i(63915),
          h = i(55444);
        class u extends d.BaseCache {
          get value() {
            if (!this.cachedEntity && this.stroke) {
              const {
                stroke: e,
                strokeThickness: t,
                strokeDashArray: i,
                antiAliased: r,
                opacity: s,
              } = this;
              this.cachedEntity = this.create({
                stroke: e,
                strokeThickness: t,
                strokeDashArray: i,
                antiAliased: r,
                opacity: s,
              });
            }
            return this.cachedEntity;
          }
          create(e) {
            const {
                stroke: t,
                strokeThickness: i = 1,
                strokeDashArray: s,
                antiAliased: d = !0,
                opacity: u = 1,
              } = e,
              { strokeThickness: c, strokeDashArray: p } =
                l.DpiHelper.adjustStrokeSize({
                  strokeThickness: i,
                  strokeDashArray: s,
                });
            if (
              this.cachedEntity &&
              t === this.stroke &&
              c === this.adjustedStrokeThickness &&
              d === this.antiAliased &&
              (0, o.areArraysEqual)(p, this.adjustedStrokeDashArray)
            )
              return (
                u !== this.opacity &&
                  ((this.opacity = u), this.cachedEntity.setOpacity(u)),
                (this.strokeThickness = i),
                (this.strokeDashArray = s),
                this.cachedEntity
              );
            (0, r.deleteSafe)(this.cachedEntity),
              (this.stroke = t),
              (this.opacity = u),
              (this.antiAliased = d),
              (this.strokeThickness = i),
              (this.adjustedStrokeThickness = c),
              (this.strokeDashArray = s),
              (this.adjustedStrokeDashArray = p);
            const g = (0, n.createSCRTPen)(
              this.webAssemblyContext,
              t,
              c,
              u,
              p,
              d
            );
            return (this.cachedEntity = new h.WebGlPen(
              g,
              (0, a.parseColorToUIntArgb)(t)
            ));
          }
        }
        (t.Pen2DCache = u),
          (t.getWebGlPenFromCache = (e) => (
            s.Guard.notNull(e, "penCache"), e.value
          )),
          (t.getScrtPenFromCache = (e) => {
            const i = (0, t.getWebGlPenFromCache)(e);
            return null == i ? void 0 : i.scrtPen;
          }),
          (t.createPenInCache = (e, t, i, r, o, a) => (
            s.Guard.notNull(e, "penCache"),
            e.create({
              stroke: t,
              strokeThickness: i,
              opacity: r,
              strokeDashArray: o,
              antiAliased: a,
            }).scrtPen
          ));
      },
      53831: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderContext2D = void 0),
          (t.RenderContext2D = class {
            constructor(e) {
              (this.canvas2D = e), (this.ctx2D = e.getContext("2d"));
            }
            drawRect(e, t, i, r, s = "rgba(211,211,211,0.5)") {
              this.clear(),
                (this.ctx2D.fillStyle = s),
                this.ctx2D.fillRect(e, t, i, r);
            }
            drawCircle(e, t, i, r) {
              const s = r;
              this.clear(),
                this.ctx2D.beginPath(),
                this.ctx2D.arc(e, t, i, 0, 2 * Math.PI, !1),
                (this.ctx2D.fillStyle = r),
                this.ctx2D.fill(),
                (this.ctx2D.lineWidth = 0),
                (this.ctx2D.strokeStyle = s),
                this.ctx2D.stroke();
            }
            clear() {
              this.ctx2D.clearRect(
                0,
                0,
                this.canvas2D.width,
                this.canvas2D.height
              );
            }
          });
      },
      77186: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderSurface = void 0);
        const r = i(84745),
          s = i(62049),
          o = i(16185);
        t.RenderSurface = class {
          constructor(e, t, i) {
            (this.webAssemblyContext = e),
              (this.viewportSize = t),
              (this.canvasId = i);
          }
          getRenderContext() {
            return (
              this.renderContextProperty ||
                (this.renderContextProperty = new o.WebGlRenderContext2D(
                  this.webAssemblyContext,
                  this.viewportSize,
                  this.canvasId
                )),
              this.renderContextProperty
            );
          }
          invalidateElement(e) {
            var t;
            r.IS_TEST_ENV ||
              (null ===
                (t = s.WebGlHelper.getContext(
                  this.webAssemblyContext.canvas
                )) || void 0 === t
                ? void 0
                : t.isContextLost()) ||
              this.webAssemblyContext.TSRRequestCanvasDraw(e);
          }
          onRenderTimeElapsed() {
            this.handleDraw(), (this.renderContextProperty = void 0);
          }
        };
      },
      78623: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SolidBrushCache = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(48008);
        class a extends r.DeletableEntity {
          constructor(e) {
            super(), (this.webAssemblyContext = e);
          }
          newBrush(e, t = !1) {
            return (
              (this.brush && e === this.color && t === this.transparent) ||
                (this.brush && this.brush.delete(),
                (this.color = e),
                (this.transparent = t),
                (this.brush = new this.webAssemblyContext.SCRTSolidBrush(
                  (0, o.parseColorToUIntArgb)(e),
                  t
                ))),
              this.brush
            );
          }
          delete() {
            (this.brush = (0, s.deleteSafe)(this.brush)),
              (this.webAssemblyContext = void 0);
          }
        }
        t.SolidBrushCache = a;
      },
      80445: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TextureCache = void 0);
        const r = i(56744),
          s = i(63915);
        class o extends s.BaseCache {
          constructor(e) {
            super(e), (this.wasmContext = e);
          }
          get value() {
            return (
              !this.cachedEntity &&
                this.textureFormat &&
                (this.cachedEntity = this.create(
                  this.width,
                  this.height,
                  this.textureFormat
                )),
              this.cachedEntity
            );
          }
          create(e, t, i) {
            return (
              (this.cachedEntity &&
                e === this.width &&
                t === this.height &&
                i === this.textureFormat) ||
                ((this.cachedEntity = (0, r.deleteSafe)(this.cachedEntity)),
                (this.width = e),
                (this.height = t),
                (this.textureFormat = i),
                (this.cachedEntity = this.wasmContext.SCRTCreateBitmapTexture(
                  this.width,
                  this.height,
                  i
                ))),
              this.cachedEntity
            );
          }
          resetCache() {
            this.invalidateCache(),
              (this.width = void 0),
              (this.height = void 0),
              (this.textureFormat = void 0);
          }
        }
        t.TextureCache = o;
      },
      33512: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.WebGlBrush = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(78249);
        class a extends r.DeletableEntity {
          constructor(e) {
            super(), (this.scrtBrushProperty = e);
          }
          get scrtBrush() {
            return this.scrtBrushProperty;
          }
          delete() {
            this.scrtBrushProperty = (0, s.deleteSafe)(this.scrtBrushProperty);
          }
          getBrushType() {
            return o.EDrawingTypes.WasmBrush;
          }
          setOpacity(e) {
            var t;
            null === (t = this.scrtBrushProperty) ||
              void 0 === t ||
              t.SetOpacity(e);
          }
        }
        t.WebGlBrush = a;
      },
      55444: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.WebGlPen = void 0);
        const r = i(84745),
          s = i(55023),
          o = i(56744),
          a = i(22950),
          n = i(78249);
        class l extends s.DeletableEntity {
          constructor(e, t) {
            super(),
              (this.scrtPenProperty = e),
              (this.originalColor =
                null != t ? t : null == e ? void 0 : e.m_uiColor);
          }
          get scrtPen() {
            return this.scrtPenProperty;
          }
          delete() {
            this.scrtPenProperty = (0, o.deleteSafe)(this.scrtPenProperty);
          }
          getPenType() {
            return n.EDrawingTypes.WasmPen;
          }
          setOpacity(e) {
            r.IS_TEST_ENV ||
              (this.scrtPen.m_uiColor = (0, a.uintArgbColorMultiplyOpacity)(
                this.originalColor,
                e
              ));
          }
        }
        t.WebGlPen = l;
      },
      16185: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.WebGlRenderContext2D =
            t.ELineDrawMode =
            t.calculateAbsoluteRenderLayer =
              void 0);
        const r = i(84745),
          s = i(23866),
          o = (i(48008), i(63458)),
          a = i(98353),
          n = (i(33512), i(55444), i(55023));
        var l;
        (t.calculateAbsoluteRenderLayer = (e, t, i) => e + i * t),
          (function (e) {
            (e[(e.PolyLine = 0)] = "PolyLine"),
              (e[(e.DiscontinuousLine = 1)] = "DiscontinuousLine");
          })((l = t.ELineDrawMode || (t.ELineDrawMode = {})));
        class d extends n.DeletableEntity {
          constructor(e, t, i) {
            super(),
              (this.layers = {}),
              (this.effects = []),
              (this.webAssemblyContext = e),
              (this.viewportSize = t),
              (this.canvasId = i);
          }
          getNativeContext() {
            return (
              this.nativeContext ||
                (this.nativeContext =
                  this.webAssemblyContext.SCRTGetMainRenderContext2D()),
              this.nativeContext
            );
          }
          drawLinesNative(e, t, i, r = 0, s = 0) {
            const o = i === l.PolyLine,
              a = this.getNativeContext();
            a.PushMatrix(),
              a.Translate(r, s),
              a.DrawLinesBatchVec(o, e, t),
              a.PopMatrix();
          }
          drawRects(e, t, i = 0, r = 0) {
            const s = (0, a.getVector4)(this.webAssemblyContext, 0, 0, 0, 0),
              o = this.getNativeContext();
            o.PushMatrix(),
              o.Translate(i, r),
              o.DrawRectsBatchVec(e, t, s),
              o.PopMatrix();
          }
          enqueueLayeredDraw(e, t) {
            this.layers[t] || (this.layers[t] = []), this.layers[t].push(e);
          }
          drawLayers() {
            Object.values(this.layers).forEach((e) => {
              e.forEach((e) => e());
            });
          }
          pushShaderEffect(e) {
            e &&
              (this.effects.push(e),
              r.IS_TEST_ENV ||
                this.getNativeContext().AddSeriesEffect(e.getNativeEffect()));
          }
          popShaderEffect() {
            const e = this.effects.pop();
            e &&
              !r.IS_TEST_ENV &&
              this.getNativeContext().RemoveSeriesEffect(e.getNativeEffect());
          }
          createPen(e, t, i = [], r = !0) {
            throw new Error("Use Pen2DCache for creating pens instead!");
          }
          createSolidBrush(e, t) {
            throw new Error("Use BrushCache for creating brushes instead!");
          }
          delete() {}
          drawLine(e, t, i, r, o, n) {
            if (!(e || t || i || r)) return;
            s.Guard.notNull(o, "pen"),
              s.Guard.isTrue(
                "WasmPen" === o.getPenType(),
                "pen must be an instance of WasmPen to be used with the WasmRenderContext"
              );
            const l = o.scrtPen;
            s.Guard.notNull(l, "WasmPen.scrtPen");
            const d = this.getNativeContext(),
              h = (0, a.getVectorColorVertex)(this.webAssemblyContext),
              u = (0, a.getVertex)(this.webAssemblyContext, e, t);
            h.push_back(u);
            const c = (0, a.getVertex)(this.webAssemblyContext, i, r);
            h.push_back(c),
              d.PushMatrix(),
              d.PushState(),
              d.Translate(n.x, n.y),
              d.SetClipRect(n.x, n.y, n.width, n.height),
              d.DrawLinesBatchVec(!1, h, l),
              d.PopMatrix(),
              d.PopState();
          }
          drawLines(e, t, i, r = l.PolyLine) {
            s.Guard.notNull(t, "pen"),
              s.Guard.notNull(e, "xyValues"),
              s.Guard.isTrue(
                "WasmPen" === t.getPenType(),
                "pen must be an instance of WasmPen to be used with the WasmRenderContext"
              ),
              s.Guard.isTrue(
                e.length > 0 && e.length % 2 == 0,
                "xyValues length must be a multiple of 2, values arranged as x0y0 x1y1 x2y2..."
              );
            const o = t.scrtPen;
            s.Guard.notNull(o, "WebGlPen.scrtPen");
            const n = r === l.PolyLine,
              d = this.getNativeContext(),
              h = (0, a.getVectorColorVertex)(this.webAssemblyContext);
            for (let t = 0; t < e.length; t += 2) {
              const i = (0, a.getVertex)(
                this.webAssemblyContext,
                e[t],
                e[t + 1]
              );
              (i.m_vPosition.z = 0), h.push_back(i);
            }
            d.PushMatrix(),
              d.PushState(),
              d.Translate(i.x, i.y),
              d.SetClipRect(i.x, i.y, i.width, i.height),
              d.DrawLinesBatchVec(n, h, o),
              d.PopMatrix(),
              d.PopState();
          }
          drawRect(e, t, i, r) {
            if (r) {
              const i = this.getNativeContext(),
                n = r.scrtBrush;
              s.Guard.notNull(n, "WebGlBrush.scrtBrush");
              const l = (0, a.getVectorRectVertex)(this.webAssemblyContext),
                d = (0, a.getVector4)(this.webAssemblyContext, 0, 0, 0, 0),
                h = (0, o.createNativeRect)(
                  this.webAssemblyContext,
                  e.x,
                  e.y,
                  e.right,
                  e.bottom
                );
              l.push_back(h),
                i.PushMatrix(),
                i.PushState(),
                i.Translate(t.x, t.y),
                i.SetClipRect(t.x, t.y, t.width, t.height),
                i.DrawRectsBatchVec(l, n, d),
                i.PopMatrix(),
                i.PopState();
            }
            i &&
              this.drawLines(
                [
                  e.right,
                  e.top,
                  e.right,
                  e.bottom,
                  e.left,
                  e.bottom,
                  e.left,
                  e.top,
                  e.right,
                  e.top,
                ],
                i,
                t,
                l.PolyLine
              );
          }
          printBlendMode() {
            switch (this.getNativeContext().GetBlendMode()) {
              case this.webAssemblyContext.eSCRTBlendMode.BlendDefault:
                console.log("BlendDefault");
                break;
              case this.webAssemblyContext.eSCRTBlendMode.BlendAdditiveOneAlpha:
                console.log("BlendAdditiveOneAlpha");
                break;
              case this.webAssemblyContext.eSCRTBlendMode.BlendAdditiveColor:
                console.log("BlendAdditiveColor");
                break;
              case this.webAssemblyContext.eSCRTBlendMode.BlendAdditiveAlpha:
                console.log("BlendAdditiveAlpha");
                break;
              case this.webAssemblyContext.eSCRTBlendMode.BlendDisabled:
                console.log("BlendDisabled");
                break;
              default:
                throw new Error("Unhandled blendmode ");
            }
          }
          getFont(e, t = !1, i = !1) {
            const r = (0, a.getFontKey)(this.webAssemblyContext, e, t, i),
              s = this.getNativeContext().AquireFont(r);
            if (!s) throw new Error("Could not create font " + r.m_strName);
            s.m_isDrawing || s.Begin();
            const o = s.GetFaceName();
            return (
              "SCRT_Loading" === o
                ? setTimeout(() => {
                    var e;
                    return this.webAssemblyContext.TSRRequestCanvasDraw(
                      null !== (e = this.canvasId) && void 0 !== e
                        ? e
                        : "undefinedCanvasId"
                    );
                  }, 100)
                : o !== r.m_strName &&
                  (r.warned ||
                    (console.warn(
                      `Font ${r.m_strName} could not be found on the server and has not been registered. Falling back to Arial.\n                Use await scichartSurface.registerFont if you need to load the font from a remote url`
                    ),
                    (r.warned = !0))),
              s
            );
          }
          endFonts(e = !1) {
            const t = this.getNativeContext(),
              i = (0, a.getAllFontKeys)(this.webAssemblyContext);
            for (const e of i) {
              const i = t.AquireFont(e);
              i && i.m_isDrawing && i.End();
            }
          }
        }
        (t.WebGlRenderContext2D = d), (d.webGlResourcesRefs = new Set());
      },
      78249: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDrawingTypes = void 0),
          ((i = t.EDrawingTypes || (t.EDrawingTypes = {})).WasmBrush =
            "WasmBrush"),
          (i.WasmPen = "WasmPen");
      },
      5100: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.testLayoutManager =
            t.getCoordinateWithCoordinateMode =
            t.getValueWithCoordinateMode =
            t.updateTopAndBottomChartLayoutState =
            t.updateLeftAndRightChartLayoutState =
            t.getVerticalAxisRequiredSize =
            t.getHorizontalAxisRequiredSize =
            t.layoutAxisPartsBottomStrategy =
            t.layoutAxisPartsTopStrategy =
            t.layoutAxisPartsRightStrategy =
            t.layoutAxisPartsLeftStrategy =
            t.layoutAxisParts =
            t.updateAxisLayoutState =
              void 0);
        const r = i(23866),
          s = i(87459),
          o = i(41344);
        function a(e) {
          const {
            axisRenderer: t,
            axisTitleRenderer: i,
            axisLayoutState: r,
            isHorizontalAxis: s,
            axisBorder: o,
          } = e;
          r.clear(),
            (r.axisSize = s
              ? t.desiredHeight + i.desiredHeight
              : t.desiredWidth + i.desiredWidth),
            (r.additionalBottomSize = o.borderBottom),
            (r.additionalTopSize = o.borderTop),
            (r.additionalRightSize = o.borderRight),
            (r.additionalLeftSize = o.borderLeft);
        }
        function n(e, t, i, r, o) {
          return {
            axisTitleRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top,
              o.left + i,
              o.bottom
            ),
            axisRendererViewRect: s.Rect.createWithCoords(
              o.left + i,
              o.top,
              o.right,
              o.bottom
            ),
          };
        }
        function l(e, t, i, r, o) {
          return {
            axisRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top,
              o.left + e,
              o.bottom
            ),
            axisTitleRendererViewRect: s.Rect.createWithCoords(
              o.left + e,
              o.top,
              o.right,
              o.bottom
            ),
          };
        }
        function d(e, t, i, r, o) {
          return {
            axisTitleRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top,
              o.right,
              o.top + r
            ),
            axisRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top + r,
              o.right,
              o.bottom
            ),
          };
        }
        function h(e, t, i, r, o) {
          return {
            axisRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top,
              o.right,
              o.top + t
            ),
            axisTitleRendererViewRect: s.Rect.createWithCoords(
              o.left,
              o.top + t,
              o.right,
              o.bottom
            ),
          };
        }
        (t.updateAxisLayoutState = a),
          (t.layoutAxisParts = function (e, t) {
            const {
                isHorizontalAxis: i,
                viewRect: r,
                axisRenderer: s,
                axisTitleRenderer: o,
                axisBorder: a,
              } = e,
              n = i ? r.width : s.desiredWidth,
              l = i ? s.desiredHeight : r.height,
              d = o.desiredWidth,
              h = o.desiredHeight,
              { axisRendererViewRect: u, axisTitleRendererViewRect: c } = t(
                n,
                l,
                d,
                h,
                r,
                a
              );
            s.layout(u), o.layout(c);
          }),
          (t.layoutAxisPartsLeftStrategy = n),
          (t.layoutAxisPartsRightStrategy = l),
          (t.layoutAxisPartsTopStrategy = d),
          (t.layoutAxisPartsBottomStrategy = h),
          (t.getHorizontalAxisRequiredSize = function (e) {
            return e.axisSize + e.additionalTopSize + e.additionalBottomSize;
          }),
          (t.getVerticalAxisRequiredSize = function (e) {
            return e.axisSize + e.additionalLeftSize + e.additionalRightSize;
          }),
          (t.updateLeftAndRightChartLayoutState = function (e, t = 0, i = 0) {
            (e.leftOuterAreaSize = Math.max(e.leftOuterAreaSize, t)),
              (e.rightOuterAreaSize = Math.max(e.rightOuterAreaSize, i));
          }),
          (t.updateTopAndBottomChartLayoutState = function (e, t = 0, i = 0) {
            (e.topOuterAreaSize = Math.max(e.topOuterAreaSize, t)),
              (e.bottomOuterAreaSize = Math.max(e.bottomOuterAreaSize, i));
          }),
          (t.getValueWithCoordinateMode = (e, t, i) => {
            switch (i) {
              case o.EInnerAxisPlacementCoordinateMode.Pixel:
                return t.getDataValue(e);
              case o.EInnerAxisPlacementCoordinateMode.DataValue:
                return e;
              case o.EInnerAxisPlacementCoordinateMode.Relative:
                return (t.visibleMax - t.visibleMin) * e + t.visibleMin;
              default:
                throw new Error(`CoordinateMode ${i} is not supported`);
            }
          }),
          (t.getCoordinateWithCoordinateMode = (e, t, i) => {
            switch (
              (r.Guard.notNull(i, "coordinateMode"),
              r.Guard.notNull(t, "calculator"),
              i)
            ) {
              case o.EInnerAxisPlacementCoordinateMode.Pixel:
                return e;
              case o.EInnerAxisPlacementCoordinateMode.DataValue:
                return t.getCoordinate(e);
              case o.EInnerAxisPlacementCoordinateMode.Relative:
                return e * t.viewportDimension;
              default:
                throw new Error(`CoordinateMode ${i} is not supported`);
            }
          }),
          (t.testLayoutManager = {
            updateAxisLayoutState: a,
            layoutAxisPartsLeftStrategy: n,
            layoutAxisPartsRightStrategy: l,
            layoutAxisPartsTopStrategy: d,
            layoutAxisPartsBottomStrategy: h,
          });
      },
      21843: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseAxisLayoutStrategy = void 0);
        const r = i(87459),
          s = i(5100);
        t.BaseAxisLayoutStrategy = class {
          constructor() {
            this.isStacked = !1;
          }
          toJSON() {
            return { type: this.type };
          }
          updateAxisLayoutState(e) {
            (0, s.updateAxisLayoutState)(e);
          }
          updateLeftAndRightChartLayoutState(e, t, i) {
            (0, s.updateLeftAndRightChartLayoutState)(e, t, i);
          }
          updateTopAndBottomChartLayoutState(e, t, i) {
            (0, s.updateTopAndBottomChartLayoutState)(e, t, i);
          }
          layoutAxesFromBottomToTop(e, t, i, o, a) {
            let n = o;
            a.forEach((t) => {
              const {
                  axisLayoutState: {
                    axisSize: o,
                    additionalTopSize: a,
                    additionalBottomSize: l,
                  },
                } = t,
                d = n - o - l - a;
              (t.viewRect = r.Rect.createWithCoords(e, d + a, i, n - l)),
                (n = d),
                (0, s.layoutAxisParts)(t, this.layoutAxisPartsStrategy);
            });
          }
          layoutAxesFromTopToBottom(e, t, i, o, a) {
            let n = t;
            a.forEach((t) => {
              const {
                  axisLayoutState: {
                    axisSize: o,
                    additionalTopSize: a,
                    additionalBottomSize: l,
                  },
                } = t,
                d = n + o + l + a;
              (t.viewRect = r.Rect.createWithCoords(e, n + a, i, d - l)),
                (n = d),
                (0, s.layoutAxisParts)(t, this.layoutAxisPartsStrategy);
            });
          }
          layoutAxesFromLeftToRight(e, t, i, o, a) {
            let n = e;
            a.forEach((e) => {
              const {
                  axisLayoutState: {
                    axisSize: i,
                    additionalLeftSize: a,
                    additionalRightSize: l,
                  },
                } = e,
                d = n + i + a + l;
              (e.viewRect = r.Rect.createWithCoords(n + a, t, d - l, o)),
                (n = d),
                (0, s.layoutAxisParts)(e, this.layoutAxisPartsStrategy);
            });
          }
          layoutAxesFromRightToLeft(e, t, i, o, a) {
            let n = i;
            a.forEach((e) => {
              const {
                  axisLayoutState: {
                    axisSize: i,
                    additionalLeftSize: a,
                    additionalRightSize: l,
                  },
                } = e,
                d = n - i - a - l;
              (e.viewRect = r.Rect.createWithCoords(d + a, t, n - l, o)),
                (n = d),
                (0, s.layoutAxisParts)(e, this.layoutAxisPartsStrategy);
            });
          }
          calculateTotalAxisHeight(e, t) {
            return (
              o(e.stackedAxisLength, t) +
              e.axisLayoutState.additionalBottomSize +
              e.axisLayoutState.additionalTopSize
            );
          }
          calculateTotalAxisWidth(e, t) {
            return (
              o(e.stackedAxisLength, t) +
              e.axisLayoutState.additionalRightSize +
              e.axisLayoutState.additionalLeftSize
            );
          }
        };
        const o = (e, t) => {
            if ("number" == typeof e) {
              if (e < 0)
                throw new Error("stackedAxisLength must be a positive value!");
              return e;
            }
            if (e.includes("%")) return a(e, t);
            const i = parseFloat(e);
            if (!isNaN(i)) return i;
            throw new Error(
              "stackedAxisLength must be a number or a percentage"
            );
          },
          a = (e, t) => {
            const i = parseFloat(e);
            if (i < 0 || i > 100)
              throw new Error(
                "stackedAxisLength percentage must be from 0 to 100"
              );
            return Math.round((t * i) / 10) / 10;
          };
      },
      93326: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseCenteredAxisLayoutStrategy = void 0);
        const r = i(57397),
          s = i(21843),
          o = i(73105),
          a = i(41344);
        class n extends s.BaseAxisLayoutStrategy {
          constructor(e) {
            var t, i, s;
            super(),
              (this.orthogonalAxisIdProperty = r.AxisBase2D.DEFAULT_AXIS_ID),
              (this.coordinateModeProperty =
                a.EInnerAxisPlacementCoordinateMode.DataValue),
              (this.orthogonalAxisIdProperty =
                null !== (t = null == e ? void 0 : e.orthogonalAxisId) &&
                void 0 !== t
                  ? t
                  : this.orthogonalAxisIdProperty),
              (this.coordinateModeProperty =
                null !== (i = null == e ? void 0 : e.coordinateMode) &&
                void 0 !== i
                  ? i
                  : this.coordinateModeProperty),
              (this.axisPositionProperty =
                null !== (s = null == e ? void 0 : e.axisPosition) &&
                void 0 !== s
                  ? s
                  : this.axisPositionProperty);
          }
          get orthogonalAxisId() {
            return this.orthogonalAxisIdProperty;
          }
          set orthogonalAxisId(e) {
            this.orthogonalAxisId !== e &&
              ((this.orthogonalAxisIdProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.VERTICAL_AXIS_ID));
          }
          get coordinateMode() {
            return this.coordinateModeProperty;
          }
          set coordinateMode(e) {
            this.coordinateModeProperty !== e &&
              ((this.coordinateModeProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.COORDINATE_MODE));
          }
          get axisPosition() {
            return this.axisPositionProperty;
          }
          set axisPosition(e) {
            this.axisPositionProperty !== e &&
              ((this.axisPositionProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.AXIS_POSITION_COORDINATE));
          }
          toJSON() {
            const e = {
              axisPosition: this.axisPosition,
              coordinateMode: this.coordinateMode,
              orthogonalAxisId: this.orthogonalAxisId,
            };
            return { type: this.type, options: e };
          }
          notifyPropertyChanged(e) {
            var t;
            (null === (t = this.sciChartSurface) || void 0 === t
              ? void 0
              : t.invalidateElement) &&
              this.sciChartSurface.invalidateElement();
          }
        }
        t.BaseCenteredAxisLayoutStrategy = n;
      },
      60872: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BottomAlignedInnerAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(93326);
        class a extends o.BaseCenteredAxisLayoutStrategy {
          constructor(e) {
            super(e),
              (this.type = r.ELayoutStrategyType.BottomInner),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsTopStrategy);
          }
          measureAxes(e, t, i) {
            this.sciChartSurface = e;
            let r = 0;
            i.forEach((e) => {
              e.measure(),
                this.updateAxisLayoutState(e),
                (r += (0, s.getHorizontalAxisRequiredSize)(e.axisLayoutState));
            }),
              (t.bottomInnerAreaSize = Math.max(t.bottomInnerAreaSize, r));
          }
          layoutAxes(e, t, i, r, o) {
            if (
              (o.forEach((e) => {
                (e.axisLength = void 0), (e.offset = 0);
              }),
              0 === o.length)
            )
              return;
            let a = r;
            if (void 0 !== this.axisPosition) {
              const e =
                this.sciChartSurface.getYAxisById(this.orthogonalAxisId) ||
                this.sciChartSurface.getXAxisById(this.orthogonalAxisId);
              if (!e || e.isHorizontalAxis)
                throw new Error(
                  "orthogonalAxisId should be a valid id of vertical axis on the surface!"
                );
              const t = e.getCurrentCoordinateCalculator();
              a =
                (0, s.getCoordinateWithCoordinateMode)(
                  this.axisPosition,
                  t,
                  this.coordinateMode
                ) + e.viewRect.top;
            }
            this.layoutAxesFromBottomToTop(e, t, i, a, o);
          }
        }
        t.BottomAlignedInnerAxisLayoutStrategy = a;
      },
      53521: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BottomAlignedOuterAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(21843);
        class a extends o.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = r.ELayoutStrategyType.BottomOuter),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsBottomStrategy);
          }
          measureAxes(e, t, i) {
            var r, o;
            let a =
              null !==
                (o =
                  null === (r = e.adjustedPadding) || void 0 === r
                    ? void 0
                    : r.bottom) && void 0 !== o
                ? o
                : 0;
            (a += e.bottomViewportBorder + e.bottomCanvasBorder),
              i.forEach((e) => {
                e.measure(),
                  this.updateAxisLayoutState(e),
                  (a += (0, s.getHorizontalAxisRequiredSize)(
                    e.axisLayoutState
                  )),
                  this.updateLeftAndRightChartLayoutState(
                    t,
                    e.axisLayoutState.additionalLeftSize,
                    e.axisLayoutState.additionalRightSize
                  );
              }),
              (t.bottomOuterAreaSize = Math.max(t.bottomOuterAreaSize, a));
          }
          layoutAxes(e, t, i, r, s) {
            s.forEach((e) => {
              (e.axisLength = void 0), (e.offset = 0);
            }),
              this.layoutAxesFromTopToBottom(e, t, i, r, s);
          }
        }
        t.BottomAlignedOuterAxisLayoutStrategy = a;
      },
      57384: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy = void 0);
        const r = i(87459),
          s = i(73785),
          o = i(5100),
          a = i(21843);
        class n extends a.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = s.ELayoutStrategyType.BottomStacked),
              (this.isStacked = !0),
              (this.layoutAxisPartsStrategy = o.layoutAxisPartsBottomStrategy);
          }
          measureAxes(e, t, i) {
            var r;
            let s = 0;
            i.forEach((e) => {
              e.measure(), this.updateAxisLayoutState(e);
              const t = (0, o.getHorizontalAxisRequiredSize)(e.axisLayoutState);
              s = t > s ? t : s;
            });
            const [a] = i,
              n = i[i.length - 1];
            this.updateLeftAndRightChartLayoutState(
              t,
              null == a ? void 0 : a.axisLayoutState.additionalLeftSize,
              null == n ? void 0 : n.axisLayoutState.additionalRightSize
            );
            const {
              bottomViewportBorder: l,
              bottomCanvasBorder: d,
              adjustedPadding: h,
            } = e;
            (s +=
              null !== (r = l + d + (null == h ? void 0 : h.bottom)) &&
              void 0 !== r
                ? r
                : 0),
              (t.bottomOuterAreaSize = Math.max(t.bottomOuterAreaSize, s));
          }
          layoutAxes(e, t, i, s, a) {
            const n = i - e,
              [l] = a,
              d = a[a.length - 1],
              h = a.filter((e) => e.stackedAxisLength),
              u = a.reduce(
                (e, t) =>
                  e -
                  t.axisLayoutState.additionalBottomSize -
                  t.axisLayoutState.additionalTopSize,
                n +
                  (null == l ? void 0 : l.axisLayoutState.additionalLeftSize) +
                  (null == d ? void 0 : d.axisLayoutState.additionalRightSize)
              ),
              c = h.reduce((e, t) => e + this.calculateTotalAxisWidth(t, u), 0),
              p =
                n +
                (null == l ? void 0 : l.axisLayoutState.additionalLeftSize) +
                (null == d ? void 0 : d.axisLayoutState.additionalRightSize) -
                c;
            if (p < 0)
              throw new Error(
                `Bottom stacked axes with defined size total ${c} pixels which is ${-p} more than the space available`
              );
            const g = p / (a.length - h.length);
            let y =
              e - (null == l ? void 0 : l.axisLayoutState.additionalLeftSize);
            a.forEach((i) => {
              const {
                  axisSize: s,
                  additionalLeftSize: a,
                  additionalRightSize: n,
                  additionalTopSize: l,
                } = i.axisLayoutState,
                d = t + l,
                h = d + s,
                c = i.stackedAxisLength
                  ? this.calculateTotalAxisWidth(i, u)
                  : g,
                p = y + c - n;
              (y += a),
                (i.offset = y - e),
                (i.axisLength = p - y),
                (i.isPrimaryAxis = !0),
                (i.viewRect = r.Rect.createWithCoords(y, d, p, h)),
                (y = p + n),
                (0, o.layoutAxisParts)(i, this.layoutAxisPartsStrategy);
            });
          }
        }
        t.BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy = n;
      },
      70397: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CentralAxesLayoutManager = void 0);
        const r = i(38215),
          s = i(28709),
          o = i(60872),
          a = i(73105),
          n = i(41344),
          l = i(45481),
          d = i(83638),
          h = i(24478),
          u = i(27194);
        class c extends l.LayoutManager {
          constructor(e) {
            var t, i, r, a;
            super(e),
              (this.type = s.ELayoutManagerType.CentralAxes),
              (this.horizontalAxisPositionCoordinateModeProperty =
                n.EInnerAxisPlacementCoordinateMode.Relative),
              (this.verticalAxisPositionCoordinateModeProperty =
                n.EInnerAxisPlacementCoordinateMode.Relative),
              (this.horizontalAxisPositionProperty = 0.5),
              (this.verticalAxisPositionProperty = 0.5),
              (this.verticalAxisPositionProperty =
                null !== (t = null == e ? void 0 : e.verticalAxisPosition) &&
                void 0 !== t
                  ? t
                  : this.verticalAxisPositionProperty),
              (this.verticalAxisPositionCoordinateModeProperty =
                null !==
                  (i =
                    null == e
                      ? void 0
                      : e.verticalAxisPositionCoordinateMode) && void 0 !== i
                  ? i
                  : this.verticalAxisPositionCoordinateModeProperty),
              (this.horizontalAxisPositionProperty =
                null !== (r = null == e ? void 0 : e.horizontalAxisPosition) &&
                void 0 !== r
                  ? r
                  : this.horizontalAxisPositionProperty),
              (this.horizontalAxisPositionCoordinateModeProperty =
                null !==
                  (a =
                    null == e
                      ? void 0
                      : e.horizontalAxisPositionCoordinateMode) && void 0 !== a
                  ? a
                  : this.horizontalAxisPositionCoordinateModeProperty),
              (this.leftInnerAxesLayoutStrategy =
                new d.LeftAlignedInnerAxisLayoutStrategy({
                  axisPosition: this.verticalAxisPositionProperty,
                  coordinateMode:
                    this.verticalAxisPositionCoordinateModeProperty,
                })),
              (this.rightInnerAxesLayoutStrategy =
                new h.RightAlignedInnerAxisLayoutStrategy({
                  axisPosition: this.verticalAxisPositionProperty,
                  coordinateMode:
                    this.verticalAxisPositionCoordinateModeProperty,
                })),
              (this.topInnerAxesLayoutStrategy =
                new u.TopAlignedInnerAxisLayoutStrategy({
                  axisPosition: this.horizontalAxisPositionProperty,
                  coordinateMode:
                    this.horizontalAxisPositionCoordinateModeProperty,
                })),
              (this.bottomInnerAxesLayoutStrategy =
                new o.BottomAlignedInnerAxisLayoutStrategy({
                  axisPosition: this.horizontalAxisPositionProperty,
                  coordinateMode:
                    this.horizontalAxisPositionCoordinateModeProperty,
                }));
          }
          get horizontalAxisPositionCoordinateMode() {
            return this.horizontalAxisPositionCoordinateModeProperty;
          }
          set horizontalAxisPositionCoordinateMode(e) {
            (this.horizontalAxisPositionCoordinateModeProperty = e),
              (this.topInnerAxesLayoutStrategy.coordinateMode = e),
              (this.bottomInnerAxesLayoutStrategy.coordinateMode = e),
              this.notifyPropertyChanged(a.PROPERTY.COORDINATE_MODE);
          }
          get verticalAxisPositionCoordinateMode() {
            return this.verticalAxisPositionCoordinateModeProperty;
          }
          set verticalAxisPositionCoordinateMode(e) {
            (this.verticalAxisPositionCoordinateModeProperty = e),
              (this.rightInnerAxesLayoutStrategy.coordinateMode = e),
              (this.leftInnerAxesLayoutStrategy.coordinateMode = e),
              this.notifyPropertyChanged(a.PROPERTY.COORDINATE_MODE);
          }
          get horizontalAxisPosition() {
            return this.horizontalAxisPositionProperty;
          }
          set horizontalAxisPosition(e) {
            (this.horizontalAxisPositionProperty = e),
              (this.topInnerAxesLayoutStrategy.axisPosition = e),
              (this.bottomInnerAxesLayoutStrategy.axisPosition = e),
              this.notifyPropertyChanged(a.PROPERTY.AXIS_POSITION_COORDINATE);
          }
          get verticalAxisPosition() {
            return this.verticalAxisPositionProperty;
          }
          set verticalAxisPosition(e) {
            (this.verticalAxisPositionProperty = e),
              (this.rightInnerAxesLayoutStrategy.axisPosition = e),
              (this.leftInnerAxesLayoutStrategy.axisPosition = e),
              this.notifyPropertyChanged(a.PROPERTY.AXIS_POSITION_COORDINATE);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                horizontalAxisPosition: this.horizontalAxisPosition,
                horizontalAxisPositionCoordinateMode:
                  this.horizontalAxisPositionCoordinateMode,
                verticalAxisPosition: this.verticalAxisPosition,
                verticalAxisPositionCoordinateMode:
                  this.verticalAxisPositionCoordinateMode,
              };
            return Object.assign(e, t), e;
          }
          notifyPropertyChanged(e) {
            var t;
            (null === (t = this.sciChartSurface) || void 0 === t
              ? void 0
              : t.invalidateElement) &&
              this.sciChartSurface.invalidateElement();
          }
          groupAxesByLayoutStrategy() {
            this.axesGroupedByLayoutStrategy.clear();
            const {
                topInnerAxes: e,
                bottomInnerAxes: t,
                leftInnerAxes: i,
                rightInnerAxes: s,
              } = this.axesGroupedByLayoutStrategy,
              o = (o) => {
                o.forEach((o) => {
                  const { axisAlignment: a } = o;
                  switch (((o.isInnerAxis = !0), a)) {
                    case r.EAxisAlignment.Top:
                      e.push(o);
                      break;
                    case r.EAxisAlignment.Bottom:
                      t.push(o);
                      break;
                    case r.EAxisAlignment.Left:
                      i.push(o);
                      break;
                    case r.EAxisAlignment.Right:
                      s.push(o);
                  }
                });
              };
            o(this.sciChartSurface.xAxes.asArray()),
              o(this.sciChartSurface.yAxes.asArray());
          }
        }
        t.CentralAxesLayoutManager = c;
      },
      2310: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ChartLayoutState = void 0);
        class i {
          constructor() {
            (this.leftInnerAreaSize = i.DEFAULT_SIZE),
              (this.topInnerAreaSize = i.DEFAULT_SIZE),
              (this.bottomInnerAreaSize = i.DEFAULT_SIZE),
              (this.rightInnerAreaSize = i.DEFAULT_SIZE),
              (this.leftOuterAreaSize = i.DEFAULT_SIZE),
              (this.topOuterAreaSize = i.DEFAULT_SIZE),
              (this.bottomOuterAreaSize = i.DEFAULT_SIZE),
              (this.rightOuterAreaSize = i.DEFAULT_SIZE);
          }
          clear() {
            (this.leftInnerAreaSize = i.DEFAULT_SIZE),
              (this.topInnerAreaSize = i.DEFAULT_SIZE),
              (this.bottomInnerAreaSize = i.DEFAULT_SIZE),
              (this.rightInnerAreaSize = i.DEFAULT_SIZE),
              (this.leftOuterAreaSize = i.DEFAULT_SIZE),
              (this.topOuterAreaSize = i.DEFAULT_SIZE),
              (this.bottomOuterAreaSize = i.DEFAULT_SIZE),
              (this.rightOuterAreaSize = i.DEFAULT_SIZE);
          }
        }
        (t.ChartLayoutState = i), (i.DEFAULT_SIZE = 0);
      },
      41344: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EInnerAxisPlacementCoordinateMode = void 0),
          ((i =
            t.EInnerAxisPlacementCoordinateMode ||
            (t.EInnerAxisPlacementCoordinateMode = {}))[(i.DataValue = 0)] =
            "DataValue"),
          (i[(i.Pixel = 1)] = "Pixel"),
          (i[(i.Relative = 2)] = "Relative");
      },
      45481: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LayoutManager = void 0);
        const r = i(45921),
          s = i(87459),
          o = i(38215),
          a = i(11043),
          n = i(28709),
          l = i(73785),
          d = i(60872),
          h = i(53521),
          u = i(2310),
          c = i(20639),
          p = i(83638),
          g = i(6153),
          y = i(24478),
          f = i(27282),
          v = i(27194),
          m = i(73145);
        t.LayoutManager = class {
          constructor(e) {
            (this.type = n.ELayoutManagerType.Default),
              (this.leftOuterAxesLayoutStrategyProperty =
                new g.LeftAlignedOuterAxisLayoutStrategy()),
              (this.rightOuterAxesLayoutStrategyProperty =
                new f.RightAlignedOuterAxisLayoutStrategy()),
              (this.topOuterAxesLayoutStrategyProperty =
                new m.TopAlignedOuterAxisLayoutStrategy()),
              (this.bottomOuterAxesLayoutStrategyProperty =
                new h.BottomAlignedOuterAxisLayoutStrategy()),
              (this.leftInnerAxesLayoutStrategy =
                new p.LeftAlignedInnerAxisLayoutStrategy()),
              (this.rightInnerAxesLayoutStrategy =
                new y.RightAlignedInnerAxisLayoutStrategy()),
              (this.topInnerAxesLayoutStrategy =
                new v.TopAlignedInnerAxisLayoutStrategy()),
              (this.bottomInnerAxesLayoutStrategy =
                new d.BottomAlignedInnerAxisLayoutStrategy()),
              (this.chartLayoutState = new u.ChartLayoutState()),
              (this.axesGroupedByLayoutStrategy = new c.LayoutStrategyAxes()),
              (this.leftOuterAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.LeftOuter,
                this.leftOuterAxesLayoutStrategy
              )),
              (this.rightOuterAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.RightOuter,
                this.rightOuterAxesLayoutStrategy
              )),
              (this.topOuterAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.TopOuter,
                this.topOuterAxesLayoutStrategy
              )),
              (this.bottomOuterAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.BottomOuter,
                this.bottomOuterAxesLayoutStrategy
              )),
              (this.leftInnerAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.LeftInner,
                this.leftInnerAxesLayoutStrategy
              )),
              (this.rightInnerAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.RightInner,
                this.rightInnerAxesLayoutStrategy
              )),
              (this.topInnerAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.TopInner,
                this.topInnerAxesLayoutStrategy
              )),
              (this.bottomInnerAxesLayoutStrategy = this.createStrategy(
                null == e ? void 0 : e.BottomInner,
                this.bottomInnerAxesLayoutStrategy
              ));
          }
          get leftOuterAxesLayoutStrategy() {
            return this.leftOuterAxesLayoutStrategyProperty;
          }
          set leftOuterAxesLayoutStrategy(e) {
            var t;
            const i = this.leftOuterAxesLayoutStrategyProperty;
            i !== e &&
              ((this.leftOuterAxesLayoutStrategyProperty = e),
              i.isStacked &&
                !e.isStacked &&
                (this.groupAxesByLayoutStrategy(),
                S(this.axesGroupedByLayoutStrategy.leftOuterAxes)),
              null === (t = this.sciChartSurface) ||
                void 0 === t ||
                t.invalidateElement());
          }
          get rightOuterAxesLayoutStrategy() {
            return this.rightOuterAxesLayoutStrategyProperty;
          }
          set rightOuterAxesLayoutStrategy(e) {
            var t;
            const i = this.rightOuterAxesLayoutStrategyProperty;
            i !== e &&
              ((this.rightOuterAxesLayoutStrategyProperty = e),
              i.isStacked &&
                !e.isStacked &&
                (this.groupAxesByLayoutStrategy(),
                S(this.axesGroupedByLayoutStrategy.rightOuterAxes)),
              null === (t = this.sciChartSurface) ||
                void 0 === t ||
                t.invalidateElement());
          }
          get topOuterAxesLayoutStrategy() {
            return this.topOuterAxesLayoutStrategyProperty;
          }
          set topOuterAxesLayoutStrategy(e) {
            var t;
            const i = this.topOuterAxesLayoutStrategyProperty;
            i !== e &&
              ((this.topOuterAxesLayoutStrategyProperty = e),
              i.isStacked &&
                !e.isStacked &&
                (this.groupAxesByLayoutStrategy(),
                S(this.axesGroupedByLayoutStrategy.topOuterAxes)),
              null === (t = this.sciChartSurface) ||
                void 0 === t ||
                t.invalidateElement());
          }
          get bottomOuterAxesLayoutStrategy() {
            return this.bottomOuterAxesLayoutStrategyProperty;
          }
          set bottomOuterAxesLayoutStrategy(e) {
            var t;
            const i = this.bottomOuterAxesLayoutStrategyProperty;
            i !== e &&
              ((this.bottomOuterAxesLayoutStrategyProperty = e),
              i.isStacked &&
                !e.isStacked &&
                (this.groupAxesByLayoutStrategy(),
                S(this.axesGroupedByLayoutStrategy.bottomOuterAxes)),
              null === (t = this.sciChartSurface) ||
                void 0 === t ||
                t.invalidateElement());
          }
          getAxisLayoutStrategy(e, t) {
            switch (e) {
              case o.EAxisAlignment.Left:
                return t
                  ? this.leftInnerAxesLayoutStrategy
                  : this.leftOuterAxesLayoutStrategy;
              case o.EAxisAlignment.Right:
                return t
                  ? this.rightInnerAxesLayoutStrategy
                  : this.rightOuterAxesLayoutStrategy;
              case o.EAxisAlignment.Top:
                return t
                  ? this.topInnerAxesLayoutStrategy
                  : this.topOuterAxesLayoutStrategy;
              case o.EAxisAlignment.Bottom:
                return t
                  ? this.bottomInnerAxesLayoutStrategy
                  : this.bottomOuterAxesLayoutStrategy;
              default:
                return (0, o.handleInvalidAxisAlignment)(e);
            }
          }
          layoutChart(e, t) {
            var i, r, s, o;
            this.groupAxesByLayoutStrategy();
            const a =
                null !== (i = null == t ? void 0 : t.right) && void 0 !== i
                  ? i
                  : 0,
              n =
                null !== (r = null == t ? void 0 : t.left) && void 0 !== r
                  ? r
                  : 0,
              l =
                null !== (s = null == t ? void 0 : t.top) && void 0 !== s
                  ? s
                  : 0,
              d =
                null !== (o = null == t ? void 0 : t.bottom) && void 0 !== o
                  ? o
                  : 0,
              h = e.width - n - a,
              u = e.height - l - d;
            try {
              this.measureTopOuterAxes(),
                this.measureBottomOuterAxes(),
                this.measureLeftOuterAxes(),
                this.measureRightOuterAxes(),
                this.measureTopInnerAxes(),
                this.measureBottomInnerAxes(),
                this.measureLeftInnerAxes(),
                this.measureRightInnerAxes();
              const e =
                  h -
                  this.chartLayoutState.leftOuterAreaSize -
                  this.chartLayoutState.rightOuterAreaSize,
                t =
                  u -
                  this.chartLayoutState.topOuterAreaSize -
                  this.chartLayoutState.bottomOuterAreaSize,
                i = n,
                r = i + this.chartLayoutState.leftOuterAreaSize,
                s = r + (e < 10 ? 10 : e),
                o = s + this.chartLayoutState.rightOuterAreaSize,
                a = l,
                d = a + this.chartLayoutState.topOuterAreaSize,
                c = d + (t < 10 ? 10 : t),
                p = c + this.chartLayoutState.bottomOuterAreaSize;
              this.sciChartSurface.drawSeriesBehindAxis
                ? this.layoutChartCenter(i, a, o, p)
                : this.layoutChartCenter(r, d, s, c),
                this.leftOuterAxesLayoutStrategy.layoutAxes(
                  i,
                  d,
                  r - this.sciChartSurface.leftViewportBorder,
                  c,
                  this.axesGroupedByLayoutStrategy.leftOuterAxes
                ),
                this.rightOuterAxesLayoutStrategy.layoutAxes(
                  s + this.sciChartSurface.rightViewportBorder,
                  d,
                  o,
                  c,
                  this.axesGroupedByLayoutStrategy.rightOuterAxes
                ),
                this.topOuterAxesLayoutStrategy.layoutAxes(
                  r,
                  a,
                  s,
                  d - this.sciChartSurface.topViewportBorder,
                  this.axesGroupedByLayoutStrategy.topOuterAxes
                ),
                this.bottomOuterAxesLayoutStrategy.layoutAxes(
                  r,
                  c + this.sciChartSurface.bottomViewportBorder,
                  s,
                  p,
                  this.axesGroupedByLayoutStrategy.bottomOuterAxes
                );
              const g = r + this.chartLayoutState.leftInnerAreaSize,
                y = s - this.chartLayoutState.rightInnerAreaSize,
                f = d + this.chartLayoutState.topInnerAreaSize,
                v = c - this.chartLayoutState.bottomInnerAreaSize;
              return (
                this.leftInnerAxesLayoutStrategy.layoutAxes(
                  r,
                  d,
                  g,
                  c,
                  this.axesGroupedByLayoutStrategy.leftInnerAxes
                ),
                this.rightInnerAxesLayoutStrategy.layoutAxes(
                  y,
                  d,
                  s,
                  c,
                  this.axesGroupedByLayoutStrategy.rightInnerAxes
                ),
                this.topInnerAxesLayoutStrategy.layoutAxes(
                  r,
                  d,
                  s,
                  f,
                  this.axesGroupedByLayoutStrategy.topInnerAxes
                ),
                this.bottomInnerAxesLayoutStrategy.layoutAxes(
                  r,
                  v,
                  s,
                  c,
                  this.axesGroupedByLayoutStrategy.bottomInnerAxes
                ),
                this.sciChartSurface.seriesViewRect
              );
            } finally {
              this.chartLayoutState.clear();
            }
          }
          toJSON() {
            const e = {
              BottomInner: this.bottomInnerAxesLayoutStrategy.toJSON(),
              BottomOuter: this.bottomOuterAxesLayoutStrategy.toJSON(),
              LeftInner: this.leftInnerAxesLayoutStrategy.toJSON(),
              LeftOuter: this.leftOuterAxesLayoutStrategy.toJSON(),
              RightInner: this.rightInnerAxesLayoutStrategy.toJSON(),
              RightOuter: this.rightOuterAxesLayoutStrategy.toJSON(),
              TopInner: this.topInnerAxesLayoutStrategy.toJSON(),
              TopOuter: this.topOuterAxesLayoutStrategy.toJSON(),
            };
            return { type: this.type, options: e };
          }
          measureLeftOuterAxes() {
            this.leftOuterAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.leftOuterAxes
            );
          }
          measureRightOuterAxes() {
            this.rightOuterAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.rightOuterAxes
            );
          }
          measureTopOuterAxes() {
            this.topOuterAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.topOuterAxes
            );
          }
          measureBottomOuterAxes() {
            this.bottomOuterAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.bottomOuterAxes
            );
          }
          measureLeftInnerAxes() {
            this.leftInnerAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.leftInnerAxes
            );
          }
          measureRightInnerAxes() {
            this.rightInnerAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.rightInnerAxes
            );
          }
          measureTopInnerAxes() {
            this.topInnerAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.topInnerAxes
            );
          }
          measureBottomInnerAxes() {
            this.bottomInnerAxesLayoutStrategy.measureAxes(
              this.sciChartSurface,
              this.chartLayoutState,
              this.axesGroupedByLayoutStrategy.bottomInnerAxes
            );
          }
          groupAxesByLayoutStrategy() {
            this.axesGroupedByLayoutStrategy.clear();
            const {
                topInnerAxes: e,
                bottomInnerAxes: t,
                leftInnerAxes: i,
                rightInnerAxes: r,
                topOuterAxes: s,
                bottomOuterAxes: a,
                leftOuterAxes: n,
                rightOuterAxes: l,
              } = this.axesGroupedByLayoutStrategy,
              d = (d) => {
                d.forEach((d) => {
                  const { axisAlignment: h, isInnerAxis: u, isVisible: c } = d;
                  if (u)
                    switch (h) {
                      case o.EAxisAlignment.Top:
                        e.push(d);
                        break;
                      case o.EAxisAlignment.Bottom:
                        t.push(d);
                        break;
                      case o.EAxisAlignment.Left:
                        i.push(d);
                        break;
                      case o.EAxisAlignment.Right:
                        r.push(d);
                    }
                  else
                    switch (h) {
                      case o.EAxisAlignment.Top:
                        s.push(d);
                        break;
                      case o.EAxisAlignment.Bottom:
                        a.push(d);
                        break;
                      case o.EAxisAlignment.Left:
                        n.push(d);
                        break;
                      case o.EAxisAlignment.Right:
                        l.push(d);
                    }
                });
              };
            d(this.sciChartSurface.xAxes.asArray()),
              d(this.sciChartSurface.yAxes.asArray());
          }
          layoutChartCenter(e, t, i, r) {
            this.setSeriesViewRect(e, t, i, r),
              (this.sciChartSurface.annotationUnderlaySurfaceViewRect =
                s.Rect.createWithCoords(e, t, i, r)),
              (this.sciChartSurface.annotationOverlaySurfaceViewRect =
                s.Rect.createWithCoords(e, t, i, r)),
              (this.sciChartSurface.chartModifierSurfaceViewRect =
                s.Rect.createWithCoords(e, t, i, r));
          }
          setSeriesViewRect(e, t, i, r) {
            const { seriesViewRect: o } = this.sciChartSurface,
              a = s.Rect.createWithCoords(e, t, i, r);
            (o && s.Rect.isEqual(o, a)) ||
              this.sciChartSurface.setSeriesViewRect(a);
          }
          createStrategy(e, t) {
            return e && e.type !== t.type
              ? "measureAxes" in e
                ? e
                : e.type === l.ELayoutStrategyType.Custom
                ? (0, r.createType)(
                    a.EBaseType.LayoutStrategy,
                    e.customType,
                    void 0,
                    e.options
                  )
                : (0, r.createType)(
                    a.EBaseType.LayoutStrategy,
                    e.type,
                    void 0,
                    e.options
                  )
              : t;
          }
        };
        const S = (e) => {
          e.length > 0 && (e[0].isPrimaryAxis = !0);
        };
      },
      20639: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LayoutStrategyAxes = void 0),
          (t.LayoutStrategyAxes = class {
            constructor() {
              (this.topInnerAxes = []),
                (this.bottomInnerAxes = []),
                (this.leftInnerAxes = []),
                (this.rightInnerAxes = []),
                (this.topOuterAxes = []),
                (this.bottomOuterAxes = []),
                (this.leftOuterAxes = []),
                (this.rightOuterAxes = []);
            }
            clear() {
              (this.topInnerAxes = []),
                (this.bottomInnerAxes = []),
                (this.leftInnerAxes = []),
                (this.rightInnerAxes = []),
                (this.topOuterAxes = []),
                (this.bottomOuterAxes = []),
                (this.leftOuterAxes = []),
                (this.rightOuterAxes = []);
            }
          });
      },
      83638: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LeftAlignedInnerAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(93326);
        class a extends o.BaseCenteredAxisLayoutStrategy {
          constructor(e) {
            super(e),
              (this.type = r.ELayoutStrategyType.LeftInner),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsRightStrategy);
          }
          measureAxes(e, t, i) {
            this.sciChartSurface = e;
            let r = 0;
            i.forEach((e) => {
              e.measure(),
                this.updateAxisLayoutState(e),
                (r += (0, s.getVerticalAxisRequiredSize)(e.axisLayoutState));
            }),
              (t.leftInnerAreaSize = Math.max(t.leftInnerAreaSize, r));
          }
          layoutAxes(e, t, i, r, o) {
            if (
              (o.forEach((e) => {
                (e.axisLength = void 0), (e.offset = 0);
              }),
              0 === o.length)
            )
              return;
            let a = e;
            if (void 0 !== this.axisPosition) {
              const e =
                this.sciChartSurface.getXAxisById(this.orthogonalAxisId) ||
                this.sciChartSurface.getYAxisById(this.orthogonalAxisId);
              if (!e || !e.isHorizontalAxis)
                throw new Error(
                  "orthogonalAxisId should be a valid id of horizontal axis on the surface!"
                );
              const t = e.getCurrentCoordinateCalculator();
              a =
                (0, s.getCoordinateWithCoordinateMode)(
                  this.axisPosition,
                  t,
                  this.coordinateMode
                ) + e.parentSurface.seriesViewRect.left;
            }
            this.layoutAxesFromLeftToRight(a, t, i, r, o);
          }
        }
        t.LeftAlignedInnerAxisLayoutStrategy = a;
      },
      6153: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LeftAlignedOuterAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(21843);
        class a extends o.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = r.ELayoutStrategyType.LeftOuter),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsLeftStrategy);
          }
          measureAxes(e, t, i) {
            var r, o;
            let a =
              null !==
                (o =
                  null === (r = e.adjustedPadding) || void 0 === r
                    ? void 0
                    : r.left) && void 0 !== o
                ? o
                : 0;
            (a += e.leftViewportBorder + e.leftCanvasBorder),
              i.forEach((e) => {
                e.measure(),
                  this.updateAxisLayoutState(e),
                  (a += (0, s.getVerticalAxisRequiredSize)(e.axisLayoutState)),
                  this.updateTopAndBottomChartLayoutState(
                    t,
                    e.axisLayoutState.additionalTopSize,
                    e.axisLayoutState.additionalBottomSize
                  );
              }),
              (t.leftOuterAreaSize = Math.max(t.leftOuterAreaSize, a));
          }
          layoutAxes(e, t, i, r, s) {
            s.forEach((e) => {
              (e.axisLength = void 0), (e.offset = 0);
            }),
              this.layoutAxesFromRightToLeft(e, t, i, r, s);
          }
        }
        t.LeftAlignedOuterAxisLayoutStrategy = a;
      },
      55173: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LeftAlignedOuterVerticallyStackedAxisLayoutStrategy = void 0);
        const r = i(87459),
          s = i(73785),
          o = i(5100),
          a = i(21843);
        class n extends a.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = s.ELayoutStrategyType.LeftStacked),
              (this.isStacked = !0),
              (this.layoutAxisPartsStrategy = o.layoutAxisPartsLeftStrategy);
          }
          measureAxes(e, t, i) {
            var r;
            let s = 0;
            i.forEach((e) => {
              e.measure(), this.updateAxisLayoutState(e);
              const t = (0, o.getVerticalAxisRequiredSize)(e.axisLayoutState);
              s = t > s ? t : s;
            });
            const [a] = i,
              n = i[i.length - 1];
            this.updateTopAndBottomChartLayoutState(
              t,
              null == a ? void 0 : a.axisLayoutState.additionalTopSize,
              null == n ? void 0 : n.axisLayoutState.additionalBottomSize
            );
            const {
              leftViewportBorder: l,
              leftCanvasBorder: d,
              adjustedPadding: h,
            } = e;
            (s +=
              null !== (r = l + d + (null == h ? void 0 : h.left)) &&
              void 0 !== r
                ? r
                : 0),
              (t.leftOuterAreaSize = Math.max(t.leftOuterAreaSize, s));
          }
          layoutAxes(e, t, i, s, a) {
            const n = s - t,
              [l] = a,
              d = a[a.length - 1],
              h = a.filter((e) => void 0 !== e.stackedAxisLength),
              u = a.reduce(
                (e, t) =>
                  e -
                  t.axisLayoutState.additionalBottomSize -
                  t.axisLayoutState.additionalTopSize,
                n +
                  (null == l ? void 0 : l.axisLayoutState.additionalTopSize) +
                  (null == d ? void 0 : d.axisLayoutState.additionalBottomSize)
              ),
              c = h.reduce(
                (e, t) => e + this.calculateTotalAxisHeight(t, u),
                0
              ),
              p =
                n +
                (null == l ? void 0 : l.axisLayoutState.additionalTopSize) +
                (null == d ? void 0 : d.axisLayoutState.additionalBottomSize) -
                c;
            if (p < 0)
              throw new Error(
                `Left stacked axes with defined size total ${c} pixels which is ${-p} more than the space available`
              );
            const g = p / (a.length - h.length);
            let y =
              t - (null == l ? void 0 : l.axisLayoutState.additionalTopSize);
            a.forEach((e) => {
              const {
                  axisSize: s,
                  additionalRightSize: a,
                  additionalBottomSize: n,
                  additionalTopSize: l,
                } = e.axisLayoutState,
                d = i - a,
                h = d - s,
                c =
                  void 0 !== e.stackedAxisLength
                    ? this.calculateTotalAxisHeight(e, u)
                    : g,
                p = y + c - n;
              (y += l),
                (e.offset = y - t),
                (e.axisLength = p - y),
                (e.isPrimaryAxis = !0),
                (e.viewRect = r.Rect.createWithCoords(h, y, d, p)),
                (y = p + n),
                (0, o.layoutAxisParts)(e, this.layoutAxisPartsStrategy);
            });
          }
        }
        t.LeftAlignedOuterVerticallyStackedAxisLayoutStrategy = n;
      },
      24478: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RightAlignedInnerAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(93326);
        class a extends o.BaseCenteredAxisLayoutStrategy {
          constructor(e) {
            super(e),
              (this.type = r.ELayoutStrategyType.RightInner),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsLeftStrategy);
          }
          measureAxes(e, t, i) {
            this.sciChartSurface = e;
            let r = 0;
            i.forEach((e) => {
              e.measure(),
                this.updateAxisLayoutState(e),
                (r += (0, s.getVerticalAxisRequiredSize)(e.axisLayoutState));
            }),
              (t.rightInnerAreaSize = Math.max(t.rightInnerAreaSize, r));
          }
          layoutAxes(e, t, i, r, o) {
            if (
              (o.forEach((e) => {
                (e.axisLength = void 0), (e.offset = 0);
              }),
              0 === o.length)
            )
              return;
            let a = i;
            if (void 0 !== this.axisPosition) {
              const e =
                this.sciChartSurface.getXAxisById(this.orthogonalAxisId) ||
                this.sciChartSurface.getYAxisById(this.orthogonalAxisId);
              if (!e || !e.isHorizontalAxis)
                throw new Error(
                  "orthogonalAxisId should be a valid id of horizontal axis on the surface!"
                );
              const t = e.getCurrentCoordinateCalculator();
              a =
                (0, s.getCoordinateWithCoordinateMode)(
                  this.axisPosition,
                  t,
                  this.coordinateMode
                ) + e.parentSurface.seriesViewRect.left;
            }
            this.layoutAxesFromRightToLeft(e, t, a, r, o);
          }
        }
        t.RightAlignedInnerAxisLayoutStrategy = a;
      },
      27282: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RightAlignedOuterAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(21843);
        class a extends o.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = r.ELayoutStrategyType.RightOuter),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsRightStrategy);
          }
          measureAxes(e, t, i) {
            var r, o;
            let a =
              null !==
                (o =
                  null === (r = e.adjustedPadding) || void 0 === r
                    ? void 0
                    : r.right) && void 0 !== o
                ? o
                : 0;
            (a += e.rightViewportBorder + e.rightCanvasBorder),
              i.forEach((e) => {
                e.measure(),
                  this.updateAxisLayoutState(e),
                  (a += (0, s.getVerticalAxisRequiredSize)(e.axisLayoutState)),
                  this.updateTopAndBottomChartLayoutState(
                    t,
                    e.axisLayoutState.additionalTopSize,
                    e.axisLayoutState.additionalBottomSize
                  );
              }),
              (t.rightOuterAreaSize = Math.max(t.rightOuterAreaSize, a));
          }
          layoutAxes(e, t, i, r, s) {
            s.forEach((e) => {
              (e.axisLength = void 0), (e.offset = 0);
            }),
              this.layoutAxesFromLeftToRight(e, t, i, r, s);
          }
        }
        t.RightAlignedOuterAxisLayoutStrategy = a;
      },
      12119: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RightAlignedOuterVerticallyStackedAxisLayoutStrategy = void 0);
        const r = i(87459),
          s = i(73785),
          o = i(5100),
          a = i(21843);
        class n extends a.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = s.ELayoutStrategyType.RightStacked),
              (this.isStacked = !0),
              (this.layoutAxisPartsStrategy = o.layoutAxisPartsRightStrategy);
          }
          measureAxes(e, t, i) {
            var r;
            let s = 0;
            i.forEach((e) => {
              e.measure(), this.updateAxisLayoutState(e);
              const t = (0, o.getVerticalAxisRequiredSize)(e.axisLayoutState);
              s = t > s ? t : s;
            });
            const [a] = i,
              n = i[i.length - 1];
            this.updateTopAndBottomChartLayoutState(
              t,
              null == a ? void 0 : a.axisLayoutState.additionalTopSize,
              null == n ? void 0 : n.axisLayoutState.additionalBottomSize
            );
            const {
              rightViewportBorder: l,
              rightCanvasBorder: d,
              adjustedPadding: h,
            } = e;
            (s +=
              null !== (r = l + d + (null == h ? void 0 : h.right)) &&
              void 0 !== r
                ? r
                : 0),
              (t.rightOuterAreaSize = Math.max(t.rightOuterAreaSize, s));
          }
          layoutAxes(e, t, i, s, a) {
            const n = s - t,
              [l] = a,
              d = a[a.length - 1],
              h = a.filter((e) => e.stackedAxisLength),
              u = a.reduce(
                (e, t) =>
                  e -
                  t.axisLayoutState.additionalBottomSize -
                  t.axisLayoutState.additionalTopSize,
                n +
                  (null == l ? void 0 : l.axisLayoutState.additionalTopSize) +
                  (null == d ? void 0 : d.axisLayoutState.additionalBottomSize)
              ),
              c = h.reduce(
                (e, t) => e + this.calculateTotalAxisHeight(t, u),
                0
              ),
              p =
                n +
                (null == l ? void 0 : l.axisLayoutState.additionalTopSize) +
                (null == d ? void 0 : d.axisLayoutState.additionalBottomSize) -
                c;
            if (p < 0)
              throw new Error(
                `Right stacked axes with defined size total ${c} pixels which is ${-p} more than the space available`
              );
            const g = p / (a.length - h.length);
            let y =
              t - (null == l ? void 0 : l.axisLayoutState.additionalTopSize);
            a.forEach((i) => {
              const {
                  axisSize: s,
                  additionalLeftSize: a,
                  additionalBottomSize: n,
                  additionalTopSize: l,
                } = i.axisLayoutState,
                d = e + a,
                h = d + s,
                c = i.stackedAxisLength
                  ? this.calculateTotalAxisHeight(i, u)
                  : g,
                p = y + c - n;
              (y += l),
                (i.offset = y - t),
                (i.axisLength = p - y),
                (i.isPrimaryAxis = !0),
                (i.viewRect = r.Rect.createWithCoords(d, y, h, p)),
                (y = p + n),
                (0, o.layoutAxisParts)(i, this.layoutAxisPartsStrategy);
            });
          }
        }
        t.RightAlignedOuterVerticallyStackedAxisLayoutStrategy = n;
      },
      66086: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartHorizontalGroup = void 0);
        const r = i(87108),
          s = i(28709),
          o = i(45481),
          a = i(8959);
        t.SciChartHorizontalGroup = class {
          constructor() {
            (this.groupTopSize = 0),
              (this.groupBottomSize = 0),
              (this.layoutManagers = []),
              (this.topOuterLayoutSizes = {}),
              (this.bottomOuterLayoutSizes = {});
          }
          addSurfaceToGroup(e) {
            let t = e.layoutManager;
            t.type !== s.ELayoutManagerType.Synchronised
              ? ((t = new a.SynchronizedLayoutManager(void 0, this)),
                (t.bottomInnerAxesLayoutStrategy =
                  e.layoutManager.bottomInnerAxesLayoutStrategy),
                (t.bottomOuterAxesLayoutStrategy =
                  e.layoutManager.bottomOuterAxesLayoutStrategy),
                (t.leftInnerAxesLayoutStrategy =
                  e.layoutManager.leftInnerAxesLayoutStrategy),
                (t.leftOuterAxesLayoutStrategy =
                  e.layoutManager.leftOuterAxesLayoutStrategy),
                (t.rightInnerAxesLayoutStrategy =
                  e.layoutManager.rightInnerAxesLayoutStrategy),
                (t.rightOuterAxesLayoutStrategy =
                  e.layoutManager.rightOuterAxesLayoutStrategy),
                (t.topInnerAxesLayoutStrategy =
                  e.layoutManager.topInnerAxesLayoutStrategy),
                (t.topOuterAxesLayoutStrategy =
                  e.layoutManager.topOuterAxesLayoutStrategy),
                (e.layoutManager = t))
              : (t.horizontalGroup = this),
              this.layoutManagers.push(t),
              e.layoutManager.layoutChart(
                e.renderSurface.viewportSize,
                this.calculateMaxTitleSize()
              ),
              this.synchronizeAxisSizes(),
              e.invalidateElement();
          }
          removeSurface(e) {
            const t = e.layoutManager,
              i = this.layoutManagers.findIndex((e) => e === t);
            if (i < 0)
              throw new Error(`Surface ${e.id} not found in Horizontal Group!`);
            if ((this.layoutManagers.splice(i, 1), t.verticalGroup))
              t.horizontalGroup = void 0;
            else {
              const i = new o.LayoutManager();
              (i.leftInnerAxesLayoutStrategy = t.leftInnerAxesLayoutStrategy),
                (i.leftOuterAxesLayoutStrategy = t.leftOuterAxesLayoutStrategy),
                (i.rightInnerAxesLayoutStrategy =
                  t.rightInnerAxesLayoutStrategy),
                (i.rightOuterAxesLayoutStrategy =
                  t.rightOuterAxesLayoutStrategy),
                (i.bottomInnerAxesLayoutStrategy =
                  t.bottomInnerAxesLayoutStrategy),
                (i.bottomOuterAxesLayoutStrategy =
                  t.bottomOuterAxesLayoutStrategy),
                (i.topInnerAxesLayoutStrategy = t.topInnerAxesLayoutStrategy),
                (i.topOuterAxesLayoutStrategy = t.topOuterAxesLayoutStrategy),
                (e.layoutManager = i);
            }
            e.layoutManager.layoutChart(
              e.renderSurface.viewportSize,
              e.chartTitleRenderer.titleOffset
            ),
              this.onTopSizeChanged(t.id, 0),
              this.onBottomSizeChanged(t.id, 0),
              delete this.topOuterLayoutSizes[t.id],
              delete this.bottomOuterLayoutSizes[t.id],
              this.synchronizeAxisSizes(),
              e.invalidateElement();
          }
          calculateMaxTitleSize() {
            let e = new r.Thickness(0, 0, 0, 0);
            return (
              this.layoutManagers.forEach((t) => {
                const i = t.sciChartSurface.chartTitleRenderer.titleOffset;
                e = r.Thickness.mergeMax(
                  e,
                  new r.Thickness(i.top, 0, i.bottom, 0)
                );
              }),
              e
            );
          }
          synchronizeAxisSizes() {
            this.layoutManagers.forEach((e) => {
              e.trySynchronizeLayouts();
            });
          }
          onTopSizeChanged(e, t) {
            (this.topOuterLayoutSizes[e] = t),
              (this.groupTopSize = n(this.topOuterLayoutSizes));
          }
          onBottomSizeChanged(e, t) {
            (this.bottomOuterLayoutSizes[e] = t),
              (this.groupBottomSize = n(this.bottomOuterLayoutSizes));
          }
        };
        const n = (e) => {
          let t = 0;
          return (
            Object.keys(e).forEach((i) => {
              t = Math.max(t, e[i]);
            }),
            t
          );
        };
      },
      78499: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartVerticalGroup = void 0);
        const r = i(87108),
          s = i(28709),
          o = i(45481),
          a = i(8959);
        t.SciChartVerticalGroup = class {
          constructor() {
            (this.groupRightSize = 0),
              (this.groupLeftSize = 0),
              (this.layoutManagers = []),
              (this.leftOuterLayoutSizes = {}),
              (this.rightOuterLayoutSizes = {});
          }
          addSurfaceToGroup(e) {
            let t = e.layoutManager;
            t.type !== s.ELayoutManagerType.Synchronised
              ? ((t = new a.SynchronizedLayoutManager(this)),
                (t.bottomInnerAxesLayoutStrategy =
                  e.layoutManager.bottomInnerAxesLayoutStrategy),
                (t.bottomOuterAxesLayoutStrategy =
                  e.layoutManager.bottomOuterAxesLayoutStrategy),
                (t.leftInnerAxesLayoutStrategy =
                  e.layoutManager.leftInnerAxesLayoutStrategy),
                (t.leftOuterAxesLayoutStrategy =
                  e.layoutManager.leftOuterAxesLayoutStrategy),
                (t.rightInnerAxesLayoutStrategy =
                  e.layoutManager.rightInnerAxesLayoutStrategy),
                (t.rightOuterAxesLayoutStrategy =
                  e.layoutManager.rightOuterAxesLayoutStrategy),
                (t.topInnerAxesLayoutStrategy =
                  e.layoutManager.topInnerAxesLayoutStrategy),
                (t.topOuterAxesLayoutStrategy =
                  e.layoutManager.topOuterAxesLayoutStrategy),
                (e.layoutManager = t))
              : (t.verticalGroup = this),
              this.layoutManagers.push(t),
              e.layoutManager.layoutChart(
                e.renderSurface.viewportSize,
                this.calculateMaxTitleSize()
              ),
              this.synchronizeAxisSizes(),
              e.invalidateElement();
          }
          removeSurface(e) {
            const t = e.layoutManager,
              i = this.layoutManagers.findIndex((e) => e === t);
            if (i < 0)
              throw new Error(`Surface ${e.id} not found in Vertical Group!`);
            if ((this.layoutManagers.splice(i, 1), t.horizontalGroup))
              t.verticalGroup = void 0;
            else {
              const i = new o.LayoutManager();
              (i.bottomInnerAxesLayoutStrategy =
                t.bottomInnerAxesLayoutStrategy),
                (i.bottomOuterAxesLayoutStrategy =
                  t.bottomOuterAxesLayoutStrategy),
                (i.topInnerAxesLayoutStrategy = t.topInnerAxesLayoutStrategy),
                (i.topOuterAxesLayoutStrategy = t.topOuterAxesLayoutStrategy),
                (i.leftInnerAxesLayoutStrategy = t.leftInnerAxesLayoutStrategy),
                (i.leftOuterAxesLayoutStrategy = t.leftOuterAxesLayoutStrategy),
                (i.rightInnerAxesLayoutStrategy =
                  t.rightInnerAxesLayoutStrategy),
                (i.rightOuterAxesLayoutStrategy =
                  t.rightOuterAxesLayoutStrategy),
                (e.layoutManager = i);
            }
            e.layoutManager.layoutChart(
              e.renderSurface.viewportSize,
              e.chartTitleRenderer.titleOffset
            ),
              this.onLeftSizeChanged(t.id, 0),
              this.onRightSizeChanged(t.id, 0),
              delete this.leftOuterLayoutSizes[t.id],
              delete this.rightOuterLayoutSizes[t.id],
              this.synchronizeAxisSizes();
          }
          calculateMaxTitleSize() {
            let e = new r.Thickness(0, 0, 0, 0);
            return (
              this.layoutManagers.forEach((t) => {
                const i = t.sciChartSurface.chartTitleRenderer.titleOffset;
                e = r.Thickness.mergeMax(
                  e,
                  new r.Thickness(0, i.right, 0, i.left)
                );
              }),
              e
            );
          }
          synchronizeAxisSizes() {
            this.layoutManagers.forEach((e) => {
              e.trySynchronizeLayouts();
            });
          }
          onLeftSizeChanged(e, t) {
            (this.leftOuterLayoutSizes[e] = t),
              (this.groupLeftSize = n(this.leftOuterLayoutSizes));
          }
          onRightSizeChanged(e, t) {
            (this.rightOuterLayoutSizes[e] = t),
              (this.groupRightSize = n(this.rightOuterLayoutSizes));
          }
        };
        const n = (e) => {
          let t = 0;
          return (
            Object.keys(e).forEach((i) => {
              t = Math.max(t, e[i]);
            }),
            t
          );
        };
      },
      8959: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SynchronizedLayoutManager = void 0);
        const r = i(28709),
          s = i(73538),
          o = i(45481),
          a = i(87108);
        class n extends o.LayoutManager {
          constructor(e, t, i) {
            super(i),
              (this.type = r.ELayoutManagerType.Synchronised),
              (this.id = (0, s.generateGuid)()),
              (this.lastLeftOuterAreaSize = 0),
              (this.lastRightOuterAreaSize = 0),
              (this.lastTopOuterAreaSize = 0),
              (this.lastBottomOuterAreaSize = 0),
              (this.verticalGroup = null != e ? e : void 0),
              (this.horizontalGroup = null != t ? t : void 0);
          }
          layoutChart(e, t) {
            if (this.verticalGroup && this.horizontalGroup) {
              const i = a.Thickness.mergeMax(
                  this.verticalGroup.calculateMaxTitleSize(),
                  this.horizontalGroup.calculateMaxTitleSize()
                ),
                r = a.Thickness.mergeMax(t, i),
                s = super.layoutChart(e, r);
              return (
                this.verticalGroup.synchronizeAxisSizes(),
                this.horizontalGroup.synchronizeAxisSizes(),
                s
              );
            }
            if (this.verticalGroup) {
              const i = super.layoutChart(
                e,
                a.Thickness.mergeMax(
                  t,
                  this.verticalGroup.calculateMaxTitleSize()
                )
              );
              return this.verticalGroup.synchronizeAxisSizes(), i;
            }
            if (this.horizontalGroup) {
              const i = super.layoutChart(
                e,
                a.Thickness.mergeMax(
                  t,
                  this.horizontalGroup.calculateMaxTitleSize()
                )
              );
              return this.horizontalGroup.synchronizeAxisSizes(), i;
            }
            return super.layoutChart(e, t);
          }
          trySynchronizeLayouts() {
            this.verticalGroup &&
              ((this.lastLeftOuterAreaSize ===
                this.verticalGroup.groupLeftSize &&
                this.lastRightOuterAreaSize ===
                  this.verticalGroup.groupRightSize) ||
                this.sciChartSurface.invalidateElement()),
              this.horizontalGroup &&
                ((this.lastTopOuterAreaSize ===
                  this.horizontalGroup.groupTopSize &&
                  this.lastBottomOuterAreaSize ===
                    this.horizontalGroup.groupBottomSize) ||
                  this.sciChartSurface.invalidateElement());
          }
          measureLeftOuterAxes() {
            if ((super.measureLeftOuterAxes(), !this.verticalGroup))
              return void super.measureLeftOuterAxes();
            this.verticalGroup.onLeftSizeChanged(
              this.id,
              this.chartLayoutState.leftOuterAreaSize
            );
            const e = Math.max(
              this.chartLayoutState.leftOuterAreaSize,
              this.verticalGroup.groupLeftSize
            );
            if (this.axesGroupedByLayoutStrategy.leftOuterAxes.length > 0) {
              const t =
                  this.axesGroupedByLayoutStrategy.leftOuterAxes[
                    this.axesGroupedByLayoutStrategy.leftOuterAxes.length - 1
                  ],
                i =
                  this.chartLayoutState.leftOuterAreaSize -
                  t.axisLayoutState.axisSize;
              t.axisLayoutState.axisSize = e - i;
            }
            (this.chartLayoutState.leftOuterAreaSize = e),
              (this.lastLeftOuterAreaSize = e);
          }
          measureRightOuterAxes() {
            if ((super.measureRightOuterAxes(), !this.verticalGroup))
              return void super.measureRightOuterAxes();
            this.verticalGroup.onRightSizeChanged(
              this.id,
              this.chartLayoutState.rightOuterAreaSize
            );
            const e = Math.max(
              this.chartLayoutState.rightOuterAreaSize,
              this.verticalGroup.groupRightSize
            );
            if (this.axesGroupedByLayoutStrategy.rightOuterAxes.length > 0) {
              const t =
                  this.axesGroupedByLayoutStrategy.rightOuterAxes[
                    this.axesGroupedByLayoutStrategy.rightOuterAxes.length - 1
                  ],
                i =
                  this.chartLayoutState.rightOuterAreaSize -
                  t.axisLayoutState.axisSize;
              t.axisLayoutState.axisSize = e - i;
            }
            (this.chartLayoutState.rightOuterAreaSize = e),
              (this.lastRightOuterAreaSize = e);
          }
          measureTopOuterAxes() {
            if ((super.measureTopOuterAxes(), !this.horizontalGroup)) return;
            this.horizontalGroup.onTopSizeChanged(
              this.id,
              this.chartLayoutState.topOuterAreaSize
            );
            const e = Math.max(
              this.chartLayoutState.topOuterAreaSize,
              this.horizontalGroup.groupTopSize
            );
            if (this.axesGroupedByLayoutStrategy.topOuterAxes.length > 0) {
              const t =
                  this.axesGroupedByLayoutStrategy.topOuterAxes[
                    this.axesGroupedByLayoutStrategy.topOuterAxes.length - 1
                  ],
                i =
                  this.chartLayoutState.topOuterAreaSize -
                  t.axisLayoutState.axisSize;
              t.axisLayoutState.axisSize = e - i;
            }
            (this.chartLayoutState.topOuterAreaSize = e),
              (this.lastTopOuterAreaSize = e);
          }
          measureBottomOuterAxes() {
            if ((super.measureBottomOuterAxes(), !this.horizontalGroup)) return;
            this.horizontalGroup.onBottomSizeChanged(
              this.id,
              this.chartLayoutState.bottomOuterAreaSize
            );
            const e = Math.max(
              this.chartLayoutState.bottomOuterAreaSize,
              this.horizontalGroup.groupBottomSize
            );
            if (this.axesGroupedByLayoutStrategy.bottomOuterAxes.length > 0) {
              const t =
                  this.axesGroupedByLayoutStrategy.bottomOuterAxes[
                    this.axesGroupedByLayoutStrategy.bottomOuterAxes.length - 1
                  ],
                i =
                  this.chartLayoutState.bottomOuterAreaSize -
                  t.axisLayoutState.axisSize;
              t.axisLayoutState.axisSize = e - i;
            }
            (this.chartLayoutState.bottomOuterAreaSize = e),
              (this.lastBottomOuterAreaSize = e);
          }
        }
        t.SynchronizedLayoutManager = n;
      },
      27194: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TopAlignedInnerAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(93326);
        class a extends o.BaseCenteredAxisLayoutStrategy {
          constructor(e) {
            super(e),
              (this.type = r.ELayoutStrategyType.TopInner),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsBottomStrategy);
          }
          measureAxes(e, t, i) {
            this.sciChartSurface = e;
            let r = 0;
            i.forEach((e) => {
              e.measure(),
                this.updateAxisLayoutState(e),
                (r += (0, s.getHorizontalAxisRequiredSize)(e.axisLayoutState));
            }),
              (t.topInnerAreaSize = Math.max(t.topInnerAreaSize, r));
          }
          layoutAxes(e, t, i, r, o) {
            if (
              (o.forEach((e) => {
                (e.axisLength = void 0), (e.offset = 0);
              }),
              0 === o.length)
            )
              return;
            let a = t;
            if (void 0 !== this.axisPosition) {
              const e =
                this.sciChartSurface.getYAxisById(this.orthogonalAxisId) ||
                this.sciChartSurface.getXAxisById(this.orthogonalAxisId);
              if (!e || e.isHorizontalAxis)
                throw new Error(
                  "orthogonalAxisId should be a valid id of vertical axis on the surface!"
                );
              const t = e.getCurrentCoordinateCalculator();
              a =
                (0, s.getCoordinateWithCoordinateMode)(
                  this.axisPosition,
                  t,
                  this.coordinateMode
                ) + e.viewRect.top;
            }
            this.layoutAxesFromTopToBottom(e, a, i, r, o);
          }
        }
        t.TopAlignedInnerAxisLayoutStrategy = a;
      },
      73145: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TopAlignedOuterAxisLayoutStrategy = void 0);
        const r = i(73785),
          s = i(5100),
          o = i(21843);
        class a extends o.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = r.ELayoutStrategyType.TopOuter),
              (this.layoutAxisPartsStrategy = s.layoutAxisPartsTopStrategy);
          }
          measureAxes(e, t, i) {
            var r, o;
            let a =
              null !==
                (o =
                  null === (r = e.adjustedPadding) || void 0 === r
                    ? void 0
                    : r.top) && void 0 !== o
                ? o
                : 0;
            (a += e.topViewportBorder + e.topCanvasBorder),
              i.forEach((e) => {
                e.measure(),
                  this.updateAxisLayoutState(e),
                  (a += (0, s.getHorizontalAxisRequiredSize)(
                    e.axisLayoutState
                  )),
                  this.updateLeftAndRightChartLayoutState(
                    t,
                    e.axisLayoutState.additionalLeftSize,
                    e.axisLayoutState.additionalRightSize
                  );
              }),
              (t.topOuterAreaSize = Math.max(t.topOuterAreaSize, a));
          }
          layoutAxes(e, t, i, r, s) {
            s.forEach((e) => {
              (e.axisLength = void 0), (e.offset = 0);
            }),
              this.layoutAxesFromBottomToTop(e, t, i, r, s);
          }
        }
        t.TopAlignedOuterAxisLayoutStrategy = a;
      },
      55696: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TopAlignedOuterHorizontallyStackedAxisLayoutStrategy = void 0);
        const r = i(87459),
          s = i(73785),
          o = i(5100),
          a = i(21843);
        class n extends a.BaseAxisLayoutStrategy {
          constructor() {
            super(),
              (this.type = s.ELayoutStrategyType.TopStacked),
              (this.isStacked = !0),
              (this.layoutAxisPartsStrategy = o.layoutAxisPartsTopStrategy);
          }
          measureAxes(e, t, i) {
            var r;
            let s = 0;
            i.forEach((e) => {
              e.measure(), this.updateAxisLayoutState(e);
              const t = (0, o.getHorizontalAxisRequiredSize)(e.axisLayoutState);
              s = t > s ? t : s;
            });
            const [a] = i,
              n = i[i.length - 1];
            this.updateLeftAndRightChartLayoutState(
              t,
              null == a ? void 0 : a.axisLayoutState.additionalLeftSize,
              null == n ? void 0 : n.axisLayoutState.additionalRightSize
            );
            const {
              topViewportBorder: l,
              topCanvasBorder: d,
              adjustedPadding: h,
            } = e;
            (s +=
              null !== (r = l + d + (null == h ? void 0 : h.top)) &&
              void 0 !== r
                ? r
                : 0),
              (t.topOuterAreaSize = Math.max(t.topOuterAreaSize, s));
          }
          layoutAxes(e, t, i, s, a) {
            const n = i - e,
              [l] = a,
              d = a[a.length - 1],
              h = a.filter((e) => e.stackedAxisLength),
              u = a.reduce(
                (e, t) =>
                  e -
                  t.axisLayoutState.additionalBottomSize -
                  t.axisLayoutState.additionalTopSize,
                n +
                  (null == l ? void 0 : l.axisLayoutState.additionalLeftSize) +
                  (null == d ? void 0 : d.axisLayoutState.additionalRightSize)
              ),
              c = h.reduce((e, t) => e + this.calculateTotalAxisWidth(t, u), 0),
              p =
                n +
                (null == l ? void 0 : l.axisLayoutState.additionalLeftSize) +
                (null == d ? void 0 : d.axisLayoutState.additionalRightSize) -
                c;
            if (p < 0)
              throw new Error(
                `Top stacked axes with defined size total ${c} pixels which is ${-p} more than the space available`
              );
            const g = p / (a.length - h.length);
            let y =
              e - (null == l ? void 0 : l.axisLayoutState.additionalLeftSize);
            a.forEach((t) => {
              const {
                  axisSize: i,
                  additionalLeftSize: a,
                  additionalRightSize: n,
                  additionalBottomSize: l,
                } = t.axisLayoutState,
                d = s - l,
                h = d - i,
                c = t.stackedAxisLength
                  ? this.calculateTotalAxisWidth(t, u)
                  : g,
                p = y + c - n;
              (y += a),
                (t.offset = y - e),
                (t.axisLength = p - y),
                (t.isPrimaryAxis = !0),
                (t.viewRect = r.Rect.createWithCoords(y, h, p, d)),
                (y = p + n),
                (0, o.layoutAxisParts)(t, this.layoutAxisPartsStrategy);
            });
          }
        }
        t.TopAlignedOuterHorizontallyStackedAxisLayoutStrategy = n;
      },
      73105: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).AXIS_POSITION_COORDINATE =
            "AXIS_POSITION_COORDINATE"),
          (i.COORDINATE_MODE = "COORDINATE_MODE"),
          (i.VERTICAL_AXIS_ID = "VERTICAL_AXIS_ID");
      },
      24933: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getWindowedYRange = t.getIndicesRange = t.BaseDataSeries = void 0);
        const r = i(45921),
          s = i(55023),
          o = i(56744),
          a = i(3214),
          n = i(23866),
          l = i(98140),
          d = i(11043),
          h = i(26361),
          u = i(9073),
          c = i(45215),
          p = i(46544),
          g = i(73538),
          y = i(72934),
          f = i(33435),
          v = i(84366),
          m = i(51885),
          S = i(33906);
        class P extends s.DeletableEntity {
          constructor(e, t) {
            var i, s, o, l, h, u, c;
            if (
              (super(),
              (this.dataChanged = new a.EventHandler()),
              (this.dataDistributionCalculator =
                new f.DataDistributionCalculator()),
              (this.minXSpacing = 0),
              (this.doubleVectorProvider = new v.DoubleVectorProvider()),
              (this.isSortedProperty = void 0),
              (this.containsNaNProperty = void 0),
              (this.isEvenlySpacedProperty = !1),
              (this.metadataGeneratorProperty = void 0),
              (this.changeCountProperty = 0),
              (this.fifoCapacityProperty = void 0),
              (this.fifoSweepingProperty = !1),
              (this.fifoSweepingGapProperty = 1),
              (this.webAssemblyContext = e),
              (this.id =
                null !== (i = null == t ? void 0 : t.id) && void 0 !== i
                  ? i
                  : (0, g.generateGuid)()),
              null == t ? void 0 : t.fifoCapacity)
            )
              (this.fifoCapacityProperty = t.fifoCapacity),
                (this.doubleVectorProvider = new v.FIFOVectorProvider(
                  t.fifoCapacity
                ));
            else {
              const e = this.calculateInitialCapacity(t);
              n.Guard.argumentIsRealInteger(e, "initialCapacity"),
                (this.doubleVectorProvider.capacity = e);
            }
            (this.fifoSweepingProperty =
              (null == t ? void 0 : t.fifoSweeping) ||
              this.fifoSweepingProperty),
              (this.fifoSweepingGapProperty =
                (null == t ? void 0 : t.fifoSweepingGap) ||
                this.fifoSweepingGapProperty),
              (this.xValues = this.doubleVectorProvider.getDoubleVector(e)),
              (this.yValues = this.doubleVectorProvider.getDoubleVector(e)),
              (this.indexes = new e.SCRTDoubleVector()),
              (this.dataSeriesNameProperty =
                null !== (s = null == t ? void 0 : t.dataSeriesName) &&
                void 0 !== s
                  ? s
                  : this.dataSeriesNameProperty),
              (this.isSorted =
                null !==
                  (l =
                    null !== (o = null == t ? void 0 : t.dataIsSortedInX) &&
                    void 0 !== o
                      ? o
                      : null == t
                      ? void 0
                      : t.isSorted) && void 0 !== l
                  ? l
                  : this.isSortedProperty),
              (this.containsNaN =
                null !== (h = null == t ? void 0 : t.containsNaN) &&
                void 0 !== h
                  ? h
                  : this.containsNaNProperty),
              (this.isEvenlySpaced =
                null !== (u = null == t ? void 0 : t.dataEvenlySpacedInX) &&
                void 0 !== u
                  ? u
                  : this.isEvenlySpacedProperty),
              (null == t ? void 0 : t.metadata) &&
                ("type" in t.metadata
                  ? ((this.metadataGeneratorProperty = (0, r.createType)(
                      d.EBaseType.MetadataGenerator,
                      t.metadata.type,
                      e,
                      t.metadata.data
                    )),
                    (t.metadata =
                      null === (c = this.metadataGeneratorProperty) ||
                      void 0 === c
                        ? void 0
                        : c.getMetadata()))
                  : Array.isArray(null == t ? void 0 : t.metadata) ||
                    ((this.metadataGeneratorProperty =
                      new S.TemplateMetadataGenerator(
                        null == t ? void 0 : t.metadata
                      )),
                    (t.metadata = void 0)));
          }
          clear() {
            var e;
            null === (e = this.indexes) || void 0 === e || e.clear(),
              this.dataDistributionCalculator.clear(
                this.isSorted,
                this.containsNaN
              );
          }
          get capacity() {
            return this.xValues.capacity();
          }
          set capacity(e) {
            e > this.capacity && this.reserve(e);
          }
          get containsNaN() {
            return this.containsNaNProperty;
          }
          set containsNaN(e) {
            (this.containsNaNProperty = e),
              void 0 !== e && this.dataDistributionCalculator.setContainsNaN(e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "containsNaN"
              );
          }
          get isSorted() {
            return this.isSortedProperty;
          }
          set isSorted(e) {
            (this.isSortedProperty = e),
              void 0 !== e &&
                this.dataDistributionCalculator.setIsSortedAscending(e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "isSorted"
              );
          }
          get isEvenlySpaced() {
            return this.isEvenlySpacedProperty;
          }
          set isEvenlySpaced(e) {
            (this.isEvenlySpacedProperty = e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "isEvenlySpaced"
              );
          }
          get dataSeriesName() {
            return this.dataSeriesNameProperty;
          }
          set dataSeriesName(e) {
            (this.dataSeriesNameProperty = e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "dataSeriesName"
              );
          }
          count() {
            return this.xValues ? this.xValues.size() : 0;
          }
          getIsDeleted() {
            return this.isDeleted;
          }
          get fifoCapacity() {
            return this.fifoCapacityProperty;
          }
          get fifoStartIndex() {
            return this.fifoCapacity > 0 ? this.xValues.getStartIndex() : 0;
          }
          get fifoSweeping() {
            return this.fifoCapacity && this.fifoSweepingProperty;
          }
          set fifoSweeping(e) {
            (this.fifoSweepingProperty = e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "fifoSweeping"
              );
          }
          get fifoSweepingGap() {
            return this.fifoSweepingGapProperty;
          }
          set fifoSweepingGap(e) {
            (this.fifoSweepingGapProperty = e),
              this.notifyDataChanged(
                m.EDataChangeType.Property,
                void 0,
                void 0,
                "fifoSweepingGap"
              );
          }
          getNativeIndexes() {
            if (!this.indexes) return;
            const e = this.count(),
              t = this.indexes.size();
            return (
              t < e
                ? this.webAssemblyContext.SCRTFillVectorSequential(
                    this.indexes,
                    e
                  )
                : t > e && this.indexes.resizeFast(e),
              this.indexes
            );
          }
          getNativeXValues() {
            return this.xValues;
          }
          getNativeValue(e, t) {
            return this.fifoSweeping && e.getRaw ? e.getRaw(t) : e.get(t);
          }
          getNativeYValues() {
            return this.yValues;
          }
          delete() {
            (this.xValues = (0, o.deleteSafe)(this.xValues)),
              (this.yValues = (0, o.deleteSafe)(this.yValues)),
              (this.indexes = (0, o.deleteSafe)(this.indexes)),
              (this.xInitialAnimationValues = (0, o.deleteSafe)(
                this.xInitialAnimationValues
              )),
              (this.yInitialAnimationValues = (0, o.deleteSafe)(
                this.yInitialAnimationValues
              )),
              (this.xFinalAnimationValues = (0, o.deleteSafe)(
                this.xFinalAnimationValues
              )),
              (this.yFinalAnimationValues = (0, o.deleteSafe)(
                this.yFinalAnimationValues
              )),
              this.setMetadata(void 0),
              (this.isDeleted = !0);
          }
          notifyDataChanged(e, t, i, r) {
            this.changeCountProperty++,
              this.dataChanged.raiseEvent({
                changeType: e,
                index: t,
                count: i,
              });
          }
          get xRange() {
            return this.getXRange();
          }
          getXRange(e) {
            const t = this.getXValues(e);
            let i;
            if (1 === this.count()) {
              const e = t.get(0) - 1,
                i = t.get(0) + 1;
              return new l.NumberRange(e, i);
            }
            if (this.count() > 1) {
              let e = t.get(0),
                r = t.get(this.count() - 1);
              if (!this.dataDistributionCalculator.isSortedAscending) {
                let t;
                try {
                  if (
                    ((t = this.webAssemblyContext.NumberUtil.MinMax(
                      this.getNativeXValues()
                    )),
                    !(0, y.isRealNumber)(t.minD) ||
                      !(0, y.isRealNumber)(t.maxD))
                  )
                    return new l.NumberRange(0, 0);
                  (e = t.minD), (r = t.maxD);
                } finally {
                  (0, o.deleteSafe)(t);
                }
              }
              return e === r
                ? new l.NumberRange(e - 1, r + 1)
                : (e > r && ((i = e), (e = r), (r = i)),
                  new l.NumberRange(e, r));
            }
            return new l.NumberRange(0, 0);
          }
          getWindowedYRange(
            e,
            i,
            r = !1,
            s = m.EDataSeriesValueType.Default,
            o = u.EYRangeMode.Visible
          ) {
            const a = this.getXValues(s),
              n = this.getYValues(s);
            return (0, t.getWindowedYRange)(
              this.webAssemblyContext,
              a,
              n,
              e,
              i,
              r,
              this.dataDistributionCalculator.isSortedAscending,
              o === u.EYRangeMode.Visible
                ? h.ESearchMode.RoundUp
                : h.ESearchMode.RoundDown,
              o === u.EYRangeMode.Visible
                ? h.ESearchMode.RoundDown
                : h.ESearchMode.RoundUp
            );
          }
          getIndicesRange(
            e,
            i = !1,
            r = h.ESearchMode.RoundDown,
            s = h.ESearchMode.RoundUp
          ) {
            const o = i ? this.getNativeIndexes() : this.xValues;
            return (0, t.getIndicesRange)(
              this.webAssemblyContext,
              o,
              e,
              this.dataDistributionCalculator.isSortedAscending,
              r,
              s
            );
          }
          get hasValues() {
            return this.count() > 0;
          }
          hasMetadataGenerator() {
            return void 0 !== this.metadataGeneratorProperty;
          }
          setMetadataGenerator(e) {
            const t = !this.hasMetadataGenerator();
            if (
              ((this.metadataGeneratorProperty = e),
              t && !this.metadataProperty)
            ) {
              const e = Array(this.xValues.size())
                .fill(1)
                .map((e) => this.metadataGeneratorProperty.getSingleMetadata());
              this.metadataProperty = e;
            }
          }
          getMetadataAt(e, t = !1) {
            if ((this.validateIndex(e), this.metadataProperty)) {
              if (this.fifoCapacity && !t) {
                const t =
                  (this.xValues.getStartIndex() + e) % this.fifoCapacity;
                return this.metadataProperty[t];
              }
              return this.metadataProperty[e];
            }
          }
          getMetadataLength() {
            return this.metadataProperty
              ? this.metadataProperty.length
              : this.count();
          }
          get hasMetadata() {
            return void 0 !== this.metadataProperty;
          }
          createAnimationVectors() {
            (this.xInitialAnimationValues =
              this.doubleVectorProvider.getDoubleVector(
                this.webAssemblyContext
              )),
              (this.yInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.xFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.yFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                ));
          }
          setInitialAnimationVectors(e) {
            if (!e)
              return (
                this.xInitialAnimationValues.resize(0, 0),
                void this.yInitialAnimationValues.resize(0, 0)
              );
            (0, p.copyDoubleVector)(
              e.getNativeXValues(),
              this.xInitialAnimationValues,
              this.webAssemblyContext
            ),
              (0, p.copyDoubleVector)(
                e.getNativeYValues(),
                this.yInitialAnimationValues,
                this.webAssemblyContext
              );
          }
          setFinalAnimationVectors(e) {
            if (!e)
              return (
                this.xFinalAnimationValues.resize(0, 0),
                void this.yFinalAnimationValues.resize(0, 0)
              );
            (0, p.copyDoubleVector)(
              e.getNativeXValues(),
              this.xFinalAnimationValues,
              this.webAssemblyContext
            ),
              (0, p.copyDoubleVector)(
                e.getNativeYValues(),
                this.yFinalAnimationValues,
                this.webAssemblyContext
              );
          }
          revertAnimationVectors(e) {
            (e = null != e ? e : this),
              (0, p.copyDoubleVector)(
                this.xFinalAnimationValues,
                e.getNativeXValues(),
                this.webAssemblyContext
              ),
              (0, p.copyDoubleVector)(
                this.yFinalAnimationValues,
                e.getNativeYValues(),
                this.webAssemblyContext
              );
          }
          validateAnimationVectors() {
            const e = this.xInitialAnimationValues.size();
            if (
              e !== this.yInitialAnimationValues.size() ||
              e !== this.xFinalAnimationValues.size() ||
              e !== this.yFinalAnimationValues.size()
            )
              throw Error(
                "initialAnimationValues and finalAnimationValues must have the same length"
              );
          }
          updateAnimationProperties(e, t) {
            t.isOnStartAnimation
              ? t.calculateAnimationValues(
                  this.webAssemblyContext,
                  this.yFinalAnimationValues,
                  this.getNativeYValues(),
                  e
                )
              : t.isDataSeriesAnimation &&
                (t.calculateDataSeriesAnimationValues(
                  this.webAssemblyContext,
                  this.xInitialAnimationValues,
                  this.xFinalAnimationValues,
                  this.getNativeXValues(),
                  e
                ),
                t.calculateDataSeriesAnimationValues(
                  this.webAssemblyContext,
                  this.yInitialAnimationValues,
                  this.yFinalAnimationValues,
                  this.getNativeYValues(),
                  e
                ));
          }
          toJSON(e = !1) {
            const t = this.getOptions(e);
            return { type: this.type, options: t };
          }
          get changeCount() {
            return this.changeCountProperty;
          }
          getOptions(e = !1) {
            const t = Object.assign(
              {
                id: this.id,
                containsNaN: this.containsNaN,
                isSorted: this.isSorted,
                dataIsSortedInX: this.isSorted,
                dataEvenlySpacedInX: this.isEvenlySpaced,
                dataSeriesName: this.dataSeriesName,
                fifoCapacity: this.fifoCapacity,
                fifoSweeping: this.fifoSweeping,
                fifoSweepingGap: this.fifoSweepingGap,
                fifoStartIndex: this.fifoSweeping ? this.fifoStartIndex : 0,
                capacity: this.capacity,
                metadata: void 0,
                xValues: void 0,
                yValues: void 0,
              },
              this.dataIds
            );
            return (
              (t.metadata = this.metadataGeneratorProperty
                ? this.metadataGeneratorProperty.toJSON()
                : e
                ? void 0
                : this.metadataProperty),
              t
            );
          }
          findIndex(e, t = h.ESearchMode.Nearest) {
            var i, r;
            if (0 === this.count()) return -1;
            const s =
                null !==
                  (r =
                    null === (i = this.dataDistributionCalculator) ||
                    void 0 === i
                      ? void 0
                      : i.isSortedAscending) &&
                void 0 !== r &&
                r,
              o = s
                ? (0, h.convertSearchMode)(this.webAssemblyContext, t)
                : this.webAssemblyContext.SCRTFindIndexSearchMode.Exact;
            return this.webAssemblyContext.NumberUtil.FindIndex(
              this.xValues,
              e,
              o,
              s
            );
          }
          validateIndex(e, t) {
            if (Math.round(e) !== e) throw Error("Index must be an integer");
            const i = null != t ? t : "Index is out of range";
            if (e < 0 || e >= this.count()) throw new Error(i);
          }
          setMetadataAt(e, t) {
            if (t)
              if (
                (this.validateIndex(e),
                this.fillMetadataIfUndefined(),
                this.fifoCapacity)
              ) {
                const i =
                  (this.xValues.getStartIndex() + e) % this.fifoCapacity;
                this.metadataProperty[i] = t;
              } else this.metadataProperty[e] = t;
          }
          appendMetadata(e) {
            if (!e) {
              if (!this.metadataGeneratorProperty) return;
              e = this.metadataGeneratorProperty.getSingleMetadata();
            }
            this.fillMetadataIfUndefined(),
              this.fifoCapacity && this.count() === this.fifoCapacity
                ? (this.metadataProperty[this.xValues.getStartIndex()] = e)
                : this.metadataProperty.push(e);
          }
          appendMetadataRange(e, t) {
            if (!e) {
              if (!this.metadataGeneratorProperty) return;
              e = Array(t)
                .fill(1)
                .map((e) => this.metadataGeneratorProperty.getSingleMetadata());
            }
            if ((this.fillMetadataIfUndefined(), this.fifoCapacity))
              (0, c.appendRangeFifo)(
                e,
                this.metadataProperty,
                this.fifoCapacity,
                this.xValues.getStartIndex()
              );
            else {
              const i = this.metadataProperty.length;
              this.metadataProperty.length += t;
              for (let r = 0; r < t; ++r) this.metadataProperty[i + r] = e[r];
            }
          }
          insertMetadata(e, t) {
            if (!t) {
              if (!this.metadataGeneratorProperty) return;
              t = this.metadataGeneratorProperty.getSingleMetadata();
            }
            this.fillMetadataIfUndefined(),
              this.metadataProperty.splice(e, 0, t);
          }
          insertMetadataRange(e, t) {
            if (!t) {
              if (!this.metadataGeneratorProperty) return;
              t = Array(length)
                .fill(1)
                .map((e) => this.metadataGeneratorProperty.getSingleMetadata());
            }
            this.fillMetadataIfUndefined();
            const i = this.metadataProperty.slice(0, e),
              r = this.metadataProperty.slice(e);
            this.metadataProperty = i.concat(t, r);
          }
          removeMetadataAt(e) {
            this.metadataProperty && this.metadataProperty.splice(e, 1);
          }
          removeMetadataRange(e, t) {
            this.metadataProperty && this.metadataProperty.splice(e, t);
          }
          setMetadata(e) {
            this.metadataProperty = e;
          }
          getXValues(e) {
            let t;
            switch (e) {
              case m.EDataSeriesValueType.FinalAnimationValues:
                t = this.xFinalAnimationValues;
                break;
              case m.EDataSeriesValueType.InitialAnimationValues:
                t = this.xInitialAnimationValues;
                break;
              default:
                t = this.xValues;
            }
            return t;
          }
          throwIfFifo(e) {
            if (this.fifoCapacity)
              throw new Error(`${e} is not supported in fifo mode`);
          }
          reserve(e) {
            if (this.fifoCapacity)
              throw new Error(
                "Resizing a fifo dataSeries is not currently supported."
              );
            n.Guard.argumentIsRealInteger(e, "capacity"),
              this.xValues.reserve(e),
              this.yValues.reserve(e);
          }
          calculateInitialCapacity(e) {
            var t, i, r;
            return Math.max(
              null !== (t = null == e ? void 0 : e.capacity) && void 0 !== t
                ? t
                : 0,
              null !==
                (r =
                  null === (i = null == e ? void 0 : e.xValues) || void 0 === i
                    ? void 0
                    : i.length) && void 0 !== r
                ? r
                : 0
            );
          }
          fillMetadataIfUndefined() {
            if (void 0 === this.metadataProperty) {
              const e = this.count();
              this.metadataProperty = Array(e).fill(void 0);
            }
          }
          getYValues(e) {
            let t;
            switch (e) {
              case m.EDataSeriesValueType.FinalAnimationValues:
                t = this.yFinalAnimationValues;
                break;
              case m.EDataSeriesValueType.InitialAnimationValues:
                t = this.yInitialAnimationValues;
                break;
              default:
                t = this.yValues;
            }
            return t;
          }
        }
        (t.BaseDataSeries = P),
          (t.getIndicesRange = (
            e,
            t,
            i,
            r,
            s = h.ESearchMode.RoundDown,
            o = h.ESearchMode.RoundUp
          ) => {
            const a = t.size();
            let n = new l.NumberRange(0, -1);
            if (a > 0) {
              if (!r) return new l.NumberRange(0, a - 1);
              const d = (t) => {
                  switch (t) {
                    case h.ESearchMode.Exact:
                      return e.SCRTFindIndexSearchMode.Exact;
                    case h.ESearchMode.Nearest:
                      return e.SCRTFindIndexSearchMode.Nearest;
                    case h.ESearchMode.RoundDown:
                      return e.SCRTFindIndexSearchMode.RoundDown;
                    case h.ESearchMode.RoundUp:
                      return e.SCRTFindIndexSearchMode.RoundUp;
                  }
                },
                u = e.NumberUtil.FindIndex(t, i.min, d(s), !0),
                c = e.NumberUtil.FindIndex(t, i.max, d(o), !0);
              n = new l.NumberRange(u, c);
            }
            return n;
          }),
          (t.getWindowedYRange = (
            e,
            i,
            r,
            s,
            a,
            n,
            d,
            u = h.ESearchMode.RoundUp,
            c = h.ESearchMode.RoundDown
          ) => {
            const p = i.size();
            if (1 === p) {
              const e = r.get(0);
              return new l.NumberRange(e, e);
            }
            const g = n ? s : (0, t.getIndicesRange)(e, i, s, d, u, c),
              f = Math.max(Math.floor(g.min), 0),
              v = Math.min(Math.ceil(g.max), p - 1);
            if (v < f) return;
            let m;
            try {
              if (
                ((m = e.NumberUtil.MinMaxWithIndex(r, f, v - f + 1)),
                !(0, y.isRealNumber)(m.minD) || !(0, y.isRealNumber)(m.maxD))
              )
                return;
              return new l.NumberRange(m.minD, m.maxD);
            } finally {
              (0, o.deleteSafe)(m);
            }
          });
      },
      16179: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseHeatmapDataSeries = void 0);
        const r = i(45921),
          s = i(56744),
          o = i(3214),
          a = i(23866),
          n = i(98140),
          l = i(11043),
          d = i(27699),
          h = i(73538),
          u = i(72934),
          c = i(51885),
          p = i(33906);
        t.BaseHeatmapDataSeries = class {
          constructor(e, t) {
            var i, s, a, n;
            (this.dataChanged = new o.EventHandler()),
              (this.minXSpacing = 0),
              (this.arrayWidth = 0),
              (this.arrayHeight = 0),
              (this.hasDataChangesProperty = !1),
              (this.hasNaNsProperty = !1),
              (this.lastZMin = -1),
              (this.lastZMax = -1),
              (this.lastFillValuesOutOfRange = void 0),
              (this.metadataGeneratorProperty = void 0),
              (this.changeCountProperty = 0),
              (this.webAssemblyContext = e),
              (this.id =
                null !== (i = null == t ? void 0 : t.id) && void 0 !== i
                  ? i
                  : (0, h.generateGuid)()),
              (this.dataSeriesNameProperty =
                null !== (s = null == t ? void 0 : t.dataSeriesName) &&
                void 0 !== s
                  ? s
                  : this.dataSeriesNameProperty),
              (this.hasNaNsProperty =
                null !== (a = null == t ? void 0 : t.containsNaN) &&
                void 0 !== a
                  ? a
                  : this.hasNaNsProperty),
              (this.normalizedVector =
                new this.webAssemblyContext.SCRTFloatVector()),
              (null == t ? void 0 : t.metadata) &&
                ("type" in t.metadata
                  ? ((this.metadataGeneratorProperty = (0, r.createType)(
                      l.EBaseType.MetadataGenerator,
                      t.metadata.type,
                      e,
                      t.metadata.data
                    )),
                    (t.metadata =
                      null === (n = this.metadataGeneratorProperty) ||
                      void 0 === n
                        ? void 0
                        : n.getMetadata()))
                  : Array.isArray(null == t ? void 0 : t.metadata) ||
                    ((this.metadataGeneratorProperty =
                      new p.TemplateMetadataGenerator(
                        null == t ? void 0 : t.metadata
                      )),
                    (t.metadata = void 0))),
              this.setZValues(
                null == t ? void 0 : t.zValues,
                null == t ? void 0 : t.metadata
              );
          }
          get isSorted() {
            return !0;
          }
          set isSorted(e) {
            throw new Error(
              "setting isSorted on a heatmap series is not supported"
            );
          }
          get isEvenlySpaced() {
            return !0;
          }
          set isEvenlySpaced(e) {
            throw new Error(
              "setting isEvenlySpaced on a heatmap series is not supported"
            );
          }
          get containsNaN() {
            return !1;
          }
          set containsNaN(e) {
            throw new Error(
              "setting containsNaN is not supported on BaseHeatmapDataSeries"
            );
          }
          get dataDistributionCalculator() {
            throw new Error(
              "dataDistributionCalculator is not supported on BaseHeatmapDataSeries"
            );
          }
          getNativeValue(e, t) {
            throw new Error(
              "getNativeValue not supported for HeatmapDataSeries"
            );
          }
          get hasDataChanges() {
            return this.hasDataChangesProperty;
          }
          getZValues() {
            return this.zValuesProperty;
          }
          setZValues(e, t) {
            if (!e || !e[0])
              return (
                (this.zValuesProperty = void 0),
                (this.arrayHeight = 0),
                (this.arrayWidth = 0),
                void (this.size = 0)
              );
            const i = e[0].length;
            e.forEach((e) => {
              if (!e)
                throw new Error(
                  "Each row in zValues must be defined. See how to declare a 2D array in Javascript here https://stackoverflow.com/a/966234/303612"
                );
              if (e.length !== i)
                throw new Error(
                  "Each row in zValues must be the same length, so that the overall 2D array is square"
                );
            }),
              t && g(e, t);
            const r = e[0].length,
              s = e.length;
            (this.arrayWidth = r),
              (this.arrayHeight = s),
              (this.size = r * s),
              (this.zValuesProperty = e),
              this.setMetadata(t),
              this.notifyDataChanged(c.EDataChangeType.Append);
          }
          getZValue(e, t) {
            return this.zValuesProperty[e][t];
          }
          setZValue(e, t, i, r) {
            (this.zValuesProperty[e][t] = i),
              this.setMetadataAt(e, t, r),
              this.notifyDataChanged(c.EDataChangeType.Update, t, e);
          }
          clear() {
            this.getIsDeleted() ||
              (this.setZValues(void 0),
              this.setMetadata(void 0),
              this.notifyDataChanged(c.EDataChangeType.Clear, null, null));
          }
          get xMin() {
            return this.xRange.min;
          }
          get xMax() {
            return this.xRange.max;
          }
          get yMin() {
            return this.yRange.min;
          }
          get yMax() {
            return this.yRange.max;
          }
          get zMin() {
            return this.zRange.min;
          }
          get zMax() {
            return this.zRange.max;
          }
          get xRange() {
            return this.getXRange();
          }
          get yRange() {
            return this.getYRange();
          }
          get zRange() {
            return this.getZRange();
          }
          get dataSeriesName() {
            return this.dataSeriesNameProperty;
          }
          set dataSeriesName(e) {
            (this.dataSeriesNameProperty = e),
              this.notifyDataChanged(
                c.EDataChangeType.Property,
                null,
                null,
                "dataSeriesName"
              );
          }
          get hasValues() {
            return this.arrayWidth > 0 && this.arrayHeight > 0;
          }
          set hasNaNs(e) {
            (this.hasNaNsProperty = e),
              this.notifyDataChanged(
                c.EDataChangeType.Property,
                null,
                null,
                "hasNaNs"
              );
          }
          get hasNaNs() {
            return this.hasNaNsProperty;
          }
          count() {
            return this.arrayWidth * this.arrayHeight;
          }
          setMetadataGenerator(e) {
            const t = void 0 === this.metadataGeneratorProperty;
            (this.metadataGeneratorProperty = e), t && this.setMetadata(null);
          }
          delete() {
            (this.isDeleted = !0),
              (this.normalizedVector = (0, s.deleteSafe)(
                this.normalizedVector
              ));
          }
          getIsDeleted() {
            return this.isDeleted;
          }
          getNativeIndexes() {
            throw new Error(
              "getNativeIndexes is invalid for heatmap type series. Try getting or setting zValues instead"
            );
          }
          getNativeXValues() {
            throw new Error(
              "getNativeXValues is invalid for heatmap type series. Try getting or setting zValues instead"
            );
          }
          getNativeYValues() {
            throw new Error(
              "getNativeYValues is invalid for heatmap type series. Try getting or setting zValues instead"
            );
          }
          getWindowedYRange(e, t, i) {
            return this.yRange;
          }
          notifyDataChanged(e, t, i, r) {
            this.changeCountProperty++,
              (this.hasDataChangesProperty = !0),
              this.dataChanged.raiseEvent({
                changeType: e,
                index: t,
                yIndex: i,
                name: r,
              });
          }
          getNormalizedVector(e, t) {
            a.Guard.notNull(e, "colorMap"),
              a.Guard.argumentIsRealNumber(e.minimum, "colorMap.minimum"),
              a.Guard.argumentIsRealNumber(e.maximum, "colorMap.maximum");
            const i = this.arrayWidth * this.arrayHeight;
            return (
              (this.hasDataChangesProperty ||
                i !== this.normalizedVector.size() ||
                e.minimum !== this.lastZMin ||
                e.maximum !== this.lastZMax ||
                t !== this.lastFillValuesOutOfRange) &&
                (this.recreateNormalizedVector(e.minimum, e.maximum, t),
                (this.lastZMin = e.minimum),
                (this.lastZMax = e.maximum),
                (this.lastFillValuesOutOfRange = t),
                (this.hasDataChangesProperty = !1)),
              this.normalizedVector
            );
          }
          recreateNormalizedVector(e, t, i) {
            const r = this.arrayWidth * this.arrayHeight;
            this.normalizedVector.clear(), this.normalizedVector.resizeFast(r);
            const s = this.hasNaNs ? e - (t - e) / 128 : e;
            if (!(0, u.isRealNumber)(s))
              throw Error(
                "Can not create newZMin for try to use different zMin and zMax values"
              );
            let o = 0;
            const a = 1 / (t - s),
              n = new Float32Array(this.arrayWidth);
            for (let r = 0; r < this.arrayHeight; r++) {
              for (let o = 0; o < this.arrayWidth; o++) {
                const l = this.zValuesProperty[r][o];
                let d = l - s;
                l != l
                  ? (d = 0)
                  : d < e - s
                  ? (d = i ? e - s : 0)
                  : d > t - s && (d = i ? t - s : 0);
                const h = d * a;
                n[o] = h;
              }
              (0, d.memCopyFloat32)(
                this.webAssemblyContext,
                n,
                this.normalizedVector,
                o
              ),
                (o += this.arrayWidth);
            }
          }
          getMetadataAt(e, t) {
            if ((this.validateIndexes(e, t), this.metadataProperty))
              return this.metadataProperty[e][t];
          }
          getMetadataHeight() {
            return this.metadataProperty
              ? this.metadataProperty.length
              : this.arrayHeight;
          }
          getMetadataWidth() {
            return this.metadataProperty
              ? this.metadataProperty[0].length
              : this.arrayWidth;
          }
          toJSON(e = !1) {
            const t = this.getOptions(e);
            return { type: this.type, options: t };
          }
          getIndicesRange(e, t, i, r) {}
          get changeCount() {
            return this.changeCountProperty;
          }
          getOptions(e = !1) {
            return {
              id: this.id,
              containsNaN: this.hasNaNs,
              dataSeriesName: this.dataSeriesName,
              zValues: e ? void 0 : this.zValuesProperty,
              metadata: this.metadataGeneratorProperty
                ? this.metadataGeneratorProperty.toJSON()
                : e
                ? void 0
                : this.metadataProperty,
            };
          }
          getZRange() {
            const e = this.getZValues();
            if (e) {
              let t = Number.MAX_VALUE,
                i = -Number.MAX_VALUE;
              for (let r = 0; r < this.arrayHeight; ++r)
                for (let s = 0; s < this.arrayWidth; s++) {
                  const o = e[r][s];
                  o < t && (t = o), o > i && (i = o);
                }
              return new n.NumberRange(t, i);
            }
          }
          validateIndexes(e, t) {
            if (Math.round(e) !== e) throw Error("yIndex must be an integer");
            if (Math.round(t) !== t) throw Error("xIndex must be an integer");
            if (e < 0 || e >= this.arrayHeight)
              throw new Error("yIndex is out of range");
            if (t < 0 || t >= this.arrayWidth)
              throw new Error("xIndex is out of range");
          }
          setMetadata(e) {
            if (!e && this.metadataGeneratorProperty)
              for (let t = 0; t < this.arrayHeight; t++)
                for (let i = 0; i < this.arrayWidth; i++)
                  e[t][i] = this.metadataGeneratorProperty.getSingleMetadata();
            this.metadataProperty = e;
          }
          setMetadataAt(e, t, i) {
            i &&
              (this.validateIndexes(e, t),
              this.fillMetadataIfUndefined(),
              (this.metadataProperty[e][t] = i));
          }
          fillMetadataIfUndefined() {
            if (void 0 === this.metadataProperty) {
              const e = Array(this.arrayHeight).fill(void 0);
              for (let t = 0; t < this.arrayHeight; t++)
                e[t] = Array(this.arrayWidth).fill(void 0);
            }
          }
        };
        const g = (e, t) => {
          a.Guard.arraysSameLengthArr([
            { arg: e, name: "zValues" },
            { arg: t, name: "metadata" },
          ]);
          for (let i = 0; i < e.length; i++)
            a.Guard.arraysSameLengthArr([
              { arg: e[i], name: `zValues[${i}]` },
              { arg: t[i], name: `metadata[${i}]` },
            ]);
        };
      },
      14883: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HeatmapSeriesInfo = void 0);
        const r = i(96528),
          s = i(8591),
          o = i(32025);
        class a extends o.SeriesInfo {
          constructor(e, t) {
            super(e, t),
              (this.xIndex = t.heatmapXIndex),
              (this.yIndex = t.heatmapYIndex),
              (this.zValue = t.zValue),
              (this.color = void 0);
          }
          get formattedZValue() {
            const e = this.renderableSeries;
            return e
              ? e.zLabelProvider.formatCursorLabel(this.zValue)
              : (0, s.formatNumber)(this.zValue, r.ENumericFormat.Decimal, 2);
          }
        }
        t.HeatmapSeriesInfo = a;
      },
      84754: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcSeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t),
              (this.highValue = t.highValue),
              (this.lowValue = t.lowValue),
              (this.closeValue = t.closeValue);
          }
          get formattedHighValue() {
            return this.getYCursorFormattedValue(this.highValue);
          }
          get formattedLowValue() {
            return this.getYCursorFormattedValue(this.lowValue);
          }
          get formattedCloseValue() {
            return this.getYCursorFormattedValue(this.closeValue);
          }
        }
        t.HlcSeriesInfo = s;
      },
      97041: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcSeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t),
              (this.openValue = t.openValue),
              (this.highValue = t.highValue),
              (this.lowValue = t.lowValue),
              (this.closeValue = t.closeValue);
          }
          get formattedOpenValue() {
            return this.getYCursorFormattedValue(this.openValue);
          }
          get formattedHighValue() {
            return this.getYCursorFormattedValue(this.highValue);
          }
          get formattedLowValue() {
            return this.getYCursorFormattedValue(this.lowValue);
          }
          get formattedCloseValue() {
            return this.getYCursorFormattedValue(this.closeValue);
          }
        }
        t.OhlcSeriesInfo = s;
      },
      32025: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesInfo = void 0);
        const r = i(5337);
        t.SeriesInfo = class {
          constructor(e, t) {
            var i;
            (this.renderableSeries = e),
              (this.seriesName =
                null === (i = e.dataSeries) || void 0 === i
                  ? void 0
                  : i.dataSeriesName),
              (this.stroke = e.stroke),
              (this.dataSeriesType = t.dataSeriesType),
              (this.dataSeriesIndex = t.dataSeriesIndex),
              (this.isHit = t.isHit),
              (this.isWithinDataBounds = t.isWithinDataBounds),
              (this.hitTestPointValues = t.hitTestPointValues),
              (this.xValue = t.isCategoryAxis ? t.xCategoryValue : t.xValue),
              (this.point2xValue = t.point2xValue),
              (this.yValue = t.yValue),
              (this.point2yValue = t.point2yValue),
              (this.xCoordinate = t.xCoord),
              (this.yCoordinate = t.yCoord),
              (this.point2xCoordinate = t.point2xCoord),
              (this.point2yCoordinate = t.point2yCoord),
              (this.pointMetadata = t.metadata),
              (this.point2metadata = t.point2metadata),
              (this.distance = t.distance),
              (e.type === r.ESeriesType.ColumnSeries ||
                e.type === r.ESeriesType.MountainSeries ||
                e.type === r.ESeriesType.BandSeries) &&
                (this.fill = e.fill);
          }
          get isVisible() {
            return this.renderableSeries.isVisible;
          }
          get formattedYValue() {
            return this.getYCursorFormattedValue(this.yValue);
          }
          get formattedXValue() {
            return this.getXCursorFormattedValue(this.xValue);
          }
          getYCursorFormattedValue(e) {
            return this.renderableSeries.yAxis.labelProvider.formatCursorLabel(
              e
            );
          }
          getXCursorFormattedValue(e) {
            return this.renderableSeries.xAxis.labelProvider.formatCursorLabel(
              e
            );
          }
          equals(e) {
            return (
              e &&
              this.renderableSeries.id === e.renderableSeries.id &&
              this.isHit === e.isHit &&
              (this.xValue === e.xValue ||
                (this.xValue != this.xValue && e.xValue != e.xValue)) &&
              (this.yValue === e.yValue ||
                (this.yValue != this.yValue && e.yValue != e.yValue)) &&
              this.pointMetadata === e.pointMetadata
            );
          }
        };
      },
      75662: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedXySeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t),
              (this.yValue = t.y1Value),
              (this.accumulatedValue = t.yValue);
          }
        }
        t.StackedXySeriesInfo = s;
      },
      50874: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XySeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t);
          }
        }
        t.XySeriesInfo = s;
      },
      21780: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyySeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t),
              (this.isFirstSeries = !0),
              (this.y1Value = t.y1Value),
              (this.point2y1Value = t.point2y1Value),
              (this.y1Coordinate = t.y1Coord),
              (this.point2y1Coordinate = t.point2y1Coord);
          }
          get formattedY1Value() {
            return this.getYCursorFormattedValue(this.y1Value);
          }
        }
        t.XyySeriesInfo = s;
      },
      19581: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzSeriesInfo = void 0);
        const r = i(32025);
        class s extends r.SeriesInfo {
          constructor(e, t) {
            super(e, t), (this.zValue = t.zValue);
          }
          get formattedZValue() {
            return this.getYCursorFormattedValue(this.zValue);
          }
        }
        t.XyzSeriesInfo = s;
      },
      33435: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataDistributionCalculator = void 0);
        const r = i(41493),
          s = i(45215),
          o = i(8591);
        t.DataDistributionCalculator = class {
          constructor() {
            (this.containsNanProperty = !1),
              (this.isSortedAscendingProperty = !0);
          }
          get containsNaN() {
            return this.containsNanProperty;
          }
          get isSortedAscending() {
            return this.isSortedAscendingProperty;
          }
          onAppend(e, t, i, a, n) {
            if (
              (void 0 !== t
                ? (this.containsNanProperty = t)
                : !1 === this.containsNanProperty &&
                  ((this.containsNanProperty = n.some(o.checkIsNaN)),
                  !1 === this.containsNanProperty &&
                    r.performanceWarnings.dataDistributionFlagNaN.warn()),
              void 0 !== e)
            )
              this.isSortedAscendingProperty = e;
            else if (!0 === this.isSortedAscendingProperty) {
              const e = (0, s.isArraySorted)(a),
                t = i.size(),
                o = 0 === t || i.get(t - 1) < a[0];
              (this.isSortedAscendingProperty = e && o),
                !0 === this.isSortedAscendingProperty &&
                  r.performanceWarnings.dataDistributionFlagSortedAscending.warn();
            }
          }
          onInsert(e, t, i, a, n, l) {
            if (
              (void 0 !== t
                ? (this.containsNanProperty = t)
                : !1 === this.containsNanProperty &&
                  ((this.containsNanProperty = n.some(o.checkIsNaN)),
                  !1 === this.containsNanProperty &&
                    r.performanceWarnings.dataDistributionFlagNaN.warn()),
              void 0 !== e)
            )
              this.isSortedAscendingProperty = e;
            else if (!0 === this.isSortedAscendingProperty && a) {
              const e = (0, s.isArraySorted)(a),
                t = 0 === l || i.get(l - 1) < a[0],
                o = l >= i.size() || a[a.length - 1] < i.get(l);
              (this.isSortedAscendingProperty = e && t && o),
                !0 === this.isSortedAscendingProperty &&
                  r.performanceWarnings.dataDistributionFlagSortedAscending.warn();
            }
          }
          onUpdate(e, t, i, r, a, n) {
            if (
              (void 0 !== t
                ? (this.containsNanProperty = t)
                : !1 === this.containsNanProperty &&
                  (this.containsNanProperty = a.some(o.checkIsNaN)),
              void 0 !== e)
            )
              this.isSortedAscendingProperty = e;
            else if (!0 === this.isSortedAscendingProperty && r) {
              const e = (0, s.isArraySorted)(r),
                t = 0 === n || i.get(n - 1) < r[0],
                o = i.size(),
                a = n + r.length,
                l = a >= o || r[r.length - 1] < i.get(a);
              this.isSortedAscendingProperty = e && t && l;
            }
          }
          clear(e, t) {
            (this.isSortedAscendingProperty = null == e || e),
              (this.containsNanProperty = null != t && t);
          }
          setIsSortedAscending(e) {
            this.isSortedAscendingProperty = e;
          }
          setContainsNaN(e) {
            this.containsNanProperty = e;
          }
        };
      },
      75619: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataPointSelectionPaletteProvider = void 0);
        const r = i(28436),
          s = i(5337),
          o = i(48008),
          a = i(32747);
        t.DataPointSelectionPaletteProvider = class {
          constructor(e) {
            (this.strokePaletteMode = a.EStrokePaletteMode.SOLID),
              (this.fillPaletteMode = a.EFillPaletteMode.SOLID),
              (null == e ? void 0 : e.stroke) &&
                (this.selectedStroke = (0, o.parseColorToUIntArgb)(
                  null == e ? void 0 : e.stroke
                )),
              (null == e ? void 0 : e.fill) &&
                (this.selectedFill = (0, o.parseColorToUIntArgb)(
                  null == e ? void 0 : e.fill
                )),
              (this.selectedPointMarker = {
                stroke: this.selectedStroke,
                fill: this.selectedFill,
              });
          }
          onAttached(e) {
            this.seriesType
              ? this.seriesType !== e.type &&
                ((e.paletteProvider = a.DefaultPaletteProvider.createEmpty()),
                console.error(
                  "One instance of a DataPointSelectionPaletteProvider cannot be shared between series of different types"
                ))
              : (this.seriesType = e.type);
          }
          onDetached() {}
          overridePointMarkerArgb(e, t, i, r, s) {
            if (null == s ? void 0 : s.isSelected)
              return this.selectedPointMarker;
          }
          overrideStrokeArgb(e, t, i, r, o) {
            if (
              [
                s.ESeriesType.OhlcSeries,
                s.ESeriesType.CandlestickSeries,
                s.ESeriesType.ColumnSeries,
              ].includes(this.seriesType) &&
              (null == o ? void 0 : o.isSelected)
            )
              return this.selectedStroke;
          }
          overrideFillArgb(e, t, i, r, o) {
            if (
              [
                s.ESeriesType.StackedColumnSeries,
                s.ESeriesType.ColumnSeries,
                s.ESeriesType.CandlestickSeries,
              ].includes(this.seriesType) &&
              (null == o ? void 0 : o.isSelected)
            )
              return this.selectedFill;
          }
          toJSON() {
            return {
              type: r.EPaletteProviderType.DataPointSelection,
              options: {
                stroke: n(this.selectedStroke, o.parseArgbToHtmlColor),
                fill: n(this.selectedFill, o.parseArgbToHtmlColor),
              },
            };
          }
        };
        const n = (e, t) => {
          if (e) return t(e);
        };
      },
      84366: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FIFOVectorProvider = t.DoubleVectorProvider = void 0);
        const r = i(65885),
          s = i(27699);
        (t.DoubleVectorProvider = class {
          getDoubleVector(e) {
            return this.capacity
              ? new e.SCRTDoubleVector(this.capacity)
              : new e.SCRTDoubleVector();
          }
          appendArray(e, t, i) {
            (0, s.appendDoubleVectorFromJsArray)(e, t, i);
          }
        }),
          (t.FIFOVectorProvider = class {
            constructor(e) {
              this.capacity = e;
            }
            getDoubleVector(e) {
              return new e.SCRTFifoVector(this.capacity);
            }
            appendArray(e, t, i) {
              const o = t.size(),
                a = t.capacity(),
                n = i.length,
                l = t.getStartIndex();
              if (a >= o + n) {
                const r = t.dataPtr(o);
                e.HEAPF64.set(i, r / s.SIZEOF_NUMBER), t.notifyAppend(n);
              } else if (n > a) {
                const o = n - a,
                  l = (0, r.subArray)(i, o),
                  d = t.dataPtrZero();
                e.HEAPF64.set(l, d / s.SIZEOF_NUMBER), t.notifyAppend(a);
              } else if (a > o) {
                const l = a - o,
                  d = (0, r.subArray)(i, 0, l),
                  h = t.dataPtr(o);
                e.HEAPF64.set(d, h / s.SIZEOF_NUMBER);
                const u = (0, r.subArray)(i, l),
                  c = t.dataPtrZero();
                e.HEAPF64.set(u, c / s.SIZEOF_NUMBER), t.notifyAppend(n);
              } else {
                if (l + n > a) {
                  const o = a - l,
                    n = (0, r.subArray)(i, 0, o),
                    d = t.dataPtr(0);
                  e.HEAPF64.set(n, d / s.SIZEOF_NUMBER);
                  const h = (0, r.subArray)(i, o),
                    u = t.dataPtrZero();
                  e.HEAPF64.set(h, u / s.SIZEOF_NUMBER);
                } else {
                  const r = t.dataPtr(0);
                  e.HEAPF64.set(i, r / s.SIZEOF_NUMBER);
                }
                t.notifyAppend(n);
              }
            }
          });
      },
      37947: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcCustomFilter = void 0);
        const r = i(51885),
          s = i(22411);
        class o extends s.HlcFilterBase {
          get closefilterFunction() {
            return this.closefilterFunctionProperty;
          }
          set closefilterFunction(e) {
            (this.closefilterFunctionProperty = e), this.filterAll();
          }
          get highfilterFunction() {
            return this.highfilterFunctionProperty;
          }
          set highfilterFunction(e) {
            (this.highfilterFunctionProperty = e), this.filterAll();
          }
          get lowfilterFunction() {
            return this.lowfilterFunctionProperty;
          }
          set lowfilterFunction(e) {
            (this.lowfilterFunctionProperty = e), this.filterAll();
          }
          constructor(e, t) {
            var i, s, o;
            if ((super(e, t), e.type !== r.EDataSeriesType.Hlc))
              throw new Error(
                "HlcCustomFilter only supports Hlc original series"
              );
            (this.closefilterFunctionProperty =
              null !== (i = null == t ? void 0 : t.closefilterFunction) &&
              void 0 !== i
                ? i
                : this.closefilterFunctionProperty),
              (this.highfilterFunctionProperty =
                null !== (s = null == t ? void 0 : t.highfilterFunction) &&
                void 0 !== s
                  ? s
                  : this.closefilterFunction),
              (this.lowfilterFunctionProperty =
                null !== (o = null == t ? void 0 : t.lowfilterFunction) &&
                void 0 !== o
                  ? o
                  : this.closefilterFunction),
              this.getOriginalCount() > 0 &&
                ((null == t ? void 0 : t.closefilterFunction) ||
                  (null == t ? void 0 : t.highfilterFunction) ||
                  (null == t ? void 0 : t.lowfilterFunction)) &&
                this.filterAll();
          }
          highfilterFunctionProperty(e, t) {
            return t;
          }
          lowfilterFunctionProperty(e, t) {
            return t;
          }
          closefilterFunctionProperty(e, t) {
            return t;
          }
          filterOnAppend(e) {
            const {
              xValues: t,
              highValues: i,
              lowValues: r,
              closeValues: s,
              metadata: o,
            } = this.filter(this.count(), e);
            this.appendRange(t, s, i, r, o);
          }
          filterOnUpdate(e) {
            const t = this.originalSeries;
            this.update(
              e,
              this.highfilterFunction(e, t.getNativeHighValues().get(e)),
              this.lowfilterFunction(e, t.getNativeLowValues().get(e)),
              this.closefilterFunction(e, t.getNativeYValues().get(e)),
              this.originalSeries.getMetadataAt(e)
            );
          }
          filterOnInsert(e, t) {
            const {
              xValues: i,
              highValues: r,
              lowValues: s,
              closeValues: o,
              metadata: a,
            } = this.filter(e, t);
            this.insertRange(e, i, o, r, s, a);
          }
          filterOnRemove(e, t) {
            this.removeRange(e, t);
          }
          filterAll() {
            this.clear();
            const {
              xValues: e,
              highValues: t,
              lowValues: i,
              closeValues: r,
              metadata: s,
            } = this.filter(0, this.getOriginalCount());
            this.appendRange(e, r, t, i, s);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues(),
              s = this.getOriginalHighValues(),
              o = this.getOriginalLowValues(),
              a = [],
              n = [],
              l = [],
              d = [];
            let h;
            if (this.originalSeries.hasMetadata) {
              h = [];
              for (let u = e; u < e + t; u++)
                a.push(i.get(u)),
                  n.push(this.highfilterFunction(u, s.get(u))),
                  l.push(this.lowfilterFunction(u, o.get(u))),
                  d.push(this.closefilterFunction(u, r.get(u))),
                  h.push(this.originalSeries.getMetadataAt(u));
            } else
              for (let h = e; h < e + t; h++)
                a.push(i.get(h)),
                  n.push(this.highfilterFunction(h, s.get(h))),
                  l.push(this.lowfilterFunction(h, o.get(h))),
                  d.push(this.closefilterFunction(h, r.get(h)));
            return {
              xValues: a,
              highValues: n,
              lowValues: l,
              closeValues: d,
              metadata: h,
            };
          }
        }
        t.HlcCustomFilter = o;
      },
      22411: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcFilterBase = void 0);
        const r = i(56744),
          s = i(22382),
          o = i(51885),
          a = i(95079);
        class n extends s.HlcDataSeries {
          constructor(e, t) {
            var i, r;
            switch (
              (super(e.webAssemblyContext, t),
              (this.closefield = a.EDataSeriesField.Close),
              (this.highfield = a.EDataSeriesField.High),
              (this.lowfield = a.EDataSeriesField.Low),
              (this.originalSeriesProperty = e),
              (this.closefield =
                null !== (i = null == t ? void 0 : t.closefield) && void 0 !== i
                  ? i
                  : this.closefield),
              (this.highfield =
                null !== (r = null == t ? void 0 : t.highfield) && void 0 !== r
                  ? r
                  : this.highfield),
              (this.onBaseDataChanged = this.onBaseDataChanged.bind(this)),
              e.dataChanged.subscribe(this.onBaseDataChanged),
              this.originalSeries.type)
            ) {
              case o.EDataSeriesType.Ohlc:
                const e = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.closefield,
                    e.getNativeYValues(),
                    e.getNativeOpenValues(),
                    e.getNativeHighValues(),
                    e.getNativeLowValues()
                  )),
                  (this.getOriginalHighValues = () =>
                    (0, a.switchData)(
                      this.highfield,
                      e.getNativeYValues(),
                      e.getNativeOpenValues(),
                      e.getNativeHighValues(),
                      e.getNativeLowValues()
                    )),
                  (this.getOriginalLowValues = () =>
                    (0, a.switchData)(
                      this.lowfield,
                      e.getNativeYValues(),
                      e.getNativeOpenValues(),
                      e.getNativeHighValues(),
                      e.getNativeLowValues()
                    ));
                break;
              case o.EDataSeriesType.Xy:
                const t = this.originalSeries;
                (this.getOriginalYValues = () => t.getNativeYValues()),
                  (this.getOriginalHighValues = () => t.getNativeYValues()),
                  (this.getOriginalLowValues = () => t.getNativeYValues());
                break;
              case o.EDataSeriesType.Xyy:
                const i = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.closefield,
                    i.getNativeYValues(),
                    i.getNativeY1Values()
                  )),
                  (this.getOriginalHighValues = () =>
                    (0, a.switchData)(
                      this.highfield,
                      i.getNativeYValues(),
                      i.getNativeY1Values()
                    )),
                  (this.getOriginalLowValues = () =>
                    (0, a.switchData)(
                      this.lowfield,
                      i.getNativeYValues(),
                      i.getNativeY1Values()
                    ));
                break;
              case o.EDataSeriesType.Xyz:
                const r = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.closefield,
                    r.getNativeYValues(),
                    r.getNativeZValues()
                  )),
                  (this.getOriginalHighValues = () =>
                    (0, a.switchData)(
                      this.highfield,
                      r.getNativeYValues(),
                      r.getNativeZValues()
                    )),
                  (this.getOriginalLowValues = () =>
                    (0, a.switchData)(
                      this.lowfield,
                      r.getNativeYValues(),
                      r.getNativeZValues()
                    ));
            }
          }
          get originalSeries() {
            return this.originalSeriesProperty;
          }
          detachFromOriginalSeries() {
            this.originalSeries.dataChanged.unsubscribe(this.onBaseDataChanged),
              (this.originalSeriesProperty = void 0);
          }
          delete() {
            (this.originalSeriesProperty = (0, r.deleteSafe)(
              this.originalSeries
            )),
              super.delete();
          }
          getOriginalXValues() {
            return this.originalSeries.getNativeXValues();
          }
          getOriginalYValues() {
            return this.originalSeries.getNativeYValues();
          }
          getOriginalHighValues() {
            return this.originalSeries.getNativeHighValues();
          }
          getOriginalLowValues() {
            return this.originalSeries.getNativeLowValues();
          }
          getOriginalCount() {
            return this.originalSeries.count();
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.filterAll();
          }
          filterOnUpdate(e) {
            this.filterAll();
          }
          filterOnInsert(e, t) {
            this.filterAll();
          }
          filterOnRemove(e, t) {
            this.filterAll();
          }
          onClear() {
            this.clear();
          }
          onBaseDataChanged(e) {
            const { changeType: t, name: i, index: r, count: s } = e;
            switch (t) {
              case o.EDataChangeType.Property:
                return void this.onOriginalPropertyChanged(i);
              case o.EDataChangeType.Append:
                this.filterOnAppend(s);
                break;
              case o.EDataChangeType.Clear:
                this.onClear();
                break;
              case o.EDataChangeType.Insert:
                this.filterOnInsert(r, s);
                break;
              case o.EDataChangeType.Remove:
                this.filterOnRemove(r, s);
                break;
              case o.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
        }
        t.HlcFilterBase = n;
      },
      58465: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcScaleOffsetFilter = void 0);
        const r = i(51097),
          s = i(51885),
          o = i(37947);
        class a extends o.HlcCustomFilter {
          constructor(e, t) {
            var i, r;
            if (
              (super(e, t),
              (this.scaleProperty = 1),
              (this.offsetProperty = 0),
              e.type !== s.EDataSeriesType.Hlc)
            )
              throw new Error(
                "HlcScaleOffsetFilter only supports Hlc original series"
              );
            (this.scaleProperty =
              null !== (i = null == t ? void 0 : t.scale) && void 0 !== i
                ? i
                : this.scaleProperty),
              (this.offsetProperty =
                null !== (r = null == t ? void 0 : t.offset) && void 0 !== r
                  ? r
                  : this.offsetProperty),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            (this.scaleProperty = e), this.filterAll();
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            (this.offsetProperty = e), this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.HlcScaleOffset,
                options: { scale: this.scale, offset: this.offset },
              },
            });
          }
          defaultFunction(e, t) {
            return t * this.scaleProperty + this.offsetProperty;
          }
        }
        t.HlcScaleOffsetFilter = a;
      },
      12954: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcCustomFilter = void 0);
        const r = i(51885),
          s = i(21384);
        class o extends s.OhlcFilterBase {
          get closefilterFunction() {
            return this.closefilterFunctionProperty;
          }
          set closefilterFunction(e) {
            (this.closefilterFunctionProperty = e), this.filterAll();
          }
          get openfilterFunction() {
            return this.openfilterFunctionProperty;
          }
          set openfilterFunction(e) {
            (this.openfilterFunctionProperty = e), this.filterAll();
          }
          get highfilterFunction() {
            return this.highfilterFunctionProperty;
          }
          set highfilterFunction(e) {
            (this.highfilterFunctionProperty = e), this.filterAll();
          }
          get lowfilterFunction() {
            return this.lowfilterFunctionProperty;
          }
          set lowfilterFunction(e) {
            (this.lowfilterFunctionProperty = e), this.filterAll();
          }
          constructor(e, t) {
            var i, s, o, a;
            if ((super(e, t), e.type !== r.EDataSeriesType.Ohlc))
              throw new Error(
                "OhlcCustomFilter only supports Ohlc original series"
              );
            (this.closefilterFunctionProperty =
              null !== (i = null == t ? void 0 : t.closefilterFunction) &&
              void 0 !== i
                ? i
                : this.closefilterFunctionProperty),
              (this.openfilterFunctionProperty =
                null !== (s = null == t ? void 0 : t.openfilterFunction) &&
                void 0 !== s
                  ? s
                  : this.closefilterFunction),
              (this.highfilterFunctionProperty =
                null !== (o = null == t ? void 0 : t.highfilterFunction) &&
                void 0 !== o
                  ? o
                  : this.closefilterFunction),
              (this.lowfilterFunctionProperty =
                null !== (a = null == t ? void 0 : t.lowfilterFunction) &&
                void 0 !== a
                  ? a
                  : this.closefilterFunction),
              this.getOriginalCount() > 0 &&
                ((null == t ? void 0 : t.closefilterFunction) ||
                  (null == t ? void 0 : t.openfilterFunction) ||
                  (null == t ? void 0 : t.highfilterFunction) ||
                  (null == t ? void 0 : t.lowfilterFunction)) &&
                this.filterAll();
          }
          openfilterFunctionProperty(e, t) {
            return t;
          }
          highfilterFunctionProperty(e, t) {
            return t;
          }
          lowfilterFunctionProperty(e, t) {
            return t;
          }
          closefilterFunctionProperty(e, t) {
            return t;
          }
          filterOnAppend(e) {
            const {
              xValues: t,
              openValues: i,
              highValues: r,
              lowValues: s,
              closeValues: o,
              metadata: a,
            } = this.filter(this.count(), e);
            this.appendRange(t, i, r, s, o, a);
          }
          filterOnUpdate(e) {
            const t = this.originalSeries;
            this.update(
              e,
              this.openfilterFunction(e, t.getNativeOpenValues().get(e)),
              this.highfilterFunction(e, t.getNativeHighValues().get(e)),
              this.lowfilterFunction(e, t.getNativeLowValues().get(e)),
              this.closefilterFunction(e, t.getNativeCloseValues().get(e)),
              this.originalSeries.getMetadataAt(e)
            );
          }
          filterOnInsert(e, t) {
            const {
              xValues: i,
              openValues: r,
              highValues: s,
              lowValues: o,
              closeValues: a,
              metadata: n,
            } = this.filter(e, t);
            this.insertRange(e, i, r, s, o, a, n);
          }
          filterOnRemove(e, t) {
            this.removeRange(e, t);
          }
          filterAll() {
            this.clear();
            const {
              xValues: e,
              openValues: t,
              highValues: i,
              lowValues: r,
              closeValues: s,
              metadata: o,
            } = this.filter(0, this.getOriginalCount());
            this.appendRange(e, t, i, r, s, o);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.originalSeries,
              s = [],
              o = [],
              a = [],
              n = [],
              l = [];
            let d;
            if (this.originalSeries.hasMetadata) {
              d = [];
              for (let h = e; h < e + t; h++)
                s.push(i.get(h)),
                  o.push(
                    this.openfilterFunction(h, r.getNativeOpenValues().get(h))
                  ),
                  a.push(
                    this.highfilterFunction(h, r.getNativeHighValues().get(h))
                  ),
                  n.push(
                    this.lowfilterFunction(h, r.getNativeLowValues().get(h))
                  ),
                  l.push(
                    this.closefilterFunction(h, r.getNativeCloseValues().get(h))
                  ),
                  d.push(this.originalSeries.getMetadataAt(h));
            } else
              for (let d = e; d < e + t; d++)
                s.push(i.get(d)),
                  o.push(
                    this.openfilterFunction(d, r.getNativeOpenValues().get(d))
                  ),
                  a.push(
                    this.highfilterFunction(d, r.getNativeHighValues().get(d))
                  ),
                  n.push(
                    this.lowfilterFunction(d, r.getNativeLowValues().get(d))
                  ),
                  l.push(
                    this.closefilterFunction(d, r.getNativeCloseValues().get(d))
                  );
            return {
              xValues: s,
              openValues: o,
              highValues: a,
              lowValues: n,
              closeValues: l,
              metadata: d,
            };
          }
        }
        t.OhlcCustomFilter = o;
      },
      21384: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcFilterBase = void 0);
        const r = i(56744),
          s = i(51885),
          o = i(35471);
        class a extends o.OhlcDataSeries {
          constructor(e, t) {
            super(e.webAssemblyContext, t),
              (this.originalSeriesProperty = e),
              (this.onBaseDataChanged = this.onBaseDataChanged.bind(this)),
              e.dataChanged.subscribe(this.onBaseDataChanged);
          }
          get originalSeries() {
            return this.originalSeriesProperty;
          }
          detachFromOriginalSeries() {
            this.originalSeries.dataChanged.unsubscribe(this.onBaseDataChanged),
              (this.originalSeriesProperty = void 0);
          }
          delete() {
            (this.originalSeriesProperty = (0, r.deleteSafe)(
              this.originalSeries
            )),
              super.delete();
          }
          getOriginalXValues() {
            return this.originalSeries.getNativeXValues();
          }
          getOriginalCount() {
            return this.originalSeries.count();
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.filterAll();
          }
          filterOnUpdate(e) {
            this.filterAll();
          }
          filterOnInsert(e, t) {
            this.filterAll();
          }
          filterOnRemove(e, t) {
            this.filterAll();
          }
          onClear() {
            this.clear();
          }
          onBaseDataChanged(e) {
            const { changeType: t, name: i, index: r, count: o } = e;
            switch (t) {
              case s.EDataChangeType.Property:
                return void this.onOriginalPropertyChanged(i);
              case s.EDataChangeType.Append:
                this.filterOnAppend(o);
                break;
              case s.EDataChangeType.Clear:
                this.onClear();
                break;
              case s.EDataChangeType.Insert:
                this.filterOnInsert(r, o);
                break;
              case s.EDataChangeType.Remove:
                this.filterOnRemove(r, o);
                break;
              case s.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
        }
        t.OhlcFilterBase = a;
      },
      73165: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcScaleOffsetFilter = void 0);
        const r = i(51097),
          s = i(51885),
          o = i(12954);
        class a extends o.OhlcCustomFilter {
          constructor(e, t) {
            var i, r;
            if (
              (super(e, t),
              (this.scaleProperty = 1),
              (this.offsetProperty = 0),
              e.type !== s.EDataSeriesType.Ohlc)
            )
              throw new Error(
                "OhlcScaleOffsetFilter only supports Ohlc original series"
              );
            (this.scaleProperty =
              null !== (i = null == t ? void 0 : t.scale) && void 0 !== i
                ? i
                : this.scaleProperty),
              (this.offsetProperty =
                null !== (r = null == t ? void 0 : t.offset) && void 0 !== r
                  ? r
                  : this.offsetProperty),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            (this.scaleProperty = e), this.filterAll();
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            (this.offsetProperty = e), this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.OhlcScaleOffset,
                options: { scale: this.scale, offset: this.offset },
              },
            });
          }
          defaultFunction(e, t) {
            return t * this.scaleProperty + this.offsetProperty;
          }
        }
        t.OhlcScaleOffsetFilter = a;
      },
      65936: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyCustomFilter = void 0);
        const r = i(95079);
        class s extends r.XyFilterBase {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.filterFunctionProperty =
                null !== (i = null == t ? void 0 : t.filterFunction) &&
                void 0 !== i
                  ? i
                  : this.filterFunctionProperty),
              this.getOriginalCount() > 0 &&
                (null == t ? void 0 : t.filterFunction) &&
                this.filterAll();
          }
          get filterFunction() {
            return this.filterFunctionProperty;
          }
          set filterFunction(e) {
            (this.filterFunctionProperty = e), this.filterAll();
          }
          filterFunctionProperty(e, t) {
            return t;
          }
          filterOnAppend(e) {
            const {
              xValues: t,
              yValues: i,
              metadata: r,
            } = this.filter(this.count(), e);
            this.appendRange(t, i, r);
          }
          filterOnUpdate(e) {
            this.update(
              e,
              this.filterFunction(e, this.getOriginalYValues().get(e)),
              this.originalSeries.getMetadataAt(e)
            );
          }
          filterOnInsert(e, t) {
            const { xValues: i, yValues: r, metadata: s } = this.filter(e, t);
            this.insertRange(e, i, r, s);
          }
          filterOnRemove(e, t) {
            this.removeRange(e, t);
          }
          filterAll() {
            this.clear();
            const {
              xValues: e,
              yValues: t,
              metadata: i,
            } = this.filter(0, this.getOriginalCount());
            this.appendRange(e, t, i);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues(),
              s = [],
              o = [];
            let a;
            if (this.originalSeries.hasMetadata) {
              a = [];
              for (let n = e; n < e + t; n++)
                s.push(i.get(n)),
                  o.push(this.filterFunction(n, r.get(n))),
                  a.push(this.originalSeries.getMetadataAt(n));
            } else
              for (let a = e; a < e + t; a++)
                s.push(i.get(a)), o.push(this.filterFunction(a, r.get(a)));
            return { xValues: s, yValues: o, metadata: a };
          }
        }
        t.XyCustomFilter = s;
      },
      95079: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.switchData = t.XyFilterBase = t.EDataSeriesField = void 0);
        const r = i(56744),
          s = i(51885),
          o = i(9682);
        var a;
        !(function (e) {
          (e.X = "x"),
            (e.Open = "open"),
            (e.High = "high"),
            (e.Low = "low"),
            (e.Close = "close"),
            (e.Y = "y"),
            (e.Y1 = "y1"),
            (e.Z = "z");
        })((a = t.EDataSeriesField || (t.EDataSeriesField = {})));
        class n extends o.XyDataSeries {
          constructor(e, t) {
            var i, r;
            switch (
              (super(e.webAssemblyContext, t),
              (this.field = a.Y),
              (this.xField = a.X),
              (this.originalSeriesProperty = e),
              (this.field =
                null !== (i = null == t ? void 0 : t.field) && void 0 !== i
                  ? i
                  : this.field),
              (this.xField =
                null !== (r = null == t ? void 0 : t.xField) && void 0 !== r
                  ? r
                  : this.xField),
              (this.onBaseDataChanged = this.onBaseDataChanged.bind(this)),
              e.dataChanged.subscribe(this.onBaseDataChanged),
              this.originalSeries.type)
            ) {
              case s.EDataSeriesType.Xy:
                this.xField === a.Y &&
                  (this.getOriginalXValues = () =>
                    this.originalSeries.getNativeYValues()),
                  this.field === a.X &&
                    (this.getOriginalYValues = () =>
                      this.originalSeries.getNativeXValues());
                break;
              case s.EDataSeriesType.Ohlc:
                (this.getOriginalXValues = () =>
                  this.getValuesFromOHLC(this.xField, this.originalSeries)),
                  (this.getOriginalYValues = () =>
                    this.getValuesFromOHLC(this.field, this.originalSeries));
                break;
              case s.EDataSeriesType.Xyy:
                (this.getOriginalXValues = () =>
                  this.getValuesFromXyy(this.xField, this.originalSeries)),
                  (this.getOriginalYValues = () =>
                    this.getValuesFromXyy(this.field, this.originalSeries));
                break;
              case s.EDataSeriesType.Xyz:
                (this.getOriginalXValues = () =>
                  this.getValuesFromXyz(this.xField, this.originalSeries)),
                  (this.getOriginalYValues = () =>
                    this.getValuesFromXyz(this.field, this.originalSeries));
                break;
              case s.EDataSeriesType.Hlc:
                (this.getOriginalXValues = () =>
                  this.getValuesFromHlc(this.xField, this.originalSeries)),
                  (this.getOriginalYValues = () =>
                    this.getValuesFromHlc(this.field, this.originalSeries));
            }
          }
          get originalSeries() {
            return this.originalSeriesProperty;
          }
          detachFromOriginalSeries() {
            this.originalSeries.dataChanged.unsubscribe(this.onBaseDataChanged),
              (this.originalSeriesProperty = void 0);
          }
          delete() {
            (this.originalSeriesProperty = (0, r.deleteSafe)(
              this.originalSeries
            )),
              super.delete();
          }
          getOriginalXValues() {
            return this.originalSeries.getNativeXValues();
          }
          getOriginalYValues() {
            return this.originalSeries.getNativeYValues();
          }
          getOriginalCount() {
            return this.originalSeries.count();
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.filterAll();
          }
          filterOnUpdate(e) {
            this.filterAll();
          }
          filterOnInsert(e, t) {
            this.filterAll();
          }
          filterOnRemove(e, t) {
            this.filterAll();
          }
          onClear() {
            this.clear();
          }
          onBaseDataChanged(e) {
            const { changeType: t, name: i, index: r, count: o } = e;
            switch (t) {
              case s.EDataChangeType.Property:
                return void this.onOriginalPropertyChanged(i);
              case s.EDataChangeType.Append:
                this.filterOnAppend(o);
                break;
              case s.EDataChangeType.Clear:
                this.onClear();
                break;
              case s.EDataChangeType.Insert:
                this.filterOnInsert(r, o);
                break;
              case s.EDataChangeType.Remove:
                this.filterOnRemove(r, o);
                break;
              case s.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
          getValuesFromOHLC(e, i) {
            return (0, t.switchData)(
              e,
              i.getNativeXValues(),
              i.getNativeYValues(),
              i.getNativeOpenValues(),
              i.getNativeHighValues(),
              i.getNativeLowValues()
            );
          }
          getValuesFromXyy(e, i) {
            return (0, t.switchData)(
              e,
              i.getNativeXValues(),
              i.getNativeYValues(),
              i.getNativeY1Values()
            );
          }
          getValuesFromXyz(e, i) {
            return (0, t.switchData)(
              e,
              i.getNativeXValues(),
              i.getNativeYValues(),
              i.getNativeZValues()
            );
          }
          getValuesFromHlc(e, i) {
            return (0, t.switchData)(
              e,
              i.getNativeXValues(),
              i.getNativeYValues(),
              void 0,
              i.getNativeHighValues(),
              i.getNativeLowValues()
            );
          }
        }
        (t.XyFilterBase = n),
          (t.switchData = (e, t, i, r, s, o) => {
            let n;
            switch (e) {
              case a.X:
                n = t;
                break;
              case a.Close:
              case a.Y:
                n = i;
                break;
              case a.Open:
              case a.Y1:
              case a.Z:
                n = r;
                break;
              case a.High:
                n = s;
                break;
              case a.Low:
                n = o;
            }
            if (!n) throw new Error(`${e} does not exist`);
            return n;
          });
      },
      26974: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyLinearTrendFilter = void 0);
        const r = i(51097),
          s = i(95079);
        class o extends s.XyFilterBase {
          constructor(e, t) {
            super(e, t), this.getOriginalCount() > 0 && this.filterAll();
          }
          get slope() {
            return this.slopeProperty;
          }
          get intercept() {
            return this.interceptProperty;
          }
          get correlation() {
            return this.correlationProperty;
          }
          toJSON(e = !1) {
            const t = super.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.XyLinearTrend,
                options: {
                  field: this.field,
                  slope: this.slope,
                  intercept: this.intercept,
                },
              },
            });
          }
          filterAll() {
            let e = 0,
              t = 0,
              i = 0,
              r = 0,
              s = 0;
            const o = this.getOriginalXValues(),
              a = this.getOriginalYValues(),
              n = this.getOriginalCount();
            for (let n = 0; n < this.getOriginalCount(); n++) {
              const l = a.get(n),
                d = o.get(n);
              (e += d * l),
                (t += d),
                (i += l),
                (r += Math.pow(d, 2)),
                (s += Math.pow(l, 2));
            }
            const l = e * n,
              d = t * i,
              h = r * n,
              u = Math.pow(t, 2);
            (this.correlationProperty =
              (l - d) / Math.sqrt((h - u) * (s * n - Math.pow(i, 2)))),
              (this.slopeProperty = (l - d) / (h - u));
            const c = this.slopeProperty * t;
            this.interceptProperty = (i - c) / n;
            const p = [],
              g = [];
            for (let e = 0; e < n; e++) {
              const t = o.get(e);
              g.push(t),
                p.push(t * this.slopeProperty + this.interceptProperty);
            }
            this.clear(), this.appendRange(g, p);
          }
        }
        t.XyLinearTrendFilter = o;
      },
      95632: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyMovingAverageFilter = void 0);
        const r = i(51097),
          s = i(95079);
        class o extends s.XyFilterBase {
          constructor(e, t) {
            var i;
            if (
              (super(e, t),
              (this.lengthProperty = 30),
              (this.buffer = []),
              (this.pointer = -1),
              (this.bufferTotal = 0),
              (this.lengthProperty =
                null !== (i = null == t ? void 0 : t.length) && void 0 !== i
                  ? i
                  : this.lengthProperty),
              !e.dataDistributionCalculator.isSortedAscending)
            )
              throw new Error(
                "XyMovingAverageFilter requires original data to be sorted in X"
              );
            this.getOriginalCount() > 0 && this.calculate(0);
          }
          get length() {
            return this.lengthProperty;
          }
          set length(e) {
            (this.lengthProperty = e), this.calculate(0);
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.XyMovingAverage,
                options: { field: this.field, length: this.length },
              },
            });
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.calculate(this.count());
          }
          filterOnUpdate(e) {
            const t = this.getOriginalYValues().get(e) || 0;
            this.calculateUpdate(e, t);
          }
          filterOnInsert(e, t) {
            this.calculate(e);
          }
          filterOnRemove(e, t) {
            this.calculate(e);
          }
          filterAll() {
            this.calculate(0);
          }
          calculateUpdate(e, t) {
            if (e < this.count() - 1) this.calculate(e);
            else {
              const i = this.buffer[this.pointer];
              (this.bufferTotal = this.bufferTotal - i + t),
                (this.buffer[this.pointer] = t),
                this.update(e, this.bufferTotal / this.length);
            }
          }
          calculate(e) {
            const t = e;
            e < this.count() &&
              (0 === e ? this.clear() : this.removeRange(e, this.count() - e),
              (e = Math.max(0, e - this.length + 1)),
              (this.buffer = []),
              (this.pointer = -1),
              (this.bufferTotal = 0));
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues();
            Math.min(this.length, this.getOriginalCount());
            for (let s = e; s < this.getOriginalCount(); s++) {
              const e = i.get(s) || 0,
                o = r.get(s) || 0;
              this.pointer = (this.pointer + 1) % this.length;
              const a = this.buffer[this.pointer];
              (this.buffer[this.pointer] = o),
                (this.bufferTotal = this.bufferTotal + o - (null != a ? a : 0)),
                this.buffer.length === this.length
                  ? this.append(e, this.bufferTotal / this.length)
                  : t < this.length && this.append(e, NaN);
            }
          }
        }
        t.XyMovingAverageFilter = o;
      },
      55007: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyRatioFilter = void 0);
        const r = i(23866),
          s = i(51097),
          o = i(51885),
          a = i(95079);
        class n extends a.XyFilterBase {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.divisorField = a.EDataSeriesField.Y),
              r.Guard.notNull(t.divisorSeries, "divisorSeries"),
              (this.divisorSeries = t.divisorSeries),
              (this.divisorField =
                null !== (i = t.divisorField) && void 0 !== i
                  ? i
                  : this.divisorField),
              (this.onDivisorDataChanged =
                this.onDivisorDataChanged.bind(this)),
              this.divisorSeries.dataChanged.subscribe(
                this.onDivisorDataChanged
              ),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e),
              i = [],
              r = this.getDivisorYValues();
            for (let e = 0; e < this.divisorSeries.count(); e++)
              i.push(r.get(e));
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: s.EDataFilterType.XyRatio,
                options: { field: this.field, divisorSeries: i },
              },
            });
          }
          filterOnAppend(e) {
            if (this.getOriginalCount() !== this.divisorSeries.count()) return;
            const { xValues: t, yValues: i } = this.filter(this.count(), e);
            this.appendRange(t, i);
          }
          filterOnUpdate(e) {
            this.update(
              e,
              this.getOriginalYValues().get(e) / this.getDivisorYValues().get(e)
            );
          }
          filterOnInsert(e, t) {
            if (this.getOriginalCount() !== this.divisorSeries.count()) return;
            const { xValues: i, yValues: r } = this.filter(e, t);
            this.insertRange(e, i, r);
          }
          filterOnRemove(e, t) {
            this.getOriginalCount() === this.divisorSeries.count() &&
              this.removeRange(e, t);
          }
          filterAll() {
            if (this.getOriginalCount() !== this.divisorSeries.count()) return;
            this.clear();
            const { xValues: e, yValues: t } = this.filter(
              0,
              this.getOriginalCount()
            );
            this.appendRange(e, t);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues(),
              s = [],
              o = [];
            for (let a = e; a < e + t; a++)
              s.push(i.get(a)),
                o.push(r.get(a) / this.getDivisorYValues().get(a));
            return { xValues: s, yValues: o };
          }
          getDivisorYValues() {
            let e = this.divisorSeries.getNativeYValues();
            if (this.divisorSeries.type === o.EDataSeriesType.Xyy) {
              const t = this.divisorSeries;
              e = (0, a.switchData)(
                this.divisorField,
                t.getNativeYValues(),
                t.getNativeY1Values()
              );
            } else if (this.divisorSeries.type === o.EDataSeriesType.Xyz) {
              const t = this.divisorSeries;
              e = (0, a.switchData)(
                this.field,
                t.getNativeYValues(),
                t.getNativeZValues()
              );
            } else if (this.divisorSeries.type === o.EDataSeriesType.Ohlc) {
              const t = this.divisorSeries;
              e = (0, a.switchData)(
                this.field,
                t.getNativeYValues(),
                t.getNativeOpenValues(),
                t.getNativeHighValues(),
                t.getNativeLowValues()
              );
            }
            return e;
          }
          onDivisorDataChanged(e) {
            const { changeType: t, name: i, index: r, count: s } = e;
            switch (t) {
              case o.EDataChangeType.Append:
                this.filterOnAppend(s);
                break;
              case o.EDataChangeType.Clear:
                this.onClear();
                break;
              case o.EDataChangeType.Insert:
                this.filterOnInsert(r, s);
                break;
              case o.EDataChangeType.Remove:
                this.filterOnRemove(r, s);
                break;
              case o.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
        }
        t.XyRatioFilter = n;
      },
      39892: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyScaleOffsetFilter = void 0);
        const r = i(51097),
          s = i(65936);
        class o extends s.XyCustomFilter {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.scaleProperty = 1),
              (this.offsetProperty = 0),
              (this.scaleProperty =
                null !== (i = null == t ? void 0 : t.scale) && void 0 !== i
                  ? i
                  : this.scaleProperty),
              (this.offsetProperty =
                null !== (r = null == t ? void 0 : t.offset) && void 0 !== r
                  ? r
                  : this.offsetProperty),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            (this.scaleProperty = e), this.filterAll();
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            (this.offsetProperty = e), this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.XyScaleOffset,
                options: {
                  field: this.field,
                  scale: this.scale,
                  offset: this.offset,
                },
              },
            });
          }
          filterFunctionProperty(e, t) {
            return t * this.scaleProperty + this.offsetProperty;
          }
        }
        t.XyScaleOffsetFilter = o;
      },
      42790: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyCustomFilter = void 0);
        const r = i(20278);
        class s extends r.XyyFilterBase {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.filterFunctionProperty =
                null !== (i = null == t ? void 0 : t.filterFunction) &&
                void 0 !== i
                  ? i
                  : this.filterFunctionProperty),
              (this.y1filterFunctionProperty =
                null !== (r = null == t ? void 0 : t.y1filterFunction) &&
                void 0 !== r
                  ? r
                  : this.filterFunctionProperty),
              this.getOriginalCount() > 0 &&
                ((null == t ? void 0 : t.filterFunction) ||
                  (null == t ? void 0 : t.y1filterFunction)) &&
                this.filterAll();
          }
          get filterFunction() {
            return this.filterFunctionProperty;
          }
          set filterFunction(e) {
            (this.filterFunctionProperty = e), this.filterAll();
          }
          filterFunctionProperty(e, t) {
            return t;
          }
          get y1filterFunction() {
            return this.y1filterFunctionProperty;
          }
          set y1yfilterFunction(e) {
            (this.y1filterFunctionProperty = e), this.filterAll();
          }
          y1filterFunctionProperty(e, t) {
            return t;
          }
          filterOnAppend(e) {
            const {
              xValues: t,
              yValues: i,
              y1Values: r,
              metadata: s,
            } = this.filter(this.count(), e);
            this.appendRange(t, i, r, s);
          }
          filterOnUpdate(e) {
            this.update(
              e,
              this.filterFunction(e, this.getOriginalYValues().get(e)),
              this.y1filterFunction(e, this.getOriginalY1Values().get(e)),
              this.originalSeries.getMetadataAt(e)
            );
          }
          filterOnInsert(e, t) {
            const {
              xValues: i,
              yValues: r,
              y1Values: s,
              metadata: o,
            } = this.filter(e, t);
            this.insertRange(e, i, r, s, o);
          }
          filterOnRemove(e, t) {
            this.removeRange(e, t);
          }
          filterAll() {
            this.clear();
            const {
              xValues: e,
              yValues: t,
              y1Values: i,
              metadata: r,
            } = this.filter(0, this.getOriginalCount());
            this.appendRange(e, t, i, r);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues(),
              s = this.getOriginalY1Values(),
              o = [],
              a = [],
              n = [];
            let l;
            if (this.originalSeries.hasMetadata) {
              l = [];
              for (let d = e; d < e + t; d++)
                o.push(i.get(d)),
                  a.push(this.filterFunction(d, r.get(d))),
                  n.push(this.y1filterFunction(d, s.get(d))),
                  l.push(this.originalSeries.getMetadataAt(d));
            } else
              for (let l = e; l < e + t; l++)
                o.push(i.get(l)),
                  a.push(this.filterFunction(l, r.get(l))),
                  n.push(this.y1filterFunction(l, s.get(l)));
            return { xValues: o, yValues: a, y1Values: n, metadata: l };
          }
        }
        t.XyyCustomFilter = s;
      },
      20278: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyFilterBase = void 0);
        const r = i(56744),
          s = i(51885),
          o = i(75650),
          a = i(95079);
        class n extends o.XyyDataSeries {
          constructor(e, t) {
            var i, r;
            switch (
              (super(e.webAssemblyContext, t),
              (this.yfield = a.EDataSeriesField.Y),
              (this.y1field = a.EDataSeriesField.Y1),
              (this.originalSeriesProperty = e),
              (this.yfield =
                null !== (i = null == t ? void 0 : t.yfield) && void 0 !== i
                  ? i
                  : this.yfield),
              (this.yfield =
                null !== (r = null == t ? void 0 : t.yfield) && void 0 !== r
                  ? r
                  : this.yfield),
              (this.onBaseDataChanged = this.onBaseDataChanged.bind(this)),
              e.dataChanged.subscribe(this.onBaseDataChanged),
              this.originalSeries.type)
            ) {
              case s.EDataSeriesType.Ohlc:
                const e = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    e.getNativeYValues(),
                    e.getNativeOpenValues(),
                    e.getNativeHighValues(),
                    e.getNativeLowValues()
                  )),
                  (this.getOriginalY1Values = () =>
                    (0, a.switchData)(
                      this.y1field,
                      e.getNativeYValues(),
                      e.getNativeOpenValues(),
                      e.getNativeHighValues(),
                      e.getNativeLowValues()
                    ));
                break;
              case s.EDataSeriesType.Xy:
                const t = this.originalSeries;
                (this.getOriginalYValues = () => t.getNativeYValues()),
                  (this.getOriginalY1Values = () => t.getNativeYValues());
                break;
              case s.EDataSeriesType.Xyz:
                const i = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    i.getNativeYValues(),
                    i.getNativeZValues()
                  )),
                  (this.getOriginalY1Values = () =>
                    (0, a.switchData)(
                      this.y1field,
                      i.getNativeYValues(),
                      i.getNativeZValues()
                    ));
                break;
              case s.EDataSeriesType.Hlc:
                const r = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    r.getNativeYValues(),
                    void 0,
                    r.getNativeHighValues(),
                    r.getNativeLowValues()
                  )),
                  (this.getOriginalY1Values = () =>
                    (0, a.switchData)(
                      this.y1field,
                      r.getNativeYValues(),
                      void 0,
                      r.getNativeHighValues(),
                      r.getNativeLowValues()
                    ));
            }
          }
          get originalSeries() {
            return this.originalSeriesProperty;
          }
          detachFromOriginalSeries() {
            this.originalSeries.dataChanged.unsubscribe(this.onBaseDataChanged),
              (this.originalSeriesProperty = void 0);
          }
          delete() {
            (this.originalSeriesProperty = (0, r.deleteSafe)(
              this.originalSeries
            )),
              super.delete();
          }
          getOriginalXValues() {
            return this.originalSeries.getNativeXValues();
          }
          getOriginalYValues() {
            return this.originalSeries.getNativeYValues();
          }
          getOriginalY1Values() {
            return this.originalSeries.getNativeY1Values();
          }
          getOriginalCount() {
            return this.originalSeries.count();
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.filterAll();
          }
          filterOnUpdate(e) {
            this.filterAll();
          }
          filterOnInsert(e, t) {
            this.filterAll();
          }
          filterOnRemove(e, t) {
            this.filterAll();
          }
          onClear() {
            this.clear();
          }
          onBaseDataChanged(e) {
            const { changeType: t, name: i, index: r, count: o } = e;
            switch (t) {
              case s.EDataChangeType.Property:
                return void this.onOriginalPropertyChanged(i);
              case s.EDataChangeType.Append:
                this.filterOnAppend(o);
                break;
              case s.EDataChangeType.Clear:
                this.onClear();
                break;
              case s.EDataChangeType.Insert:
                this.filterOnInsert(r, o);
                break;
              case s.EDataChangeType.Remove:
                this.filterOnRemove(r, o);
                break;
              case s.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
        }
        t.XyyFilterBase = n;
      },
      91154: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyScaleOffsetFilter = void 0);
        const r = i(51097),
          s = i(42790);
        class o extends s.XyyCustomFilter {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.scaleProperty = 1),
              (this.offsetProperty = 0),
              (this.scaleProperty =
                null !== (i = null == t ? void 0 : t.scale) && void 0 !== i
                  ? i
                  : this.scaleProperty),
              (this.offsetProperty =
                null !== (r = null == t ? void 0 : t.offset) && void 0 !== r
                  ? r
                  : this.offsetProperty),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            (this.scaleProperty = e), this.filterAll();
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            (this.offsetProperty = e), this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.XyyScaleOffset,
                options: {
                  yfield: this.yfield,
                  y1field: this.y1field,
                  scale: this.scale,
                  offset: this.offset,
                },
              },
            });
          }
          filterFunctionProperty(e, t) {
            return t * this.scaleProperty + this.offsetProperty;
          }
        }
        t.XyyScaleOffsetFilter = o;
      },
      86241: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzCustomFilter = void 0);
        const r = i(84872);
        class s extends r.XyzFilterBase {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.filterFunctionProperty =
                null !== (i = null == t ? void 0 : t.filterFunction) &&
                void 0 !== i
                  ? i
                  : this.filterFunctionProperty),
              (this.zfilterFunctionProperty =
                null !== (r = null == t ? void 0 : t.zfilterFunction) &&
                void 0 !== r
                  ? r
                  : this.filterFunctionProperty),
              this.getOriginalCount() > 0 &&
                ((null == t ? void 0 : t.filterFunction) ||
                  (null == t ? void 0 : t.zfilterFunction)) &&
                this.filterAll();
          }
          get filterFunction() {
            return this.filterFunctionProperty;
          }
          set filterFunction(e) {
            (this.filterFunctionProperty = e), this.filterAll();
          }
          filterFunctionProperty(e, t) {
            return t;
          }
          get zfilterFunction() {
            return this.zfilterFunctionProperty;
          }
          set zfilterFunction(e) {
            (this.zfilterFunctionProperty = e), this.filterAll();
          }
          zfilterFunctionProperty(e, t) {
            return t;
          }
          filterOnAppend(e) {
            const {
              xValues: t,
              yValues: i,
              zValues: r,
              metadata: s,
            } = this.filter(this.count(), e);
            this.appendRange(t, i, r, s);
          }
          filterOnUpdate(e) {
            this.update(
              e,
              this.filterFunction(e, this.getOriginalYValues().get(e)),
              this.zfilterFunction(e, this.getOriginalZValues().get(e)),
              this.originalSeries.getMetadataAt(e)
            );
          }
          filterOnInsert(e, t) {
            const {
              xValues: i,
              yValues: r,
              zValues: s,
              metadata: o,
            } = this.filter(e, t);
            this.insertRange(e, i, r, s, o);
          }
          filterOnRemove(e, t) {
            this.removeRange(e, t);
          }
          filterAll() {
            this.clear();
            const {
              xValues: e,
              yValues: t,
              zValues: i,
              metadata: r,
            } = this.filter(0, this.getOriginalCount());
            this.appendRange(e, t, i, r);
          }
          filter(e, t) {
            const i = this.getOriginalXValues(),
              r = this.getOriginalYValues(),
              s = this.getOriginalZValues(),
              o = [],
              a = [],
              n = [];
            let l;
            if (this.originalSeries.hasMetadata) {
              l = [];
              for (let d = e; d < e + t; d++)
                o.push(i.get(d)),
                  a.push(this.filterFunction(d, r.get(d))),
                  n.push(this.zfilterFunction(d, s.get(d))),
                  l.push(this.originalSeries.getMetadataAt(d));
            } else
              for (let l = e; l < e + t; l++)
                o.push(i.get(l)),
                  a.push(this.filterFunction(l, r.get(l))),
                  n.push(this.zfilterFunction(l, s.get(l)));
            return { xValues: o, yValues: a, zValues: n, metadata: l };
          }
        }
        t.XyzCustomFilter = s;
      },
      84872: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzFilterBase = void 0);
        const r = i(56744),
          s = i(51885),
          o = i(35508),
          a = i(95079);
        class n extends o.XyzDataSeries {
          constructor(e, t) {
            var i, r;
            switch (
              (super(e.webAssemblyContext, t),
              (this.yfield = a.EDataSeriesField.Y),
              (this.zfield = a.EDataSeriesField.Z),
              (this.originalSeriesProperty = e),
              (this.yfield =
                null !== (i = null == t ? void 0 : t.yfield) && void 0 !== i
                  ? i
                  : this.yfield),
              (this.zfield =
                null !== (r = null == t ? void 0 : t.zfield) && void 0 !== r
                  ? r
                  : this.zfield),
              (this.onBaseDataChanged = this.onBaseDataChanged.bind(this)),
              e.dataChanged.subscribe(this.onBaseDataChanged),
              this.originalSeries.type)
            ) {
              case s.EDataSeriesType.Ohlc:
                const e = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    e.getNativeYValues(),
                    e.getNativeOpenValues(),
                    e.getNativeHighValues(),
                    e.getNativeLowValues()
                  )),
                  (this.getOriginalZValues = () =>
                    (0, a.switchData)(
                      this.zfield,
                      e.getNativeYValues(),
                      e.getNativeOpenValues(),
                      e.getNativeHighValues(),
                      e.getNativeLowValues()
                    ));
                break;
              case s.EDataSeriesType.Xy:
                const t = this.originalSeries;
                (this.getOriginalYValues = () => t.getNativeYValues()),
                  (this.getOriginalZValues = () => t.getNativeYValues());
                break;
              case s.EDataSeriesType.Xyy:
                const i = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    i.getNativeYValues(),
                    i.getNativeY1Values()
                  )),
                  (this.getOriginalZValues = () =>
                    (0, a.switchData)(
                      this.zfield,
                      i.getNativeYValues(),
                      i.getNativeY1Values()
                    ));
                break;
              case s.EDataSeriesType.Hlc:
                const r = this.originalSeries;
                (this.getOriginalYValues = () =>
                  (0, a.switchData)(
                    this.yfield,
                    r.getNativeYValues(),
                    void 0,
                    r.getNativeHighValues(),
                    r.getNativeLowValues()
                  )),
                  (this.getOriginalZValues = () =>
                    (0, a.switchData)(
                      this.zfield,
                      r.getNativeYValues(),
                      void 0,
                      r.getNativeHighValues(),
                      r.getNativeLowValues()
                    ));
            }
          }
          get originalSeries() {
            return this.originalSeriesProperty;
          }
          detachFromOriginalSeries() {
            this.originalSeries.dataChanged.unsubscribe(this.onBaseDataChanged),
              (this.originalSeriesProperty = void 0);
          }
          delete() {
            (this.originalSeriesProperty = (0, r.deleteSafe)(
              this.originalSeries
            )),
              super.delete();
          }
          getOriginalXValues() {
            return this.originalSeries.getNativeXValues();
          }
          getOriginalYValues() {
            return this.originalSeries.getNativeYValues();
          }
          getOriginalZValues() {
            return this.originalSeries.getNativeZValues();
          }
          getOriginalCount() {
            return this.originalSeries.count();
          }
          onOriginalPropertyChanged(e) {}
          filterOnAppend(e) {
            this.filterAll();
          }
          filterOnUpdate(e) {
            this.filterAll();
          }
          filterOnInsert(e, t) {
            this.filterAll();
          }
          filterOnRemove(e, t) {
            this.filterAll();
          }
          onClear() {
            this.clear();
          }
          onBaseDataChanged(e) {
            const { changeType: t, name: i, index: r, count: o } = e;
            switch (t) {
              case s.EDataChangeType.Property:
                return void this.onOriginalPropertyChanged(i);
              case s.EDataChangeType.Append:
                this.filterOnAppend(o);
                break;
              case s.EDataChangeType.Clear:
                this.onClear();
                break;
              case s.EDataChangeType.Insert:
                this.filterOnInsert(r, o);
                break;
              case s.EDataChangeType.Remove:
                this.filterOnRemove(r, o);
                break;
              case s.EDataChangeType.Update:
                this.filterOnUpdate(r);
            }
          }
        }
        t.XyzFilterBase = n;
      },
      92475: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzScaleOffsetFilter = void 0);
        const r = i(51097),
          s = i(86241);
        class o extends s.XyzCustomFilter {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.scaleProperty = 1),
              (this.offsetProperty = 0),
              (this.scaleProperty =
                null !== (i = null == t ? void 0 : t.scale) && void 0 !== i
                  ? i
                  : this.scaleProperty),
              (this.offsetProperty =
                null !== (r = null == t ? void 0 : t.offset) && void 0 !== r
                  ? r
                  : this.offsetProperty),
              this.getOriginalCount() > 0 && this.filterAll();
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            (this.scaleProperty = e), this.filterAll();
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            (this.offsetProperty = e), this.filterAll();
          }
          toJSON(e = !1) {
            const t = this.originalSeries.toJSON(e);
            return Object.assign(Object.assign({}, t), {
              filter: {
                type: r.EDataFilterType.XyzScaleOffset,
                options: {
                  yfield: this.yfield,
                  zfield: this.zfield,
                  scale: this.scale,
                  offset: this.offset,
                },
              },
            });
          }
          filterFunctionProperty(e, t) {
            return t * this.scaleProperty + this.offsetProperty;
          }
        }
        t.XyzScaleOffsetFilter = o;
      },
      22382: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcDataSeries = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(65885),
          n = i(26361),
          l = i(9073),
          d = i(27699),
          h = i(46544),
          u = i(72934),
          c = i(24933),
          p = i(51885);
        class g extends c.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = p.EDataSeriesType.Hlc),
              (this.highValues = this.doubleVectorProvider.getDoubleVector(e)),
              (this.lowValues = this.doubleVectorProvider.getDoubleVector(e)),
              (null == t ? void 0 : t.xValues) &&
                (s.Guard.notNull(t.yValues, "options.yValues"),
                s.Guard.notNull(t.highValues, "options.highValues"),
                s.Guard.notNull(t.lowValues, "options.lowValues"),
                this.appendRange(
                  t.xValues,
                  t.yValues,
                  t.highValues,
                  t.lowValues,
                  t.metadata
                ),
                (null == t ? void 0 : t.fifoCapacity) &&
                  (null == t ? void 0 : t.fifoStartIndex) &&
                  (this.xValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.yValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.highValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.lowValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  )));
          }
          getNativeHighValues() {
            return this.highValues;
          }
          getNativeLowValues() {
            return this.lowValues;
          }
          append(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              const o = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                o,
                [e],
                [t]
              ),
                this.appendMetadata(s),
                o.push_back(e),
                this.getNativeYValues().push_back(t),
                this.getNativeHighValues().push_back(i),
                this.getNativeLowValues().push_back(r),
                this.notifyDataChanged(p.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i, r, o) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(e) || (0, a.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "hValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(r) || (0, a.isTypedArray)(r),
                  "lValues must be an array of numbers"
                ),
                s.Guard.arraysSameLengthArr([
                  { arg: e, name: "xValues" },
                  { arg: t, name: "yValues" },
                  { arg: i, name: "hValues" },
                  { arg: r, name: "lValues" },
                ]),
                o &&
                  (s.Guard.isTrue(
                    Array.isArray(o),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(e, "xValues", o, "metadata"));
              const n = this.getNativeXValues(),
                l = this.getNativeYValues(),
                d = this.getNativeHighValues(),
                h = this.getNativeLowValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                n,
                e,
                t
              ),
                this.appendMetadataRange(o, e.length),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  n,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  l,
                  t
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  d,
                  i
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  h,
                  r
                ),
                this.notifyDataChanged(
                  p.EDataChangeType.Append,
                  null,
                  e.length
                );
            }
          }
          update(e, t, i, r, s) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [t],
                e
              ),
              this.getNativeYValues().set(e, t),
              this.getNativeHighValues().set(e, i),
              this.getNativeLowValues().set(e, r),
              this.setMetadataAt(e, s),
              this.notifyDataChanged(p.EDataChangeType.Update, e, 1));
          }
          updateXyhl(e, t, i, r, s, o) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const a = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                a,
                [t],
                [i],
                e
              ),
                a.set(e, t),
                this.getNativeYValues().set(e, i),
                this.getNativeHighValues().set(e, r),
                this.getNativeLowValues().set(e, s),
                this.setMetadataAt(e, o),
                this.notifyDataChanged(p.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r, s, o) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const a = this.getNativeXValues(),
                n = this.getNativeYValues(),
                l = this.getNativeHighValues(),
                d = this.getNativeLowValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                a,
                [t],
                [i],
                e
              ),
                a.insertAt(e, t),
                n.insertAt(e, i),
                l.insertAt(e, r),
                d.insertAt(e, s),
                this.insertMetadata(e, o),
                this.notifyDataChanged(p.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, r, o, n) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(r) || (0, a.isTypedArray)(r),
                  "hValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(o) || (0, a.isTypedArray)(o),
                  "lValues must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insertRange"),
                s.Guard.arraysSameLengthArr([
                  { arg: t, name: "xValues" },
                  { arg: i, name: "yValues" },
                  { arg: r, name: "hValues" },
                  { arg: o, name: "lValues" },
                ]),
                n &&
                  (s.Guard.isTrue(
                    Array.isArray(n),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(t, "xValues", n, "metadata"));
              const l = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                l,
                t,
                i,
                e
              ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  l,
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeYValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  r,
                  this.getNativeHighValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  o,
                  this.getNativeLowValues(),
                  e
                ),
                this.insertMetadataRange(e, n),
                this.notifyDataChanged(p.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeYValues().removeAt(e),
              this.getNativeHighValues().removeAt(e),
              this.getNativeLowValues().removeAt(e),
              this.removeMetadataAt(e),
              this.notifyDataChanged(p.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeYValues().removeRange(e, t),
              this.getNativeHighValues().removeRange(e, t),
              this.getNativeLowValues().removeRange(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(p.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeYValues().clear(),
              this.getNativeHighValues().clear(),
              this.getNativeLowValues().clear(),
              this.setMetadata(void 0),
              this.notifyDataChanged(p.EDataChangeType.Clear, null, null));
          }
          getXRange(e, t, i, s) {
            const a = this.getXValues(e),
              { hValues: n, lValues: l } = this.getHlcValues(e);
            let d;
            if (t) {
              if (1 === this.count()) {
                const e = i ? n : a,
                  t = (s ? l : a).get(0) - 1,
                  r = e.get(0) + 1;
                return new o.NumberRange(t, r);
              }
              if (this.count() > 1) {
                let e, t, a;
                try {
                  if (
                    ((a = this.webAssemblyContext.NumberUtil.MinMax(
                      s ? this.getNativeLowValues() : this.getNativeXValues()
                    )),
                    (e = a.minD),
                    (a = this.webAssemblyContext.NumberUtil.MinMax(
                      i ? this.getNativeHighValues() : this.getNativeXValues()
                    )),
                    (t = a.maxD),
                    !(0, u.isRealNumber)(e) || !(0, u.isRealNumber)(t))
                  )
                    return new o.NumberRange(0, 0);
                } finally {
                  (0, r.deleteSafe)(a);
                }
                return e === t
                  ? new o.NumberRange(e - 1, t + 1)
                  : (e > t && ((d = e), (e = t), (t = d)),
                    new o.NumberRange(e, t));
              }
            } else {
              if (1 === this.count()) {
                const e = a.get(0) - 1,
                  t = a.get(0) + 1;
                return new o.NumberRange(e, t);
              }
              if (this.count() > 1) {
                let e = a.get(0),
                  t = a.get(this.count() - 1);
                if (!this.dataDistributionCalculator.isSortedAscending) {
                  let i;
                  try {
                    if (
                      ((i = this.webAssemblyContext.NumberUtil.MinMax(
                        this.getNativeXValues()
                      )),
                      !(0, u.isRealNumber)(i.minD) ||
                        !(0, u.isRealNumber)(i.maxD))
                    )
                      return new o.NumberRange(0, 0);
                    (e = i.minD), (t = i.maxD);
                  } finally {
                    (0, r.deleteSafe)(i);
                  }
                }
                return e === t
                  ? new o.NumberRange(e - 1, t + 1)
                  : (e > t && ((d = e), (e = t), (t = d)),
                    new o.NumberRange(e, t));
              }
            }
            return new o.NumberRange(0, 0);
          }
          getWindowedYRange(
            e,
            t,
            i = !1,
            s = p.EDataSeriesValueType.Default,
            a = l.EYRangeMode.Visible,
            d = !1,
            h,
            c
          ) {
            const { hValues: g, lValues: y, yValues: f } = this.getHlcValues(s);
            if (1 === this.count() && !d) {
              if (d) {
                const e = f.get(0);
                return new o.NumberRange(e, e);
              }
              {
                const e = Math.min(g.get(0), y.get(0)),
                  t = Math.max(g.get(0), y.get(0));
                return new o.NumberRange(e, t);
              }
            }
            const v = i
              ? e
              : this.getIndicesRange(
                  e,
                  !1,
                  a === l.EYRangeMode.Visible
                    ? n.ESearchMode.RoundUp
                    : n.ESearchMode.RoundDown,
                  a === l.EYRangeMode.Visible
                    ? n.ESearchMode.RoundDown
                    : n.ESearchMode.RoundUp
                );
            let m = Number.MAX_VALUE,
              S = Number.MIN_VALUE;
            const P = Math.max(Math.floor(v.min), 0),
              C = Math.min(Math.ceil(v.max), this.count() - 1);
            if (!(C < P)) {
              if (d) {
                let e;
                try {
                  if (
                    ((e = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                      f,
                      P,
                      C - P + 1
                    )),
                    !(0, u.isRealNumber)(e.minD) ||
                      !(0, u.isRealNumber)(e.maxD))
                  )
                    return new o.NumberRange(0, 0);
                  (m = e.minD), (S = e.maxD);
                } finally {
                  (0, r.deleteSafe)(e);
                }
              } else {
                const e = h ? g : f,
                  t = c ? y : f;
                let i;
                try {
                  if (
                    ((i = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                      e,
                      P,
                      C - P + 1
                    )),
                    !(0, u.isRealNumber)(i.minD) ||
                      !(0, u.isRealNumber)(i.maxD))
                  )
                    return new o.NumberRange(0, 0);
                  if (
                    ((S = i.maxD),
                    (i = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                      t,
                      P,
                      C - P + 1
                    )),
                    !(0, u.isRealNumber)(i.minD) ||
                      !(0, u.isRealNumber)(i.maxD))
                  )
                    return new o.NumberRange(0, 0);
                  m = i.minD;
                } finally {
                  (0, r.deleteSafe)(i);
                }
              }
              return new o.NumberRange(m, S);
            }
          }
          delete() {
            (this.highValues = (0, r.deleteSafe)(this.highValues)),
              (this.lowValues = (0, r.deleteSafe)(this.lowValues)),
              (this.hInitialAnimationValues = (0, r.deleteSafe)(
                this.hInitialAnimationValues
              )),
              (this.hFinalAnimationValues = (0, r.deleteSafe)(
                this.hFinalAnimationValues
              )),
              (this.lInitialAnimationValues = (0, r.deleteSafe)(
                this.lInitialAnimationValues
              )),
              (this.lFinalAnimationValues = (0, r.deleteSafe)(
                this.lFinalAnimationValues
              )),
              super.delete();
          }
          createAnimationVectors() {
            super.createAnimationVectors(),
              (this.lInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.lFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.hInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.hFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                ));
          }
          setInitialAnimationVectors(e) {
            if ((super.setInitialAnimationVectors(e), !e))
              return (
                this.hInitialAnimationValues.resize(0, 0),
                void this.lInitialAnimationValues.resize(0, 0)
              );
            (0, h.copyDoubleVector)(
              e.getNativeHighValues(),
              this.hInitialAnimationValues,
              this.webAssemblyContext
            ),
              (0, h.copyDoubleVector)(
                e.getNativeLowValues(),
                this.lInitialAnimationValues,
                this.webAssemblyContext
              );
          }
          setFinalAnimationVectors(e) {
            if ((super.setFinalAnimationVectors(e), !e))
              return (
                this.hFinalAnimationValues.resize(0, 0),
                void this.lFinalAnimationValues.resize(0, 0)
              );
            (0, h.copyDoubleVector)(
              e.getNativeHighValues(),
              this.hFinalAnimationValues,
              this.webAssemblyContext
            ),
              (0, h.copyDoubleVector)(
                e.getNativeLowValues(),
                this.lFinalAnimationValues,
                this.webAssemblyContext
              );
          }
          validateAnimationVectors() {
            super.validateAnimationVectors();
            const e = this.xInitialAnimationValues.size();
            if (
              e !== this.hInitialAnimationValues.size() ||
              e !== this.hFinalAnimationValues.size() ||
              e !== this.lInitialAnimationValues.size() ||
              e !== this.lFinalAnimationValues.size()
            )
              throw Error(
                "initialAnimationValues and finalAnimationValues must have the same length"
              );
          }
          updateAnimationProperties(e, t) {
            super.updateAnimationProperties(e, t),
              t.isOnStartAnimation
                ? (t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.hFinalAnimationValues,
                    this.getNativeHighValues(),
                    e
                  ),
                  t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.lFinalAnimationValues,
                    this.getNativeLowValues(),
                    e
                  ))
                : t.isDataSeriesAnimation &&
                  (t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.hInitialAnimationValues,
                    this.hFinalAnimationValues,
                    this.getNativeHighValues(),
                    e
                  ),
                  t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.lInitialAnimationValues,
                    this.lFinalAnimationValues,
                    this.getNativeLowValues(),
                    e
                  ));
          }
          getOptions(e = !1) {
            const t = super.getOptions(e);
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e),
                s = new Array(e),
                o = new Array(e);
              if (this.fifoCapacity && this.fifoSweeping)
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.getRaw(t)),
                    (r[t] = this.yValues.getRaw(t)),
                    (s[t] = this.highValues.getRaw(t)),
                    (o[t] = this.lowValues.getRaw(t));
              else
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.get(t)),
                    (r[t] = this.yValues.get(t)),
                    (s[t] = this.highValues.get(t)),
                    (o[t] = this.lowValues.get(t));
              const a = { xValues: i, yValues: r, highValues: s, lowValues: o };
              Object.assign(t, a);
            }
            return t;
          }
          reserve(e) {
            super.reserve(e),
              this.highValues.reserve(e),
              this.lowValues.reserve(e);
          }
          getHlcValues(e) {
            let t, i, r;
            switch (e) {
              case p.EDataSeriesValueType.FinalAnimationValues:
                (t = this.hFinalAnimationValues),
                  (i = this.lFinalAnimationValues),
                  (r = this.yFinalAnimationValues);
                break;
              case p.EDataSeriesValueType.InitialAnimationValues:
                (t = this.hInitialAnimationValues),
                  (i = this.lInitialAnimationValues),
                  (r = this.yInitialAnimationValues);
                break;
              default:
                (t = this.highValues), (i = this.lowValues), (r = this.yValues);
            }
            return { hValues: t, lValues: i, yValues: r };
          }
        }
        t.HlcDataSeries = g;
      },
      51885: (e, t) => {
        "use strict";
        var i, r, s;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDataSeriesValueType =
            t.EDataChangeType =
            t.EDataSeriesType =
              void 0),
          ((s = t.EDataSeriesType || (t.EDataSeriesType = {})).Xy = "Xy"),
          (s.Xyy = "Xyy"),
          (s.Xyz = "Xyz"),
          (s.Ohlc = "Ohlc"),
          (s.HeatmapUniform = "UniformHeatmap"),
          (s.HeatmapNonUniform = "NonUniformHeatmap"),
          (s.Hlc = "Hlc"),
          (s.XyText = "XyText"),
          ((r = t.EDataChangeType || (t.EDataChangeType = {}))[(r.Append = 0)] =
            "Append"),
          (r[(r.Insert = 1)] = "Insert"),
          (r[(r.Update = 2)] = "Update"),
          (r[(r.Remove = 3)] = "Remove"),
          (r[(r.Clear = 4)] = "Clear"),
          (r[(r.Property = 5)] = "Property"),
          ((i =
            t.EDataSeriesValueType || (t.EDataSeriesValueType = {})).Default =
            "Default"),
          (i.InitialAnimationValues = "InitialAnimationValues"),
          (i.FinalAnimationValues = "FinalAnimationValues");
      },
      32747: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DefaultPaletteProvider =
            t.EFillPaletteMode =
            t.EStrokePaletteMode =
              void 0),
          (function (e) {
            (e.GRADIENT = "GRADIENT"), (e.SOLID = "SOLID");
          })((i = t.EStrokePaletteMode || (t.EStrokePaletteMode = {}))),
          (function (e) {
            (e.GRADIENT = "GRADIENT"), (e.SOLID = "SOLID");
          })((r = t.EFillPaletteMode || (t.EFillPaletteMode = {})));
        class s {
          constructor() {
            (this.strokePaletteMode = i.GRADIENT),
              (this.fillPaletteMode = r.GRADIENT);
          }
          static createEmpty() {
            const e = new s();
            return (
              (e.overrideFillArgb = void 0),
              (e.overrideStrokeArgb = void 0),
              (e.overridePointMarkerArgb = void 0),
              e
            );
          }
          onAttached(e) {
            this.parentSeries = e;
          }
          onDetached() {
            this.parentSeries = void 0;
          }
          get isRangeIndependant() {
            return !1;
          }
          shouldUpdatePalette() {
            return !0;
          }
          overrideFillArgb(e, t, i, r, s) {}
          overrideStrokeArgb(e, t, i, r, s) {}
          overridePointMarkerArgb(e, t, i, r, s) {}
          toJSON() {}
        }
        t.DefaultPaletteProvider = s;
      },
      33906: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TemplateMetadataGenerator = void 0),
          (t.TemplateMetadataGenerator = class {
            constructor(e) {
              this.template = e;
            }
            getSingleMetadata() {
              return Object.assign({}, this.template);
            }
            getMetadata() {}
            toJSON() {
              return "toJSON" in this.template
                ? this.template.toJSON()
                : this.template;
            }
          });
      },
      43427: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NonUniformHeatmapDataSeries = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(99176),
          n = i(27699),
          l = i(24933),
          d = i(16179),
          h = i(51885);
        class u extends d.BaseHeatmapDataSeries {
          constructor(e, t) {
            if (
              (super(e, t),
              (this.type = h.EDataSeriesType.HeatmapNonUniform),
              s.Guard.notNull(t.xCellOffsets, "options.xCellOffsets"),
              s.Guard.notNull(t.yCellOffsets, "options.yCellOffsets"),
              Array.isArray(t.xCellOffsets))
            ) {
              if (t.xCellOffsets.length < this.arrayWidth + 1)
                throw new Error(
                  "xCellOffsets array should not be smaller than zValues width!"
                );
              this.xCellOffsetsProperty = t.xCellOffsets;
            } else this.xCellOffsetsGeneratorFunction = t.xCellOffsets;
            if (Array.isArray(t.yCellOffsets)) {
              if (t.yCellOffsets.length < this.arrayHeight + 1)
                throw new Error(
                  "yCellOffsets array should not be smaller than zValues height!"
                );
              this.yCellOffsetsProperty = t.yCellOffsets;
            } else this.yCellOffsetsGeneratorFunction = t.yCellOffsets;
            (this.nativeXOffsetsProperty =
              new this.webAssemblyContext.SCRTDoubleVector()),
              (this.nativeYOffsetsProperty =
                new this.webAssemblyContext.SCRTDoubleVector()),
              this.getZValues() &&
                this.notifyDataChanged(h.EDataChangeType.Append);
          }
          get xCellSizes() {
            return (
              this.xCellSizesProperty ||
                (this.xCellSizesProperty = this.calculateCellSizes(
                  this.xCellOffsetsProperty
                )),
              this.xCellSizesProperty
            );
          }
          get yCellSizes() {
            return (
              this.yCellSizesProperty ||
                (this.yCellSizesProperty = this.calculateCellSizes(
                  this.yCellOffsetsProperty
                )),
              this.yCellSizesProperty
            );
          }
          get xCellOffsets() {
            return this.xCellOffsetsProperty;
          }
          get yCellOffsets() {
            return this.yCellOffsetsProperty;
          }
          get nativeXCellOffsets() {
            return (
              this.nativeXOffsetsProperty ||
                ((this.nativeXOffsetsProperty = new a.SCRTDoubleVector()),
                (0, n.appendDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  this.nativeXOffsetsProperty,
                  this.xCellOffsets
                )),
              this.nativeXOffsetsProperty
            );
          }
          get nativeYCellOffsets() {
            return (
              this.nativeYOffsetsProperty ||
                ((this.nativeYOffsetsProperty = new a.SCRTDoubleVector()),
                (0, n.appendDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  this.nativeYOffsetsProperty,
                  this.yCellOffsets
                )),
              this.nativeYOffsetsProperty
            );
          }
          getXValue(e) {
            return this.xCellOffsetsProperty[e];
          }
          getYValue(e) {
            return this.yCellOffsetsProperty[e];
          }
          notifyDataChanged(e, t) {
            (this.xCellOffsets || this.xCellOffsetsGeneratorFunction) &&
              (this.yCellOffsets || this.yCellOffsetsGeneratorFunction) &&
              (e === h.EDataChangeType.Append &&
                (this.xCellOffsetsGeneratorFunction &&
                  ((this.xCellOffsetsProperty = this.mapCellSizes(
                    this.arrayWidth,
                    this.xCellOffsetsGeneratorFunction
                  )),
                  (this.xCellSizesProperty = this.calculateCellSizes(
                    this.xCellOffsetsProperty
                  ))),
                this.yCellOffsetsGeneratorFunction &&
                  ((this.yCellOffsetsProperty = this.mapCellSizes(
                    this.arrayHeight,
                    this.yCellOffsetsGeneratorFunction
                  )),
                  (this.yCellSizesProperty = this.calculateCellSizes(
                    this.yCellOffsetsProperty
                  ))),
                this.nativeXOffsetsProperty.clear(),
                this.nativeYOffsetsProperty.clear(),
                (0, n.appendDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  this.nativeXOffsetsProperty,
                  this.xCellOffsetsProperty
                ),
                (0, n.appendDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  this.nativeYOffsetsProperty,
                  this.yCellOffsetsProperty
                )),
              (this.xRangeProperty = new o.NumberRange(
                this.getXValue(0),
                this.getXValue(this.arrayWidth)
              )),
              (this.yRangeProperty = new o.NumberRange(
                this.getYValue(0),
                this.getYValue(this.arrayHeight)
              )),
              super.notifyDataChanged(e, t));
          }
          getXRange() {
            return this.xRangeProperty;
          }
          getYRange() {
            return this.yRangeProperty;
          }
          getXIndicesRange(e, t, i, r) {
            return (0, l.getIndicesRange)(
              this.webAssemblyContext,
              this.nativeXCellOffsets,
              e,
              !0
            );
          }
          getYIndicesRange(e, t, i, r) {
            return (0, l.getIndicesRange)(
              this.webAssemblyContext,
              this.nativeYCellOffsets,
              e,
              !0
            );
          }
          delete() {
            super.delete(),
              (this.nativeXOffsetsProperty = (0, r.deleteSafe)(
                this.nativeXOffsetsProperty
              )),
              (this.nativeYOffsetsProperty = (0, r.deleteSafe)(
                this.nativeYOffsetsProperty
              ));
          }
          getOptions(e) {
            const t = super.getOptions(e),
              i = {
                xCellOffsets: this.xCellOffsetsProperty,
                yCellOffsets: this.yCellOffsetsProperty,
              };
            return Object.assign(t, i);
          }
          mapCellSizes(e, t) {
            const i = [],
              r = e + 1;
            for (let e = 0; e < r; ++e) i.push(t(e));
            return i;
          }
          calculateCellSizes(e) {
            if (!e || 0 === e.length) return [];
            const t = e.length,
              i = e[t - 1] - e[0],
              r = [];
            for (let s = 0; s < t - 1; ++s) {
              const t = e[s + 1] - e[s];
              r.push(t / i);
            }
            return r;
          }
        }
        t.NonUniformHeatmapDataSeries = u;
      },
      35471: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcDataSeries = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(65885),
          n = i(26361),
          l = i(9073),
          d = i(27699),
          h = i(46544),
          u = i(24933),
          c = i(51885);
        class p extends u.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = c.EDataSeriesType.Ohlc),
              (this.openValues = this.doubleVectorProvider.getDoubleVector(e)),
              (this.highValues = this.doubleVectorProvider.getDoubleVector(e)),
              (this.lowValues = this.doubleVectorProvider.getDoubleVector(e)),
              (null == t ? void 0 : t.xValues) &&
                (this.appendRange(
                  t.xValues,
                  t.openValues,
                  t.highValues,
                  t.lowValues,
                  t.closeValues,
                  t.metadata
                ),
                (null == t ? void 0 : t.fifoCapacity) &&
                  (null == t ? void 0 : t.fifoStartIndex) &&
                  (this.xValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.yValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.openValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.highValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.lowValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  )));
          }
          getNativeOpenValues() {
            return this.openValues;
          }
          getNativeHighValues() {
            return this.highValues;
          }
          getNativeLowValues() {
            return this.lowValues;
          }
          getNativeCloseValues() {
            return this.getNativeYValues();
          }
          append(e, t, i, r, s, o) {
            if (!this.getIsDeleted()) {
              const a = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                a,
                [e],
                [s]
              ),
                this.appendMetadata(o),
                a.push_back(e),
                this.getNativeOpenValues().push_back(t),
                this.getNativeHighValues().push_back(i),
                this.getNativeLowValues().push_back(r),
                this.getNativeCloseValues().push_back(s),
                this.notifyDataChanged(c.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i, r, o, n) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(e) || (0, a.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                  "openValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "highValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(r) || (0, a.isTypedArray)(r),
                  "lowValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(o) || (0, a.isTypedArray)(o),
                  "closeValues must be an array of numbers"
                ),
                s.Guard.arraysSameLengthArr([
                  { arg: e, name: "xValues" },
                  { arg: t, name: "openValues" },
                  { arg: i, name: "highValues" },
                  { arg: r, name: "lowValues" },
                  { arg: o, name: "closeValues" },
                ]),
                n &&
                  (s.Guard.isTrue(
                    Array.isArray(n),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(e, "xValues", n, "metadata"));
              const l = this.getNativeXValues(),
                d = this.getNativeOpenValues(),
                h = this.getNativeHighValues(),
                u = this.getNativeLowValues(),
                p = this.getNativeCloseValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                l,
                e,
                o
              ),
                this.appendMetadataRange(n, e.length),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  l,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  d,
                  t
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  h,
                  i
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  u,
                  r
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  p,
                  o
                ),
                this.notifyDataChanged(
                  c.EDataChangeType.Append,
                  null,
                  e.length
                );
            }
          }
          update(e, t, i, r, s, o) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [s],
                e
              ),
              this.getNativeOpenValues().set(e, t),
              this.getNativeHighValues().set(e, i),
              this.getNativeLowValues().set(e, r),
              this.getNativeCloseValues().set(e, s),
              this.setMetadataAt(e, o),
              this.notifyDataChanged(c.EDataChangeType.Update, e, 1));
          }
          updateXohlc(e, t, i, r, s, o, a) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const n = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                n,
                [t],
                [o],
                e
              ),
                n.set(e, t),
                this.getNativeOpenValues().set(e, i),
                this.getNativeHighValues().set(e, r),
                this.getNativeLowValues().set(e, s),
                this.getNativeCloseValues().set(e, o),
                this.setMetadataAt(e, a),
                this.notifyDataChanged(c.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r, s, o, a) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const n = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                n,
                [t],
                [o],
                e
              ),
                n.insertAt(e, t),
                this.getNativeOpenValues().insertAt(e, i),
                this.getNativeHighValues().insertAt(e, r),
                this.getNativeLowValues().insertAt(e, s),
                this.getNativeCloseValues().insertAt(e, o),
                this.insertMetadata(e, a),
                this.notifyDataChanged(c.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, r, o, n, l) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "openValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(r) || (0, a.isTypedArray)(r),
                  "highValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(o) || (0, a.isTypedArray)(o),
                  "lowValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(n) || (0, a.isTypedArray)(n),
                  "closeValues must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insertRange"),
                s.Guard.arraysSameLengthArr([
                  { arg: t, name: "xValues" },
                  { arg: i, name: "openValues" },
                  { arg: r, name: "highValues" },
                  { arg: o, name: "lowValues" },
                  { arg: n, name: "closeValues" },
                ]),
                l &&
                  (s.Guard.isTrue(
                    Array.isArray(l),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(t, "xValues", l, "metadata"));
              const h = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                h,
                t,
                n,
                e
              ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  h,
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeOpenValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  r,
                  this.getNativeHighValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  o,
                  this.getNativeLowValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  n,
                  this.getNativeCloseValues(),
                  e
                ),
                this.insertMetadataRange(e, l),
                this.notifyDataChanged(c.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeOpenValues().removeAt(e),
              this.getNativeHighValues().removeAt(e),
              this.getNativeLowValues().removeAt(e),
              this.getNativeCloseValues().removeAt(e),
              this.removeMetadataAt(e),
              this.notifyDataChanged(c.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeOpenValues().removeRange(e, t),
              this.getNativeHighValues().removeRange(e, t),
              this.getNativeLowValues().removeRange(e, t),
              this.getNativeCloseValues().removeRange(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(c.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeOpenValues().clear(),
              this.getNativeHighValues().clear(),
              this.getNativeLowValues().clear(),
              this.getNativeCloseValues().clear(),
              this.setMetadata(void 0),
              this.notifyDataChanged(c.EDataChangeType.Clear, null, null));
          }
          delete() {
            (this.openValues = (0, r.deleteSafe)(this.openValues)),
              (this.highValues = (0, r.deleteSafe)(this.highValues)),
              (this.lowValues = (0, r.deleteSafe)(this.lowValues)),
              (this.openInitialAnimationValues = (0, r.deleteSafe)(
                this.openInitialAnimationValues
              )),
              (this.highInitialAnimationValues = (0, r.deleteSafe)(
                this.highInitialAnimationValues
              )),
              (this.lowInitialAnimationValues = (0, r.deleteSafe)(
                this.lowInitialAnimationValues
              )),
              (this.openFinalAnimationValues = (0, r.deleteSafe)(
                this.openFinalAnimationValues
              )),
              (this.highFinalAnimationValues = (0, r.deleteSafe)(
                this.highFinalAnimationValues
              )),
              (this.lowFinalAnimationValues = (0, r.deleteSafe)(
                this.lowFinalAnimationValues
              )),
              super.delete();
          }
          getWindowedYRange(
            e,
            t,
            i = !1,
            r = c.EDataSeriesValueType.Default,
            s = l.EYRangeMode.Visible
          ) {
            const {
              closeValues: a,
              highValues: d,
              lowValues: h,
            } = this.getOHLCValues(r);
            if (1 === this.count()) {
              const e = a.get(0);
              return new o.NumberRange(e, e);
            }
            const u = i
              ? e
              : this.getIndicesRange(
                  e,
                  !1,
                  s === l.EYRangeMode.Visible
                    ? n.ESearchMode.RoundUp
                    : n.ESearchMode.RoundDown,
                  s === l.EYRangeMode.Visible
                    ? n.ESearchMode.RoundDown
                    : n.ESearchMode.RoundUp
                );
            let p = Number.MAX_VALUE,
              g = Number.MIN_VALUE;
            const y = Math.max(u.min, 0),
              f = Math.min(u.max, this.count() - 1);
            if (!(f < y)) {
              for (let e = y; e <= f; e++) {
                const t = d.get(e),
                  i = h.get(e);
                i < p && (p = i), t > g && (g = t);
              }
              return new o.NumberRange(p, g);
            }
          }
          createAnimationVectors() {
            super.createAnimationVectors(),
              (this.openInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.highInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.lowInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.openFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.highFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.lowFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                ));
          }
          setInitialAnimationVectors(e) {
            if ((super.setInitialAnimationVectors(e), !e))
              return (
                this.openInitialAnimationValues.resize(0, 0),
                this.highInitialAnimationValues.resize(0, 0),
                void this.lowInitialAnimationValues.resize(0, 0)
              );
            (0, h.copyDoubleVector)(
              e.getNativeOpenValues(),
              this.openInitialAnimationValues,
              this.webAssemblyContext
            ),
              (0, h.copyDoubleVector)(
                e.getNativeHighValues(),
                this.highInitialAnimationValues,
                this.webAssemblyContext
              ),
              (0, h.copyDoubleVector)(
                e.getNativeLowValues(),
                this.lowInitialAnimationValues,
                this.webAssemblyContext
              );
          }
          setFinalAnimationVectors(e) {
            if ((super.setFinalAnimationVectors(e), !e))
              return (
                this.openFinalAnimationValues.resize(0, 0),
                this.highFinalAnimationValues.resize(0, 0),
                void this.lowFinalAnimationValues.resize(0, 0)
              );
            (0, h.copyDoubleVector)(
              e.getNativeOpenValues(),
              this.openFinalAnimationValues,
              this.webAssemblyContext
            ),
              (0, h.copyDoubleVector)(
                e.getNativeHighValues(),
                this.highFinalAnimationValues,
                this.webAssemblyContext
              ),
              (0, h.copyDoubleVector)(
                e.getNativeLowValues(),
                this.lowFinalAnimationValues,
                this.webAssemblyContext
              );
          }
          validateAnimationVectors() {
            const e = this.xInitialAnimationValues.size();
            if (
              e !== this.yInitialAnimationValues.size() ||
              e !== this.openInitialAnimationValues.size() ||
              e !== this.highInitialAnimationValues.size() ||
              e !== this.lowInitialAnimationValues.size() ||
              e !== this.xFinalAnimationValues.size() ||
              e !== this.yFinalAnimationValues.size() ||
              e !== this.openFinalAnimationValues.size() ||
              e !== this.highFinalAnimationValues.size() ||
              e !== this.lowFinalAnimationValues.size()
            )
              throw Error(
                "initialAnimationValues and finalAnimationValues must have the same length"
              );
          }
          updateAnimationProperties(e, t) {
            super.updateAnimationProperties(e, t),
              t.isOnStartAnimation
                ? (t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.openFinalAnimationValues,
                    this.getNativeOpenValues(),
                    e
                  ),
                  t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.highFinalAnimationValues,
                    this.getNativeHighValues(),
                    e
                  ),
                  t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.lowFinalAnimationValues,
                    this.getNativeLowValues(),
                    e
                  ))
                : t.isDataSeriesAnimation &&
                  (t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.openInitialAnimationValues,
                    this.openFinalAnimationValues,
                    this.getNativeOpenValues(),
                    e
                  ),
                  t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.highInitialAnimationValues,
                    this.highFinalAnimationValues,
                    this.getNativeHighValues(),
                    e
                  ),
                  t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.lowInitialAnimationValues,
                    this.lowFinalAnimationValues,
                    this.getNativeLowValues(),
                    e
                  ));
          }
          getOptions(e = !1) {
            const t = super.getOptions(e);
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e),
                s = new Array(e),
                o = new Array(e),
                a = new Array(e);
              if (this.fifoCapacity && this.fifoSweeping)
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.getRaw(t)),
                    (r[t] = this.openValues.getRaw(t)),
                    (a[t] = this.yValues.getRaw(t)),
                    (s[t] = this.highValues.getRaw(t)),
                    (o[t] = this.lowValues.getRaw(t));
              else
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.get(t)),
                    (r[t] = this.openValues.get(t)),
                    (a[t] = this.yValues.get(t)),
                    (s[t] = this.highValues.get(t)),
                    (o[t] = this.lowValues.get(t));
              const n = {
                xValues: i,
                openValues: r,
                highValues: s,
                lowValues: o,
                closeValues: a,
              };
              Object.assign(t, n);
            }
            return t;
          }
          reserve(e) {
            super.reserve(e),
              this.openValues.reserve(e),
              this.highValues.reserve(e),
              this.lowValues.reserve(e);
          }
          getOHLCValues(e) {
            let t, i, r, s;
            switch (e) {
              case c.EDataSeriesValueType.FinalAnimationValues:
                (t = this.openFinalAnimationValues),
                  (i = this.highFinalAnimationValues),
                  (r = this.lowFinalAnimationValues),
                  (s = this.yFinalAnimationValues);
                break;
              case c.EDataSeriesValueType.InitialAnimationValues:
                (t = this.openInitialAnimationValues),
                  (i = this.highInitialAnimationValues),
                  (r = this.lowInitialAnimationValues),
                  (s = this.yInitialAnimationValues);
                break;
              default:
                (t = this.openValues),
                  (i = this.highValues),
                  (r = this.lowValues),
                  (s = this.yValues);
            }
            return {
              openValues: t,
              highValues: i,
              lowValues: r,
              closeValues: s,
            };
          }
        }
        t.OhlcDataSeries = p;
      },
      52881: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PaletteFactory = void 0);
        const r = i(28436),
          s = i(22950),
          o = i(48008),
          a = i(32747);
        class n {
          static createGradient(e, t, i) {
            t.endPoint.x, t.startPoint.x, t.endPoint.y, t.startPoint.y;
            const o = n.createColorMap(e, t.gradientStops.slice(0));
            let l;
            const d = (t, i, r, a = 1) => {
                const n = r / (l.getDataSeriesValuesCount() - 1),
                  d = e.NumberUtil.Constrain(
                    Math.round(n * (o.length - 1)),
                    0,
                    o.length - 1
                  ),
                  h = o[d];
                return (0, s.uintArgbColorMultiplyOpacity)(h, a);
              },
              h = void 0 === i || !0 === (null == i ? void 0 : i.enableStroke),
              u = !0 === (null == i ? void 0 : i.enableFill),
              c = !0 === (null == i ? void 0 : i.enablePointMarkers);
            return {
              strokePaletteMode: a.EStrokePaletteMode.GRADIENT,
              fillPaletteMode: a.EFillPaletteMode.GRADIENT,
              onAttached(e) {
                l = e;
              },
              onDetached() {},
              overrideStrokeArgb(e, t, r) {
                var s;
                return h
                  ? d(
                      0,
                      0,
                      r,
                      null !== (s = null == i ? void 0 : i.strokeOpacity) &&
                        void 0 !== s
                        ? s
                        : 1
                    )
                  : void 0;
              },
              overrideFillArgb(e, t, r, s, o) {
                var a;
                return u
                  ? d(
                      0,
                      0,
                      r,
                      null !== (a = null == i ? void 0 : i.fillOpacity) &&
                        void 0 !== a
                        ? a
                        : 1
                    )
                  : void 0;
              },
              overridePointMarkerArgb(e, t, r, s, o) {
                var a;
                const n =
                  null !== (a = null == i ? void 0 : i.pointMarkerOpacity) &&
                  void 0 !== a
                    ? a
                    : 1;
                return c
                  ? { fill: d(0, 0, r, n), stroke: d(0, 0, r, n) }
                  : void 0;
              },
              toJSON: () => ({
                type: r.EPaletteProviderType.Gradient,
                options: t,
              }),
            };
          }
          static createYGradient(e, t, i, o) {
            const l = n.createColorMap(e, t.gradientStops.slice(0));
            let d;
            const h = (t, r = 1) => {
                const o = (t - i.min) / i.diff,
                  a = e.NumberUtil.Constrain(
                    Math.round(o * (l.length - 1)),
                    0,
                    l.length - 1
                  ),
                  n = l[a];
                return (0, s.uintArgbColorMultiplyOpacity)(n, r);
              },
              u = void 0 === o || !0 === (null == o ? void 0 : o.enableStroke),
              c = !0 === (null == o ? void 0 : o.enableFill),
              p = !0 === (null == o ? void 0 : o.enablePointMarkers);
            return {
              strokePaletteMode: a.EStrokePaletteMode.GRADIENT,
              fillPaletteMode: a.EFillPaletteMode.GRADIENT,
              onAttached(e) {
                d = e;
              },
              onDetached() {},
              overrideStrokeArgb(e, t, i) {
                var r;
                return u
                  ? h(
                      t,
                      null !== (r = null == o ? void 0 : o.strokeOpacity) &&
                        void 0 !== r
                        ? r
                        : 1
                    )
                  : void 0;
              },
              overrideFillArgb(e, t, i, r, s) {
                var a;
                return c
                  ? h(
                      t,
                      null !== (a = null == o ? void 0 : o.strokeOpacity) &&
                        void 0 !== a
                        ? a
                        : 1
                    )
                  : void 0;
              },
              overridePointMarkerArgb(e, t, i, r, s) {
                var a;
                const n =
                  null !== (a = null == o ? void 0 : o.pointMarkerOpacity) &&
                  void 0 !== a
                    ? a
                    : 1;
                return p ? { fill: h(t, n), stroke: h(t, n) } : void 0;
              },
              toJSON: () => ({
                type: r.EPaletteProviderType.Gradient,
                options: t,
              }),
            };
          }
          static createColorMap(e, t) {
            const i = [],
              r = t.length,
              s = t[0].offset;
            let a = t[t.length - 1].offset - s;
            const l = a / (n.precision - 1);
            let d = (0, o.parseColorToUIntArgb)(t[0].color),
              h = t[0].offset,
              u = d,
              c = h;
            r > 1 &&
              ((u = (0, o.parseColorToUIntArgb)(t[1].color)),
              (c = t[1].offset)),
              (a = c - h);
            let p = 0;
            for (let g = 0; g < n.precision; ++g) {
              const n = s + g * l;
              n >= c &&
                (p++,
                (h = c),
                (d = u),
                p + 1 < r &&
                  ((u = (0, o.parseColorToUIntArgb)(t[p + 1].color)),
                  (c = t[p + 1].offset)),
                (a = c - h));
              let y = 0;
              if (d === u || a <= 1e-11) y = u;
              else {
                const t = (n - h) / a;
                y = e.NumberUtil.LinearInterpolateI(d, u, t);
              }
              i.push(y);
            }
            return i;
          }
        }
        (t.PaletteFactory = n), (n.precision = 500);
      },
      39484: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BasePointSeriesResampled = void 0);
        const r = i(55023);
        class s extends r.DeletableEntity {
          constructor(e, t) {
            super(),
              (this.resampled = !0),
              (this.wasmContext = e),
              (this.intIndexes = new e.IntVector()),
              (this.indexes = new e.SCRTDoubleVector()),
              (this.xValues = new e.SCRTDoubleVector()),
              (this.yValues = new e.SCRTDoubleVector()),
              (this.xRange = t);
          }
          get count() {
            return this.xValues.size();
          }
          delete() {
            this.intIndexes.delete(),
              this.indexes.delete(),
              this.xValues.delete(),
              this.yValues.delete(),
              (this.wasmContext = void 0);
          }
          clearIntIndexes() {
            this.intIndexes.clear();
          }
          debugOutputForUnitTests() {
            console.log(`points count ${this.count}`),
              console.log("xResampled at min", this.xValues.get(0)),
              console.log("openResampled at min", this.yValues.get(0));
            const e = Math.round(this.count / 2);
            console.log("middle", e),
              console.log("xResampled at middle", this.xValues.get(e)),
              console.log("yValues at middle", this.yValues.get(e));
            const t = this.count - 1;
            console.log("xResampled at end", this.xValues.get(t)),
              console.log("yValues at end", this.yValues.get(t));
          }
        }
        t.BasePointSeriesResampled = s;
      },
      33070: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BasePointSeriesWrapped = void 0),
          (t.BasePointSeriesWrapped = class {
            constructor(e, t, i) {
              (this.resampled = !1),
                (this.dataSeries = e),
                (this.count = e.count()),
                (this.xValues = this.dataSeries.getXValues(i)),
                (this.yValues = null != t ? t : this.dataSeries.getYValues(i)),
                (this.fifoStartIndex = e.fifoStartIndex);
            }
            get indexes() {
              return (
                this.indexesProperty ||
                  (this.indexesProperty = this.dataSeries.getNativeIndexes()),
                this.indexesProperty
              );
            }
          });
      },
      89236: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HlcPointSeriesWrapped = void 0);
        const r = i(33070);
        class s extends r.BasePointSeriesWrapped {
          constructor(e) {
            super(e),
              (this.highValues = e.getNativeHighValues()),
              (this.lowValues = e.getNativeLowValues()),
              (this.closeValues = this.yValues);
          }
        }
        t.HlcPointSeriesWrapped = s;
      },
      65052: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcPointSeriesResampled = void 0);
        const r = i(39484);
        class s extends r.BasePointSeriesResampled {
          constructor(e, t) {
            super(e, t),
              (this.openValues = new e.SCRTDoubleVector()),
              (this.highValues = new e.SCRTDoubleVector()),
              (this.lowValues = new e.SCRTDoubleVector()),
              (this.closeValues = this.yValues);
          }
          delete() {
            this.openValues.delete(),
              this.highValues.delete(),
              this.lowValues.delete(),
              super.delete();
          }
          debugOutputForUnitTests() {
            console.log(`points count ${this.count}`),
              console.log("xResampled at min", this.xValues.get(0)),
              console.log("openResampled at min", this.openValues.get(0)),
              console.log("highResampled at min", this.highValues.get(0)),
              console.log("lowResampled at min", this.lowValues.get(0)),
              console.log("closeResampled at min", this.closeValues.get(0));
            const e = Math.round(this.count / 2);
            console.log("middle", e),
              console.log("xResampled at middle", this.xValues.get(e)),
              console.log("openResampled at middle", this.openValues.get(e)),
              console.log("highResampled at middle", this.highValues.get(e)),
              console.log("lowResampled at middle", this.lowValues.get(e)),
              console.log("closeResampled at middle", this.closeValues.get(e));
            const t = this.count - 1;
            console.log("xResampled at end", this.xValues.get(t)),
              console.log("openResampled at end", this.openValues.get(t)),
              console.log("highResampled at end", this.highValues.get(t)),
              console.log("lowResampled at end", this.lowValues.get(t)),
              console.log("closeResampled at end", this.closeValues.get(t));
          }
        }
        t.OhlcPointSeriesResampled = s;
      },
      6328: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcPointSeriesWrapped = void 0);
        const r = i(33070);
        class s extends r.BasePointSeriesWrapped {
          constructor(e) {
            super(e),
              (this.openValues = e.getNativeOpenValues()),
              (this.highValues = e.getNativeHighValues()),
              (this.lowValues = e.getNativeLowValues()),
              (this.closeValues = this.yValues);
          }
        }
        t.OhlcPointSeriesWrapped = s;
      },
      58564: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyPointSeriesResampled = void 0);
        const r = i(39484);
        class s extends r.BasePointSeriesResampled {
          constructor(e, t) {
            super(e, t);
          }
        }
        t.XyPointSeriesResampled = s;
      },
      88915: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyPointSeriesWrapped = void 0);
        const r = i(33070);
        class s extends r.BasePointSeriesWrapped {
          constructor(e, t, i) {
            super(e, t, i);
          }
        }
        t.XyPointSeriesWrapped = s;
      },
      14023: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyPointSeriesResampled = void 0);
        const r = i(39484);
        class s extends r.BasePointSeriesResampled {
          constructor(e, t) {
            super(e, t), (this.y1Values = new e.SCRTDoubleVector());
          }
          delete() {
            this.y1Values.delete(), super.delete();
          }
          debugOutputForUnitTests() {
            console.log(`points count ${this.count}`),
              console.log("xResampled at min", this.xValues.get(0)),
              console.log("yValues at min", this.yValues.get(0)),
              console.log("y1Values at min", this.y1Values.get(0));
            const e = Math.round(this.count / 2);
            console.log("middle", e),
              console.log("xResampled at middle", this.xValues.get(e)),
              console.log("yValues at middle", this.yValues.get(e)),
              console.log("y1Values at middle", this.y1Values.get(e));
            const t = this.count - 1;
            console.log("xResampled at end", this.xValues.get(t)),
              console.log("yValues at end", this.yValues.get(t)),
              console.log("y1Values at end", this.y1Values.get(t));
          }
        }
        t.XyyPointSeriesResampled = s;
      },
      2354: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyPointSeriesWrapped = void 0);
        const r = i(33070);
        class s extends r.BasePointSeriesWrapped {
          constructor(e, t, i) {
            super(e, t),
              (this.y1Values = null != i ? i : e.getNativeY1Values());
          }
        }
        t.XyyPointSeriesWrapped = s;
      },
      62507: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzPointSeriesWrapped = void 0);
        const r = i(33070);
        class s extends r.BasePointSeriesWrapped {
          constructor(e) {
            super(e), (this.zValues = e.getNativeZValues());
          }
        }
        t.XyzPointSeriesWrapped = s;
      },
      15799: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformHeatmapDataSeries = void 0);
        const r = i(98140),
          s = i(16179),
          o = i(51885);
        class a extends s.BaseHeatmapDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = o.EDataSeriesType.HeatmapUniform),
              (this.xStartProperty = t.xStart),
              (this.xStepProperty = t.xStep),
              (this.yStartProperty = t.yStart),
              (this.yStepProperty = t.yStep),
              (this.xRangeProperty = new r.NumberRange(
                this.xStart,
                this.getXValue(this.arrayWidth)
              )),
              (this.yRangeProperty = new r.NumberRange(
                this.yStart,
                this.getYValue(this.arrayHeight)
              ));
          }
          get xStart() {
            return this.xStartProperty;
          }
          set xStart(e) {
            (this.xStartProperty = e),
              this.notifyDataChanged(o.EDataChangeType.Update);
          }
          get xStep() {
            return this.xStepProperty;
          }
          set xStep(e) {
            (this.xStepProperty = e),
              this.notifyDataChanged(o.EDataChangeType.Update);
          }
          get yStart() {
            return this.yStartProperty;
          }
          set yStart(e) {
            (this.yStartProperty = e),
              this.notifyDataChanged(o.EDataChangeType.Update);
          }
          get yStep() {
            return this.yStepProperty;
          }
          set yStep(e) {
            (this.yStepProperty = e),
              this.notifyDataChanged(o.EDataChangeType.Update);
          }
          getXValue(e) {
            const t = this.xStep * e;
            return this.xStart + t;
          }
          getYValue(e) {
            const t = this.yStep * e;
            return this.yStart + t;
          }
          notifyDataChanged(e, t) {
            (this.xRangeProperty = new r.NumberRange(
              this.xStart,
              this.getXValue(this.arrayWidth)
            )),
              (this.yRangeProperty = new r.NumberRange(
                this.yStart,
                this.getYValue(this.arrayHeight)
              )),
              super.notifyDataChanged(e, t);
          }
          getOptions(e) {
            const t = super.getOptions(e),
              i = {
                xStart: this.xStart,
                xStep: this.xStep,
                yStart: this.yStart,
                yStep: this.yStep,
              };
            return Object.assign(t, i);
          }
          getXRange() {
            return this.xRangeProperty;
          }
          getYRange() {
            return this.yRangeProperty;
          }
        }
        t.UniformHeatmapDataSeries = a;
      },
      9682: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyDataSeries = void 0);
        const r = i(23866),
          s = i(65885),
          o = i(27699),
          a = i(68021),
          n = i(24933),
          l = i(51885);
        class d extends n.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = l.EDataSeriesType.Xy),
              (null == t ? void 0 : t.xValues) &&
                (r.Guard.notNull(t.yValues, "options.yValues"),
                this.appendRange(t.xValues, t.yValues, t.metadata),
                (null == t ? void 0 : t.fifoCapacity) &&
                  (null == t ? void 0 : t.fifoStartIndex) &&
                  (this.xValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.yValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  )));
          }
          append(e, t, i) {
            if (!this.getIsDeleted()) {
              const r = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                r,
                [e],
                [t]
              ),
                this.appendMetadata(i),
                r.push_back(e),
                this.getNativeYValues().push_back(t),
                this.notifyDataChanged(l.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i) {
            var o;
            if (!this.getIsDeleted()) {
              const n = a.PerformanceDebugHelper.mark(
                a.EPerformanceMarkType.DataUpdateStart,
                { contextId: this.id }
              );
              r.Guard.isTrue(
                (0, s.isNumberArray)(e) || (0, s.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                r.Guard.isTrue(
                  (0, s.isNumberArray)(t) || (0, s.isTypedArray)(t),
                  "yValues must be an array of numbers"
                ),
                r.Guard.arraysSameLength(e, "xValues", t, "yValues"),
                i &&
                  (r.Guard.isTrue(
                    Array.isArray(i),
                    "metadata must be an array of IPointMetadata"
                  ),
                  r.Guard.arraysSameLength(e, "xValues", i, "metadata"));
              const d = this.getNativeXValues(),
                h = this.getNativeYValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                d,
                e,
                t
              ),
                this.appendMetadataRange(i, e.length),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  d,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  h,
                  t
                ),
                this.notifyDataChanged(
                  l.EDataChangeType.Append,
                  null,
                  e.length
                ),
                a.PerformanceDebugHelper.mark(
                  a.EPerformanceMarkType.DataUpdateEnd,
                  {
                    relatedId:
                      null === (o = null == n ? void 0 : n.detail) ||
                      void 0 === o
                        ? void 0
                        : o.relatedId,
                    contextId: this.id,
                  }
                );
            }
          }
          update(e, t, i) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [t],
                e
              ),
              this.getNativeYValues().set(e, t),
              this.setMetadataAt(e, i),
              this.notifyDataChanged(l.EDataChangeType.Update, e, 1));
          }
          updateXy(e, t, i, r) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const s = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                s,
                [t],
                [i],
                e
              ),
                s.set(e, t),
                this.getNativeYValues().set(e, i),
                this.setMetadataAt(e, r),
                this.notifyDataChanged(l.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const s = this.getNativeXValues(),
                o = this.getNativeYValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                s,
                [t],
                [i],
                e
              ),
                s.insertAt(e, t),
                o.insertAt(e, i),
                this.insertMetadata(e, r),
                this.notifyDataChanged(l.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, a) {
            if (!this.getIsDeleted()) {
              r.Guard.isTrue(
                (0, s.isNumberArray)(t) || (0, s.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                r.Guard.isTrue(
                  (0, s.isNumberArray)(i) || (0, s.isTypedArray)(i),
                  "yValues must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                r.Guard.arraysSameLength(t, "xValues", i, "yValues"),
                this.throwIfFifo("insertRange"),
                a &&
                  (r.Guard.isTrue(
                    Array.isArray(a),
                    "metadata must be an array of IPointMetadata"
                  ),
                  r.Guard.arraysSameLength(t, "xValues", a, "metadata"));
              const n = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                n,
                t,
                i,
                e
              ),
                (0, o.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  this.getNativeXValues(),
                  e
                ),
                (0, o.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeYValues(),
                  e
                ),
                this.insertMetadataRange(e, a),
                this.notifyDataChanged(l.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeYValues().removeAt(e),
              this.removeMetadataAt(e),
              this.notifyDataChanged(l.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeYValues().removeRange(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(l.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeYValues().clear(),
              this.setMetadata(void 0),
              this.notifyDataChanged(l.EDataChangeType.Clear, null, null));
          }
          getOptions(e = !1) {
            const t = super.getOptions(e);
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e);
              if (this.fifoCapacity && this.fifoSweeping)
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.getRaw(t)),
                    (r[t] = this.yValues.getRaw(t));
              else
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.get(t)), (r[t] = this.yValues.get(t));
              const s = { xValues: i, yValues: r };
              Object.assign(t, s);
            }
            return t;
          }
        }
        t.XyDataSeries = d;
      },
      29803: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyTextDataSeries = void 0);
        const r = i(23866),
          s = i(65885),
          o = i(45215),
          a = i(27699),
          n = i(24933),
          l = i(51885);
        class d extends n.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = l.EDataSeriesType.XyText),
              (this.textValuesProperty = []),
              (null == t ? void 0 : t.xValues) &&
                (r.Guard.notNull(t.yValues, "options.yValues"),
                this.appendRange(
                  t.xValues,
                  t.yValues,
                  t.textValues,
                  t.metadata
                ));
          }
          get textValues() {
            return this.textValuesProperty;
          }
          getTextValue(e) {
            if (!this.fifoCapacity) return this.textValuesProperty[e];
            if (this.fifoSweeping)
              return this.fifoCapacity - e < this.fifoSweepingGap
                ? ""
                : this.textValuesProperty[e];
            {
              const t = (this.xValues.getStartIndex() + e) % this.fifoCapacity;
              return this.textValuesProperty[t];
            }
          }
          append(e, t, i, r) {
            if (!this.getIsDeleted()) {
              const s = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                s,
                [e],
                [t]
              ),
                this.appendMetadata(r),
                this.fifoCapacity && this.count() === this.fifoCapacity
                  ? (this.textValuesProperty[this.xValues.getStartIndex()] = i)
                  : this.textValuesProperty.push(i),
                s.push_back(e),
                this.getNativeYValues().push_back(t),
                this.notifyDataChanged(l.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i, a) {
            if (!this.getIsDeleted()) {
              r.Guard.isTrue(
                (0, s.isNumberArray)(e) || (0, s.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                r.Guard.isTrue(
                  (0, s.isNumberArray)(t) || (0, s.isTypedArray)(t),
                  "yValues must be an array of numbers"
                ),
                r.Guard.arraysSameLength(e, "xValues", t, "yValues"),
                a &&
                  (r.Guard.isTrue(
                    Array.isArray(a),
                    "metadata must be an array of IPointMetadata"
                  ),
                  r.Guard.arraysSameLength(e, "xValues", a, "metadata"));
              const n = this.getNativeXValues(),
                d = this.getNativeYValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                n,
                e,
                t
              ),
                this.appendMetadataRange(a, e.length),
                this.fifoCapacity
                  ? (0, o.appendRangeFifo)(
                      i,
                      this.textValuesProperty,
                      this.fifoCapacity,
                      this.xValues.getStartIndex()
                    )
                  : this.textValuesProperty.push(...i),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  n,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  d,
                  t
                ),
                this.notifyDataChanged(
                  l.EDataChangeType.Append,
                  null,
                  e.length
                );
            }
          }
          update(e, t, i, r) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [t],
                e
              ),
              this.getNativeYValues().set(e, t),
              (this.textValuesProperty[e] = i),
              this.setMetadataAt(e, r),
              this.notifyDataChanged(l.EDataChangeType.Update, e, 1));
          }
          updateXyText(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const o = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.set(e, t),
                this.getNativeYValues().set(e, i),
                (this.textValuesProperty[e] = r),
                this.setMetadataAt(e, s),
                this.notifyDataChanged(l.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const o = this.getNativeXValues(),
                a = this.getNativeYValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.insertAt(e, t),
                a.insertAt(e, i),
                this.textValuesProperty.splice(e, 0, r),
                this.insertMetadata(e, s),
                this.notifyDataChanged(l.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, o, n) {
            if (!this.getIsDeleted()) {
              r.Guard.isTrue(
                (0, s.isNumberArray)(t) || (0, s.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                r.Guard.isTrue(
                  (0, s.isNumberArray)(i) || (0, s.isTypedArray)(i),
                  "yValues must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insertRange"),
                r.Guard.arraysSameLength(t, "xValues", i, "yValues"),
                n &&
                  (r.Guard.isTrue(
                    Array.isArray(n),
                    "metadata must be an array of IPointMetadata"
                  ),
                  r.Guard.arraysSameLength(t, "xValues", n, "metadata"));
              const d = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                d,
                t,
                i,
                e
              ),
                (0, a.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  this.getNativeXValues(),
                  e
                ),
                (0, a.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeYValues(),
                  e
                ),
                this.textValuesProperty.splice(e, 0, ...o),
                this.insertMetadataRange(e, n),
                this.notifyDataChanged(l.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeYValues().removeAt(e),
              this.textValuesProperty.splice(e, 1),
              this.removeMetadataAt(e),
              this.notifyDataChanged(l.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeYValues().removeRange(e, t),
              this.textValuesProperty.splice(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(l.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeYValues().clear(),
              (this.textValuesProperty = []),
              this.setMetadata(void 0),
              this.notifyDataChanged(l.EDataChangeType.Clear, null, null));
          }
          getOptions(e = !1) {
            const t = super.getOptions();
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e);
              for (let t = 0; t < e; t++)
                (i[t] = this.xValues.get(t)), (r[t] = this.yValues.get(t));
              const s = {
                xValues: i,
                yValues: r,
                textValues: this.textValuesProperty,
              };
              Object.assign(t, s);
            }
            return t;
          }
        }
        t.XyTextDataSeries = d;
      },
      75650: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyyDataSeries = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(98140),
          a = i(65885),
          n = i(26361),
          l = i(9073),
          d = i(27699),
          h = i(46544),
          u = i(72934),
          c = i(24933),
          p = i(51885);
        class g extends c.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = p.EDataSeriesType.Xyy),
              (this.y1Values = this.doubleVectorProvider.getDoubleVector(e)),
              (null == t ? void 0 : t.xValues) &&
                (s.Guard.notNull(t.yValues, "options.yValues"),
                s.Guard.notNull(t.y1Values, "options.y1Values"),
                this.appendRange(t.xValues, t.yValues, t.y1Values, t.metadata),
                (null == t ? void 0 : t.fifoCapacity) &&
                  (null == t ? void 0 : t.fifoStartIndex) &&
                  (this.xValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.yValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.y1Values.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  )));
          }
          getNativeY1Values() {
            return this.y1Values;
          }
          append(e, t, i, r) {
            if (!this.getIsDeleted()) {
              const s = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                s,
                [e],
                [t]
              ),
                this.appendMetadata(r),
                s.push_back(e),
                this.getNativeYValues().push_back(t),
                this.getNativeY1Values().push_back(i),
                this.notifyDataChanged(p.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i, r) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(e) || (0, a.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "y1Values must be an array of numbers"
                ),
                s.Guard.arraysSameLengthArr([
                  { arg: e, name: "xValues" },
                  { arg: t, name: "yValues" },
                  { arg: i, name: "y1Values" },
                ]),
                r &&
                  (s.Guard.isTrue(
                    Array.isArray(r),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(e, "xValues", r, "metadata"));
              const o = this.getNativeXValues(),
                n = this.getNativeYValues(),
                l = this.getNativeY1Values();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                o,
                e,
                t
              ),
                this.appendMetadataRange(r, e.length),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  o,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  n,
                  t
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  l,
                  i
                ),
                this.notifyDataChanged(
                  p.EDataChangeType.Append,
                  null,
                  e.length
                );
            }
          }
          update(e, t, i, r) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [t],
                e
              ),
              this.getNativeYValues().set(e, t),
              this.getNativeY1Values().set(e, i),
              this.setMetadataAt(e, r),
              this.notifyDataChanged(p.EDataChangeType.Update, e, 1));
          }
          updateXyy1(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const o = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.set(e, t),
                this.getNativeYValues().set(e, i),
                this.getNativeY1Values().set(e, r),
                this.setMetadataAt(e, s),
                this.notifyDataChanged(p.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const o = this.getNativeXValues(),
                a = this.getNativeYValues(),
                n = this.getNativeY1Values();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.insertAt(e, t),
                a.insertAt(e, i),
                n.insertAt(e, r),
                this.insertMetadata(e, s),
                this.notifyDataChanged(p.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, r, o) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, a.isNumberArray)(t) || (0, a.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(i) || (0, a.isTypedArray)(i),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, a.isNumberArray)(r) || (0, a.isTypedArray)(r),
                  "y1Values must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insertRange"),
                s.Guard.arraysSameLengthArr([
                  { arg: t, name: "xValues" },
                  { arg: i, name: "yValues" },
                  { arg: r, name: "y1Values" },
                ]),
                o &&
                  (s.Guard.isTrue(
                    Array.isArray(o),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(t, "xValues", o, "metadata"));
              const n = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                n,
                t,
                i,
                e
              ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  n,
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeYValues(),
                  e
                ),
                (0, d.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  r,
                  this.getNativeY1Values(),
                  e
                ),
                this.insertMetadataRange(e, o),
                this.notifyDataChanged(p.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeYValues().removeAt(e),
              this.getNativeY1Values().removeAt(e),
              this.removeMetadataAt(e),
              this.notifyDataChanged(p.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeYValues().removeRange(e, t),
              this.getNativeY1Values().removeRange(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(p.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeYValues().clear(),
              this.getNativeY1Values().clear(),
              this.setMetadata(void 0),
              this.notifyDataChanged(p.EDataChangeType.Clear, null, null));
          }
          getWindowedYRange(
            e,
            t,
            i = !1,
            s = p.EDataSeriesValueType.Default,
            a = l.EYRangeMode.Visible
          ) {
            const { yValues: d, y1Values: h } = this.getYY1Values(s);
            if (1 === this.count()) {
              const e = Math.min(d.get(0), h.get(0)),
                t = Math.max(d.get(0), h.get(0));
              return new o.NumberRange(e, t);
            }
            const c = i
                ? e
                : this.getIndicesRange(
                    e,
                    !1,
                    a === l.EYRangeMode.Visible
                      ? n.ESearchMode.RoundUp
                      : n.ESearchMode.RoundDown,
                    a === l.EYRangeMode.Visible
                      ? n.ESearchMode.RoundDown
                      : n.ESearchMode.RoundUp
                  ),
              g = Math.max(Math.floor(c.min), 0),
              y = Math.min(Math.ceil(c.max), this.count() - 1);
            if (y < g) return;
            let f, v;
            try {
              if (
                ((f = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                  d,
                  g,
                  y - g + 1
                )),
                !(0, u.isRealNumber)(f.minD) || !(0, u.isRealNumber)(f.maxD))
              )
                return;
              if (
                ((v = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                  h,
                  g,
                  y - g + 1
                )),
                !(0, u.isRealNumber)(v.minD) || !(0, u.isRealNumber)(v.maxD))
              )
                return;
              return new o.NumberRange(
                Math.min(f.minD, v.minD),
                Math.max(f.maxD, v.maxD)
              );
            } finally {
              (0, r.deleteSafe)(f), (0, r.deleteSafe)(v);
            }
          }
          delete() {
            (this.y1Values = (0, r.deleteSafe)(this.y1Values)),
              (this.y1InitialAnimationValues = (0, r.deleteSafe)(
                this.y1InitialAnimationValues
              )),
              (this.y1FinalAnimationValues = (0, r.deleteSafe)(
                this.y1FinalAnimationValues
              )),
              super.delete();
          }
          createAnimationVectors() {
            super.createAnimationVectors(),
              (this.y1InitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.y1FinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                ));
          }
          setInitialAnimationVectors(e) {
            super.setInitialAnimationVectors(e),
              e
                ? (0, h.copyDoubleVector)(
                    e.getNativeY1Values(),
                    this.y1InitialAnimationValues,
                    this.webAssemblyContext
                  )
                : this.y1InitialAnimationValues.resize(0, 0);
          }
          setFinalAnimationVectors(e) {
            super.setFinalAnimationVectors(e),
              e
                ? (0, h.copyDoubleVector)(
                    e.getNativeY1Values(),
                    this.y1FinalAnimationValues,
                    this.webAssemblyContext
                  )
                : this.y1FinalAnimationValues.resize(0, 0);
          }
          validateAnimationVectors() {
            super.validateAnimationVectors();
            const e = this.xInitialAnimationValues.size();
            if (
              e !== this.y1InitialAnimationValues.size() ||
              e !== this.y1FinalAnimationValues.size()
            )
              throw Error(
                "initialAnimationValues and finalAnimationValues must have the same length"
              );
          }
          updateAnimationProperties(e, t) {
            super.updateAnimationProperties(e, t),
              t.isOnStartAnimation
                ? t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.y1FinalAnimationValues,
                    this.getNativeY1Values(),
                    e
                  )
                : t.isDataSeriesAnimation &&
                  t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.y1InitialAnimationValues,
                    this.y1FinalAnimationValues,
                    this.getNativeY1Values(),
                    e
                  );
          }
          getOptions(e = !1) {
            const t = super.getOptions(e);
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e),
                s = new Array(e);
              if (this.fifoCapacity && this.fifoSweeping)
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.getRaw(t)),
                    (r[t] = this.yValues.getRaw(t)),
                    (s[t] = this.y1Values.getRaw(t));
              else
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.get(t)),
                    (r[t] = this.yValues.get(t)),
                    (s[t] = this.y1Values.get(t));
              const o = { xValues: i, yValues: r, y1Values: s };
              Object.assign(t, o);
            }
            return t;
          }
          reserve(e) {
            super.reserve(e), this.y1Values.reserve(e);
          }
          getYY1Values(e) {
            let t, i;
            switch (e) {
              case p.EDataSeriesValueType.FinalAnimationValues:
                (t = this.yFinalAnimationValues),
                  (i = this.y1FinalAnimationValues);
                break;
              case p.EDataSeriesValueType.InitialAnimationValues:
                (t = this.yInitialAnimationValues),
                  (i = this.y1InitialAnimationValues);
                break;
              default:
                (t = this.yValues), (i = this.y1Values);
            }
            return { yValues: t, y1Values: i };
          }
        }
        t.XyyDataSeries = g;
      },
      35508: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyzDataSeries = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(65885),
          a = i(27699),
          n = i(46544),
          l = i(24933),
          d = i(51885);
        class h extends l.BaseDataSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = d.EDataSeriesType.Xyz),
              (this.zValues = this.doubleVectorProvider.getDoubleVector(e)),
              (null == t ? void 0 : t.xValues) &&
                (s.Guard.notNull(t.yValues, "options.yValues"),
                s.Guard.notNull(t.zValues, "options.zValues"),
                this.appendRange(t.xValues, t.yValues, t.zValues, t.metadata),
                (null == t ? void 0 : t.fifoCapacity) &&
                  (null == t ? void 0 : t.fifoStartIndex) &&
                  (this.xValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.yValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  ),
                  this.zValues.notifyAppend(
                    null == t ? void 0 : t.fifoStartIndex
                  )));
          }
          getNativeZValues() {
            return this.zValues;
          }
          append(e, t, i, r) {
            if (!this.getIsDeleted()) {
              const s = this.getNativeXValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                s,
                [e],
                [t]
              ),
                this.appendMetadata(r),
                s.push_back(e),
                this.getNativeYValues().push_back(t),
                this.getNativeZValues().push_back(i),
                this.notifyDataChanged(d.EDataChangeType.Append, null, 1);
            }
          }
          appendRange(e, t, i, r) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, o.isNumberArray)(e) || (0, o.isTypedArray)(e),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, o.isNumberArray)(t) || (0, o.isTypedArray)(t),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, o.isNumberArray)(i) || (0, o.isTypedArray)(i),
                  "zValues must be an array of numbers"
                ),
                s.Guard.arraysSameLengthArr([
                  { arg: e, name: "xValues" },
                  { arg: t, name: "yValues" },
                  { arg: i, name: "zValues" },
                ]),
                r &&
                  (s.Guard.isTrue(
                    Array.isArray(r),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(e, "xValues", r, "metadata"));
              const a = this.getNativeXValues(),
                n = this.getNativeYValues(),
                l = this.getNativeZValues();
              this.dataDistributionCalculator.onAppend(
                this.isSorted,
                this.containsNaN,
                a,
                e,
                t
              ),
                this.appendMetadataRange(r, e.length),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  a,
                  e
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  n,
                  t
                ),
                this.doubleVectorProvider.appendArray(
                  this.webAssemblyContext,
                  l,
                  i
                ),
                this.notifyDataChanged(
                  d.EDataChangeType.Append,
                  null,
                  e.length
                );
            }
          }
          update(e, t, i, r) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                void 0,
                void 0,
                [t],
                e
              ),
              this.getNativeYValues().set(e, t),
              this.getNativeZValues().set(e, i),
              this.setMetadataAt(e, r),
              this.notifyDataChanged(d.EDataChangeType.Update, e, 1));
          }
          updateXyz(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e);
              const o = this.getNativeXValues();
              this.dataDistributionCalculator.onUpdate(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.set(e, t),
                this.getNativeYValues().set(e, i),
                this.getNativeZValues().set(e, r),
                this.setMetadataAt(e, s),
                this.notifyDataChanged(d.EDataChangeType.Update, e, 1);
            }
          }
          insert(e, t, i, r, s) {
            if (!this.getIsDeleted()) {
              this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insert");
              const o = this.getNativeXValues(),
                a = this.getNativeYValues(),
                n = this.getNativeZValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                o,
                [t],
                [i],
                e
              ),
                o.insertAt(e, t),
                a.insertAt(e, i),
                n.insertAt(e, r),
                this.insertMetadata(e, s),
                this.notifyDataChanged(d.EDataChangeType.Insert, e, 1);
            }
          }
          insertRange(e, t, i, r, n) {
            if (!this.getIsDeleted()) {
              s.Guard.isTrue(
                (0, o.isNumberArray)(t) || (0, o.isTypedArray)(t),
                "xValues must be an array of numbers"
              ),
                s.Guard.isTrue(
                  (0, o.isNumberArray)(i) || (0, o.isTypedArray)(i),
                  "yValues must be an array of numbers"
                ),
                s.Guard.isTrue(
                  (0, o.isNumberArray)(r) || (0, o.isTypedArray)(r),
                  "zValues must be an array of numbers"
                ),
                this.validateIndex(e, "Start index is out of range"),
                this.throwIfFifo("insertRange"),
                s.Guard.arraysSameLengthArr([
                  { arg: t, name: "xValues" },
                  { arg: i, name: "yValues" },
                  { arg: r, name: "zValues" },
                ]),
                n &&
                  (s.Guard.isTrue(
                    Array.isArray(n),
                    "metadata must be an array of IPointMetadata"
                  ),
                  s.Guard.arraysSameLength(t, "xValues", n, "metadata"));
              const l = this.getNativeXValues();
              this.dataDistributionCalculator.onInsert(
                this.isSorted,
                this.containsNaN,
                l,
                t,
                i,
                e
              ),
                (0, a.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  t,
                  l,
                  e
                ),
                (0, a.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  i,
                  this.getNativeYValues(),
                  e
                ),
                (0, a.insertDoubleVectorFromJsArray)(
                  this.webAssemblyContext,
                  r,
                  this.getNativeZValues(),
                  e
                ),
                this.insertMetadataRange(e, n),
                this.notifyDataChanged(d.EDataChangeType.Insert, e, t.length);
            }
          }
          removeAt(e) {
            this.getIsDeleted() ||
              (this.validateIndex(e),
              this.throwIfFifo("removeAt"),
              this.getNativeXValues().removeAt(e),
              this.getNativeYValues().removeAt(e),
              this.getNativeZValues().removeAt(e),
              this.removeMetadataAt(e),
              this.notifyDataChanged(d.EDataChangeType.Remove, e, 1));
          }
          removeRange(e, t) {
            this.getIsDeleted() ||
              (this.validateIndex(e, "Start index is out of range"),
              this.throwIfFifo("removeRange"),
              this.getNativeXValues().removeRange(e, t),
              this.getNativeYValues().removeRange(e, t),
              this.getNativeZValues().removeRange(e, t),
              this.removeMetadataRange(e, t),
              this.notifyDataChanged(d.EDataChangeType.Remove, e, t));
          }
          clear() {
            this.getIsDeleted() ||
              (super.clear(),
              this.getNativeXValues().clear(),
              this.getNativeYValues().clear(),
              this.getNativeZValues().clear(),
              this.setMetadata(void 0),
              this.notifyDataChanged(d.EDataChangeType.Clear, null, null));
          }
          delete() {
            (this.zValues = (0, r.deleteSafe)(this.zValues)),
              (this.zInitialAnimationValues = (0, r.deleteSafe)(
                this.zInitialAnimationValues
              )),
              (this.zFinalAnimationValues = (0, r.deleteSafe)(
                this.zFinalAnimationValues
              )),
              super.delete();
          }
          createAnimationVectors() {
            super.createAnimationVectors(),
              (this.zInitialAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                )),
              (this.zFinalAnimationValues =
                this.doubleVectorProvider.getDoubleVector(
                  this.webAssemblyContext
                ));
          }
          setInitialAnimationVectors(e) {
            super.setInitialAnimationVectors(e),
              e
                ? (0, n.copyDoubleVector)(
                    e.getNativeZValues(),
                    this.zInitialAnimationValues,
                    this.webAssemblyContext
                  )
                : this.zInitialAnimationValues.resize(0, 0);
          }
          setFinalAnimationVectors(e) {
            super.setFinalAnimationVectors(e),
              e
                ? (0, n.copyDoubleVector)(
                    e.getNativeZValues(),
                    this.zFinalAnimationValues,
                    this.webAssemblyContext
                  )
                : this.zFinalAnimationValues.resize(0, 0);
          }
          validateAnimationVectors() {
            super.validateAnimationVectors();
            const e = this.xInitialAnimationValues.size();
            if (
              e !== this.zInitialAnimationValues.size() ||
              e !== this.zFinalAnimationValues.size()
            )
              throw Error(
                "initialAnimationValues and finalAnimationValues must have the same length"
              );
          }
          updateAnimationProperties(e, t) {
            super.updateAnimationProperties(e, t),
              t.isOnStartAnimation
                ? t.calculateAnimationValues(
                    this.webAssemblyContext,
                    this.zFinalAnimationValues,
                    this.getNativeZValues(),
                    e,
                    !0
                  )
                : t.isDataSeriesAnimation &&
                  t.calculateDataSeriesAnimationValues(
                    this.webAssemblyContext,
                    this.zInitialAnimationValues,
                    this.zFinalAnimationValues,
                    this.getNativeZValues(),
                    e
                  );
          }
          getOptions(e = !1) {
            const t = super.getOptions(e);
            if (!e) {
              const e = this.count(),
                i = new Array(e),
                r = new Array(e),
                s = new Array(e);
              if (this.fifoCapacity && this.fifoSweeping)
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.getRaw(t)),
                    (r[t] = this.yValues.getRaw(t)),
                    (s[t] = this.zValues.getRaw(t));
              else
                for (let t = 0; t < e; t++)
                  (i[t] = this.xValues.get(t)),
                    (r[t] = this.yValues.get(t)),
                    (s[t] = this.zValues.get(t));
              const o = { xValues: i, yValues: r, zValues: s };
              Object.assign(t, o);
            }
            return t;
          }
          reserve(e) {
            super.reserve(e), this.zValues.reserve(e);
          }
          getYZValues(e) {
            let t, i;
            switch (e) {
              case d.EDataSeriesValueType.FinalAnimationValues:
                (t = this.yFinalAnimationValues),
                  (i = this.zFinalAnimationValues);
                break;
              case d.EDataSeriesValueType.InitialAnimationValues:
                (t = this.yInitialAnimationValues),
                  (i = this.zInitialAnimationValues);
                break;
              default:
                (t = this.yValues), (i = this.zValues);
            }
            return { yValues: t, zValues: i };
          }
        }
        t.XyzDataSeries = h;
      },
      48804: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CategoryCoordinateCalculator = void 0);
        const r = i(72307);
        class s extends r.CoordinateCalculatorBase {
          constructor(e, t, i, r, s = 0) {
            super(e, t, i, r, s, !0, !0),
              (this.indexMin = i),
              (this.indexMax = r),
              (this.nativeCalculator = new e.CategoryCoordinateCalculatorDouble(
                this.viewportDimension,
                this.visibleMin,
                this.visibleMax,
                -1,
                this.offset,
                this.indexMin,
                this.indexMax
              ));
          }
          transformIndexToData(e) {
            return this.nativeCalculator.TransformIndexToData(
              e,
              this.baseXValues
            );
          }
          transformDataToIndex(e) {
            return this.nativeCalculator.TransformDataToIndex(
              e,
              this.baseXValues
            );
          }
        }
        t.CategoryCoordinateCalculator = s;
      },
      72307: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CoordinateCalculatorBase = void 0);
        const r = i(55023),
          s = i(98140);
        class o extends r.DeletableEntity {
          constructor(e, t, i, r, s, o, a = !1) {
            super(),
              (this.webAssemblyContext = e),
              (this.visibleMax = r),
              (this.visibleMin = i),
              (this.viewportDimension = t),
              (this.offset = s),
              (this.hasFlippedCoordinates = o),
              (this.isCategoryCoordinateCalculator = a);
          }
          getCoordinate(e) {
            return this.nativeCalculator.GetCoordinate(e);
          }
          getDataValue(e) {
            return this.nativeCalculator.GetDataValue(e);
          }
          translateBy(e, t) {
            let i = this.getDataValue(e) - this.getDataValue(0);
            return (
              this.hasFlippedCoordinates && (i = -i),
              new s.NumberRange(t.min + i, t.max + i)
            );
          }
          zoomTranslateBy(e, t, i) {
            return i.growBy(new s.NumberRange(e, t));
          }
          delete() {
            var e;
            null === (e = this.nativeCalculator) || void 0 === e || e.delete(),
              (this.nativeCalculator = void 0),
              (this.webAssemblyContext = void 0);
          }
        }
        t.CoordinateCalculatorBase = o;
      },
      25762: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FlippedCategoryCoordinateCalculator = void 0);
        const r = i(72307);
        class s extends r.CoordinateCalculatorBase {
          constructor(e, t, i, r, s = 0) {
            super(e, t, i, r, s, !1, !0),
              (this.indexMin = i),
              (this.indexMax = r),
              (this.nativeCalculator =
                new e.FlippedCategoryCoordinateCalculatorDouble(
                  this.viewportDimension,
                  this.visibleMin,
                  this.visibleMax,
                  -1,
                  this.offset,
                  this.indexMin,
                  this.indexMax
                ));
          }
          transformIndexToData(e) {
            return this.nativeCalculator.TransformIndexToData(
              e,
              this.baseXValues
            );
          }
          transformDataToIndex(e) {
            return this.nativeCalculator.TransformDataToIndex(
              e,
              this.baseXValues
            );
          }
        }
        t.FlippedCategoryCoordinateCalculator = s;
      },
      33166: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FlippedNumericCoordinateCalculator = void 0);
        const r = i(72307);
        class s extends r.CoordinateCalculatorBase {
          constructor(e, t, i, r, s = 0, o = !1) {
            super(e, t, i, r, s, !0),
              (this.nativeCalculator = o
                ? new e.FlippedLinearCoordinateCalculatorSingle(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset
                  )
                : new e.FlippedLinearCoordinateCalculatorDouble(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset
                  ));
          }
        }
        t.FlippedNumericCoordinateCalculator = s;
      },
      46650: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LogarithmicCoordinateCalculator = void 0);
        const r = i(98140),
          s = i(86699),
          o = i(72307);
        class a extends o.CoordinateCalculatorBase {
          constructor(e, t, i, r, o, a, n, l = 0) {
            s.EXyDirection.XDirection,
              super(e, t, i, r, l, n),
              (this.logBaseProperty = a),
              (this.nativeCalculator = n
                ? new e.FlippedLogarithmicCoordinateCalculator(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset,
                    this.logBase
                  )
                : new e.LogarithmicCoordinateCalculator(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset,
                    this.logBase
                  ));
          }
          get logBase() {
            return this.logBaseProperty;
          }
          translateBy(e, t) {
            if (0 === e) return t;
            const i = Math.abs(this.nativeCalculator.GetDataValue(0)),
              s = Math.abs(this.nativeCalculator.GetDataValue(e)),
              o = this.webAssemblyContext.NumberUtil,
              a = t.min < 0;
            a && (t = new r.NumberRange(Math.abs(t.max), Math.abs(t.min)));
            let n = o.Log(s, this.logBase) - o.Log(i, this.logBase);
            this.hasFlippedCoordinates && (n = -n);
            const l = o.Log(t.min, this.logBase),
              d = o.Log(t.max, this.logBase),
              h = Math.pow(this.logBase, l + n),
              u = Math.pow(this.logBase, d + n);
            return a ? new r.NumberRange(-u, -h) : new r.NumberRange(h, u);
          }
          zoomTranslateBy(e, t, i) {
            return i.growByLog(new r.NumberRange(e, t), this.logBase);
          }
        }
        t.LogarithmicCoordinateCalculator = a;
      },
      40194: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericCoordinateCalculator = void 0);
        const r = i(72307);
        class s extends r.CoordinateCalculatorBase {
          constructor(e, t, i, r, s = 0, o = !1) {
            super(e, t, i, r, s, !1),
              (this.nativeCalculator = o
                ? new e.LinearCoordinateCalculatorSingle(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset
                  )
                : new e.LinearCoordinateCalculatorDouble(
                    this.viewportDimension,
                    this.visibleMin,
                    this.visibleMax,
                    -1,
                    this.offset
                  ));
          }
        }
        t.NumericCoordinateCalculator = s;
      },
      78644: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ExtremeResamplerHelper = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(23866),
          a = i(33240);
        class n extends r.DeletableEntity {
          constructor(e) {
            super(),
              (this.isDeleted = !1),
              (this.nativeMergeIndexParams =
                new e.SCRTDoubleResamplerMergeIndicesParams()),
              (this.wasmContext = e),
              (this.nativeResampler =
                new this.wasmContext.SCRTDoubleResampler()),
              (this.xInput = new this.wasmContext.SCRTXvaluesProvider()),
              (this.nativeArgs = new this.wasmContext.ResamplingArgs()),
              (this.output =
                new this.wasmContext.SCRTDoubleArraysXyResampleOutput());
          }
          needsResampling(e, t, i = !0, r = !1) {
            i && this.resetAndFillBasicNativeArgs(e, t);
            const s = this.nativeResampler.RequiresReduction(this.nativeArgs),
              o = e.dataIsFifo || s;
            return (
              ((r && !o) || (o && !s)) &&
                (this.nativeArgs.Resampling = this.getNativeResamplingMode(
                  a.EResamplingMode.None
                )),
              o
            );
          }
          resampleIntoPointSeries(e, t, i, r, s, a, n, l, d = !0) {
            if (this.isDeleted)
              throw new Error(
                "should not call resampleIntoPointSeries() if deleted"
              );
            o.Guard.notNull(i, "xDataValues"),
              o.Guard.notNull(r, "yDataValues"),
              o.Guard.notNull(i, "xOriginalValues"),
              o.Guard.notNull(r, "yOriginalValues"),
              o.Guard.notNull(t, "resamplingParams"),
              d && this.resetAndFillBasicNativeArgs(t, i),
              this.xInput.SetInput(i),
              (this.nativeArgs.ResamplingPrecision = t.precision),
              (this.nativeArgs.ZeroLineY = t.zeroLineY),
              (this.nativeArgs.NewDataPointCount = -1),
              !0 === d && this.needsResampling(t, i, !1, !0);
            const h = this.nativeResampler.UpdateIndices(
              s,
              this.xInput,
              r,
              this.nativeArgs.Resampling,
              this.nativeArgs
            );
            a && a.resizeFast(h + 1),
              n.resizeFast(h + 1),
              l.resizeFast(h + 1),
              a
                ? this.output.ResetWithIndices(a, n, l)
                : this.output.Reset(n, l),
              this.nativeResampler.Execute(
                this.xInput,
                r,
                this.output,
                s,
                this.nativeArgs.Resampling,
                this.nativeArgs
              );
            const u = s.size();
            return (
              a && a.resizeFast(u),
              n.resizeFast(u),
              l.resizeFast(u),
              {
                OutputSplitIndex:
                  this.output.OutputSplitIndex ||
                  this.nativeArgs.OutputSplitIndex,
              }
            );
          }
          mergeIndexes(e, t, i, r) {
            return this.nativeResampler.MergeIndices(e, t, i, r);
          }
          copyValuesByIndexes(e, t, i, r, s, o, a, n, l, d, h, u = 0) {
            const c = this.nativeMergeIndexParams;
            c.SetIndices(e),
              c.SetXInput(t),
              c.SetYInput(i),
              c.SetY1Input(r),
              c.SetY1Offset(u),
              (c.count = s),
              (c.isCategoryData = o),
              (c.isFifoSweeping = a),
              c.SetIndicesOut(n),
              c.SetXOut(l),
              c.SetYOut(d),
              c.SetY1Out(h),
              this.nativeResampler.CopyValuesByIndices(c);
          }
          delete() {
            this.isDeleted ||
              ((0, s.deleteSafe)(this.nativeResampler),
              (0, s.deleteSafe)(this.xInput),
              (0, s.deleteSafe)(this.nativeArgs),
              (0, s.deleteSafe)(this.output),
              (0, s.deleteSafe)(this.nativeMergeIndexParams),
              (this.isDeleted = !0),
              (this.wasmContext = void 0));
          }
          getNativeResamplingMode(e) {
            switch (e) {
              case a.EResamplingMode.Auto:
                return this.wasmContext.ResamplingMode.Auto;
              case a.EResamplingMode.Max:
                return this.wasmContext.ResamplingMode.Max;
              case a.EResamplingMode.Mid:
                return this.wasmContext.ResamplingMode.Mid;
              case a.EResamplingMode.Min:
                return this.wasmContext.ResamplingMode.Min;
              case a.EResamplingMode.MinMax:
                return this.wasmContext.ResamplingMode.MinMax;
              case a.EResamplingMode.MinOrMax:
                return this.wasmContext.ResamplingMode.MinOrMax;
              case a.EResamplingMode.None:
                return this.wasmContext.ResamplingMode.None;
              default:
                throw new Error(`Unknown resamplingMode ${e}`);
            }
          }
          resetAndFillBasicNativeArgs(e, t) {
            if (
              (this.nativeArgs.Reset(),
              (this.nativeArgs.Data = this.getDataDistribution(
                e.dataEvenlySpaced,
                e.isCategoryAxis
              )),
              (this.nativeArgs.StartIndex = e.indexesRange.min),
              (this.nativeArgs.EndIndex = e.indexesRange.max),
              (this.nativeArgs.MaxXInclusive = e.xVisibleRange.max),
              (this.nativeArgs.MinXInclusive = e.xVisibleRange.min),
              (this.nativeArgs.Resampling = this.getNativeResamplingMode(
                e.resamplingMode
              )),
              (this.nativeArgs.ViewportWidth = e.viewportRect.width),
              (this.nativeArgs.FifoCapacity = e.fifoCapacity || 0),
              (this.nativeArgs.HasNaN = e.dataHasNaN),
              (this.nativeArgs.IsFifo = e.dataIsFifo),
              (this.nativeArgs.InputBaseIndex = e.fifoStartIndex || 0),
              e.isCategoryAxis)
            )
              (this.nativeArgs.MinXInclusive = e.indexesRange.min),
                (this.nativeArgs.MaxXInclusive = e.indexesRange.max);
            else if (e.fifoCapacity && !e.dataIsFifo) {
              const i = t.getRaw(e.indexesRange.min),
                r = t.getRaw(e.indexesRange.max);
              (this.nativeArgs.MinXInclusive = Math.max(
                i,
                e.xVisibleRange.min
              )),
                (this.nativeArgs.MaxXInclusive = Math.min(
                  r,
                  e.xVisibleRange.max
                ));
            } else {
              const i = t.get(e.indexesRange.min),
                r = t.get(e.indexesRange.max);
              (this.nativeArgs.MinXInclusive = Math.max(
                i,
                e.xVisibleRange.min
              )),
                (this.nativeArgs.MaxXInclusive = Math.min(
                  r,
                  e.xVisibleRange.max
                ));
            }
          }
          debugParameters(e, t) {
            console.log(31415),
              console.log("ResamplingParams:"),
              console.log(`.. zeroLineY: ${e.zeroLineY}`),
              console.log(`.. resamplingPrecision: ${e.precision}`),
              console.log(`.. xVisibleRange: ${e.xVisibleRange}`),
              console.log(`.. indicesRange: ${e.indexesRange}`),
              console.log(`.. viewportRect: ${this.debugRect(e.viewportRect)}`),
              console.log(`.. isCategoryAxis: ${e.isCategoryAxis}`),
              console.log(`.. isXAxisAutoRanged: ${e.isXAxisAutoRanged}`),
              console.log(`.. resamplingMode: ${e.resamplingMode}`),
              console.log(`.. renderableSeriesHash: ${e.renderableSeriesHash}`),
              console.log(
                `.. enableExperimentalResampling: ${e.enableExperimentalResampling}`
              ),
              console.log(`.. dataHasNan: ${e.dataHasNaN}`),
              console.log(`.. dataIsFifo: ${e.dataIsFifo}`),
              console.log(`.. fifoCapacity: ${e.fifoCapacity}`),
              console.log(`.. dataEvenlySpaced: ${e.dataEvenlySpaced}`),
              console.log("native Resampling Args:"),
              console.log(
                `.. ResamplingData: ${this.debugResamplingDataEnum(t.Data)}`
              ),
              console.log(`.. StartIndex: ${t.StartIndex}`),
              console.log(`.. EndIndex: ${t.EndIndex}`),
              console.log(`.. FifoCapacity: ${t.FifoCapacity}`),
              console.log(`.. HasNaN: ${t.HasNaN}`),
              console.log(`.. IsFifo: ${t.IsFifo}`),
              console.log(`.. MaxXInclusive: ${t.MaxXInclusive}`),
              console.log(`.. MinXInclusive: ${t.MinXInclusive}`),
              console.log(
                `.. ResamplingMode: ${this.debugResamplingModeEnum(
                  t.Resampling
                )}`
              ),
              console.log(`.. ResamplingPrecision: ${t.ResamplingPrecision}`),
              console.log(`.. ViewportWidth: ${t.ViewportWidth}`),
              console.log(`.. ZeroLineY: ${t.ZeroLineY}`),
              console.log(`.. NewDataPointCount: ${t.NewDataPointCount}`),
              console.log(`.. InputBaseIndex: ${t.InputBaseIndex}`);
          }
          debugRect(e) {
            return `X ${e.x} Y ${e.y} Width ${e.width} Height ${e.height}`;
          }
          debugResamplingDataEnum(e) {
            return e === this.wasmContext.ResamplingData.LinearData
              ? "LinearData"
              : e === this.wasmContext.ResamplingData.CategoryData
              ? "CategoryData"
              : e === this.wasmContext.ResamplingData.UnsortedData
              ? "UnsortedData"
              : e === this.wasmContext.ResamplingData.UnevenlySpacedData
              ? "UnevenlySpacedData"
              : "Unknown";
          }
          debugResamplingModeEnum(e) {
            return e === this.wasmContext.ResamplingMode.MinMax
              ? "MinMax"
              : e === this.wasmContext.ResamplingMode.Auto
              ? "Auto"
              : "Unknown";
          }
          getDataDistribution(e, t) {
            return t
              ? this.wasmContext.ResamplingData.CategoryData
              : e
              ? this.wasmContext.ResamplingData.LinearData
              : this.wasmContext.ResamplingData.UnevenlySpacedData;
          }
        }
        t.ExtremeResamplerHelper = n;
      },
      33240: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EResamplingMode = void 0),
          ((i = t.EResamplingMode || (t.EResamplingMode = {})).None = "None"),
          (i.MinMax = "MinMax"),
          (i.Mid = "Mid"),
          (i.Max = "Max"),
          (i.Min = "Min"),
          (i.MinMaxWithUnevenSpacing = "MinMaxWithUnevenSpacing"),
          (i.Auto = "Auto"),
          (i.MinOrMax = "MinOrMax");
      },
      97742: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ResamplingParams = void 0);
        const r = i(12785);
        class s {
          constructor(e, t, i) {
            if (
              ((this.zeroLineY = 0),
              (this.precision = 0),
              (this.enableExperimentalResampling = !1),
              (this.fifoCapacity = 0),
              (this.fifoStartIndex = 0),
              (this.viewportRect = e),
              t)
            ) {
              const e = t.dataSeries;
              (this.resamplingMode = t.resamplingMode),
                (this.precision = t.resamplingPrecision),
                i &&
                  ((this.indexesRange = t.getIndicesRange(
                    i.visibleRange,
                    i.isCategoryAxis
                  )),
                  (this.isCategoryAxis = i.isCategoryAxis),
                  (this.isXAxisAutoRanged =
                    i.autoRange === r.EAutoRange.Always),
                  (this.xVisibleRange = i.visibleRange)),
                e &&
                  ((this.dataHasNaN =
                    null == e
                      ? void 0
                      : e.dataDistributionCalculator.containsNaN),
                  (this.dataEvenlySpaced =
                    null == e ? void 0 : e.isEvenlySpaced),
                  (this.fifoCapacity = e.fifoCapacity),
                  (this.fifoStartIndex = e.fifoStartIndex),
                  (this.dataIsFifo = e.fifoCapacity > 0 && !e.fifoSweeping));
            }
          }
          clone(e) {
            var t, i, r, o, a, n, l, d, h, u, c, p, g, y, f;
            const v = new s(void 0, void 0, void 0);
            return (
              (v.zeroLineY =
                null !== (t = null == e ? void 0 : e.zeroLineY) && void 0 !== t
                  ? t
                  : this.zeroLineY),
              (v.precision =
                null !== (i = null == e ? void 0 : e.precision) && void 0 !== i
                  ? i
                  : this.precision),
              (v.xVisibleRange =
                null !== (r = null == e ? void 0 : e.xVisibleRange) &&
                void 0 !== r
                  ? r
                  : this.xVisibleRange),
              (v.indexesRange =
                null !== (o = null == e ? void 0 : e.indicesRange) &&
                void 0 !== o
                  ? o
                  : this.indexesRange),
              (v.viewportRect =
                null !== (a = null == e ? void 0 : e.viewportRect) &&
                void 0 !== a
                  ? a
                  : this.viewportRect),
              (v.isCategoryAxis =
                null !== (n = null == e ? void 0 : e.isCategoryAxis) &&
                void 0 !== n
                  ? n
                  : this.isCategoryAxis),
              (v.isXAxisAutoRanged =
                null !== (l = null == e ? void 0 : e.isXAxisAutoRanged) &&
                void 0 !== l
                  ? l
                  : this.isXAxisAutoRanged),
              (v.resamplingMode =
                null !== (d = null == e ? void 0 : e.resamplingMode) &&
                void 0 !== d
                  ? d
                  : this.resamplingMode),
              (v.renderableSeriesHash =
                null !== (h = null == e ? void 0 : e.renderableSeriesHash) &&
                void 0 !== h
                  ? h
                  : this.renderableSeriesHash),
              (v.enableExperimentalResampling =
                null !==
                  (u = null == e ? void 0 : e.enableExperimentalResampling) &&
                void 0 !== u
                  ? u
                  : this.enableExperimentalResampling),
              (v.dataHasNaN =
                null !== (c = null == e ? void 0 : e.dataHasNaN) && void 0 !== c
                  ? c
                  : this.dataHasNaN),
              (v.dataEvenlySpaced =
                null !== (p = null == e ? void 0 : e.dataEvenlySpaced) &&
                void 0 !== p
                  ? p
                  : this.dataEvenlySpaced),
              (v.fifoCapacity =
                null !== (g = e.fifoCapacity) && void 0 !== g
                  ? g
                  : this.fifoCapacity),
              (v.fifoStartIndex =
                null !== (y = e.fifoStartIndex) && void 0 !== y
                  ? y
                  : this.fifoStartIndex),
              (v.dataIsFifo =
                null !== (f = e.dataIsFifo) && void 0 !== f
                  ? f
                  : this.dataIsFifo),
              v
            );
          }
        }
        t.ResamplingParams = s;
      },
      65707: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DefaultTickCoordinatesProvider = void 0);
        const r = i(73423);
        class s extends r.TickCoordinatesProvider {
          getTickCoordinates(e, t) {
            if (void 0 === e)
              return {
                majorTickCoords: void 0,
                minorTickCoords: void 0,
                majorTickOverrides: void 0,
                minorTickOverRides: void 0,
              };
            const i = this.parentAxis.getCurrentCoordinateCalculator();
            return {
              majorTickCoords: e.map(
                (e) => Math.round(i.getCoordinate(e)) + 0.5
              ),
              minorTickCoords: t.map(
                (e) => Math.round(i.getCoordinate(e)) + 0.5
              ),
              majorTickOverrides: e,
              minorTickOverRides: t,
            };
          }
        }
        t.DefaultTickCoordinatesProvider = s;
      },
      22019: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StaticTickCoordinatesProvider = void 0);
        const r = i(65707);
        class s extends r.DefaultTickCoordinatesProvider {
          getTickCoordinates(e, t) {
            var i = !this.parentAxis.visibleRange.equals(this.prevRange),
              r = this.parentAxis.getAxisSize() !== this.prevSize,
              s = this.parentAxis.getCurrentCoordinateCalculator();
            let o, a;
            if (void 0 === this.tickCoords || r) {
              if (void 0 === e)
                return {
                  majorTickCoords: void 0,
                  minorTickCoords: void 0,
                  majorTickOverrides: void 0,
                  minorTickOverRides: void 0,
                };
              const i = e.map((e) => s.getCoordinate(e)),
                r = t.map((e) => s.getCoordinate(e));
              this.tickCoords = {
                majorTickCoords: i,
                minorTickCoords: r,
                majorTicks: e,
                minorTicks: t,
                majorTickLabels: void 0,
              };
            } else
              i
                ? (this.OverrideTickValues(this.tickCoords),
                  (o = this.tickCoords.majorTicks),
                  (a = this.tickCoords.minorTicks))
                : this.OverrideTickCoordinates(this.tickCoords);
            return (
              (this.prevRange = this.parentAxis.visibleRange),
              (this.prevSize = this.parentAxis.getAxisSize()),
              {
                majorTickCoords: this.tickCoords.majorTickCoords.map((e) =>
                  Math.round(e + 0.5)
                ),
                minorTickCoords: this.tickCoords.minorTickCoords.map((e) =>
                  Math.round(e + 0.5)
                ),
                majorTickOverrides: o,
                minorTickOverRides: a,
              }
            );
          }
          forceRecalculateCoords() {
            this.tickCoords = void 0;
          }
          OverrideTickValues(e) {
            var t = this.parentAxis.getCurrentCoordinateCalculator();
            null != t &&
              (e.minorTickCoords.forEach(
                (i, r) => (e.minorTicks[r] = t.getDataValue(i))
              ),
              e.majorTickCoords.forEach(
                (i, r) => (e.majorTicks[r] = t.getDataValue(i))
              ));
          }
          OverrideTickCoordinates(e) {
            var t = this.parentAxis.getCurrentCoordinateCalculator();
            null != t &&
              null != t &&
              (e.minorTicks.forEach(
                (i, r) => (e.minorTickCoords[r] = t.getCoordinate(i))
              ),
              e.majorTicks.forEach(
                (i, r) => (e.majorTickCoords[r] = t.getCoordinate(i))
              ));
          }
        }
        t.StaticTickCoordinatesProvider = s;
      },
      73423: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TickCoordinatesProvider = void 0),
          (t.TickCoordinatesProvider = class {
            attachedToAxis(e) {
              this.parentAxis = e;
            }
            detachedFromAxis() {
              this.parentAxis = void 0;
            }
          });
      },
      98172: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LogarithmicTickProvider =
            t.ELogarithmicMajorTickMode =
            t.ELogarithmicMinorTickMode =
              void 0);
        const r = i(23866),
          s = i(98140),
          o = i(72934),
          a = i(63345);
        var n, l;
        !(function (e) {
          (e.Linear = "Linear"),
            (e.Logarithmic = "Logarithmic"),
            (e.Auto = "Auto");
        })(
          (n =
            t.ELogarithmicMinorTickMode || (t.ELogarithmicMinorTickMode = {}))
        ),
          (function (e) {
            (e.EqualSpacing = "EqualSpacing"),
              (e.RoundNumbers = "RoundNumbers");
          })(
            (l =
              t.ELogarithmicMajorTickMode || (t.ELogarithmicMajorTickMode = {}))
          );
        class d extends a.TickProvider {
          constructor(e) {
            super(),
              (this.logarithmicBase = 10),
              (this.isHighPrecisionTicks = !0),
              (this.majorTickModeProperty = l.EqualSpacing),
              (this.minorTickModeProperty = n.Linear),
              (this.wasmContext = e);
          }
          get majorTickMode() {
            return this.majorTickModeProperty;
          }
          set majorTickMode(e) {
            var t;
            (this.majorTickModeProperty = e),
              (null === (t = this.parentAxis) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                this.parentAxis.invalidateParentCallback();
          }
          get minorTickMode() {
            return this.minorTickModeProperty;
          }
          set minorTickMode(e) {
            var t;
            (this.minorTickModeProperty = e),
              (null === (t = this.parentAxis) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                this.parentAxis.invalidateParentCallback();
          }
          getMajorTicks(e, t, i) {
            const r = new s.NumberRange(e, t),
              o = this.parentAxis;
            let a = 1;
            if (
              ((null == o ? void 0 : o.isNegative) &&
                i.min < 0 &&
                ((a = -1),
                (i = new s.NumberRange(Math.abs(i.max), Math.abs(i.min)))),
              !this.isParamsValid(i, r))
            )
              return [];
            if (this.majorTickMode === l.RoundNumbers)
              return this.getRoundNumberMajorTicks(e, t, i);
            {
              const e = [];
              if (0 === this.logarithmicBase) return e;
              let r = i.min;
              i.min;
              const s = i.max,
                o = this.wasmContext.NumberUtil;
              this.isHighPrecisionTicks ||
                o.IsPowerOf(r, this.logarithmicBase, this.logarithmicBase) ||
                (r = o.RoundDownPower(
                  r,
                  this.logarithmicBase,
                  this.logarithmicBase
                ));
              let n = o.Log(r, this.logarithmicBase);
              (n = o.RoundToDigits(n, 10)),
                o.IsDivisibleBy(n, t) || (n = o.RoundUp(n, t));
              let l = n;
              r = Math.pow(this.logarithmicBase, l);
              let d = 0;
              for (; r <= s; )
                o.IsDivisibleBy(l, t) && e.push(a * r),
                  (l = n + ++d * t),
                  (r = Math.pow(this.logarithmicBase, l));
              return -1 === a ? e.reverse() : e;
            }
          }
          getRoundNumberMajorTicks(e, t, i) {
            const r = [];
            let s = i.min;
            const o = i.min,
              a = i.max,
              n = Math.pow(this.logarithmicBase, t),
              l = this.roundNum(o * (n - 1));
            for (s = this.roundNum(s, l), r.push(s); s <= a; ) {
              const e = s * (n - 1);
              let t = this.roundNum(s * n, e),
                i = t;
              for (; t === s; ) (i *= n), (t = this.roundNum(i, e));
              (s = t), r.push(s);
            }
            return r;
          }
          roundNum(e, t) {
            if (0 === e) return 0;
            let i = Math.floor(Math.log10(e));
            t && (i = Math.min(i, Math.round(Math.log10(t))));
            const r = this.wasmContext.NumberUtil.RoundToDigits(
                e / Math.pow(10, i),
                1
              ),
              s = Math.floor(r),
              o = r - s;
            let a = NaN;
            return (
              (a = o < 0.3 ? 0 : o < 0.7 ? 0.5 : 1), (s + a) * Math.pow(10, i)
            );
          }
          getMinorTicks(e, t, i) {
            const r = this.parentAxis;
            let o = 1;
            (null == r ? void 0 : r.isNegative) &&
              ((o = -1),
              (i = new s.NumberRange(Math.abs(i.max), Math.abs(i.min))));
            const a = i.min * e,
              l = i.min * Math.pow(this.logarithmicBase, 0.7 * t),
              d = (Math.pow(this.logarithmicBase, t) - 1) / e,
              h =
                this.minorTickMode === n.Logarithmic ||
                (this.minorTickMode === n.Auto && l < a),
              u = [],
              c = this.getMajorTicks(e, t, i),
              p = c.length,
              g = Math.pow(this.logarithmicBase, t);
            if (p > 0)
              for (let r = 0; r <= p; r++) {
                const a = r < p ? c[r] : c[r - 1] * g,
                  n = Math.max(a / g, i.min),
                  l = n * e;
                if (h)
                  this.getMajorTicks(1, t / d, new s.NumberRange(n, a)).forEach(
                    (e) => u.push(o * e)
                  );
                else {
                  let e = n + l;
                  for (; e < a && l > 0; ) u.push(o * e), (e += l);
                }
              }
            return u;
          }
          isParamsValid(e, t) {
            return (
              r.Guard.notNull(e, "visibleRange"),
              r.Guard.notNull(t, "deltaRange"),
              (0, o.isRealNumber)(e.min) &&
                (0, o.isRealNumber)(e.max) &&
                (0, o.isRealNumber)(t.min) &&
                (0, o.isRealNumber)(t.max)
            );
          }
        }
        t.LogarithmicTickProvider = d;
      },
      3346: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericTickProvider = void 0);
        const r = i(23866),
          s = i(98140),
          o = i(72934),
          a = i(63345);
        class n extends a.TickProvider {
          constructor(e) {
            super(),
              (this.minDeltaValue = 1e-13),
              (this.webAssemblyContext = e);
          }
          getMinorTicks(e, t, i) {
            const r = new s.NumberRange(e, t),
              o = i;
            return this.isParamsValid(o, r)
              ? this.calculateTicks(o, r.min, r.max)
              : [];
          }
          getMajorTicks(e, t, i) {
            const r = new s.NumberRange(e, t),
              o = i;
            return this.isParamsValid(o, r)
              ? this.calculateTicks(o, r.max, r.max)
              : [];
          }
          isParamsValid(e, t) {
            return (
              r.Guard.notNull(e, "visibleRange"),
              r.Guard.notNull(t, "deltaRange"),
              (0, o.isRealNumber)(e.min) &&
                (0, o.isRealNumber)(e.max) &&
                t.min > 0 &&
                t.max > 0
            );
          }
          calculateTicks(e, t, i) {
            const r = [],
              s = e.min,
              o = e.max,
              a = t === i,
              n = this.webAssemblyContext.NumberUtil;
            let l = n.RoundUp(s, t);
            const d = l;
            let h = 0;
            for (; l <= o; )
              n.IsDivisibleBy(l, i) === a && r.push(l), (l = d + ++h * t);
            return r;
          }
        }
        t.NumericTickProvider = n;
      },
      63345: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TickProvider = void 0),
          (t.TickProvider = class {
            attachedToAxis(e) {
              this.parentAxis = e;
            }
            detachedFromAxis() {
              this.parentAxis = void 0;
            }
          });
      },
      3434: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ChartTitleRenderer = void 0);
        const r = i(87108),
          s = i(71238),
          o = i(14184),
          a = i(24156);
        class n extends a.TitleRendererBase {
          constructor() {
            super(...arguments),
              (this.titleOffsetProperty = r.Thickness.fromNumber(0));
          }
          get titleOffset() {
            return this.titleOffsetProperty;
          }
          measure(e, t, i) {
            var r;
            const o =
              e !== this.text ||
              !(0, s.areEqualTextStyles)(t, this.originalTextStyle) ||
              (null === (r = this.originalTextStyle) || void 0 === r
                ? void 0
                : r.position) !== t.position;
            e &&
              e.length > 0 &&
              (!this.useCache || (!this.texture && !t.useNativeText) || o
                ? (this.invalidateCache(),
                  (this.text = e),
                  (this.originalTextStyle = Object.assign({}, t)),
                  (this.textStyle = (0, s.adjustTextStyle)(t)),
                  (this.useNativeTextProperty = t.useNativeText),
                  (this.titlePosition = t.position),
                  this.getTextSize(e, this.textStyle, i))
                : ((this.textStyle.alignment = t.alignment),
                  (this.textStyle.placeWithinChart = t.placeWithinChart))),
              (this.titleOffsetProperty = this.getTitleOffset(
                e,
                this.textStyle
              ));
          }
          layout(e) {
            this.text && 0 !== this.text.length
              ? (this.viewRectProperty = this.getViewRect(
                  this.text,
                  e,
                  this.textStyle.position,
                  this.textStyle.alignment
                ))
              : (this.viewRectProperty = void 0);
          }
          draw(e) {
            if (!this.text || 0 === this.text.length) return;
            o.DebugForDpi &&
              console.log(
                `ChartTitleRenderer.draw fontSize: ${this.textStyle.fontSize}`
              );
            const {
              useNativeText: t,
              position: i,
              lineSpacing: r,
            } = this.textStyle;
            this.drawInternal(e, t, i),
              this.drawDebug && this.drawTitleDebugViewRect(e);
          }
          getTitleTexture() {
            const e = this.textStyle.position;
            let t = (0, a.getAdjustedRotation)(this.textStyle.rotation, e);
            const i = Array.isArray(this.text)
              ? this.text
              : this.text.split("\n");
            return this.textureManager.createTextTexture(
              i,
              this.textStyle,
              t,
              this.textStyle.lineSpacing
            );
          }
          getTitleOffset(e, t) {
            if (!this.text || 0 === this.text.length || t.placeWithinChart)
              return r.Thickness.fromNumber(0);
            const i = this.textHeight;
            switch (t.position) {
              case s.ETitlePosition.Top:
                return new r.Thickness(i, 0, 0, 0);
              case s.ETitlePosition.Bottom:
                return new r.Thickness(0, 0, i, 0);
              case s.ETitlePosition.Left:
                return new r.Thickness(0, 0, 0, i);
              case s.ETitlePosition.Right:
                return new r.Thickness(0, i, 0, 0);
              default:
                return (0, s.handleInvalidChartTitlePosition)(t.position);
            }
          }
        }
        t.ChartTitleRenderer = n;
      },
      48570: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderPassData = void 0),
          (t.RenderPassData = class {
            constructor(e, t, i, r, s, o) {
              (this.indexRange = e),
                (this.getxCoordinateCalculator = t),
                (this.getyCoordinateCalculator = i),
                (this.isVerticalChart = r),
                (this.pointSeries = s),
                (this.resamplingHash = o);
            }
            get xCoordinateCalculator() {
              return this.getxCoordinateCalculator();
            }
            get yCoordinateCalculator() {
              return this.getyCoordinateCalculator();
            }
          });
      },
      648: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderPassDataCollection = void 0),
          (t.RenderPassDataCollection = class {});
      },
      17611: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderPassInfo = void 0),
          (t.RenderPassInfo = class {
            constructor(e, t) {
              (this.pointSeriesArray = []),
                (this.renderableSeriesArray = []),
                (this.indicesRanges = []),
                (this.resamplingHashes = []),
                (this.seriesViewRect = t);
            }
          });
      },
      23059: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartRenderer = void 0);
        const r = i(84745),
          s = i(21079),
          o = i(87459),
          a = i(12785),
          n = i(38215),
          l = i(3777),
          d = i(17575),
          h = i(16185),
          u = i(97742),
          c = i(84736),
          p = i(84626),
          g = i(14184),
          y = i(86127),
          f = i(48570),
          v = i(17611),
          m = i(77809),
          S = i(24149),
          P = i(98353),
          C = i(63458),
          x = i(48008),
          b = i(9254),
          A = i(68021),
          T = i(32873);
        class E {
          constructor(e) {
            (this.isInvalidated = !1), (this.sciChartSurface = e);
          }
          static resampleSeries(e, t, i) {
            if (!t.supportsResampling)
              return {
                pointSeries: t.toPointSeries(),
                renderableSeries: t,
                indicesRange: t.isStacked
                  ? void 0
                  : t.getIndicesRange(e.visibleRange, e.isCategoryAxis),
                resamplingHash: void 0,
              };
            const r = new u.ResamplingParams(i, t, e);
            if (!t.needsResampling(r))
              return {
                pointSeries: t.toPointSeries(),
                renderableSeries: t,
                indicesRange: r.indexesRange,
                resamplingHash: void 0,
              };
            const s = E.calculateResamplingHash(t, r),
              o = t.getCurrentRenderPassData();
            return {
              pointSeries: Boolean(o && o.resamplingHash === s)
                ? o.pointSeries
                : t.toPointSeries(r),
              renderableSeries: t,
              indicesRange: r.indexesRange,
              resamplingHash: s,
            };
          }
          static calculateResamplingHash(e, t) {
            const i = [],
              r = d.hashUtils.generateBooleanHash(e.enableDrawingOptimisations);
            i.push(r);
            const s = e.dataSeries;
            if (s) {
              const e = d.hashUtils.generateHash(s.id);
              i.push(e);
              const t = d.hashUtils.generateNumberHash(s.count());
              i.push(t);
              const r = d.hashUtils.generateBooleanHash(
                s.dataDistributionCalculator.isSortedAscending
              );
              i.push(r);
              const o = d.hashUtils.generateNumberHash(s.changeCount);
              i.push(o);
            }
            const o = d.hashUtils.generateObjectHash(t);
            return i.push(o), d.hashUtils.generateCombinedHash(i);
          }
          render(e) {
            var t;
            if (this.sciChartSurface.isDeleted) return;
            const i = A.PerformanceDebugHelper.mark(
              A.EPerformanceMarkType.RenderStart,
              { contextId: this.sciChartSurface.id }
            );
            b.Logger.debug("render start"), (this.isInvalidated = !1);
            const s = e.getNativeContext(),
              o = this.sciChartSurface.webAssemblyContext2D;
            let a;
            r.IS_TEST_ENV ||
              ((a = s.GetBlendMode()),
              s.SetBlendMode(o.eSCRTBlendMode.BlendAdditiveOneAlpha)),
              this.validate();
            const n = this.previousTime ? Date.now() - this.previousTime : 0;
            (this.previousTime = Date.now()),
              this.sciChartSurface.onAnimate(n),
              e.enqueueLayeredDraw(() => {
                this.sciChartSurface.updateBackground();
              }, this.getAbsoluteLayer(l.EDefaultRenderLayer.Background)),
              this.sciChartSurface.updateStackedCollectionAccumulatedVectors(),
              this.sciChartSurface.xAxes
                .asArray()
                .forEach((e) =>
                  this.tryPerformAutoRangeOn(e, this.sciChartSurface)
                ),
              this.sciChartSurface.yAxes
                .asArray()
                .forEach((e) =>
                  this.tryPerformAutoRangeOn(e, this.sciChartSurface)
                );
            const d = this.measureTitle(e),
              h = this.sciChartSurface.layoutManager.layoutChart(
                e.viewportSize,
                d
              ),
              u = this.getViewportSvgRect(e.viewportSize, h);
            this.sciChartSurface.setCoordSvgTranslation(h.x - u.x, h.y - u.y),
              this.resizeAnnotationRootElements(u),
              this.layoutTitle(h),
              this.scheduleTitleDraw(e);
            const { xAxesById: p, yAxesById: g } = this.prepareAxesRenderData(),
              y = this.prepareSeriesRenderData(h, p);
            e.enqueueLayeredDraw(() => {
              this.sciChartSurface.drawBorder(e);
            }, this.getAbsoluteLayer(l.EDefaultRenderLayer.AxisBandsLayer)),
              this.sciChartSurface.debugRendering &&
                this.drawDebugAxes(this.sciChartSurface, e),
              this.drawAxes(this.sciChartSurface, e);
            const f = [
                ...this.sciChartSurface.annotations.asArray(),
                ...this.sciChartSurface.modifierAnnotations.asArray(),
              ],
              v = f.filter(
                (e) =>
                  e.type === c.EAnnotationType.RenderContextBoxAnnotation ||
                  e.type === c.EAnnotationType.RenderContextLineAnnotation ||
                  e.type ===
                    c.EAnnotationType.RenderContextHorizontalLineAnnotation ||
                  e.type ===
                    c.EAnnotationType.RenderContextVerticalLineAnnotation ||
                  e.type ===
                    c.EAnnotationType.RenderContextAxisMarkerAnnotation ||
                  e.type === c.EAnnotationType.RenderContextNativeTextAnnotation
              ),
              m = this.getAbsoluteLayer(l.EDefaultRenderLayer.Background);
            e.enqueueLayeredDraw(() => {
              this.drawRenderContextAnnotations(
                v,
                p,
                g,
                c.EAnnotationLayer.Background,
                e,
                h
              );
            }, m);
            const S = this.getAbsoluteLayer(
              l.EDefaultRenderLayer.AnnotationsBelowSeriesLayer
            );
            e.enqueueLayeredDraw(() => {
              this.drawRenderContextAnnotations(
                v,
                p,
                g,
                c.EAnnotationLayer.BelowChart,
                e,
                h
              );
            }, S);
            const P = this.getAbsoluteLayer(l.EDefaultRenderLayer.SeriesLayer);
            e.enqueueLayeredDraw(
              () => this.drawSeries(this.sciChartSurface, y, e),
              P
            );
            const C = this.getAbsoluteLayer(
              l.EDefaultRenderLayer.AnnotationsAboveSeriesLayer
            );
            e.enqueueLayeredDraw(() => {
              this.drawRenderContextAnnotations(
                v,
                p,
                g,
                c.EAnnotationLayer.AboveChart,
                e,
                h
              );
            }, C),
              e.drawLayers(),
              e.endFonts();
            const x = f.filter(
              (e) =>
                e.type === c.EAnnotationType.SVG ||
                e.type === c.EAnnotationType.SVGTextAnnotation ||
                e.type === c.EAnnotationType.SVGCustomAnnotation
            );
            this.drawSvgAnnotations(
              x,
              p,
              g,
              this.sciChartSurface.getCoordSvgTranslation()
            ),
              this.sciChartSurface.isSubSurface
                ? e.doDraw &&
                  this.updateWatermark(
                    e,
                    this.sciChartSurface.parentSurface.seriesViewRect
                  )
                : this.updateWatermark(e, h),
              A.PerformanceDebugHelper.mark(A.EPerformanceMarkType.RenderEnd, {
                contextId: this.sciChartSurface.id,
                relatedId:
                  null === (t = null == i ? void 0 : i.detail) || void 0 === t
                    ? void 0
                    : t.relatedId,
              }),
              this.onParentSurfaceRendered(),
              r.IS_TEST_ENV || s.SetBlendMode(a),
              this.sciChartSurface.isRunningAnimation &&
                setTimeout(this.sciChartSurface.invalidateElement, 0),
              b.Logger.debug("render end");
          }
          drawRenderContextAnnotations(e, t, i, r, s, o) {
            e.filter((e) => e.annotationLayer === r).forEach((e) => {
              if (0 === t.count || 0 === i.count)
                console.error(
                  "Cannot draw annotations before axes have been configured. Add axes first, or use suspendUpdates to pause drawing until axes are available."
                );
              else {
                const r = t.item(e.xAxisId) || t.values[0],
                  a = i.item(e.yAxisId) || i.values[0];
                e.showWarning &&
                  (t.count > 0 &&
                    r.id !== e.xAxisId &&
                    console.warn(
                      `Annotation looked for xAxis Id ${e.xAxisId} but got ${r.id}. Do you need to set xAxisId on an annotation or modifier?`
                    ),
                  i.count > 0 &&
                    a.id !== e.yAxisId &&
                    console.warn(
                      `Annotation looked for yAxis Id ${e.yAxisId} but got ${a.id}. Do you need to set yAxisId on an annotation or modifier?`
                    ),
                  (e.showWarning = !1)),
                  e.isHidden ||
                    e.drawWithContext(
                      s,
                      r.getCurrentCoordinateCalculator(),
                      a.getCurrentCoordinateCalculator(),
                      o
                    );
              }
            });
          }
          drawSvgAnnotations(e, t, i, r) {
            e.forEach((e) => {
              const s = t.item(e.xAxisId) || t.values[0],
                o = i.item(e.yAxisId) || i.values[0];
              e.showWarning &&
                (t.count > 0 &&
                  s.id !== e.xAxisId &&
                  console.warn(
                    `Annotation looked for xAxis Id ${e.xAxisId} but got ${s.id}. Do you need to set xAxisId on an annotation or modifier?`
                  ),
                i.count > 0 &&
                  o.id !== e.yAxisId &&
                  console.warn(
                    `Annotation looked for yAxis Id ${e.yAxisId} but got ${o.id}. Do you need to set yAxisId on an annotation or modifier?`
                  ),
                (e.showWarning = !1)),
                e.update(
                  s.getCurrentCoordinateCalculator(),
                  o.getCurrentCoordinateCalculator(),
                  r.x / y.DpiHelper.PIXEL_RATIO,
                  r.y / y.DpiHelper.PIXEL_RATIO
                );
            });
          }
          validate() {
            this.sciChartSurface.xAxes
              .asArray()
              .forEach((e) => (e.isMeasured = !1)),
              this.sciChartSurface.yAxes
                .asArray()
                .forEach((e) => (e.isMeasured = !1));
            let e = [];
            if (
              (this.sciChartSurface.renderableSeries.size() > 0 &&
                (0 === this.sciChartSurface.xAxes.size() &&
                  e.push("Chart must have at least one X axis"),
                0 === this.sciChartSurface.yAxes.size() &&
                  e.push("Chart must have at least one Y axis")),
              e.length > 0)
            )
              throw new Error(e.join("\n"));
          }
          resizeAnnotationRootElements(e) {
            const t = new o.Rect(
              e.x / y.DpiHelper.PIXEL_RATIO,
              e.y / y.DpiHelper.PIXEL_RATIO,
              e.width / y.DpiHelper.PIXEL_RATIO,
              e.height / y.DpiHelper.PIXEL_RATIO
            );
            if (this.prevRect) {
              if (o.Rect.isEqual(this.prevRect, t)) return;
            } else this.prevRect = t;
            this.prevRect = t;
            const i = this.sciChartSurface.domSvgContainer;
            i && (0, T.fitSvgToViewRect)(i, t);
            const r = this.sciChartSurface.domBackgroundSvgContainer;
            r && (0, T.fitSvgToViewRect)(r, t);
            const s = this.sciChartSurface.domSeriesBackground;
            s && (0, T.fitElementToViewRect)(s, t);
          }
          prepareAxesRenderData() {
            const e = new s.Dictionary(),
              t = new s.Dictionary();
            return (
              this.sciChartSurface.xAxes.asArray().forEach((t) => {
                e.add(t.id, t), t.prepareRenderData();
              }),
              this.sciChartSurface.yAxes.asArray().forEach((e) => {
                t.add(e.id, e), e.prepareRenderData();
              }),
              { xAxesById: e, yAxesById: t }
            );
          }
          prepareSeriesRenderData(e, t) {
            const i = this.sciChartSurface.renderableSeries.size(),
              r = new v.RenderPassInfo(i, e);
            for (
              let i = 0;
              i < this.sciChartSurface.renderableSeries.size();
              i++
            ) {
              const s = this.sciChartSurface.renderableSeries.get(i);
              if (!s.isStacked && !s.dataSeries) continue;
              if (!s.isStacked && s.dataSeries.getIsDeleted())
                throw new Error(
                  `SciChartSurface.renderableSeries[index=${i}] dataSeries has been deleted. This is an invalid state for SciChart. Have you shared this DataSeries between chart surfaces?`
                );
              const o = t.item(s.xAxisId),
                a = E.resampleSeries(o, s, e);
              r.renderableSeriesArray.push(a.renderableSeries),
                r.pointSeriesArray.push(a.pointSeries),
                r.indicesRanges.push(a.indicesRange),
                r.resamplingHashes.push(a.resamplingHash);
            }
            return r;
          }
          drawAxes(e, t) {
            e.xAxes.asArray().forEach((e) => {
              e.draw(t);
            }),
              e.yAxes.asArray().forEach((e) => {
                e.draw(t);
              });
          }
          drawSeries(e, t, i) {
            const {
                renderableSeriesArray: r,
                pointSeriesArray: s,
                resamplingHashes: o,
                indicesRanges: a,
              } = t,
              l = (t) => {
                const l = r[t],
                  d = s[t],
                  h = o[t],
                  u = a[t],
                  c = e.xAxes.asArray().find((e) => e.id === l.xAxisId);
                if (!c)
                  throw Error("Cannot find an X Axis with ID = " + l.xAxisId);
                const p = e.yAxes.asArray().find((e) => e.id === l.yAxisId);
                if (!p)
                  throw Error("Cannot find a Y Axis with ID = " + l.yAxisId);
                if (
                  c.isVerticalChart &&
                  ![n.EAxisAlignment.Top, n.EAxisAlignment.Bottom].includes(
                    p.axisAlignment
                  )
                )
                  throw Error(
                    `For vertical chart (chart with X Axis alignment Left or Right) Y Axis alignment should be Top or Bottom, X Axis ID = ${c.id}`
                  );
                if (
                  (0, n.getIsVertical)(c.axisAlignment) &&
                  (0, n.getIsVertical)(p.axisAlignment)
                )
                  throw Error(
                    "Both x and y axes can't have vertical alignment"
                  );
                if (
                  (0, n.getIsHorizontal)(c.axisAlignment) &&
                  (0, n.getIsHorizontal)(p.axisAlignment)
                )
                  throw Error(
                    "Both x and y axes can't have horizontal alignment"
                  );
                try {
                  const e = new f.RenderPassData(
                    u,
                    c.getCurrentCoordinateCalculator,
                    p.getCurrentCoordinateCalculator,
                    c.isVerticalChart,
                    d,
                    h
                  );
                  l.draw(i, e);
                } finally {
                }
              },
              d = i.getNativeContext(),
              h = this.sciChartSurface.seriesViewRect;
            d.PushMatrix(),
              d.PushState(),
              d.Translate(h.x, h.y),
              d.SetClipRect(h.x, h.y, h.width, h.height),
              r.forEach((e, t) => {
                !e.isVisible || e.isSelected || e.isHovered || l(t);
              }),
              r.forEach((e, t) => {
                e.isVisible && e.isHovered && l(t);
              }),
              r.forEach((e, t) => {
                e.isVisible && e.isSelected && l(t);
              }),
              this.sciChartSurface.dataLabelLayoutManager &&
                this.sciChartSurface.dataLabelLayoutManager.performTextLayout(
                  this.sciChartSurface,
                  t
                ),
              r.forEach((e, t) => {
                e.isVisible &&
                  e.dataLabelProvider &&
                  e.dataLabelProvider.draw(i);
              }),
              d.PopMatrix(),
              d.PopState();
          }
          drawDebugAxes(e, t) {
            t.enqueueLayeredDraw(() => {
              e.xAxes.asArray().forEach((e) => {
                e.drawDebug(t);
              }),
                e.yAxes.asArray().forEach((e) => {
                  e.drawDebug(t);
                });
            });
          }
          tryPerformAutoRangeOn(e, t) {
            const i = !e.hasValidVisibleRange() || e.hasDefaultVisibleRange();
            if (
              e.autoRange === a.EAutoRange.Always ||
              (e.autoRange === a.EAutoRange.Once && i)
            ) {
              const t = e.getMaximumRange();
              t.equals(e.visibleRange) ||
                (!e.autoRangeAnimation ||
                (i && !e.autoRangeAnimation.animateInitialRanging) ||
                (!i && !e.autoRangeAnimation.animateSubsequentRanging)
                  ? (e.visibleRange = t)
                  : t.equals(e.animatedVisibleRange) ||
                    e.animateVisibleRange(
                      t,
                      e.autoRangeAnimation.duration,
                      e.autoRangeAnimation.easing
                    ));
            }
          }
          onParentSurfaceRendered() {
            var e;
            this.sciChartSurface.isSubSurface ||
              this.sciChartSurface.chartModifiers.asArray().forEach((e) => {
                e.onParentSurfaceRendered();
              }),
              null === (e = this.sciChartSurface.subCharts) ||
                void 0 === e ||
                e.forEach((e) => {
                  e.chartModifiers.asArray().forEach((e) => {
                    e.onParentSurfaceRendered();
                  });
                }),
              (this.sciChartSurface.isCopyCanvasSurface &&
                !this.sciChartSurface.isSubSurface) ||
                this.sciChartSurface.rendered.raiseEvent(this.isInvalidated);
          }
          updateWatermark(e, t) {
            const i = this.sciChartSurface.isCopyCanvasSurface
              ? g.SciChartSurfaceBase.domMasterCanvas.height
              : e.viewportSize.height;
            let r = t.x + 5,
              s = i - (t.top + t.height) + 10;
            const o = Math.max(72, Math.min(0.25 * e.viewportSize.width, 256)),
              a = (42 * o) / 256;
            if (this.sciChartSurface.watermarkRelativeToCanvas)
              switch (this.sciChartSurface.watermarkPosition) {
                case S.EWatermarkPosition.BottomRight:
                  (r = e.viewportSize.width - o - 5),
                    (s = i - e.viewportSize.height + 12);
                  break;
                case S.EWatermarkPosition.TopLeft:
                  (s = i - (5 + a)), (r = 5);
                  break;
                case S.EWatermarkPosition.TopRight:
                  (r = e.viewportSize.width - o - 5), (s = i - (5 + a));
                  break;
                case S.EWatermarkPosition.BottomLeft:
                  (r = 5), (s = i - e.viewportSize.height + 12);
              }
            else
              switch (this.sciChartSurface.watermarkPosition) {
                case S.EWatermarkPosition.BottomRight:
                  r = t.left + t.width - o - 5;
                  break;
                case S.EWatermarkPosition.TopLeft:
                  s = i - (t.top + 5 + a);
                  break;
                case S.EWatermarkPosition.TopRight:
                  (r = t.left + t.width - o - 5), (s = i - (t.top + 5 + a));
                case S.EWatermarkPosition.BottomLeft:
              }
            this.sciChartSurface.updateWatermark(r, s);
          }
          getViewportSvgRect(e, t) {
            switch (this.sciChartSurface.svgClippingMode) {
              case m.ESvgClippingMode.SeriesViewRect:
                return t;
              case m.ESvgClippingMode.Chart:
                return new o.Rect(0, 0, e.width, e.height);
              case m.ESvgClippingMode.SubChart:
                let i = new o.Rect(0, 0, e.width, e.height);
                return (
                  this.sciChartSurface.isSubSurface &&
                    (i = this.sciChartSurface.getSubChartRect()),
                  i
                );
              default:
                return t;
            }
          }
          scheduleTitleDraw(e) {
            e.enqueueLayeredDraw(() => {
              this.sciChartSurface.chartTitleRenderer.draw(e);
            }, this.getAbsoluteLayer(l.EDefaultRenderLayer.AnnotationsAboveSeriesLayer));
          }
          measureTitle(e) {
            return (
              this.sciChartSurface.chartTitleRenderer.measure(
                this.sciChartSurface.title,
                this.sciChartSurface.titleStyle,
                e
              ),
              this.sciChartSurface.chartTitleRenderer.titleOffset
            );
          }
          layoutTitle(e) {
            const t = this.sciChartSurface.titleStyle.placeWithinChart
              ? e
              : this.getChartViewRect();
            this.sciChartSurface.chartTitleRenderer.layout(t);
          }
          getChartViewRect() {
            const e = this.sciChartSurface.renderSurface.viewportSize;
            if (p.SciChartSurface.isSubSurface(this.sciChartSurface)) {
              let t = new o.Rect(0, 0, e.width, e.height);
              return (t = this.sciChartSurface.getSubChartRect()), t;
            }
            return new o.Rect(0, 0, e.width, e.height);
          }
          getAbsoluteLayer(e) {
            return (0, h.calculateAbsoluteRenderLayer)(
              this.sciChartSurface.layersOffset,
              this.sciChartSurface.stepBetweenLayers,
              e
            );
          }
          drawDebugSurfaceRect(e, t, i) {
            const r = (0, P.getVectorRectVertex)(i),
              s = new i.SCRTSolidBrush(
                (0, x.parseColorToUIntArgb)("rgba(0,255,0,0.7)"),
                !1
              ),
              o = (0, C.createNativeRect)(i, 0, 0, t.width, t.height);
            r.push_back(o), e.drawRects(r, s, t.left, t.top), s.delete();
          }
        }
        t.SciChartRenderer = E;
      },
      24156: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getAdjustedRotation = t.TitleRendererBase = void 0);
        const r = i(84745),
          s = i(55023),
          o = i(56744),
          a = i(87459),
          n = i(36420),
          l = i(71238),
          d = i(48008),
          h = i(87092),
          u = i(63458),
          c = i(98353),
          p = i(86127),
          g = i(76829);
        class y extends s.DeletableEntity {
          constructor(e) {
            super(),
              (this.drawDebug = !1),
              (this.useCache = !0),
              (this.viewRectProperty = a.Rect.createZero()),
              (this.textHeight = 0),
              (this.textWidth = 0),
              (this.desiredHeightProperty = 0),
              (this.desiredWidthProperty = 0),
              (this.useNativeTextProperty = !1),
              (this.webAssemblyContext = e),
              (this.textureManager = new g.TextureManager(e)),
              (this.onDpiChanged = this.onDpiChanged.bind(this)),
              p.DpiHelper.dpiChanged.subscribe(this.onDpiChanged);
          }
          get viewRect() {
            return this.viewRectProperty;
          }
          measure(...e) {}
          layout(e) {}
          draw(...e) {}
          delete() {
            this.resetCache(),
              (this.textureManager = (0, o.deleteSafe)(this.textureManager)),
              (this.webAssemblyContext = void 0),
              p.DpiHelper.dpiChanged.unsubscribe(this.onDpiChanged);
          }
          resetCache() {
            this.invalidateCache(),
              (this.textStyle = void 0),
              (this.originalTextStyle = void 0);
          }
          invalidateCache() {
            var e;
            (0, o.deleteSafe)(
              null === (e = this.texture) || void 0 === e
                ? void 0
                : e.bitmapTexture
            ),
              (this.texture = void 0);
          }
          onDpiChanged(e) {
            this.resetCache();
          }
          drawInternal(e, t, i) {
            this.text &&
              0 !== this.text.length &&
              (t ? this.drawWithNativeText(e, i) : this.drawWithTexture(e, i));
          }
          drawWithNativeText(e, i) {
            const r = Array.isArray(this.text)
                ? this.text.join("\n")
                : this.text,
              s = e.getFont(this.textStyle, !0);
            let o = this.viewRect.left + this.nativeTextShiftX,
              a = this.viewRect.top + this.nativeTextShiftY;
            const l =
                (-(0, t.getAdjustedRotation)(this.textStyle.rotation, i) *
                  Math.PI) /
                180,
              h = (0, n.convertMultiLineAlignment)(
                this.textStyle.multilineAlignment,
                this.webAssemblyContext
              ),
              u = (0, d.parseColorToUIntArgb)(this.textStyle.color);
            s.DrawStringAdvanced(
              r,
              u,
              Math.round(o),
              Math.round(a),
              (0, c.getVector4)(this.webAssemblyContext, o, a, l, 0),
              h,
              this.nativeLineSpacing
            );
          }
          drawWithTexture(e, t) {
            const {
              bitmapTexture: i,
              textureHeight: r,
              textureWidth: s,
            } = this.texture;
            if (i)
              try {
                e
                  .getNativeContext()
                  .DrawTexture(
                    i,
                    Math.round(this.viewRect.left),
                    Math.round(this.viewRect.top),
                    s,
                    r
                  ),
                  this.useCache || (i.delete(), (this.texture = void 0));
              } catch (e) {
                console.error("Error while drawing title: ", e),
                  this.resetCache();
              }
          }
          getTextSize(e = "", i, s) {
            if (!e || 0 === e.length)
              return (
                (this.desiredHeightProperty = 0),
                (this.desiredWidthProperty = 0),
                (this.textHeight = 0),
                void (this.textWidth = 0)
              );
            const o = (0, l.getIsHorizontalPlacement)(this.titlePosition);
            if (this.useNativeTextProperty) {
              const r = s.getFont(i, !o),
                a = Array.isArray(e) ? e.join("\n") : e,
                n = (0, t.getAdjustedRotation)(i.rotation, this.titlePosition),
                {
                  textHeight: l,
                  textWidth: d,
                  nativeLineSpacing: u,
                  deltaX: c,
                  deltaY: p,
                } = (0, h.getNativeTextSize)(
                  a,
                  r,
                  i,
                  this.webAssemblyContext,
                  n
                );
              (this.textHeight = o ? l : d),
                (this.textWidth = o ? d : l),
                (this.nativeLineSpacing = u),
                (this.nativeTextShiftX = c),
                (this.nativeTextShiftY = p),
                (this.desiredHeightProperty = o
                  ? this.textHeight
                  : this.textWidth),
                (this.desiredWidthProperty = o
                  ? this.textWidth
                  : this.textHeight);
            } else {
              const e = this.getTitleTexture();
              (this.texture = e),
                (this.desiredHeightProperty = e.textureHeight),
                (this.desiredWidthProperty = e.textureWidth),
                (this.textHeight = o
                  ? this.desiredHeightProperty
                  : this.desiredWidthProperty),
                (this.textWidth = o
                  ? this.desiredWidthProperty
                  : this.desiredHeightProperty);
            }
            r.IS_TEST_ENV &&
              (o
                ? ((this.desiredHeightProperty =
                    (0, g.measureTextHeight)(i.fontSize) +
                    this.textStyle.padding.top +
                    this.textStyle.padding.bottom),
                  (this.desiredWidthProperty = 0))
                : ((this.desiredHeightProperty = 0),
                  (this.desiredWidthProperty =
                    (0, g.measureTextHeight)(i.fontSize) +
                    this.textStyle.padding.top +
                    this.textStyle.padding.bottom)));
          }
          getTitleTexture() {
            const e = Array.isArray(this.text)
              ? this.text
              : this.text.split("\n");
            return this.textureManager.createTextTexture(e, this.textStyle);
          }
          getViewRect(e = "", t, i, r) {
            if (!e || 0 === e.length) return a.Rect.createZero();
            const s = (0, l.getIsHorizontalPlacement)(i),
              o = this.getAlignmentAdjustmentDelta(
                s ? t.width : t.height,
                i,
                r
              );
            switch (i) {
              case l.ETitlePosition.Top:
                return new a.Rect(
                  t.x + o,
                  t.y,
                  this.textWidth,
                  this.textHeight
                );
              case l.ETitlePosition.Bottom:
                return new a.Rect(
                  t.x + o,
                  t.bottom - this.textHeight,
                  this.textWidth,
                  this.textHeight
                );
              case l.ETitlePosition.Left:
                return new a.Rect(
                  t.x,
                  t.y + o,
                  this.textHeight,
                  this.textWidth
                );
              case l.ETitlePosition.Right:
                return new a.Rect(
                  t.right - this.textHeight,
                  t.y + o,
                  this.textHeight,
                  this.textWidth
                );
              default:
                return (0, l.handleInvalidChartTitlePosition)(i);
            }
          }
          drawTitleDebugViewRect(e) {
            const t = this.viewRect,
              i = (0, c.getVectorRectVertex)(this.webAssemblyContext),
              r = new this.webAssemblyContext.SCRTSolidBrush(
                (0, d.parseColorToUIntArgb)("rgba(0,255,0,0.7)"),
                !1
              ),
              s = (0, u.createNativeRect)(
                this.webAssemblyContext,
                0,
                0,
                t.width,
                t.height
              );
            i.push_back(s), e.drawRects(i, r, t.left, t.top), r.delete();
          }
          getAlignmentAdjustmentDelta(e, t, i) {
            switch (i) {
              case l.ETextAlignment.Center:
                return e / 2 - this.textWidth / 2;
              case l.ETextAlignment.Left:
                return t === l.ETitlePosition.Left ? e - this.textWidth : 0;
              case l.ETextAlignment.Right:
                return t === l.ETitlePosition.Left ? 0 : e - this.textWidth;
              default:
                return (0, l.handleInvalidTextAlignment)(i);
            }
          }
        }
        (t.TitleRendererBase = y),
          (t.getAdjustedRotation = (e, t) => {
            if (void 0 !== e) return (e + 360) % 360;
            let i = 0;
            return (
              t === l.ETitlePosition.Left
                ? (i += -90)
                : t === l.ETitlePosition.Right && (i += 90),
              (i + 360) % 360
            );
          });
      },
      84392: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.stripAutoColor = t.ThemeProvider = t.AUTO_COLOR = void 0);
        const r = i(48008),
          s = i(52881);
        (t.AUTO_COLOR = "auto"),
          (t.ThemeProvider = class {
            constructor() {
              (this.strokePalette = []), (this.fillPalette = []);
            }
            getStrokeColor(e, t, i) {
              return this.getPaletteColor(e, t, i, !0);
            }
            getFillColor(e, t, i) {
              return this.getPaletteColor(e, t, i, !1);
            }
            applyOverrides(e) {
              (this.overrides = e), Object.assign(this, e);
            }
            toJSON() {
              return Object.assign({ type: this.type }, this.overrides);
            }
            getPaletteColor(e, t, i, o) {
              const a = o ? this.strokePalette : this.fillPalette;
              if (!a || 0 === a.length)
                throw new Error(
                  `${
                    o ? "stroke" : "fill"
                  }Palette must not be empty to use get${
                    o ? "Stroke" : "Fill"
                  }Color`
                );
              if (a.length < 2) return this.toColor(a[0]);
              if (e > t)
                throw new Error("index must be less than or equal to max");
              if (t <= a.length) return this.toColor(a[e]);
              let n = o ? this.strokeGradient : this.fillGradient;
              if (!n) {
                const e =
                  "string" == typeof a[0]
                    ? a.map((e, t) => ({ color: e, offset: t / a.length - 1 }))
                    : a;
                (n = s.PaletteFactory.createColorMap(i, e)),
                  o ? (this.strokeGradient = n) : (this.fillGradient = n);
              }
              const l = e / t,
                d =
                  n[
                    i.NumberUtil.Constrain(
                      Math.round(l * (n.length - 1)),
                      0,
                      n.length - 1
                    )
                  ];
              return (0, r.parseArgbToHtmlColor)(d);
            }
            toColor(e) {
              return "string" == typeof e ? e : e.color;
            }
          }),
          (t.stripAutoColor = (e) =>
            e === t.AUTO_COLOR
              ? "#00000000"
              : e && e.startsWith(t.AUTO_COLOR)
              ? e.substring(t.AUTO_COLOR.length)
              : e);
      },
      99016: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartJSDarkTheme = void 0);
        const r = i(62916),
          s = i(84392);
        class o extends s.ThemeProvider {
          constructor() {
            super(...arguments),
              (this.type = r.EThemeProviderType.Dark),
              (this.sciChartBackground = "#1C1C1EFF"),
              (this.loadingAnimationBackground = "#1C1C1EFF"),
              (this.loadingAnimationForeground = "#AAA"),
              (this.gridBorderBrush = "#5A5B5BFF"),
              (this.axisBandsFill = "#202123E1"),
              (this.axisBorder = "#00000000"),
              (this.tickTextBrush = "#A6A7ACFF"),
              (this.majorGridLineBrush = "#323539FF"),
              (this.minorGridLineBrush = "#232426FF"),
              (this.gridBackgroundBrush = "TRANSPARENT"),
              (this.rolloverLineBrush = "#42b64933"),
              (this.cursorLineBrush = "#228B22FF"),
              (this.rubberBandFillBrush = "#42b64933"),
              (this.rubberBandStrokeBrush = "#42b64977"),
              (this.legendBackgroundBrush = "#1D2C35FF"),
              (this.labelBackgroundBrush = "#42b649AA"),
              (this.labelBorderBrush = "#42b649FF"),
              (this.labelForegroundBrush = "#EEEEEEFF"),
              (this.textAnnotationForeground = "#EEEEEEFF"),
              (this.textAnnotationBackground = "#42b649AA"),
              (this.annotationsGripsBorderBrush = "#CDCDCD99"),
              (this.annotationsGripsBackroundBrush = "#CDCDCD22"),
              (this.annotationSelectionStroke = "#f00e0e66"),
              (this.overviewFillBrush = "#262728BB"),
              (this.scrollbarBackgroundBrush = "#262728FF"),
              (this.scrollbarBorderBrush = "#121212FF"),
              (this.scrollbarGripsBackgroundBrush = "#535353FF"),
              (this.scrollbarViewportBackgroundBrush = "#222222FF"),
              (this.scrollbarViewportBorderBrush = "#232323FF"),
              (this.upWickColor = "#50ff50FF"),
              (this.downWickColor = "#ff5050FF"),
              (this.upBodyBrush = "#50ff50B2"),
              (this.downBodyBrush = "#ff5050B2"),
              (this.upBandSeriesLineColor = "#279B27FF"),
              (this.downBandSeriesLineColor = "#FF1919FF"),
              (this.upBandSeriesFillColor = "#279B2733"),
              (this.downBandSeriesFillColor = "#FF191933"),
              (this.mountainAreaBrush = "#4083B777"),
              (this.mountainLineColor = "#C6E6FFFF"),
              (this.lineSeriesColor = "#C6E6FFFF"),
              (this.columnLineColor = "#FFFFFFFF"),
              (this.columnFillBrush = "#FFFFFFFF"),
              (this.impulseFillBrush = "#FFFFFFFF"),
              (this.defaultColorMapBrush = [
                { offset: 0, color: "DARKBLUE" },
                { offset: 0.5, color: "CORNFLOWERBLUE" },
                { offset: 1, color: "#FF22AAFF" },
              ]),
              (this.axisTitleColor = "#C8C7C3FF"),
              (this.chartTitleColor = "#C8C7C3FF"),
              (this.shadowEffectColor = "#000000FF"),
              (this.planeBorderColor = "#333333FF"),
              (this.axisPlaneBackgroundFill = "TRANSPARENT"),
              (this.axis3DBandsFill = "#202123E1"),
              (this.isLightBackground = !1);
          }
        }
        t.SciChartJSDarkTheme = o;
      },
      2705: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartJSDarkv2Theme = void 0);
        const r = i(62916),
          s = i(99016);
        class o extends s.SciChartJSDarkTheme {
          constructor() {
            super(),
              (this.type = r.EThemeProviderType.DarkV2),
              (this.sciChartBackground =
                "radial-gradient(circle, #3C3C3FFF 0%, #1C1C1EFF 100%)"),
              (this.loadingAnimationBackground =
                "radial-gradient(circle, #3C3C3FFF 0%, #1C1C1EFF 100%)"),
              (this.axisBandsFill = "#20212333"),
              (this.majorGridLineBrush = "#AAAAAA37"),
              (this.minorGridLineBrush = "#77777719"),
              (this.strokePalette = [
                "#F48420",
                "#AE408E",
                "#209FD9",
                "#264B93",
              ]),
              (this.fillPalette = [
                "#F4842077",
                "#AE408E77",
                "#209FD977",
                "#264B9377",
              ]),
              (this.isLightBackground = !1);
          }
        }
        t.SciChartJSDarkv2Theme = o;
      },
      60819: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartJSLightTheme = void 0);
        const r = i(62916),
          s = i(84392);
        class o extends s.ThemeProvider {
          constructor() {
            super(...arguments),
              (this.strokePalette = [
                "#F48420",
                "#AE408E",
                "#30BC9A",
                "#209FD9",
                "#264B93",
              ]),
              (this.fillPalette = [
                "#F4842077",
                "#AE408E77",
                "#30BC9A77",
                "#209FD977",
                "#264B9377",
              ]),
              (this.type = r.EThemeProviderType.Light),
              (this.sciChartBackground = "#F9F9F9FF"),
              (this.loadingAnimationBackground = "#F9F9F9FF"),
              (this.loadingAnimationForeground = "#777777FF"),
              (this.gridBorderBrush = "#33333399"),
              (this.axisBandsFill = "#AAAAAA09"),
              (this.axisBorder = "#00000000"),
              (this.tickTextBrush = "#333333FF"),
              (this.majorGridLineBrush = "#CFCFCFFF"),
              (this.minorGridLineBrush = "#CFCFCF77"),
              (this.gridBackgroundBrush = "#05333377"),
              (this.rolloverLineBrush = "#33333333"),
              (this.cursorLineBrush = "#33333355"),
              (this.rubberBandFillBrush = "#33333333"),
              (this.rubberBandStrokeBrush = "#33333377"),
              (this.legendBackgroundBrush = "#33333333"),
              (this.labelBackgroundBrush = "#D0D0D0BB"),
              (this.labelBorderBrush = "#33333377"),
              (this.labelForegroundBrush = "#555555FF"),
              (this.textAnnotationForeground = "#000000FF"),
              (this.textAnnotationBackground = "#FFFFFFFF"),
              (this.annotationsGripsBorderBrush = "#232323FF"),
              (this.annotationsGripsBackroundBrush = "#FFFFFF33"),
              (this.annotationSelectionStroke = "#f00e0e66"),
              (this.overviewFillBrush = "#33333322"),
              (this.scrollbarBackgroundBrush = "#33333322"),
              (this.scrollbarBorderBrush = "#12121255"),
              (this.scrollbarGripsBackgroundBrush = "#FFFFFF66"),
              (this.scrollbarViewportBackgroundBrush = "#FFFFFF44"),
              (this.scrollbarViewportBorderBrush = "#12121255"),
              (this.upWickColor = "#52CC54FF"),
              (this.downWickColor = "#E26565FF"),
              (this.upBodyBrush = "#52CC54A0"),
              (this.downBodyBrush = "#E26565D0"),
              (this.upBandSeriesLineColor = "#52CC54FF"),
              (this.downBandSeriesLineColor = "#E26565FF"),
              (this.upBandSeriesFillColor = "#52CC5490"),
              (this.downBandSeriesFillColor = "#E26565A0"),
              (this.mountainAreaBrush = "#76B7E2B4"),
              (this.mountainLineColor = "#777777FF"),
              (this.lineSeriesColor = "#777777FF"),
              (this.columnLineColor = "#777777FF"),
              (this.columnFillBrush = "#777777FF"),
              (this.impulseFillBrush = "#777777FF"),
              (this.defaultColorMapBrush = [
                { offset: 0, color: "DARKBLUE" },
                { offset: 0.5, color: "CORNFLOWERBLUE" },
                { offset: 1, color: "#FF22AAFF" },
              ]),
              (this.axisTitleColor = "#777777FF"),
              (this.chartTitleColor = "#777777FF"),
              (this.shadowEffectColor = "#A0AABAFA"),
              (this.planeBorderColor = "#EEEEEEFF"),
              (this.axisPlaneBackgroundFill = "TRANSPARENT"),
              (this.axis3DBandsFill = "#33333333"),
              (this.isLightBackground = !0);
          }
        }
        t.SciChartJSLightTheme = o;
      },
      66010: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartJsNavyTheme = void 0);
        const r = i(62916),
          s = i(84392),
          o = i(2705);
        class a extends o.SciChartJSDarkv2Theme {
          constructor() {
            super(),
              (this.type = r.EThemeProviderType.Navy),
              (this.background1 = "#22365B"),
              (this.background2 = "#17243d"),
              (this.loadingBackground1 = "#21253D"),
              (this.loadingBackground2 = "#09090F"),
              (this.sciChartBackground = `radial-gradient(circle, ${this.background1} 0%, ${this.background2} 100%)`),
              (this.loadingAnimationBackground = `radial-gradient(circle, ${this.loadingBackground1} 0%, ${this.loadingBackground2} 100%)`),
              (this.loadingAnimationForeground = "#2A2F4C"),
              (this.axisBandsFill = "#52469503"),
              (this.majorGridLineBrush = "#191C6D77"),
              (this.minorGridLineBrush = "#2B2D7077"),
              (this.tickTextBrush = "#8398ba"),
              (this.strokePalette = [
                "#274b92",
                "#47bde6",
                "#ae418d",
                "#e97064",
                "#68bcae",
                "#634e96",
              ]),
              (this.fillPalette = [
                "#274b9288",
                "#47bde688",
                "#ae418d88",
                "#e9706488",
                "#68bcae88",
                "#634e9688",
              ]),
              (this.lineSeriesColor = s.AUTO_COLOR),
              (this.planeBorderColor = "#191C6D77"),
              (this.axisPlaneBackgroundFill = "TRANSPARENT"),
              (this.axis3DBandsFill = "#52469503"),
              (this.isLightBackground = !1);
          }
        }
        t.SciChartJsNavyTheme = a;
      },
      5102: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AdornerLayer = void 0),
          (t.AdornerLayer = class {
            constructor(e) {
              this.parentSurface = e;
            }
            selectAnnotation(e) {
              const t = this.parentSurface;
              let i;
              const r = (t) => {
                for (let r = t.length - 1; r >= 0; r--) {
                  const s = t[r];
                  s.click(e, !i && s.isEditable) && (i = s);
                }
              };
              return (
                r(t.annotations.asArray()),
                r(t.modifierAnnotations.asArray()),
                (this.selectedAnnotationProperty = i),
                !!i
              );
            }
            deselectAnnotation(e) {
              this.selectedAnnotationProperty === e &&
                (this.selectedAnnotationProperty = void 0);
            }
            get selectedAnnotation() {
              return this.selectedAnnotationProperty;
            }
            set selectedAnnotation(e) {
              this.selectedAnnotationProperty = e;
            }
            get isAnnotationSelected() {
              return !!this.selectedAnnotationProperty;
            }
          });
      },
      31306: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnnotationBase =
            t.ECoordinateMode =
            t.EDraggingGripPoint =
              void 0);
        const r = i(45921),
          s = i(55023),
          o = i(3214),
          a = i(23866),
          n = i(75772),
          l = i(11043),
          d = i(86699),
          h = i(73538),
          u = i(32873),
          c = i(42241),
          p = i(14184),
          g = i(86127),
          y = i(28792),
          f = i(78895),
          v = i(49641),
          m = i(91380),
          S = i(84736);
        var P, C;
        !(function (e) {
          (e.x1y1 = "x1y1"),
            (e.x2y2 = "x2y2"),
            (e.x2y1 = "x2y1"),
            (e.x1y2 = "x1y2"),
            (e.Body = "Body");
        })((P = t.EDraggingGripPoint || (t.EDraggingGripPoint = {}))),
          (function (e) {
            (e.DataValue = "DataValue"),
              (e.Pixel = "Pixel"),
              (e.Relative = "Relative");
          })((C = t.ECoordinateMode || (t.ECoordinateMode = {})));
        class x extends s.DeletableEntity {
          constructor(e) {
            var t,
              i,
              s,
              a,
              n,
              u,
              g,
              y,
              f,
              v,
              x,
              b,
              A,
              T,
              E,
              R,
              w,
              D,
              L,
              M,
              I,
              O;
            super(),
              (this.showWarning = !0),
              (this.prevIsSelected = !0),
              (this.annotationBorders = { x1: 0, x2: 0, y1: 0, y2: 0 }),
              (this.typeMap = new Map()),
              (this.isHiddenProperty = !1),
              (this.annotationsGripsStrokeProperty =
                p.SciChartSurfaceBase.DEFAULT_THEME.annotationsGripsBorderBrush),
              (this.annotationsGripsFillProperty =
                p.SciChartSurfaceBase.DEFAULT_THEME.annotationsGripsBackroundBrush),
              (this.annotationsGripsRadiusProperty = m.ADORNER_GRIP_RADIUS),
              (this.selectionBoxStrokeProperty =
                p.SciChartSurfaceBase.DEFAULT_THEME.annotationSelectionStroke),
              (this.selectionBoxDeltaProperty = 1.5),
              (this.selectionBoxThicknessProperty = 6),
              (this.dragPointsProperty = [
                P.Body,
                P.x1y1,
                P.x2y2,
                P.x2y1,
                P.x1y2,
              ]),
              (this.annotationLayerProperty = S.EAnnotationLayer.AboveChart),
              (this.isEditableProperty = !1),
              (this.xAxisIdProperty = c.AxisCore.DEFAULT_AXIS_ID),
              (this.yAxisIdProperty = c.AxisCore.DEFAULT_AXIS_ID),
              (this.xCoordinateModeProperty = C.DataValue),
              (this.yCoordinateModeProperty = C.DataValue),
              (this.isSelectedProperty = !1),
              (this.isHoveredProperty = !1),
              (this.resizeDirectionsProperty = d.EXyDirection.XyDirection),
              (this.id =
                null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                  ? t
                  : (0, h.generateGuid)()),
              (this.dragStarted = new o.EventHandler()),
              (this.dragEnded = new o.EventHandler()),
              (this.dragDelta = new o.EventHandler()),
              (this.selectedChanged = new o.EventHandler()),
              (this.clicked = new o.EventHandler()),
              (this.hovered = new o.EventHandler()),
              (this.annotationLayerProperty =
                null !== (i = null == e ? void 0 : e.annotationLayer) &&
                void 0 !== i
                  ? i
                  : this.annotationLayerProperty),
              (this.resizeDirectionsProperty =
                null !== (s = null == e ? void 0 : e.resizeDirections) &&
                void 0 !== s
                  ? s
                  : this.resizeDirectionsProperty),
              (this.isEditableProperty =
                null !== (a = null == e ? void 0 : e.isEditable) && void 0 !== a
                  ? a
                  : this.isEditableProperty),
              (this.isHiddenProperty =
                null !== (n = null == e ? void 0 : e.isHidden) && void 0 !== n
                  ? n
                  : this.isHiddenProperty),
              (this.x1Property =
                null !== (u = null == e ? void 0 : e.x1) && void 0 !== u
                  ? u
                  : this.x1Property),
              (this.y1Property =
                null !== (g = null == e ? void 0 : e.y1) && void 0 !== g
                  ? g
                  : this.y1Property),
              (this.x2Property =
                null !== (y = null == e ? void 0 : e.x2) && void 0 !== y
                  ? y
                  : this.x2Property),
              (this.y2Property =
                null !== (f = null == e ? void 0 : e.y2) && void 0 !== f
                  ? f
                  : this.y2Property),
              (this.xAxisIdProperty =
                null !== (v = null == e ? void 0 : e.xAxisId) && void 0 !== v
                  ? v
                  : this.xAxisIdProperty),
              (this.yAxisIdProperty =
                null !== (x = null == e ? void 0 : e.yAxisId) && void 0 !== x
                  ? x
                  : this.yAxisIdProperty),
              (this.xCoordinateModeProperty =
                null !== (b = null == e ? void 0 : e.xCoordinateMode) &&
                void 0 !== b
                  ? b
                  : this.xCoordinateModeProperty),
              (this.yCoordinateModeProperty =
                null !== (A = null == e ? void 0 : e.yCoordinateMode) &&
                void 0 !== A
                  ? A
                  : this.yCoordinateModeProperty),
              (this.isSelectedProperty =
                null !== (T = null == e ? void 0 : e.isSelected) && void 0 !== T
                  ? T
                  : this.isSelectedProperty),
              (this.opacityProperty =
                null !== (E = null == e ? void 0 : e.opacity) && void 0 !== E
                  ? E
                  : 1),
              (this.annotationsGripsStrokeProperty =
                null !== (R = null == e ? void 0 : e.annotationsGripsStroke) &&
                void 0 !== R
                  ? R
                  : this.annotationsGripsStrokeProperty),
              (this.annotationsGripsFillProperty =
                null !== (w = null == e ? void 0 : e.annotationsGripsFill) &&
                void 0 !== w
                  ? w
                  : this.annotationsGripsFillProperty),
              (this.annotationsGripsRadiusProperty =
                null !== (D = null == e ? void 0 : e.annotationsGripsRadius) &&
                void 0 !== D
                  ? D
                  : this.annotationsGripsRadius),
              (this.selectionBoxStroke =
                null !== (L = null == e ? void 0 : e.selectionBoxStroke) &&
                void 0 !== L
                  ? L
                  : this.selectionBoxStrokeProperty),
              (this.selectionBoxDelta =
                null !== (M = null == e ? void 0 : e.selectionBoxDelta) &&
                void 0 !== M
                  ? M
                  : this.selectionBoxDeltaProperty),
              (this.selectionBoxThickness =
                null !== (I = null == e ? void 0 : e.selectionBoxThickness) &&
                void 0 !== I
                  ? I
                  : this.selectionBoxThicknessProperty),
              (this.dragPointsProperty =
                null !== (O = null == e ? void 0 : e.dragPoints) && void 0 !== O
                  ? O
                  : this.dragPointsProperty),
              (null == e ? void 0 : e.onDragStarted) &&
                ("string" == typeof e.onDragStarted
                  ? (this.typeMap.set("onDragStarted", e.onDragStarted),
                    this.dragStarted.subscribe(
                      (0, r.getFunction)(
                        l.EBaseType.OptionFunction,
                        e.onDragStarted
                      )
                    ))
                  : this.dragStarted.subscribe(e.onDragStarted)),
              (null == e ? void 0 : e.onDragEnded) &&
                ("string" == typeof e.onDragEnded
                  ? (this.typeMap.set("onDragEnded", e.onDragEnded),
                    this.dragEnded.subscribe(
                      (0, r.getFunction)(
                        l.EBaseType.OptionFunction,
                        e.onDragEnded
                      )
                    ))
                  : this.dragEnded.subscribe(e.onDragEnded)),
              (null == e ? void 0 : e.onDrag) &&
                ("string" == typeof e.onDrag
                  ? (this.typeMap.set("onDrag", e.onDrag),
                    this.dragDelta.subscribe(
                      (0, r.getFunction)(l.EBaseType.OptionFunction, e.onDrag)
                    ))
                  : this.dragDelta.subscribe(e.onDrag)),
              (null == e ? void 0 : e.onClick) &&
                ("string" == typeof e.onClick
                  ? (this.typeMap.set("onClick", e.onClick),
                    this.clicked.subscribe(
                      (0, r.getFunction)(l.EBaseType.OptionFunction, e.onClick)
                    ))
                  : this.clicked.subscribe(e.onClick)),
              (null == e ? void 0 : e.onHover) &&
                ("string" == typeof e.onHover
                  ? (this.typeMap.set("onHover", e.onHover),
                    this.hovered.subscribe(
                      (0, r.getFunction)(l.EBaseType.OptionFunction, e.onHover)
                    ))
                  : this.hovered.subscribe(e.onHover));
          }
          get annotationLayer() {
            return this.annotationLayerProperty;
          }
          set annotationLayer(e) {
            this.annotationLayerProperty !== e &&
              ((this.annotationLayerProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.ANNOTATION_CANVAS));
          }
          get adornerDraggingPoint() {
            return this.adornerDraggingPointProperty;
          }
          set adornerDraggingPoint(e) {
            var t;
            this.adornerDraggingPointProperty !== e &&
              ((this.adornerDraggingPointProperty = e),
              e &&
                (null === (t = this.dragStarted) ||
                  void 0 === t ||
                  t.raiseEvent()));
          }
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          set parentSurface(e) {
            this.parentSurfaceProperty !== e &&
              ((this.parentSurfaceProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.PARENT_SURFACE));
          }
          get isEditable() {
            return this.isEditableProperty;
          }
          set isEditable(e) {
            this.isEditableProperty !== e &&
              ((this.isEditableProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.IS_EDITABLE));
          }
          get isHidden() {
            return this.isHiddenProperty;
          }
          set isHidden(e) {
            this.isHiddenProperty !== e &&
              ((this.isHiddenProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.IS_HIDDEN));
          }
          get xCoordinateMode() {
            return this.xCoordinateModeProperty;
          }
          set xCoordinateMode(e) {
            this.xCoordinateModeProperty !== e &&
              ((this.xCoordinateModeProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.X_COORDINATE_MODE));
          }
          get yCoordinateMode() {
            return this.yCoordinateModeProperty;
          }
          set yCoordinateMode(e) {
            this.yCoordinateModeProperty !== e &&
              ((this.yCoordinateModeProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.Y_COORDINATE_MODE));
          }
          get x1() {
            return this.x1Property;
          }
          set x1(e) {
            this.x1Property !== e &&
              ((this.x1Property = e),
              this.notifyPropertyChanged(m.PROPERTY.X1));
          }
          get x2() {
            return this.x2Property;
          }
          set x2(e) {
            this.x2Property !== e &&
              ((this.x2Property = e),
              this.notifyPropertyChanged(m.PROPERTY.X2));
          }
          get y1() {
            return this.y1Property;
          }
          set y1(e) {
            this.y1Property !== e &&
              ((this.y1Property = e),
              this.notifyPropertyChanged(m.PROPERTY.Y1));
          }
          get y2() {
            return this.y2Property;
          }
          set y2(e) {
            this.y2Property !== e &&
              ((this.y2Property = e),
              this.notifyPropertyChanged(m.PROPERTY.Y2));
          }
          get xAxisId() {
            return this.xAxisIdProperty;
          }
          set xAxisId(e) {
            this.xAxisIdProperty !== e &&
              ((this.xAxisIdProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.XAXIS_ID));
          }
          get yAxisId() {
            return this.yAxisIdProperty;
          }
          set yAxisId(e) {
            this.yAxisIdProperty !== e &&
              ((this.yAxisIdProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.YAXIS_ID));
          }
          get isVerticalChart() {
            const e = this.parentSurface.getXAxisById(this.xAxisId);
            return null == e ? void 0 : e.isVerticalChart;
          }
          set resizeDirections(e) {
            this.resizeDirectionsProperty !== e &&
              ((this.resizeDirectionsProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.RESIZE_DIRECTIONS));
          }
          get resizeDirections() {
            return this.resizeDirectionsProperty;
          }
          set isSelected(e) {
            this.isSelectedProperty !== e &&
              ((this.isSelectedProperty = e),
              this.selectedChanged.raiseEvent(this.isSelectedProperty),
              this.notifyPropertyChanged(m.PROPERTY.IS_SELECTED));
          }
          get isSelected() {
            return this.isSelectedProperty;
          }
          get isHovered() {
            return this.isHoveredProperty;
          }
          set isHovered(e) {
            this.isHoveredProperty !== e &&
              ((this.isHoveredProperty = e),
              this.hovered.raiseEvent(
                new v.AnnotationHoverEventArgs({
                  sender: this,
                  mouseArgs: void 0,
                  isHovered: e,
                })
              ),
              this.notifyPropertyChanged(m.PROPERTY.IS_HOVERED));
          }
          get annotationsGripsStroke() {
            return this.annotationsGripsStrokeProperty;
          }
          set annotationsGripsStroke(e) {
            this.annotationsGripsStrokeProperty !== e &&
              ((this.annotationsGripsStrokeProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.ADORNER_STROKE));
          }
          get annotationsGripsFill() {
            return this.annotationsGripsFillProperty;
          }
          set annotationsGripsFill(e) {
            this.annotationsGripsFillProperty !== e &&
              ((this.annotationsGripsFillProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.ADORNER_FILL));
          }
          get annotationsGripsRadius() {
            return this.annotationsGripsRadiusProperty;
          }
          set annotationsGripsRadius(e) {
            this.annotationsGripsRadiusProperty !== e &&
              ((this.annotationsGripsRadiusProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.ADORNER_RADIUS));
          }
          get selectionBoxStroke() {
            return this.selectionBoxStrokeProperty;
          }
          set selectionBoxStroke(e) {
            this.selectionBoxStrokeProperty !== e &&
              ((this.selectionBoxStrokeProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.SELECTION_STROKE));
          }
          get selectionBoxDelta() {
            return this.selectionBoxDeltaProperty;
          }
          set selectionBoxDelta(e) {
            this.selectionBoxDeltaProperty !== e &&
              ((this.selectionBoxDeltaProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.SELECTION_DELTA));
          }
          get selectionBoxThickness() {
            return this.selectionBoxThicknessProperty;
          }
          set selectionBoxThickness(e) {
            this.selectionBoxThicknessProperty !== e &&
              ((this.selectionBoxThicknessProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.SELECTION_DELTA));
          }
          get isDraggingStarted() {
            return !!this.adornerDraggingPoint;
          }
          get opacity() {
            return this.opacityProperty;
          }
          set opacity(e) {
            this.opacityProperty !== e &&
              ((this.opacityProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.OPACITY));
          }
          get svgAdornerRoot() {
            return this.svgAdornerRootProperty;
          }
          onAttach(e) {
            (this.svgAdornerRootProperty = e.domSvgAdornerLayer),
              this.isSelected &&
                (this.parentSurface.adornerLayer.selectedAnnotation = this);
          }
          onDetach() {
            this.isSelected &&
              ((this.isSelected = !1),
              this.parentSurface.adornerLayer.deselectAnnotation(this)),
              this.isHovered && (this.isHovered = !1),
              this.selectedChanged.unsubscribeAll(),
              this.deleteAdorner(),
              (this.svgAdornerRootProperty = void 0);
          }
          get dragPoints() {
            return this.dragPointsProperty;
          }
          set dragPoints(e) {
            (this.dragPointsProperty = e),
              this.notifyPropertyChanged(m.PROPERTY.DRAGPOINTS);
          }
          checkIsWithinBounds(e) {
            const t = (0, u.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect,
              !0
            );
            return !!t && this.checkIsClickedOnAnnotationInternal(t.x, t.y);
          }
          hover(e) {
            const { args: t, notifyPositionUpdate: i, notifyOutEvent: r } = e,
              s =
                void 0 !== e.isHovered
                  ? e.isHovered
                  : this.checkIsWithinBounds(t),
              o = this.isHovered;
            (this.isHoveredProperty = s),
              ((s && !o) || (o && !s && r) || (s && o && i)) &&
                this.hovered.raiseEvent(
                  new v.AnnotationHoverEventArgs({
                    sender: this,
                    mouseArgs: t,
                    isHovered: s,
                  })
                ),
              s !== o && this.notifyPropertyChanged(m.PROPERTY.IS_HOVERED);
          }
          click(e, t) {
            const i = (0, u.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect,
              !0
            );
            if (!i) return !1;
            if (this.checkIsClickedOnAnnotationInternal(i.x, i.y)) {
              const i = this.getAdornerAnnotationBorders(!0),
                r = e.mousePoint.x / g.DpiHelper.PIXEL_RATIO,
                s = e.mousePoint.y / g.DpiHelper.PIXEL_RATIO,
                o = new n.Point(r - i.x1, s - i.y1);
              return (
                (this.isSelected = t),
                this.clicked.raiseEvent(
                  new y.AnnotationClickEventArgs(this, e, o)
                ),
                this.isSelected
              );
            }
            return (this.isSelected = !1), this.isSelected;
          }
          clickToSelect(e) {
            const t = (0, u.translateFromCanvasToSeriesViewRect)(
              e.mousePoint,
              this.parentSurface.seriesViewRect,
              !0
            );
            return (
              !!t &&
              ((this.isSelected = this.checkIsClickedOnAnnotationInternal(
                t.x,
                t.y
              )),
              this.isSelected)
            );
          }
          calcDragDistance(e) {}
          onDragStarted(e) {
            return !1;
          }
          checkIsClickedOnAnnotation(e, t) {
            const i = (0, u.translateFromCanvasToSeriesViewRect)(
              new n.Point(
                e * g.DpiHelper.PIXEL_RATIO,
                t * g.DpiHelper.PIXEL_RATIO
              ),
              this.parentSurface.seriesViewRect,
              !0
            );
            return !!i && this.checkIsClickedOnAnnotationInternal(i.x, i.y);
          }
          onDragAdorner(e) {
            const t = this.getValuesFromCoordinates(e.mousePoint, !0);
            t && this.calcDragDistance(t),
              this.dragDelta.raiseEvent(new f.AnnotationDragDeltaEventArgs());
          }
          onDragEnded() {
            var e;
            null === (e = this.dragEnded) || void 0 === e || e.raiseEvent(),
              (this.adornerDraggingPoint = void 0),
              (this.prevValue = void 0);
          }
          onDpiChanged(e) {}
          suspendInvalidate() {
            this.invalidateState = {
              isHidden: this.isHidden,
              x1: this.x1,
              y1: this.y1,
            };
          }
          resumeInvalidate() {
            this.invalidateState &&
              ((this.isHidden === this.invalidateState.isHidden &&
                this.x1 === this.invalidateState.x1 &&
                this.y1 === this.invalidateState.y1) ||
                (this.invalidateParentCallback &&
                  this.invalidateParentCallback()),
              (this.invalidateState = void 0));
          }
          toJSON() {
            const e = {
              id: this.id,
              annotationLayer: this.annotationLayer,
              isEditable: this.isEditable,
              isHidden: this.isHidden,
              isSelected: this.isSelected,
              onDrag: this.typeMap.get("onDrag"),
              onDragEnded: this.typeMap.get("onDragEnded"),
              onDragStarted: this.typeMap.get("onDragStarted"),
              onClick: this.typeMap.get("onClick"),
              onHover: this.typeMap.get("onHover"),
              opacity: this.opacity,
              resizeDirections: this.resizeDirections,
              x1: this.x1Property,
              x2: this.x2Property,
              y1: this.y1Property,
              y2: this.y2Property,
              xAxisId: this.xAxisId,
              yAxisId: this.yAxisId,
              xCoordinateMode: this.xCoordinateMode,
              yCoordinateMode: this.yCoordinateMode,
              annotationsGripsStroke: this.annotationsGripsStroke,
              annotationsGripsFill: this.annotationsGripsFill,
              annotationsGripsRadius: this.annotationsGripsRadius,
              selectionBoxStroke: this.selectionBoxStroke,
              selectionBoxDelta: this.selectionBoxDelta,
              selectionBoxThickness: this.selectionBoxThickness,
              dragPoints: this.dragPointsProperty,
            };
            return { type: this.type, options: e };
          }
          getAnnotationBorders(e = !1, t = !1) {
            if (!e && !t) return this.annotationBorders;
            let { x1: i, x2: r, y1: s, y2: o } = this.annotationBorders;
            const a = t ? this.selectionBoxDelta : 0;
            return (
              e
                ? (r < i ? ([i, r] = [r - a, i + a]) : ((i -= a), (r += a)),
                  o < s ? ([s, o] = [o - a, s + a]) : ((s -= a), (o += a)))
                : (r < i ? ((i += a), (r -= a)) : ((i -= a), (r += a)),
                  o < s ? ((s += a), (o -= a)) : ((s -= a), (o += a))),
              { x1: i, x2: r, y1: s, y2: o }
            );
          }
          getAdornerAnnotationBorders(e = !1, t = !1) {
            const i = this.getAnnotationBorders(e, t),
              r = this.isSvgAnnotation ? i.x1 * g.DpiHelper.PIXEL_RATIO : i.x1,
              s = this.isSvgAnnotation ? i.x2 * g.DpiHelper.PIXEL_RATIO : i.x2,
              o = this.isSvgAnnotation ? i.y1 * g.DpiHelper.PIXEL_RATIO : i.y1,
              a = this.isSvgAnnotation ? i.y2 * g.DpiHelper.PIXEL_RATIO : i.y2,
              l = (0, u.translateFromSeriesViewRectToCanvas)(
                new n.Point(r, o),
                this.parentSurface.seriesViewRect,
                !0
              ),
              d = (0, u.translateFromSeriesViewRectToCanvas)(
                new n.Point(s, a),
                this.parentSurface.seriesViewRect,
                !0
              );
            return {
              x1: l.x / g.DpiHelper.PIXEL_RATIO,
              x2: d.x / g.DpiHelper.PIXEL_RATIO,
              y1: l.y / g.DpiHelper.PIXEL_RATIO,
              y2: d.y / g.DpiHelper.PIXEL_RATIO,
            };
          }
          getAnnotationGripSvg(e, t) {
            return `<circle cx="${e}" cy="${t}" r="${this.annotationsGripsRadius}" fill="${this.annotationsGripsFill}" stroke="${this.annotationsGripsStroke}"/>`;
          }
          canDragPoint(e) {
            return this.dragPointsProperty.includes(e);
          }
          svgStringAdornerTemplate(e, t, i, r) {
            return '<svg xmlns="http://www.w3.org/2000/svg"></svg>';
          }
          notifyPropertyChanged(e) {
            this.invalidateParentCallback &&
              !this.invalidateState &&
              this.invalidateParentCallback();
          }
          getCoordinate(e, t, i) {
            if (
              (a.Guard.notNull(i, "coordinateMode"),
              a.Guard.notNull(t, "calculator"),
              void 0 !== e)
            )
              switch (i) {
                case C.Pixel:
                  return this.isSvgAnnotation ? e : e * g.DpiHelper.PIXEL_RATIO;
                case C.DataValue: {
                  const i = null != e ? t.getCoordinate(e) : void 0;
                  return this.isSvgAnnotation ? i / g.DpiHelper.PIXEL_RATIO : i;
                }
                case C.Relative:
                  return this.isSvgAnnotation
                    ? (e * t.viewportDimension + t.offset) /
                        g.DpiHelper.PIXEL_RATIO
                    : e * t.viewportDimension + t.offset;
                default:
                  throw new Error(
                    `AnnotationBase.getCoordinate with CoordinateMode.${i} is not implemented`
                  );
              }
          }
          getX1Coordinate(e, t) {
            var i, r;
            return this.isVerticalChart
              ? this.getCoordinate(
                  null !== (i = this.y1) && void 0 !== i ? i : 0,
                  t,
                  this.yCoordinateMode
                )
              : this.getCoordinate(
                  null !== (r = this.x1) && void 0 !== r ? r : 0,
                  e,
                  this.xCoordinateMode
                );
          }
          getX2Coordinate(e, t) {
            var i, r;
            return this.isVerticalChart
              ? this.getCoordinate(
                  null !== (i = this.y2) && void 0 !== i ? i : 0,
                  t,
                  this.yCoordinateMode
                )
              : this.getCoordinate(
                  null !== (r = this.x2) && void 0 !== r ? r : 0,
                  e,
                  this.xCoordinateMode
                );
          }
          getY1Coordinate(e, t) {
            var i, r;
            return this.isVerticalChart
              ? this.getCoordinate(
                  null !== (i = this.x1) && void 0 !== i ? i : 0,
                  e,
                  this.xCoordinateMode
                )
              : this.getCoordinate(
                  null !== (r = this.y1) && void 0 !== r ? r : 0,
                  t,
                  this.yCoordinateMode
                );
          }
          getY2Coordinate(e, t) {
            var i, r;
            return this.isVerticalChart
              ? this.getCoordinate(
                  null !== (i = this.x2) && void 0 !== i ? i : 0,
                  e,
                  this.xCoordinateMode
                )
              : this.getCoordinate(
                  null !== (r = this.y2) && void 0 !== r ? r : 0,
                  t,
                  this.yCoordinateMode
                );
          }
          getValue(e, t, i) {
            switch (i) {
              case C.Pixel:
                return this.isSvgAnnotation
                  ? t.getDataValue(e * g.DpiHelper.PIXEL_RATIO)
                  : t.getDataValue(e);
              case C.DataValue:
                return e;
              case C.Relative:
                return (t.visibleMax - t.visibleMin) * e + t.visibleMin;
              default:
                throw new Error("Not implemented");
            }
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            return !1;
          }
          deleteAdorner() {
            this.svgAdorner &&
              this.parentSurface &&
              !this.parentSurface.isDeleted &&
              (this.svgAdornerRoot.removeChild(this.svgAdorner),
              (this.svgAdorner = void 0));
          }
          getValuesFromCoordinates(e, t) {
            const i = this.parentSurface.seriesViewRect,
              r = t ? (0, u.translateFromCanvasToSeriesViewRect)(e, i, !0) : e;
            if (!r) return;
            const s = this.parentSurface.getXAxisById(this.xAxisId),
              o = s.getCurrentCoordinateCalculator(),
              a = this.parentSurface.getYAxisById(this.yAxisId),
              l = a.getCurrentCoordinateCalculator(),
              d = this.convertFromCoordinate(
                s.isHorizontalAxis ? r.x : r.y,
                o,
                this.xCoordinateMode
              ),
              h = this.convertFromCoordinate(
                a.isHorizontalAxis ? r.x : r.y,
                l,
                this.yCoordinateMode
              );
            return new n.Point(d, h);
          }
          getXYCoordinatesFromValues(e) {
            const t = this.parentSurface.seriesViewRect,
              i = this.getAbsoluteCoordinates(e),
              r = (0, u.translateFromSeriesViewRectToCanvas)(i, t, !0);
            if (r) return new n.Point(r.x, r.y);
          }
          convertFromCoordinate(e, t, i) {
            switch (i) {
              case C.Pixel:
                return e / g.DpiHelper.PIXEL_RATIO;
              case C.DataValue:
                return null != e ? t.getDataValue(e) : void 0;
              case C.Relative:
                return (e - t.offset) / t.viewportDimension;
              default:
                throw new Error("Not implemented");
            }
          }
          getAbsoluteCoordinates(e) {
            const t = this.parentSurface
                .getXAxisById(this.xAxisId)
                .getCurrentCoordinateCalculator(),
              i = this.parentSurface
                .getYAxisById(this.yAxisId)
                .getCurrentCoordinateCalculator(),
              r = this.getCoordinate(e.x, t, this.xCoordinateMode),
              s = this.getCoordinate(e.y, i, this.yCoordinateMode);
            return this.isVerticalChart ? new n.Point(s, r) : new n.Point(r, s);
          }
          getAbsoluteHorizontalCoordinate(e) {
            const t = this.parentSurface
                .getXAxisById(this.xAxisId)
                .getCurrentCoordinateCalculator(),
              i = this.parentSurface
                .getYAxisById(this.yAxisId)
                .getCurrentCoordinateCalculator();
            return this.isVerticalChart
              ? this.getCoordinate(e, i, this.yCoordinateMode)
              : this.getCoordinate(e, t, this.xCoordinateMode);
          }
          getAbsoluteVerticalCoordinate(e) {
            const t = this.parentSurface
                .getXAxisById(this.xAxisId)
                .getCurrentCoordinateCalculator(),
              i = this.parentSurface
                .getYAxisById(this.yAxisId)
                .getCurrentCoordinateCalculator();
            return this.isVerticalChart
              ? this.getCoordinate(e, t, this.xCoordinateMode)
              : this.getCoordinate(e, i, this.yCoordinateMode);
          }
          setAnnotationBorders(e, t, i, r) {
            this.annotationBorders = { x1: e, x2: t, y1: i, y2: r };
          }
        }
        t.AnnotationBase = x;
      },
      28792: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnnotationClickEventArgs = void 0),
          (t.AnnotationClickEventArgs = class {
            constructor(e, t, i) {
              (this.sender = e),
                (this.mouseArgs = t),
                (this.relativeCoords = i);
            }
          });
      },
      78895: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnnotationDragDeltaEventArgs = void 0),
          (t.AnnotationDragDeltaEventArgs = class {
            constructor() {}
          });
      },
      49641: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnnotationHoverEventArgs = void 0);
        const r = i(75772),
          s = i(86127);
        t.AnnotationHoverEventArgs = class {
          constructor(e) {
            const { sender: t, mouseArgs: i, isHovered: r } = e;
            (this.sender = t), (this.mouseArgs = i), (this.isHovered = r);
          }
          getRelativeCoordinates() {
            const e = this.sender.getAdornerAnnotationBorders(!0),
              t = this.mouseArgs.mousePoint.x / s.DpiHelper.PIXEL_RATIO,
              i = this.mouseArgs.mousePoint.y / s.DpiHelper.PIXEL_RATIO;
            return new r.Point(t - e.x1, i - e.y1);
          }
        };
      },
      29371: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisMarkerAnnotation = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(21670),
          a = i(32873),
          n = i(3441),
          l = i(86127),
          d = i(31306),
          h = i(92415),
          u = i(91380),
          c = i(84736),
          p = i(29530);
        class g extends p.RenderContextAnnotationBase {
          constructor(e) {
            var t, i, r, s, o, a, n, l, d, h, u;
            super(e),
              (this.type = c.EAnnotationType.RenderContextAxisMarkerAnnotation),
              (this.fontSizeProperty = 14),
              (this.fontFamilyProperty = "Arial"),
              (this.fontWeightProperty = "Normal"),
              (this.fontStyleProperty = "Normal"),
              (this.colorProperty = "#FFFFFF"),
              (this.backgroundColorProperty = "#b36200"),
              (this.fontSizeProperty =
                null !== (t = null == e ? void 0 : e.fontSize) && void 0 !== t
                  ? t
                  : this.fontSizeProperty),
              (this.fontFamilyProperty =
                null !== (i = null == e ? void 0 : e.fontFamily) && void 0 !== i
                  ? i
                  : this.fontFamilyProperty),
              (this.fontWeightProperty =
                null !== (r = null == e ? void 0 : e.fontWeight) && void 0 !== r
                  ? r
                  : this.fontWeightProperty),
              (this.fontStyleProperty =
                null !== (s = null == e ? void 0 : e.fontStyle) && void 0 !== s
                  ? s
                  : this.fontStyleProperty),
              (this.colorProperty =
                null !== (o = null == e ? void 0 : e.color) && void 0 !== o
                  ? o
                  : this.colorProperty),
              (this.paddingProperty =
                null !== (a = null == e ? void 0 : e.padding) && void 0 !== a
                  ? a
                  : this.paddingProperty),
              (this.backgroundColorProperty =
                null !== (n = null == e ? void 0 : e.backgroundColor) &&
                void 0 !== n
                  ? n
                  : this.backgroundColorProperty),
              (this.formattedValueProperty =
                null !== (l = null == e ? void 0 : e.formattedValue) &&
                void 0 !== l
                  ? l
                  : this.formattedValueProperty),
              (this.imageProperty =
                null !== (d = null == e ? void 0 : e.image) && void 0 !== d
                  ? d
                  : this.imageProperty),
              (this.imageWidthProperty =
                null !== (h = null == e ? void 0 : e.imageWidth) && void 0 !== h
                  ? h
                  : this.imageWidthProperty),
              (this.imageHeightProperty =
                null !== (u = null == e ? void 0 : e.imageHeight) &&
                void 0 !== u
                  ? u
                  : this.imageHeightProperty),
              (null == e ? void 0 : e.x1) && (this.x1 = e.x1),
              (null == e ? void 0 : e.x2) && (this.x2 = e.x2),
              (null == e ? void 0 : e.y2) && (this.y2 = e.y2);
          }
          delete() {}
          get y2() {
            throw Error(
              "y2 property is not supported for AxisMarkerAnnotation"
            );
          }
          set y2(e) {
            throw Error(
              "y2 property is not supported for AxisMarkerAnnotation"
            );
          }
          get x2() {
            throw Error(
              "x2 property is not supported for AxisMarkerAnnotation"
            );
          }
          set x2(e) {
            throw Error(
              "x2 property is not supported for AxisMarkerAnnotation"
            );
          }
          get backgroundColor() {
            return this.backgroundColorProperty;
          }
          set backgroundColor(e) {
            (this.backgroundColorProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.BACKGROUND_COLOR);
          }
          get color() {
            return this.colorProperty;
          }
          set color(e) {
            (this.colorProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.COLOR);
          }
          get fontSize() {
            return this.fontSizeProperty;
          }
          set fontSize(e) {
            (this.fontSizeProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.FONT_SIZE);
          }
          get fontFamily() {
            return this.fontFamilyProperty;
          }
          set fontFamily(e) {
            (this.fontFamilyProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.FONT_FAMILY);
          }
          get fontWeight() {
            return this.fontWeightProperty;
          }
          set fontWeight(e) {
            (this.fontWeightProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.FONT_WEIGHT);
          }
          get fontStyle() {
            return this.fontStyleProperty;
          }
          set fontStyle(e) {
            (this.fontStyleProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.FONT_STYLE);
          }
          get padding() {
            return this.paddingProperty;
          }
          set padding(e) {
            (this.paddingProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.PADDING);
          }
          get formattedValue() {
            return this.formattedValueProperty;
          }
          set formattedValue(e) {
            (this.formattedValueProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.FORMATTED_VALUE);
          }
          get image() {
            return this.imageProperty;
          }
          set image(e) {
            (this.imageProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.IMAGE);
          }
          get imageWidth() {
            return this.imageWidthProperty;
          }
          set imageWidth(e) {
            (this.imageWidthProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.IMAGE_WIDTH);
          }
          get imageHeight() {
            return this.imageHeightProperty;
          }
          set imageHeight(e) {
            (this.imageHeightProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.IMAGE_HEIGHT);
          }
          drawWithContext(e, t, i, o) {
            r.Guard.notNull(e, "renderContext"),
              r.Guard.notNull(t, "xCalc"),
              r.Guard.notNull(i, "yCalc");
            const d = this.getX1Coordinate(t, i),
              h = this.getY1Coordinate(t, i),
              u = null == this.x1,
              c = u ? this.y1 : this.x1;
            r.Guard.argumentIsRealNumber(c, "x1 or y1");
            const p = this.xAxisId,
              g = this.parentSurface.getXAxisById(p),
              y = this.yAxisId,
              f = this.parentSurface.getYAxisById(y),
              v = u ? f : g;
            if (!v || !1 === v.isVisible) return;
            const m = u ? this.yCoordinateMode : this.xCoordinateMode,
              S = u ? i : t,
              P = this.getCoordinate(c, S, m);
            if (
              v.isHorizontalAxis
                ? P >= 0 && P <= v.parentSurface.seriesViewRect.width
                : P >= 0 && P <= v.parentSurface.seriesViewRect.height
            ) {
              const t = {
                  fontFamily: this.fontFamilyProperty,
                  fontSize: this.fontSizeProperty * l.DpiHelper.PIXEL_RATIO,
                  fontStyle: this.fontStyleProperty,
                  color: this.colorProperty,
                },
                i = (0, n.drawAxisMarkerAnnotation)(
                  v,
                  e,
                  this.formattedValueProperty,
                  P,
                  d,
                  h,
                  t,
                  this.backgroundColorProperty,
                  this.opacity,
                  this.image,
                  this.imageWidth,
                  this.imageHeight
                ),
                r = (0, a.translateFromCanvasToSeriesViewRect)(
                  new s.Point(i.xPosition, i.yPosition),
                  o,
                  !0
                ),
                u = (0, a.translateFromCanvasToSeriesViewRect)(
                  new s.Point(
                    i.xPosition + i.textureWidth,
                    i.yPosition + i.textureHeight
                  ),
                  o,
                  !0
                );
              this.setAnnotationBorders(r.x, u.x, r.y, u.y),
                this.updateAdornerInner();
            } else this.deleteAdorner();
          }
          onDragStarted(e) {
            super.onDragStarted(e);
            const { x: t, y: i } = this.calculateAdornerCenter(),
              r = (0, a.translateFromCanvasToSeriesViewRect)(
                new s.Point(e.mousePoint.x, e.mousePoint.y),
                this.parentSurface.seriesViewRect,
                !0
              ),
              n = (0, a.translateFromCanvasToSeriesViewRect)(
                new s.Point(
                  t * l.DpiHelper.PIXEL_RATIO,
                  i * l.DpiHelper.PIXEL_RATIO
                ),
                this.parentSurface.seriesViewRect,
                !0
              );
            if (r) {
              if (
                n &&
                (0, o.calcDistance)(n.x, n.y, r.x, r.y) <
                  this.annotationsGripsRadius * l.DpiHelper.PIXEL_RATIO
              )
                return (
                  (this.adornerDraggingPoint = d.EDraggingGripPoint.x1y1), !0
                );
              if (this.clickToSelect(e))
                return (
                  (this.adornerDraggingPoint = d.EDraggingGripPoint.Body), !0
                );
            }
            return !1;
          }
          calcDragDistance(e) {
            this.prevValue
              ? (void 0 !== this.x1
                  ? (this.x1 -= this.prevValue.x - e.x)
                  : void 0 !== this.y1 && (this.y1 -= this.prevValue.y - e.y),
                (this.prevValue = e))
              : (this.prevValue = e);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                backgroundColor: this.backgroundColor,
                color: this.color,
                fontFamily: this.fontFamily,
                fontSize: this.fontSize,
                fontStyle: this.fontStyle,
                fontWeight: this.fontWeight,
                formattedValue: this.formattedValue,
                padding: this.padding,
              };
            return Object.assign(e.options, t), e;
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const {
              x1: i,
              x2: r,
              y1: s,
              y2: a,
            } = this.getAnnotationBorders(!0);
            return (0, o.testIsInBounds)(e, t, i, a, r, s);
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.isSelected)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(!0, !0),
                s = this.svgStringAdornerTemplate(e, i, t, r);
              this.svgAdorner = h.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          svgStringAdornerTemplate(e, t, i, r) {
            const s = this.selectionBoxStroke,
              { x: o, y: a } = this.calculateAdornerCenter();
            return `<svg xmlns="http://www.w3.org/2000/svg">\n        <rect x="${e}" y="${t}" width="${
              i - e
            }" height="${r - t}" stroke="${s}" stroke-width="${
              this.selectionBoxThickness
            }px" fill="none" />\n        ${this.getAnnotationGripSvg(
              o,
              a
            )}\n        </svg>`;
          }
          calculateAdornerCenter() {
            const {
              x1: e,
              x2: t,
              y1: i,
              y2: r,
            } = this.getAdornerAnnotationBorders();
            return { x: Math.abs((e + t) / 2), y: Math.abs((i + r) / 2) };
          }
        }
        t.AxisMarkerAnnotation = g;
      },
      89171: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BoxAnnotation = void 0);
        const r = i(84745),
          s = i(56744),
          o = i(23866),
          a = i(75772),
          n = i(87459),
          l = i(86699),
          d = i(21670),
          h = i(32873),
          u = i(51269),
          c = i(21915),
          p = i(86127),
          g = i(31306),
          y = i(92415),
          f = i(91380),
          v = i(84736),
          m = i(29530);
        class S extends m.RenderContextAnnotationBase {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type = v.EAnnotationType.RenderContextBoxAnnotation),
              (this.strokeThicknessProperty = 1),
              (this.stroke =
                null !== (t = null == e ? void 0 : e.stroke) && void 0 !== t
                  ? t
                  : "#ffffff"),
              (this.strokeThickness =
                null !== (i = null == e ? void 0 : e.strokeThickness) &&
                void 0 !== i
                  ? i
                  : 1),
              (this.fill =
                null !== (r = null == e ? void 0 : e.fill) && void 0 !== r
                  ? r
                  : "#777777");
          }
          get stroke() {
            return this.strokeProperty;
          }
          set stroke(e) {
            (this.strokeProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.STROKE);
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.STROKE_THICKNESS);
          }
          get fill() {
            return this.fillProperty;
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(f.PROPERTY.FILL);
          }
          delete() {
            (this.strokePenCache = (0, s.deleteSafe)(this.strokePenCache)),
              (this.fillBrushCache = (0, s.deleteSafe)(this.fillBrushCache)),
              (this.nativeDrawingProvider = (0, s.deleteSafe)(
                this.nativeDrawingProvider
              ));
          }
          drawWithContext(e, t, i, s) {
            o.Guard.notNull(e, "renderContext"),
              o.Guard.notNull(t, "xCalc"),
              o.Guard.notNull(i, "yCalc");
            const l =
              this.stroke && this.strokeThickness
                ? (0, c.getWebGlPenFromCache)(this.strokePenCache)
                : void 0;
            null == l || l.setOpacity(this.opacity);
            const d = this.fill
              ? (0, u.getWebGlBrushFromCache)(this.fillBrushCache)
              : void 0;
            null == d || d.setOpacity(this.opacity);
            const h = this.getX1Coordinate(t, i),
              p = this.getX2Coordinate(t, i),
              g = this.getY1Coordinate(t, i),
              y = this.getY2Coordinate(t, i);
            this.setAnnotationBorders(h, p, g, y);
            const f = n.Rect.createWithPoints(
              new a.Point(h, g),
              new a.Point(p, y)
            );
            r.IS_TEST_ENV ||
              (this.strokeThickness > 3
                ? this.drawWithProvider(e, l.scrtPen, d.scrtBrush, t, i, f, s)
                : e.drawRect(f, s, l, d)),
              this.updateAdornerInner();
          }
          onAttach(e) {
            super.onAttach(e),
              (this.nativeDrawingProvider =
                new e.webAssemblyContext2D.SCRTColumnSeriesDrawingProvider()),
              this.strokePenCache ||
                (this.strokePenCache = new c.Pen2DCache(
                  e.webAssemblyContext2D
                )),
              (0, c.createPenInCache)(
                this.strokePenCache,
                this.stroke,
                this.strokeThickness,
                this.opacity
              ),
              this.fillBrushCache ||
                (this.fillBrushCache = new u.BrushCache(
                  e.webAssemblyContext2D
                )),
              (0, u.createBrushInCache)(
                this.fillBrushCache,
                this.fill,
                this.opacity
              );
          }
          onDragStarted(e) {
            super.onDragStarted(e);
            const {
                x1: t,
                x2: i,
                y1: r,
                y2: s,
              } = this.getAnnotationBorders(!1, !0),
              {
                x1y1: o,
                x2y1: n,
                x1y2: l,
                x2y2: u,
              } = y.annotationHelpers.calcNewApex(
                t,
                r,
                i,
                s,
                this.isVerticalChart
              ),
              c = (0, h.translateFromCanvasToSeriesViewRect)(
                new a.Point(e.mousePoint.x, e.mousePoint.y),
                this.parentSurface.seriesViewRect,
                !0
              );
            return o &&
              this.canDragPoint(g.EDraggingGripPoint.x1y1) &&
              (0, d.calcDistance)(o.x, o.y, c.x, c.y) <
                this.annotationsGripsRadius * p.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = g.EDraggingGripPoint.x1y1), !0)
              : n &&
                this.canDragPoint(g.EDraggingGripPoint.x2y1) &&
                (0, d.calcDistance)(n.x, n.y, c.x, c.y) <
                  this.annotationsGripsRadius * p.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = g.EDraggingGripPoint.x2y1), !0)
              : l &&
                this.canDragPoint(g.EDraggingGripPoint.x1y2) &&
                (0, d.calcDistance)(l.x, l.y, c.x, c.y) <
                  this.annotationsGripsRadius * p.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = g.EDraggingGripPoint.x1y2), !0)
              : u &&
                this.canDragPoint(g.EDraggingGripPoint.x2y2) &&
                (0, d.calcDistance)(u.x, u.y, c.x, c.y) <
                  this.annotationsGripsRadius * p.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = g.EDraggingGripPoint.x2y2), !0)
              : !!(
                  c &&
                  this.canDragPoint(g.EDraggingGripPoint.Body) &&
                  this.clickToSelect(e)
                ) &&
                ((this.adornerDraggingPoint = g.EDraggingGripPoint.Body), !0);
          }
          calcDragDistance(e) {
            this.prevValue
              ? (this.adornerDraggingPoint === g.EDraggingGripPoint.Body
                  ? ((this.x1 = this.x1 - (this.prevValue.x - e.x)),
                    (this.x2 = this.x2 - (this.prevValue.x - e.x)),
                    (this.y1 = this.y1 - (this.prevValue.y - e.y)),
                    (this.y2 = this.y2 - (this.prevValue.y - e.y)))
                  : this.adornerDraggingPoint === g.EDraggingGripPoint.x1y1
                  ? this.resizeDirections === l.EXyDirection.XDirection
                    ? (this.x1 -= this.prevValue.x - e.x)
                    : (this.resizeDirections === l.EXyDirection.YDirection ||
                        (this.x1 -= this.prevValue.x - e.x),
                      (this.y1 -= this.prevValue.y - e.y))
                  : this.adornerDraggingPoint === g.EDraggingGripPoint.x2y2
                  ? this.resizeDirections === l.EXyDirection.XDirection
                    ? (this.x2 -= this.prevValue.x - e.x)
                    : (this.resizeDirections === l.EXyDirection.YDirection ||
                        (this.x2 -= this.prevValue.x - e.x),
                      (this.y2 -= this.prevValue.y - e.y))
                  : this.adornerDraggingPoint === g.EDraggingGripPoint.x2y1
                  ? this.resizeDirections === l.EXyDirection.XDirection
                    ? (this.x2 -= this.prevValue.x - e.x)
                    : (this.resizeDirections === l.EXyDirection.YDirection ||
                        (this.x2 -= this.prevValue.x - e.x),
                      (this.y1 -= this.prevValue.y - e.y))
                  : this.adornerDraggingPoint === g.EDraggingGripPoint.x1y2 &&
                    (this.resizeDirections === l.EXyDirection.XDirection
                      ? (this.x1 -= this.prevValue.x - e.x)
                      : (this.resizeDirections === l.EXyDirection.YDirection ||
                          (this.x1 -= this.prevValue.x - e.x),
                        (this.y2 -= this.prevValue.y - e.y))),
                (this.prevValue = e))
              : (this.prevValue = e);
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.notifyPropertyChanged(f.PROPERTY.STROKE);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                fill: this.fill,
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
              };
            return Object.assign(e.options, t), e;
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const {
              x1: i,
              x2: r,
              y1: s,
              y2: o,
            } = this.getAnnotationBorders(!0);
            return (0, d.testIsInBounds)(e, t, i, o, r, s);
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e);
            const t = [
              f.PROPERTY.STROKE,
              f.PROPERTY.STROKE_THICKNESS,
              f.PROPERTY.STROKE_DASH_ARRAY,
              f.PROPERTY.OPACITY,
            ];
            this.strokePenCache &&
              t.includes(e) &&
              (0, c.createPenInCache)(
                this.strokePenCache,
                this.stroke,
                this.strokeThickness,
                this.opacity
              );
            const i = [f.PROPERTY.FILL, f.PROPERTY.OPACITY];
            this.fillBrushCache &&
              i.includes(e) &&
              (0, u.createBrushInCache)(
                this.fillBrushCache,
                this.fill,
                this.opacity
              );
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.isSelected)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(!0, !0),
                s = this.svgStringAdornerTemplate(e, i, t, r);
              this.svgAdorner = y.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          svgStringAdornerTemplate(e, t, i, r) {
            let s = `<svg xmlns="http://www.w3.org/2000/svg">\n        <rect x="${e}" y="${t}" width="${
              i - e
            }" height="${r - t}" stroke="${
              this.selectionBoxStroke
            }" stroke-width="${
              this.selectionBoxThickness
            }px" fill="none" />\n        `;
            const o = this.getAdornerAnnotationBorders(!1, !0);
            return (
              this.canDragPoint(g.EDraggingGripPoint.x1y1) &&
                (s += this.getAnnotationGripSvg(o.x1, o.y1)),
              this.canDragPoint(g.EDraggingGripPoint.x2y2) &&
                (s += this.getAnnotationGripSvg(o.x2, o.y2)),
              this.canDragPoint(g.EDraggingGripPoint.x2y1) &&
                (s += this.getAnnotationGripSvg(o.x2, o.y1)),
              this.canDragPoint(g.EDraggingGripPoint.x1y2) &&
                (s += this.getAnnotationGripSvg(o.x1, o.y2)),
              (s += "</svg>"),
              s
            );
          }
          drawWithProvider(e, t, i, r, s, o, a) {
            const n = this.parentSurface.webAssemblyContext2D,
              l = new n.SCRTColumnDrawingParams();
            (l.forceShaderMethod = !0),
              (l.verticalChart = this.isVerticalChart),
              (l.zeroLineY = this.isVerticalChart
                ? s.getDataValue(o.left)
                : s.getDataValue(o.bottom)),
              (l.columnWidth = this.isVerticalChart ? o.height : o.width),
              t && l.SetLinesPen(t),
              i && l.SetFillBrush(i),
              (l.viewportWidth = a.width),
              (l.viewportHeight = a.height);
            const d = this.isVerticalChart
                ? (o.top + o.bottom) / 2
                : (o.left + o.right) / 2,
              h = r.getDataValue(d),
              u = new n.SCRTDoubleVector();
            u.push_back(h);
            const c = this.isVerticalChart
                ? s.getDataValue(o.right)
                : s.getDataValue(o.top),
              p = new n.SCRTDoubleVector();
            p.push_back(c), (l.count = p.size());
            const g = e.getNativeContext();
            g.PushMatrix(),
              g.PushState(),
              g.Translate(a.x, a.y),
              g.SetClipRect(a.x, a.y, a.width, a.height),
              this.nativeDrawingProvider.DrawPointsVec(
                g,
                u,
                p,
                r.nativeCalculator,
                s.nativeCalculator,
                l
              ),
              g.PopMatrix(),
              g.PopState(),
              u.delete(),
              p.delete(),
              l.delete();
          }
        }
        t.BoxAnnotation = S;
      },
      64584: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CursorTooltipSvgAnnotation = void 0);
        const r = i(57935),
          s = i(92415),
          o = i(91380),
          a = i(84736),
          n = i(84690);
        class l extends n.SvgAnnotationBase {
          constructor(e) {
            var t, i, r, s, o, n, l, d, h;
            if (
              (super(e),
              (this.type = a.EAnnotationType.SVG),
              (this.seriesInfosProperty = []),
              (this.isHidden = !0),
              (this.titleProperty =
                null !== (t = null == e ? void 0 : e.title) && void 0 !== t
                  ? t
                  : this.titleProperty),
              (this.tooltipSvgTemplateProperty =
                null !== (i = null == e ? void 0 : e.tooltipSvgTemplate) &&
                void 0 !== i
                  ? i
                  : this.tooltipSvgTemplateProperty),
              (this.tooltipLegendTemplateProperty =
                null !== (r = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== r
                  ? r
                  : this.tooltipLegendTemplateProperty),
              (this.seriesInfosProperty =
                null !== (s = null == e ? void 0 : e.seriesInfos) &&
                void 0 !== s
                  ? s
                  : this.seriesInfosProperty),
              (this.containerBackgroundProperty =
                null !== (o = null == e ? void 0 : e.containerBackground) &&
                void 0 !== o
                  ? o
                  : this.containerBackgroundProperty),
              (this.textStrokeProperty =
                null !== (n = null == e ? void 0 : e.textStroke) && void 0 !== n
                  ? n
                  : this.textStrokeProperty),
              (this.tooltipLegendOffsetXProperty =
                null !== (l = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== l
                  ? l
                  : this.tooltipLegendOffsetXProperty),
              (this.tooltipLegendOffsetYProperty =
                null !== (d = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== d
                  ? d
                  : this.tooltipLegendOffsetYProperty),
              (this.cursorModifier = e.cursorModifier),
              (this.placementDivId =
                null !== (h = null == e ? void 0 : e.placementDivId) &&
                void 0 !== h
                  ? h
                  : this.placementDivId),
              this.placementDivId)
            ) {
              const e = document.querySelector(`[id='${this.placementDivId}']`);
              this.svgDivRoot = e;
            }
          }
          get seriesInfos() {
            return this.seriesInfosProperty;
          }
          set seriesInfos(e) {
            this.seriesInfosProperty &&
              e &&
              ((this.seriesInfosProperty = e),
              (e.length !== this.seriesInfosProperty.length ||
                this.seriesInfosProperty
                  .map((t) =>
                    t.equals(
                      e.find(
                        (e) => e.renderableSeries.id === t.renderableSeries.id
                      )
                    )
                  )
                  .some((e) => !1 === e)) &&
                this.notifyPropertyChanged(o.PROPERTY.SERIES_INFOS));
          }
          get title() {
            return this.titleProperty;
          }
          set title(e) {
            this.titleProperty !== e &&
              ((this.titleProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TITLE));
          }
          get tooltipSvgTemplate() {
            return this.tooltipSvgTemplateProperty;
          }
          set tooltipSvgTemplate(e) {
            (this.tooltipSvgTemplateProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_SVG_TEMPLATE);
          }
          get tooltipLegendTemplate() {
            return this.tooltipLegendTemplateProperty;
          }
          set tooltipLegendTemplate(e) {
            (this.tooltipLegendTemplateProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_LEGEND_TEMPLATE);
          }
          get containerBackground() {
            return this.containerBackgroundProperty;
          }
          set containerBackground(e) {
            this.containerBackgroundProperty !== e &&
              ((this.containerBackgroundProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.CONTAINER_BACKGROUND));
          }
          get tooltipLegendOffsetX() {
            return this.tooltipLegendOffsetXProperty;
          }
          set tooltipLegendOffsetX(e) {
            this.tooltipLegendOffsetXProperty !== e &&
              ((this.tooltipLegendOffsetXProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_LEGEND_OFFSET_X));
          }
          get tooltipLegendOffsetY() {
            return this.tooltipLegendOffsetYProperty;
          }
          set tooltipLegendOffsetY(e) {
            this.tooltipLegendOffsetYProperty !== e &&
              ((this.tooltipLegendOffsetYProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_LEGEND_OFFSET_Y));
          }
          get textStroke() {
            return this.textStrokeProperty;
          }
          set textStroke(e) {
            this.textStrokeProperty !== e &&
              ((this.textStrokeProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TEXT_STROKE));
          }
          update(e, t, i, s) {
            const o = this.cursorModifier.getMousePosition();
            (this.previousMousePosition === o &&
              o !== r.EMousePosition.SeriesArea) ||
              ((this.previousMousePosition =
                this.cursorModifier.getMousePosition()),
              this.svg && this.clear(),
              this.create(e, t, i, s),
              this.placementDivId
                ? this.updateExternalLegendTooltip()
                : (this.updateTooltip(i, s), this.updateLegendTooltip()));
          }
          clear() {
            this.parentSurface &&
              !this.parentSurface.isDeleted &&
              this.svg &&
              (this.placementDivId
                ? this.svgDivRoot.removeChild(this.svg)
                : this.svgRoot.removeChild(this.svg),
              this.setSvg(void 0),
              this.svgLegend &&
                (this.svgRoot.removeChild(this.svgLegend),
                (this.svgLegend = void 0)));
          }
          create(e, t, i, r) {
            if (!this.tooltipSvgTemplate)
              throw Error(
                "Please provide a tooltipSvgTemplate for CursorTooltipSvgAnnotation"
              );
            const o = this.tooltipSvgTemplate(this.seriesInfos, this);
            if (this.placementDivId) {
              const e = s.annotationHelpers.createSvg(o, this.svgDivRoot);
              this.setSvg(e);
            } else {
              const e = s.annotationHelpers.createSvg(
                o,
                this.svgRoot,
                this.nextSibling
              );
              this.setSvg(e);
            }
          }
          updateTooltip(e, t) {
            var i, r, s, o;
            const a = null !== (i = this.xCoordShift) && void 0 !== i ? i : 0,
              n = null !== (r = this.yCoordShift) && void 0 !== r ? r : 0;
            this.svg.style.display = this.isHidden ? "none" : "block";
            const l = a + (null !== (s = this.x1) && void 0 !== s ? s : 0) + e,
              d = n + (null !== (o = this.y1) && void 0 !== o ? o : 0) + t;
            isNaN(l) || isNaN(d)
              ? (this.svg.style.display = "none")
              : (this.setSvgAttribute("x", l), this.setSvgAttribute("y", d));
          }
          updateLegendTooltip() {
            if (this.tooltipLegendTemplate) {
              const e = this.seriesInfos
                ? this.tooltipLegendTemplate(this.seriesInfos, this)
                : "<svg></svg>";
              this.svgLegend && this.svgRoot.removeChild(this.svgLegend);
              const t = s.annotationHelpers.createSvg(e, this.svgRoot);
              (this.svgLegend = t),
                this.svgLegend.setAttribute(
                  "x",
                  this.tooltipLegendOffsetX.toString()
                ),
                this.svgLegend.setAttribute(
                  "y",
                  this.tooltipLegendOffsetY.toString()
                );
            }
          }
          updateExternalLegendTooltip() {
            if (this.tooltipLegendTemplate) {
              const e = this.seriesInfos
                ? this.tooltipLegendTemplate(this.seriesInfos, this)
                : "<svg style='display: none'></svg>";
              this.svgLegend && this.svgLegend.removeChild(this.svgLegend);
              const t = s.annotationHelpers.createSvg(e, this.svgRoot);
              this.svgLegend = t;
            }
          }
        }
        t.CursorTooltipSvgAnnotation = l;
      },
      48882: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CustomAnnotation = void 0);
        const r = i(92415),
          s = i(84736),
          o = i(84690);
        class a extends o.SvgAnnotationBase {
          constructor(e) {
            var t;
            super(e),
              (this.type = s.EAnnotationType.SVGCustomAnnotation),
              (this.isDirty = !0),
              (this.svgStringProperty =
                null !== (t = null == e ? void 0 : e.svgString) && void 0 !== t
                  ? t
                  : void 0);
          }
          get svgString() {
            return this.svgStringProperty;
          }
          set svgString(e) {
            this.svgStringProperty !== e &&
              ((this.isDirty = !0),
              (this.svgStringProperty = e),
              this.notifyPropertyChanged("svgString"));
          }
          getSvgString(e) {
            return e.svgString;
          }
          updateSvg(e, t) {
            return t;
          }
          toJSON() {
            const e = super.toJSON(),
              t = { svgString: this.svgString };
            return Object.assign(e.options, t), e;
          }
          create(e, t, i, s) {
            if (!this.svg || this.isEditable || this.isDirty) {
              if (
                this.isDirty ||
                !this.svg ||
                (this.svg &&
                  (this.isSelected ||
                    this.prevX1Coordinate !== this.getX1Coordinate(e, t) ||
                    this.prevY1Coordinate !== this.getY1Coordinate(e, t)))
              ) {
                (this.prevX1Coordinate = this.getX1Coordinate(e, t)),
                  (this.prevY1Coordinate = this.getY1Coordinate(e, t)),
                  this.svg && this.clear();
                let i = r.annotationHelpers.createSvg(
                  this.getSvgString(this),
                  this.svgRoot,
                  this.nextSibling
                );
                this.setSvg(this.updateSvg(this, i)),
                  this.calcAndSetAnnotationBorders(e, t),
                  this.updateAdornerInner(),
                  (this.prevIsSelected = this.isSelected),
                  (this.isDirty = !1);
              } else this.calcAndSetAnnotationBorders(e, t);
              this.prevIsSelected !== this.isSelected &&
                this.svg &&
                this.isEditable &&
                (this.updateAdornerInner(),
                (this.prevIsSelected = this.isSelected));
            } else this.calcAndSetAnnotationBorders(e, t);
          }
        }
        t.CustomAnnotation = a;
      },
      96696: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HorizontalLineAnnotation = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(87459),
          a = i(38215),
          n = i(21670),
          l = i(32873),
          d = i(21915),
          h = i(3441),
          u = i(86127),
          c = i(31306),
          p = i(84736),
          g = i(28677);
        class y extends g.LineAnnotation {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type =
                p.EAnnotationType.RenderContextHorizontalLineAnnotation),
              (this.dragOnLine = !0),
              (this.dragOnLabel = !0),
              (null == e ? void 0 : e.x2) && (this.x2 = e.x2),
              (null == e ? void 0 : e.y2) && (this.y2 = e.y2),
              (this.dragOnLine =
                null !== (t = null == e ? void 0 : e.dragOnLine) && void 0 !== t
                  ? t
                  : this.dragOnLine),
              (this.dragOnLabel =
                null !== (i = null == e ? void 0 : e.dragOnLabel) &&
                void 0 !== i
                  ? i
                  : this.dragOnLabel),
              (this.horizontalAlignment =
                null !== (r = null == e ? void 0 : e.horizontalAlignment) &&
                void 0 !== r
                  ? r
                  : this.horizontalAlignment);
          }
          get y2() {
            throw Error(
              "y2 property is not supported for HorizontalLineAnnotation"
            );
          }
          set y2(e) {
            throw Error(
              "y2 property is not supported for HorizontalLineAnnotation"
            );
          }
          get x2() {
            throw Error(
              "x2 property is not supported for HorizontalLineAnnotation"
            );
          }
          set x2(e) {
            throw Error(
              "x2 property is not supported for HorizontalLineAnnotation"
            );
          }
          drawWithContext(e, t, i, a) {
            r.Guard.notNull(e, "renderContext"),
              r.Guard.notNull(t, "xCalc"),
              r.Guard.notNull(i, "yCalc");
            const n =
                this.stroke && this.strokeThickness
                  ? (0, d.getWebGlPenFromCache)(this.strokePenCache)
                  : void 0,
              {
                annotationCoord: c,
                lineAnnotationEdgeCoord: p,
                horizontalAxis: g,
                verticalAxis: y,
                horizontalAxisCoordinateMode: f,
                verticalAxisCoordinateMode: v,
                horizontalCoordinateCalculator: m,
                verticalCoordinateCalculator: S,
                isAlignmentRight: P,
              } = this.getDrawConfig(t, i);
            if (!g || !y) return;
            let C = 0,
              x = a.width;
            P && ((C = a.width), (x = 0));
            const b = this.getValue(p, m, f),
              A = b || 0 === b;
            A && (x = x = this.getX1Coordinate(t, i));
            const T = this.getY1Coordinate(t, i),
              E = T;
            this.setAnnotationBorders(C, x, T, E);
            const R = this.getCoordinate(p, m, f),
              w = this.getCoordinate(c, S, v),
              D = w >= 0 && w <= y.parentSurface.seriesViewRect.height,
              L = P ? R <= g.parentSurface.seriesViewRect.width : R >= 0;
            if (D && (!A || L)) {
              const t = Object.assign(Object.assign({}, y.labelStyle), {
                  color: this.axisLabelStroke,
                  fontSize: this.axisFontSize * u.DpiHelper.PIXEL_RATIO,
                  fontFamily: this.axisFontFamily,
                }),
                i = (0, h.drawLineAnnotation)(
                  y,
                  e,
                  this.labelPlacement,
                  this.labelValue,
                  C,
                  x,
                  T,
                  E,
                  t,
                  this.axisLabelFill,
                  n,
                  a,
                  this.showLabel,
                  this.opacity,
                  this.horizontalAlignment
                );
              if (i) {
                const e = (0, l.translateFromCanvasToSeriesViewRect)(
                    new s.Point(i.left, i.top),
                    a,
                    !0
                  ),
                  t = (0, l.translateFromCanvasToSeriesViewRect)(
                    new s.Point(i.right, i.bottom),
                    a,
                    !0
                  );
                this.labelRect = o.Rect.createWithPoints(e, t);
              }
            }
            this.dragOnLine && this.updateAdornerInner();
          }
          onDragStarted(e) {
            return this.dragOnLine
              ? super.onDragStarted(e)
              : !!(
                  this.dragOnLabel &&
                  this.labelRect &&
                  this.clickToSelect(e)
                ) &&
                  ((this.adornerDraggingPoint = c.EDraggingGripPoint.Body), !0);
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            if (
              this.dragOnLine &&
              super.checkIsClickedOnAnnotationInternal(e, t)
            )
              return !0;
            if (this.dragOnLabel && this.labelRect) {
              const { left: i, top: r, right: s, bottom: o } = this.labelRect;
              if ((0, n.testIsInBounds)(e, t, i, o, s, r)) return !0;
            }
            return !1;
          }
          getDrawConfig(e, t) {
            const i = this.xAxisId,
              r = this.parentSurface.getXAxisById(i),
              s = this.yAxisId,
              o = this.parentSurface.getYAxisById(s),
              n = {
                annotationCoord: this.y1,
                lineAnnotationEdgeCoord: this.x1,
                horizontalAxis: r,
                verticalAxis: o,
                horizontalAxisCoordinateMode: this.xCoordinateMode,
                verticalAxisCoordinateMode: this.yCoordinateMode,
                horizontalCoordinateCalculator: e,
                verticalCoordinateCalculator: t,
                isAlignmentRight:
                  (null == o ? void 0 : o.axisAlignment) ===
                  a.EAxisAlignment.Right,
              },
              l = {
                annotationCoord: this.x1,
                lineAnnotationEdgeCoord: this.y1,
                horizontalAxis: o,
                verticalAxis: r,
                horizontalAxisCoordinateMode: this.yCoordinateMode,
                verticalAxisCoordinateMode: this.xCoordinateMode,
                horizontalCoordinateCalculator: t,
                verticalCoordinateCalculator: e,
                isAlignmentRight:
                  (null == r ? void 0 : r.axisAlignment) ===
                  a.EAxisAlignment.Right,
              };
            return this.isVerticalChart ? l : n;
          }
        }
        t.HorizontalLineAnnotation = y;
      },
      84736: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAnnotationType = t.EAnnotationLayer = void 0),
          ((r = t.EAnnotationLayer || (t.EAnnotationLayer = {})).AboveChart =
            "AboveChart"),
          (r.BelowChart = "BelowChart"),
          (r.Background = "Background"),
          ((i = t.EAnnotationType || (t.EAnnotationType = {})).SVG = "SVG"),
          (i.RenderContextBoxAnnotation = "RenderContextBoxAnnotation"),
          (i.RenderContextLineAnnotation = "RenderContextLineAnnotation"),
          (i.RenderContextHorizontalLineAnnotation =
            "RenderContextHorizontalLineAnnotation"),
          (i.RenderContextVerticalLineAnnotation =
            "RenderContextVerticalLineAnnotation"),
          (i.RenderContextAxisMarkerAnnotation =
            "RenderContextAxisMarkerAnnotation"),
          (i.RenderContextNativeTextAnnotation =
            "RenderContextNativeTextAnnotation"),
          (i.SVGTextAnnotation = "SVGTextAnnotation"),
          (i.SVGCustomAnnotation = "SVGCustomAnnotation");
      },
      28677: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LineAnnotation = void 0);
        const r = i(56744),
          s = i(23866),
          o = i(75772),
          a = i(11805),
          n = i(86699),
          l = i(21670),
          d = i(21915),
          h = i(3441),
          u = i(86127),
          c = i(31306),
          p = i(92415),
          g = i(91380),
          y = i(84736),
          f = i(29530);
        class v extends f.RenderContextAnnotationBase {
          constructor(e) {
            var t, i, r, s, o, n, l, d, h, u;
            super(e),
              (this.type = y.EAnnotationType.RenderContextLineAnnotation),
              (this.axisFontSizeProperty = 14),
              (this.axisFontFamilyProperty = "Arial"),
              (this.strokeThicknessProperty = 1),
              (this.strokeDashArrayProperty = []),
              (this.strokeProperty = "#FFFFFF"),
              (this.showLabelProperty = !1),
              (this.axisLabelStrokeProperty = "#ffffff"),
              (this.axisLabelFillProperty = "#b36200"),
              (this.labelPlacementProperty = a.ELabelPlacement.Auto),
              (this.labelValueProperty = ""),
              (this.stroke =
                null !== (t = null == e ? void 0 : e.stroke) && void 0 !== t
                  ? t
                  : this.strokeProperty),
              (this.strokeThickness =
                null !== (i = null == e ? void 0 : e.strokeThickness) &&
                void 0 !== i
                  ? i
                  : this.strokeThicknessProperty),
              (this.strokeDashArray =
                null !== (r = null == e ? void 0 : e.strokeDashArray) &&
                void 0 !== r
                  ? r
                  : this.strokeDashArrayProperty),
              (this.showLabelProperty =
                null !== (s = null == e ? void 0 : e.showLabel) && void 0 !== s
                  ? s
                  : this.showLabelProperty),
              (this.axisLabelStrokeProperty =
                null !== (o = null == e ? void 0 : e.axisLabelStroke) &&
                void 0 !== o
                  ? o
                  : this.axisLabelStrokeProperty),
              (this.axisLabelFillProperty =
                null !== (n = null == e ? void 0 : e.axisLabelFill) &&
                void 0 !== n
                  ? n
                  : this.axisLabelFillProperty),
              (this.axisFontSizeProperty =
                null !== (l = null == e ? void 0 : e.axisFontSize) &&
                void 0 !== l
                  ? l
                  : this.axisFontSizeProperty),
              (this.axisFontFamilyProperty =
                null !== (d = null == e ? void 0 : e.axisFontFamily) &&
                void 0 !== d
                  ? d
                  : this.axisFontFamilyProperty),
              (this.labelPlacementProperty =
                null !== (h = null == e ? void 0 : e.labelPlacement) &&
                void 0 !== h
                  ? h
                  : this.labelPlacementProperty),
              (this.labelValueProperty =
                null !== (u = null == e ? void 0 : e.labelValue) && void 0 !== u
                  ? u
                  : this.labelValueProperty);
          }
          get stroke() {
            return this.strokeProperty;
          }
          set stroke(e) {
            (this.strokeProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE);
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE_THICKNESS);
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE_DASH_ARRAY);
          }
          get showLabel() {
            return this.showLabelProperty;
          }
          set showLabel(e) {
            (this.showLabelProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.SHOW_LABEL);
          }
          get axisLabelStroke() {
            return this.axisLabelStrokeProperty;
          }
          set axisLabelStroke(e) {
            (this.axisLabelStrokeProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_LABELS_STROKE);
          }
          get axisLabelFill() {
            return this.axisLabelFillProperty;
          }
          set axisLabelFill(e) {
            (this.axisLabelFillProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_LABELS_FILL);
          }
          get axisFontSize() {
            return this.axisFontSizeProperty;
          }
          set axisFontSize(e) {
            (this.axisFontSizeProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_FONT_SIZE);
          }
          get axisFontFamily() {
            return this.axisFontFamilyProperty;
          }
          set axisFontFamily(e) {
            (this.axisFontFamilyProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_FONT_FAMILY);
          }
          get labelPlacement() {
            return this.labelPlacementProperty;
          }
          set labelPlacement(e) {
            (this.labelPlacementProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.LABEL_PLACEMENT);
          }
          get labelValue() {
            return this.labelValueProperty;
          }
          set labelValue(e) {
            (this.labelValueProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.LABEL_VALUE);
          }
          delete() {
            this.strokePenCache = (0, r.deleteSafe)(this.strokePenCache);
          }
          onAttach(e) {
            super.onAttach(e),
              this.strokePenCache ||
                (this.strokePenCache = new d.Pen2DCache(
                  e.webAssemblyContext2D
                )),
              (0, d.createPenInCache)(
                this.strokePenCache,
                this.stroke,
                this.strokeThickness,
                this.opacity,
                this.strokeDashArray
              );
          }
          drawWithContext(e, t, i, r) {
            s.Guard.notNull(e, "renderContext"),
              s.Guard.notNull(t, "xCalc"),
              s.Guard.notNull(i, "yCalc");
            const o =
                this.stroke && this.strokeThickness
                  ? (0, d.getWebGlPenFromCache)(this.strokePenCache)
                  : void 0,
              a = this.getX1Coordinate(t, i),
              n = this.getX2Coordinate(t, i),
              l = this.getY1Coordinate(t, i),
              u = this.getY2Coordinate(t, i);
            if (
              (this.setAnnotationBorders(a, n, l, u),
              o && e.drawLine(a, l, n, u, o, r),
              this.showLabel)
            ) {
              let t,
                i = [],
                r = [];
              a === n
                ? ((i = this.parentSurface.xAxes
                    .asArray()
                    .filter((e) => !e.isVerticalChart)),
                  (r = this.parentSurface.yAxes
                    .asArray()
                    .filter((e) => e.isVerticalChart)),
                  (t = a))
                : l === u &&
                  ((i = this.parentSurface.yAxes
                    .asArray()
                    .filter((e) => !e.isVerticalChart)),
                  (r = this.parentSurface.xAxes
                    .asArray()
                    .filter((e) => e.isVerticalChart)),
                  (t = l)),
                (i.length > 0 || r.length > 0) &&
                  i.forEach((i) => {
                    (!i.isStackedAxis ||
                      (i.offset < t && i.offset + i.getAxisSize() > t)) &&
                      (0, h.drawModifiersAxisLabel)(
                        i,
                        e,
                        t,
                        this.axisLabelFill,
                        this.axisLabelStroke
                      );
                  });
            }
            this.updateAdornerInner();
          }
          onDragStarted(e) {
            super.onDragStarted(e);
            const t = this.x1,
              i =
                this.type ===
                  y.EAnnotationType.RenderContextHorizontalLineAnnotation ||
                this.type ===
                  y.EAnnotationType.RenderContextVerticalLineAnnotation
                  ? this.x1
                  : this.x2,
              r = this.y1,
              s =
                this.type ===
                  y.EAnnotationType.RenderContextHorizontalLineAnnotation ||
                this.type ===
                  y.EAnnotationType.RenderContextVerticalLineAnnotation
                  ? this.y1
                  : this.y2,
              a = this.getXYCoordinatesFromValues(new o.Point(t, r)),
              n = this.getXYCoordinatesFromValues(new o.Point(i, s)),
              d = new o.Point(e.mousePoint.x, e.mousePoint.y);
            return a &&
              this.canDragPoint(c.EDraggingGripPoint.x1y1) &&
              (0, l.calcDistance)(a.x, a.y, e.mousePoint.x, e.mousePoint.y) <
                this.annotationsGripsRadius * u.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = c.EDraggingGripPoint.x1y1), !0)
              : n &&
                this.canDragPoint(c.EDraggingGripPoint.x2y2) &&
                (0, l.calcDistance)(n.x, n.y, e.mousePoint.x, e.mousePoint.y) <
                  this.annotationsGripsRadius * u.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = c.EDraggingGripPoint.x2y2), !0)
              : !!(
                  d &&
                  this.canDragPoint(c.EDraggingGripPoint.Body) &&
                  this.clickToSelect(e)
                ) &&
                ((this.adornerDraggingPoint = c.EDraggingGripPoint.Body), !0);
          }
          calcDragDistance(e) {
            if (!this.prevValue) return void (this.prevValue = e);
            const t = this.parentSurface.getYAxisById(
              this.yAxisId
            ).isVerticalChart;
            this.adornerDraggingPoint === c.EDraggingGripPoint.Body
              ? this.type ===
                y.EAnnotationType.RenderContextHorizontalLineAnnotation
                ? t
                  ? (this.x1 = this.x1 - (this.prevValue.x - e.x))
                  : (this.y1 = this.y1 - (this.prevValue.y - e.y))
                : this.type ===
                  y.EAnnotationType.RenderContextVerticalLineAnnotation
                ? t
                  ? (this.y1 = this.y1 - (this.prevValue.y - e.y))
                  : (this.x1 = this.x1 - (this.prevValue.x - e.x))
                : this.type === y.EAnnotationType.RenderContextLineAnnotation &&
                  ((this.x1 = this.x1 - (this.prevValue.x - e.x)),
                  (this.x2 = this.x2 - (this.prevValue.x - e.x)),
                  (this.y1 = this.y1 - (this.prevValue.y - e.y)),
                  (this.y2 = this.y2 - (this.prevValue.y - e.y)))
              : this.adornerDraggingPoint === c.EDraggingGripPoint.x1y1
              ? this.resizeDirections === n.EXyDirection.XDirection
                ? (this.x1 -= this.prevValue.x - e.x)
                : (this.resizeDirections === n.EXyDirection.YDirection ||
                    (this.x1 -= this.prevValue.x - e.x),
                  (this.y1 -= this.prevValue.y - e.y))
              : this.adornerDraggingPoint === c.EDraggingGripPoint.x2y2 &&
                (this.resizeDirections === n.EXyDirection.XDirection
                  ? (this.x2 -= this.prevValue.x - e.x)
                  : (this.resizeDirections === n.EXyDirection.YDirection ||
                      (this.x2 -= this.prevValue.x - e.x),
                    (this.y2 -= this.prevValue.y - e.y))),
              (this.prevValue = e);
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                axisFontFamily: this.axisFontFamily,
                axisFontSize: this.axisFontSize,
                axisLabelFill: this.axisLabelFill,
                axisLabelStroke: this.axisLabelStroke,
                labelPlacement: this.labelPlacement,
                labelValue: this.labelValue,
                showLabel: this.showLabel,
                stroke: this.stroke,
                strokeDashArray: this.strokeDashArray,
                strokeThickness: this.strokeThickness,
              };
            return Object.assign(e.options, t), e;
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const { x1: i, x2: r, y1: s, y2: o } = this.getAnnotationBorders();
            return (
              (0, l.calcDistanceFromLineSegment)(e, t, i, s, r, o) <=
              g.DISTANCE_TO_LINE * u.DpiHelper.PIXEL_RATIO
            );
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              [
                g.PROPERTY.STROKE,
                g.PROPERTY.STROKE_THICKNESS,
                g.PROPERTY.STROKE_DASH_ARRAY,
                g.PROPERTY.OPACITY,
              ].includes(e) &&
                this.strokePenCache &&
                (0, d.createPenInCache)(
                  this.strokePenCache,
                  this.stroke,
                  this.strokeThickness,
                  this.opacity,
                  this.strokeDashArray
                );
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.isSelected)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(),
                s = this.svgStringAdornerTemplate(e, i, t, r);
              this.svgAdorner = p.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          svgStringAdornerTemplate(e, t, i, r) {
            return `<svg xmlns="http://www.w3.org/2000/svg">\n    <line x1="${e}" y1="${t}" x2="${i}" y2="${r}" stroke="${
              this.selectionBoxStroke
            }" stroke-width="6" />\n    ${
              this.canDragPoint(c.EDraggingGripPoint.x1y1)
                ? this.getAnnotationGripSvg(e, t)
                : ""
            }\n    ${
              this.canDragPoint(c.EDraggingGripPoint.x2y2)
                ? this.getAnnotationGripSvg(i, r)
                : ""
            }\n    </svg>`;
          }
        }
        t.LineAnnotation = v;
      },
      74370: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NativeTextAnnotation = t.EWrapTo = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(60986),
          a = i(36420),
          n = i(86699),
          l = i(22950),
          d = i(48008),
          h = i(21670),
          u = i(87092),
          c = i(32873),
          p = i(98353),
          g = i(86127),
          y = i(31306),
          f = i(92415),
          v = i(91380),
          m = i(84736),
          S = i(29530);
        var P;
        !(function (e) {
          (e.ViewRect = "ViewRect"), (e.Annotation = "Annotation");
        })((P = t.EWrapTo || (t.EWrapTo = {})));
        class C extends S.RenderContextAnnotationBase {
          constructor(e) {
            var t, i, r, s, n, l, d, h, u, c, p, g;
            super(e),
              (this.type = m.EAnnotationType.RenderContextNativeTextAnnotation),
              (this.scaleOnResize = !1),
              (this.fontSizeProperty = 14),
              (this.fontFamilyProperty = "Arial"),
              (this.textColorProperty = "#ffffff"),
              (this.rotationProperty = 0),
              (this.textProperty = ""),
              (this.verticalAnchorPointProperty = o.EVerticalAnchorPoint.Top),
              (this.horizontalAnchorPointProperty =
                o.EHorizontalAnchorPoint.Left),
              (this.multiLineAlignmentProperty = a.EMultiLineAlignment.Center),
              (this.lineSpacingProperty = 3),
              (this.scaleProperty = 1),
              (this.textColorProperty =
                null !== (t = null == e ? void 0 : e.textColor) && void 0 !== t
                  ? t
                  : this.textColorProperty),
              (this.fontSizeProperty =
                null !== (i = null == e ? void 0 : e.fontSize) && void 0 !== i
                  ? i
                  : this.fontSizeProperty),
              (this.fontFamilyProperty =
                null !== (r = null == e ? void 0 : e.fontFamily) && void 0 !== r
                  ? r
                  : this.fontFamilyProperty),
              (this.rotationProperty =
                null !== (s = null == e ? void 0 : e.rotation) && void 0 !== s
                  ? s
                  : this.rotationProperty),
              (this.textProperty =
                null !== (n = null == e ? void 0 : e.text) && void 0 !== n
                  ? n
                  : this.textProperty),
              (this.verticalAnchorPointProperty =
                null !== (l = null == e ? void 0 : e.verticalAnchorPoint) &&
                void 0 !== l
                  ? l
                  : this.verticalAnchorPointProperty),
              (this.horizontalAnchorPointProperty =
                null !== (d = null == e ? void 0 : e.horizontalAnchorPoint) &&
                void 0 !== d
                  ? d
                  : this.horizontalAnchorPointProperty),
              (this.multiLineAlignmentProperty =
                null !== (h = null == e ? void 0 : e.multiLineAlignment) &&
                void 0 !== h
                  ? h
                  : this.multiLineAlignmentProperty),
              (this.wrapToProperty =
                null !== (u = null == e ? void 0 : e.wrapTo) && void 0 !== u
                  ? u
                  : this.wrapToProperty),
              (this.lineSpacingProperty =
                null !== (c = null == e ? void 0 : e.lineSpacing) &&
                void 0 !== c
                  ? c
                  : this.lineSpacingProperty),
              (this.scaleProperty =
                null !== (p = null == e ? void 0 : e.scale) && void 0 !== p
                  ? p
                  : this.scaleProperty),
              (this.initialWidth = Math.abs(this.x2 - this.x1)),
              (this.scaleOnResize =
                null !== (g = null == e ? void 0 : e.scaleOnResize) &&
                void 0 !== g
                  ? g
                  : this.scaleOnResize);
          }
          get textColor() {
            return this.textColorProperty;
          }
          set textColor(e) {
            (this.textColorProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.COLOR);
          }
          get fontSize() {
            return this.fontSizeProperty;
          }
          set fontSize(e) {
            (this.fontSizeProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.AXIS_FONT_SIZE);
          }
          get fontFamily() {
            return this.fontFamilyProperty;
          }
          set fontFamily(e) {
            (this.fontFamilyProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.AXIS_FONT_FAMILY);
          }
          get rotation() {
            return this.rotationProperty;
          }
          set rotation(e) {
            (this.rotationProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.ROTATION);
          }
          get text() {
            return this.textProperty;
          }
          set text(e) {
            (this.textProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.TEXT);
          }
          get verticalAnchorPoint() {
            return this.verticalAnchorPointProperty;
          }
          set verticalAnchorPoint(e) {
            this.verticalAnchorPointProperty !== e &&
              ((this.verticalAnchorPointProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.VERTICAL_ANCHOR_POINT));
          }
          get horizontalAnchorPoint() {
            return this.horizontalAnchorPointProperty;
          }
          set horizontalAnchorPoint(e) {
            this.horizontalAnchorPointProperty !== e &&
              ((this.horizontalAnchorPointProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.HORIZONTAL_ANCHOR_POINT));
          }
          get multiLineAlignment() {
            return this.multiLineAlignmentProperty;
          }
          set multiLineAlignment(e) {
            this.multiLineAlignmentProperty !== e &&
              ((this.multiLineAlignmentProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.MULTILINE_ALIGNMENT));
          }
          get wrapTo() {
            return this.wrapToProperty;
          }
          set wrapTo(e) {
            this.wrapToProperty !== e &&
              ((this.wrapToProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.WRAP_TO));
          }
          get lineSpacing() {
            return this.lineSpacingProperty;
          }
          set lineSpacing(e) {
            (this.lineSpacingProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.LINE_SPACING);
          }
          get scale() {
            return this.scaleProperty;
          }
          set scale(e) {
            e !== this.scaleProperty &&
              ((this.scaleProperty = e),
              this.notifyPropertyChanged(v.PROPERTY.SCALE));
          }
          delete() {}
          onAttach(e) {
            super.onAttach(e);
          }
          getRotationCenter(e, t, i) {
            return new s.Point(e, t);
          }
          drawWithContext(e, t, i, s) {
            r.Guard.notNull(e, "renderContext"),
              r.Guard.notNull(t, "xCalc"),
              r.Guard.notNull(i, "yCalc");
            let n = this.getX1Coordinate(t, i),
              h = this.getY1Coordinate(t, i);
            const c = {
              fontFamily: this.fontFamily,
              fontSize: Math.round(this.fontSize * g.DpiHelper.PIXEL_RATIO),
            };
            let y,
              f,
              v = (0, d.parseColorToUIntArgb)(this.textColor);
            v = (0, l.uintArgbColorOverrideOpacity)(v, this.opacity);
            const S = (-this.rotation * Math.PI) / 180,
              C = 0 !== this.rotation || 1 !== this.scale;
            y = e.getFont(c, C, !1);
            const x = (0, p.getTextBounds)(
              this.parentSurface.webAssemblyContext2D
            );
            let b = this.text;
            if (this.wrapTo) {
              let e = 1 / 0;
              if ("number" == typeof this.wrapTo) e = this.wrapTo;
              else if (this.wrapTo === P.ViewRect)
                this.horizontalAnchorPoint === o.EHorizontalAnchorPoint.Left
                  ? (e = this.parentSurface.seriesViewRect.width - n)
                  : this.horizontalAnchorPoint ===
                    o.EHorizontalAnchorPoint.Center
                  ? (e =
                      2 *
                      Math.min(n, this.parentSurface.seriesViewRect.width - n))
                  : this.horizontalAnchorPoint ===
                      o.EHorizontalAnchorPoint.Right && (e = n);
              else if (this.wrapTo === P.Annotation) {
                let r = this.getX2Coordinate(t, i);
                r > n && (e = r - n);
              }
              b = (0, u.wrapNativeText)(this.text, e, y, x);
            }
            let A = this.lineSpacing;
            y.CalculateStringBounds(null != b ? b : "", x, A),
              A < 1 &&
                ((A =
                  this.lineSpacing *
                  (x.GetLineBounds(0).m_fHeight -
                    x.GetLineBounds(0).m_fOffsetY)),
                y.CalculateStringBounds(null != b ? b : "", x, A));
            const T = this.getRotationCenter(n + s.x, h + s.y, x);
            (f = (0, p.getVector4)(
              this.parentSurface.webAssemblyContext2D,
              T.x,
              T.y,
              S,
              0
            )),
              this.horizontalAnchorPointProperty ===
              o.EHorizontalAnchorPoint.Center
                ? (n -= x.m_fWidth / 2)
                : this.horizontalAnchorPointProperty ===
                    o.EHorizontalAnchorPoint.Right && (n -= x.m_fWidth),
              this.verticalAnchorPointProperty === o.EVerticalAnchorPoint.Center
                ? (h -= x.m_fHeight / 2 - x.GetLineBounds(0).m_fHeight)
                : this.verticalAnchorPointProperty ===
                  o.EVerticalAnchorPoint.Top
                ? (h += x.GetLineBounds(0).m_fHeight)
                : x.GetLinesCount() > 1 &&
                  ((h += x.GetLineBounds(0).m_fOffsetY),
                  (h -=
                    (x.GetLineBounds(0).m_fHeight -
                      x.GetLineBounds(0).m_fOffsetY) *
                    (x.GetLinesCount() - 1)));
            const E = n + s.x,
              R = h + s.y;
            let w = n,
              D = h - x.GetLineBounds(0).m_fHeight,
              L = n + x.m_fWidth,
              M = D + x.m_fHeight;
            if (0 !== this.rotation) {
              const e = Math.sin(S),
                t = Math.cos(S),
                i = this.getRotationCenter(n, h, x),
                r = (r, s) => ({
                  x: (r - i.x) * t + (s - i.y) * e,
                  y: (s - i.y) * t - (r - i.x) * e,
                }),
                s = r(w, D),
                o = r(L, D),
                a = r(w, M),
                l = r(L, M);
              (w = Math.min(s.x, o.x, a.x, l.x) + i.x),
                (L = Math.max(s.x, o.x, a.x, l.x) + i.x),
                (D = Math.min(s.y, o.y, a.y, l.y) + i.y),
                (M = Math.max(s.y, o.y, a.y, l.y) + i.y);
            }
            const I = (0, a.convertMultiLineAlignment)(
              this.multiLineAlignment,
              this.parentSurface.webAssemblyContext2D
            );
            let O = y.GetScale(),
              k = !1;
            O !== this.scale && (y.SetScale(this.scale), (k = !0)),
              this.setAnnotationBorders(
                w,
                w + (L - w) * this.scale,
                D,
                D + (M - D) * this.scale
              ),
              y.DrawStringAdvanced(b, v, Math.round(E), Math.round(R), f, I, A),
              k && y.SetScale(O),
              this.annotationLayer !== m.EAnnotationLayer.AboveChart && y.End(),
              this.updateAdornerInner();
          }
          onDragStarted(e) {
            super.onDragStarted(e);
            const {
                x1: t,
                x2: i,
                y1: r,
                y2: o,
              } = this.getAnnotationBorders(!1, !0),
              {
                x1y1: a,
                x2y1: n,
                x1y2: l,
                x2y2: d,
              } = f.annotationHelpers.calcNewApex(
                t,
                r,
                i,
                o,
                this.isVerticalChart
              ),
              u = (0, c.translateFromCanvasToSeriesViewRect)(
                new s.Point(e.mousePoint.x, e.mousePoint.y),
                this.parentSurface.seriesViewRect,
                !0
              );
            return a &&
              this.canDragPoint(y.EDraggingGripPoint.x1y1) &&
              (0, h.calcDistance)(a.x, a.y, u.x, u.y) <
                this.annotationsGripsRadius * g.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = y.EDraggingGripPoint.x1y1), !0)
              : n &&
                this.canDragPoint(y.EDraggingGripPoint.x2y1) &&
                (0, h.calcDistance)(n.x, n.y, u.x, u.y) <
                  this.annotationsGripsRadius * g.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = y.EDraggingGripPoint.x2y1), !0)
              : l &&
                this.canDragPoint(y.EDraggingGripPoint.x1y2) &&
                (0, h.calcDistance)(l.x, l.y, u.x, u.y) <
                  this.annotationsGripsRadius * g.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = y.EDraggingGripPoint.x1y2), !0)
              : d &&
                this.canDragPoint(y.EDraggingGripPoint.x2y2) &&
                (0, h.calcDistance)(d.x, d.y, u.x, u.y) <
                  this.annotationsGripsRadius * g.DpiHelper.PIXEL_RATIO
              ? ((this.adornerDraggingPoint = y.EDraggingGripPoint.x2y2), !0)
              : !!(
                  u &&
                  this.canDragPoint(y.EDraggingGripPoint.Body) &&
                  this.clickToSelect(e)
                ) &&
                ((this.adornerDraggingPoint = y.EDraggingGripPoint.Body), !0);
          }
          calcDragDistance(e) {
            if (!this.prevValue) return void (this.prevValue = e);
            this.adornerDraggingPoint === y.EDraggingGripPoint.Body
              ? ((this.x1 = this.x1 - (this.prevValue.x - e.x)),
                (this.x2 = this.x2 - (this.prevValue.x - e.x)),
                (this.y1 = this.y1 - (this.prevValue.y - e.y)),
                (this.y2 = this.y2 - (this.prevValue.y - e.y)))
              : this.adornerDraggingPoint === y.EDraggingGripPoint.x1y1
              ? this.resizeDirections === n.EXyDirection.XDirection
                ? (this.x1 -= this.prevValue.x - e.x)
                : (this.resizeDirections === n.EXyDirection.YDirection ||
                    (this.x1 -= this.prevValue.x - e.x),
                  (this.y1 -= this.prevValue.y - e.y))
              : this.adornerDraggingPoint === y.EDraggingGripPoint.x2y2
              ? this.resizeDirections === n.EXyDirection.XDirection
                ? (this.x2 -= this.prevValue.x - e.x)
                : (this.resizeDirections === n.EXyDirection.YDirection ||
                    (this.x2 -= this.prevValue.x - e.x),
                  (this.y2 -= this.prevValue.y - e.y))
              : this.adornerDraggingPoint === y.EDraggingGripPoint.x2y1
              ? this.resizeDirections === n.EXyDirection.XDirection
                ? (this.x2 -= this.prevValue.x - e.x)
                : (this.resizeDirections === n.EXyDirection.YDirection ||
                    (this.x2 -= this.prevValue.x - e.x),
                  (this.y1 -= this.prevValue.y - e.y))
              : this.adornerDraggingPoint === y.EDraggingGripPoint.x1y2 &&
                (this.resizeDirections === n.EXyDirection.XDirection
                  ? (this.x1 -= this.prevValue.x - e.x)
                  : (this.resizeDirections === n.EXyDirection.YDirection ||
                      (this.x1 -= this.prevValue.x - e.x),
                    (this.y2 -= this.prevValue.y - e.y)));
            const t = Math.abs(this.x2 - this.x1) / this.initialWidth;
            this.scaleOnResize && t && (this.scale = t), (this.prevValue = e);
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.notifyPropertyChanged(v.PROPERTY.STROKE);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                fontFamily: this.fontFamily,
                fontSize: this.fontSize,
                textColor: this.textColor,
                rotation: this.rotation,
                text: this.text,
              };
            return Object.assign(e.options, t), e;
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const {
              x1: i,
              x2: r,
              y1: s,
              y2: o,
            } = this.getAnnotationBorders(!0);
            return (0, h.testIsInBounds)(e, t, i, o, r, s);
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.isSelected)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(),
                s = this.svgStringAdornerTemplate(e, i, t, r);
              this.svgAdorner = f.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          svgStringAdornerTemplate(e, t, i, r) {
            let s = `<svg xmlns="http://www.w3.org/2000/svg">\n        <rect x="${e}" y="${t}" width="${
              i - e
            }" height="${r - t}" stroke="${
              this.selectionBoxStroke
            }" stroke-width="${
              this.selectionBoxThickness
            }px" fill="none" />\n        `;
            const o = this.getAdornerAnnotationBorders(!1, !0);
            return (
              this.canDragPoint(y.EDraggingGripPoint.x1y1) &&
                (s += this.getAnnotationGripSvg(o.x1, o.y1)),
              this.canDragPoint(y.EDraggingGripPoint.x2y2) &&
                (s += this.getAnnotationGripSvg(o.x2, o.y2)),
              this.canDragPoint(y.EDraggingGripPoint.x2y1) &&
                (s += this.getAnnotationGripSvg(o.x2, o.y1)),
              this.canDragPoint(y.EDraggingGripPoint.x1y2) &&
                (s += this.getAnnotationGripSvg(o.x1, o.y2)),
              (s += "</svg>"),
              s
            );
          }
        }
        t.NativeTextAnnotation = C;
      },
      12021: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OverviewCustomResizableAnnotation = void 0);
        const r = i(75772),
          s = i(86699),
          o = i(21670),
          a = i(32873),
          n = i(86127),
          l = i(31306),
          d = i(92415),
          h = i(91380),
          u = i(48882);
        class c extends u.CustomAnnotation {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.minWidthProperty = 10),
              (this.minHeightProperty = 10),
              (this.adornerSvgStringTemplateProperty =
                null !==
                  (t = null == e ? void 0 : e.adornerSvgStringTemplate) &&
                void 0 !== t
                  ? t
                  : this.adornerSvgStringTemplateProperty),
              (this.minWidthProperty =
                null !== (i = null == e ? void 0 : e.minWidth) && void 0 !== i
                  ? i
                  : this.minWidthProperty),
              (this.minHeightProperty =
                null !== (r = null == e ? void 0 : e.minHeight) && void 0 !== r
                  ? r
                  : this.minHeightProperty);
          }
          set minWidth(e) {
            (this.minWidthProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.MINIMUM_WIDTH);
          }
          get minWidth() {
            return this.minWidthProperty;
          }
          set minHeight(e) {
            (this.minHeightProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.MINIMUM_HEIGHT);
          }
          get minHeight() {
            return this.minHeightProperty;
          }
          set adornerSvgStringTemplate(e) {
            (this.adornerSvgStringTemplateProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.ADORNER_TEMPLATE);
          }
          get adornerSvgStringTemplate() {
            return this.adornerSvgStringTemplateProperty;
          }
          setCoordinates(e) {
            if (!this.parentSurface) return;
            const {
                x1: t = this.x1,
                x2: i = this.x2,
                y1: s = this.y1,
                y2: o = this.y2,
              } = e,
              a = this.getAbsoluteCoordinates(new r.Point(t, s)),
              n = this.getAbsoluteCoordinates(new r.Point(i, o)),
              l = this.parentSurface.getXAxisById(this.xAxisId),
              d = l.getCurrentCoordinateCalculator(),
              h = this.parentSurface.getYAxisById(this.yAxisId),
              u = h.getCurrentCoordinateCalculator(),
              c = l.isHorizontalAxis ? d : u,
              p = h.isHorizontalAxis ? d : u,
              g = c.hasFlippedCoordinates ? t : i,
              y = c.hasFlippedCoordinates ? i : t,
              f = p.hasFlippedCoordinates ? t : i,
              v = p.hasFlippedCoordinates ? i : t,
              m = this.isVerticalChart ? new r.Point(f, g) : new r.Point(g, f),
              S = this.isVerticalChart ? new r.Point(v, y) : new r.Point(y, v);
            l.isHorizontalAxis
              ? t - this.x1 >= this.x2 - i
                ? ((this.x2 = null != i ? i : this.x2),
                  d.hasFlippedCoordinates
                    ? this.adjustLeftSideToLimits(n.x, m, d)
                    : this.adjustRightSideToLimits(n.x, S, d))
                : ((this.x1 = null != t ? t : this.x1),
                  d.hasFlippedCoordinates
                    ? this.adjustRightSideToLimits(a.x, S, d)
                    : this.adjustLeftSideToLimits(a.x, m, d))
              : t - this.x1 >= this.x2 - i
              ? ((this.x2 = null != i ? i : this.x2),
                d.hasFlippedCoordinates
                  ? this.adjustTopSideToLimits(n.y, m, d)
                  : this.adjustBottomSideToLimits(n.y, S, d))
              : ((this.x1 = null != t ? t : this.x1),
                d.hasFlippedCoordinates
                  ? this.adjustBottomSideToLimits(a.y, S, d)
                  : this.adjustTopSideToLimits(a.y, m, d));
          }
          onDragStarted(e) {
            var t;
            e.nativeEvent.preventDefault(),
              null === (t = this.dragStarted) || void 0 === t || t.raiseEvent();
            const {
                x1: i,
                x2: n,
                y1: d,
                y2: u,
              } = this.getAnnotationBorders(!0),
              c = (0, a.translateFromCanvasToSeriesViewRect)(
                new r.Point(e.mousePoint.x, e.mousePoint.y),
                this.parentSurface.seriesViewRect,
                !0
              );
            if (!c) return !1;
            const p = (0, a.translateToNotScaled)(c.x),
              g = (0, a.translateToNotScaled)(c.y),
              y = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.XDirection
                : this.resizeDirections !== s.EXyDirection.YDirection,
              f = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.YDirection
                : this.resizeDirections !== s.EXyDirection.XDirection;
            if (y) {
              if (
                (0, o.testIsInBounds)(
                  p,
                  g,
                  i - h.ADORNER_GRIP_RADIUS,
                  u,
                  i + h.ADORNER_GRIP_RADIUS,
                  d
                )
              )
                return (
                  (this.adornerDraggingPoint = l.EDraggingGripPoint.x1y1), !0
                );
              if (
                (0, o.testIsInBounds)(
                  p,
                  g,
                  n - h.ADORNER_GRIP_RADIUS,
                  u,
                  n + h.ADORNER_GRIP_RADIUS,
                  d
                )
              )
                return (
                  (this.adornerDraggingPoint = l.EDraggingGripPoint.x2y2), !0
                );
            }
            if (f) {
              if (
                (0, o.testIsInBounds)(
                  p,
                  g,
                  i,
                  d + h.ADORNER_GRIP_RADIUS,
                  n,
                  d - h.ADORNER_GRIP_RADIUS
                )
              )
                return (
                  (this.adornerDraggingPoint = l.EDraggingGripPoint.x2y1), !0
                );
              if (
                (0, o.testIsInBounds)(
                  p,
                  g,
                  i,
                  u + h.ADORNER_GRIP_RADIUS,
                  n,
                  u - h.ADORNER_GRIP_RADIUS
                )
              )
                return (
                  (this.adornerDraggingPoint = l.EDraggingGripPoint.x1y2), !0
                );
            }
            return (
              !!this.clickToSelect(e) &&
              ((this.adornerDraggingPoint = l.EDraggingGripPoint.Body), !0)
            );
          }
          update(e, t, i, r) {
            this.create(e, t, i, r),
              (this.svg.style.display = this.isHidden ? "none" : "block"),
              (this.svg.style.opacity = this.opacity.toString());
            const s = this.getX1Coordinate(e, t),
              o = this.getY1Coordinate(e, t),
              a = this.getX2Coordinate(e, t),
              n = this.getY2Coordinate(e, t);
            if (
              (this.setAnnotationBorders(s, a, o, n),
              isNaN(s) ||
                isNaN(o) ||
                !isFinite(s) ||
                !isFinite(o) ||
                isNaN(a) ||
                isNaN(n) ||
                !isFinite(a) ||
                !isFinite(n))
            )
              this.svg.style.display = "none";
            else {
              const e = Math.abs(a - s),
                t = Math.abs(n - o),
                l = (s < a ? s : a) + i,
                d = (o < n ? o : n) + r;
              this.setSvgAttribute("x", l),
                this.setSvgAttribute("y", d),
                this.setSvgAttribute("width", e),
                this.setSvgAttribute("height", t),
                (this.svgDOMRect = this.svg.getBoundingClientRect());
            }
            this.updateAdornerInner();
          }
          calcDragDistance(e) {
            const t = this.parentSurface.getXAxisById(this.xAxisId),
              i = t.getCurrentCoordinateCalculator(),
              r = this.parentSurface.getYAxisById(this.yAxisId),
              o = r.getCurrentCoordinateCalculator(),
              a = t.isHorizontalAxis ? i : o,
              n = r.isHorizontalAxis ? i : o,
              d = this.getX1Coordinate(i, o),
              h = this.getY1Coordinate(i, o),
              u = this.getX2Coordinate(i, o),
              c = this.getY2Coordinate(i, o),
              p = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.XDirection
                : this.resizeDirections !== s.EXyDirection.YDirection,
              g = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.YDirection
                : this.resizeDirections !== s.EXyDirection.XDirection;
            switch (this.adornerDraggingPoint) {
              case l.EDraggingGripPoint.Body: {
                if (!this.prevValue) return void (this.prevValue = e);
                const i = this.x1 - (this.prevValue.x - e.x),
                  o = this.x2 - (this.prevValue.x - e.x),
                  a = this.y1 - (this.prevValue.y - e.y),
                  n = this.y2 - (this.prevValue.y - e.y);
                if (this.resizeDirections !== s.EXyDirection.YDirection)
                  if (i < t.visibleRange.min) {
                    const e = this.x1 - t.visibleRange.min;
                    (this.x1 = t.visibleRange.min), (this.x2 = this.x2 - e);
                  } else if (o > t.visibleRange.max) {
                    const e = t.visibleRange.max - this.x2;
                    (this.x1 = this.x1 + e), (this.x2 = t.visibleRange.max);
                  } else (this.x1 = i), (this.x2 = o);
                if (this.resizeDirections !== s.EXyDirection.XDirection)
                  if (n > r.visibleRange.max) {
                    const e = this.y2 - r.visibleRange.max;
                    (this.y2 = r.visibleRange.max), (this.y1 = this.y1 + e);
                  } else if (a < r.visibleRange.min) {
                    const e = this.y1 - r.visibleRange.min;
                    (this.y2 = this.y2 - e), (this.y1 = r.visibleRange.min);
                  } else (this.y1 = a), (this.y2 = n);
                this.prevValue = e;
                break;
              }
              case l.EDraggingGripPoint.x1y1:
                p &&
                  (a.hasFlippedCoordinates
                    ? this.adjustLeftSideToLimits(u, e, a)
                    : this.adjustLeftSideToLimits(d, e, a));
                break;
              case l.EDraggingGripPoint.x2y2:
                p &&
                  (a.hasFlippedCoordinates
                    ? this.adjustRightSideToLimits(d, e, a)
                    : this.adjustRightSideToLimits(u, e, a));
                break;
              case l.EDraggingGripPoint.x2y1:
                g &&
                  (n.hasFlippedCoordinates
                    ? this.adjustTopSideToLimits(c, e, n)
                    : this.adjustTopSideToLimits(h, e, n));
                break;
              case l.EDraggingGripPoint.x1y2:
                g &&
                  (n.hasFlippedCoordinates
                    ? this.adjustBottomSideToLimits(h, e, n)
                    : this.adjustBottomSideToLimits(c, e, n));
                break;
              default:
                throw new Error(
                  `Unexpected adornerDraggingPoint value ${this.adornerDraggingPoint}`
                );
            }
          }
          create(e, t, i, r) {
            if (this.svg) return;
            this.setSvg(
              d.annotationHelpers.createSvg(
                this.svgString,
                this.svgRoot,
                this.nextSibling
              )
            );
            const s = this.svg.getBBox(),
              o = this.getX1Coordinate(e, t),
              a = this.getY1Coordinate(e, t);
            this.isVerticalChart
              ? (void 0 === this.x2 &&
                  (this.x2 = this.getValue(
                    o + s.width,
                    e,
                    l.ECoordinateMode.Pixel
                  )),
                void 0 === this.y2 &&
                  (this.y2 = this.getValue(
                    a + s.height,
                    t,
                    l.ECoordinateMode.Pixel
                  )))
              : (void 0 === this.x2 &&
                  (this.x2 = this.getValue(
                    a + s.height,
                    e,
                    l.ECoordinateMode.Pixel
                  )),
                void 0 === this.y2 &&
                  (this.y2 = this.getValue(
                    o + s.width,
                    t,
                    l.ECoordinateMode.Pixel
                  )));
            const n = this.getX2Coordinate(e, t),
              h = this.getY2Coordinate(e, t),
              u = Math.abs(n - o),
              c = Math.abs(h - a);
            if (this.isVerticalChart) {
              if (u < this.minWidth) {
                const i = this.isVerticalChart ? t : e;
                this.y2 = this.getValue(
                  o + this.minWidth,
                  i,
                  l.ECoordinateMode.Pixel
                );
              }
              if (c < this.minHeight) {
                const i = this.isVerticalChart ? e : t;
                this.x2 = this.getValue(
                  a + this.minHeight,
                  i,
                  l.ECoordinateMode.Pixel
                );
              }
            } else {
              if (u < this.minWidth) {
                const i = this.isVerticalChart ? t : e;
                this.x2 = this.getValue(
                  o + this.minWidth,
                  i,
                  l.ECoordinateMode.Pixel
                );
              }
              if (c < this.minHeight) {
                const i = this.isVerticalChart ? e : t;
                this.y2 = this.getValue(
                  a + this.minHeight,
                  i,
                  l.ECoordinateMode.Pixel
                );
              }
            }
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.adornerSvgStringTemplate)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(!0),
                s = this.adornerSvgStringTemplate(e, i, t, r);
              this.svgAdorner = d.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const {
                x1: i,
                x2: r,
                y1: n,
                y2: l,
              } = this.getAnnotationBorders(!0),
              d = (0, a.translateToNotScaled)(e),
              u = (0, a.translateToNotScaled)(t);
            if ((0, o.testIsInBounds)(d, u, i, l, r, n)) return !0;
            const c = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.XDirection
                : this.resizeDirections !== s.EXyDirection.YDirection,
              p = this.isVerticalChart
                ? this.resizeDirections !== s.EXyDirection.YDirection
                : this.resizeDirections !== s.EXyDirection.XDirection;
            if (c) {
              if (
                (0, o.testIsInBounds)(
                  d,
                  u,
                  i - h.ADORNER_GRIP_RADIUS,
                  l,
                  i + h.ADORNER_GRIP_RADIUS,
                  n
                )
              )
                return !0;
              if (
                (0, o.testIsInBounds)(
                  d,
                  u,
                  r - h.ADORNER_GRIP_RADIUS,
                  l,
                  r + h.ADORNER_GRIP_RADIUS,
                  n
                )
              )
                return !0;
            }
            if (p) {
              if (
                (0, o.testIsInBounds)(
                  d,
                  u,
                  i,
                  n + h.ADORNER_GRIP_RADIUS,
                  r,
                  n - h.ADORNER_GRIP_RADIUS
                )
              )
                return !0;
              if (
                (0, o.testIsInBounds)(
                  d,
                  u,
                  i,
                  l + h.ADORNER_GRIP_RADIUS,
                  r,
                  l - h.ADORNER_GRIP_RADIUS
                )
              )
                return !0;
            }
            return !1;
          }
          adjustLeftSideToLimits(e, t, i) {
            const r = this.getAbsoluteHorizontalCoordinate(
                this.isVerticalChart ? t.y : t.x
              ),
              s = p(r, i),
              o = e - s >= this.minWidth ? s : e - this.minWidth,
              a = this.convertFromCoordinate(
                o * n.DpiHelper.PIXEL_RATIO,
                i,
                this.isVerticalChart
                  ? this.yCoordinateMode
                  : this.xCoordinateMode
              );
            this.isVerticalChart
              ? i.hasFlippedCoordinates
                ? (this.y1 = a)
                : (this.y2 = a)
              : i.hasFlippedCoordinates
              ? (this.x1 = a)
              : (this.x2 = a);
          }
          adjustRightSideToLimits(e, t, i) {
            const r = this.getAbsoluteHorizontalCoordinate(
                this.isVerticalChart ? t.y : t.x
              ),
              s = p(r, i),
              o = s - e >= this.minWidth ? s : e + this.minWidth,
              a = this.convertFromCoordinate(
                o * n.DpiHelper.PIXEL_RATIO,
                i,
                this.isVerticalChart
                  ? this.yCoordinateMode
                  : this.xCoordinateMode
              );
            this.isVerticalChart
              ? i.hasFlippedCoordinates
                ? (this.y2 = a)
                : (this.y1 = a)
              : i.hasFlippedCoordinates
              ? (this.x2 = a)
              : (this.x1 = a);
          }
          adjustTopSideToLimits(e, t, i) {
            const r = this.getAbsoluteVerticalCoordinate(
                this.isVerticalChart ? t.x : t.y
              ),
              s = p(r, i),
              o = e - s >= this.minHeight ? s : e - this.minHeight,
              a = this.convertFromCoordinate(
                o * n.DpiHelper.PIXEL_RATIO,
                i,
                this.isVerticalChart
                  ? this.xCoordinateMode
                  : this.yCoordinateMode
              );
            this.isVerticalChart
              ? i.hasFlippedCoordinates
                ? (this.x1 = a)
                : (this.x2 = a)
              : i.hasFlippedCoordinates
              ? (this.y1 = a)
              : (this.y2 = a);
          }
          adjustBottomSideToLimits(e, t, i) {
            const r = this.getAbsoluteVerticalCoordinate(
                this.isVerticalChart ? t.x : t.y
              ),
              s = p(r, i),
              o = s - e >= this.minHeight ? s : e + this.minHeight,
              a = this.convertFromCoordinate(
                o * n.DpiHelper.PIXEL_RATIO,
                i,
                this.isVerticalChart
                  ? this.xCoordinateMode
                  : this.yCoordinateMode
              );
            this.isVerticalChart
              ? i.hasFlippedCoordinates
                ? (this.x2 = a)
                : (this.x1 = a)
              : i.hasFlippedCoordinates
              ? (this.y2 = a)
              : (this.y1 = a);
          }
        }
        t.OverviewCustomResizableAnnotation = c;
        const p = (e, t) =>
          e <= 0
            ? 0
            : e >= t.viewportDimension / n.DpiHelper.PIXEL_RATIO
            ? t.viewportDimension / n.DpiHelper.PIXEL_RATIO
            : e;
      },
      29530: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RenderContextAnnotationBase = void 0);
        const r = i(31306),
          s = i(91380);
        class o extends r.AnnotationBase {
          constructor(e) {
            super(e), (this.isSvgAnnotation = !1);
          }
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          set parentSurface(e) {
            this.parentSurfaceProperty !== e &&
              ((this.parentSurfaceProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.PARENT_SURFACE));
          }
        }
        t.RenderContextAnnotationBase = o;
      },
      69302: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RolloverLegendSvgAnnotation = void 0);
        const r = i(92415),
          s = i(91380),
          o = i(84736),
          a = i(84690);
        class n extends a.SvgAnnotationBase {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type = o.EAnnotationType.SVG),
              (this.seriesInfosProperty = []),
              (this.isHidden = !0),
              (this.tooltipLegendTemplateProperty =
                null !== (t = null == e ? void 0 : e.tooltipLegendTemplate) &&
                void 0 !== t
                  ? t
                  : this.tooltipLegendTemplateProperty),
              (this.tooltipLegendOffsetXProperty =
                null !== (i = null == e ? void 0 : e.tooltipLegendOffsetX) &&
                void 0 !== i
                  ? i
                  : this.tooltipLegendOffsetXProperty),
              (this.tooltipLegendOffsetYProperty =
                null !== (r = null == e ? void 0 : e.tooltipLegendOffsetY) &&
                void 0 !== r
                  ? r
                  : this.tooltipLegendOffsetYProperty);
          }
          get seriesInfos() {
            return this.seriesInfosProperty;
          }
          set seriesInfos(e) {
            this.seriesInfosProperty &&
              e &&
              (e.length !== this.seriesInfosProperty.length ||
                this.seriesInfosProperty
                  .map((t) =>
                    t.equals(
                      e.find(
                        (e) => e.renderableSeries.id === t.renderableSeries.id
                      )
                    )
                  )
                  .some((e) => !1 === e)) &&
              ((this.seriesInfosProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.SERIES_INFOS));
          }
          get tooltipLegendTemplate() {
            return this.tooltipLegendTemplateProperty;
          }
          set tooltipLegendTemplate(e) {
            (this.tooltipLegendTemplateProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.TOOLTIP_LEGEND_TEMPLATE);
          }
          get tooltipLegendOffsetX() {
            return this.tooltipLegendOffsetXProperty;
          }
          set tooltipLegendOffsetX(e) {
            (this.tooltipLegendOffsetXProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.TOOLTIP_LEGEND_OFFSET_X);
          }
          get tooltipLegendOffsetY() {
            return this.tooltipLegendOffsetYProperty;
          }
          set tooltipLegendOffsetY(e) {
            (this.tooltipLegendOffsetYProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.TOOLTIP_LEGEND_OFFSET_Y);
          }
          update(e, t, i, r) {
            this.tooltipLegendTemplate &&
              (this.svg && this.delete(), this.create(e, t, i, r));
          }
          create(e, t, i, s) {
            const o = this.tooltipLegendTemplate(this.seriesInfos, this),
              a = r.annotationHelpers.createSvg(
                o,
                this.svgRoot,
                this.nextSibling
              );
            this.setSvg(a),
              this.setSvgAttribute("x", this.tooltipLegendOffsetX + i),
              this.setSvgAttribute("y", this.tooltipLegendOffsetY + s);
          }
        }
        t.RolloverLegendSvgAnnotation = n;
      },
      66443: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RolloverMarkerSvgAnnotation = void 0);
        const r = i(57935),
          s = i(92415),
          o = i(84736),
          a = i(84690);
        class n extends a.SvgAnnotationBase {
          constructor(e) {
            super(),
              (this.type = o.EAnnotationType.SVG),
              (this.tooltipProps = e),
              (this.isHiddenProperty = !0),
              (this.x1 = 0),
              (this.y1 = 0),
              (this.xCoordShift = -4),
              (this.yCoordShift = -4);
          }
          update(e, t, i, s) {
            const o = this.tooltipProps.rolloverModifier.getMousePosition();
            (this.previousMousePosition === o &&
              o !== r.EMousePosition.SeriesArea) ||
              ((this.previousMousePosition =
                this.tooltipProps.rolloverModifier.getMousePosition()),
              super.update(e, t, i, s));
          }
          create(e, t, i, r) {
            const { tooltipColor: o, markerColor: a } = this.tooltipProps,
              n = null != a ? a : o;
            if (
              (this.svg && this.currentColor !== n && this.clear(), !this.svg)
            ) {
              this.currentColor;
              const e = l(n),
                t = s.annotationHelpers.createSvg(
                  e,
                  this.svgRoot,
                  this.nextSibling
                );
              this.setSvg(t);
            }
          }
        }
        t.RolloverMarkerSvgAnnotation = n;
        const l = (e) =>
          `<svg width="8" height="8"><circle cx="50%" cy="50%" r="4" fill="${e}"/></svg>`;
      },
      60915: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RolloverTooltipSvgAnnotation = void 0);
        const r = i(57935),
          s = i(51885),
          o = i(31306),
          a = i(92415),
          n = i(91380),
          l = i(84736),
          d = i(84690),
          h = i(48008);
        class u extends d.SvgAnnotationBase {
          constructor(e, t) {
            var i, r;
            super(t),
              (this.type = l.EAnnotationType.SVG),
              (this.width = 0),
              (this.height = 0),
              (this.tooltipProps = e),
              (this.height =
                null !== (i = null == t ? void 0 : t.height) && void 0 !== i
                  ? i
                  : this.height),
              (this.xCoordinateMode = o.ECoordinateMode.DataValue),
              (this.yCoordinateMode = o.ECoordinateMode.DataValue),
              (this.isHidden = !0),
              (this.updateSize = this.updateSize.bind(this)),
              (this.placementDivIdProperty =
                null !== (r = null == t ? void 0 : t.placementDivId) &&
                void 0 !== r
                  ? r
                  : this.placementDivIdProperty);
          }
          get seriesInfo() {
            return this.seriesInfoProperty;
          }
          set seriesInfo(e) {
            ((e && !this.seriesInfoProperty) ||
              !this.seriesInfoProperty.equals(e)) &&
              ((this.seriesInfoProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.SERIES_INFO));
          }
          update(e, t, i, s) {
            const o = this.tooltipProps.rolloverModifier.getMousePosition();
            (this.previousMousePosition === o &&
              o !== r.EMousePosition.SeriesArea) ||
              ((this.previousMousePosition =
                this.tooltipProps.rolloverModifier.getMousePosition()),
              this.svg && this.clear(),
              this.placementDivId
                ? this.updateExternalLegendTooltip()
                : (super.update(e, t, i, s), this.updateLegendTooltip(i, s)));
          }
          updateSize(e, t) {
            (this.width = e), (this.height = t);
          }
          clear() {
            var e, t, i, r;
            if (this.parentSurface && !this.parentSurface.isDeleted) {
              if (this.svg) {
                if (this.placementDivId)
                  return void (
                    null ===
                      (t =
                        null === (e = this.svg) || void 0 === e
                          ? void 0
                          : e.parentNode) ||
                    void 0 === t ||
                    t.removeChild(this.svg)
                  );
                null === (i = this.svgRoot) ||
                  void 0 === i ||
                  i.removeChild(this.svg);
              }
              this.svgLegend &&
                (null === (r = this.svgLegend.parentNode) ||
                  void 0 === r ||
                  r.removeChild(this.svgLegend));
            }
          }
          create(e, t, i, r) {
            let s;
            s = this.seriesInfo ? this.generateSvgString() : "<svg></svg>";
            const o = a.annotationHelpers.createSvg(
              s,
              this.svgRoot,
              this.nextSibling
            );
            this.setSvg(o);
          }
          generateSvgString() {
            var e;
            const { tooltipTitle: t } = this.tooltipProps,
              i = ("" + t).replace(/\s/g, ""),
              r = `id${Math.floor(this.y1)}_${i}_${Date.now()}`;
            return (
              null !== (e = this.tooltipProps.tooltipTemplate) && void 0 !== e
                ? e
                : p
            )(r, this.seriesInfo, this);
          }
          updateLegendTooltip(e, t) {
            if (this.tooltipProps.tooltipLegendTemplate) {
              const i = this.seriesInfo
                  ? this.tooltipProps.tooltipLegendTemplate(
                      this.tooltipProps,
                      this.seriesInfo
                    )
                  : "<svg></svg>",
                r = a.annotationHelpers.createSvg(
                  i,
                  this.svgRoot,
                  this.nextSibling
                );
              (this.svgLegend = r),
                this.svgLegend.setAttribute(
                  "x",
                  this.tooltipProps.tooltipLegendOffsetX.toString() + e
                ),
                this.svgLegend.setAttribute(
                  "y",
                  this.tooltipProps.tooltipLegendOffsetY.toString() + t
                );
            }
          }
          updateExternalLegendTooltip() {
            let e;
            (e = this.seriesInfo
              ? this.generateSvgString()
              : "<svg style='display: none;'></svg>"),
              (this.svgDivRoot = document.querySelector(
                `[id='${this.placementDivId}']`
              ));
            const t = a.annotationHelpers.createSvg(
              e,
              this.svgDivRoot,
              this.nextSibling
            );
            this.setSvg(t);
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            this.placementDivIdProperty !== e &&
              ((this.placementDivIdProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.PLACEMENT_DIV_ID));
          }
        }
        t.RolloverTooltipSvgAnnotation = u;
        const c = (e, t, i, r) => {
            const o = [];
            if ((t && o.push(t), e.dataSeriesType === s.EDataSeriesType.Ohlc)) {
              const t = e;
              i && o.push(`${i}: ${t.formattedXValue}`),
                o.push(`Open: ${t.formattedOpenValue}`),
                o.push(`Highest: ${t.formattedHighValue}`),
                o.push(`Lowest: ${t.formattedLowValue}`),
                o.push(`Close: ${t.formattedCloseValue}`);
            } else if (e.dataSeriesType === s.EDataSeriesType.Hlc) {
              const t = e;
              i && o.push(`${i}: ${t.formattedXValue}`),
                o.push(`High: ${t.formattedHighValue}`),
                o.push(`Low: ${t.formattedLowValue}`);
            } else if (e.dataSeriesType === s.EDataSeriesType.Xyy) {
              const t = e;
              t.isFirstSeries
                ? f(o, t.formattedXValue, t.formattedYValue, i, r)
                : f(o, t.formattedXValue, t.formattedY1Value, i, r);
            } else if (e.dataSeriesType === s.EDataSeriesType.HeatmapUniform) {
              const t = e;
              i && o.push(`${i}: ${t.formattedXValue}`),
                r && o.push(`${r}: ${t.formattedYValue}`),
                o.push(`Z: ${t.formattedZValue}`);
            } else if (e.dataSeriesType === s.EDataSeriesType.Xyz) {
              const t = e;
              f(o, t.formattedXValue, t.formattedYValue, i, r),
                o.push(`Z: ${t.formattedZValue}`);
            } else {
              const t = e;
              f(o, t.formattedXValue, t.formattedYValue, i, r);
            }
            return o;
          },
          p = (e, t, i) => {
            var r, s, o, a, n;
            let l = "";
            const d = i.tooltipProps,
              {
                tooltipTitle: u,
                tooltipColor: p,
                tooltipTextColor: f,
                tooltipLabelX: v,
                tooltipLabelY: m,
                shadowColor: S,
              } = d,
              P = (
                null !==
                  (o =
                    null !== (r = i.tooltipProps.tooltipDataTemplate) &&
                    void 0 !== r
                      ? r
                      : null === (s = i.tooltipProps.rolloverModifier) ||
                        void 0 === s
                      ? void 0
                      : s.tooltipDataTemplate) && void 0 !== o
                  ? o
                  : c
              )(t, u, v, m),
              C =
                null !== (a = d.width) && void 0 !== a
                  ? a
                  : g(P.reduce((e, t) => (t.length > e ? t.length : e), 0)),
              x = null !== (n = d.height) && void 0 !== n ? n : y(P.length);
            i.updateSize(C, x),
              P.forEach((e, t) => {
                l += `<tspan x="8" dy="1.2em">${e}</tspan>`;
              });
            let b =
              '<feGaussianBlur result="blurOut" in="offOut" stdDeviation="3" />';
            if (void 0 !== S) {
              const e = (0, h.parseColorToTArgb)(S);
              b = `<feColorMatrix result="matrixOut" in="offOut" type="matrix"\n        values="0 0 0 0 ${
                e.red / 255
              }\n                0 0 0 0 ${
                e.green / 255
              }\n                0 0 0 0 ${
                e.blue / 255
              }\n                0 0 0 ${
                e.opacity / 255
              } 0" />\n        <feGaussianBlur result="blurOut" in="matrixOut" stdDeviation="3" />`;
            }
            return `<svg class="scichart__rollover-tooltip" width="${C}" height="${x}">\n        <defs>\n            <filter id="${e}" x="0" y="0" width="200%" height="200%">\n                <feOffset result="offOut" in="SourceAlpha" dx="3" dy="3" />\n                ${b}\n                <feBlend in="SourceGraphic" in2="blurOut" mode="normal" />\n            </filter>\n        </defs>\n        <rect rx="4" ry="4" width="90%" height="90%" fill="${p}" filter="url(#${e})" />\n        <svg width="100%">\n            <text x="8" y="3" font-size="13" font-family="Verdana" dy="0" fill="${f}">${l}</text>\n        </svg>\n    </svg>`;
          },
          g = (e = 20, t = 13) => 8 * e + 20,
          y = (e = 2, t = 13) => 17 * e + 16,
          f = (e, t, i, r, s) => {
            if (r) {
              const o = null != s ? s : "Y";
              e.push(`${r}: ${t} ${o}: ${i}`);
            } else {
              const t = s ? `${s}: ` : "";
              e.push(`${t}${i}`);
            }
          };
      },
      84690: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SvgAnnotationBase = void 0);
        const r = i(75772),
          s = i(60986),
          o = i(21670),
          a = i(32873),
          n = i(86127),
          l = i(31306),
          d = i(84736),
          h = i(92415),
          u = i(91380);
        class c extends l.AnnotationBase {
          constructor(e) {
            var t, i, r, o;
            super(e),
              (this.isSvgAnnotation = !0),
              (this.isDeleted = !1),
              (this.xCoordShiftProperty = 0),
              (this.yCoordShiftProperty = 0),
              (this.verticalAnchorPointProperty = s.EVerticalAnchorPoint.Top),
              (this.horizontalAnchorPointProperty =
                s.EHorizontalAnchorPoint.Left),
              (this.prevX1Coordinate = 0),
              (this.prevY1Coordinate = 0),
              (this.xCoordShiftProperty =
                null !== (t = null == e ? void 0 : e.xCoordShift) &&
                void 0 !== t
                  ? t
                  : this.xCoordShiftProperty),
              (this.yCoordShiftProperty =
                null !== (i = null == e ? void 0 : e.yCoordShift) &&
                void 0 !== i
                  ? i
                  : this.yCoordShiftProperty),
              (this.verticalAnchorPointProperty =
                null !== (r = null == e ? void 0 : e.verticalAnchorPoint) &&
                void 0 !== r
                  ? r
                  : this.verticalAnchorPointProperty),
              (this.horizontalAnchorPointProperty =
                null !== (o = null == e ? void 0 : e.horizontalAnchorPoint) &&
                void 0 !== o
                  ? o
                  : this.horizontalAnchorPointProperty);
          }
          onAttach(e) {
            super.onAttach(e), this.selectSvgRoot();
          }
          onDetach() {
            super.onDetach(), this.delete();
          }
          get xCoordShift() {
            return this.xCoordShiftProperty;
          }
          set xCoordShift(e) {
            this.xCoordShiftProperty !== e &&
              ((this.xCoordShiftProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.X_COORD_SHIFT));
          }
          get yCoordShift() {
            return this.yCoordShiftProperty;
          }
          set yCoordShift(e) {
            this.yCoordShiftProperty !== e &&
              ((this.yCoordShiftProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.Y_COORD_SHIFT));
          }
          get verticalAnchorPoint() {
            return this.verticalAnchorPointProperty;
          }
          set verticalAnchorPoint(e) {
            this.verticalAnchorPointProperty !== e &&
              ((this.verticalAnchorPointProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.VERTICAL_ANCHOR_POINT));
          }
          get horizontalAnchorPoint() {
            return this.horizontalAnchorPointProperty;
          }
          set horizontalAnchorPoint(e) {
            this.horizontalAnchorPointProperty !== e &&
              ((this.horizontalAnchorPointProperty = e),
              this.notifyPropertyChanged(u.PROPERTY.HORIZONTAL_ANCHOR_POINT));
          }
          suspendInvalidate() {
            super.suspendInvalidate(),
              (this.invalidateState.xCoordShift = this.xCoordShift),
              (this.invalidateState.yCoordShift = this.yCoordShift);
          }
          resumeInvalidate() {
            this.invalidateState &&
              ((this.xCoordShift === this.invalidateState.xCoordShift &&
                this.yCoordShift === this.invalidateState.yCoordShift) ||
                (this.invalidateParentCallback &&
                  this.invalidateParentCallback()),
              super.resumeInvalidate());
          }
          update(e, t, i, r) {
            var o, a;
            this.create(e, t, i, r);
            let n = null !== (o = this.xCoordShift) && void 0 !== o ? o : 0,
              l = null !== (a = this.yCoordShift) && void 0 !== a ? a : 0;
            const d = this.svg.getBBox(),
              h = d.width,
              u = d.height;
            this.horizontalAnchorPointProperty ===
            s.EHorizontalAnchorPoint.Center
              ? (n -= h / 2)
              : this.horizontalAnchorPointProperty ===
                  s.EHorizontalAnchorPoint.Right && (n -= h),
              this.verticalAnchorPointProperty === s.EVerticalAnchorPoint.Center
                ? (l -= u / 2)
                : this.verticalAnchorPointProperty ===
                    s.EVerticalAnchorPoint.Bottom && (l -= u),
              (this.svg.style.visibility = this.isHidden
                ? "hidden"
                : "visible"),
              (this.svg.style.opacity = this.opacity.toString());
            const c = n + this.getX1Coordinate(e, t) + i,
              p = l + this.getY1Coordinate(e, t) + r;
            isNaN(c) || isNaN(p) || !isFinite(c) || !isFinite(p)
              ? (this.svg.style.display = "none")
              : (this.setSvgAttribute("x", c), this.setSvgAttribute("y", p));
          }
          calcDragDistance(e) {
            if (!this.prevValue) return void (this.prevValue = e);
            let { x1: t, x2: i, y1: r, y2: s } = this.getAnnotationBorders();
            (this.adornerDraggingPoint !== l.EDraggingGripPoint.Body &&
              this.adornerDraggingPoint !== l.EDraggingGripPoint.x1y1) ||
              ((t = this.x1 - (this.prevValue.x - e.x)),
              (r = this.y1 - (this.prevValue.y - e.y)),
              (this.x1 = t),
              (this.y1 = r),
              (i -= this.prevValue.x - e.x),
              (s -= this.prevValue.y - e.y)),
              (this.prevValue = e),
              this.setAnnotationBorders(t, i, r, s);
          }
          onDragStarted(e) {
            super.onDragStarted(e);
            const { x1: t, x2: i, y1: n, y2: d } = this.getAnnotationBorders(),
              h = new r.Point(t, n);
            let u = t,
              c = n;
            const p = Math.abs((n - d) / 2),
              g = Math.abs((t - i) / 2);
            this.verticalAnchorPoint === s.EVerticalAnchorPoint.Center &&
              (c += p),
              this.horizontalAnchorPoint === s.EHorizontalAnchorPoint.Center &&
                (u += g);
            const y = (0, a.translateFromCanvasToSeriesViewRect)(
              new r.Point(e.mousePoint.x, e.mousePoint.y),
              this.parentSurface.seriesViewRect
            );
            return (
              !!y &&
              (h &&
              this.canDragPoint(l.EDraggingGripPoint.x1y1) &&
              (0, o.calcDistance)(
                u,
                c,
                (0, a.translateToNotScaled)(y.x),
                (0, a.translateToNotScaled)(y.y)
              ) < this.annotationsGripsRadius
                ? ((this.adornerDraggingPoint = l.EDraggingGripPoint.x1y1), !0)
                : !(
                    !this.canDragPoint(l.EDraggingGripPoint.Body) ||
                    !this.clickToSelect(e) ||
                    ((this.adornerDraggingPoint = l.EDraggingGripPoint.Body), 0)
                  ))
            );
          }
          delete() {
            this.clear(), (this.isDeleted = !0);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                xCoordShift: this.xCoordShift,
                yCoordShift: this.yCoordShift,
                verticalAnchorPoint: this.verticalAnchorPoint,
                horizontalAnchorPoint: this.horizontalAnchorPoint,
              };
            return Object.assign(e.options, t), e;
          }
          get svg() {
            return this.svgProperty;
          }
          clear() {
            this.parentSurface &&
              !this.parentSurface.isDeleted &&
              this.svg &&
              ((this.nextSibling = this.svg.nextElementSibling),
              this.svg.parentNode.removeChild(this.svg),
              this.setSvg(void 0));
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            const {
                x1: i,
                x2: r,
                y1: s,
                y2: a,
              } = this.getAnnotationBorders(!0),
              l = e / n.DpiHelper.PIXEL_RATIO,
              d = t / n.DpiHelper.PIXEL_RATIO;
            return (0, o.testIsInBounds)(l, d, i, a, r, s);
          }
          updateAdornerInner() {
            if ((this.deleteAdorner(), this.isSelected)) {
              const {
                  x1: e,
                  x2: t,
                  y1: i,
                  y2: r,
                } = this.getAdornerAnnotationBorders(!0, !0),
                s = this.svgStringAdornerTemplate(e, i, t, r);
              this.svgAdorner = h.annotationHelpers.createSvg(
                s,
                this.svgAdornerRoot
              );
            }
          }
          get svgRoot() {
            return this.svgRootProperty;
          }
          selectSvgRoot() {
            if (this.annotationLayer === d.EAnnotationLayer.AboveChart)
              this.svgRootProperty = this.parentSurface.domSvgContainer;
            else if (this.annotationLayer === d.EAnnotationLayer.BelowChart)
              this.svgRootProperty = this.parentSurface.domSvgContainer;
            else {
              if (this.annotationLayer !== d.EAnnotationLayer.Background)
                throw new Error(
                  `Unexpected annotationLayer value: "${this.annotationLayer}!"`
                );
              this.svgRootProperty =
                this.parentSurface.domBackgroundSvgContainer;
            }
          }
          setSvgAttribute(e, t) {
            const i = t.toString(10);
            this.svg.setAttribute(e, i);
          }
          setSvg(e) {
            this.svgProperty = e;
          }
          notifyPropertyChanged(e) {
            e === u.PROPERTY.ANNOTATION_CANVAS &&
              (this.clear(), (this.nextSibling = void 0), this.selectSvgRoot()),
              super.notifyPropertyChanged(e);
          }
          calcAndSetAnnotationBorders(e, t) {
            if (!this.svg) return;
            let i = this.getX1Coordinate(e, t) + this.xCoordShift,
              r = this.getY1Coordinate(e, t) + this.yCoordShift;
            this.svgDOMRect = this.svg.getBBox();
            let o = i + this.svgDOMRect.width,
              a = r + this.svgDOMRect.height;
            this.verticalAnchorPoint === s.EVerticalAnchorPoint.Bottom &&
              (a = r - this.svgDOMRect.height),
              this.verticalAnchorPoint === s.EVerticalAnchorPoint.Center &&
                ((a = r + this.svgDOMRect.height / 2),
                (r -= this.svgDOMRect.height / 2)),
              this.horizontalAnchorPoint === s.EHorizontalAnchorPoint.Right &&
                (o = i - this.svgDOMRect.width),
              this.horizontalAnchorPoint === s.EHorizontalAnchorPoint.Center &&
                ((o = i + this.svgDOMRect.width / 2),
                (i -= this.svgDOMRect.width / 2)),
              this.setAnnotationBorders(i, o, r, a);
          }
          svgStringAdornerTemplate(e, t, i, r) {
            let o = e,
              a = t;
            const n = Math.abs((t - r) / 2),
              d = Math.abs((e - i) / 2);
            return (
              this.verticalAnchorPoint === s.EVerticalAnchorPoint.Center &&
                (a += n),
              this.horizontalAnchorPoint === s.EHorizontalAnchorPoint.Center &&
                (o += d),
              `<svg xmlns="http://www.w3.org/2000/svg">\n        <rect x="${e}" y="${t}" width="${Math.abs(
                e - i
              )}" height="${Math.abs(t - r)}" stroke="${
                this.selectionBoxStroke
              }" stroke-width="${
                this.selectionBoxThickness
              }px" fill="none" />\n        ${
                this.canDragPoint(l.EDraggingGripPoint.x1y1)
                  ? this.getAnnotationGripSvg(o, a)
                  : ""
              }\n      </svg>`
            );
          }
        }
        t.SvgAnnotationBase = c;
      },
      49617: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TextAnnotation = void 0);
        const r = i(87108),
          s = i(92415),
          o = i(91380),
          a = i(84736),
          n = i(84690);
        class l extends n.SvgAnnotationBase {
          constructor(e) {
            var t, i, s, o, n, l, d, h;
            super(e),
              (this.type = a.EAnnotationType.SVGTextAnnotation),
              (this.textProperty = "DEFAULT TEXT"),
              (this.textColorProperty = "#ffffff"),
              (this.fontSizeProperty = 14),
              (this.fontFamilyProperty = "Arial"),
              (this.fontWeightProperty = "Normal"),
              (this.paddingProperty = r.Thickness.fromNumber(0)),
              (this.classNameProperty = "scichart__text-annotation"),
              (this.isDirty = !0),
              (this.textProperty =
                null !== (t = null == e ? void 0 : e.text) && void 0 !== t
                  ? t
                  : this.textProperty),
              (this.textColorProperty =
                null !== (i = null == e ? void 0 : e.textColor) && void 0 !== i
                  ? i
                  : this.textColorProperty),
              (this.fontSizeProperty =
                null !== (s = null == e ? void 0 : e.fontSize) && void 0 !== s
                  ? s
                  : this.fontSizeProperty),
              (this.fontFamilyProperty =
                null !== (o = null == e ? void 0 : e.fontFamily) && void 0 !== o
                  ? o
                  : this.fontFamilyProperty),
              (this.backgroundProperty =
                null !== (n = null == e ? void 0 : e.background) && void 0 !== n
                  ? n
                  : this.backgroundProperty),
              (this.paddingProperty =
                null !== (l = null == e ? void 0 : e.padding) && void 0 !== l
                  ? l
                  : this.paddingProperty),
              (this.classNameProperty =
                null !== (d = null == e ? void 0 : e.className) && void 0 !== d
                  ? d
                  : this.classNameProperty),
              (this.fontWeight =
                null !== (h = null == e ? void 0 : e.fontWeight) && void 0 !== h
                  ? h
                  : this.fontWeight);
          }
          get text() {
            return this.textProperty;
          }
          set text(e) {
            this.textProperty !== e &&
              ((this.textProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TEXT));
          }
          get background() {
            return this.backgroundProperty;
          }
          set background(e) {
            this.backgroundProperty !== e &&
              ((this.backgroundProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.BACKGROUND_COLOR));
          }
          get padding() {
            return this.paddingProperty;
          }
          set padding(e) {
            this.paddingProperty !== e &&
              ((this.paddingProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.PADDING));
          }
          get className() {
            return this.classNameProperty;
          }
          set className(e) {
            this.classNameProperty !== e &&
              ((this.classNameProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.CLASS_NAME));
          }
          get textColor() {
            return this.textColorProperty;
          }
          set textColor(e) {
            this.textColorProperty !== e &&
              ((this.textColorProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TEXT_STROKE));
          }
          get fontSize() {
            return this.fontSizeProperty;
          }
          set fontSize(e) {
            this.fontSizeProperty !== e &&
              ((this.fontSizeProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.FONT_SIZE));
          }
          get fontFamily() {
            return this.fontFamilyProperty;
          }
          set fontFamily(e) {
            this.fontFamilyProperty !== e &&
              ((this.fontFamilyProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.FONT_FAMILY));
          }
          get fontWeight() {
            return this.fontWeightProperty;
          }
          set fontWeight(e) {
            this.fontWeightProperty !== e &&
              ((this.fontWeightProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.FONT_WEIGHT));
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                fontFamily: this.fontFamily,
                fontSize: this.fontSize,
                fontWeight: this.fontWeight,
                text: this.text,
                textColor: this.textColor,
              };
            return Object.assign(e.options, t), e;
          }
          notifyPropertyChanged(e) {
            e !== o.PROPERTY.IS_HIDDEN &&
              e !== o.PROPERTY.X_COORD_SHIFT &&
              e !== o.PROPERTY.Y_COORD_SHIFT &&
              e !== o.PROPERTY.HORIZONTAL_ANCHOR_POINT &&
              e !== o.PROPERTY.VERTICAL_ANCHOR_POINT &&
              e !== o.PROPERTY.X1 &&
              e !== o.PROPERTY.X2 &&
              e !== o.PROPERTY.Y1 &&
              e !== o.PROPERTY.Y2 &&
              (this.isDirty = !0),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          create(e, t, i, r) {
            this.isDirty || this.isSelected
              ? (this.svg && this.clear(),
                this.setSvg(this.createSvg()),
                this.calcAndSetAnnotationBorders(e, t),
                this.updateAdornerInner(),
                (this.isDirty = !1))
              : this.calcAndSetAnnotationBorders(e, t);
          }
          createSvg() {
            const e = this.padding.left;
            let t = this.fontSize + this.padding.top;
            const i = `<svg id="scichart__text-annotation-${this.id}" class="${this.className}">\n            <text x="${e}" y="${t}" fill="${this.textColor}"  font-size="${this.fontSize}" font-family="${this.fontFamily}" font-weight="${this.fontWeight}">${this.text}</text>\n        </svg>`,
              r = s.annotationHelpers.createSvg(
                i,
                this.svgRoot,
                this.nextSibling
              );
            return (
              this.background &&
                this.attachSvgBackgroundRect(r, this.background, this.padding),
              r
            );
          }
          attachSvgBackgroundRect(e, t, i) {
            const r = e.getBoundingClientRect(),
              s = r.width + i.left + i.right,
              o = r.height + i.top + i.bottom,
              a = document.createElementNS(
                "http://www.w3.org/2000/svg",
                "rect"
              );
            a.setAttribute("x", "0"),
              a.setAttribute("y", "0"),
              a.setAttribute("width", `${s}`),
              a.setAttribute("height", `${o}`),
              a.setAttribute("fill", `${t}`),
              e.insertBefore(a, e.firstChild);
          }
        }
        t.TextAnnotation = l;
      },
      98409: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.VerticalLineAnnotation = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(87459),
          a = i(38215),
          n = i(21670),
          l = i(32873),
          d = i(21915),
          h = i(3441),
          u = i(86127),
          c = i(31306),
          p = i(84736),
          g = i(28677);
        class y extends g.LineAnnotation {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type =
                p.EAnnotationType.RenderContextVerticalLineAnnotation),
              (this.dragOnLine = !0),
              (this.dragOnLabel = !0),
              (null == e ? void 0 : e.x2) && (this.x2 = e.x2),
              (null == e ? void 0 : e.y2) && (this.y2 = e.y2),
              (this.dragOnLine =
                null !== (t = null == e ? void 0 : e.dragOnLine) && void 0 !== t
                  ? t
                  : this.dragOnLine),
              (this.dragOnLabel =
                null !== (i = null == e ? void 0 : e.dragOnLabel) &&
                void 0 !== i
                  ? i
                  : this.dragOnLabel),
              (this.verticalAlignment =
                null !== (r = null == e ? void 0 : e.verticalAlignment) &&
                void 0 !== r
                  ? r
                  : this.verticalAlignment);
          }
          get y2() {
            throw Error(
              "y2 property is not supported for VerticalLineAnnotation"
            );
          }
          set y2(e) {
            throw Error(
              "y2 property is not supported for VerticalLineAnnotation"
            );
          }
          get x2() {
            throw Error(
              "x2 property is not supported for VerticalLineAnnotation"
            );
          }
          set x2(e) {
            throw Error(
              "x2 property is not supported for VerticalLineAnnotation"
            );
          }
          drawWithContext(e, t, i, a) {
            r.Guard.notNull(e, "renderContext"),
              r.Guard.notNull(t, "xCalc"),
              r.Guard.notNull(i, "yCalc");
            const n = (0, d.getWebGlPenFromCache)(this.strokePenCache),
              {
                annotationCoord: c,
                lineAnnotationEdgeCoord: p,
                horizontalAxis: g,
                verticalAxis: y,
                horizontalAxisCoordinateMode: f,
                verticalAxisCoordinateMode: v,
                horizontalCoordinateCalculator: m,
                verticalCoordinateCalculator: S,
                isAlignmentTop: P,
              } = this.getDrawConfig(t, i);
            if (!g || !y) return;
            let C = a.height,
              x = 0;
            P && ((C = C = 0), (x = x = a.height));
            const b = this.getValue(p, S, v),
              A = b || 0 === b;
            A && (x = x = this.getY1Coordinate(t, i));
            const T = this.getX1Coordinate(t, i),
              E = T;
            this.setAnnotationBorders(T, E, C, x);
            const R = this.getCoordinate(p, S, v),
              w = this.getCoordinate(c, m, f),
              D = w >= 0 && w <= g.parentSurface.seriesViewRect.width,
              L = P ? R >= 0 : R <= y.parentSurface.seriesViewRect.height;
            if (D && (!A || L)) {
              const t = Object.assign(Object.assign({}, y.labelStyle), {
                  color: this.axisLabelStroke,
                  fontSize: this.axisFontSize * u.DpiHelper.PIXEL_RATIO,
                  fontFamily: this.axisFontFamily,
                }),
                i = (0, h.drawLineAnnotation)(
                  g,
                  e,
                  this.labelPlacement,
                  this.labelValue,
                  T,
                  E,
                  C,
                  x,
                  t,
                  this.axisLabelFill,
                  n,
                  a,
                  this.showLabel,
                  this.opacity,
                  null,
                  this.verticalAlignment
                );
              if (i) {
                const e = (0, l.translateFromCanvasToSeriesViewRect)(
                    new s.Point(i.left, i.top),
                    a,
                    !0
                  ),
                  t = (0, l.translateFromCanvasToSeriesViewRect)(
                    new s.Point(i.right, i.bottom),
                    a,
                    !0
                  );
                this.labelRect = o.Rect.createWithPoints(e, t);
              }
            }
            this.dragOnLine && this.updateAdornerInner();
          }
          onDragStarted(e) {
            return this.dragOnLine
              ? super.onDragStarted(e)
              : !!(
                  this.dragOnLabel &&
                  this.labelRect &&
                  this.clickToSelect(e)
                ) &&
                  ((this.adornerDraggingPoint = c.EDraggingGripPoint.Body), !0);
          }
          checkIsClickedOnAnnotationInternal(e, t) {
            if (
              this.dragOnLine &&
              super.checkIsClickedOnAnnotationInternal(e, t)
            )
              return !0;
            if (this.dragOnLabel && this.labelRect) {
              const { left: i, top: r, right: s, bottom: o } = this.labelRect;
              if ((0, n.testIsInBounds)(e, t, i, o, s, r)) return !0;
            }
            return !1;
          }
          getDrawConfig(e, t) {
            const i = this.xAxisId,
              r = this.parentSurface.getXAxisById(i),
              s = this.yAxisId,
              o = this.parentSurface.getYAxisById(s),
              n = {
                annotationCoord: this.x1,
                lineAnnotationEdgeCoord: this.y1,
                horizontalAxis: r,
                verticalAxis: o,
                horizontalAxisCoordinateMode: this.xCoordinateMode,
                verticalAxisCoordinateMode: this.yCoordinateMode,
                horizontalCoordinateCalculator: e,
                verticalCoordinateCalculator: t,
                isAlignmentTop:
                  (null == r ? void 0 : r.axisAlignment) ===
                  a.EAxisAlignment.Top,
              },
              l = {
                annotationCoord: this.y1,
                lineAnnotationEdgeCoord: this.x1,
                horizontalAxis: o,
                verticalAxis: r,
                horizontalAxisCoordinateMode: this.yCoordinateMode,
                verticalAxisCoordinateMode: this.xCoordinateMode,
                horizontalCoordinateCalculator: t,
                verticalCoordinateCalculator: e,
                isAlignmentTop:
                  (null == o ? void 0 : o.axisAlignment) ===
                  a.EAxisAlignment.Top,
              };
            return this.isVerticalChart ? l : n;
          }
        }
        t.VerticalLineAnnotation = y;
      },
      92415: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.annotationHelpers = void 0),
          (t.annotationHelpers = {
            createSvg: (e, t, i) => {
              const r = document.createRange().createContextualFragment(e);
              return i
                ? (t.insertBefore(r, i), i.previousElementSibling)
                : (t.appendChild(r), t.lastChild);
            },
            calcNewApex: (e, t, i, r, s) => ({
              x1y1: { x: e, y: t },
              x2y1: s ? { x: e, y: r } : { x: i, y: t },
              x1y2: s ? { x: i, y: t } : { x: e, y: r },
              x2y2: { x: i, y: r },
            }),
          });
      },
      91380: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DISTANCE_TO_LINE = t.ADORNER_GRIP_RADIUS = t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).ADORNER_TEMPLATE =
            "ADORNER_TEMPLATE"),
          (i.ANNOTATION_CANVAS = "ANNOTATION_CANVAS"),
          (i.RESIZE_DIRECTIONS = "RESIZE_DIRECTIONS"),
          (i.AXIS_LABELS_FILL = "AXIS_LABELS_FILL"),
          (i.AXIS_LABELS_STROKE = "AXIS_LABELS_STROKE"),
          (i.AXIS_FONT_FAMILY = "AXIS_FONT_FAMILY"),
          (i.AXIS_FONT_SIZE = "AXIS_FONT_SIZE"),
          (i.BACKGROUND_COLOR = "BACKGROUND_COLOR"),
          (i.CLASS_NAME = "CLASS_NAME"),
          (i.COLOR = "COLOR"),
          (i.CONTAINER_BACKGROUND = "CONTAINER_BACKGROUND"),
          (i.FILL = "FILL"),
          (i.FONT_FAMILY = "FONT_FAMILY"),
          (i.FONT_SIZE = "FONT_SIZE"),
          (i.FONT_STYLE = "FONT_STYLE"),
          (i.FONT_WEIGHT = "FONT_WEIGHT"),
          (i.FORMATTED_VALUE = "FORMATTED_VALUE"),
          (i.HORIZONTAL_ANCHOR_POINT = "HORIZONTAL_ANCHOR_POINT"),
          (i.IMAGE = "IMAGE"),
          (i.IMAGE_HEIGHT = "IMAGE_HEIGHT"),
          (i.IMAGE_WIDTH = "IMAGE_WIDTH"),
          (i.IS_EDITABLE = "IS_EDITABLE"),
          (i.IS_HIDDEN = "IS_HIDDEN"),
          (i.IS_SELECTED = "IS_SELECTED"),
          (i.IS_HOVERED = "IS_HOVERED"),
          (i.LABEL_PLACEMENT = "LABEL_PLACEMENT"),
          (i.LABEL_VALUE = "LABEL_VALUE"),
          (i.MINIMUM_WIDTH = "MINIMUM_WIDTH"),
          (i.MINIMUM_HEIGHT = "MINIMUM_HEIGHT"),
          (i.OPACITY = "OPACITY"),
          (i.PADDING = "PADDING"),
          (i.PARENT_SURFACE = "PARENT_SURFACE"),
          (i.SERIES_INFO = "SERIES_INFO"),
          (i.SERIES_INFOS = "SERIES_INFOS"),
          (i.STROKE = "STROKE"),
          (i.STROKE_THICKNESS = "STROKE_THICKNESS"),
          (i.STROKE_DASH_ARRAY = "STROKE_DASH_ARRAY"),
          (i.SHOW_LABEL = "SHOW_LABEL"),
          (i.TEXT = "TEXT"),
          (i.TEXT_STROKE = "TEXT_STROKE"),
          (i.TITLE = "TITLE"),
          (i.TOOLTIP_LEGEND_OFFSET_X = "TOOLTIP_LEGEND_OFFSET_X"),
          (i.TOOLTIP_LEGEND_OFFSET_Y = "TOOLTIP_LEGEND_OFFSET_Y"),
          (i.TOOLTIP_LEGEND_TEMPLATE = "TOOLTIP_LEGEND_TEMPLATE"),
          (i.TOOLTIP_DATA_TEMPLATE = "TOOLTIP_DATA_TEMPLATE"),
          (i.TOOLTIP_SVG_TEMPLATE = "TOOLTIP_SVG_TEMPLATE"),
          (i.VERTICAL_ANCHOR_POINT = "VERTICAL_ANCHOR_POINT"),
          (i.X1 = "X1"),
          (i.X2 = "X2"),
          (i.XAXIS_ID = "XAXIS_ID"),
          (i.X_COORDINATE_MODE = "X_COORDINATE_MODE"),
          (i.X_COORD_SHIFT = "X_COORD_SHIFT"),
          (i.Y1 = "Y1"),
          (i.Y2 = "Y2"),
          (i.YAXIS_ID = "YAXIS_ID"),
          (i.Y_COORDINATE_MODE = "Y_COORDINATE_MODE"),
          (i.Y_COORD_SHIFT = "Y_COORD_SHIFT"),
          (i.PLACEMENT_DIV_ID = "PLACEMENT_DIV_ID"),
          (i.ROTATION = "ROTATION"),
          (i.ADORNER_STROKE = "ADORNER_STROKE"),
          (i.ADORNER_FILL = "ADORNER_FILL"),
          (i.ADORNER_RADIUS = "ADORNER_RADIUS"),
          (i.SELECTION_STROKE = "SELECTION_STROKE"),
          (i.SELECTION_DELTA = "SELECTION_DELTA"),
          (i.SELECTION_THICKNESS = "SELECTION_THICKNESS"),
          (i.DRAGPOINTS = "DRAGPOINTS"),
          (i.MULTILINE_ALIGNMENT = "MULTILINE_ALIGNMENT"),
          (i.WRAP_TO = "WRAP_TO"),
          (i.LINE_SPACING = "LINE_SPACING"),
          (i.SCALE = "SCALE"),
          (i.OUTLINE = "OUTLINE"),
          (t.ADORNER_GRIP_RADIUS = 10),
          (t.DISTANCE_TO_LINE = 10);
      },
      57397: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisBase2D = t.EClipMode = void 0);
        const r = i(45921),
          s = i(10276),
          o = i(31194),
          a = i(56744),
          n = i(98140),
          l = i(87108),
          d = i(38215),
          h = i(11043),
          u = i(3777),
          c = i(63415),
          p = i(86699),
          g = i(48008),
          y = i(21915),
          f = i(78623),
          v = i(16185),
          m = i(65707),
          S = i(22019),
          P = i(63458),
          C = i(94389),
          x = i(98353),
          b = i(14184),
          A = i(86127),
          T = i(42241),
          E = i(87673),
          R = i(74736),
          w = i(14790),
          D = i(8900);
        var L;
        ((L = t.EClipMode || (t.EClipMode = {}))[(L.None = 0)] = "None"),
          (L[(L.StretchAtExtents = 1)] = "StretchAtExtents"),
          (L[(L.ClipAtMin = 2)] = "ClipAtMin"),
          (L[(L.ClipAtMax = 3)] = "ClipAtMax"),
          (L[(L.ClipAtExtents = 4)] = "ClipAtExtents");
        class M extends T.AxisCore {
          constructor(e, t) {
            var i, s, o, a, n, d, u, p, g, v, m, S;
            super(t),
              (this.axisLayoutState = new E.AxisLayoutState()),
              (this.getlabelStyleProxy = (e) =>
                new Proxy(e, {
                  set: (e, t, i) => (
                    (e[t] = i),
                    this.notifyPropertyChanged(D.PROPERTY.TEXT_STYLE),
                    (this.dpiAdjustedLabelStyleCache = void 0),
                    !0
                  ),
                })),
              (this.labelStyleProperty = this.getlabelStyleProxy({
                fontSize: 14,
                fontFamily: "Arial",
                color: b.SciChartSurfaceBase.DEFAULT_THEME.tickTextBrush,
                fontWeight: "normal",
                fontStyle: "normal",
                padding: l.Thickness.fromString("2 4 2 4"),
                alignment: c.ELabelAlignment.Auto,
              })),
              (this.isInnerAxisProperty = !1),
              (this.isPrimaryAxisProperty = !1),
              (this.axisBorderProperty = {
                borderBottom: 0,
                borderLeft: 0,
                borderRight: 0,
                borderTop: 0,
                color: b.SciChartSurfaceBase.DEFAULT_THEME.axisBorder,
                border: 0,
              }),
              (this.offsetProperty = 0),
              (this.offsetOverrideProperty = void 0),
              (this.tickCache = void 0),
              (this.clipToXRangeProperty = !0),
              (this.isStaticAxisProperty = !1),
              (this.webAssemblyContext2D = e),
              (this.penCacheForMajorGridLines = new y.Pen2DCache(e)),
              (this.penCacheForMinorGridLines = new y.Pen2DCache(e)),
              (this.penCacheForMajorTickLines = new y.Pen2DCache(e)),
              (this.penCacheForMinorTickLines = new y.Pen2DCache(e)),
              (this.solidBrushCacheAxisBands = new f.SolidBrushCache(e)),
              (this.solidBrushCacheAxisBackground = new f.SolidBrushCache(e)),
              (this.axisRenderer = new R.AxisRenderer(e)),
              (this.axisRenderer.keepLabelsWithinAxis =
                null !== (i = null == t ? void 0 : t.keepLabelsWithinAxis) &&
                void 0 !== i
                  ? i
                  : this.axisRenderer.keepLabelsWithinAxis),
              (this.axisRenderer.hideOverlappingLabels =
                null !== (s = null == t ? void 0 : t.hideOverlappingLabels) &&
                void 0 !== s
                  ? s
                  : this.axisRenderer.hideOverlappingLabels),
              (this.axisRenderer.axisThickness =
                null !== (o = null == t ? void 0 : t.axisThickness) &&
                void 0 !== o
                  ? o
                  : this.axisRenderer.axisThickness),
              (this.axisTitleRenderer = new w.AxisTitleRenderer(e)),
              (this.isStaticAxis =
                null !== (a = null == t ? void 0 : t.isStaticAxis) &&
                void 0 !== a
                  ? a
                  : this.isStaticAxisProperty),
              (this.visibleRangeLimit =
                null !== (n = null == t ? void 0 : t.visibleRangeLimit) &&
                void 0 !== n
                  ? n
                  : this.visibleRangeLimit),
              (this.visibleRangeSizeLimit =
                null !== (d = null == t ? void 0 : t.visibleRangeSizeLimit) &&
                void 0 !== d
                  ? d
                  : this.visibleRangeSizeLimit),
              (this.zoomExtentsRange = (
                null == t ? void 0 : t.zoomExtentsToInitialRange
              )
                ? this.visibleRange
                : null == t
                ? void 0
                : t.zoomExtentsRange),
              (this.axisAlignment =
                null !== (u = null == t ? void 0 : t.axisAlignment) &&
                void 0 !== u
                  ? u
                  : this.axisAlignment),
              (this.axisTitle =
                null !== (p = null == t ? void 0 : t.axisTitle) && void 0 !== p
                  ? p
                  : this.axisTitle),
              (this.labelStyle = this.getlabelStyleProxy(
                Object.assign(
                  Object.assign({}, this.labelStyle),
                  null == t ? void 0 : t.labelStyle
                )
              )),
              (this.axisBorder = Object.assign(
                Object.assign({}, this.axisBorder),
                null == t ? void 0 : t.axisBorder
              )),
              (this.isInnerAxis =
                null !== (g = null == t ? void 0 : t.isInnerAxis) &&
                void 0 !== g
                  ? g
                  : this.isInnerAxis),
              (this.stackedAxisLength =
                null !== (v = null == t ? void 0 : t.stackedAxisLength) &&
                void 0 !== v
                  ? v
                  : this.stackedAxisLength),
              (this.solidBrushCacheBorder = new f.SolidBrushCache(e)),
              (null == t ? void 0 : t.labelProvider) &&
                ("getLabels" in (null == t ? void 0 : t.labelProvider) ||
                  (t.labelProvider = (0, r.createType)(
                    h.EBaseType.LabelProvider,
                    t.labelProvider.type,
                    e,
                    t.labelProvider.options
                  ))),
              (this.autoRangeAnimationProperty =
                null == t ? void 0 : t.autoRangeAnimation),
              (this.backgroundColor =
                null !== (m = null == t ? void 0 : t.backgroundColor) &&
                void 0 !== m
                  ? m
                  : this.backgroundColor),
              (this.offsetOverrideProperty =
                null == t ? void 0 : t.overrideOffset),
              (this.clipToXRangeProperty =
                null !== (S = null == t ? void 0 : t.clipToXRange) &&
                void 0 !== S
                  ? S
                  : this.clipToXRange);
          }
          get labelProvider() {
            return this.labelProviderProperty;
          }
          set labelProvider(e) {
            var t;
            null === (t = this.labelProviderProperty) ||
              void 0 === t ||
              t.detachedFromAxis(),
              (this.labelProviderProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.LABEL_PROVIDER);
          }
          get axisRenderer() {
            return this.axisRendererProperty;
          }
          set axisRenderer(e) {
            (this.axisRendererProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.AXIS_RENDERER);
          }
          get isHorizontalAxis() {
            return (0, d.getIsHorizontal)(this.axisAlignment);
          }
          get isAxisFlipped() {
            return !this.isXAxis;
          }
          get axisAlignment() {
            return this.axisAlignmentProperty;
          }
          set axisAlignment(e) {
            this.axisAlignmentProperty !== e &&
              ((this.axisAlignmentProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.AXIS_ALIGNMENT));
          }
          get visibleRangeLimit() {
            return this.visibleRangeLimitProperty;
          }
          set visibleRangeLimit(e) {
            n.NumberRange.areEqual(this.visibleRangeLimitProperty, e) ||
              ((this.visibleRangeLimitProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.VISIBLE_RANGE_LIMIT));
          }
          get visibleRangeSizeLimit() {
            return this.visibleRangeSizeLimitProperty;
          }
          set visibleRangeSizeLimit(e) {
            if (
              !n.NumberRange.areEqual(this.visibleRangeSizeLimitProperty, e)
            ) {
              if (e.min < 0)
                throw Error(
                  "visibleRangeSizeLimit min value must be more or equal 0"
                );
              if (e.min >= e.max)
                throw Error(
                  "visibleRangeSizeLimit min value must be less than max value"
                );
              (this.visibleRangeSizeLimitProperty = e),
                this.notifyPropertyChanged(D.PROPERTY.VISIBLE_RANGE_SIZE_LIMIT);
            }
          }
          get zoomExtentsRange() {
            return this.zoomExtentsRangeProperty;
          }
          set zoomExtentsRange(e) {
            n.NumberRange.areEqual(this.zoomExtentsRangeProperty, e) ||
              ((this.zoomExtentsRangeProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.ZOOMEXTENTS_RANGE));
          }
          get isInnerAxis() {
            return this.isInnerAxisProperty;
          }
          set isInnerAxis(e) {
            this.isInnerAxisProperty !== e &&
              ((this.isInnerAxisProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.IS_INNER_AXIS));
          }
          get isPrimaryAxis() {
            return this.isPrimaryAxisProperty;
          }
          set isPrimaryAxis(e) {
            this.isPrimaryAxisProperty !== e &&
              ((this.isPrimaryAxisProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.IS_PRIMARY_AXIS)),
              e &&
                !this.isStackedAxis &&
                (this.isXAxis
                  ? this.parentSurface.xAxes
                  : this.parentSurface.yAxes
                )
                  .asArray()
                  .forEach((e) => {
                    e === this || e.isStackedAxis || (e.isPrimaryAxis = !1);
                  });
          }
          get isStackedAxis() {
            return this.parentSurface.layoutManager.getAxisLayoutStrategy(
              this.axisAlignment,
              this.isInnerAxis
            ).isStacked;
          }
          get backgroundColor() {
            return this.backgroundColorProperty;
          }
          set backgroundColor(e) {
            (this.backgroundColorProperty = e),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          get stackedAxisLength() {
            return this.stackedAxisLengthProperty;
          }
          set stackedAxisLength(e) {
            this.stackedAxisLengthProperty !== e &&
              ((this.stackedAxisLengthProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.AXIS_LENGTH));
          }
          get axisLength() {
            var e, t;
            const { seriesViewRect: i } = this.parentSurface;
            if (!i)
              return null !== (e = this.axisLengthProperty) && void 0 !== e
                ? e
                : 0;
            const r = this.isHorizontalAxis ? i.width : i.height;
            return null !== (t = this.axisLengthProperty) && void 0 !== t
              ? t
              : r;
          }
          set axisLength(e) {
            this.axisLengthProperty !== e &&
              ((this.axisLengthProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.AXIS_LENGTH));
          }
          get offset() {
            var e;
            return null !== (e = this.offsetOverrideProperty) && void 0 !== e
              ? e
              : this.offsetProperty;
          }
          overrideOffset(e) {
            this.offsetOverrideProperty !== e &&
              ((this.offsetOverrideProperty = e),
              this.clearCoordCalcCache(),
              this.notifyPropertyChanged(D.PROPERTY.OFFSET));
          }
          set offset(e) {
            this.offsetProperty !== e &&
              ((this.offsetProperty = e),
              void 0 === this.offsetOverrideProperty &&
                (this.clearCoordCalcCache(),
                this.notifyPropertyChanged(D.PROPERTY.OFFSET)));
          }
          get isVerticalChart() {
            return this.isXAxis
              ? !![d.EAxisAlignment.Left, d.EAxisAlignment.Right].includes(
                  this.axisAlignment
                )
              : !![d.EAxisAlignment.Top, d.EAxisAlignment.Bottom].includes(
                  this.axisAlignment
                );
          }
          get dpiAdjustedLabelStyle() {
            return (
              this.dpiAdjustedLabelStyleCache ||
                (this.dpiAdjustedLabelStyleCache = A.DpiHelper.adjustTextStyle(
                  this.labelStyleProperty
                )),
              this.dpiAdjustedLabelStyleCache
            );
          }
          get labelStyle() {
            return this.labelStyleProperty;
          }
          set labelStyle(e) {
            const t = Object.assign(Object.assign({}, this.labelStyle), e);
            (this.labelStyleProperty = this.getlabelStyleProxy(t)),
              this.notifyPropertyChanged(D.PROPERTY.TEXT_STYLE),
              (this.dpiAdjustedLabelStyleCache = void 0);
          }
          get axisBorder() {
            return this.axisBorderProperty;
          }
          set axisBorder(e) {
            var t, i, r, s, o, a;
            (this.axisBorder.borderTop =
              null !== (t = e.borderTop) && void 0 !== t
                ? t
                : this.axisBorder.borderTop),
              (this.axisBorder.borderLeft =
                null !== (i = e.borderLeft) && void 0 !== i
                  ? i
                  : this.axisBorder.borderLeft),
              (this.axisBorder.borderBottom =
                null !== (r = e.borderBottom) && void 0 !== r
                  ? r
                  : this.axisBorder.borderBottom),
              (this.axisBorder.borderRight =
                null !== (s = e.borderRight) && void 0 !== s
                  ? s
                  : this.axisBorder.borderRight),
              (this.axisBorder.border =
                null !== (o = e.border) && void 0 !== o
                  ? o
                  : this.axisBorder.border),
              (this.axisBorder.color =
                null !== (a = e.color) && void 0 !== a
                  ? a
                  : this.axisBorder.color),
              this.notifyPropertyChanged(D.PROPERTY.BORDER);
          }
          get autoRangeAnimation() {
            return this.autoRangeAnimationProperty;
          }
          set autoRangeAnimation(e) {
            this.autoRangeAnimationProperty = Object.assign(
              Object.assign({}, this.autoRangeAnimation),
              e
            );
          }
          get clipToXRange() {
            return this.clipToXRangeProperty;
          }
          set clipToXRange(e) {
            this.clipToXRangeProperty !== e &&
              ((this.clipToXRangeProperty = e),
              this.notifyPropertyChanged(D.PROPERTY.DRAW_ONLY_WITHIN_XRANGE));
          }
          get isStaticAxis() {
            return this.isStaticAxisProperty;
          }
          set isStaticAxis(e) {
            (this.isStaticAxisProperty = e),
              (this.tickCoordinatesProvider = e
                ? new S.StaticTickCoordinatesProvider()
                : new m.DefaultTickCoordinatesProvider());
          }
          applyTheme(e) {
            const t = this.parentSurface.previousThemeProvider;
            this.axisBandsFill === t.axisBandsFill &&
              (this.axisBandsFill = e.axisBandsFill),
              this.labelStyle.color === t.tickTextBrush &&
                (this.labelStyle = { color: e.tickTextBrush }),
              this.minorGridLineStyle.color === t.minorGridLineBrush &&
                (this.minorGridLineStyle = { color: e.minorGridLineBrush }),
              this.majorGridLineStyle.color === t.majorGridLineBrush &&
                (this.majorGridLineStyle = { color: e.majorGridLineBrush }),
              this.minorTickLineStyle.color === t.minorGridLineBrush &&
                (this.minorTickLineStyle = { color: e.minorGridLineBrush }),
              this.majorTickLineStyle.color === t.majorGridLineBrush &&
                (this.majorTickLineStyle = { color: e.majorGridLineBrush }),
              this.axisTitleStyle.color === t.axisTitleColor &&
                (this.axisTitleStyle = { color: e.axisTitleColor });
          }
          onAttach(e, t, i) {
            (this.parentSurface = e),
              (this.axisTitleRenderer.parentSurface = e),
              this.setIsXAxis(t),
              (this.isPrimaryAxisProperty = i);
          }
          onDetach() {
            (this.parentSurface = void 0),
              (this.isPrimaryAxisProperty = !1),
              (this.invalidateParentCallback = void 0);
          }
          measure() {
            if (this.isVisible) {
              const { majorTickLabels: e } = this.getTicks(!0),
                t = this.drawMinorTickLines || this.drawMajorTickLines;
              b.DebugForDpi &&
                console.log(
                  `Measure. fontSize: ${this.labelStyle.fontSize}, dpiAdjusted: ${this.dpiAdjustedLabelStyle.fontSize}`
                ),
                this.axisRenderer.measure(
                  this.isHorizontalAxis,
                  this.dpiAdjustedLabelStyle,
                  e,
                  this.getTicksMaxSize(),
                  this.labelProvider,
                  this.drawLabels,
                  t
                ),
                this.axisTitleRenderer.measure(
                  this.axisTitle,
                  this.dpiAdjustedAxisTitleStyle,
                  this.axisAlignment
                );
            } else
              (this.axisRenderer.desiredHeight = 0),
                (this.axisRenderer.desiredWidth = 0),
                (this.axisTitleRenderer.desiredHeight = 0),
                (this.axisTitleRenderer.desiredWidth = 0);
            this.isMeasured = !0;
          }
          onDpiChanged() {
            this.dpiAdjustedLabelStyleCache = void 0;
          }
          prepareRenderData() {
            this.getCurrentCoordinateCalculator();
          }
          getCurrentCoordinateCalculator() {
            return super.getCurrentCoordinateCalculator();
          }
          draw(e) {
            if (!this.getIsValidForDrawing()) return;
            const t = (0, v.calculateAbsoluteRenderLayer)(
              this.parentSurface.layersOffset,
              this.parentSurface.stepBetweenLayers,
              u.EDefaultRenderLayer.AxisBordersLayer
            );
            e.enqueueLayeredDraw(() => {
              var t, i, r, s;
              (0, C.drawBorder)(
                e,
                this.webAssemblyContext2D,
                this.solidBrushCacheBorder,
                this.viewRect,
                null !== (t = this.axisBorder.borderLeft) && void 0 !== t
                  ? t
                  : this.axisBorder.border,
                null !== (i = this.axisBorder.borderTop) && void 0 !== i
                  ? i
                  : this.axisBorder.border,
                null !== (r = this.axisBorder.borderRight) && void 0 !== r
                  ? r
                  : this.axisBorder.border,
                null !== (s = this.axisBorder.borderBottom) && void 0 !== s
                  ? s
                  : this.axisBorder.border,
                this.axisBorder.color
              );
            }, t);
            const i = this.getTicksWithCoords(),
              r = this.minorGridLineStyle,
              s = this.majorGridLineStyle,
              o = this.minorTickLineStyle,
              a = this.majorTickLineStyle,
              n = I(
                this.penCacheForMinorGridLines,
                r.color,
                r.strokeThickness,
                r.strokeDashArray
              ),
              l = I(
                this.penCacheForMajorGridLines,
                s.color,
                s.strokeThickness,
                s.strokeDashArray
              ),
              d = I(this.penCacheForMinorTickLines, o.color, o.strokeThickness),
              h = I(this.penCacheForMajorTickLines, a.color, a.strokeThickness);
            this.isPrimaryAxis && this.drawAxisBandsAndGridLines(e, i, n, l);
            const c = (0, v.calculateAbsoluteRenderLayer)(
              this.parentSurface.layersOffset,
              this.parentSurface.stepBetweenLayers,
              u.EDefaultRenderLayer.AxesLayer
            );
            e.enqueueLayeredDraw(() => {
              if (this.backgroundColorProperty) {
                this.axisRenderer.viewRect, this.axisTitleRenderer.viewRect;
                const t = this.solidBrushCacheAxisBackground.newBrush(
                  this.backgroundColorProperty,
                  !1
                );
                let i;
                if (
                  ((i = (0, P.createNativeRect)(
                    this.webAssemblyContext2D,
                    0,
                    0,
                    this.viewRect.width,
                    this.viewRect.height
                  )),
                  i)
                ) {
                  const r = (0, x.getVectorRectVertex)(
                    this.webAssemblyContext2D
                  );
                  r.push_back(i),
                    e.drawRects(r, t, this.viewRect.x, this.viewRect.y);
                }
              }
              this.drawLabels &&
                (b.DebugForDpi &&
                  console.log(
                    `Draw. fontSize: ${this.labelStyle.fontSize}, dpiAdjusted: ${this.dpiAdjustedLabelStyle.fontSize}`
                  ),
                this.axisRenderer.drawLabels(
                  e,
                  this.axisAlignment,
                  this.isInnerAxis,
                  i.majorTickLabels,
                  i.majorTickCoords,
                  this.offset,
                  this.dpiAdjustedLabelStyle,
                  this.isVerticalChart,
                  this.flippedCoordinates,
                  this.labelProvider
                )),
                this.drawMinorTickLines &&
                  this.axisRenderer.drawTicks(
                    e,
                    this.axisAlignment,
                    this.isInnerAxis,
                    i.minorTickCoords,
                    this.offset,
                    d,
                    o
                  ),
                this.drawMajorTickLines &&
                  this.axisRenderer.drawTicks(
                    e,
                    this.axisAlignment,
                    this.isInnerAxis,
                    i.majorTickCoords,
                    this.offset,
                    h,
                    a
                  ),
                this.axisTitleRenderer.draw(e),
                this.labelProvider.useNativeText &&
                  this.parentSurface.renderNativeAxisLabelsImmediately &&
                  e.endFonts(!0);
            }, c);
          }
          drawDebug(e) {
            (this.axisRenderer.drawDebug = !0),
              (() => {
                const t = this.axisRenderer.viewRect,
                  i = (0, x.getVectorRectVertex)(this.webAssemblyContext2D),
                  r = new this.webAssemblyContext2D.SCRTSolidBrush(
                    (0, g.parseColorToUIntArgb)("rgba(255,0,0,0.7)"),
                    !1
                  ),
                  s = (0, P.createNativeRect)(
                    this.webAssemblyContext2D,
                    0,
                    0,
                    t.width,
                    t.height
                  );
                i.push_back(s), e.drawRects(i, r, t.left, t.top), r.delete();
              })(),
              (() => {
                const t = this.axisTitleRenderer.viewRect,
                  i = (0, x.getVectorRectVertex)(this.webAssemblyContext2D),
                  r = new this.webAssemblyContext2D.SCRTSolidBrush(
                    (0, g.parseColorToUIntArgb)("rgba(0,255,0,0.7)"),
                    !1
                  ),
                  s = (0, P.createNativeRect)(
                    this.webAssemblyContext2D,
                    0,
                    0,
                    t.width,
                    t.height
                  );
                i.push_back(s), e.drawRects(i, r, t.left, t.top), r.delete();
              })();
          }
          getDefaultNonZeroRange() {
            return new n.NumberRange(0, 10);
          }
          getMaximumRange() {
            if (this.zoomExtentsRange) return this.zoomExtentsRange;
            let e;
            this.parentSurface &&
              this.parentSurface.renderableSeries.size() > 0 &&
              (e = this.isXAxis
                ? this.getMaxXRange()
                : this.getWindowedYRange(void 0));
            const t = this.visibleRange || this.getDefaultNonZeroRange();
            return e || t;
          }
          getWindowedYRange(e) {
            if (this.zoomExtentsRange) return this.zoomExtentsRange;
            let t;
            return (
              this.parentSurface &&
                this.parentSurface.renderableSeries
                  .asArray()
                  .filter(
                    (e) =>
                      e.yAxisId === this.id &&
                      e.isVisible &&
                      e.hasDataSeriesValues()
                  )
                  .forEach((i) => {
                    const r = (null == e ? void 0 : e.containsKey(i.xAxisId))
                        ? e.item(i.xAxisId)
                        : this.getXVisibleRange(i.xAxisId),
                      s = this.getIsXCategoryAxis(i.xAxisId);
                    if (r) {
                      const e = i.getYRange(r, s);
                      e && (t = t ? t.union(e) : e);
                    }
                  }),
              (null == t ? void 0 : t.isZero()) &&
                (t = this.coerceZeroVisibleRange(t)),
              this.growBy && t && (t = t.growBy(this.growBy)),
              (t = this.applyVisibleRangeLimit(t)),
              (t = this.applyVisibleRangeSizeLimit(t)),
              t || new n.NumberRange()
            );
          }
          scroll(e, t) {
            const i = this.visibleRange;
            if (void 0 === i) return !1;
            let r = this.getCurrentCoordinateCalculator().translateBy(e, i);
            if (this.visibleRangeLimit) {
              let e = 0;
              r.min < this.visibleRangeLimit.min
                ? (e = this.visibleRangeLimit.min - r.min)
                : this.visibleRangeLimit.max < r.max &&
                  (e = this.visibleRangeLimit.max - r.max),
                e && (r = new n.NumberRange(r.min + e, r.max + e));
            }
            return (this.visibleRange = this.applyVisibleRangeSizeLimit(r)), !0;
          }
          zoomBy(e, t) {
            const i = this.getCurrentCoordinateCalculator().zoomTranslateBy(
              e,
              t,
              this.visibleRange
            );
            if (i.max < i.min) return;
            const r = this.applyVisibleRangeLimit(i);
            this.visibleRange = this.applyVisibleRangeSizeLimit(r);
          }
          zoom(e, t, i = 0, r = s.easing.outExpo) {
            const o = this.getCurrentCoordinateCalculator(),
              a = o.getDataValue(e),
              l = o.getDataValue(t),
              d = a < l ? a : l,
              h = a < l ? l : a,
              u = this.applyVisibleRangeSizeLimit(new n.NumberRange(d, h));
            this.animateVisibleRange(u, i, r);
          }
          scale(e, t, i) {
            const r = e.max - e.min;
            let s, o;
            const a = this.flippedCoordinates ? !i : i,
              l = this.flippedCoordinates ? -t : t;
            a
              ? ((s = e.min),
                (o = l > 0 ? s + r / (1 + l) : s + r * (1 + Math.abs(l))))
              : ((o = e.max),
                (s = l > 0 ? o - r * (1 + l) : o - r / (1 + Math.abs(l)))),
              (this.visibleRange = new n.NumberRange(s, o));
          }
          animateVisibleRange(e, t, i = s.easing.outCubic, r = () => {}) {
            var a;
            return t <= 0
              ? ((this.visibleRange = e || this.visibleRange), void r())
              : (null === (a = this.visibleRangeAnimationToken) ||
                  void 0 === a ||
                  a.cancel(),
                (this.visibleRangeAnimationToken =
                  o.NumberRangeAnimator.animate(
                    this.visibleRange,
                    e,
                    t,
                    (e) => {
                      this.visibleRange = e;
                    },
                    () => {
                      (this.visibleRangeAnimationToken = void 0), r();
                    },
                    i
                  )),
                this.parentSurface.addAnimation(
                  this.visibleRangeAnimationToken
                ),
                this.visibleRangeAnimationToken);
          }
          delete() {
            (this.penCacheForMajorGridLines = (0, a.deleteSafe)(
              this.penCacheForMajorGridLines
            )),
              (this.penCacheForMinorGridLines = (0, a.deleteSafe)(
                this.penCacheForMinorGridLines
              )),
              (this.penCacheForMajorTickLines = (0, a.deleteSafe)(
                this.penCacheForMajorTickLines
              )),
              (this.penCacheForMinorTickLines = (0, a.deleteSafe)(
                this.penCacheForMinorTickLines
              )),
              (this.solidBrushCacheBorder = (0, a.deleteSafe)(
                this.solidBrushCacheBorder
              )),
              (this.solidBrushCacheAxisBands = (0, a.deleteSafe)(
                this.solidBrushCacheAxisBands
              )),
              (this.solidBrushCacheAxisBackground = (0, a.deleteSafe)(
                this.solidBrushCacheAxisBackground
              )),
              (this.axisRendererProperty = (0, a.deleteSafe)(
                this.axisRenderer
              )),
              (this.axisTitleRenderer = (0, a.deleteSafe)(
                this.axisTitleRenderer
              )),
              (this.webAssemblyContext2D = void 0),
              (this.parentSurface = void 0),
              super.delete();
          }
          toJSON() {
            const e = {
              autoRange: this.autoRange,
              autoTicks: this.autoTicks,
              axisAlignment: this.axisAlignment,
              axisBandsFill: this.axisBandsFill,
              axisBorder: this.axisBorder,
              axisTitle: this.axisTitle,
              axisTitleStyle: this.axisTitleStyle,
              drawLabels: this.drawLabels,
              drawMajorBands: this.drawMajorBands,
              drawMajorGridLines: this.drawMajorGridLines,
              drawMajorTickLines: this.drawMajorTickLines,
              drawMinorGridLines: this.drawMinorGridLines,
              drawMinorTickLines: this.drawMinorTickLines,
              flippedCoordinates: this.flippedCoordinates,
              growBy: this.growBy,
              id: this.id,
              isInnerAxis: this.isInnerAxis,
              isVisible: this.isVisible,
              labelStyle: this.labelStyle,
              majorGridLineStyle: this.majorGridLineStyle,
              majorTickLineStyle: this.majorTickLineStyle,
              maxAutoTicks: this.maxAutoTicks,
              minorGridLineStyle: this.minorGridLineStyle,
              minorTickLineStyle: this.minorTickLineStyle,
              visibleRange: this.hasDefaultVisibleRange()
                ? void 0
                : this.visibleRange,
              visibleRangeLimit: this.visibleRangeLimit,
              zoomExtentsRange: this.zoomExtentsRange,
              minorsPerMajor: this.minorsPerMajor,
              majorDelta: this.majorDelta,
              minorDelta: this.minorDelta,
              labelProvider: this.labelProvider.toJSON(),
              keepLabelsWithinAxis: this.axisRenderer.keepLabelsWithinAxis,
              clipToXRange: this.clipToXRange,
              isStaticAxis: this.isStaticAxis,
            };
            return { type: this.type, options: e };
          }
          getTicksMaxSize() {
            var e, t, i, r;
            const s =
                null !==
                  (t =
                    (null === (e = this.majorTickLineStyle) || void 0 === e
                      ? void 0
                      : e.tickSize) * A.DpiHelper.PIXEL_RATIO) && void 0 !== t
                  ? t
                  : 0,
              o =
                null !==
                  (r =
                    (null === (i = this.minorTickLineStyle) || void 0 === i
                      ? void 0
                      : i.tickSize) * A.DpiHelper.PIXEL_RATIO) && void 0 !== r
                  ? r
                  : 0;
            return Math.max(s, o);
          }
          getIsValidForDrawing() {
            return this.isVisible;
          }
          drawAxisBandsAndGridLines(e, t, i, r) {
            if (this.drawMajorBands) {
              const i = this.solidBrushCacheAxisBands.newBrush(
                  this.axisBandsFill,
                  !0
                ),
                r = (0, v.calculateAbsoluteRenderLayer)(
                  this.parentSurface.layersOffset,
                  this.parentSurface.stepBetweenLayers,
                  u.EDefaultRenderLayer.AxisBandsLayer
                );
              e.enqueueLayeredDraw(() => {
                this.drawAxisBands(e, t.majorTicks, t.majorTickCoords, i);
              }, r);
            }
            if (this.drawMinorGridLines) {
              const r = (0, v.calculateAbsoluteRenderLayer)(
                this.parentSurface.layersOffset,
                this.parentSurface.stepBetweenLayers,
                u.EDefaultRenderLayer.MinorGridLinesLayer
              );
              e.enqueueLayeredDraw(() => {
                this.drawGridLines(e, t.minorTickCoords, i);
              }, r);
            }
            if (this.drawMajorGridLines) {
              const i = (0, v.calculateAbsoluteRenderLayer)(
                this.parentSurface.layersOffset,
                this.parentSurface.stepBetweenLayers,
                u.EDefaultRenderLayer.MajorGridLinesLayer
              );
              e.enqueueLayeredDraw(() => {
                this.drawGridLines(e, t.majorTickCoords, r);
              }, i);
            }
          }
          drawAxisBands(e, t, i, r) {
            if (!t || 0 === t.length) return;
            const { seriesViewRect: s } = this.parentSurface,
              o = this.isHorizontalAxis
                ? p.EXyDirection.XDirection
                : p.EXyDirection.YDirection;
            let a = this.offset,
              n = this.axisLength + this.offset;
            if (this.isAxisFlipped !== this.flippedCoordinates) {
              const e = n;
              (n = a), (a = e);
            }
            let l = this.getMajorTickIndex(t[0]) % 2 == 0;
            const d = (0, x.getVectorRectVertex)(this.webAssemblyContext2D),
              h = (e, t, i) => {
                if (!i) return;
                const r = (0, P.createNativeRect)(
                  this.webAssemblyContext2D,
                  o === p.EXyDirection.YDirection ? 0 : e,
                  o === p.EXyDirection.YDirection ? e : 0,
                  o === p.EXyDirection.YDirection ? s.width : t,
                  o === p.EXyDirection.YDirection ? t : s.height
                );
                d.push_back(r);
              };
            t.forEach((e, t) => {
              const r = 0 === t ? a : i[t - 1],
                s = i[t];
              h(r, s, l), (l = !l);
            }),
              h(n, i[t.length - 1], l),
              e.drawRects(d, r, s.left, s.top);
          }
          drawGridLines(e, t, i) {
            if (!t || 0 === t.length) return;
            const { seriesViewRect: r } = this.parentSurface,
              s = (0, x.getVectorColorVertex)(this.webAssemblyContext2D);
            t.forEach((e) => {
              const t = this.isHorizontalAxis ? e : 0,
                i = this.isHorizontalAxis ? e : r.width,
                o = this.isHorizontalAxis ? 0 : e,
                a = this.isHorizontalAxis ? r.height : e,
                n = (0, x.getVertex)(this.webAssemblyContext2D, t, o);
              s.push_back(n);
              const l = (0, x.getVertex)(this.webAssemblyContext2D, i, a);
              s.push_back(l);
            }),
              e.drawLinesNative(
                s,
                i,
                v.ELineDrawMode.DiscontinuousLine,
                r.left,
                r.top
              );
          }
          getXVisibleRange(e) {
            return this.parentSurface.getXAxisById(e).visibleRange;
          }
          getIsXCategoryAxis(e) {
            return this.parentSurface.getXAxisById(e).isCategoryAxis;
          }
          getLabels(e) {
            return this.labelProvider.getLabels(e);
          }
          getXDataRange() {
            let e;
            return (
              this.parentSurface &&
                this.parentSurface.renderableSeries
                  .asArray()
                  .filter(
                    (e) =>
                      e.xAxisId === this.id &&
                      e.isVisible &&
                      e.hasDataSeriesValues()
                  )
                  .forEach((t) => {
                    const i = t.getXRange();
                    i && (e = e ? e.union(i) : i);
                  }),
              e
            );
          }
          notifyPropertyChanged(e) {
            e === D.PROPERTY.IS_XAXIS &&
              void 0 === this.axisAlignmentProperty &&
              (this.axisAlignmentProperty = this.isXAxisProperty
                ? d.EAxisAlignment.Bottom
                : d.EAxisAlignment.Right),
              e === D.PROPERTY.AXIS_RENDERER &&
                this.axisRendererProperty.attachedToAxis(this),
              super.notifyPropertyChanged(e);
          }
          getMaxXRange() {
            let e = this.getXDataRange();
            if (e)
              return (
                this.growBy && (e = e.growBy(this.growBy)),
                (e = this.applyVisibleRangeLimit(
                  null != e ? e : this.visibleRange
                )),
                (e = this.applyVisibleRangeSizeLimit(e)),
                e
              );
          }
          getAxisSize() {
            return this.axisLength;
          }
          getMajorTickIndex(e) {
            const t = e / this.majorDeltaProperty;
            return Math.round(t);
          }
          getTicks(e) {
            var t, i;
            if (e || !this.tickCache) {
              const e = this.getMaxAutoTicks();
              if (this.autoTicks) {
                const t = this.deltaCalculator.getDeltaFromRange(
                  this.visibleRange.min,
                  this.visibleRange.max,
                  this.minorsPerMajor,
                  e
                );
                (this.minorDeltaProperty = t.min),
                  (this.majorDeltaProperty = t.max);
              }
              let {
                  majorTickCoords: r,
                  minorTickCoords: s,
                  majorTickOverrides: o,
                  minorTickOverRides: a,
                } = this.tickCoordinatesProvider.getTickCoordinates(
                  void 0,
                  void 0
                ),
                n =
                  this.drawLabels ||
                  this.drawMajorGridLines ||
                  this.drawMajorTickLines
                    ? null != o
                      ? o
                      : this.tickProvider.getMajorTicks(
                          null !== (t = this.minorDeltaProperty) && void 0 !== t
                            ? t
                            : this.majorDeltaProperty / this.minorsPerMajor,
                          this.majorDeltaProperty,
                          this.visibleRange
                        )
                    : [],
                l =
                  this.drawMinorGridLines || this.drawMinorTickLines
                    ? null != a
                      ? a
                      : this.tickProvider.getMinorTicks(
                          null !== (i = this.minorDeltaProperty) && void 0 !== i
                            ? i
                            : this.majorDeltaProperty / this.minorsPerMajor,
                          this.majorDeltaProperty,
                          this.visibleRange
                        )
                    : [];
              const { min: d, max: h } = this.visibleRange;
              (n = n.filter((e) => e >= d && e <= h)),
                (l = l.filter((e) => e >= d && e <= h));
              let u = [];
              n.length > 1e3 && this.drawLabels
                ? console.warn(
                    "Axis settings result in more than 1000 labels.  Label drawing is disabled.  If using autoTicks: false, check that you have set sensible deltas."
                  )
                : (u = this.drawLabels ? this.getLabels(n) : []),
                (this.tickCache = {
                  majorTicks: n,
                  majorTickLabels: u,
                  majorTickCoords: r,
                  minorTicks: l,
                  minorTickCoords: s,
                });
            }
            return this.tickCache;
          }
          getTicksWithCoords() {
            if (
              (this.tickCache || this.getTicks(!0),
              void 0 === this.tickCache.majorTickCoords)
            ) {
              const { majorTickCoords: e, minorTickCoords: t } =
                this.tickCoordinatesProvider.getTickCoordinates(
                  this.tickCache.majorTicks,
                  this.tickCache.minorTicks
                );
              (this.tickCache.majorTickCoords = e),
                (this.tickCache.minorTickCoords = t);
            }
            return this.tickCache;
          }
          applyVisibleRangeLimit(e) {
            if (!e) return;
            if (!this.visibleRangeLimit) return e;
            const t = e.clip(this.visibleRangeLimit);
            return t.min >= t.max
              ? (console.warn(
                  `Can not apply visibleRangeLimit for the ${
                    this.isXAxis ? "xAxis" : "yAxis"
                  } with ID ${this.id}`
                ),
                e)
              : t;
          }
          applyVisibleRangeSizeLimit(e) {
            if (!e) return;
            const t = Math.abs(e.min) / Math.pow(10, 14),
              i = e.diff;
            if (i < t) {
              const r = e.min + i / 2;
              return new n.NumberRange(r - t / 2, r + t / 2);
            }
            if (!this.visibleRangeSizeLimit) return e;
            if (i < 0)
              return (
                console.warn(
                  `Can not apply visibleRangeSizeLimit for the ${
                    this.isXAxis ? "xAxis" : "yAxis"
                  } with ID ${this.id}`
                ),
                e
              );
            {
              let t = e;
              const { min: r, max: s } = this.visibleRangeSizeLimit,
                o = e.min + i / 2;
              return (
                i < r
                  ? (t = new n.NumberRange(o - r / 2, o + r / 2))
                  : i > s && (t = new n.NumberRange(o - s / 2, o + s / 2)),
                t
              );
            }
          }
        }
        t.AxisBase2D = M;
        const I = (e, t, i, r) => (0, y.createPenInCache)(e, t, i, 1, r, !1);
      },
      42241: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisCore = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(3214),
          a = i(23866),
          n = i(98140),
          l = i(87108),
          d = i(12785),
          h = i(63415),
          u = i(72934),
          c = i(14184),
          p = i(86127),
          g = i(8900),
          y = i(83989);
        class f extends r.DeletableEntity {
          constructor(e) {
            var t, i, r, s, a, u, p, g, y, v, m, S, P, C, x, b, A, T, E;
            super(),
              (this.visibleRangeChanged = new o.EventHandler()),
              (this.isMeasured = !1),
              (this.ZeroRangeGrowBy = 0.01),
              (this.idProperty = f.DEFAULT_AXIS_ID),
              (this.isXAxisProperty = !0),
              (this.minorsPerMajorProperty = 5),
              (this.drawMajorGridLinesProperty = !0),
              (this.drawMinorGridLinesProperty = !0),
              (this.drawMajorTickLinesProperty = !0),
              (this.drawMinorTickLinesProperty = !0),
              (this.drawMajorBandsProperty = !0),
              (this.drawLabelsProperty = !0),
              (this.flippedCoordinatesProperty = !1),
              (this.tickTextBrushProperty =
                c.SciChartSurfaceBase.DEFAULT_THEME.tickTextBrush),
              (this.axisBandsFillProperty =
                c.SciChartSurfaceBase.DEFAULT_THEME.axisBandsFill),
              (this.autoRangeProperty = d.EAutoRange.Once),
              (this.majorTickLineStyleProperty = {
                tickSize: 5,
                strokeThickness: 1,
                color: c.SciChartSurfaceBase.DEFAULT_THEME.majorGridLineBrush,
              }),
              (this.minorTickLineStyleProperty = {
                tickSize: 3,
                strokeThickness: 1,
                color: c.SciChartSurfaceBase.DEFAULT_THEME.minorGridLineBrush,
              }),
              (this.majorGridLineStyleProperty = {
                strokeThickness: 1,
                color: c.SciChartSurfaceBase.DEFAULT_THEME.majorGridLineBrush,
                strokeDashArray: void 0,
              }),
              (this.minorGridLineStyleProperty = {
                strokeThickness: 1,
                color: c.SciChartSurfaceBase.DEFAULT_THEME.minorGridLineBrush,
                strokeDashArray: void 0,
              }),
              (this.axisTitleStyleProperty = {
                fontSize: 24,
                fontFamily: "Arial",
                color: c.SciChartSurfaceBase.DEFAULT_THEME.axisTitleColor,
                fontStyle: "normal",
                fontWeight: "normal",
                padding: l.Thickness.fromNumber(6),
                alignment: h.ELabelAlignment.Center,
              }),
              (this.isVisibleProperty = !0),
              (this.autoTicksProperty = !0),
              (this.maxAutoTicksProperty = 10),
              (this.defaultVisibleRange = new n.NumberRange(0, 10)),
              (this.allowFastMathProperty = !1),
              (this.hasVisibleRangeSet = !1),
              (this.visibleRange =
                (null == e ? void 0 : e.visibleRange) ||
                this.defaultVisibleRange),
              (null == e ? void 0 : e.visibleRange) ||
                (this.hasVisibleRangeSet = !1),
              (this.id =
                null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                  ? t
                  : this.id),
              (this.growBy =
                null !== (i = null == e ? void 0 : e.growBy) && void 0 !== i
                  ? i
                  : this.growBy),
              (this.autoRange =
                null !== (r = null == e ? void 0 : e.autoRange) && void 0 !== r
                  ? r
                  : this.autoRange),
              (this.isVisible =
                null !== (s = null == e ? void 0 : e.isVisible) && void 0 !== s
                  ? s
                  : this.isVisible),
              (this.axisTitle =
                null !== (a = null == e ? void 0 : e.axisTitle) && void 0 !== a
                  ? a
                  : this.axisTitle),
              (this.axisTitleStyle = null == e ? void 0 : e.axisTitleStyle),
              (this.allowFastMath =
                null !== (u = null == e ? void 0 : e.allowFastMath) &&
                void 0 !== u
                  ? u
                  : this.allowFastMathProperty),
              (this.autoTicksProperty =
                null !== (p = null == e ? void 0 : e.autoTicks) && void 0 !== p
                  ? p
                  : this.autoTicksProperty),
              (this.maxAutoTicksProperty =
                null !== (g = null == e ? void 0 : e.maxAutoTicks) &&
                void 0 !== g
                  ? g
                  : this.maxAutoTicksProperty),
              (this.minorsPerMajorProperty =
                null !== (y = null == e ? void 0 : e.minorsPerMajor) &&
                void 0 !== y
                  ? y
                  : this.minorsPerMajorProperty),
              (this.majorDeltaProperty =
                null !== (v = null == e ? void 0 : e.majorDelta) && void 0 !== v
                  ? v
                  : this.majorDeltaProperty),
              (this.minorDeltaProperty =
                null !== (m = null == e ? void 0 : e.minorDelta) && void 0 !== m
                  ? m
                  : this.minorDeltaProperty),
              (this.drawLabelsProperty =
                null !== (S = null == e ? void 0 : e.drawLabels) && void 0 !== S
                  ? S
                  : this.drawLabelsProperty),
              (this.drawMajorTickLinesProperty =
                null !== (P = null == e ? void 0 : e.drawMajorTickLines) &&
                void 0 !== P
                  ? P
                  : this.drawMajorTickLinesProperty),
              (this.drawMinorTickLinesProperty =
                null !== (C = null == e ? void 0 : e.drawMinorTickLines) &&
                void 0 !== C
                  ? C
                  : this.drawMinorTickLinesProperty),
              (this.drawMinorGridLinesProperty =
                null !== (x = null == e ? void 0 : e.drawMinorGridLines) &&
                void 0 !== x
                  ? x
                  : this.drawMinorGridLinesProperty),
              (this.drawMajorGridLinesProperty =
                null !== (b = null == e ? void 0 : e.drawMajorGridLines) &&
                void 0 !== b
                  ? b
                  : this.drawMajorGridLinesProperty),
              (this.majorGridLineStyle =
                null == e ? void 0 : e.majorGridLineStyle),
              (this.minorGridLineStyle =
                null == e ? void 0 : e.minorGridLineStyle),
              (this.majorTickLineStyle =
                null == e ? void 0 : e.majorTickLineStyle),
              (this.minorTickLineStyle =
                null == e ? void 0 : e.minorTickLineStyle),
              (this.drawMajorBandsProperty =
                null !== (A = null == e ? void 0 : e.drawMajorBands) &&
                void 0 !== A
                  ? A
                  : this.drawMajorBandsProperty),
              (this.axisBandsFillProperty =
                null !== (T = null == e ? void 0 : e.axisBandsFill) &&
                void 0 !== T
                  ? T
                  : this.axisBandsFillProperty),
              (this.flippedCoordinatesProperty =
                null !== (E = null == e ? void 0 : e.flippedCoordinates) &&
                void 0 !== E
                  ? E
                  : this.flippedCoordinatesProperty),
              (this.getCurrentCoordinateCalculator =
                this.getCurrentCoordinateCalculator.bind(this));
          }
          get isCategoryAxis() {
            return !1;
          }
          get isXAxis() {
            return this.isXAxisProperty;
          }
          get allowFastMath() {
            return this.allowFastMathProperty;
          }
          set allowFastMath(e) {
            (this.allowFastMathProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.ALLOW_FAST_MATH);
          }
          hasValidVisibleRange() {
            return (
              void 0 !== this.visibleRange &&
              !(0 === this.visibleRange.diff) &&
              (0, u.isRealNumber)(this.visibleRange.max) &&
              (0, u.isRealNumber)(this.visibleRange.min)
            );
          }
          hasDefaultVisibleRange() {
            return !this.hasVisibleRangeSet;
          }
          get id() {
            return this.idProperty;
          }
          set id(e) {
            (this.idProperty = e), this.notifyPropertyChanged(g.PROPERTY.ID);
          }
          get isVisible() {
            return this.isVisibleProperty;
          }
          set isVisible(e) {
            (this.isVisibleProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.IS_VISIBLE);
          }
          get growBy() {
            return this.growByProperty;
          }
          set growBy(e) {
            (this.growByProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.GROW_BY);
          }
          get visibleRange() {
            return this.visibleRangeProperty;
          }
          set visibleRange(e) {
            var t;
            (this.hasVisibleRangeSet = !0),
              (null === (t = this.visibleRangeProperty) || void 0 === t
                ? void 0
                : t.equals(e)) ||
                ((this.visibleRangeProperty = e),
                this.clearCoordCalcCache(),
                this.visibleRangeChanged.raiseEvent(
                  new y.VisibleRangeChangedArgs(e)
                ),
                this.notifyPropertyChanged(g.PROPERTY.VISIBLE_RANGE));
          }
          get animatedVisibleRange() {
            return this.visibleRangeAnimationToken
              ? this.visibleRangeAnimationToken.to
              : this.visibleRange;
          }
          get majorDelta() {
            return this.majorDeltaProperty;
          }
          set majorDelta(e) {
            (this.majorDeltaProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.MAJOR_DELTA);
          }
          get minorDelta() {
            return this.minorDeltaProperty;
          }
          set minorDelta(e) {
            (this.minorDeltaProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.MINOR_DELTA);
          }
          get minorsPerMajor() {
            return this.minorsPerMajorProperty;
          }
          set minorsPerMajor(e) {
            (this.minorsPerMajorProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.MINORS_PER_MAJOR);
          }
          get textFormatting() {
            return this.textFormattingProperty;
          }
          set textFormatting(e) {
            (this.textFormattingProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.TEXT_FORMATTING);
          }
          get cursorTextFormatting() {
            return this.cursorTextFormattingProperty;
          }
          set cursorTextFormatting(e) {
            (this.cursorTextFormattingProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.CURSOR_TEXT_FORMATTING);
          }
          get drawMajorGridLines() {
            return this.drawMajorGridLinesProperty;
          }
          set drawMajorGridLines(e) {
            (this.drawMajorGridLinesProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_MAJOR_GRID_LINES);
          }
          get drawMinorGridLines() {
            return this.drawMinorGridLinesProperty;
          }
          set drawMinorGridLines(e) {
            (this.drawMinorGridLinesProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_MINOR_GRID_LINES);
          }
          get drawMajorTickLines() {
            return this.drawMajorTickLinesProperty;
          }
          set drawMajorTickLines(e) {
            (this.drawMajorTickLinesProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_MAJOR_TICK_LINES);
          }
          get drawMinorTickLines() {
            return this.drawMinorTickLinesProperty;
          }
          set drawMinorTickLines(e) {
            (this.drawMinorTickLinesProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_MINOR_TICK_LINES);
          }
          get drawMajorBands() {
            return this.drawMajorBandsProperty;
          }
          set drawMajorBands(e) {
            (this.drawMajorBandsProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_MAJOR_BANDS);
          }
          get drawLabels() {
            return this.drawLabelsProperty;
          }
          set drawLabels(e) {
            (this.drawLabelsProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DRAW_LABELS);
          }
          get flippedCoordinates() {
            return this.flippedCoordinatesProperty;
          }
          set flippedCoordinates(e) {
            this.flippedCoordinatesProperty !== e &&
              ((this.flippedCoordinatesProperty = e),
              this.clearCoordCalcCache(),
              this.notifyPropertyChanged(g.PROPERTY.FLIPPED_COORDINATES));
          }
          get axisBandsFill() {
            return this.axisBandsFillProperty;
          }
          set axisBandsFill(e) {
            (this.axisBandsFillProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_BANDS_FILL);
          }
          get autoRange() {
            return this.autoRangeProperty;
          }
          set autoRange(e) {
            (this.autoRangeProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AUTO_RANGE);
          }
          get majorTickLineStyle() {
            return this.majorTickLineStyleProperty;
          }
          set majorTickLineStyle(e) {
            (this.majorTickLineStyleProperty = Object.assign(
              Object.assign({}, this.majorTickLineStyle),
              e
            )),
              this.notifyPropertyChanged(g.PROPERTY.MAJOR_TICK_LINE_STYLE);
          }
          get minorTickLineStyle() {
            return this.minorTickLineStyleProperty;
          }
          set minorTickLineStyle(e) {
            (this.minorTickLineStyleProperty = Object.assign(
              Object.assign({}, this.minorTickLineStyle),
              e
            )),
              this.notifyPropertyChanged(g.PROPERTY.MINOR_TICK_LINE_STYLE);
          }
          get majorGridLineStyle() {
            return this.majorGridLineStyleProperty;
          }
          set majorGridLineStyle(e) {
            (this.majorGridLineStyleProperty = Object.assign(
              Object.assign({}, this.majorGridLineStyle),
              e
            )),
              this.notifyPropertyChanged(g.PROPERTY.MAJOR_GRID_LINE_STYLE);
          }
          get minorGridLineStyle() {
            return this.minorGridLineStyleProperty;
          }
          set minorGridLineStyle(e) {
            (this.minorGridLineStyleProperty = Object.assign(
              Object.assign({}, this.minorGridLineStyle),
              e
            )),
              this.notifyPropertyChanged(g.PROPERTY.MINOR_GRID_LINE_STYLE);
          }
          get dpiAdjustedAxisTitleStyle() {
            return p.DpiHelper.adjustTextStyle(this.axisTitleStyleProperty);
          }
          get axisTitleStyle() {
            return this.axisTitleStyleProperty;
          }
          set axisTitleStyle(e) {
            (this.axisTitleStyleProperty = Object.assign(
              Object.assign({}, this.axisTitleStyle),
              e
            )),
              this.notifyPropertyChanged(g.PROPERTY.TEXT_STYLE);
          }
          get axisTitle() {
            return this.axisTitleProperty;
          }
          set axisTitle(e) {
            (this.axisTitleProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AXIS_TITLE);
          }
          get tickProvider() {
            return this.tickProviderProperty;
          }
          set tickProvider(e) {
            var t;
            null === (t = this.tickProviderProperty) ||
              void 0 === t ||
              t.detachedFromAxis(),
              (this.tickProviderProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.TICK_PROVIDER);
          }
          get labelProvider() {
            return this.labelProviderProperty;
          }
          set labelProvider(e) {
            var t;
            null === (t = this.labelProviderProperty) ||
              void 0 === t ||
              t.detachedFromAxis(),
              (this.labelProviderProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.LABEL_PROVIDER);
          }
          get deltaCalculator() {
            return this.deltaCalculatorProperty;
          }
          set deltaCalculator(e) {
            var t;
            null === (t = this.deltaCalculator) ||
              void 0 === t ||
              t.detachedFromAxis(),
              (this.deltaCalculatorProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DELTA_CALCULATOR);
          }
          get tickCoordinatesProvider() {
            return this.tickCoordinatesProviderProperty;
          }
          set tickCoordinatesProvider(e) {
            var t;
            null === (t = this.tickCoordinatesProviderProperty) ||
              void 0 === t ||
              t.detachedFromAxis(),
              (this.tickCoordinatesProviderProperty = e),
              this.notifyPropertyChanged(
                g.PROPERTY.TICK_COORDINATES_CALCULATOR
              );
          }
          get maxAutoTicks() {
            return this.maxAutoTicksProperty;
          }
          set maxAutoTicks(e) {
            (this.maxAutoTicksProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.MAX_AUTO_TICKS);
          }
          get autoTicks() {
            return this.autoTicksProperty;
          }
          set autoTicks(e) {
            (this.autoTicksProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.AUTO_TICKS);
          }
          getCurrentCoordinateCalculator() {
            return (
              this.coordCalcCache &&
                this.coordCalcCache.viewportDimension !== this.getAxisSize() &&
                this.clearCoordCalcCache(),
              this.coordCalcCache ||
                (this.coordCalcCache =
                  this.getCurrentCoordinateCalculatorInternal()),
              this.coordCalcCache
            );
          }
          clearCoordCalcCache() {
            this.coordCalcCache = (0, s.deleteSafe)(this.coordCalcCache);
          }
          delete() {
            (this.deltaCalculator = void 0),
              (this.tickProvider = void 0),
              (this.tickCoordinatesProvider = void 0),
              (this.labelProviderProperty = (0, s.deleteSafe)(
                this.labelProvider
              )),
              (this.coordCalcCache = (0, s.deleteSafe)(this.coordCalcCache));
          }
          isValidRange(e) {
            return !(!e || !e.isDefined() || e.min > e.max);
          }
          get isVerticalChart() {
            return !1;
          }
          get isHorizontalAxis() {
            return this.isXAxis;
          }
          setIsXAxis(e) {
            (this.isXAxisProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.IS_XAXIS);
          }
          coerceZeroVisibleRange(e) {
            return (
              a.Guard.notNull(e, "range"),
              e.isZero()
                ? 0 === e.min
                  ? new n.NumberRange(-1, 1)
                  : e.growBy(
                      new n.NumberRange(
                        this.ZeroRangeGrowBy,
                        this.ZeroRangeGrowBy
                      )
                    )
                : e
            );
          }
          notifyPropertyChanged(e) {
            var t, i, r, s;
            e === g.PROPERTY.DELTA_CALCULATOR &&
              (null === (t = this.deltaCalculator) ||
                void 0 === t ||
                t.attachedToAxis(this)),
              e === g.PROPERTY.TICK_PROVIDER &&
                (null === (i = this.tickProvider) ||
                  void 0 === i ||
                  i.attachedToAxis(this)),
              e === g.PROPERTY.LABEL_PROVIDER &&
                (null === (r = this.labelProvider) ||
                  void 0 === r ||
                  r.attachedToAxis(this)),
              e === g.PROPERTY.TICK_COORDINATES_CALCULATOR &&
                (null === (s = this.tickCoordinatesProvider) ||
                  void 0 === s ||
                  s.attachedToAxis(this)),
              this.isMeasured &&
                this.invalidateParentCallback &&
                this.invalidateParentCallback();
          }
          getMaxAutoTicks() {
            return Math.max(1, this.maxAutoTicks);
          }
        }
        (t.AxisCore = f), (f.DEFAULT_AXIS_ID = "DefaultAxisId");
      },
      87673: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisLayoutState = void 0),
          (t.AxisLayoutState = class {
            constructor() {
              (this.axisSize = 0),
                (this.additionalLeftSize = 0),
                (this.additionalRightSize = 0),
                (this.additionalTopSize = 0),
                (this.additionalBottomSize = 0);
            }
            clear() {
              (this.axisSize = 0),
                (this.additionalLeftSize = 0),
                (this.additionalRightSize = 0),
                (this.additionalTopSize = 0),
                (this.additionalBottomSize = 0);
            }
          });
      },
      74736: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.layoutLabelsHelper = t.AxisRenderer = void 0);
        const r = i(84745),
          s = i(55023),
          o = i(56744),
          a = i(87459),
          n = i(87108),
          l = i(38215),
          d = i(63415),
          h = i(9254),
          u = i(48008),
          c = i(16185),
          p = i(63458),
          g = i(98353),
          y = i(14184),
          f = i(86127),
          v = i(76829);
        class m extends s.DeletableEntity {
          constructor(e) {
            super(),
              (this.viewRect = a.Rect.createZero()),
              (this.drawDebug = !1),
              (this.desiredLabelsSize = 0),
              (this.desiredTicksSize = 0),
              (this.desiredHeightProperty = 0),
              (this.desiredWidthProperty = 0),
              (this.axisThicknessProperty = 0),
              (this.keepLabelsWithinAxisProperty = !0),
              (this.hideOverlappingLabelsProperty = !0),
              (this.webAssemblyContext = e),
              (this.textureManager = new v.TextureManager(e)),
              r.IS_TEST_ENV ||
                ((this.measureTextCanvas = document.createElement("canvas")),
                (this.measureTextCanvas.width = 1),
                (this.measureTextCanvas.height = 1));
          }
          delete() {
            (this.webAssemblyContext = void 0),
              (this.measureTextCanvas = void 0),
              (this.parentAxis = void 0),
              (this.textureManager = (0, o.deleteSafe)(this.textureManager));
          }
          attachedToAxis(e) {
            this.parentAxis = e;
          }
          measure(e, t, i, r, s, o, a) {
            y.DebugForDpi &&
              console.log(`AxisRenderer.measure. fontSize: ${t.fontSize}`),
              (this.desiredLabelsSize = o
                ? this.calcDesiredLabelsSize(e, s, t, i)
                : 0),
              (this.desiredTicksSize = a ? r : 0);
            const n =
              Math.max(
                this.desiredLabelsSize,
                this.axisThicknessProperty * f.DpiHelper.PIXEL_RATIO
              ) + this.desiredTicksSize;
            e
              ? (this.desiredHeightProperty = n)
              : (this.desiredWidthProperty = n);
          }
          calcDesiredLabelsSize(e, t, i, s) {
            if (r.IS_TEST_ENV) return 0;
            let o;
            const a = this.measureTextCanvas.getContext("2d");
            return (
              (o = e
                ? t.getMaxLabelHeightForHorizontalAxis(s, a, i)
                : t.getMaxLabelWidthForVerticalAxis(s, a, i)),
              o
            );
          }
          get desiredHeight() {
            return this.desiredHeightProperty;
          }
          set desiredHeight(e) {
            this.desiredHeightProperty = e;
          }
          get desiredWidth() {
            return this.desiredWidthProperty;
          }
          set desiredWidth(e) {
            this.desiredWidthProperty = e;
          }
          get keepLabelsWithinAxis() {
            return this.keepLabelsWithinAxisProperty;
          }
          set keepLabelsWithinAxis(e) {
            (this.keepLabelsWithinAxisProperty = e), this.invalidateParent();
          }
          get hideOverlappingLabels() {
            return this.hideOverlappingLabelsProperty;
          }
          set hideOverlappingLabels(e) {
            (this.hideOverlappingLabelsProperty = e), this.invalidateParent();
          }
          get axisThickness() {
            return this.axisThicknessProperty;
          }
          set axisThickness(e) {
            (this.axisThicknessProperty = e), this.invalidateParent();
          }
          layout(e) {
            this.viewRect = e;
          }
          drawLabels(e, t, i, r, s, o, n, d, c, p) {
            y.DebugForDpi &&
              console.log(`AxisRenderer.drawLabels. fontSize: ${n.fontSize}`);
            const { viewRect: f, textureManager: v } = this,
              m = e.getNativeContext(),
              P = d ? (0, l.getIsHorizontal)(t) : (0, l.getIsVertical)(t),
              C = Math.floor(f.width),
              x = Math.floor(f.height),
              b = this.desiredTicksSize;
            let A;
            const { padding: T, alignment: E } = n;
            P && ((s = s.reverse()), (r = r.reverse()));
            const R = [],
              w = (0, u.parseColorToUIntArgb)(n.color),
              D = p.useNativeText ? e.getFont(n, 0 !== p.rotation) : null,
              L = p.useNativeText
                ? (0, g.getTextBounds)(this.webAssemblyContext)
                : null;
            D || (A = v.getTextureContext(C, x));
            let M = p.rotation;
            M > 90 ? (M -= 180) : M < -90 && (M += 180);
            const I = (-M * Math.PI) / 180;
            s = s.map((e) => e - o);
            const O = S(E, this.webAssemblyContext),
              k = p.lineSpacing;
            let _ = 0;
            if (
              (D &&
                (D.CalculateStringBounds("Ag", L, 0),
                (_ = L.GetLineBounds(0).m_fHeight)),
              (0, l.getIsHorizontal)(t))
            ) {
              let e = [],
                o = [];
              if (!p.useCache && p.useNativeText)
                for (const t of r)
                  D.CalculateStringBounds(null != t ? t : "", L, 2),
                    e.push(L.m_fHeight + n.padding.top + n.padding.bottom),
                    o.push(L.m_fWidth + n.padding.left + n.padding.right);
              else
                (e = r.map((e) => p.getLabelHeight(A, e, n))),
                  (o = r.map((e) => p.getLabelWidth(A, e, n)));
              const { labelCoords: d, labelIndexes: u } = this.layoutLabels(
                C,
                s,
                o,
                c,
                null == T ? void 0 : T.top,
                null == T ? void 0 : T.bottom
              );
              for (let c = 0; c < u.length; c++) {
                const y = d[c];
                let S = r[u[c]];
                const P = e[u[c]];
                let C = 0;
                (t === l.EAxisAlignment.Bottom && !i) ||
                (t === l.EAxisAlignment.Top && i)
                  ? (C += b)
                  : (C += x - P - b),
                  this.drawDebug && R.push(a.Rect.create(y, C, o[u[c]], P));
                try {
                  if (D) {
                    let e = y + f.left + T.left,
                      t = C + f.top + _ + T.top,
                      i = e,
                      r = t - _;
                    if (0 !== I) {
                      const { textWidth: t, textHeight: r } =
                        p.getNativeLabelInfo(S);
                      (e = s[u[c]] + f.left - (r * Math.sin(I)) / 2),
                        (i = e),
                        I > 0 && (e -= t);
                    }
                    D.DrawStringAdvanced(
                      null != S ? S : "",
                      w,
                      Math.round(e),
                      Math.round(t),
                      (0, g.getVector4)(this.webAssemblyContext, i, r, I, 0),
                      O,
                      k
                    );
                  } else {
                    const {
                      bitmapTexture: e,
                      textureHeight: t,
                      textureWidth: i,
                    } = p.getCachedLabelTexture(S, v, n);
                    e &&
                      (m.DrawTexture(
                        e,
                        Math.round(y + f.left),
                        Math.round(C + f.top),
                        i,
                        t
                      ),
                      p.useCache || e.delete());
                  }
                } catch (e) {
                  h.Logger.debug(e), p.delete();
                }
              }
            } else {
              let e = [],
                o = [];
              if (!p.useCache && p.useNativeText)
                for (const t of r)
                  D.CalculateStringBounds(null != t ? t : "", L, 2),
                    e.push(L.m_fHeight + n.padding.top + n.padding.bottom),
                    o.push(L.m_fWidth + n.padding.left + n.padding.right);
              else
                (e = r.map((e) => p.getLabelHeight(A, e, n))),
                  (o = r.map((e) => p.getLabelWidth(A, e, n)));
              const { labelCoords: l, labelIndexes: d } = this.layoutLabels(
                x,
                s,
                e,
                c,
                null == T ? void 0 : T.left,
                null == T ? void 0 : T.right
              );
              for (let s = 0; s < d.length; s++) {
                let u = 0;
                const c = r[d[s]],
                  y = o[d[s]];
                u = this.adjustForLabelAlignment(u, y, E, t, i, C, b);
                const S = l[s];
                this.drawDebug && R.push(a.Rect.create(u, S, y, e[d[s]]));
                try {
                  if (D) {
                    const e = u + f.left + T.left,
                      t = S + f.top + _ + T.top;
                    D.DrawStringAdvanced(
                      null != c ? c : "",
                      w,
                      Math.round(e),
                      Math.round(t),
                      (0, g.getVector4)(this.webAssemblyContext, e, t, I, 0),
                      O,
                      k
                    );
                  } else {
                    const {
                      bitmapTexture: e,
                      textureHeight: t,
                      textureWidth: i,
                    } = p.getCachedLabelTexture(c, v, n);
                    e &&
                      (m.DrawTexture(
                        e,
                        Math.round(u + f.left),
                        Math.round(S + f.top),
                        i,
                        t
                      ),
                      p.useCache || e.delete());
                  }
                } catch (e) {
                  h.Logger.debug(e), p.delete();
                }
              }
            }
            this.drawDebug && this.drawLabelViewRects(e, f, R);
          }
          adjustForLabelAlignment(e, t, i, r, s, o, a) {
            const n = o - a - t;
            return (
              (r === l.EAxisAlignment.Left && !s) ||
              (r === l.EAxisAlignment.Right && s)
                ? i === d.ELabelAlignment.Right || i === d.ELabelAlignment.Auto
                  ? (e += n)
                  : i === d.ELabelAlignment.Center && (e += n / 2)
                : i === d.ELabelAlignment.Left || i === d.ELabelAlignment.Auto
                ? (e += a)
                : i === d.ELabelAlignment.Center
                ? (e += a + n / 2)
                : (e += o - t),
              e
            );
          }
          layoutLabels(e, i, r, s, o, a) {
            return (0, t.layoutLabelsHelper)(
              this.keepLabelsWithinAxis,
              this.hideOverlappingLabels,
              e,
              i,
              r,
              s
            );
          }
          drawTicks(e, t, i, r, s, o, a) {
            if (!r || 0 === r.length) return;
            const { viewRect: n } = this,
              { tickSize: d } = a,
              h = (0, g.getVectorColorVertex)(this.webAssemblyContext);
            h.clear();
            const u = (0, l.getIsHorizontal)(t);
            if (void 0 === u) return;
            r.forEach((e) => {
              let r, s, o, a;
              i
                ? u
                  ? ((r = e),
                    (s = e),
                    (o = t === l.EAxisAlignment.Top ? 0 : n.height),
                    (a = t === l.EAxisAlignment.Top ? d : n.height - d))
                  : ((r = t === l.EAxisAlignment.Left ? 0 : n.width),
                    (s = t === l.EAxisAlignment.Left ? d : n.width - d),
                    (o = e),
                    (a = e))
                : u
                ? ((r = e),
                  (s = e),
                  (o = t === l.EAxisAlignment.Bottom ? 0 : n.height),
                  (a = t === l.EAxisAlignment.Bottom ? d : n.height - d))
                : ((r = t === l.EAxisAlignment.Right ? 0 : n.width),
                  (s = t === l.EAxisAlignment.Right ? d : n.width - d),
                  (o = e),
                  (a = e));
              const c = (0, g.getVertex)(this.webAssemblyContext, r, o);
              h.push_back(c);
              const p = (0, g.getVertex)(this.webAssemblyContext, s, a);
              h.push_back(p);
            });
            const p = n.left - (u ? s : 0),
              y = n.top - (u ? 0 : s);
            e.drawLinesNative(h, o, c.ELineDrawMode.DiscontinuousLine, p, y);
          }
          drawModifiersAxisLabel(e, t, i, r, s, o) {
            if (!t) return;
            const d = e.getNativeContext(),
              {
                bitmapTexture: h,
                textureHeight: u,
                textureWidth: c,
              } = this.textureManager.createSimpleTextTexture(
                t,
                Object.assign(Object.assign({}, s), {
                  padding: new n.Thickness(2, 2, 2, 2),
                }),
                o
              ),
              p = {
                height: this.parentAxis.parentSurface.domCanvas2D.height,
                width: this.parentAxis.parentSurface.domCanvas2D.width,
              },
              g = (e, t, i, r) =>
                e + t < r / 2 ? 0 : e + t > i - r / 2 ? i - r : e + t - r / 2,
              y = this.parentAxis.offset;
            let f, v;
            return (
              r === l.EAxisAlignment.Bottom
                ? ((f = g(this.viewRect.x - y, i, p.width, c)),
                  (v = this.viewRect.y),
                  p.height - v < u && (v = p.height - u))
                : r === l.EAxisAlignment.Top
                ? ((f = g(this.viewRect.x - y, i, p.width, c)),
                  (v = this.viewRect.y + this.viewRect.height - u),
                  this.parentAxis.axisLayoutState.axisSize - this.viewRect.y <
                    u && (v = 0))
                : r === l.EAxisAlignment.Left
                ? ((f = this.viewRect.x + this.viewRect.width - c),
                  (v = g(this.viewRect.y - y, i, p.height, u)),
                  this.parentAxis.axisLayoutState.axisSize + this.viewRect.x <
                    c && (f = 0))
                : r === l.EAxisAlignment.Right &&
                  ((f = this.viewRect.x),
                  (v = g(this.viewRect.y - y, i, p.height, u)),
                  p.width - f < c && (f = p.width - c)),
              d.DrawTexture(h, Math.round(f), Math.round(v), c, u),
              h.delete(),
              new a.Rect(f, v, c, u)
            );
          }
          createAxisMarker(e, t, i, r, s) {
            const {
              fontStyle: o,
              fontWeight: a,
              fontSize: n,
              fontFamily: l,
              color: d,
            } = i;
            return this.textureManager.createAxisMarkerTexture(
              e,
              t,
              o,
              a,
              n,
              l,
              d,
              2 * f.DpiHelper.PIXEL_RATIO,
              r,
              s
            );
          }
          createAxisMarkerFromImage(e, t, i) {
            return this.textureManager.createTextureFromImage(e, t, i);
          }
          createAnnotationLabelTexture(e, t, i, r, s, o) {
            return this.textureManager.createSimpleTextTexture(
              e,
              Object.assign(Object.assign({}, t), {
                padding: new n.Thickness(2, 2, 2, 2),
              }),
              i,
              r,
              s,
              o
            );
          }
          invalidateParent() {
            this.parentAxis &&
              this.parentAxis.invalidateParentCallback &&
              this.parentAxis.invalidateParentCallback();
          }
          drawLabelViewRects(e, t, i) {
            const r = (0, g.getVectorRectVertex)(this.webAssemblyContext),
              s = new this.webAssemblyContext.SCRTSolidBrush(
                (0, u.parseColorToUIntArgb)("rgba(30,30,255,0.3)"),
                !1
              );
            for (const e of i) {
              const t = (0, p.createNativeRect)(
                this.webAssemblyContext,
                e.left,
                e.top,
                e.right,
                e.bottom
              );
              r.push_back(t);
            }
            e.drawRects(r, s, t.left, t.top), s.delete();
          }
        }
        (t.AxisRenderer = m),
          (t.layoutLabelsHelper = (e, t, i, r, s, o) => {
            const a = [],
              n = [],
              l = s.length,
              d = (e) => (o ? r[l - 1 - e] : r[e]),
              h = (e) => (o ? s[l - 1 - e] : s[e]);
            let u = 0;
            for (let r = 0; r < l; r++) {
              const s = 0 === r,
                p = r === l - 1,
                g = h(r),
                y = Math.ceil(g / 2);
              let f = d(r),
                v = 0;
              if (e && s) {
                f > y ? ((v = f + y), (f -= y)) : ((f = 0), (v = f + g));
                const e = d(1),
                  i = h(1) / 2;
                if (t && v >= e - i - 0) continue;
              } else
                e && p
                  ? (f = f + y < i ? f - y : i - g)
                  : ((v = f + y), (f -= y));
              (t && r > 0 && f < u + 0) ||
                ((u = v),
                a.push(f),
                (c = r),
                o ? n.push(l - 1 - c) : n.push(c));
            }
            var c;
            return { labelCoords: a, labelIndexes: n };
          });
        const S = (e, t) => {
          let i = t.eTSRTextAlignMode.Left;
          switch (e) {
            case d.ELabelAlignment.Left:
              i = t.eTSRTextAlignMode.Left;
              break;
            case d.ELabelAlignment.Right:
              i = t.eTSRTextAlignMode.Right;
              break;
            case d.ELabelAlignment.Center:
              i = t.eTSRTextAlignMode.Center;
              break;
            default:
              i = t.eTSRTextAlignMode.Left;
          }
          return i;
        };
      },
      14790: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AxisTitleRenderer = void 0);
        const r = i(63415),
          s = i(71238),
          o = i(24156);
        class a extends o.TitleRendererBase {
          constructor() {
            super(...arguments), (this.lineSpacing = 1.1);
          }
          measure(e = "", t, i) {
            if (
              ((this.text = e),
              !this.useCache ||
                (!this.texture && !this.useNativeText) ||
                this.text !== this.previousText ||
                this.lineSpacing !== this.previousLineSpacing ||
                i !== this.previousAxisAlignment ||
                this.previousNativeTextMode !== this.useNativeText ||
                !n(t, this.textStyle))
            ) {
              this.invalidateCache(),
                (this.previousLineSpacing = this.lineSpacing),
                (this.previousNativeTextMode = this.useNativeText),
                (this.previousAxisAlignment = i),
                (this.previousText = e),
                (this.textStyle = t),
                (this.titlePosition = s.ETitlePosition[i]),
                (this.textStyle = t),
                (this.textStyle.lineSpacing = this.lineSpacing);
              const r = this.parentSurface.currentWebGlRenderContext;
              this.getTextSize(e, this.textStyle, r);
            }
          }
          get useNativeText() {
            return this.useNativeTextProperty;
          }
          set useNativeText(e) {
            this.useNativeTextProperty = e;
          }
          get desiredHeight() {
            return this.desiredHeightProperty;
          }
          set desiredHeight(e) {
            this.desiredWidthProperty !== e && this.invalidateCache(),
              (this.desiredHeightProperty = e);
          }
          get desiredWidth() {
            return this.desiredWidthProperty;
          }
          set desiredWidth(e) {
            this.desiredWidthProperty !== e && this.invalidateCache(),
              (this.desiredWidthProperty = e);
          }
          layout(e) {
            if (!this.text) return void (this.viewRectProperty = e);
            const t = l(this.textStyle.alignment);
            this.viewRectProperty = this.getViewRect(
              this.text,
              e,
              this.titlePosition,
              t
            );
          }
          getTitleTexture() {
            const e = this.titlePosition;
            let t = (0, o.getAdjustedRotation)(this.textStyle.rotation, e);
            const i = Array.isArray(this.text)
              ? this.text
              : this.text.split("\n");
            return this.textureManager.createTextTexture(
              i,
              this.textStyle,
              t,
              this.lineSpacing
            );
          }
          draw(e) {
            return (
              this.drawDebug && this.drawTitleDebugViewRect(e),
              this.drawInternal(e, this.useNativeText, this.titlePosition)
            );
          }
          delete() {
            (this.parentSurface = void 0), super.delete();
          }
        }
        t.AxisTitleRenderer = a;
        const n = (e, t) =>
            !(!e || !t) &&
            e.color === t.color &&
            e.fontFamily === t.fontFamily &&
            e.fontSize === t.fontSize &&
            e.fontStyle === t.fontStyle &&
            e.fontWeight === t.fontWeight &&
            e.alignment === t.alignment &&
            e.rotation === t.rotation &&
            e.multilineAlignment === t.multilineAlignment &&
            ((void 0 === e.padding && void 0 === t.padding) ||
              e.padding.equals(t.padding)),
          l = (e) =>
            e === r.ELabelAlignment.Auto
              ? s.ETextAlignment.Center
              : s.ETextAlignment[e];
      },
      59516: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CategoryAxis = void 0);
        const r = i(2192),
          s = i(99269),
          o = i(78471);
        class a extends s.CategoryAxisBase {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.type = r.EAxisType.CategoryAxis),
              (this.labelProvider =
                null !== (i = null == t ? void 0 : t.labelProvider) &&
                void 0 !== i
                  ? i
                  : new o.DateLabelProvider(t));
          }
        }
        t.CategoryAxis = a;
      },
      99269: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CategoryAxisBase = void 0);
        const r = i(56744),
          s = i(98140),
          o = i(5337),
          a = i(27699),
          n = i(48804),
          l = i(25762),
          d = i(3346),
          h = i(57397),
          u = i(4220);
        class c extends h.AxisBase2D {
          constructor(e, t) {
            var i, r, s;
            super(e, t),
              (this.defaultXValuesProperty = []),
              (this.defaultXStartProperty = 0),
              (this.defaultXStepProperty = 1),
              (this.defaultXValuesProperty =
                null !== (i = null == t ? void 0 : t.defaultXValues) &&
                void 0 !== i
                  ? i
                  : this.defaultXValuesProperty),
              (this.defaultXStartProperty =
                null !== (r = null == t ? void 0 : t.defaultXStart) &&
                void 0 !== r
                  ? r
                  : this.defaultXStartProperty),
              (this.defaultXStepProperty =
                null !== (s = null == t ? void 0 : t.defaultXStep) &&
                void 0 !== s
                  ? s
                  : this.defaultXStepProperty),
              (this.tickProvider = new d.NumericTickProvider(
                this.webAssemblyContext2D
              )),
              (this.deltaCalculator = new u.CategoryDeltaCalculator(
                this.webAssemblyContext2D
              )),
              (this.defaultBaseXValues =
                new this.webAssemblyContext2D.SCRTDoubleVector());
          }
          get isCategoryAxis() {
            return !0;
          }
          get defaultXValues() {
            return this.defaultXValuesProperty;
          }
          set defaultXValues(e) {
            (this.defaultXValuesProperty = e),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          get defaultXStart() {
            return this.defaultXStartProperty;
          }
          set defaultXStart(e) {
            (this.defaultXStartProperty = e),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          get defaultXStep() {
            return this.defaultXStepProperty;
          }
          set defaultXStep(e) {
            (this.defaultXStepProperty = e),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          prepareRenderData() {
            (0, r.deleteSafe)(this.coordCalcCache);
            const e = this.getCurrentCoordinateCalculatorInternal(),
              t = this.parentSurface.renderableSeries
                .asArray()
                .find((e) => e.xAxisId === this.id);
            this.setBaseXValues(e, t), (this.coordCalcCache = e);
          }
          delete() {
            (this.defaultBaseXValues = (0, r.deleteSafe)(
              this.defaultBaseXValues
            )),
              super.delete();
          }
          getCurrentCoordinateCalculatorInternal() {
            const e = this.visibleRange.min,
              t = this.visibleRange.max,
              i = this.axisLength,
              r = this.parentSurface.renderableSeries
                .asArray()
                .find((e) => e.xAxisId === this.id),
              s =
                this.isXAxis !== this.flippedCoordinates
                  ? new n.CategoryCoordinateCalculator(
                      this.webAssemblyContext2D,
                      i,
                      e,
                      t,
                      this.offset
                    )
                  : new l.FlippedCategoryCoordinateCalculator(
                      this.webAssemblyContext2D,
                      i,
                      e,
                      t,
                      this.offset
                    );
            return this.setBaseXValues(s, r), s;
          }
          getXDataRange() {
            let e;
            return (
              this.parentSurface &&
                this.parentSurface.renderableSeries
                  .asArray()
                  .filter(
                    (e) =>
                      e.xAxisId === this.id &&
                      e.isVisible &&
                      e.hasDataSeriesValues()
                  )
                  .forEach((t) => {
                    const i = t.getDataSeriesValuesCount(),
                      r = new s.NumberRange(-0.5, i - 1 + 0.5);
                    r && (e = e ? e.union(r) : r);
                  }),
              e
            );
          }
          getMaxAutoTicks() {
            const e = this.getCurrentCoordinateCalculator();
            return Math.min(
              Math.max(1, this.maxAutoTicks),
              e.baseXValues.size()
            );
          }
          generateDefaultXValuesForCategoryAxis() {
            if (
              (this.defaultBaseXValues.clear(),
              this.defaultXValues && this.defaultXValues.length > 0)
            )
              (0, a.appendDoubleVectorFromJsArray)(
                this.webAssemblyContext2D,
                this.defaultBaseXValues,
                this.defaultXValues
              );
            else {
              const e = [],
                t = 10;
              for (let i = 0; i < t; i++)
                e.push(this.defaultXStart + i * this.defaultXStep);
              (0, a.appendDoubleVectorFromJsArray)(
                this.webAssemblyContext2D,
                this.defaultBaseXValues,
                e
              );
            }
            return this.defaultBaseXValues;
          }
          setBaseXValues(e, t) {
            if (
              (null == t ? void 0 : t.type) ===
              o.ESeriesType.UniformHeatmapSeries
            )
              throw Error(
                "Category Axis is not supported for UniformHeatmapRenderableSeries"
              );
            if (null == t ? void 0 : t.isStacked) {
              const i = t;
              if (0 === i.size())
                throw Error(
                  "BaseStackedCollection should have at least one BaseStackedRenderableSeries"
                );
              const r = i.get(0);
              if (!(null == r ? void 0 : r.dataSeries))
                return void (
                  e.baseXValues ||
                  (e.baseXValues = this.generateDefaultXValuesForCategoryAxis())
                );
              e.baseXValues = r.dataSeries.getNativeXValues();
            } else {
              if (
                !(null == t ? void 0 : t.dataSeries) ||
                t.dataSeries.count() < 10
              )
                return void (
                  e.baseXValues ||
                  (e.baseXValues = this.generateDefaultXValuesForCategoryAxis())
                );
              e.baseXValues = t.dataSeries.getNativeXValues();
            }
          }
        }
        t.CategoryAxisBase = c;
      },
      2296: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DateTimeNumericAxis = void 0);
        const r = i(7899),
          s = i(68695),
          o = i(54948);
        class a extends o.NumericAxis {
          constructor(e, t) {
            (null == t ? void 0 : t.labelProvider) ||
              ((t = null != t ? t : {}).labelProvider =
                new s.SmartDateLabelProvider(t)),
              super(e, t),
              (this.deltaCalculator = new r.DateTimeDeltaCalculator(e, {
                possibleDeltas: null == t ? void 0 : t.possibleDeltas,
                minTicks: null == t ? void 0 : t.minTicks,
              }));
          }
        }
        t.DateTimeNumericAxis = a;
      },
      4220: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CategoryDeltaCalculator = void 0);
        const r = i(23866),
          s = i(98140),
          o = i(40059);
        class a extends o.NumericDeltaCalculator {
          constructor(e) {
            super(e);
          }
          getDeltaFromRange(e, t, i, o) {
            return (
              r.Guard.argumentIsRealNumber(e, "min"),
              r.Guard.argumentIsRealNumber(t, "max"),
              t <= o
                ? new s.NumberRange(1 / i, 1)
                : super.getDeltaFromRange(e, t, i, o)
            );
          }
        }
        t.CategoryDeltaCalculator = a;
      },
      7899: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DateTimeDeltaCalculator = void 0);
        const r = i(41493),
          s = i(98140),
          o = i(40059);
        class a extends o.NumericDeltaCalculator {
          constructor(e, t) {
            var i;
            super(e),
              (this.possibleDeltasProperty = [
                1, 2, 5, 10, 15, 30, 60, 120, 300, 600, 900, 1800, 3600, 7200,
                10800, 21600, 43200, 86400, 172800, 259200, 432e3, 864e3,
                1296e3, 1728e3, 2592e3, 5184e3, 10368e3, 15552e3, 31557600,
              ]),
              (this.currIndex = 1),
              (this.possibleDeltasProperty =
                null !== (i = null == t ? void 0 : t.possibleDeltas) &&
                void 0 !== i
                  ? i
                  : this.possibleDeltasProperty),
              (this.minTicks = null == t ? void 0 : t.minTicks),
              (this.currIndex = Math.floor(this.possibleDeltas.length / 2));
          }
          get possibleDeltas() {
            return this.possibleDeltasProperty;
          }
          set possibleDeltas(e) {
            this.possibleDeltasProperty !== e &&
              ((this.possibleDeltasProperty = e),
              (this.currIndex = Math.floor(this.possibleDeltas.length / 2)));
          }
          get minTicks() {
            return this.minTicksProperty;
          }
          set minTicks(e) {
            this.minTicksProperty !== e && (this.minTicksProperty = e);
          }
          getDeltaFromRange(e, t, i, o) {
            const a = t - e;
            (this.prevIndex = void 0),
              this.currIndex >= this.possibleDeltas.length &&
                (this.currIndex = Math.floor(this.possibleDeltas.length / 2));
            let n = 0;
            const l = (s) => {
                var d, h;
                let u = this.possibleDeltasProperty[s];
                if ((n++, n > this.possibleDeltas.length + 1))
                  return (
                    r.performanceWarnings.dateTimeDeltaCalculatorBadDelta.warn(),
                    u
                  );
                const c = Math.floor(a / u);
                return c <
                  (null !== (d = this.minTicks) && void 0 !== d ? d : o / 3) &&
                  0 === s &&
                  s !== this.prevIndex
                  ? (this.prevIndex || (this.prevIndex = s),
                    super.getDeltaFromRange(e, t, i, o).max)
                  : c <
                      (null !== (h = this.minTicks) && void 0 !== h
                        ? h
                        : o / 3) &&
                    s > 0 &&
                    s !== this.prevIndex
                  ? (this.prevIndex || (this.prevIndex = s), l(s - 1))
                  : c > o &&
                    s < this.possibleDeltasProperty.length - 1 &&
                    s !== this.prevIndex
                  ? (this.prevIndex || (this.prevIndex = s), l(s + 1))
                  : c > o && s === this.possibleDeltasProperty.length - 1
                  ? super.getDeltaFromRange(e / u, t / u, i, o).max * u
                  : (this.currIndex !== s && (this.currIndex = s), u);
              },
              d = l(this.currIndex);
            return new s.NumberRange(d / i, d);
          }
        }
        t.DateTimeDeltaCalculator = a;
      },
      69738: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DeltaCalculator = void 0),
          (t.DeltaCalculator = class {
            attachedToAxis(e) {
              this.parentAxis = e;
            }
            detachedFromAxis() {
              this.parentAxis = void 0;
            }
          });
      },
      19643: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LogarithmicDeltaCalculator = void 0);
        const r = i(23866),
          s = i(98140),
          o = i(69738);
        class a extends o.DeltaCalculator {
          constructor(e) {
            super(),
              (this.logarithmicBase = 10),
              (this.isHighPrecisionTicks = !0),
              (this.webAssemblyContext = e);
          }
          getDeltaFromRange(e, t, i, o) {
            if (
              (r.Guard.argumentIsRealNumber(e, "min"),
              r.Guard.argumentIsRealNumber(t, "max"),
              (e = Math.abs(e)) > (t = Math.abs(t)))
            ) {
              const i = e;
              (e = t), (t = i);
            }
            if (this.isHighPrecisionTicks) {
              const r =
                  this.webAssemblyContext.NiceLogScale.CalculateTickSpacing(
                    e,
                    t,
                    this.logarithmicBase,
                    i,
                    o
                  ),
                a = new s.NumberRange(r.minD, r.maxD);
              return r.delete(), a;
            }
            {
              const r =
                  this.webAssemblyContext.NiceLogScale.CalculateLowPrecisionTickSpacing(
                    e,
                    t,
                    this.logarithmicBase,
                    i,
                    o
                  ),
                a = new s.NumberRange(r.minD, r.maxD);
              return r.delete(), a;
            }
          }
        }
        t.LogarithmicDeltaCalculator = a;
      },
      40059: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericDeltaCalculator = void 0);
        const r = i(23866),
          s = i(98140),
          o = i(69738);
        class a extends o.DeltaCalculator {
          constructor(e) {
            super(), (this.webAssemblyContext = e);
          }
          getDeltaFromRange(e, t, i, o) {
            r.Guard.argumentIsRealNumber(e, "min"),
              r.Guard.argumentIsRealNumber(t, "max");
            const a =
                this.webAssemblyContext.NiceDoubleScale.CalculateTickSpacing(
                  e,
                  t,
                  i,
                  o
                ),
              n = new s.NumberRange(a.minD, a.maxD);
            return a.delete(), n;
          }
        }
        t.NumericDeltaCalculator = a;
      },
      78471: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DateLabelProvider = void 0);
        const r = i(40359),
          s = i(96528),
          o = i(8591),
          a = i(19833);
        class n extends a.LabelProviderBase2D {
          constructor(e) {
            var t, i;
            super(
              Object.assign(
                {
                  labelFormat:
                    null !== (t = null == e ? void 0 : e.labelFormat) &&
                    void 0 !== t
                      ? t
                      : s.ENumericFormat.Date_DDMMYYYY,
                  cursorLabelFormat:
                    null !== (i = null == e ? void 0 : e.cursorLabelFormat) &&
                    void 0 !== i
                      ? i
                      : s.ENumericFormat.Date_DDMMYYYY,
                },
                e
              )
            ),
              (this.type = r.ELabelProviderType.Date),
              (this.formatLabelProperty = (e) =>
                this.applyFormat(
                  (0, o.formatNumber)(e, this.numericFormat, this.precision)
                )),
              (this.formatCursorLabelProperty = (e) => {
                var t, i;
                return this.applyFormat(
                  (0, o.formatNumber)(
                    e,
                    null !== (t = this.cursorNumericFormat) && void 0 !== t
                      ? t
                      : this.numericFormat,
                    null !== (i = this.cursorPrecision) && void 0 !== i
                      ? i
                      : this.precision
                  )
                );
              });
          }
          onBeginAxisDraw() {}
        }
        t.DateLabelProvider = n;
      },
      16155: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.labelCache = void 0);
        const r = i(56744),
          s = i(9254),
          o = new Map(),
          a = {};
        let n = 0;
        const l = (e, t) => `${e}|:|${t}`,
          d = (e) => {
            const t = e.indexOf("|:|");
            return { text: e.substring(0, t - 1), styleId: e.substring(t + 3) };
          };
        let h = 200,
          u = 6e4;
        const c = (e, t) =>
          e.alignment === t.alignment &&
          e.multilineAlignment === t.multilineAlignment &&
          e.color === t.color &&
          e.fontFamily === t.fontFamily &&
          e.fontSize === t.fontSize &&
          e.fontStyle === t.fontStyle &&
          e.fontWeight === t.fontWeight &&
          ((void 0 === e.padding && void 0 === t.padding) ||
            e.padding.equals(t.padding)) &&
          e.extras === t.extras &&
          e.rotation === t.rotation &&
          e.providerId === t.providerId;
        t.labelCache = {
          getStyleId: (e) => {
            for (const t in a)
              if (a.hasOwnProperty(t)) {
                const i = a[t];
                if (i && c(e, i.style)) return i.uses++, t;
              }
            n++;
            const t = n.toString();
            return (a[t] = { style: e, uses: 1 }), t;
          },
          freeStyle: (e) => {
            const t = a[e];
            t &&
              (t.uses--,
              setTimeout(() => {
                const t = a[e];
                t &&
                  0 === t.uses &&
                  ((e) => {
                    for (const t of Array.from(o.keys())) {
                      const { text: i, styleId: a } = d(t);
                      if (a === e) {
                        const e = o.get(t);
                        o.delete(t);
                        try {
                          (0, r.deleteSafe)(e.bitmapTexture);
                        } catch (e) {
                          s.Logger.debug(e);
                        }
                      }
                    }
                  })(e);
              }, u));
          },
          getLabel: (e, t) => {
            const i = l(e, t),
              r = o.get(i);
            return r && (r.lastUsed = Date.now()), r;
          },
          setLabel: (e, t, i) => {
            const r = l(e, t);
            o.set(r, i);
          },
          checkStyle: (e, t) => {
            const i = a[e.toString()];
            return !!i && c(i.style, t);
          },
          getMaxSize: () => h,
          setMaxSize: (e) => {
            h = e;
          },
          getSize: () => o.size,
          getMinAge: () => u,
          setMinAge: (e) => {
            u = e;
          },
          pruneCache: () => {
            if (o.size > h)
              try {
                const e = Math.min(Math.floor(o.size / 2), 2 * (o.size - h)),
                  t = Array.from(o.entries());
                t.sort((e, t) => e[1].lastUsed - t[1].lastUsed);
                for (let i = 0; i < e; i++) {
                  const [e, s] = t[i];
                  (s.bitmapTexture = (0, r.deleteSafe)(s.bitmapTexture)),
                    o.delete(e);
                }
              } catch (e) {
                console.warn(e);
              }
          },
          resetCache: () => {
            o.clear();
            for (const e in a) delete a[e];
          },
        };
      },
      50687: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LabelProvider = void 0);
        const r = i(55023);
        class s extends r.DeletableEntity {
          constructor(e) {
            super(),
              (this.numericFormatProperty = null == e ? void 0 : e.labelFormat),
              (this.precisionProperty = null == e ? void 0 : e.labelPrecision),
              (this.cursorNumericFormatProperty =
                null == e ? void 0 : e.cursorLabelFormat),
              (this.cursorPrecisionProperty =
                null == e ? void 0 : e.cursorLabelPrecision),
              (this.prefixProperty = null == e ? void 0 : e.labelPrefix),
              (this.postfixProperty = null == e ? void 0 : e.labelPostfix);
          }
          attachedToAxis(e) {
            this.parentAxis = e;
          }
          detachedFromAxis() {
            this.parentAxis = void 0;
          }
          get numericFormat() {
            return this.numericFormatProperty;
          }
          set numericFormat(e) {
            (this.numericFormatProperty = e), this.invalidateParent();
          }
          get precision() {
            return this.precisionProperty;
          }
          set precision(e) {
            (this.precisionProperty = e), this.invalidateParent();
          }
          get cursorNumericFormat() {
            return this.cursorNumericFormatProperty;
          }
          set cursorNumericFormat(e) {
            (this.cursorNumericFormatProperty = e), this.invalidateParent();
          }
          get cursorPrecision() {
            return this.cursorPrecisionProperty;
          }
          set cursorPrecision(e) {
            (this.cursorPrecisionProperty = e), this.invalidateParent();
          }
          get prefix() {
            return this.prefixProperty;
          }
          set prefix(e) {
            (this.prefixProperty = e), this.invalidateParent();
          }
          get postfix() {
            return this.postfixProperty;
          }
          set postfix(e) {
            (this.postfixProperty = e), this.invalidateParent();
          }
          get formatLabel() {
            return this.formatLabelProperty;
          }
          set formatLabel(e) {
            (this.formatLabelProperty = e), this.invalidateParent();
          }
          get formatCursorLabel() {
            return this.formatCursorLabelProperty;
          }
          set formatCursorLabel(e) {
            (this.formatCursorLabelProperty = e), this.invalidateParent();
          }
          applyFormat(e) {
            var t, i;
            return (
              (null !== (t = this.prefix) && void 0 !== t ? t : "") +
              e +
              (null !== (i = this.postfix) && void 0 !== i ? i : "")
            );
          }
          toJSON() {
            const e = {
              cursorLabelFormat: this.cursorNumericFormat,
              cursorLabelPrecision: this.cursorPrecision,
              labelFormat: this.numericFormat,
              labelPrecision: this.precision,
              labelPrefix: this.prefix,
              labelPostfix: this.postfix,
            };
            return { type: this.type, options: e };
          }
          invalidateParent() {
            this.parentAxis &&
              this.parentAxis.invalidateParentCallback &&
              this.parentAxis.invalidateParentCallback();
          }
        }
        t.LabelProvider = s;
      },
      19833: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LabelProviderBase2D = t.LabelInfo = void 0);
        const s = i(84745),
          o = i(73538),
          a = i(98353),
          n = i(85479),
          l = i(76829),
          d = i(16155),
          h = i(50687);
        class u {
          constructor(e, t, i, r, s) {
            (this.tick = e),
              (this.text = t),
              (this.bitmapTexture = i),
              (this.textureHeight = r),
              (this.textureWidth = s),
              (this.lastUsed = Date.now());
          }
        }
        t.LabelInfo = u;
        class c extends h.LabelProvider {
          constructor(e) {
            var t, i, r, a;
            super(e),
              (this.useCache = !s.IS_TEST_ENV),
              (this.useNativeText = !1),
              (this.tickToText = new Map()),
              (this.textVariesForSameTick = !1),
              (this.rotationProperty = 0),
              (this.lineSpacingProperty = 1.1),
              (this.providerId = (0, o.generateGuid)()),
              (this.rotationProperty =
                null !== (t = null == e ? void 0 : e.rotation) && void 0 !== t
                  ? t
                  : this.rotationProperty),
              (this.lineSpacing =
                null !== (i = null == e ? void 0 : e.lineSpacing) &&
                void 0 !== i
                  ? i
                  : this.lineSpacing),
              (this.useSharedCache =
                null !== (r = null == e ? void 0 : e.useSharedCache) &&
                void 0 !== r
                  ? r
                  : n.SciChartDefaults.useSharedCache),
              (this.useNativeText =
                null !== (a = null == e ? void 0 : e.useNativeText) &&
                void 0 !== a
                  ? a
                  : n.SciChartDefaults.useNativeText);
          }
          get rotation() {
            return this.rotationProperty;
          }
          set rotation(e) {
            this.rotationProperty !== e &&
              ((this.rotationProperty = e), this.invalidateParent());
          }
          get lineSpacing() {
            return this.useNativeText && 1.1 === this.lineSpacingProperty
              ? 2
              : this.lineSpacingProperty;
          }
          set lineSpacing(e) {
            (this.lineSpacingProperty = e), this.invalidateParent();
          }
          getLabels(e) {
            const t = this.parentAxis;
            this.useCache &&
              (this.styleId
                ? d.labelCache.checkStyle(
                    this.styleId,
                    this.getCachedStyle()
                  ) ||
                  (this.resetCache(),
                  (this.styleId = d.labelCache.getStyleId(
                    this.getCachedStyle()
                  )))
                : (this.styleId = d.labelCache.getStyleId(
                    this.getCachedStyle()
                  )));
            let i = e;
            if (this.parentAxis.isCategoryAxis) {
              const t = this.parentAxis.getCurrentCoordinateCalculator();
              i = e.map((e) => t.transformIndexToData(e));
            }
            let r = [];
            if (this.useCache) {
              if (this.useNativeText) {
                const e = [];
                for (const t of i) {
                  const i = this.tickToText.get(t);
                  if (this.textVariesForSameTick) {
                    const s = this.formatLabel(t);
                    i && i === s
                      ? r.push(i)
                      : (this.tickToText.set(t, s), e.push(s), r.push(s));
                  } else if (i) r.push(i);
                  else {
                    const i = this.formatLabel(t);
                    this.tickToText.set(t, i), e.push(i), r.push(i);
                  }
                }
                this.getLabelSizesNative(e, t.dpiAdjustedLabelStyle);
              } else
                for (const e of i) {
                  let i, s;
                  const o = this.tickToText.get(e);
                  if (
                    (this.textVariesForSameTick
                      ? ((s = this.formatLabel(e)),
                        o && o === s
                          ? ((i = d.labelCache.getLabel(o, this.styleId)),
                            i && r.push(o))
                          : this.tickToText.set(e, s))
                      : o
                      ? ((s = o),
                        (i = d.labelCache.getLabel(o, this.styleId)),
                        i && r.push(o))
                      : ((s = this.formatLabel(e)), this.tickToText.set(e, s)),
                    !i)
                  ) {
                    const o = this.getCachedLabelTexture(
                      s,
                      t.axisRenderer.textureManager,
                      t.dpiAdjustedLabelStyle
                    );
                    null !== o.textureWidth &&
                      ((i = new u(
                        e,
                        s,
                        o.bitmapTexture,
                        o.textureHeight,
                        o.textureWidth
                      )),
                      d.labelCache.setLabel(s, this.styleId, i)),
                      r.push(s);
                  }
                }
              d.labelCache.pruneCache(), this.pruneTickTextCache();
            } else r = i.map((e) => this.formatLabel(e));
            return r;
          }
          getLabelHeight(e, t, i) {
            if (
              this.rotationProperty % 90 == 0 ||
              this.parentAxis.isHorizontalAxis
            ) {
              const e = this.useCache
                ? d.labelCache.getLabel(t, this.styleId)
                : void 0;
              if (!e || !e.textureHeight) {
                const { fontSize: e, padding: t } = i;
                return (
                  (0, l.measureTextHeight)(e) +
                  (null == t ? void 0 : t.top) +
                  (null == t ? void 0 : t.bottom)
                );
              }
              return e.textureHeight;
            }
            return i.fontSize + i.padding.top + i.padding.bottom;
          }
          getLabelWidth(e, t, i) {
            if (
              this.rotationProperty % 90 != 0 &&
              this.parentAxis.isHorizontalAxis
            )
              return i.fontSize + i.padding.left + i.padding.right;
            {
              const r = this.useCache
                ? d.labelCache.getLabel(t, this.styleId)
                : void 0;
              if (!r || !r.textureWidth) {
                const { padding: r } = i;
                return (0, l.measureTextWidth)(e, t) + r.left + r.right;
              }
              return r.textureWidth;
            }
          }
          getMaxLabelHeightForHorizontalAxis(e, t, i) {
            let r = 0;
            return (
              e.forEach((e) => {
                const s = this.getLabelHeight(t, e, i);
                r = s > r ? s : r;
              }),
              r
            );
          }
          getMaxLabelWidthForVerticalAxis(e, t, i) {
            let r = 0;
            return (
              e.forEach((e) => {
                const s = this.getLabelWidth(t, e, i);
                r = s > r ? s : r;
              }),
              r
            );
          }
          getCachedLabelTexture(e, t, i) {
            var r;
            const s = d.labelCache.getLabel(e, this.styleId);
            return s
              ? {
                  textureWidth:
                    null !== (r = s.textureWidth) && void 0 !== r ? r : null,
                  textureHeight: s.textureHeight,
                  bitmapTexture: s.bitmapTexture,
                }
              : this.getLabelTexture(e, t, i);
          }
          getLabelTextureAsync(e, t, i) {
            return r(this, void 0, void 0, function* () {
              return this.getLabelTexture(e, t, i);
            });
          }
          getLabelTexture(e, t, i) {
            return t.createTextTexture([e], i, this.rotationProperty);
          }
          getNativeLabelInfo(e) {
            return d.labelCache.getLabel(e, this.styleId);
          }
          invalidateCache() {
            this.styleId && d.labelCache.freeStyle(this.styleId),
              this.tickToText.clear(),
              (this.styleId = null);
          }
          resetCache() {
            this.invalidateCache();
          }
          delete() {
            this.resetCache();
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                rotation: this.rotation,
                lineSpacing: this.lineSpacing,
                asyncLabels: !1,
                useSharedCache: this.useSharedCache,
                useNativeText: this.useNativeText,
              };
            return Object.assign(e.options, t), e;
          }
          getLabelSizesNative(e, t) {
            if (!e || 0 === e.length || s.IS_TEST_ENV) return;
            let i = "";
            const r = [],
              o = this.parentAxis.parentSurface.webAssemblyContext2D,
              n = (0, a.getTextBounds)(o),
              l = o.SCRTGetMainRenderContext2D(),
              h = (0, a.getFontKey)(o, this.getCachedStyle(), !1),
              c = l.AquireFont(h),
              p = this.rotation * (Math.PI / 180),
              g = Math.abs(Math.sin(p)),
              y = Math.abs(Math.cos(p)),
              f = (e, i, r) => {
                var s, o;
                let a = e,
                  n = i;
                0 !== this.rotation &&
                  ((n = e * g + i * y), (a = e * y + i * g));
                const l = new u(
                  void 0,
                  r,
                  void 0,
                  n +
                    (null === (s = t.padding) || void 0 === s
                      ? void 0
                      : s.top) +
                    (null == t ? void 0 : t.padding.bottom),
                  a +
                    (null === (o = t.padding) || void 0 === o
                      ? void 0
                      : o.left) +
                    (null == t ? void 0 : t.padding.right)
                );
                (l.textWidth = e),
                  (l.textHeight = i),
                  d.labelCache.setLabel(r, this.styleId, l);
              };
            if (
              (e.forEach((e) => {
                e && !e.includes("\n")
                  ? (r.push(e), (i += e + "\n"))
                  : (c.CalculateStringBounds(null != e ? e : "", n, 0),
                    f(n.m_fWidth, n.m_fHeight, e));
              }),
              r.length > 0)
            ) {
              c.CalculateStringBounds(null != i ? i : "", n, 2);
              for (let e = 0; e < r.length; e++) {
                const t = r[e],
                  i = n.GetLineBounds(e);
                f(i.m_fWidth, i.m_fHeight - i.m_fOffsetY, t);
              }
            }
          }
          pruneTickTextCache() {
            this.tickToText.size > 1e3 && this.tickToText.clear();
          }
          getCachedStyle() {
            const e = this.parentAxis;
            return Object.assign(Object.assign({}, e.dpiAdjustedLabelStyle), {
              rotation: this.rotation,
              providerId: this.useSharedCache
                ? this.useNativeText
                  ? "native"
                  : void 0
                : this.providerId,
            });
          }
          clearCache() {
            this.useCache &&
              this.styleId &&
              (d.labelCache.freeStyle(this.styleId), (this.styleId = void 0)),
              this.tickToText.clear();
          }
          invalidateParent() {
            this.clearCache(), super.invalidateParent();
          }
        }
        t.LabelProviderBase2D = c;
      },
      48767: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LogarithmicLabelProvider = void 0);
        const r = i(96528),
          s = i(8591),
          o = i(39920);
        class a extends o.NumericLabelProvider {
          constructor(e) {
            var t, i;
            super(
              Object.assign(
                {
                  labelFormat:
                    null !== (t = null == e ? void 0 : e.labelFormat) &&
                    void 0 !== t
                      ? t
                      : r.ENumericFormat.Scientific,
                  labelPrecision:
                    null !== (i = null == e ? void 0 : e.labelPrecision) &&
                    void 0 !== i
                      ? i
                      : 1,
                },
                e
              )
            ),
              (this.formatLabelProperty = (e) =>
                this.numericFormat === r.ENumericFormat.Scientific
                  ? this.applyFormat(
                      (0, s.toScientific)(
                        e,
                        this.precision,
                        this.logarithmicBase
                      )
                    )
                  : this.applyFormat(
                      (0, s.formatNumber)(
                        e,
                        this.numericFormat,
                        this.precision,
                        this.engineeringPrefix
                      )
                    ));
          }
        }
        t.LogarithmicLabelProvider = a;
      },
      39920: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericLabelProvider = void 0);
        const r = i(40359),
          s = i(96528),
          o = i(8591),
          a = i(19833);
        class n extends a.LabelProviderBase2D {
          constructor(e) {
            var t, i;
            super(
              Object.assign(
                {
                  labelFormat:
                    null !== (t = null == e ? void 0 : e.labelFormat) &&
                    void 0 !== t
                      ? t
                      : s.ENumericFormat.Decimal,
                  labelPrecision:
                    null !== (i = null == e ? void 0 : e.labelPrecision) &&
                    void 0 !== i
                      ? i
                      : 1,
                },
                e
              )
            ),
              (this.type = r.ELabelProviderType.Numeric),
              (this.formatLabelProperty = (e) =>
                this.applyFormat(
                  (0, o.formatNumber)(
                    e,
                    this.numericFormat,
                    this.precision,
                    this.engineeringPrefix
                  )
                )),
              (this.formatCursorLabelProperty = (e) => {
                var t, i;
                return this.applyFormat(
                  (0, o.formatNumber)(
                    e,
                    null !== (t = this.cursorNumericFormat) && void 0 !== t
                      ? t
                      : this.numericFormat,
                    null !== (i = this.cursorPrecision) && void 0 !== i
                      ? i
                      : this.precision,
                    this.engineeringPrefix
                  )
                );
              });
          }
          get engineeringPrefix() {
            return this.engineeringPrefixProperty;
          }
          set engineeringPrefix(e) {
            (this.engineeringPrefixProperty = e), this.invalidateParent();
          }
          onBeginAxisDraw() {}
        }
        t.NumericLabelProvider = n;
      },
      92596: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PieLabelProvider = void 0);
        const r = i(40359),
          s = i(96528),
          o = i(8591),
          a = i(79548),
          n = i(50687);
        class l extends n.LabelProvider {
          constructor(e) {
            var t, i;
            super(
              Object.assign(
                {
                  labelFormat:
                    null !== (t = null == e ? void 0 : e.labelFormat) &&
                    void 0 !== t
                      ? t
                      : s.ENumericFormat.Decimal,
                  labelPrecision:
                    null !== (i = null == e ? void 0 : e.labelPrecision) &&
                    void 0 !== i
                      ? i
                      : 2,
                },
                e
              )
            ),
              (this.type = r.ELabelProviderType.Pie),
              (this.formatLabelProperty = (e) =>
                this.applyFormat(
                  (0, o.formatNumber)(e, this.numericFormat, this.precision)
                ) +
                (this.parentSurface.valueMode === a.EPieValueMode.Percentage
                  ? " %"
                  : ""));
          }
          delete() {}
          getSegmentText(e, t) {
            const i =
              this.parentSurface.valueMode === a.EPieValueMode.Percentage
                ? e.getPercentage(t)
                : e.value;
            return this.formatLabel(i);
          }
          attachedToSurface(e) {
            this.parentSurface = e;
          }
          onBeginAxisDraw() {}
          invalidateParent() {
            this.parentSurface &&
              this.parentSurface.invalidateElement &&
              this.parentSurface.invalidateElement();
          }
        }
        t.PieLabelProvider = l;
      },
      68695: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SmartDateLabelProvider = t.ETradeChartLabelFormat = void 0);
        const r = i(40359),
          s = i(96528),
          o = i(72633),
          a = i(8591),
          n = i(19833);
        var l;
        !(function (e) {
          (e.MilliSeconds = "MilliSeconds"),
            (e.Seconds = "Seconds"),
            (e.Minutes = "Minutes"),
            (e.Days = "Days"),
            (e.Months = "Months");
        })((l = t.ETradeChartLabelFormat || (t.ETradeChartLabelFormat = {})));
        class d extends n.LabelProviderBase2D {
          constructor(e) {
            var t, i, o, n, l;
            super(
              Object.assign(
                {
                  labelFormat:
                    null !== (t = null == e ? void 0 : e.labelFormat) &&
                    void 0 !== t
                      ? t
                      : s.ENumericFormat.Date_DDMMYYYY,
                  cursorLabelFormat:
                    null !== (i = null == e ? void 0 : e.cursorLabelFormat) &&
                    void 0 !== i
                      ? i
                      : s.ENumericFormat.Date_DDMMYYYY,
                },
                e
              )
            ),
              (this.type = r.ELabelProviderType.SmartDate),
              (this.textVariesForSameTick = !0),
              (this.showWiderDateOnFirstLabelProperty = !0),
              (this.showYearOnWiderDateProperty = !1),
              (this.dateOffsetProperty = 0),
              (this.firstLabel = !0),
              (this.showWiderDateOnFirstLabelProperty =
                null !==
                  (o = null == e ? void 0 : e.showWiderDateOnFirstLabel) &&
                void 0 !== o
                  ? o
                  : this.showWiderDateOnFirstLabel),
              (this.showYearOnWiderDateProperty =
                null !== (n = null == e ? void 0 : e.showYearOnWiderDate) &&
                void 0 !== n
                  ? n
                  : this.showYearOnWiderDate),
              (this.dateOffsetProperty =
                null !== (l = null == e ? void 0 : e.dateOffset) && void 0 !== l
                  ? l
                  : this.dateOffset),
              (this.formatCursorLabelProperty = (e) => {
                var t, i;
                return this.applyFormat(
                  (0, a.formatNumber)(
                    e + this.dateOffset,
                    null !== (t = this.cursorNumericFormat) && void 0 !== t
                      ? t
                      : this.numericFormat,
                    null !== (i = this.cursorPrecision) && void 0 !== i
                      ? i
                      : this.precision
                  )
                );
              }),
              (this.doFormat = this.doFormat.bind(this)),
              (this.formatLabelProperty = this.doFormat);
          }
          get showWiderDateOnFirstLabel() {
            return this.showWiderDateOnFirstLabelProperty;
          }
          set showWiderDateOnFirstLabel(e) {
            this.showWiderDateOnFirstLabelProperty !== e &&
              ((this.showWiderDateOnFirstLabelProperty = e),
              this.invalidateParent());
          }
          get dateOffset() {
            var e;
            return null !== (e = this.dateOffsetProperty) && void 0 !== e
              ? e
              : 0;
          }
          set dateOffset(e) {
            this.dateOffsetProperty !== e &&
              ((this.dateOffsetProperty = e), this.invalidateParent());
          }
          get showYearOnWiderDate() {
            return this.showYearOnWiderDateProperty;
          }
          set showYearOnWiderDate(e) {
            this.showYearOnWiderDateProperty !== e &&
              ((this.showYearOnWiderDateProperty = e), this.invalidateParent());
          }
          onBeginAxisDraw() {}
          getLabels(e) {
            let t = e[0];
            const i = e.length;
            let r = e[i - 1];
            if (this.parentAxis.isCategoryAxis) {
              const e = this.parentAxis.getCurrentCoordinateCalculator();
              (t = e.transformIndexToData(t)), (r = e.transformIndexToData(r));
            }
            (this.prevPrevValue = void 0), (this.prevValue = void 0);
            const s = r - t;
            (this.firstLabel = !0), (this.format = this.getLabelRange(s, i));
            const o = super.getLabels(e);
            return (this.format = void 0), o;
          }
          get numericFormat() {}
          set numericFormat(e) {}
          formatDateWide(e, t) {
            return e === l.MilliSeconds
              ? (this.showYearOnWiderDate
                  ? (0, o.formatUnixDateToHumanString)(t) + " "
                  : "") + (0, o.formatUnixDateToHumanStringHHMM)(t)
              : e === l.Seconds || e === l.Minutes
              ? (0, o.formatUnixDateToHumanStringMMMDD)(t) +
                (this.showYearOnWiderDate
                  ? " " + (0, o.formatUnixDateToHumanStringYYYY)(t)
                  : "")
              : e === l.Days
              ? (0, o.formatUnixDateToHumanStringMMM)(t) +
                (this.showYearOnWiderDate
                  ? " " + (0, o.formatUnixDateToHumanStringYYYY)(t)
                  : "")
              : (0, o.formatUnixDateToHumanStringYYYY)(t);
          }
          formatDatePrecise(e, t) {
            return e === l.MilliSeconds
              ? (0, o.formatUnixDateToHumanStringSSms)(t)
              : e === l.Seconds
              ? (0, o.formatUnixDateToHumanStringHHMMSS)(t)
              : e === l.Minutes
              ? (0, o.formatUnixDateToHumanStringHHMM)(t)
              : e === l.Days || e === l.Months
              ? (0, o.formatUnixDateToHumanStringDD)(t)
              : (0, a.formatNumber)(t, s.ENumericFormat.Date_DDMMYYYY, 0);
          }
          doFormat(e) {
            var t, i;
            const r = e + this.dateOffset;
            if (this.format) {
              const t = this.formatSmartLabel(
                this.format,
                r,
                this.prevValue,
                this.prevPrevValue,
                e
              );
              return (
                (this.prevPrevValue = this.prevValue), (this.prevValue = r), t
              );
            }
            return this.applyFormat(
              (0, a.formatNumber)(
                r,
                null !== (t = this.cursorNumericFormat) && void 0 !== t
                  ? t
                  : this.numericFormat,
                null !== (i = this.cursorPrecision) && void 0 !== i
                  ? i
                  : this.precision
              )
            );
          }
          getLabelRange(e, t) {
            return e <= 10
              ? l.MilliSeconds
              : e <= 3600
              ? l.Seconds
              : e <= 432e3
              ? l.Minutes
              : e <= 432e4
              ? l.Days
              : l.Months;
          }
          formatSmartLabel(e, t, i, r, s) {
            const a = !this.firstLabel || this.showWiderDateOnFirstLabel;
            this.firstLabel = !1;
            const n = this.formatDateWide(e, t);
            return e !== l.Months
              ? (void 0 !== i && n === this.formatDateWide(e, i)) || !a
                ? this.formatDatePrecise(e, t)
                : n
              : (void 0 !== i && n === this.formatDateWide(e, i)) || !a
              ? void 0 === r ||
                this.formatDateWide(e, i) !== this.formatDateWide(e, r) ||
                (0, o.formatUnixDateToHumanStringMMM)(t) !==
                  (0, o.formatUnixDateToHumanStringMMM)(i)
                ? (0, o.formatUnixDateToHumanStringMMM)(t)
                : this.formatDatePrecise(e, t)
              : n;
          }
        }
        t.SmartDateLabelProvider = d;
      },
      18184: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.wrapText = t.TextLabelProvider = void 0);
        const r = i(40359),
          s = i(76829),
          o = i(16155),
          a = i(19833);
        class n extends a.LabelProviderBase2D {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.ELabelProviderType.Text),
              (this.maxLengthProperty = 0),
              (this.labelsProperty =
                null !== (t = null == e ? void 0 : e.labels) && void 0 !== t
                  ? t
                  : []),
              (this.maxLength =
                null !== (i = null == e ? void 0 : e.maxLength) && void 0 !== i
                  ? i
                  : this.maxLength),
              (this.formatLabelProperty = (e) => {
                var t, i;
                if (
                  this.parentAxis.isCategoryAxis &&
                  Array.isArray(this.labels)
                ) {
                  const i = this.parentAxis
                    .getCurrentCoordinateCalculator()
                    .transformDataToIndex(e);
                  return this.wrapText(
                    null !== (t = this.labels[i]) && void 0 !== t ? t : ""
                  );
                }
                return this.wrapText(
                  null !== (i = this.labels[e]) && void 0 !== i ? i : ""
                );
              }),
              (this.formatCursorLabelProperty = this.formatLabelProperty);
          }
          get labels() {
            return this.labelsProperty;
          }
          set labels(e) {
            (this.labelsProperty = e), this.invalidateParent();
          }
          get maxLength() {
            return this.maxLengthProperty;
          }
          set maxLength(e) {
            (this.maxLengthProperty = e), this.invalidateParent();
          }
          onBeginAxisDraw() {}
          getLabelWidth(e, t, i) {
            if (
              this.useNativeText ||
              this.rotation % 90 == 0 ||
              !this.parentAxis.isHorizontalAxis
            ) {
              const r = o.labelCache.getLabel(t, this.styleId);
              if (!r) {
                const { padding: r } = i;
                return (0, s.measureTextWidth)(e, t) + r.left + r.right;
              }
              return r.textureWidth;
            }
            return (
              (Array.isArray(t) ? t : t.split("\n")).length *
                this.lineSpacing *
                i.fontSize +
              i.padding.left +
              i.padding.right
            );
          }
          getLabelTexture(e, t, i) {
            const r = e.split("\n");
            return t.createTextTexture(r, i, this.rotation, this.lineSpacing);
          }
          wrapText(e) {
            return e && Array.isArray(e)
              ? e.join("\n")
              : (0, t.wrapText)(e, this.maxLength).join("\n");
          }
          toJSON() {
            const e = super.toJSON(),
              t = { labels: this.labels, maxLength: this.maxLength };
            return Object.assign(e.options, t), e;
          }
          getCachedStyle() {
            const e = this.parentAxis;
            return Object.assign(Object.assign({}, e.dpiAdjustedLabelStyle), {
              rotation: this.rotation,
              extras: `ls${this.lineSpacing},ml${this.maxLength}`,
              providerId: this.useSharedCache ? void 0 : this.providerId,
            });
          }
        }
        (t.TextLabelProvider = n),
          (t.wrapText = (e, t) => {
            if (0 === t) return [e];
            const i = [];
            if (!e) return i;
            const r = e.split(" ");
            let s = "";
            for (const e of r) {
              const r = s + ("" !== s ? " " : "") + e;
              r.length > t
                ? "" === s
                  ? i.push(e)
                  : (i.push(s), (s = e))
                : (s = r);
            }
            return i.push(s), i;
          });
      },
      51392: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LogarithmicAxis = t.MIN_LOG_AXIS_VALUE = void 0);
        const r = i(10276),
          s = i(31194),
          o = i(98140),
          a = i(2192),
          n = i(86699),
          l = i(46650),
          d = i(98172),
          h = i(57397),
          u = i(8900),
          c = i(19643),
          p = i(48767);
        t.MIN_LOG_AXIS_VALUE = 1e-10;
        class g extends h.AxisBase2D {
          constructor(e, i) {
            var r, s, n, l;
            super(e, i),
              (this.type = a.EAxisType.LogarithmicAxis),
              (this.logBaseProperty = 10),
              (this.isHighPrecisionTicksProperty = !0),
              (this.tickProvider = new d.LogarithmicTickProvider(e)),
              (this.deltaCalculator = new c.LogarithmicDeltaCalculator(e)),
              (this.labelProvider =
                null !== (r = null == i ? void 0 : i.labelProvider) &&
                void 0 !== r
                  ? r
                  : new p.LogarithmicLabelProvider(i)),
              (this.logBase =
                null !== (s = null == i ? void 0 : i.logBase) && void 0 !== s
                  ? s
                  : this.logBaseProperty),
              (this.isNegativeProperty =
                null !== (n = null == i ? void 0 : i.isNegative) &&
                void 0 !== n &&
                n),
              (this.visibleRange =
                (null == i ? void 0 : i.visibleRange) ||
                this.getDefaultNonZeroRange()),
              (null == i ? void 0 : i.visibleRange) ||
                (this.hasVisibleRangeSet = !1),
              (this.majorTickMode =
                (null == i ? void 0 : i.majorTickMode) || this.majorTickMode),
              (this.minorTickMode =
                (null == i ? void 0 : i.minorTickMode) || this.minorTickMode),
              (this.isHighPrecisionTicks =
                null !== (l = null == i ? void 0 : i.isHighPrecisionTicks) &&
                void 0 !== l
                  ? l
                  : this.isHighPrecisionTicksProperty),
              (null == i ? void 0 : i.visibleRangeLimit)
                ? (this.visibleRangeLimit = i.visibleRangeLimit)
                : this.isNegativeProperty
                ? (this.visibleRangeLimit = new o.NumberRange(
                    -1 / 0,
                    -t.MIN_LOG_AXIS_VALUE
                  ))
                : (this.visibleRangeLimit = new o.NumberRange(
                    t.MIN_LOG_AXIS_VALUE,
                    1 / 0
                  ));
          }
          get logBase() {
            return this.logBaseProperty;
          }
          set logBase(e) {
            this.logBaseProperty !== e &&
              ((this.logBaseProperty = e),
              this.clearCoordCalcCache(),
              this.updateProviders(),
              this.notifyPropertyChanged(u.PROPERTY.LOG_BASE));
          }
          get isNegative() {
            return this.isNegativeProperty;
          }
          set isNegative(e) {
            (this.isNegativeProperty = e),
              this.isNegativeProperty
                ? (this.visibleRangeLimit = new o.NumberRange(-1 / 0, -1e-10))
                : (this.visibleRangeLimit = new o.NumberRange(1e-10, 1 / 0)),
              this.notifyPropertyChanged(u.PROPERTY.IS_NEGATIVE);
          }
          get isHighPrecisionTicks() {
            return this.isHighPrecisionTicksProperty;
          }
          set isHighPrecisionTicks(e) {
            (this.isHighPrecisionTicksProperty = e),
              this.updateProviders(),
              this.notifyPropertyChanged(u.PROPERTY.HIGH_PRECISION_TICKS);
          }
          getDefaultNonZeroRange() {
            const e = this.isNegativeProperty ? -1 : 1;
            return new o.NumberRange(
              e * Math.pow(this.logBase, -1),
              e * Math.pow(this.logBase, 2)
            );
          }
          hasValidVisibleRange() {
            return (
              super.hasValidVisibleRange() &&
              this.visibleRange.min * this.visibleRange.max > 0
            );
          }
          get tickProvider() {
            return this.tickProviderProperty;
          }
          set tickProvider(e) {
            (this.tickProviderProperty = e),
              this.updateProviders(),
              this.notifyPropertyChanged(u.PROPERTY.TICK_PROVIDER);
          }
          get deltaCalculator() {
            return this.deltaCalculatorProperty;
          }
          set deltaCalculator(e) {
            (this.deltaCalculatorProperty = e),
              this.updateProviders(),
              this.notifyPropertyChanged(u.PROPERTY.DELTA_CALCULATOR);
          }
          get labelProvider() {
            return this.labelProviderProperty;
          }
          set labelProvider(e) {
            (this.labelProviderProperty = e),
              this.updateProviders(),
              this.notifyPropertyChanged(u.PROPERTY.LABEL_PROVIDER);
          }
          get majorTickMode() {
            return this.logTickProvider.majorTickMode;
          }
          set majorTickMode(e) {
            this.logTickProvider.majorTickMode = e;
          }
          get minorTickMode() {
            return this.logTickProvider.minorTickMode;
          }
          set minorTickMode(e) {
            this.logTickProvider.minorTickMode = e;
          }
          getWindowedYRange(e) {
            let t;
            return (
              this.parentSurface &&
                this.parentSurface.renderableSeries
                  .asArray()
                  .filter(
                    (e) =>
                      e.yAxisId === this.id &&
                      e.isVisible &&
                      e.hasDataSeriesValues()
                  )
                  .forEach((i) => {
                    const r = (null == e ? void 0 : e.containsKey(i.xAxisId))
                        ? e.item(i.xAxisId)
                        : this.getXVisibleRange(i.xAxisId),
                      s = this.getIsXCategoryAxis(i.xAxisId);
                    if (r) {
                      const e = i.getYRange(r, s);
                      e && (t = t ? t.union(e) : e);
                    }
                  }),
              (null == t ? void 0 : t.isZero()) &&
                (t = this.coerceZeroVisibleRange(t)),
              this.growBy && t && (t = t.growByLog(this.growBy, this.logBase)),
              this.visibleRangeLimit &&
                t &&
                (t = t.clip(this.visibleRangeLimit)),
              t
            );
          }
          animateVisibleRange(e, t, i = r.easing.outCubic, o = () => {}) {
            var a;
            return t <= 0
              ? ((this.visibleRange = e || this.visibleRange), void o())
              : (null === (a = this.visibleRangeAnimationToken) ||
                  void 0 === a ||
                  a.cancel(),
                (this.visibleRangeAnimationToken =
                  s.NumberRangeAnimator.animate(
                    this.visibleRange,
                    e,
                    t,
                    (e) => {
                      this.visibleRange = e;
                    },
                    o,
                    i,
                    !0
                  )),
                this.parentSurface.addAnimation(
                  this.visibleRangeAnimationToken
                ),
                this.visibleRangeAnimationToken);
          }
          scale(e, t, i) {
            const r = e.max / e.min;
            let s, a;
            const n = this.flippedCoordinates ? !i : i,
              l = this.flippedCoordinates ? -t : t;
            n
              ? ((s = e.min),
                (a =
                  (l > 0 ? Math.pow(r, 1 - l) : Math.pow(r, 1 + Math.abs(l))) *
                  s))
              : ((a = e.max), (s = a / Math.pow(r, 1 + l))),
              (this.visibleRange = new o.NumberRange(s, a));
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                logBase: this.logBase,
                isNegative: this.isNegative,
                majorTickMode: this.majorTickMode,
                minorTickMode: this.minorTickMode,
                isHighPrecisionTicks: this.isHighPrecisionTicks,
              };
            return Object.assign(e.options, t), e;
          }
          getCurrentCoordinateCalculatorInternal() {
            const e = this.visibleRange.min,
              t = this.visibleRange.max,
              i = this.axisLength,
              r = this.isXAxis
                ? n.EXyDirection.XDirection
                : n.EXyDirection.YDirection;
            return new l.LogarithmicCoordinateCalculator(
              this.webAssemblyContext2D,
              i,
              e,
              t,
              r,
              this.logBase,
              this.isXAxis !== this.flippedCoordinates,
              this.offset
            );
          }
          getMaxXRange() {
            let e = this.getXDataRange();
            if (e)
              return (
                this.growBy &&
                  e &&
                  (e = e.growByLog(this.growBy, this.logBase)),
                this.visibleRangeLimit &&
                  e &&
                  (e = e.clip(this.visibleRangeLimit)),
                e
              );
          }
          get logTickProvider() {
            return this.tickProvider;
          }
          updateProviders() {
            const e = this.tickProvider;
            e &&
              ((e.logarithmicBase = this.logBase),
              (e.isHighPrecisionTicks = this.isHighPrecisionTicks));
            const t = this.deltaCalculator;
            t &&
              ((t.logarithmicBase = this.logBase),
              (t.isHighPrecisionTicks = this.isHighPrecisionTicks));
            const i = this.labelProvider;
            i && (i.logarithmicBase = this.logBase);
          }
        }
        t.LogarithmicAxis = g;
      },
      54948: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumericAxis = void 0);
        const r = i(2192),
          s = i(33166),
          o = i(40194),
          a = i(3346),
          n = i(57397),
          l = i(40059),
          d = i(39920);
        class h extends n.AxisBase2D {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.type = r.EAxisType.NumericAxis),
              (this.tickProvider = new a.NumericTickProvider(
                this.webAssemblyContext2D
              )),
              (this.labelProvider =
                null !== (i = null == t ? void 0 : t.labelProvider) &&
                void 0 !== i
                  ? i
                  : new d.NumericLabelProvider(t)),
              (this.deltaCalculator = new l.NumericDeltaCalculator(
                this.webAssemblyContext2D
              ));
          }
          getCurrentCoordinateCalculatorInternal() {
            const e = this.visibleRange.min,
              t = this.visibleRange.max,
              i = this.offset,
              r = this.axisLength;
            return this.isXAxis !== this.flippedCoordinates
              ? new s.FlippedNumericCoordinateCalculator(
                  this.webAssemblyContext2D,
                  r,
                  e,
                  t,
                  i,
                  this.allowFastMath
                )
              : new o.NumericCoordinateCalculator(
                  this.webAssemblyContext2D,
                  r,
                  e,
                  t,
                  i,
                  this.allowFastMath
                );
          }
        }
        t.NumericAxis = h;
      },
      83989: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.VisibleRangeChangedArgs = void 0),
          (t.VisibleRangeChangedArgs = class {
            constructor(e) {
              this.visibleRange = e;
            }
          });
      },
      8900: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).ALLOW_FAST_MATH =
            "ALLOW_FAST_MATH"),
          (i.AUTO_RANGE = "AUTO_RANGE"),
          (i.AUTO_TICKS = "AUTO_TICKS"),
          (i.AXIS_ALIGNMENT = "AXIS_ALIGNMENT"),
          (i.AXIS_BANDS_FILL = "AXIS_BANDS_FILL"),
          (i.AXIS_TITLE = "AXIS_TITLE"),
          (i.AXIS_LENGTH = "AXIS_LENGTH"),
          (i.BORDER = "BORDER"),
          (i.CURSOR_TEXT_FORMATTING = "CURSOR_TEXT_FORMATTING"),
          (i.DELTA_CALCULATOR = "DELTA_CALCULATOR"),
          (i.TICK_COORDINATES_CALCULATOR = "TICK_COORDINATES_CALCULATOR"),
          (i.DRAW_MAJOR_GRID_LINES = "DRAW_MAJOR_GRID_LINES"),
          (i.DRAW_MINOR_GRID_LINES = "DRAW_MINOR_GRID_LINES"),
          (i.DRAW_MAJOR_TICK_LINES = "DRAW_MAJOR_TICK_LINES"),
          (i.DRAW_MINOR_TICK_LINES = "DRAW_MINOR_TICK_LINES"),
          (i.DRAW_MAJOR_BANDS = "DRAW_MAJOR_BANDS"),
          (i.DRAW_LABELS = "DRAW_LABELS"),
          (i.FLIPPED_COORDINATES = "FLIPPED_COORDINATES"),
          (i.GROW_BY = "GROW_BY"),
          (i.ID = "ID"),
          (i.IS_AXIS_FLIPPED = "IS_AXIS_FLIPPED"),
          (i.IS_NEGATIVE = "IS_NEGATIVE"),
          (i.IS_INNER_AXIS = "IS_INNER_AXIS"),
          (i.IS_PRIMARY_AXIS = "IS_PRIMARY_AXIS"),
          (i.IS_VISIBLE = "IS_VISIBLE"),
          (i.IS_XAXIS = "IS_XAXIS"),
          (i.LABEL_PROVIDER = "LABEL_PROVIDER"),
          (i.AXIS_RENDERER = "LABEL_PROVIDER"),
          (i.LOG_BASE = "LOG_BASE"),
          (i.MAJOR_DELTA = "MAJOR_DELTA"),
          (i.MAJOR_GRID_LINE_STYLE = "MAJOR_GRID_LINE_STYLE"),
          (i.MAJOR_TICK_LINE_STYLE = "MAJOR_TICK_LINE_STYLE"),
          (i.MAX_AUTO_TICKS = "MAX_AUTO_TICKS"),
          (i.MINOR_DELTA = "MINOR_DELTA"),
          (i.MINOR_GRID_LINE_STYLE = "MINOR_GRID_LINE_STYLE"),
          (i.MINOR_TICK_LINE_STYLE = "MINOR_TICK_LINE_STYLE"),
          (i.MINORS_PER_MAJOR = "MINORS_PER_MAJOR"),
          (i.OFFSET = "OFFSET"),
          (i.TEXT_FORMATTING = "TEXT_FORMATTING"),
          (i.TEXT_STYLE = "TEXT_STYLE"),
          (i.TICK_TEXT_BRUSH = "TICK_TEXT_BRUSH"),
          (i.VISIBLE_RANGE = "VISIBLE_RANGE"),
          (i.VISIBLE_RANGE_LIMIT = "VISIBLE_RANGE_LIMIT"),
          (i.VISIBLE_RANGE_SIZE_LIMIT = "VISIBLE_RANGE_SIZE_LIMIT"),
          (i.TICK_PROVIDER = "TICK_PROVIDER"),
          (i.VIEW_RECT = "VIEW_RECT"),
          (i.ZOOMEXTENTS_RANGE = "ZOOMEXTENTS_RANGE"),
          (i.DRAW_ONLY_WITHIN_XRANGE = "DRAW_ONLY_WITHIN_XRANGE"),
          (i.HIGH_PRECISION_TICKS = "HIGH_PRECISION_TICKS");
      },
      74734: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getAxis3dById = t.getAxisById = void 0);
        const r = i(23866);
        function s(e, t) {
          r.Guard.notNull(e, "axes");
          for (let i = 0; i < e.size(); i++) {
            const r = e.get(i);
            if (r.id === t) return r;
          }
          console.warn(
            `scichart getAxisGeneric(): Axis with Id '${t}' was not found`
          );
        }
        (t.getAxisById = function (e, t) {
          return s(e, t);
        }),
          (t.getAxis3dById = function (e, t) {
            return s(e, t);
          });
      },
      31858: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HeatmapLegend = void 0);
        const s = i(23866),
          o = i(98140),
          a = i(14936),
          n = i(15799),
          l = i(54948),
          d = i(60981),
          h = i(70033),
          u = i(84626),
          c = i(56744),
          p = i(55023);
        class g extends p.DeletableEntity {
          constructor(e, t) {
            var i, r, a, u, c, p, g;
            super(),
              (this.SIZE = 100),
              s.Guard.notNull(e, "sciChartSurface"),
              (this.sciChartSurface = e),
              (this.wasmContext = e.webAssemblyContext2D);
            const y =
                null !==
                  (r =
                    null === (i = null == t ? void 0 : t.colorMap) ||
                    void 0 === i
                      ? void 0
                      : i.minimum) && void 0 !== r
                  ? r
                  : 0,
              f =
                null !==
                  (u =
                    null === (a = null == t ? void 0 : t.colorMap) ||
                    void 0 === a
                      ? void 0
                      : a.maximum) && void 0 !== u
                  ? u
                  : 100,
              v =
                null !==
                  (p =
                    null === (c = null == t ? void 0 : t.colorMap) ||
                    void 0 === c
                      ? void 0
                      : c.gradientStops) && void 0 !== p
                  ? p
                  : this.getDefaultGradientStops();
            e.xAxes.add(
              new l.NumericAxis(
                this.wasmContext,
                Object.assign({}, this.getDefaultXAxisOptions())
              )
            ),
              e.yAxes.add(
                new l.NumericAxis(
                  this.wasmContext,
                  Object.assign(
                    Object.assign(
                      Object.assign({}, this.getDefaultYAxisOptions()),
                      null == t ? void 0 : t.yAxisOptions
                    ),
                    { visibleRange: new o.NumberRange(y, f) }
                  )
                )
              );
            const m = this.getZValues(y, f);
            e.renderableSeries.add(
              new h.UniformHeatmapRenderableSeries(this.wasmContext, {
                dataSeries: new n.UniformHeatmapDataSeries(this.wasmContext, {
                  xStart: 0,
                  xStep: 1,
                  yStart: y,
                  yStep: (f - y) / this.SIZE,
                  zValues: m,
                }),
                useLinearTextureFiltering: !0,
                colorMap:
                  null !== (g = null == t ? void 0 : t.colorMap) && void 0 !== g
                    ? g
                    : new d.HeatmapColorMap({
                        minimum: y,
                        maximum: f,
                        gradientStops: v,
                      }),
              })
            );
          }
          static create(e, t) {
            return r(this, void 0, void 0, function* () {
              const { sciChartSurface: i, wasmContext: r } =
                yield u.SciChartSurface.create(e, {
                  theme: null == t ? void 0 : t.theme,
                });
              return { wasmContext: r, heatmapLegend: new g(i, t) };
            });
          }
          delete() {
            (this.sciChartSurface = (0, c.deleteSafe)(this.sciChartSurface)),
              (this.wasmContext = void 0);
          }
          get innerSciChartSurface() {
            return {
              sciChartSurface: this.sciChartSurface,
              wasmContext: this.wasmContext,
            };
          }
          getDefaultGradientStops() {
            return [
              { offset: 1, color: "Red" },
              { offset: 0, color: "Blue" },
            ];
          }
          getDefaultXAxisOptions() {
            return {
              drawMajorGridLines: !1,
              drawMinorGridLines: !1,
              drawMajorTickLines: !1,
              drawMinorTickLines: !1,
              drawLabels: !1,
            };
          }
          getDefaultYAxisOptions() {
            return {
              maxAutoTicks: 5,
              drawMajorGridLines: !1,
              drawMinorGridLines: !1,
              drawLabels: !0,
              drawMajorTickLines: !0,
              drawMinorTickLines: !0,
            };
          }
          getZValues(e, t) {
            const i = (0, a.zeroArray2D)([this.SIZE, 1]),
              r = (t - e) / (this.SIZE - 1);
            for (let t = 0, s = e; t < this.SIZE; t++, s += r) i[t][0] = s;
            return i;
          }
        }
        t.HeatmapLegend = g;
      },
      98353: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getAllFontKeys =
            t.getFontKey =
            t.getVector4 =
            t.getNativeRect =
            t.getTextBounds =
            t.getVertex =
            t.getVectorColorVertex =
            t.getVectorRectVertex =
            t.freeCache =
            t.deleteCache =
            t.FontKey =
              void 0);
        const r = i(55023),
          s = i(56744),
          o = i(16155),
          a = i(85479);
        class n extends r.DeletableEntity {
          constructor(e) {
            super(), (this.firstLoadTime = Date.now()), (this.nativeKey = e);
          }
          delete() {
            (0, s.deleteSafe)(this.nativeKey);
          }
        }
        t.FontKey = n;
        const l = new Map(),
          d = (e) => {
            var t, i;
            const r =
              null !==
                (i =
                  null === (t = null == e ? void 0 : e.canvas) || void 0 === t
                    ? void 0
                    : t.id) && void 0 !== i
                ? i
                : "TEST";
            return (
              l.has(r) ||
                l.set(r, {
                  vecRects: void 0,
                  vecColorVertex: void 0,
                  vertex: void 0,
                  rect: void 0,
                  vector4: void 0,
                  textBounds: void 0,
                  keyCache: new Map(),
                }),
              l.get(r)
            );
          };
        (t.deleteCache = (e) => {
          if (!e.canvas) return;
          const t = e.canvas.id,
            i = l.get(t);
          i &&
            ((0, s.deleteSafe)(i.vecRects),
            (0, s.deleteSafe)(i.vecColorVertex),
            (0, s.deleteSafe)(i.vertex),
            (0, s.deleteSafe)(i.rect),
            (0, s.deleteSafe)(i.vector4),
            (0, s.deleteSafe)(i.textBounds),
            i.keyCache.forEach((e) => (0, s.deleteSafe)(e))),
            l.delete(t);
        }),
          (t.freeCache = (e) => ({ delete: () => (0, t.deleteCache)(e) })),
          (t.getVectorRectVertex = (e, t = 100) => {
            const i = d(e);
            if (!i) return;
            let r = i.vecRects;
            return (
              r ||
                ((r = new e.VectorRectVertex()),
                r.reserve(t),
                (i.vecRects = r)),
              r.clear(),
              r
            );
          }),
          (t.getVectorColorVertex = (e, t = 100) => {
            const i = d(e);
            if (!i) return;
            let r = i.vecColorVertex;
            return (
              r ||
                ((r = new e.VectorColorVertex()),
                r.reserve(t),
                (i.vecColorVertex = r)),
              r.clear(),
              r
            );
          }),
          (t.getVertex = (e, t, i, r) => {
            const s = d(e);
            if (!s) return;
            let o = s.vertex;
            return (
              o
                ? (o.SetPosition(t, i),
                  (o.m_uiColor = null != r ? r : 4294967295))
                : ((o = new e.SCRTColorVertex(t, i)), (s.vertex = o)),
              o
            );
          }),
          (t.getTextBounds = (e) => {
            const t = d(e);
            if (!t) return;
            let i = t.textBounds;
            return i || ((i = new e.TSRTextBounds()), (t.textBounds = i)), i;
          }),
          (t.getNativeRect = (e, t, i, r, s) => {
            const o = d(e);
            let a = o.rect;
            return (
              a
                ? a.Assign(t, i, r - t, s - i)
                : ((a = new e.SCRTRectVertex(t, i, r - t, s - i)),
                  (o.rect = a)),
              a
            );
          }),
          (t.getVector4 = (e, t, i, r, s) => {
            const o = d(e);
            let a = o.vector4;
            return (
              a
                ? a.Assign(t, i, r, s)
                : ((a = new e.TSRVector4(t, i, r, s)), (o.vector4 = a)),
              a
            );
          }),
          (t.getFontKey = (e, t, i = !1, r = !1) => {
            const s = d(e);
            if (!s) return;
            const l = s.keyCache,
              h = {
                fontFamily: t.fontFamily,
                fontSize: t.fontSize,
                extras: (i ? "advanced" : "") + (r ? "transformed" : ""),
                providerId: void 0,
              },
              u = o.labelCache.getStyleId(h);
            if (!l.has(u)) {
              const s = new n(
                new e.SCRTFontKey(t.fontFamily, t.fontSize, r, i)
              );
              l.set(u, s);
            }
            const c = l.get(u);
            return (
              Date.now() - c.firstLoadTime >
                a.SciChartDefaults.nativeFontTimeout &&
                (c.nativeKey.m_reload = !1),
              c.nativeKey
            );
          }),
          (t.getAllFontKeys = (e) => {
            const t = d(e);
            return Array.from(t.keyCache.values()).map((e) => e.nativeKey);
          });
      },
      63458: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createNativeRect = void 0);
        const r = i(98353);
        t.createNativeRect = (e, t, i, s, o) =>
          (0, r.getNativeRect)(e, t, i, s, o);
      },
      47376: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createSCRTPen = void 0);
        const r = i(84745),
          s = (i(27307), i(22950)),
          o = i(48008);
        t.createSCRTPen = (e, t, i, a, n, l = !0) => {
          if (r.IS_TEST_ENV || !t) return;
          const d = (0, s.uintArgbColorMultiplyOpacity)(
            (0, o.parseColorToUIntArgb)(t),
            a
          );
          if (isNaN(d))
            throw new Error(
              `Color code ${t} cannot be converted to an ARGB integer`
            );
          if (n && n.length) {
            const t = new e.FloatVector();
            return (
              n.forEach((e) => t.push_back(e)), e.SCRTCreateDahedPen(d, i, l, t)
            );
          }
          return new e.SCRTPen(d, i, l);
        };
      },
      33841: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createSolidBrush = void 0);
        const r = i(84745),
          s = i(22950),
          o = i(48008);
        t.createSolidBrush = (e, t, i) => {
          if (r.IS_TEST_ENV || !t) return;
          const a = (0, s.uintArgbColorMultiplyOpacity)(
              (0, o.parseColorToUIntArgb)(t),
              i
            ),
            n = (0, s.uintArgbColorIsTransparent)(a);
          if (isNaN(a))
            throw new Error(
              `Color code ${t} cannot be converted to an ARGB integer`
            );
          return new e.SCRTSolidBrush(a, n);
        };
      },
      94389: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.drawBorder = void 0);
        const r = i(63458),
          s = i(98353);
        t.drawBorder = (e, t, i, o, a, n, l, d, h) => {
          if (0 === d && 0 === n && 0 === a && 0 === l) return;
          const u = i.newBrush(h, !0),
            c = (0, s.getVectorRectVertex)(t);
          c.push_back(
            (0, r.createNativeRect)(t, o.x, o.y - n, o.x + o.width + l, o.y)
          ),
            c.push_back(
              (0, r.createNativeRect)(
                t,
                o.x + o.width,
                o.y,
                o.x + o.width + l,
                o.y + o.height + d
              )
            ),
            c.push_back(
              (0, r.createNativeRect)(
                t,
                o.x - a,
                o.y + o.height,
                o.x + o.width,
                o.y + o.height + d
              )
            ),
            c.push_back(
              (0, r.createNativeRect)(t, o.x - a, o.y - n, o.x, o.y + o.height)
            ),
            e.drawRects(c, u, 0, 0);
        };
      },
      3441: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getLabelCoordinates =
            t.drawAxisMarkerAnnotation =
            t.drawLineAnnotation =
            t.drawModifiersAxisLabel =
              void 0);
        const r = i(87459),
          s = i(38215),
          o = i(11805);
        (t.drawModifiersAxisLabel = (e, t, i, r, s) => {
          if (!e.isVisible) return;
          const o = n(e, i),
            a = Object.assign(Object.assign({}, e.dpiAdjustedLabelStyle), {
              color: s,
            });
          return e.axisRenderer.drawModifiersAxisLabel(
            t,
            o,
            i,
            e.axisAlignment,
            a,
            r
          );
        }),
          (t.drawLineAnnotation = (
            e,
            i,
            l,
            d,
            h,
            u,
            c,
            p,
            g,
            y,
            f,
            v,
            m,
            S,
            P,
            C
          ) => {
            const x = i.getNativeContext(),
              { axisAlignment: b } = e,
              A =
                (b === s.EAxisAlignment.Top || b === s.EAxisAlignment.Bottom) &&
                ![
                  o.ELabelPlacement.Top,
                  o.ELabelPlacement.Bottom,
                  o.ELabelPlacement.Auto,
                  o.ELabelPlacement.Axis,
                ].includes(l),
              T = [
                o.ELabelPlacement.Right,
                o.ELabelPlacement.TopRight,
                o.ELabelPlacement.BottomRight,
              ].includes(l),
              E =
                b === s.EAxisAlignment.Top || b === s.EAxisAlignment.Bottom
                  ? h
                  : c,
              R = d || n(e, E),
              w = l === o.ELabelPlacement.Auto || l === o.ELabelPlacement.Axis,
              D = w ? y : null,
              L = w ? g : Object.assign(Object.assign({}, g), { color: y });
            let M,
              I = 0,
              O = 0;
            const {
              x1LineCoord: k,
              y1LineCoord: _,
              x2LineCoord: V,
              y2LineCoord: N,
            } = a(h, c, u, p, I, O, l, e);
            if ((f && i.drawLine(k, _, V, N, f, v), m)) {
              const {
                  bitmapTexture: i,
                  textureHeight: s,
                  textureWidth: o,
                } = e.axisRenderer.createAnnotationLabelTexture(
                  R,
                  L,
                  D,
                  A,
                  T,
                  S
                ),
                { xPosition: a, yPosition: n } = (0, t.getLabelCoordinates)(
                  e,
                  l,
                  h,
                  u,
                  c,
                  p,
                  s,
                  o,
                  P,
                  C
                );
              (I = s),
                (O = o),
                (M = new r.Rect(a, n, o, s)),
                x.DrawTexture(i, Math.round(a), Math.round(n), o, s),
                i.delete();
            }
            return M;
          }),
          (t.drawAxisMarkerAnnotation = (
            e,
            i,
            r,
            s,
            a,
            l,
            d,
            h,
            u,
            c,
            p,
            g
          ) => {
            const y = i.getNativeContext(),
              { axisAlignment: f } = e,
              v = r || n(e, s),
              {
                bitmapTexture: m,
                textureHeight: S,
                textureWidth: P,
              } = c
                ? e.axisRenderer.createAxisMarkerFromImage(c, p, g)
                : e.axisRenderer.createAxisMarker(f, v, d, h, u),
              { xPosition: C, yPosition: x } = (0, t.getLabelCoordinates)(
                e,
                o.ELabelPlacement.Axis,
                a,
                a,
                l,
                l,
                S,
                P
              );
            return (
              m &&
                (y.DrawTexture(m, Math.round(C), Math.round(x), P, S),
                m.delete()),
              { xPosition: C, yPosition: x, textureWidth: P, textureHeight: S }
            );
          }),
          (t.getLabelCoordinates = (e, t, i, r, a, n, l, d, h, u) => {
            const {
              axisAlignment: c,
              parentSurface: { seriesViewRect: p },
              viewRect: g,
            } = e;
            let y = 0,
              f = 0;
            const v = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                  case s.EAxisAlignment.Left:
                    f = p.top + a - l / 2;
                    break;
                  case s.EAxisAlignment.Top:
                    f = p.top + n / 2 - l / 2;
                    break;
                  case s.EAxisAlignment.Bottom:
                    f = p.top + a + (n - a) / 2 - l / 2;
                }
              },
              m = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                    y = p.left + r + (i - r) / 2 - d / 2;
                    break;
                  case s.EAxisAlignment.Left:
                    y = p.left + r / 2 - d / 2;
                    break;
                  case s.EAxisAlignment.Top:
                  case s.EAxisAlignment.Bottom:
                    y = p.left + r - d / 2;
                }
              },
              S = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                    y = p.left + i - d;
                    break;
                  case s.EAxisAlignment.Left:
                    y = p.left + r - d;
                    break;
                  case s.EAxisAlignment.Top:
                  case s.EAxisAlignment.Bottom:
                    y = p.left + i;
                }
              },
              P = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                    y = p.left + r;
                    break;
                  case s.EAxisAlignment.Left:
                    y = p.left;
                    break;
                  case s.EAxisAlignment.Top:
                  case s.EAxisAlignment.Bottom:
                    y = p.left + i - d;
                }
              },
              C = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                  case s.EAxisAlignment.Left:
                    f = p.top + a - l;
                    break;
                  case s.EAxisAlignment.Top:
                    f = p.top;
                    break;
                  case s.EAxisAlignment.Bottom:
                    f = p.top + n;
                }
              },
              x = () => {
                switch (c) {
                  case s.EAxisAlignment.Right:
                  case s.EAxisAlignment.Left:
                    f = p.top + a;
                    break;
                  case s.EAxisAlignment.Top:
                    f = p.top + n - l;
                    break;
                  case s.EAxisAlignment.Bottom:
                    f = p.top + a - l;
                }
              };
            switch (t) {
              case o.ELabelPlacement.Right:
                v(), S();
                break;
              case o.ELabelPlacement.TopRight:
                C(), S();
                break;
              case o.ELabelPlacement.BottomRight:
                x(), S();
                break;
              case o.ELabelPlacement.Bottom:
                x(), m();
                break;
              case o.ELabelPlacement.Left:
                v(), P();
                break;
              case o.ELabelPlacement.TopLeft:
                C(), P();
                break;
              case o.ELabelPlacement.BottomLeft:
                x(), P();
                break;
              case o.ELabelPlacement.Top:
                C(), m();
                break;
              case o.ELabelPlacement.Axis:
              case o.ELabelPlacement.Auto:
                (() => {
                  switch (c) {
                    case s.EAxisAlignment.Right:
                      v(),
                        (y =
                          h === o.EHorizontalAlignment.Left
                            ? p.left
                            : g.width < d
                            ? (y = g.right - d)
                            : g.left);
                      break;
                    case s.EAxisAlignment.Left:
                      v(),
                        (y =
                          h === o.EHorizontalAlignment.Right
                            ? p.left + p.width - d
                            : g.width < d
                            ? (y = g.left)
                            : g.right - d);
                      break;
                    case s.EAxisAlignment.Top:
                      (f =
                        u === o.EVerticalAlignment.Bottom
                          ? p.top + p.height - l
                          : g.height < l
                          ? g.top
                          : g.bottom - l),
                        m();
                      break;
                    case s.EAxisAlignment.Bottom:
                      (f =
                        u === o.EVerticalAlignment.Top
                          ? p.top
                          : g.height < l
                          ? g.bottom - l
                          : g.top),
                        m();
                  }
                })();
                break;
              default:
                throw Error("Unexpected LabelPlacement " + t);
            }
            return (
              t !== o.ELabelPlacement.Auto &&
                t !== o.ELabelPlacement.Axis &&
                (f < p.top && (f = p.top),
                f + l > p.bottom && (f = p.bottom - l),
                y < p.left && (y = p.left),
                y + d > p.right && (y = p.right - d)),
              { xPosition: y, yPosition: f }
            );
          });
        const a = (e, t, i, r, a, n, l, d) => {
            const {
              axisAlignment: h,
              parentSurface: { seriesViewRect: u },
              viewRect: c,
            } = d;
            let p = e,
              g = t,
              y = i,
              f = r;
            switch (l) {
              case o.ELabelPlacement.Right:
                switch (h) {
                  case s.EAxisAlignment.Right:
                    p = Math.abs(e - i) < n ? y : e - n;
                    break;
                  case s.EAxisAlignment.Left:
                    y = i > u.width ? u.width - n : i - n;
                }
                break;
              case o.ELabelPlacement.Bottom:
                switch (h) {
                  case s.EAxisAlignment.Top:
                    f = r > u.height ? u.height - a : r - a;
                    break;
                  case s.EAxisAlignment.Bottom:
                    g = Math.abs(t - r) < a ? f : t - a;
                }
                break;
              case o.ELabelPlacement.Left:
                switch (h) {
                  case s.EAxisAlignment.Right:
                    y = i < 0 ? n : i + n;
                    break;
                  case s.EAxisAlignment.Left:
                    p = Math.abs(e - i) < n ? y : e + n;
                }
                break;
              case o.ELabelPlacement.Top:
                switch (h) {
                  case s.EAxisAlignment.Top:
                    g = Math.abs(t - r) < a ? f : t + a;
                    break;
                  case s.EAxisAlignment.Bottom:
                    f = r < 0 ? a : r + a;
                }
                break;
              case o.ELabelPlacement.Auto:
              case o.ELabelPlacement.Axis:
                switch (h) {
                  case s.EAxisAlignment.Right:
                    (p = c.width < n ? u.width + c.width - n : u.width),
                      y > p && (y = p);
                    break;
                  case s.EAxisAlignment.Left:
                    (p = c.width < n ? n - c.width : 0), y < p && (y = p);
                    break;
                  case s.EAxisAlignment.Top:
                    (g = c.height < a ? a - c.height : 0), f < g && (f = g);
                    break;
                  case s.EAxisAlignment.Bottom:
                    (g = c.height < a ? c.bottom - a : u.bottom),
                      f > g && (f = g);
                }
            }
            return {
              x1LineCoord: p,
              y1LineCoord: g,
              x2LineCoord: y,
              y2LineCoord: f,
            };
          },
          n = (e, t) => {
            let i;
            const r = e.getCurrentCoordinateCalculator();
            if (e.isCategoryAxis) {
              const e = r.getDataValue(t);
              i = r.transformIndexToData(e);
            } else i = r.getDataValue(t);
            return e.labelProvider.formatCursorLabel(i);
          };
      },
      97703: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ManualLegend = void 0);
        const r = i(87108),
          s = i(88266);
        class o extends s.SciChartLegendBase {
          constructor(e, t) {
            var i, r, o;
            super(e),
              (this.type = s.ELegendType.ManualLegend),
              (this.itemsProperty = []),
              (this.showCheckboxesProperty = !1),
              (this.showSeriesMarkersProperty = !0),
              (this.showCheckboxesProperty =
                null !== (i = null == e ? void 0 : e.showCheckboxes) &&
                void 0 !== i
                  ? i
                  : this.showCheckboxes),
              (this.showSeriesMarkersProperty =
                null !== (r = null == e ? void 0 : e.showSeriesMarkers) &&
                void 0 !== r
                  ? r
                  : this.showSeriesMarkers),
              (this.itemsProperty =
                null !== (o = null == e ? void 0 : e.items) && void 0 !== o
                  ? o
                  : this.items),
              (this.legendItemCheckedChangedCallback =
                null == e ? void 0 : e.isCheckedChangedCallback),
              t && this.attachTo(t);
          }
          get showCheckboxes() {
            return this.showCheckboxesProperty;
          }
          set showCheckboxes(e) {
            (this.showCheckboxesProperty = e), this.notifyPropertyChanged();
          }
          get showSeriesMarkers() {
            return this.showSeriesMarkersProperty;
          }
          set showSeriesMarkers(e) {
            (this.showSeriesMarkersProperty = e), this.notifyPropertyChanged();
          }
          get items() {
            return this.itemsProperty;
          }
          set items(e) {
            (this.itemsProperty = e), this.notifyPropertyChanged();
          }
          attachTo(e) {
            super.attachTo(e),
              e.addDeletable({
                delete: () => {
                  this.delete(),
                    this.setRootDiv(void 0),
                    this.setInvalidateParentSurface(void 0),
                    this.setParentSurface(void 0);
                },
              });
          }
          applyTheme() {}
          getInnerHTML() {
            var e, t;
            const i =
                null !== (e = this.backgroundColor) && void 0 !== e
                  ? e
                  : this.parentSurfaceProperty.themeProvider
                      .legendBackgroundBrush,
              s =
                null !== (t = this.textColor) && void 0 !== t
                  ? t
                  : this.parentSurfaceProperty.themeProvider
                      .labelForegroundBrush,
              {
                left: o,
                top: a,
                right: n,
                bottom: l,
              } = this.parentSurfaceProperty.getSeriesViewRectPadding(!1),
              d = this.isExternal()
                ? new r.Thickness(
                    this.margin,
                    this.margin,
                    this.margin,
                    this.margin
                  )
                : new r.Thickness(
                    a + this.margin,
                    n + this.margin,
                    l + this.margin,
                    o + this.margin
                  );
            return this.getLegendHTML(
              this.placement,
              s,
              i,
              d,
              this.orientation,
              this.showCheckboxes,
              this.showSeriesMarkers,
              this.items
            );
          }
          addEventListeners() {
            this.items.forEach((e) => this.addEventListenerToItem(e));
          }
          addEventListenerToItem(e) {
            const t = this.parentDiv.querySelector(`[id='${e.id}']`);
            if (t) {
              const i = (i) => {
                (e.checked = t.checked),
                  this.legendItemCheckedChangedCallback &&
                    this.legendItemCheckedChangedCallback(e, e.checked);
              };
              t.addEventListener("change", i);
              const r = {
                  element: t,
                  eventType: "change",
                  eventListener: i,
                  delete: () => t.removeEventListener("change", i),
                },
                s = this.eventListenersCollection.get(e.id);
              s ? s.push(r) : this.eventListenersCollection.set(e.id, [r]);
            }
          }
          removeEventListeners() {
            this.items.forEach((e) => this.removeEventListenerFromSeries(e.id));
          }
        }
        t.ManualLegend = o;
      },
      96260: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartLegend = void 0);
        const r = i(87108),
          s = i(88266);
        class o extends s.SciChartLegendBase {
          constructor() {
            super(...arguments),
              (this.type = s.ELegendType.SciChartLegend),
              (this.showCheckboxesProperty = !1),
              (this.showSeriesMarkersProperty = !0);
          }
          applyTheme() {}
          get showCheckboxes() {
            return this.showCheckboxesProperty;
          }
          set showCheckboxes(e) {
            (this.showCheckboxesProperty = e), this.notifyPropertyChanged();
          }
          get showSeriesMarkers() {
            return this.showSeriesMarkersProperty;
          }
          set showSeriesMarkers(e) {
            (this.showSeriesMarkersProperty = e), this.notifyPropertyChanged();
          }
          setRenderableSeriesArray(e) {
            (this.renderableSeriesArray = e), this.invalidateLegend();
          }
          addEventListeners() {
            this.renderableSeriesArray.forEach((e) =>
              this.addEventListenerToSeries(e)
            );
          }
          removeEventListeners() {
            this.renderableSeriesArray.forEach((e) =>
              this.removeEventListenerFromSeries(e.id)
            );
          }
          addEventListenerToSeries(e) {
            const t = this.parentDiv.querySelector(`[id='${e.id}']`);
            if (t) {
              const i = (t) => {
                (e.isVisible = t.target.checked),
                  this.legendItemCheckedChangedCallback &&
                    this.legendItemCheckedChangedCallback(e, e.isVisible);
              };
              t.addEventListener("change", i);
              const r = (e) => {
                this.invalidateLegend();
              };
              e.isVisibleChanged.subscribe(r);
              const s = {
                  element: t,
                  eventType: "change",
                  eventListener: i,
                  delete: () => {
                    t.removeEventListener("change", i),
                      e.isVisibleChanged.unsubscribe(r);
                  },
                },
                o = this.eventListenersCollection.get(e.id);
              o ? o.push(s) : this.eventListenersCollection.set(e.id, [s]);
            }
          }
          getInnerHTML() {
            var e, t, i, s, o, a;
            const n =
                null !== (e = this.backgroundColor) && void 0 !== e
                  ? e
                  : null ===
                      (i =
                        null === (t = this.parentSurfaceProperty) ||
                        void 0 === t
                          ? void 0
                          : t.themeProvider) || void 0 === i
                  ? void 0
                  : i.legendBackgroundBrush,
              l =
                null !== (s = this.textColor) && void 0 !== s
                  ? s
                  : null ===
                      (a =
                        null === (o = this.parentSurfaceProperty) ||
                        void 0 === o
                          ? void 0
                          : o.themeProvider) || void 0 === a
                  ? void 0
                  : a.labelForegroundBrush,
              d = this.renderableSeriesArray.map((e, t) => {
                var i;
                return {
                  id: e.id,
                  name:
                    null !== (i = e.getDataSeriesName()) && void 0 !== i
                      ? i
                      : `Series ${t + 1}`,
                  color: e.isStacked ? e.fill : e.stroke,
                  checked: e.isVisible,
                  gradient: void 0,
                };
              }),
              {
                left: h,
                top: u,
                right: c,
                bottom: p,
              } = this.parentSurfaceProperty.getSeriesViewRectPadding(!1),
              g = this.isExternal()
                ? new r.Thickness(
                    this.margin,
                    this.margin,
                    this.margin,
                    this.margin
                  )
                : new r.Thickness(
                    u + this.margin,
                    c + this.margin,
                    p + this.margin,
                    h + this.margin
                  );
            return this.getLegendHTML(
              this.placement,
              l,
              n,
              g,
              this.orientation,
              this.showCheckboxes,
              this.showSeriesMarkers,
              d
            );
          }
        }
        t.SciChartLegend = o;
      },
      88266: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getLegendContainerHtml =
            t.getLegendItemHtml =
            t.SciChartLegendBase =
            t.ELegendType =
            t.ELegendPlacement =
            t.ELegendOrientation =
              void 0);
        const r = i(84745),
          s = i(55023),
          o = i(99064);
        var a, n, l;
        !(function (e) {
          (e[(e.Vertical = 0)] = "Vertical"),
            (e[(e.Horizontal = 1)] = "Horizontal");
        })((a = t.ELegendOrientation || (t.ELegendOrientation = {}))),
          (function (e) {
            (e[(e.TopLeft = 0)] = "TopLeft"),
              (e[(e.TopRight = 1)] = "TopRight"),
              (e[(e.BottomLeft = 2)] = "BottomLeft"),
              (e[(e.BottomRight = 3)] = "BottomRight");
          })((n = t.ELegendPlacement || (t.ELegendPlacement = {}))),
          ((l = t.ELegendType || (t.ELegendType = {})).SciChartLegend =
            "SciChartLegend"),
          (l.ManualLegend = "ManualLegend"),
          (l.SciChartPieLegend = "SciChartPieLegend");
        class d extends s.DeletableEntity {
          constructor(e) {
            var t, i, r, s, o;
            super(),
              (this.orientationProperty = a.Vertical),
              (this.showLegendProperty = !0),
              (this.placementProperty = n.TopLeft),
              (this.marginProperty = 10),
              (this.isDirty = !0),
              (this.eventListenersCollection = new Map()),
              (this.removeEventListenerFromSeries = (e) => {
                var t;
                null === (t = this.eventListenersCollection.get(e)) ||
                  void 0 === t ||
                  t.forEach(
                    ({ element: e, eventListener: t, eventType: i }) => {
                      e.removeEventListener(i, t);
                    }
                  ),
                  this.eventListenersCollection.delete(e);
              }),
              (this.orientationProperty =
                null !== (t = null == e ? void 0 : e.orientation) &&
                void 0 !== t
                  ? t
                  : this.orientationProperty),
              (this.showLegendProperty =
                null !== (i = null == e ? void 0 : e.showLegend) && void 0 !== i
                  ? i
                  : this.showLegend),
              (this.placementProperty =
                null !== (r = null == e ? void 0 : e.placement) && void 0 !== r
                  ? r
                  : this.placement),
              (this.marginProperty =
                null !== (s = null == e ? void 0 : e.margin) && void 0 !== s
                  ? s
                  : this.margin),
              (this.placementDivIdProperty =
                null !== (o = null == e ? void 0 : e.placementDivId) &&
                void 0 !== o
                  ? o
                  : this.placementDivId),
              (this.backgroundColorProperty =
                null == e ? void 0 : e.backgroundColor),
              (this.textColorProperty = null == e ? void 0 : e.textColor),
              (this.update = this.update.bind(this));
          }
          setInvalidateParentSurface(e) {
            this.invalidateParentSurface = e;
          }
          setRootDiv(e) {
            this.rootDiv = e;
          }
          setSeriesViewRect(e) {}
          setParentSurface(e) {
            this.parentSurfaceProperty = e;
          }
          attachTo(e) {
            this.setParentSurface(e),
              this.setRootDiv(e.domDivContainer),
              this.setInvalidateParentSurface(e.invalidateElement),
              e.rendered.subscribe(this.update);
          }
          detach() {
            this.setRootDiv(void 0),
              this.parentSurfaceProperty.rendered.unsubscribe(this.update),
              this.setInvalidateParentSurface(void 0),
              this.setParentSurface(void 0),
              this.delete();
          }
          update() {
            if (this.isDirty || !this.div)
              try {
                this.parentSurfaceProperty.getSeriesViewRectPadding(!0),
                  this.clear(),
                  this.showLegend && this.create(),
                  (this.isDirty = !1);
              } catch (e) {}
          }
          invalidateLegend() {
            this.isDirty = !0;
          }
          get orientation() {
            return this.orientationProperty;
          }
          set orientation(e) {
            (this.orientationProperty = e), this.notifyPropertyChanged();
          }
          get showLegend() {
            return this.showLegendProperty;
          }
          set showLegend(e) {
            (this.showLegendProperty = e), this.notifyPropertyChanged();
          }
          get placement() {
            return this.placementProperty;
          }
          set placement(e) {
            (this.placementProperty = e), this.notifyPropertyChanged();
          }
          get margin() {
            return this.marginProperty;
          }
          set margin(e) {
            (this.marginProperty = e), this.notifyPropertyChanged();
          }
          get placementDivId() {
            return this.placementDivIdProperty;
          }
          set placementDivId(e) {
            this.clear(),
              (this.placementDivIdProperty = e),
              this.notifyPropertyChanged();
          }
          get backgroundColor() {
            return this.backgroundColorProperty;
          }
          set backgroundColor(e) {
            (this.backgroundColorProperty = e), this.notifyPropertyChanged();
          }
          get textColor() {
            return this.textColorProperty;
          }
          set textColor(e) {
            (this.textColorProperty = e), this.notifyPropertyChanged();
          }
          clear() {
            var e;
            this.div &&
              (this.removeEventListeners(),
              null === (e = this.parentDiv) ||
                void 0 === e ||
                e.removeChild(this.div),
              (this.div = void 0),
              (this.parentDiv = void 0));
          }
          delete() {
            this.clear();
          }
          isExternal() {
            return !!this.placementDivId;
          }
          getLegendHTML(e, i, r, s, o, a, n, l) {
            const d = l.reduce((e, t) => {
              var i;
              return (
                e +
                this.getLegendItemHTML(
                  o,
                  a,
                  null !== (i = t.showMarker) && void 0 !== i ? i : n,
                  t
                )
              );
            }, "");
            return (0, t.getLegendContainerHtml)(
              e,
              i,
              r,
              s,
              d,
              this.isExternal()
            );
          }
          getLegendItemHTML(e, i, r, s) {
            return (0, t.getLegendItemHtml)(e, i, r, s);
          }
          notifyPropertyChanged() {
            (this.isDirty = !0),
              this.invalidateParentSurface && this.invalidateParentSurface();
          }
          create() {
            const e = this.getInnerHTML();
            if (e) {
              const t = (0, o.htmlToElement)(e);
              (this.parentDiv = this.getParentDiv()),
                this.parentDiv.appendChild(t),
                (this.div = t),
                r.IS_TEST_ENV || this.addEventListeners();
            }
          }
          getParentDiv() {
            return this.placementDivId
              ? "string" == typeof this.placementDivId
                ? document.querySelector(`[id='${this.placementDivId}']`)
                : this.placementDivId
              : this.rootDiv;
          }
        }
        (t.SciChartLegendBase = d),
          (t.getLegendItemHtml = (e, t, i, r) => {
            let s = `<span class="scichart__legend-item" style="display: ${
              e === a.Vertical ? "flex" : "inline-flex"
            }; align-items: center; margin-right: 4px; white-space: nowrap;">`;
            if (
              (t &&
                (s += `<input ${
                  r.checked ? "checked" : ""
                } type="checkbox" id="${r.id}">`),
              i)
            )
              if (r.gradient) {
                let e = "";
                r.gradient.gradientStops.forEach((t) => {
                  e += `,${t.color}`;
                }),
                  (s += `<label for="${r.id}" style="background-image: linear-gradient(to right${e}); margin: 4px; width: 30px; height: 13px;"></label>`);
              } else
                s += `<label for="${r.id}" style="background-color: ${r.color}; margin: 4px; width: 30px; height: 13px;"></label>`;
            return (
              (s += `<label for="${r.id}" style="margin-left: 4px;">${r.name}</label>`),
              (s += "</span>"),
              s
            );
          }),
          (t.getLegendContainerHtml = (e, t, i, r, s, o = !1) => {
            if (!s) return "";
            let a = "",
              l = "";
            o || (a = "position: absolute;"),
              e === n.TopLeft
                ? (l = "left: 0; top: 0;")
                : e === n.TopRight
                ? (l = "right: 0; top: 0;")
                : e === n.BottomLeft
                ? (l = "left: 0; bottom: 0;")
                : e === n.BottomRight && (l = "right: 0; bottom: 0;");
            let d = `<div class="scichart__legend" style="height: 100%; ${a} display: flex; ${l} text-align: center;">`;
            const h = [n.TopLeft, n.TopRight].includes(e)
                ? "flex-start"
                : "flex-end",
              { left: u, right: c, bottom: p, top: g } = r;
            return (
              (d += `<div style="display: block; align-self: ${h}; width: fit-content; pointer-events: auto; margin-left: ${u}px; margin-top: ${g}px; margin-right: ${c}px; margin-bottom: ${p}px; padding: 5px; border-radius: 3px; background-color: ${i}; color: ${t}">`),
              (d += s),
              (d += "</div></div>"),
              d
            );
          });
      },
      28243: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartPieLegend = void 0);
        const r = i(87108),
          s = i(79548),
          o = i(88266);
        class a extends o.SciChartLegendBase {
          constructor() {
            super(...arguments),
              (this.type = o.ELegendType.SciChartPieLegend),
              (this.animate = !0),
              (this.showCheckboxesProperty = !1),
              (this.showSeriesMarkersProperty = !0);
          }
          get showCheckboxes() {
            return this.showCheckboxesProperty;
          }
          set showCheckboxes(e) {
            (this.showCheckboxesProperty = e), this.notifyPropertyChanged();
          }
          get showSeriesMarkers() {
            return this.showSeriesMarkersProperty;
          }
          set showSeriesMarkers(e) {
            (this.showSeriesMarkersProperty = e), this.notifyPropertyChanged();
          }
          applyTheme() {}
          setPieSegmentArray(e) {
            this.pieSegmentArray = e;
          }
          update() {
            this.clear(), this.showLegend && this.create();
          }
          addEventListeners() {
            this.pieSegmentArray.forEach((e) => {
              const t = this.parentDiv.querySelector(`#${n(e.id)}`);
              if (!t) return;
              const i = (0, s.addEventListenerToPieSegment)(e, t, this.animate),
                r = this.eventListenersCollection.get(e.id);
              r ? r.push(i) : this.eventListenersCollection.set(e.id, [i]);
            });
          }
          removeEventListeners() {
            this.pieSegmentArray.forEach((e) =>
              this.removeEventListenerFromSeries(e.id)
            );
          }
          getInnerHTML() {
            const e =
                this.parentSurfaceProperty.themeProvider.legendBackgroundBrush,
              t = this.parentSurfaceProperty.themeProvider.labelForegroundBrush,
              i = this.pieSegmentArray.map((e, t) => {
                var i;
                return {
                  id: n(e.id),
                  name:
                    null !== (i = e.text) && void 0 !== i
                      ? i
                      : `Segment ${t + 1}`,
                  color: e.color,
                  checked: e.isSelected,
                  gradient: e.colorLinearGradient,
                };
              }),
              s = new r.Thickness(
                this.margin,
                this.margin,
                this.margin,
                this.margin
              );
            return this.getLegendHTML(
              this.placement,
              t,
              e,
              s,
              this.orientation,
              this.showCheckboxes,
              this.showSeriesMarkers,
              i
            );
          }
        }
        t.SciChartPieLegend = a;
        const n = (e) => `check${e}`;
      },
      27467: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BasePointMarker = void 0);
        const r = i(84745),
          s = i(55023),
          o = i(56744),
          a = (i(27307), i(16185)),
          n = i(84392),
          l = i(49987),
          d = i(14184),
          h = i(35992),
          u = i(86127),
          c = i(44231);
        class p extends s.DeletableEntity {
          constructor(e, t) {
            var i, r, s, o, n, l, d;
            super(),
              (this.fillProperty = "#5555FF"),
              (this.heightProperty = 5),
              (this.opacityProperty = 1),
              (this.strokeProperty = "#3333FF"),
              (this.strokeThicknessProperty = 1),
              (this.widthProperty = 5),
              (this.lastPointOnlyProperty = !1),
              (this.isUpdateSuspended = !1),
              (this.webAssemblyContext = e),
              (this.widthProperty =
                null !== (i = null == t ? void 0 : t.width) && void 0 !== i
                  ? i
                  : this.widthProperty),
              (this.heightProperty =
                null !== (r = null == t ? void 0 : t.height) && void 0 !== r
                  ? r
                  : this.heightProperty),
              (this.fillProperty =
                null !== (s = null == t ? void 0 : t.fill) && void 0 !== s
                  ? s
                  : this.fillProperty),
              (this.strokeProperty =
                null !== (o = null == t ? void 0 : t.stroke) && void 0 !== o
                  ? o
                  : this.strokeProperty),
              (this.strokeThicknessProperty =
                null !== (n = null == t ? void 0 : t.strokeThickness) &&
                void 0 !== n
                  ? n
                  : this.strokeThicknessProperty),
              (this.opacityProperty =
                null !== (l = null == t ? void 0 : t.opacity) && void 0 !== l
                  ? l
                  : this.opacityProperty),
              (this.lastPointOnlyProperty =
                null !== (d = null == t ? void 0 : t.lastPointOnly) &&
                void 0 !== d
                  ? d
                  : this.lastPointOnlyProperty),
              a.WebGlRenderContext2D.webGlResourcesRefs.add(this);
          }
          get fill() {
            return this.fillProperty === n.AUTO_COLOR
              ? "#00000000"
              : this.fillProperty.startsWith(n.AUTO_COLOR)
              ? this.fillProperty.substring(n.AUTO_COLOR.length)
              : this.fillProperty;
          }
          set fill(e) {
            const t = this.fillProperty;
            (this.fillProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.FILL, e, t);
          }
          get stroke() {
            return this.strokeProperty === n.AUTO_COLOR
              ? "#00000000"
              : this.strokeProperty.startsWith(n.AUTO_COLOR)
              ? this.strokeProperty.substring(n.AUTO_COLOR.length)
              : this.strokeProperty;
          }
          set stroke(e) {
            const t = this.strokeProperty;
            (this.strokeProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.STROKE, e, t);
          }
          get width() {
            return this.widthProperty;
          }
          set width(e) {
            const t = this.widthProperty;
            (this.widthProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.WIDTH, e, t);
          }
          get height() {
            return this.heightProperty;
          }
          set height(e) {
            const t = this.heightProperty;
            (this.heightProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.HEIGHT, e, t);
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            const t = this.strokeThicknessProperty;
            (this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.STROKE_THICKNESS, e, t);
          }
          get opacity() {
            return this.opacityProperty;
          }
          set opacity(e) {
            const t = this.opacityProperty;
            (this.opacityProperty = e),
              this.applyOpacity(e),
              this.notifyPropertyChanged(c.PROPERTY.OPACITY, e, t);
          }
          get lastPointOnly() {
            return this.lastPointOnlyProperty;
          }
          set lastPointOnly(e) {
            const t = this.lastPointOnlyProperty;
            (this.lastPointOnlyProperty = e),
              this.notifyPropertyChanged(c.PROPERTY.LAST_POINT_ONLY, e, t);
          }
          getSprite() {
            return (
              void 0 === this.spriteTextures &&
                ((this.spriteTextures = this.createCanvasTexture()),
                this.applyOpacity(this.opacityProperty)),
              this.spriteTextures.spriteTexture
            );
          }
          getStrokeMask() {
            return (
              void 0 === this.spriteTextures &&
                ((this.spriteTextures = this.createCanvasTexture()),
                this.applyOpacity(this.opacityProperty)),
              this.spriteTextures.strokeMask
            );
          }
          getFillMask() {
            return (
              void 0 === this.spriteTextures &&
                ((this.spriteTextures = this.createCanvasTexture()),
                this.applyOpacity(this.opacityProperty)),
              this.spriteTextures.fillMask
            );
          }
          invalidateCache() {
            this.spriteTextures &&
              ((0, o.deleteSafe)(this.spriteTextures.spriteTexture),
              (0, o.deleteSafe)(this.spriteTextures.strokeMask),
              (0, o.deleteSafe)(this.spriteTextures.fillMask),
              (this.spriteTextures = void 0));
          }
          resetCache() {
            this.invalidateCache(),
              (this.widthProperty = void 0),
              (this.heightProperty = void 0),
              (this.fillProperty = void 0),
              (this.strokeProperty = void 0),
              (this.strokeThicknessProperty = void 0),
              (this.opacityProperty = void 0);
          }
          delete() {
            this.invalidateCache(),
              a.WebGlRenderContext2D.webGlResourcesRefs.delete(this);
          }
          createCanvasTexture() {
            if (r.IS_TEST_ENV)
              return {
                spriteTexture: void 0,
                strokeMask: void 0,
                fillMask: void 0,
              };
            const e =
                u.DpiHelper.PIXEL_RATIO * (this.width + this.strokeThickness) +
                1,
              t =
                u.DpiHelper.PIXEL_RATIO * (this.height + this.strokeThickness) +
                1,
              i = new h.CanvasTexture(this.webAssemblyContext, e, t);
            i.clear(),
              this.drawSprite(
                i.getContext(),
                this.width * u.DpiHelper.PIXEL_RATIO,
                this.height * u.DpiHelper.PIXEL_RATIO,
                this.stroke,
                this.strokeThickness * u.DpiHelper.PIXEL_RATIO,
                this.fill
              ),
              i.copyTexture();
            const s = new h.CanvasTexture(this.webAssemblyContext, e, t);
            s.clear(),
              this.drawSprite(
                s.getContext(),
                this.width * u.DpiHelper.PIXEL_RATIO,
                this.height * u.DpiHelper.PIXEL_RATIO,
                "#ffffffff",
                this.strokeThickness * u.DpiHelper.PIXEL_RATIO,
                "#00000000"
              ),
              s.copyTexture();
            const o = new h.CanvasTexture(this.webAssemblyContext, e, t);
            return (
              o.clear(),
              this.drawSprite(
                o.getContext(),
                this.width * u.DpiHelper.PIXEL_RATIO - 3,
                this.height * u.DpiHelper.PIXEL_RATIO - 3,
                "#00000000",
                0,
                "#ffffffff"
              ),
              o.copyTexture(),
              { spriteTexture: i, strokeMask: s, fillMask: o }
            );
          }
          getPointMarkerStyle() {
            return new l.PointMarkerStyle({
              type: this.type,
              width: this.width,
              height: this.height,
              fill: this.fill,
              stroke: this.stroke,
              strokeThickness: this.strokeThickness,
            });
          }
          toJSON() {
            const e = {
              fill: this.fill,
              height: this.height,
              opacity: this.opacity,
              stroke: this.stroke,
              strokeThickness: this.strokeThickness,
              width: this.width,
              lastPointOnly: this.lastPointOnly,
            };
            return { type: this.type, options: e };
          }
          onDpiChanged(e) {
            d.DebugForDpi &&
              console.log(
                "basePointMarker onDpiChanged Scaling factor = " + e.newValue
              ),
              this.invalidateCache();
          }
          resolveAutoColors(e, t, i) {
            if (this.strokeProperty.startsWith(n.AUTO_COLOR)) {
              const r = i.getStrokeColor(e, t, this.webAssemblyContext);
              this.stroke = n.AUTO_COLOR + this.adjustAutoColor("stroke", r);
            }
            if (this.fillProperty.startsWith(n.AUTO_COLOR)) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = n.AUTO_COLOR + this.adjustAutoColor("fill", r);
            }
          }
          adjustAutoColor(e, t) {
            return t;
          }
          resumeUpdates() {
            (this.isUpdateSuspended = !1), this.recreateSpriteTextures();
          }
          suspendUpdates() {
            this.isUpdateSuspended = !0;
          }
          notifyPropertyChanged(e, t, i) {
            t !== i &&
              e !== c.PROPERTY.OPACITY &&
              (this.isUpdateSuspended || this.recreateSpriteTextures());
          }
          recreateSpriteTextures() {
            var e, t, i;
            this.spriteTextures &&
              (null === (e = this.spriteTextures.spriteTexture) ||
                void 0 === e ||
                e.delete(),
              null === (t = this.spriteTextures.strokeMask) ||
                void 0 === t ||
                t.delete(),
              null === (i = this.spriteTextures.fillMask) ||
                void 0 === i ||
                i.delete(),
              (this.spriteTextures = void 0)),
              (this.spriteTextures = this.createCanvasTexture()),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          applyOpacity(e) {
            var t, i, r;
            this.spriteTextures &&
              (null === (t = this.spriteTextures.spriteTexture) ||
                void 0 === t ||
                t.applyOpacity(e),
              null === (i = this.spriteTextures.strokeMask) ||
                void 0 === i ||
                i.applyOpacity(e),
              null === (r = this.spriteTextures.fillMask) ||
                void 0 === r ||
                r.applyOpacity(e));
          }
        }
        t.BasePointMarker = p;
      },
      44231: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).FILL = "fill"),
          (i.HEIGHT = "height"),
          (i.IMAGE = "image"),
          (i.SIZE_TO_IMAGE = "size_to_image"),
          (i.STROKE = "stroke"),
          (i.STROKE_THICKNESS = "strokeThickness"),
          (i.WIDTH = "width"),
          (i.OPACITY = "opacity"),
          (i.LAST_POINT_ONLY = "lastPointOnly");
      },
      22745: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CrossPointMarker = void 0);
        const r = i(30323),
          s = i(27467);
        class o extends s.BasePointMarker {
          constructor(e, t) {
            super(e, t), (this.type = r.EPointMarkerType.Cross);
          }
          drawSprite(e, t, i, r, s, o) {
            if (s > 0) {
              (e.strokeStyle = r), (e.lineWidth = s);
              const o = e.canvas.width / 2,
                a = e.canvas.height / 2,
                n = i / 2,
                l = t / 2;
              e.beginPath(),
                e.moveTo(o, a - n),
                e.lineTo(o, a + n),
                e.stroke(),
                e.beginPath(),
                e.moveTo(o - l, a),
                e.lineTo(o + l, a),
                e.stroke();
            }
          }
        }
        t.CrossPointMarker = o;
      },
      10749: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EllipsePointMarker = void 0);
        const r = i(30323),
          s = i(27467);
        class o extends s.BasePointMarker {
          constructor(e, t) {
            super(e, t), (this.type = r.EPointMarkerType.Ellipse);
          }
          drawSprite(e, t, i, r, s, o) {
            const a = e.canvas.width / 2,
              n = e.canvas.height / 2,
              l = s / 2,
              d = t / 2 - l < 0 ? 0 : t / 2 - l,
              h = i / 2 - l < 0 ? 0 : i / 2 - l;
            (e.fillStyle = o),
              e.ellipse(a, n, d, h, 0, 0, 2 * Math.PI, !1),
              e.fill(),
              s > 0 && ((e.strokeStyle = r), (e.lineWidth = s), e.stroke());
          }
        }
        t.EllipsePointMarker = o;
      },
      21033: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SpritePointMarker = void 0);
        const r = i(30323),
          s = i(386),
          o = i(27467),
          a = i(44231);
        class n extends o.BasePointMarker {
          constructor(e, t) {
            super(e, t),
              (this.type = r.EPointMarkerType.Sprite),
              (this.image = null == t ? void 0 : t.image),
              (null == t ? void 0 : t.width) && (this.width = t.width),
              (null == t ? void 0 : t.height) && (this.height = t.height);
          }
          get image() {
            return this.imageProperty;
          }
          set image(e) {
            const t = this.imageProperty;
            (this.imageProperty = e),
              this.imageProperty &&
                ((this.width = this.imageProperty.width),
                (this.height = this.imageProperty.height)),
              this.notifyPropertyChanged(a.PROPERTY.IMAGE, e, t);
          }
          drawSprite(e, t, i, r, s, o) {
            const a = e.canvas.width / 2,
              n = e.canvas.height / 2,
              l = this.height / 2,
              d = this.width / 2;
            this.image &&
              e.drawImage(this.image, a - d, n - l, this.width, this.height);
          }
          getPointMarkerStyle() {
            return new s.CustomPointMarkerStyle({
              type: this.type,
              width: this.width,
              height: this.height,
              image: this.image,
            });
          }
          toJSON() {
            const e = super.toJSON(),
              t = { image: this.image };
            return Object.assign(e.options, t), e;
          }
        }
        t.SpritePointMarker = n;
      },
      77057: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SquarePointMarker = void 0);
        const r = i(75772),
          s = i(30323),
          o = i(27467);
        class a extends o.BasePointMarker {
          constructor(e, t) {
            super(e, t), (this.type = s.EPointMarkerType.Square);
          }
          drawSprite(e, t, i, s, o, a) {
            const n = e.canvas.width / 2,
              l = e.canvas.height / 2,
              d = i / 2,
              h = t / 2,
              u = o / 2,
              c = new r.Point(n - h + u, l - d + u),
              p = new r.Point(n + h - u, l + d - u);
            (e.fillStyle = a),
              e.beginPath(),
              e.moveTo(c.x, c.y),
              e.lineTo(p.x, c.y),
              e.lineTo(p.x, p.y),
              e.lineTo(c.x, p.y),
              e.closePath(),
              e.fill(),
              o > 0 && ((e.strokeStyle = s), (e.lineWidth = o), e.stroke());
          }
        }
        t.SquarePointMarker = a;
      },
      58229: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TrianglePointMarker = void 0);
        const r = i(75772),
          s = i(30323),
          o = i(27467);
        class a extends o.BasePointMarker {
          constructor(e, t) {
            super(e, t), (this.type = s.EPointMarkerType.Triangle);
          }
          drawSprite(e, t, i, s, o, a) {
            const n = e.canvas.width / 2,
              l = e.canvas.height / 2,
              d = i / 2,
              h = t / 2,
              u = o / 2,
              c = new r.Point(n, l - d + u),
              p = new r.Point(n + h - u, l + d - u),
              g = new r.Point(n - h + u, l + d - u);
            (e.fillStyle = a),
              e.beginPath(),
              e.moveTo(c.x, c.y),
              e.lineTo(p.x, p.y),
              e.lineTo(g.x, g.y),
              e.lineTo(c.x, c.y),
              e.closePath(),
              e.fill(),
              o > 0 && ((e.strokeStyle = s), (e.lineWidth = o), e.stroke());
          }
        }
        t.TrianglePointMarker = a;
      },
      61704: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XPointMarker = void 0);
        const r = i(30323),
          s = i(27467);
        class o extends s.BasePointMarker {
          constructor(e, t) {
            super(e, t), (this.type = r.EPointMarkerType.X);
          }
          drawSprite(e, t, i, r, s, o) {
            const a = e.canvas.width / 2,
              n = e.canvas.height / 2,
              l = i / 2,
              d = t / 2,
              h = s / 4;
            s > 0 &&
              ((e.strokeStyle = r),
              (e.lineWidth = 1.5 * s),
              e.beginPath(),
              e.moveTo(a - d + h, n - l + h),
              e.lineTo(a + d - h, n + l - h),
              e.stroke(),
              e.beginPath(),
              e.moveTo(a + d - h, n - l + h),
              e.lineTo(a - d + h, n + l - h),
              e.stroke());
          }
        }
        t.XPointMarker = o;
      },
      27501: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BandAnimation = void 0);
        const r = i(10763),
          s = i(48008),
          o = i(54580),
          a = i(25923),
          n = i(55371);
        class l extends n.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new a.BandAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
          getSeriesStyle(e) {
            var t;
            if (!e.isStacked)
              return new a.BandAnimationStyle({
                stroke: e.stroke,
                strokeY1: e.strokeY1,
                fill: e.fill,
                fillY1: e.fillY1,
                strokeThickness: e.strokeThickness,
                opacity: e.opacity,
                pointMarker:
                  null === (t = e.pointMarker) || void 0 === t
                    ? void 0
                    : t.getPointMarkerStyle(),
              });
          }
          updateSeriesProperties(e, t, i) {
            if (
              (super.updateSeriesProperties(e, t, i), this.isStyleAnimation)
            ) {
              const r = this.styles;
              if (void 0 !== r.strokeY1) {
                const a = o.animationHelpers.interpolateColor(
                  t.strokeY1ARGB,
                  r.strokeY1ARGB,
                  i
                );
                e.strokeY1 = (0, s.parseArgbToHtmlColor)(a);
              }
              if (void 0 !== r.fill) {
                const a = o.animationHelpers.interpolateColor(
                  t.fillARGB,
                  r.fillARGB,
                  i
                );
                e.fill = (0, s.parseArgbToHtmlColor)(a);
              }
              if (void 0 !== r.fillY1) {
                const a = o.animationHelpers.interpolateColor(
                  t.fillY1ARGB,
                  r.fillY1ARGB,
                  i
                );
                e.fillY1 = (0, s.parseArgbToHtmlColor)(a);
              }
            }
          }
        }
        t.BandAnimation = l;
      },
      25923: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BandAnimationStyle = void 0);
        const r = i(48008),
          s = i(63642);
        class o extends s.BaseAnimationStyle {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.strokeY1 =
                null !== (t = null == e ? void 0 : e.strokeY1) && void 0 !== t
                  ? t
                  : this.strokeY1Property),
              (this.fill =
                null !== (i = null == e ? void 0 : e.fill) && void 0 !== i
                  ? i
                  : this.fillProperty),
              (this.fillY1 =
                null !== (r = null == e ? void 0 : e.fillY1) && void 0 !== r
                  ? r
                  : this.fillY1Property);
          }
          set strokeY1(e) {
            (this.strokeY1Property = e),
              e && (this.strokeY1ARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get strokeY1() {
            return this.strokeY1Property;
          }
          get strokeY1ARGB() {
            return this.strokeY1ARGBProperty;
          }
          set fill(e) {
            (this.fillProperty = e),
              e && (this.fillARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get fill() {
            return this.fillProperty;
          }
          get fillARGB() {
            return this.fillARGBProperty;
          }
          set fillY1(e) {
            (this.fillY1Property = e),
              e && (this.fillY1ARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get fillY1() {
            return this.fillY1Property;
          }
          get fillY1ARGB() {
            return this.fillY1ARGBProperty;
          }
        }
        t.BandAnimationStyle = o;
      },
      63642: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseAnimationStyle = void 0);
        const r = i(30323),
          s = i(48008),
          o = i(386),
          a = i(49987);
        t.BaseAnimationStyle = class {
          constructor(e) {
            var t, i, s;
            (this.opacity = void 0),
              (this.strokeProperty = void 0),
              (this.strokeThickness =
                null !== (t = null == e ? void 0 : e.strokeThickness) &&
                void 0 !== t
                  ? t
                  : this.strokeThickness),
              (this.stroke =
                null !== (i = null == e ? void 0 : e.stroke) && void 0 !== i
                  ? i
                  : this.strokeProperty),
              (null == e ? void 0 : e.pointMarker) &&
                (this.pointMarker =
                  e.pointMarker.type === r.EPointMarkerType.Sprite
                    ? new o.CustomPointMarkerStyle(e.pointMarker)
                    : new a.PointMarkerStyle(e.pointMarker)),
              (this.opacity =
                null !== (s = null == e ? void 0 : e.opacity) && void 0 !== s
                  ? s
                  : this.opacity);
          }
          set stroke(e) {
            (this.strokeProperty = e),
              e && (this.strokeARGBProperty = (0, s.parseColorToUIntArgb)(e));
          }
          get stroke() {
            return this.strokeProperty;
          }
          get strokeARGB() {
            return this.strokeARGBProperty;
          }
        };
      },
      88227: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BasePointMarkerStyle = void 0);
        const r = i(30323);
        t.BasePointMarkerStyle = class {
          constructor(e) {
            var t, i, r;
            (this.width = 0),
              (this.height = 0),
              (this.type =
                null !== (t = null == e ? void 0 : e.type) && void 0 !== t
                  ? t
                  : this.type),
              (this.width =
                null !== (i = null == e ? void 0 : e.width) && void 0 !== i
                  ? i
                  : this.width),
              (this.height =
                null !== (r = null == e ? void 0 : e.height) && void 0 !== r
                  ? r
                  : this.height);
          }
          get isCustomPointMarker() {
            return this.type === r.EPointMarkerType.Sprite;
          }
        };
      },
      61690: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BubbleAnimation = void 0);
        const r = i(10763),
          s = i(55371),
          o = i(63642);
        class a extends s.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new o.BaseAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
        }
        t.BubbleAnimation = a;
      },
      86551: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CandlestickAnimation = void 0);
        const r = i(10763),
          s = i(48008),
          o = i(54580),
          a = i(50951),
          n = i(86717);
        class l extends n.OhlcAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new a.CandlestickAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
          getSeriesStyle(e) {
            var t;
            if (!e.isStacked)
              return new a.CandlestickAnimationStyle({
                stroke: e.stroke,
                strokeThickness: e.strokeThickness,
                opacity: e.opacity,
                strokeUp: e.strokeUp,
                strokeDown: e.strokeDown,
                brushUp: e.brushUp,
                brushDown: e.brushDown,
                pointMarker:
                  null === (t = e.pointMarker) || void 0 === t
                    ? void 0
                    : t.getPointMarkerStyle(),
              });
          }
          updateSeriesProperties(e, t, i) {
            if (
              (super.updateSeriesProperties(e, t, i), this.isStyleAnimation)
            ) {
              const r = this.styles;
              if (void 0 !== r.brushUp) {
                const a = o.animationHelpers.interpolateColor(
                  t.brushUpARGB,
                  r.brushUpARGB,
                  i
                );
                e.brushUp = (0, s.parseArgbToHtmlColor)(a);
              }
              if (void 0 !== r.brushDown) {
                const a = o.animationHelpers.interpolateColor(
                  t.brushDownARGB,
                  r.brushDownARGB,
                  i
                );
                e.brushDown = (0, s.parseArgbToHtmlColor)(a);
              }
            }
          }
        }
        t.CandlestickAnimation = l;
      },
      50951: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CandlestickAnimationStyle = void 0);
        const r = i(48008),
          s = i(54938);
        class o extends s.OhlcAnimationStyle {
          constructor(e) {
            var t, i;
            super(e),
              (this.brushUp =
                null !== (t = null == e ? void 0 : e.brushUp) && void 0 !== t
                  ? t
                  : this.brushUpProperty),
              (this.brushDown =
                null !== (i = null == e ? void 0 : e.brushDown) && void 0 !== i
                  ? i
                  : this.brushDownProperty);
          }
          set brushUp(e) {
            (this.brushUpProperty = e),
              e && (this.brushUpARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get brushUp() {
            return this.brushUpProperty;
          }
          get brushUpARGB() {
            return this.brushUpARGBProperty;
          }
          set brushDown(e) {
            (this.brushDownProperty = e),
              e &&
                (this.brushDownARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get brushDown() {
            return this.brushDownProperty;
          }
          get brushDownARGB() {
            return this.brushDownARGBProperty;
          }
        }
        t.CandlestickAnimationStyle = o;
      },
      9687: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ColumnAnimation = void 0);
        const r = i(10763),
          s = i(48008),
          o = i(54580),
          a = i(55371),
          n = i(37886),
          l = i(49987);
        class d extends a.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new n.ColumnAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
          getSeriesStyle(e) {
            var t, i;
            if (!e.isStacked)
              return new n.ColumnAnimationStyle({
                stroke: e.stroke,
                strokeThickness: e.strokeThickness,
                opacity: e.opacity,
                pointMarker:
                  null !==
                    (i =
                      null === (t = e.pointMarker) || void 0 === t
                        ? void 0
                        : t.getPointMarkerStyle()) && void 0 !== i
                    ? i
                    : new l.PointMarkerStyle(),
                fill: e.fill,
                zeroLineY: e.zeroLineY,
                dataPointWidth: e.dataPointWidth,
              });
          }
          updateSeriesProperties(e, t, i) {
            if (
              (super.updateSeriesProperties(e, t, i), this.isStyleAnimation)
            ) {
              const r = this.styles;
              if (void 0 !== r.fill) {
                const a = o.animationHelpers.interpolateColor(
                  t.fillARGB,
                  r.fillARGB,
                  i
                );
                e.fill = (0, s.parseArgbToHtmlColor)(a);
              }
              void 0 !== r.zeroLineY &&
                (e.zeroLineY = o.animationHelpers.interpolateNumber(
                  t.zeroLineY,
                  r.zeroLineY,
                  i
                )),
                void 0 !== r.dataPointWidth &&
                  (e.dataPointWidth = o.animationHelpers.interpolateNumber(
                    t.dataPointWidth,
                    r.dataPointWidth,
                    i
                  ));
            }
          }
        }
        t.ColumnAnimation = d;
      },
      37886: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ColumnAnimationStyle = void 0);
        const r = i(48008),
          s = i(63642);
        class o extends s.BaseAnimationStyle {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.fill =
                null !== (t = null == e ? void 0 : e.fill) && void 0 !== t
                  ? t
                  : this.fillProperty),
              (this.zeroLineY =
                null !== (i = null == e ? void 0 : e.zeroLineY) && void 0 !== i
                  ? i
                  : this.zeroLineY),
              (this.dataPointWidth =
                null !== (r = null == e ? void 0 : e.dataPointWidth) &&
                void 0 !== r
                  ? r
                  : this.dataPointWidth);
          }
          set fill(e) {
            (this.fillProperty = e),
              e && (this.fillARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get fill() {
            return this.fillProperty;
          }
          get fillARGB() {
            return this.fillARGBProperty;
          }
        }
        t.ColumnAnimationStyle = o;
      },
      386: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CustomPointMarkerStyle = void 0);
        const r = i(88227);
        class s extends r.BasePointMarkerStyle {
          constructor(e) {
            var t;
            super(e),
              (this.image =
                null !== (t = null == e ? void 0 : e.image) && void 0 !== t
                  ? t
                  : this.image);
          }
        }
        t.CustomPointMarkerStyle = s;
      },
      62314: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FadeAnimation = void 0);
        const r = i(10763),
          s = i(55371);
        class o extends s.SeriesAnimation {
          constructor(e) {
            var t;
            super(e),
              (this.type = r.EAnimationType.Fade),
              (this.isFadeEffectAnimation =
                null === (t = null == e ? void 0 : e.fadeEffect) ||
                void 0 === t ||
                t);
          }
          calculateAnimationValues(e, t, i, r, s = !1) {
            e.SCRTAnimationHelperFade(t, r, i);
          }
        }
        t.FadeAnimation = o;
      },
      98499: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LineAnimation = void 0);
        const r = i(10763),
          s = i(55371),
          o = i(63642);
        class a extends s.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new o.BaseAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
        }
        t.LineAnimation = a;
      },
      65122: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MountainAnimation = void 0);
        const r = i(10763),
          s = i(48008),
          o = i(54580),
          a = i(55371),
          n = i(3911),
          l = i(49987);
        class d extends a.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new n.MountainAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
          getSeriesStyle(e) {
            var t, i;
            if (!e.isStacked)
              return new n.MountainAnimationStyle({
                stroke: e.stroke,
                strokeThickness: e.strokeThickness,
                opacity: e.opacity,
                pointMarker:
                  null !==
                    (i =
                      null === (t = e.pointMarker) || void 0 === t
                        ? void 0
                        : t.getPointMarkerStyle()) && void 0 !== i
                    ? i
                    : new l.PointMarkerStyle(),
                fill: e.fill,
                zeroLineY: e.zeroLineY,
              });
          }
          updateSeriesProperties(e, t, i) {
            if (
              (super.updateSeriesProperties(e, t, i), this.isStyleAnimation)
            ) {
              const r = this.styles;
              if (void 0 !== r.fill) {
                const a = o.animationHelpers.interpolateColor(
                  t.fillARGB,
                  r.fillARGB,
                  i
                );
                e.fill = (0, s.parseArgbToHtmlColor)(a);
              }
              void 0 !== r.zeroLineY &&
                (e.zeroLineY = o.animationHelpers.interpolateNumber(
                  t.zeroLineY,
                  r.zeroLineY,
                  i
                ));
            }
          }
        }
        t.MountainAnimation = d;
      },
      3911: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MountainAnimationStyle = void 0);
        const r = i(48008),
          s = i(63642);
        class o extends s.BaseAnimationStyle {
          constructor(e) {
            var t, i;
            super(e),
              (this.fill =
                null !== (t = null == e ? void 0 : e.fill) && void 0 !== t
                  ? t
                  : this.fillProperty),
              (this.zeroLineY =
                null !== (i = null == e ? void 0 : e.zeroLineY) && void 0 !== i
                  ? i
                  : this.zeroLineY);
          }
          set fill(e) {
            (this.fillProperty = e),
              e && (this.fillARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get fill() {
            return this.fillProperty;
          }
          get fillARGB() {
            return this.fillARGBProperty;
          }
        }
        t.MountainAnimationStyle = o;
      },
      86717: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcAnimation = void 0);
        const r = i(10763),
          s = i(48008),
          o = i(54580),
          a = i(55371),
          n = i(54938);
        class l extends a.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new n.OhlcAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
          getSeriesStyle(e) {
            var t;
            if (!e.isStacked)
              return new n.OhlcAnimationStyle({
                stroke: e.stroke,
                strokeThickness: e.strokeThickness,
                opacity: e.opacity,
                strokeUp: e.strokeUp,
                strokeDown: e.strokeDown,
                dataPointWidth: e.dataPointWidth,
                pointMarker:
                  null === (t = e.pointMarker) || void 0 === t
                    ? void 0
                    : t.getPointMarkerStyle(),
              });
          }
          updateSeriesProperties(e, t, i) {
            if (
              (super.updateSeriesProperties(e, t, i), this.isStyleAnimation)
            ) {
              const r = this.styles;
              if (void 0 !== r.strokeUp) {
                const a = o.animationHelpers.interpolateColor(
                  t.strokeUpARGB,
                  r.strokeUpARGB,
                  i
                );
                e.strokeUp = (0, s.parseArgbToHtmlColor)(a);
              }
              if (void 0 !== r.strokeDown) {
                const a = o.animationHelpers.interpolateColor(
                  t.strokeDownARGB,
                  r.strokeDownARGB,
                  i
                );
                e.strokeDown = (0, s.parseArgbToHtmlColor)(a);
              }
              void 0 !== r.dataPointWidth &&
                (e.dataPointWidth = o.animationHelpers.interpolateNumber(
                  t.dataPointWidth,
                  r.dataPointWidth,
                  i
                ));
            }
          }
        }
        t.OhlcAnimation = l;
      },
      54938: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcAnimationStyle = void 0);
        const r = i(48008),
          s = i(63642);
        class o extends s.BaseAnimationStyle {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.strokeUp =
                null !== (t = null == e ? void 0 : e.strokeUp) && void 0 !== t
                  ? t
                  : this.strokeUpProperty),
              (this.strokeDown =
                null !== (i = null == e ? void 0 : e.strokeDown) && void 0 !== i
                  ? i
                  : this.strokeDownProperty),
              (this.dataPointWidth =
                null !== (r = null == e ? void 0 : e.dataPointWidth) &&
                void 0 !== r
                  ? r
                  : this.dataPointWidth);
          }
          set strokeUp(e) {
            (this.strokeUpProperty = e),
              e && (this.strokeUpARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get strokeUp() {
            return this.strokeUpProperty;
          }
          get strokeUpARGB() {
            return this.strokeUpARGBProperty;
          }
          set strokeDown(e) {
            (this.strokeDownProperty = e),
              e &&
                (this.strokeDownARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get strokeDown() {
            return this.strokeDownProperty;
          }
          get strokeDownARGB() {
            return this.strokeDownARGBProperty;
          }
        }
        t.OhlcAnimationStyle = o;
      },
      49987: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PointMarkerStyle = void 0);
        const r = i(48008),
          s = i(88227);
        class o extends s.BasePointMarkerStyle {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.strokeThickness = 0),
              (this.strokeThickness =
                null !== (t = null == e ? void 0 : e.strokeThickness) &&
                void 0 !== t
                  ? t
                  : this.strokeThickness),
              (this.stroke =
                null !== (i = null == e ? void 0 : e.stroke) && void 0 !== i
                  ? i
                  : "#ffffff00"),
              (this.fill =
                null !== (r = null == e ? void 0 : e.fill) && void 0 !== r
                  ? r
                  : "#ffffff00");
          }
          set stroke(e) {
            (this.strokeProperty = e),
              e && (this.strokeARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get stroke() {
            return this.strokeProperty;
          }
          get strokeARGB() {
            return this.strokeARGBProperty;
          }
          set fill(e) {
            (this.fillProperty = e),
              e && (this.fillARGBProperty = (0, r.parseColorToUIntArgb)(e));
          }
          get fill() {
            return this.fillProperty;
          }
          get fillARGB() {
            return this.fillARGBProperty;
          }
        }
        t.PointMarkerStyle = o;
      },
      56705: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ScaleAnimation = void 0);
        const r = i(10763),
          s = i(55371);
        class o extends s.SeriesAnimation {
          constructor(e) {
            var t;
            super(e),
              (this.type = r.EAnimationType.Scale),
              (this.zeroLine = 0),
              (this.isOnStartAnimation = !0),
              (this.zeroLine =
                null !== (t = null == e ? void 0 : e.zeroLine) && void 0 !== t
                  ? t
                  : this.zeroLine);
          }
          calculateAnimationValues(e, t, i, r, s = !1) {
            const o = s ? 0 : this.zeroLine;
            e.SCRTAnimationHelperScale(t, o, this.reverse ? 1 - r : r, i);
          }
          toJSON() {
            const e = super.toJSON(),
              t = { zeroLine: this.zeroLine };
            return Object.assign(e.options, t), e;
          }
        }
        t.ScaleAnimation = o;
      },
      16911: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ScatterAnimation = void 0);
        const r = i(10763),
          s = i(55371),
          o = i(63642);
        class a extends s.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Style),
              (this.duration =
                null !== (t = null == e ? void 0 : e.duration) && void 0 !== t
                  ? t
                  : 1e3),
              (this.styles = (null == e ? void 0 : e.styles)
                ? new o.BaseAnimationStyle(e.styles)
                : this.styles),
              (this.dataSeries =
                null !== (i = null == e ? void 0 : e.dataSeries) && void 0 !== i
                  ? i
                  : this.dataSeries);
          }
        }
        t.ScatterAnimation = a;
      },
      55371: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesAnimation = void 0);
        const r = i(45921),
          s = i(10276),
          o = i(11043),
          a = i(48008),
          n = i(54580),
          l = i(63642),
          d = i(49987);
        t.SeriesAnimation = class {
          constructor(e) {
            var t, i, a, n, l;
            if (
              ((this.delay = 0),
              (this.duration = 3e3),
              (this.ease = s.easing.linear),
              (this.isFadeEffectAnimation = !1),
              (this.isOnStartAnimation = !1),
              (this.typeMap = new Map()),
              (this.delay =
                null !== (t = null == e ? void 0 : e.delay) && void 0 !== t
                  ? t
                  : this.delay),
              (this.duration =
                null !== (i = null == e ? void 0 : e.duration) && void 0 !== i
                  ? i
                  : this.duration),
              (this.isFadeEffectAnimation =
                null !== (a = null == e ? void 0 : e.fadeEffect) && void 0 !== a
                  ? a
                  : this.isFadeEffectAnimation),
              (null == e ? void 0 : e.ease) &&
                "string" == typeof e.ease &&
                (e.ease = s.easing[e.ease]),
              (this.ease =
                null !== (n = null == e ? void 0 : e.ease) && void 0 !== n
                  ? n
                  : this.ease),
              (this.reverse =
                null !== (l = null == e ? void 0 : e.reverse) && void 0 !== l
                  ? l
                  : this.reverse),
              null == e ? void 0 : e.onCompleted)
            )
              if ("string" == typeof e.onCompleted) {
                this.typeMap.set("onCompleted", e.onCompleted);
                const t = (0, r.getFunction)(
                  o.EBaseType.OptionFunction,
                  e.onCompleted
                );
                this.onCompleted = t;
              } else this.onCompleted = e.onCompleted;
          }
          toJSON() {
            const e = {
              delay: this.delay,
              duration: this.duration,
              ease: this.ease.name,
              fadeEffect: this.isFadeEffectAnimation,
              reverse: this.reverse,
              onCompleted: this.typeMap.get("onCompleted"),
            };
            return { type: this.type, options: e };
          }
          calculateAnimationValues(e, t, i, r, s = !1) {}
          calculateDataSeriesAnimationValues(e, t, i, r, s) {
            const o = t.size();
            if (o !== i.size())
              throw new Error(
                "DoubleVectors with initialValues and finalValues must have the same length"
              );
            "function" != typeof r.getRaw && r.resize(o, 0);
            for (let e = 0; e < o; e++)
              r.set(
                e,
                n.animationHelpers.interpolateNumber(t.get(e), i.get(e), s)
              );
          }
          getSeriesStyle(e) {
            var t, i;
            const r = e;
            if (!r.isStacked)
              return new l.BaseAnimationStyle({
                stroke: r.stroke,
                strokeThickness: r.strokeThickness,
                opacity: r.opacity,
                pointMarker:
                  null !==
                    (i =
                      null === (t = r.pointMarker) || void 0 === t
                        ? void 0
                        : t.getPointMarkerStyle()) && void 0 !== i
                    ? i
                    : new d.PointMarkerStyle(),
              });
          }
          updateSeriesProperties(e, t, i) {
            var r, s, o, l, d;
            this.reverse && (i = 1 - i);
            const h = e,
              u = h.pointMarker;
            if (this.isStyleAnimation) {
              if (void 0 !== this.styles.strokeThickness) {
                const e = null == t ? void 0 : t.strokeThickness,
                  r = this.styles.strokeThickness;
                h.strokeThickness = e + (r - e) * i;
              }
              if (void 0 !== this.styles.stroke) {
                const e = n.animationHelpers.interpolateColor(
                  t.strokeARGB,
                  this.styles.strokeARGB,
                  i
                );
                h.stroke = (0, a.parseArgbToHtmlColor)(e);
              }
              if (
                (void 0 !== this.styles.opacity &&
                  (h.opacity = n.animationHelpers.interpolateNumber(
                    t.opacity,
                    this.styles.opacity,
                    i
                  )),
                void 0 !== this.styles.pointMarker)
              ) {
                h.pointMarker.suspendUpdates();
                const e =
                    null !==
                      (s =
                        null === (r = t.pointMarker) || void 0 === r
                          ? void 0
                          : r.width) && void 0 !== s
                      ? s
                      : 0,
                  u =
                    null !==
                      (l =
                        null === (o = t.pointMarker) || void 0 === o
                          ? void 0
                          : o.height) && void 0 !== l
                      ? l
                      : 0;
                if (
                  ((h.pointMarker.width = n.animationHelpers.interpolateNumber(
                    e,
                    this.styles.pointMarker.width,
                    i
                  )),
                  (h.pointMarker.height = n.animationHelpers.interpolateNumber(
                    u,
                    this.styles.pointMarker.height,
                    i
                  )),
                  !this.styles.pointMarker.isCustomPointMarker)
                ) {
                  const e = t.pointMarker,
                    r = this.styles.pointMarker,
                    s =
                      null !== (d = null == e ? void 0 : e.strokeThickness) &&
                      void 0 !== d
                        ? d
                        : 0;
                  h.pointMarker.strokeThickness =
                    n.animationHelpers.interpolateNumber(
                      s,
                      r.strokeThickness,
                      i
                    );
                  const o = n.animationHelpers.interpolateColor(
                    e.fillARGB,
                    r.fillARGB,
                    i
                  );
                  h.pointMarker.fill = (0, a.parseArgbToHtmlColor)(o);
                  const l = n.animationHelpers.interpolateColor(
                    e.strokeARGB,
                    r.strokeARGB,
                    i
                  );
                  h.pointMarker.stroke = (0, a.parseArgbToHtmlColor)(l);
                }
                h.pointMarker.resumeUpdates();
              }
            }
            if (this.isFadeEffectAnimation) {
              const e = t.opacity * i;
              (h.opacity = e), u && (u.opacity = e);
            }
          }
          get isStyleAnimation() {
            return !!this.styles;
          }
          get isDataSeriesAnimation() {
            return !!this.dataSeries;
          }
        };
      },
      592: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SweepAnimation = void 0);
        const r = i(10763),
          s = i(55371);
        class o extends s.SeriesAnimation {
          constructor(e) {
            super(e),
              (this.type = r.EAnimationType.Sweep),
              (this.isOnStartAnimation = !0);
          }
          updateSeriesProperties(e, t, i) {
            super.updateSeriesProperties(e, t, i),
              0 === i
                ? (e.dataSeries.containsNaN = !0)
                : 1 === i && (e.dataSeries.containsNaN = !1);
          }
          calculateAnimationValues(e, t, i, r, s = !1) {
            e.SCRTAnimationHelperSweep(t, this.reverse ? 1 - r : r, i);
          }
        }
        t.SweepAnimation = o;
      },
      56498: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.WaveAnimation = void 0);
        const r = i(10763),
          s = i(55371);
        class o extends s.SeriesAnimation {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = r.EAnimationType.Wave),
              (this.pointDurationFraction = 0.2),
              (this.zeroLine = 0),
              (this.isOnStartAnimation = !0),
              (this.pointDurationFraction =
                null !== (t = null == e ? void 0 : e.pointDurationFraction) &&
                void 0 !== t
                  ? t
                  : this.pointDurationFraction),
              (this.zeroLine =
                null !== (i = null == e ? void 0 : e.zeroLine) && void 0 !== i
                  ? i
                  : this.zeroLine);
          }
          updateSeriesProperties(e, t, i) {
            super.updateSeriesProperties(e, t, i),
              0 === i
                ? (e.dataSeries.containsNaN = !0)
                : 1 === i && (e.dataSeries.containsNaN = !1);
          }
          calculateAnimationValues(e, t, i, r, s = !1) {
            const { pointDurationFraction: o } = this,
              a = s ? 0 : this.zeroLine;
            e.SCRTAnimationHelperWave(t, o, a, this.reverse ? 1 - r : r, i);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                zeroLine: this.zeroLine,
                pointDurationFraction: this.pointDurationFraction,
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.WaveAnimation = o;
      },
      54580: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__rest) ||
          function (e, t) {
            var i = {};
            for (var r in e)
              Object.prototype.hasOwnProperty.call(e, r) &&
                t.indexOf(r) < 0 &&
                (i[r] = e[r]);
            if (
              null != e &&
              "function" == typeof Object.getOwnPropertySymbols
            ) {
              var s = 0;
              for (r = Object.getOwnPropertySymbols(e); s < r.length; s++)
                t.indexOf(r[s]) < 0 &&
                  Object.prototype.propertyIsEnumerable.call(e, r[s]) &&
                  (i[r[s]] = e[r[s]]);
            }
            return i;
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.animationHelpers = void 0);
        const s = i(82229),
          o = i(30323),
          a = i(22950),
          n = i(22745),
          l = i(10749),
          d = i(21033),
          h = i(77057),
          u = i(58229),
          c = i(61704);
        t.animationHelpers = {
          checkCanDraw: (e) =>
            !e ||
            e.is([s.EAnimationState.Running, s.EAnimationState.Completed]),
          checkIsAnimationRunning: (e, t) =>
            e.length > 0 || (!!t && !t.is([s.EAnimationState.Completed])),
          animationUpdate: (e, t, i, r, o) => {
            const a = e.update(t);
            e.animation.isOnStartAnimation &&
              a === s.EAnimationStateTransition.InitialState_Delayed &&
              (i(), o(0, e)),
              (a === s.EAnimationStateTransition.InitialState_Running ||
                (!e.animation.isOnStartAnimation &&
                  a === s.EAnimationStateTransition.Delayed_Running)) &&
                i(),
              e.is([s.EAnimationState.Running, s.EAnimationState.Completed]) &&
                o(e.animationProgress, e),
              [
                s.EAnimationStateTransition.Running_Completed,
                s.EAnimationStateTransition.InitialState_Completed,
              ].includes(a) &&
                e.animation.onCompleted &&
                e.animation.onCompleted(),
              a === s.EAnimationStateTransition.Running_Completed && r();
          },
          createPointMarker: (e, t) => {
            if (t) {
              if (t.type === o.EPointMarkerType.Sprite) {
                const i = t,
                  { type: s } = i,
                  o = r(i, ["type"]);
                return new d.SpritePointMarker(e, Object.assign({}, o));
              }
              {
                const i = t,
                  { type: s } = i,
                  a = r(i, ["type"]);
                switch (s) {
                  case o.EPointMarkerType.Cross:
                    return new n.CrossPointMarker(e, Object.assign({}, a));
                  case o.EPointMarkerType.Ellipse:
                    return new l.EllipsePointMarker(e, Object.assign({}, a));
                  case o.EPointMarkerType.X:
                    return new c.XPointMarker(e, Object.assign({}, a));
                  case o.EPointMarkerType.Square:
                    return new h.SquarePointMarker(e, Object.assign({}, a));
                  case o.EPointMarkerType.Triangle:
                    return new u.TrianglePointMarker(e, Object.assign({}, a));
                }
              }
            }
          },
          interpolateNumber: (e, t, i) =>
            i < 0 ? e : i > 1 ? t : e + (t - e) * i,
          interpolateColor: (e, t, i) =>
            i < 0 ? e : i > 1 ? t : (0, a.uintArgbColorLerp)(e, t, i),
          copyVector: (e, t) => {
            const i = e.size();
            t.resize(i, 0);
            for (let r = 0; r < i; r++) t.set(r, e.get(r));
          },
        };
      },
      20181: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseBandRenderableSeries = void 0);
        const r = i(56744),
          s = i(14023),
          o = i(2354),
          a = i(84392),
          n = i(14184),
          l = i(79961),
          d = i(20977),
          h = i(81856),
          u = i(7807),
          c = i(94707),
          p = i(72704);
        class g extends l.BaseRenderableSeries {
          constructor(e, t) {
            var i, r, s, o;
            super(e, t),
              (this.stroke =
                null !== (i = null == t ? void 0 : t.stroke) && void 0 !== i
                  ? i
                  : n.SciChartSurfaceBase.DEFAULT_THEME
                      .downBandSeriesLineColor),
              (this.strokeY1Property =
                null !== (r = null == t ? void 0 : t.strokeY1) && void 0 !== r
                  ? r
                  : n.SciChartSurfaceBase.DEFAULT_THEME.upBandSeriesLineColor),
              (this.fillProperty =
                null !== (s = null == t ? void 0 : t.fill) && void 0 !== s
                  ? s
                  : n.SciChartSurfaceBase.DEFAULT_THEME.upBandSeriesFillColor),
              (this.fillY1Property =
                null !== (o = null == t ? void 0 : t.fillY1) && void 0 !== o
                  ? o
                  : n.SciChartSurfaceBase.DEFAULT_THEME
                      .downBandSeriesFillColor),
              (this.fillLinearGradient =
                null == t ? void 0 : t.fillLinearGradient),
              (this.fillLinearGradientY1 =
                null == t ? void 0 : t.fillLinearGradientY1),
              (this.strokeY1DashArrayProperty =
                null == t ? void 0 : t.strokeY1DashArray),
              (this.strokeDashArrayProperty =
                null == t ? void 0 : t.strokeDashArray),
              this.drawingProviders.push(
                new u.BandSeriesDrawingProvider(e, this)
              ),
              this.drawingProviders.push(
                new c.PointMarkerDrawingProvider(e, this)
              ),
              this.drawingProviders.push(
                new c.PointMarkerDrawingProvider(
                  e,
                  this,
                  (e) => e.y1Values,
                  (e) => e.y1SplineValues
                )
              ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new h.BandSeriesDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.stroke === t.downBandSeriesLineColor &&
              (this.stroke = e.downBandSeriesLineColor),
              this.strokeY1 === t.upBandSeriesLineColor &&
                (this.strokeY1 = e.upBandSeriesLineColor),
              this.fill === t.upBandSeriesFillColor &&
                (this.fill = e.upBandSeriesFillColor),
              this.fillY1 === t.downBandSeriesFillColor &&
                (this.fillY1 = e.downBandSeriesFillColor);
          }
          get fill() {
            return (0, a.stripAutoColor)(this.fillProperty);
          }
          set fill(e) {
            this.fillProperty !== e &&
              ((this.fillProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL));
          }
          get strokeY1() {
            return (0, a.stripAutoColor)(this.strokeY1Property);
          }
          set strokeY1(e) {
            this.strokeY1Property !== e &&
              ((this.strokeY1Property = e),
              this.notifyPropertyChanged(d.PROPERTY.STROKE_Y1));
          }
          get fillY1() {
            return (0, a.stripAutoColor)(this.fillY1Property);
          }
          set fillY1(e) {
            this.fillY1Property !== e &&
              ((this.fillY1Property = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL_Y1));
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.STROKE_DASH_ARRAY);
          }
          get strokeY1DashArray() {
            return this.strokeY1DashArrayProperty;
          }
          set strokeY1DashArray(e) {
            (this.strokeY1DashArrayProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.STROKE_Y1_DASH_ARRAY);
          }
          get fillLinearGradient() {
            return this.fillLinearGradientProperty;
          }
          set fillLinearGradient(e) {
            e !== this.fillLinearGradientProperty &&
              ((this.fillLinearGradientProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL_LINEAR_GRADIENT));
          }
          get fillLinearGradientY1() {
            return this.fillLinearGradientY1Property;
          }
          set fillLinearGradientY1(e) {
            e !== this.fillLinearGradientY1Property &&
              ((this.fillLinearGradientY1Property = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL_LINEAR_GRADIENT_Y1));
          }
          getNativeY1Values() {
            return this.dataSeries.getNativeY1Values();
          }
          delete() {
            (this.xyyTempPointSeries = (0, r.deleteSafe)(
              this.xyyTempPointSeries
            )),
              super.delete();
          }
          toPointSeries(e) {
            if (e) {
              this.xyyTempPointSeries
                ? (this.xyyTempPointSeries.xRange = e.xVisibleRange)
                : (this.xyyTempPointSeries = new s.XyyPointSeriesResampled(
                    this.webAssemblyContext,
                    e.xVisibleRange
                  )),
                this.pointSeries
                  ? (this.pointSeries.xRange = e.xVisibleRange)
                  : (this.pointSeries = new s.XyyPointSeriesResampled(
                      this.webAssemblyContext,
                      e.xVisibleRange
                    ));
              const t = this.pointSeries,
                i = this.dataSeries,
                r = i.getNativeXValues(),
                o = i.getNativeYValues(),
                a = i.getNativeY1Values(),
                n = this.resamplerHelper.resampleIntoPointSeries(
                  this.webAssemblyContext,
                  e,
                  r,
                  o,
                  this.xyyTempPointSeries.intIndexes,
                  void 0,
                  this.xyyTempPointSeries.xValues,
                  this.xyyTempPointSeries.yValues,
                  !1
                );
              this.pointSeries.fifoStartIndex = n.OutputSplitIndex;
              const l = this.xyyTempPointSeries.intIndexes.size();
              this.resamplerHelper.resampleIntoPointSeries(
                this.webAssemblyContext,
                e,
                r,
                a,
                this.xyyTempPointSeries.intIndexes,
                void 0,
                this.xyyTempPointSeries.xValues,
                this.xyyTempPointSeries.y1Values
              );
              const d = this.xyyTempPointSeries.intIndexes.size() - l,
                h = this.resamplerHelper.mergeIndexes(
                  this.xyyTempPointSeries.intIndexes,
                  l,
                  d,
                  t.intIndexes
                );
              return (
                this.xyyTempPointSeries.intIndexes.clear(),
                e.dataIsFifo
                  ? t.indexes.resizeFast(h)
                  : t.indexes.resizeFast(h + 1),
                this.resamplerHelper.copyValuesByIndexes(
                  t.intIndexes,
                  r,
                  o,
                  a,
                  h,
                  e.isCategoryAxis,
                  this.dataSeries.fifoSweeping,
                  t.indexes,
                  t.xValues,
                  t.yValues,
                  t.y1Values
                ),
                t.clearIntIndexes(),
                t
              );
            }
            return new o.XyyPointSeriesWrapped(this.dataSeries);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                fill: this.fill,
                fillY1: this.fillY1,
                strokeDashArray: this.strokeDashArray,
                strokeY1: this.strokeY1,
                strokeY1DashArray: this.strokeY1DashArray,
              };
            return Object.assign(t.options, i), t;
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.fillProperty.startsWith(a.AUTO_COLOR))
            ) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = a.AUTO_COLOR + this.adjustAutoColor("fill", r);
            }
            const r = (e + Math.floor(t / 2)) % t;
            if (this.strokeY1Property.startsWith(a.AUTO_COLOR)) {
              const e = i.getStrokeColor(r, t, this.webAssemblyContext);
              this.strokeY1 =
                a.AUTO_COLOR + this.adjustAutoColor("strokeY1", e);
            }
            if (this.fillY1Property.startsWith(a.AUTO_COLOR)) {
              const e = i.getFillColor(r, t, this.webAssemblyContext);
              this.fillY1 = a.AUTO_COLOR + this.adjustAutoColor("fillY1", e);
            }
          }
          newHitTestProvider() {
            return new p.BandSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.BaseBandRenderableSeries = g;
      },
      53904: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseHeatmapRenderableSeries = t.COLOR_MAP_PREFIX = void 0);
        const r = i(56744),
          s = i(42241),
          o = i(39920),
          a = i(79961),
          n = i(20977),
          l = i(60981);
        t.COLOR_MAP_PREFIX = "colorMap.";
        class d extends a.BaseRenderableSeries {
          constructor(e, t) {
            var i, r, a, n, d, h;
            super(e, t),
              (this.useLinearTextureFilteringProperty = !1),
              (this.fillValuesOutOfRangeProperty = !0),
              (this.colorMapPropertyChanged =
                this.colorMapPropertyChanged.bind(this)),
              (null == t ? void 0 : t.colorMap) &&
                ("toJSON" in t.colorMap ||
                  (t.colorMap = new l.HeatmapColorMap(t.colorMap))),
              (this.colorMap = null == t ? void 0 : t.colorMap),
              (this.dataSeries = null == t ? void 0 : t.dataSeries),
              (this.xAxisId =
                null !== (i = null == t ? void 0 : t.xAxisId) && void 0 !== i
                  ? i
                  : s.AxisCore.DEFAULT_AXIS_ID),
              (this.yAxisId =
                null !== (r = null == t ? void 0 : t.yAxisId) && void 0 !== r
                  ? r
                  : s.AxisCore.DEFAULT_AXIS_ID),
              (this.useLinearTextureFilteringProperty =
                null !==
                  (a = null == t ? void 0 : t.useLinearTextureFiltering) &&
                void 0 !== a
                  ? a
                  : this.useLinearTextureFilteringProperty),
              (this.fillValuesOutOfRangeProperty =
                null !== (n = null == t ? void 0 : t.fillValuesOutOfRange) &&
                void 0 !== n
                  ? n
                  : this.fillValuesOutOfRangeProperty),
              (null === (d = this.paletteProvider) || void 0 === d
                ? void 0
                : d.onAttached) &&
                (null === (h = this.paletteProvider) ||
                  void 0 === h ||
                  h.onAttached(this)),
              (this.zLabelProviderProperty = new o.NumericLabelProvider({
                labelPrecision: 2,
              }));
          }
          get colorMap() {
            return this.colorMapProperty;
          }
          set colorMap(e) {
            var t, i;
            null === (t = this.colorMapProperty) ||
              void 0 === t ||
              t.propertyChanged.unsubscribe(this.colorMapPropertyChanged),
              (this.colorMapProperty = e),
              null === (i = this.colorMapProperty) ||
                void 0 === i ||
                i.propertyChanged.subscribe(this.colorMapPropertyChanged),
              this.notifyPropertyChanged(n.PROPERTY.COLOR_MAP);
          }
          get useLinearTextureFiltering() {
            return this.useLinearTextureFilteringProperty;
          }
          set useLinearTextureFiltering(e) {
            (this.useLinearTextureFilteringProperty = e),
              this.notifyPropertyChanged(
                n.PROPERTY.USE_LINEAR_TEXTURE_FILTERING
              );
          }
          checkIsOutOfDataRange(e, t) {
            const i = this.dataSeries;
            return (
              !i ||
              e <= i.xRange.min ||
              e >= i.xRange.max ||
              t <= i.yRange.min ||
              t >= i.yRange.max
            );
          }
          get zLabelProvider() {
            return this.zLabelProviderProperty;
          }
          set zLabelProvider(e) {
            (this.zLabelProviderProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.Z_LABEL_PROVIDER);
          }
          get fillValuesOutOfRange() {
            return this.fillValuesOutOfRangeProperty;
          }
          set fillValuesOutOfRange(e) {
            (this.fillValuesOutOfRangeProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.FILL_VALUES_OUT_OF_RANGE);
          }
          toPointSeries(e) {}
          toJSON(e = !1) {
            var t;
            const i = super.toJSON(e),
              r = {
                colorMap:
                  null === (t = this.colorMap) || void 0 === t
                    ? void 0
                    : t.toJSON(),
                fillValuesOutOfRange: this.fillValuesOutOfRange,
                useLinearTextureFiltering: this.useLinearTextureFiltering,
              };
            return Object.assign(i.options, r), i;
          }
          delete() {
            (this.zLabelProviderProperty = (0, r.deleteSafe)(
              this.zLabelProviderProperty
            )),
              super.delete();
          }
          colorMapPropertyChanged(e) {
            this.notifyPropertyChanged(t.COLOR_MAP_PREFIX + e.propertyName);
          }
        }
        t.BaseHeatmapRenderableSeries = d;
      },
      20782: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseLineRenderableSeries = t.ELineType = void 0);
        const r = i(79961),
          s = i(20977),
          o = i(33802),
          a = i(36898),
          n = i(94707),
          l = i(28628);
        var d;
        !(function (e) {
          (e.Normal = "Normal"),
            (e.Digital = "Digital"),
            (e.DigitalNoEdge = "DigitalNoEdge"),
            (e.DigitalYX = "DigitalYX");
        })((d = t.ELineType || (t.ELineType = {})));
        class h extends r.BaseRenderableSeries {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.strokeDashArrayProperty = []),
              (this.lineTypeProperty = d.Normal),
              (this.strokeDashArrayProperty =
                null == t ? void 0 : t.strokeDashArray),
              (this.lineTypeProperty =
                null !== (i = null == t ? void 0 : t.lineType) && void 0 !== i
                  ? i
                  : this.lineTypeProperty),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new a.LineSeriesDrawingProvider(e, this)
              ),
              this.drawingProviders.push(
                new n.PointMarkerDrawingProvider(e, this)
              ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new o.LineSeriesDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.stroke === t.lineSeriesColor &&
              (this.stroke = e.lineSeriesColor);
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.STROKE_DASH_ARRAY);
          }
          get lineType() {
            return this.lineTypeProperty;
          }
          set lineType(e) {
            (this.lineTypeProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.LINE_TYPE);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                strokeDashArray: this.strokeDashArray,
                lineType: this.lineTypeProperty,
              };
            return Object.assign(t.options, i), t;
          }
          newHitTestProvider() {
            return new l.LineSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.BaseLineRenderableSeries = h;
      },
      36650: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseMountainRenderableSeries = void 0);
        const r = i(84392),
          s = i(14184),
          o = i(79961),
          a = i(20977),
          n = i(96852),
          l = i(36877),
          d = i(94707),
          h = i(47453);
        class u extends o.BaseRenderableSeries {
          constructor(e, t) {
            var i, r, o, a, h;
            super(e, t),
              (this.zeroLineYProperty = 0),
              (this.fillProperty =
                s.SciChartSurfaceBase.DEFAULT_THEME.mountainAreaBrush),
              (this.strokeDashArrayProperty = []),
              (this.stroke =
                null !== (i = null == t ? void 0 : t.stroke) && void 0 !== i
                  ? i
                  : s.SciChartSurfaceBase.DEFAULT_THEME.mountainLineColor),
              (this.strokeDashArrayProperty =
                null !== (r = null == t ? void 0 : t.strokeDashArray) &&
                void 0 !== r
                  ? r
                  : this.strokeDashArrayProperty),
              (this.fillProperty =
                null !== (o = null == t ? void 0 : t.fill) && void 0 !== o
                  ? o
                  : this.fillProperty),
              (this.zeroLineYProperty =
                null !== (a = null == t ? void 0 : t.zeroLineY) && void 0 !== a
                  ? a
                  : this.zeroLineYProperty),
              (this.fillLinearGradientProperty =
                null !== (h = null == t ? void 0 : t.fillLinearGradient) &&
                void 0 !== h
                  ? h
                  : this.fillLinearGradientProperty),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty = new n.DataLabelProvider(
                  null == t ? void 0 : t.dataLabels
                )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              this.drawingProviders.push(
                new l.MountainSeriesDrawingProvider(e, this)
              ),
              this.drawingProviders.push(
                new d.PointMarkerDrawingProvider(e, this)
              ),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.fill === t.mountainAreaBrush &&
              (this.fill = e.mountainAreaBrush),
              this.stroke === t.mountainLineColor &&
                (this.stroke = e.mountainLineColor);
          }
          get fill() {
            return (0, r.stripAutoColor)(this.fillProperty);
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.FILL);
          }
          get zeroLineY() {
            return this.zeroLineYProperty;
          }
          set zeroLineY(e) {
            (this.zeroLineYProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.ZERO_LINE_Y);
          }
          get fillLinearGradient() {
            return this.fillLinearGradientProperty;
          }
          set fillLinearGradient(e) {
            e !== this.fillLinearGradientProperty &&
              ((this.fillLinearGradientProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.FILL_LINEAR_GRADIENT));
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(a.PROPERTY.STROKE_DASH_ARRAY);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                fill: this.fill,
                fillLinearGradient: this.fillLinearGradient,
                strokeDashArray: this.strokeDashArray,
                zeroLineY: this.zeroLineY,
              };
            return Object.assign(t.options, i), t;
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.fillProperty.startsWith(r.AUTO_COLOR))
            ) {
              const s = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = r.AUTO_COLOR + this.adjustAutoColor("fill", s);
            }
          }
          newHitTestProvider() {
            return new h.MountainSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.BaseMountainRenderableSeries = u;
      },
      18790: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseOhlcRenderableSeries = void 0);
        const r = i(56744),
          s = i(98140),
          o = i(27970),
          a = i(51885),
          n = i(65052),
          l = i(6328),
          d = i(14023),
          h = i(33240),
          u = i(84392),
          c = i(14184),
          p = i(79961),
          g = i(20977),
          y = i(8535);
        class f extends p.BaseRenderableSeries {
          constructor(e, t) {
            var i;
            super(e, t),
              (this.dataPointWidthModeProperty =
                o.EDataPointWidthMode.Relative),
              (this.strokeUp =
                (null == t ? void 0 : t.strokeUp) ||
                c.SciChartSurfaceBase.DEFAULT_THEME.upWickColor),
              (this.strokeDown =
                (null == t ? void 0 : t.strokeDown) ||
                c.SciChartSurfaceBase.DEFAULT_THEME.downWickColor),
              (this.dataPointWidth =
                (null == t ? void 0 : t.dataPointWidth) || 0.5),
              (this.dataPointWidthMode =
                null !== (i = null == t ? void 0 : t.dataPointWidthMode) &&
                void 0 !== i
                  ? i
                  : this.dataPointWidthModeProperty),
              (this.strokeThickness =
                (null == t ? void 0 : t.strokeThickness) || 1),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.stroke === t.lineSeriesColor &&
              (this.stroke = e.lineSeriesColor),
              this.strokeUp === t.upWickColor &&
                (this.strokeUp = e.upWickColor),
              this.strokeDown === t.downWickColor &&
                (this.strokeDown = e.downWickColor);
          }
          get strokeUp() {
            return (0, u.stripAutoColor)(this.strokeUpProperty);
          }
          set strokeUp(e) {
            (this.strokeUpProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE_UP);
          }
          get strokeDown() {
            return (0, u.stripAutoColor)(this.strokeDownProperty);
          }
          set strokeDown(e) {
            (this.strokeDownProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.STROKE_DOWN);
          }
          get dataPointWidth() {
            return this.dataPointWidthProperty;
          }
          set dataPointWidth(e) {
            (this.dataPointWidthProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DATA_POINT_WIDTH);
          }
          get dataPointWidthMode() {
            return this.dataPointWidthModeProperty;
          }
          set dataPointWidthMode(e) {
            (this.dataPointWidthModeProperty = e),
              this.notifyPropertyChanged(g.PROPERTY.DATA_POINT_WIDTH_MODE);
          }
          notifyPropertyChanged(e) {
            if (
              (super.notifyPropertyChanged(e),
              e === g.PROPERTY.DATA_SERIES &&
                void 0 !== this.dataSeries &&
                this.dataSeries.type !== a.EDataSeriesType.Ohlc)
            )
              throw new Error(
                "DataSeries for Candlestick or Ohlc series must be type OhlcDataSeries"
              );
          }
          getXRange() {
            const e = super.getXRange(),
              t = this.dataSeries.count();
            if (t > 1) {
              const i = ((e.diff / (t - 1)) * this.dataPointWidth) / 2;
              return new s.NumberRange(e.min - i, e.max + i);
            }
            return e;
          }
          delete() {
            (this.resamplerHelper = (0, r.deleteSafe)(this.resamplerHelper)),
              (this.xyyTempPointSeries = (0, r.deleteSafe)(
                this.xyyTempPointSeries
              )),
              (this.pointSeries = (0, r.deleteSafe)(this.pointSeries)),
              super.delete();
          }
          getNativeOpenValues() {
            return this.dataSeries.getNativeOpenValues();
          }
          getNativeHighValues() {
            return this.dataSeries.getNativeHighValues();
          }
          getNativeLowValues() {
            return this.dataSeries.getNativeLowValues();
          }
          getNativeCloseValues() {
            return this.dataSeries.getNativeYValues();
          }
          resolveAutoColors(e, t, i) {
            if (this.strokeUpProperty.startsWith(u.AUTO_COLOR)) {
              const r = i.getStrokeColor(e, t, this.webAssemblyContext);
              this.strokeUp =
                u.AUTO_COLOR + this.adjustAutoColor("strokeUp", r);
            }
            const r = (e + Math.floor(t / 2)) % t;
            if (this.strokeDownProperty.startsWith(u.AUTO_COLOR)) {
              const e = i.getStrokeColor(r, t, this.webAssemblyContext);
              this.strokeDown =
                u.AUTO_COLOR + this.adjustAutoColor("strokeDown", e);
            }
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                dataPointWidth: this.dataPointWidth,
                dataPointWidthMode: this.dataPointWidthMode,
                strokeDown: this.strokeDown,
                strokeUp: this.strokeUp,
              };
            return Object.assign(t.options, i), t;
          }
          toPointSeries(e) {
            if (e) {
              this.xyyTempPointSeries
                ? (this.xyyTempPointSeries.xRange = e.xVisibleRange)
                : (this.xyyTempPointSeries = new d.XyyPointSeriesResampled(
                    this.webAssemblyContext,
                    e.xVisibleRange
                  )),
                this.pointSeries
                  ? (this.pointSeries.xRange = e.xVisibleRange)
                  : (this.pointSeries = new n.OhlcPointSeriesResampled(
                      this.webAssemblyContext,
                      e.xVisibleRange
                    ));
              const t = this.pointSeries,
                i = this.dataSeries,
                r = i.getNativeXValues(),
                s = i.getNativeOpenValues(),
                o = i.getNativeHighValues(),
                a = i.getNativeLowValues(),
                l = i.getNativeCloseValues(),
                u = i.getNativeIndexes(),
                c = e.clone({
                  resamplingMode:
                    e.resamplingMode === h.EResamplingMode.None
                      ? h.EResamplingMode.None
                      : h.EResamplingMode.Max,
                }),
                p = this.resamplerHelper.resampleIntoPointSeries(
                  this.webAssemblyContext,
                  c,
                  r,
                  o,
                  this.xyyTempPointSeries.intIndexes,
                  void 0,
                  this.xyyTempPointSeries.xValues,
                  t.highValues
                );
              (this.pointSeries.fifoStartIndex = p.OutputSplitIndex),
                this.xyyTempPointSeries.clearIntIndexes();
              const g = e.clone({
                resamplingMode:
                  e.resamplingMode === h.EResamplingMode.None
                    ? h.EResamplingMode.None
                    : h.EResamplingMode.Min,
              });
              this.resamplerHelper.resampleIntoPointSeries(
                this.webAssemblyContext,
                g,
                r,
                a,
                this.xyyTempPointSeries.intIndexes,
                void 0,
                this.xyyTempPointSeries.xValues,
                t.lowValues
              ),
                this.xyyTempPointSeries.clearIntIndexes(),
                this.xyyTempPointSeries.y1Values.clear();
              const y = e.clone({
                resamplingMode:
                  e.resamplingMode === h.EResamplingMode.None
                    ? h.EResamplingMode.None
                    : h.EResamplingMode.Min,
              });
              this.resamplerHelper.resampleIntoPointSeries(
                this.webAssemblyContext,
                y,
                r,
                u,
                t.intIndexes,
                void 0,
                this.xyyTempPointSeries.xValues,
                this.xyyTempPointSeries.y1Values
              );
              const f = t.intIndexes.size();
              this.xyyTempPointSeries.y1Values.clear();
              const v = t.intIndexes.get(3) - t.intIndexes.get(2) - 1;
              return (
                t.indexes.resizeFast(f + 1),
                this.resamplerHelper.copyValuesByIndexes(
                  t.intIndexes,
                  r,
                  s,
                  l,
                  f,
                  e.isCategoryAxis,
                  this.dataSeries.fifoSweeping,
                  t.indexes,
                  t.xValues,
                  t.openValues,
                  t.closeValues,
                  v
                ),
                t.clearIntIndexes(),
                t
              );
            }
            return new l.OhlcPointSeriesWrapped(this.dataSeries);
          }
          newHitTestProvider() {
            return new y.OhlcSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.BaseOhlcRenderableSeries = f;
      },
      79961: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getDelta = t.getDataPointWidth = t.BaseRenderableSeries = void 0);
        const r = i(45921),
          s = i(82229),
          o = i(55023),
          a = i(56744),
          n = i(3214),
          l = i(87459),
          d = i(10763),
          h = i(11043),
          u = i(2963),
          c = i(28436),
          p = i(30323),
          g = i(5337),
          y = i(73538),
          f = i(16185),
          v = i(24933),
          m = i(14883),
          S = i(84754),
          P = i(97041),
          C = i(50874),
          x = i(21780),
          b = i(19581),
          A = i(51885),
          T = i(32747),
          E = i(58564),
          R = i(88915),
          w = i(78644),
          D = i(33240),
          L = i(48570),
          M = i(84392),
          I = i(42241),
          O = i(85479),
          k = i(14184),
          _ = i(86127),
          V = i(54580),
          N = i(20977),
          F = i(54962),
          B = i(57318),
          H = i(29593),
          z = i(72469),
          Y = i(9073),
          G = i(27970);
        class X extends o.DeletableEntity {
          constructor(e, t) {
            var i, s, o, a, l, g, v, m, S, P, C, x, b, A, E, R, L, M;
            if (
              (super(),
              (this.rolloverModifierProps =
                new F.RolloverModifierRenderableSeriesProps(this)),
              (this.rolloverModifierProps1 =
                new F.RolloverModifierRenderableSeriesProps(this, !0)),
              (this.selected = new n.EventHandler()),
              (this.hovered = new n.EventHandler()),
              (this.isVisibleChanged = new n.EventHandler()),
              (this.animationQueue = []),
              (this.paletteProviderProperty =
                T.DefaultPaletteProvider.createEmpty()),
              (this.typeMap = new Map()),
              (this.opacityProperty = 1),
              (this.drawingProvidersProperty = []),
              (this.xAxisIdProperty = I.AxisCore.DEFAULT_AXIS_ID),
              (this.yAxisIdProperty = I.AxisCore.DEFAULT_AXIS_ID),
              (this.strokeThicknessProperty = 2),
              (this.strokeProperty =
                k.SciChartSurfaceBase.DEFAULT_THEME.lineSeriesColor),
              (this.drawNaNAsProperty = f.ELineDrawMode.DiscontinuousLine),
              (this.isVisibleProperty = !0),
              (this.isDigitalLineProperty = !1),
              (this.resamplingModeProperty = D.EResamplingMode.Auto),
              (this.resamplingPrecisionProperty = 0),
              (this.clipToYRangeProperty = !1),
              (this.yRangeModeProperty = Y.EYRangeMode.Drawn),
              (this.isStacked = !1),
              (this.webAssemblyContext = e),
              (this.id =
                null !== (i = null == t ? void 0 : t.id) && void 0 !== i
                  ? i
                  : (0, y.generateGuid)()),
              (this.dataSeriesDataChanged =
                this.dataSeriesDataChanged.bind(this)),
              (this.effectPropertyChanged =
                this.effectPropertyChanged.bind(this)),
              (this.invalidateParent = this.invalidateParent.bind(this)),
              (this.getDataPointWidth = this.getDataPointWidth.bind(this)),
              (this.updateAnimationProperties =
                this.updateAnimationProperties.bind(this)),
              (this.beforeAnimationStart =
                this.beforeAnimationStart.bind(this)),
              (this.afterAnimationComplete =
                this.afterAnimationComplete.bind(this)),
              (this.dataSeries =
                null !== (s = null == t ? void 0 : t.dataSeries) && void 0 !== s
                  ? s
                  : this.dataSeriesProperty),
              (null == t ? void 0 : t.pointMarker) &&
                ("drawSprite" in t.pointMarker ||
                  (t.pointMarker.type === p.EPointMarkerType.Custom
                    ? (t.pointMarker = (0, r.createType)(
                        h.EBaseType.PointMarker,
                        t.pointMarker.customType,
                        e,
                        t.pointMarker.options
                      ))
                    : (t.pointMarker = (0, r.createType)(
                        h.EBaseType.PointMarker,
                        t.pointMarker.type,
                        e,
                        t.pointMarker.options
                      )))),
              (this.pointMarkerProperty =
                null !== (o = null == t ? void 0 : t.pointMarker) &&
                void 0 !== o
                  ? o
                  : this.pointMarkerProperty),
              (this.strokeProperty =
                null !== (a = null == t ? void 0 : t.stroke) && void 0 !== a
                  ? a
                  : this.strokeProperty),
              (this.strokeThicknessProperty =
                null !== (l = null == t ? void 0 : t.strokeThickness) &&
                void 0 !== l
                  ? l
                  : this.strokeThicknessProperty),
              (this.opacityProperty =
                null !== (g = null == t ? void 0 : t.opacity) && void 0 !== g
                  ? g
                  : this.opacityProperty),
              (this.xAxisIdProperty =
                null !== (v = null == t ? void 0 : t.xAxisId) && void 0 !== v
                  ? v
                  : this.xAxisIdProperty),
              (this.yAxisIdProperty =
                null !== (m = null == t ? void 0 : t.yAxisId) && void 0 !== m
                  ? m
                  : this.yAxisIdProperty),
              (this.isVisibleProperty =
                null !== (S = null == t ? void 0 : t.isVisible) && void 0 !== S
                  ? S
                  : this.isVisibleProperty),
              (this.isDigitalLineProperty =
                null !== (P = null == t ? void 0 : t.isDigitalLine) &&
                void 0 !== P
                  ? P
                  : this.isDigitalLineProperty),
              (this.resamplingModeProperty =
                null !== (C = null == t ? void 0 : t.resamplingMode) &&
                void 0 !== C
                  ? C
                  : this.resamplingModeProperty),
              (this.resamplingPrecisionProperty =
                null !== (x = null == t ? void 0 : t.resamplingPrecision) &&
                void 0 !== x
                  ? x
                  : this.resamplingPrecisionProperty),
              (null == t ? void 0 : t.effect) &&
                ("getNativeEffect" in t.effect ||
                  (t.effect = (0, r.createType)(
                    h.EBaseType.ShaderEffect,
                    t.effect.type,
                    e,
                    t.effect.options
                  ))),
              (this.effectProperty = null == t ? void 0 : t.effect),
              (null == t ? void 0 : t.paletteProvider) &&
                ("onAttached" in t.paletteProvider ||
                  (t.paletteProvider.type === c.EPaletteProviderType.Custom
                    ? (t.paletteProvider = (0, r.createType)(
                        h.EBaseType.PaletteProvider,
                        t.paletteProvider.customType,
                        e,
                        t.paletteProvider.options
                      ))
                    : (t.paletteProvider = (0, r.createType)(
                        h.EBaseType.PaletteProvider,
                        t.paletteProvider.type,
                        e,
                        t.paletteProvider.options
                      )))),
              (this.paletteProviderProperty =
                null !== (b = null == t ? void 0 : t.paletteProvider) &&
                void 0 !== b
                  ? b
                  : this.paletteProviderProperty),
              (this.drawNaNAsProperty =
                null !== (A = null == t ? void 0 : t.drawNaNAs) && void 0 !== A
                  ? A
                  : this.drawNaNAsProperty),
              (this.hitTestProvider = this.newHitTestProvider()),
              (this.isSelected =
                null !== (E = null == t ? void 0 : t.isSelected) &&
                void 0 !== E &&
                E),
              (this.isHovered =
                null !== (R = null == t ? void 0 : t.isHovered) &&
                void 0 !== R &&
                R),
              (this.clipToYRangeProperty =
                null !== (L = null == t ? void 0 : t.clipToYRange) &&
                void 0 !== L
                  ? L
                  : this.clipToYRangeProperty),
              (this.yRangeModeProperty =
                null !== (M = null == t ? void 0 : t.yRangeMode) && void 0 !== M
                  ? M
                  : this.yRangeModeProperty),
              null == t ? void 0 : t.onIsVisibleChanged)
            )
              if ("string" == typeof t.onIsVisibleChanged) {
                this.typeMap.set("onIsVisibleChanged", t.onIsVisibleChanged);
                const e = (0, r.getFunction)(
                  h.EBaseType.OptionFunction,
                  t.onIsVisibleChanged
                );
                this.isVisibleChanged.subscribe((t) =>
                  e(t.sourceSeries, t.isVisible)
                );
              } else {
                const e = null == t ? void 0 : t.onIsVisibleChanged;
                this.isVisibleChanged.subscribe((t) =>
                  e(t.sourceSeries, t.isVisible)
                );
              }
            if (null == t ? void 0 : t.onSelectedChanged)
              if ("string" == typeof t.onSelectedChanged) {
                this.typeMap.set("onSelectedChanged", t.onSelectedChanged);
                const e = (0, r.getFunction)(
                  h.EBaseType.OptionFunction,
                  t.onSelectedChanged
                );
                this.selected.subscribe((t) => e(t.sourceSeries, t.isSelected));
              } else {
                const e = null == t ? void 0 : t.onSelectedChanged;
                this.selected.subscribe((t) => e(t.sourceSeries, t.isSelected));
              }
            if (null == t ? void 0 : t.onHoveredChanged)
              if ("string" == typeof t.onHoveredChanged) {
                this.typeMap.set("onHoveredChanged", t.onHoveredChanged);
                const e = (0, r.getFunction)(
                  h.EBaseType.OptionFunction,
                  t.onHoveredChanged
                );
                this.hovered.subscribe((t) => e(t.sourceSeries, t.hovered));
              } else {
                const e = null == t ? void 0 : t.onHoveredChanged;
                this.hovered.subscribe((t) => e(t.sourceSeries, t.hovered));
              }
            (null == t ? void 0 : t.animation) &&
              ("toJSON" in t.animation ||
                (t.animation.type === d.EAnimationType.Custom
                  ? (t.animation = (0, r.createType)(
                      h.EBaseType.Animation,
                      t.animation.customType,
                      e,
                      t.animation.options
                    ))
                  : (t.animation = (0, r.createType)(
                      h.EBaseType.Animation,
                      t.animation.type,
                      e,
                      t.animation.options
                    )))),
              (this.onDpiChanged = this.onDpiChanged.bind(this)),
              (this.resamplerHelper = new w.ExtremeResamplerHelper(e)),
              (null == t ? void 0 : t.dataLabelProvider) &&
                ("draw" in t.dataLabelProvider ||
                  (t.dataLabelProvider.type === u.EDataLabelProviderType.Custom
                    ? (t.dataLabelProvider = (0, r.createType)(
                        h.EBaseType.DataLabelProvider,
                        t.dataLabelProvider.customType,
                        e,
                        t.dataLabelProvider.options
                      ))
                    : (t.dataLabelProvider = (0, r.createType)(
                        h.EBaseType.DataLabelProvider,
                        t.dataLabelProvider.type,
                        e,
                        t.dataLabelProvider.options
                      )))),
              (this.dataLabelProviderProperty =
                null == t ? void 0 : t.dataLabelProvider),
              this.dataLabelProviderProperty &&
                this.dataLabelProviderProperty.onAttach(e, this);
          }
          applyTheme(e) {
            const t = this.parentSurface.previousThemeProvider;
            this.rolloverModifierProps.tooltipTextColor ===
              t.textAnnotationForeground &&
              (this.rolloverModifierProps.tooltipTextColor =
                e.textAnnotationForeground),
              this.rolloverModifierProps.tooltipColor ===
                t.textAnnotationBackground &&
                (this.rolloverModifierProps.tooltipColor =
                  e.textAnnotationBackground),
              this.rolloverModifierProps.markerColor ===
                t.textAnnotationBackground &&
                (this.rolloverModifierProps.markerColor =
                  e.textAnnotationBackground);
          }
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          set parentSurface(e) {
            (this.parentSurfaceProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.PARENT_SURFACE);
          }
          get drawingProviders() {
            return this.drawingProvidersProperty;
          }
          set drawingProviders(e) {
            (this.drawingProvidersProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.DRAWING_PROVIDERS);
          }
          get isSelected() {
            return this.isSelectedProperty;
          }
          set isSelected(e) {
            var t;
            this.valueChanged(this.isSelectedProperty, e) &&
              ((this.isSelectedProperty = e),
              null === (t = this.selected) ||
                void 0 === t ||
                t.raiseEvent(new H.SeriesSelectedArgs(this, e)),
              this.notifyPropertyChanged(N.PROPERTY.IS_SELECTED));
          }
          get isHovered() {
            return this.isHoveredProperty;
          }
          set isHovered(e) {
            var t;
            this.valueChanged(this.isHoveredProperty, e) &&
              ((this.isHoveredProperty = e),
              null === (t = this.hovered) ||
                void 0 === t ||
                t.raiseEvent(new B.SeriesHoveredArgs(this, e)),
              this.notifyPropertyChanged(N.PROPERTY.HOVERED));
          }
          get paletteProvider() {
            return this.paletteProviderProperty;
          }
          set paletteProvider(e) {
            this.setPaletteProvider(e);
          }
          get isDigitalLine() {
            return this.isDigitalLineProperty;
          }
          set isDigitalLine(e) {
            (this.isDigitalLineProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.IS_DIGITAL_LINE);
          }
          get isVisible() {
            return this.isVisibleProperty;
          }
          set isVisible(e) {
            var t;
            this.valueChanged(this.isVisibleProperty, e) &&
              ((this.isVisibleProperty = e),
              e ||
                (this.rolloverModifierProps.marker &&
                  this.rolloverModifierProps.tooltip &&
                  (this.rolloverModifierProps.marker.suspendInvalidate(),
                  this.rolloverModifierProps.tooltip.suspendInvalidate(),
                  (this.rolloverModifierProps.marker.isHidden = !0),
                  (this.rolloverModifierProps.tooltip.isHidden = !0),
                  (this.rolloverModifierProps.tooltip.x1 = void 0),
                  (this.rolloverModifierProps.tooltip.y1 = void 0)),
                this.type === g.ESeriesType.BandSeries &&
                  this.rolloverModifierProps1.marker &&
                  this.rolloverModifierProps1.tooltip &&
                  (this.rolloverModifierProps1.marker.suspendInvalidate(),
                  this.rolloverModifierProps1.tooltip.suspendInvalidate(),
                  (this.rolloverModifierProps1.marker.isHidden = !0),
                  (this.rolloverModifierProps1.tooltip.isHidden = !0),
                  (this.rolloverModifierProps1.tooltip.x1 = void 0),
                  (this.rolloverModifierProps1.tooltip.y1 = void 0))),
              null === (t = this.isVisibleChanged) ||
                void 0 === t ||
                t.raiseEvent(new z.SeriesVisibleChangedArgs(this, e)),
              this.notifyPropertyChanged(N.PROPERTY.IS_VISIBLE));
          }
          get pointMarker() {
            return this.pointMarkerProperty;
          }
          set pointMarker(e) {
            this.pointMarkerProperty &&
              (this.pointMarkerProperty.invalidateParentCallback = void 0),
              (this.pointMarkerProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.POINT_MARKER),
              this.pointMarkerProperty &&
                (this.pointMarkerProperty.invalidateParentCallback =
                  this.invalidateParent);
          }
          get drawNaNAs() {
            return this.drawNaNAsProperty;
          }
          set drawNaNAs(e) {
            (this.drawNaNAsProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.DRAW_NAN_AS);
          }
          get stroke() {
            return (0, M.stripAutoColor)(this.strokeProperty);
          }
          set stroke(e) {
            this.strokeProperty !== e &&
              ((this.strokeProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.STROKE));
          }
          get strokeThickness() {
            return this.strokeThicknessProperty;
          }
          set strokeThickness(e) {
            this.strokeThicknessProperty !== e &&
              ((this.strokeThicknessProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.STROKE_THICKNESS));
          }
          get opacity() {
            return this.opacityProperty;
          }
          set opacity(e) {
            this.opacityProperty !== e &&
              ((this.opacityProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.OPACITY));
          }
          get xAxisId() {
            return this.xAxisIdProperty;
          }
          set xAxisId(e) {
            (this.xAxisIdProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.XAXIS_ID);
          }
          get xAxis() {
            var e;
            return null === (e = this.parentSurface) || void 0 === e
              ? void 0
              : e.xAxes.asArray().find((e) => e.id === this.xAxisId);
          }
          get yAxis() {
            var e;
            return null === (e = this.parentSurface) || void 0 === e
              ? void 0
              : e.yAxes.asArray().find((e) => e.id === this.yAxisId);
          }
          get yAxisId() {
            return this.yAxisIdProperty;
          }
          set yAxisId(e) {
            (this.yAxisIdProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.YAXIS_ID);
          }
          get dataSeries() {
            return this.dataSeriesProperty;
          }
          set dataSeries(e) {
            var t, i, r;
            if (this.dataSeriesProperty) {
              const e =
                null === (t = this.parentSurface) || void 0 === t
                  ? void 0
                  : t.getXAxisById(this.xAxisId);
              e && e.isCategoryAxis && e.clearCoordCalcCache();
            }
            null === (i = this.dataSeriesProperty) ||
              void 0 === i ||
              i.dataChanged.unsubscribe(this.dataSeriesDataChanged),
              (this.dataSeriesProperty = e),
              null === (r = this.dataSeriesProperty) ||
                void 0 === r ||
                r.dataChanged.subscribe(this.dataSeriesDataChanged),
              this.notifyPropertyChanged(N.PROPERTY.DATA_SERIES);
          }
          get enableDrawingOptimisations() {
            return this.resamplingModeProperty !== D.EResamplingMode.None;
          }
          get effect() {
            return this.effectProperty;
          }
          set effect(e) {
            var t, i;
            null === (t = this.effectProperty) ||
              void 0 === t ||
              t.propertyChanged.unsubscribe(this.effectPropertyChanged),
              (this.effectProperty = e),
              null === (i = this.effectProperty) ||
                void 0 === i ||
                i.propertyChanged.subscribe(this.effectPropertyChanged),
              this.notifyPropertyChanged(N.PROPERTY.EFFECT);
          }
          get resamplingMode() {
            return this.resamplingModeProperty;
          }
          set resamplingMode(e) {
            (this.resamplingModeProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.RESAMPLING_MODE);
          }
          get resamplingPrecision() {
            return this.resamplingPrecisionProperty;
          }
          set resamplingPrecision(e) {
            (this.resamplingPrecisionProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.RESAMPLING_PRECISION);
          }
          get clipToYRange() {
            return this.clipToYRangeProperty;
          }
          set clipToYRange(e) {
            this.clipToYRangeProperty !== e &&
              ((this.clipToYRangeProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.CLIPTOYRANGE));
          }
          get yRangeMode() {
            return this.yRangeModeProperty;
          }
          set yRangeMode(e) {
            this.yRangeModeProperty !== e &&
              ((this.yRangeModeProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.YRANGEMODE));
          }
          get isSpline() {
            return [
              g.ESeriesType.SplineBandSeries,
              g.ESeriesType.SplineLineSeries,
              g.ESeriesType.SplineMountainSeries,
            ].includes(this.type);
          }
          draw(e, t) {
            var i, r;
            if (
              ((this.currentRenderPassData = t),
              null === (i = this.hitTestProvider) ||
                void 0 === i ||
                i.update(t),
              this.canDraw)
            ) {
              const i = e.getNativeContext(),
                s =
                  null === (r = this.parentSurface) || void 0 === r
                    ? void 0
                    : r.seriesViewRect;
              try {
                if ((e.pushShaderEffect(this.effect), this.clipToYRange)) {
                  const { offset: e, viewportDimension: r } =
                      t.xCoordinateCalculator,
                    { offset: o, viewportDimension: a } =
                      t.yCoordinateCalculator;
                  if (t.isVerticalChart) {
                    const t = new l.Rect(s.x + o, s.y + e, a, r);
                    i.SetClipRect(t.x, t.y, t.width, t.height);
                  } else {
                    const t = new l.Rect(s.x + e, s.y + o, r, a);
                    i.SetClipRect(t.x, t.y, t.width, t.height);
                  }
                }
                this.drawingProviders.forEach((i) => {
                  if (
                    this.renderDataTransform &&
                    this.renderDataTransform.drawingProviders.includes(i)
                  ) {
                    const r = this.renderDataTransform.runTransform(t);
                    i.draw(e, r);
                  } else i.draw(e, t);
                });
              } finally {
                this.clipToYRange && i.SetClipRect(s.x, s.y, s.width, s.height),
                  e.popShaderEffect();
              }
              this.dataLabelProvider &&
                this.dataLabelProvider.generateDataLabels(e, t);
            }
          }
          delete() {
            this.drawingProviders.forEach((e) => e.delete()),
              (this.drawingProviders = []),
              (this.dataSeries = (0, a.deleteSafe)(this.dataSeries)),
              (this.effect = (0, a.deleteSafe)(this.effect)),
              (this.pointMarker = (0, a.deleteSafe)(this.pointMarker)),
              (this.resamplerHelper = (0, a.deleteSafe)(this.resamplerHelper)),
              (this.pointSeries = (0, a.deleteSafe)(this.pointSeries)),
              (this.dataLabelProviderProperty = (0, a.deleteSafe)(
                this.dataLabelProvider
              )),
              (this.renderDataTransformProperty = (0, a.deleteSafe)(
                this.renderDataTransform
              ));
          }
          getXRange() {
            return this.dataSeries.getXRange(A.EDataSeriesValueType.Default);
          }
          getYRange(e, t = !1) {
            const i = this.isRunningDataAnimation
              ? A.EDataSeriesValueType.FinalAnimationValues
              : A.EDataSeriesValueType.Default;
            return this.renderDataTransform &&
              this.renderDataTransform.useForYRange
              ? (this.updateTransformedValues(i),
                (0, v.getWindowedYRange)(
                  this.webAssemblyContext,
                  this.transformedRenderPassData.pointSeries.xValues,
                  this.transformedRenderPassData.pointSeries.yValues,
                  e,
                  !0,
                  t,
                  this.dataSeries.dataDistributionCalculator.isSortedAscending
                ))
              : this.dataSeries.getWindowedYRange(e, !0, t, i, this.yRangeMode);
          }
          notifyPropertyChanged(e) {
            this.drawingProviders.forEach((t) => t.onSeriesPropertyChange(e)),
              this.invalidateParent();
          }
          getDataPointWidth(e, i, r) {
            const s = this.dataSeries.getNativeXValues(),
              o = e.viewportDimension,
              a = e.isCategoryCoordinateCalculator;
            if (r === G.EDataPointWidthMode.Range) {
              const t = e.visibleMax - e.visibleMin;
              return (e.viewportDimension / t) * i;
            }
            return r === G.EDataPointWidthMode.Absolute
              ? i
              : (0, t.getDataPointWidth)(
                  s,
                  e,
                  o,
                  i,
                  a,
                  this.webAssemblyContext
                );
          }
          onDetach() {
            (this.invalidateParentCallback = void 0),
              (this.parentSurface = void 0),
              this.drawingProviders.forEach((e) => e.onDetachSeries()),
              this.rolloverModifierProps.setInvalidateParentCallback(void 0);
          }
          onAttach(e) {
            if (((this.parentSurface = e), this.invalidateParentCallback))
              throw new Error(
                "Invalid operation in sciChartSurface.attachSeries, this series has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            (this.invalidateParentCallback = e.invalidateElement),
              this.drawingProviders.forEach((e) => e.onAttachSeries()),
              this.rolloverModifierProps.setInvalidateParentCallback(
                e.invalidateElement
              );
          }
          hasStrokePaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overrideStrokeArgb);
          }
          hasFillPaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overrideFillArgb);
          }
          hasPointMarkerPaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overridePointMarkerArgb);
          }
          hasDataSeriesValues() {
            var e;
            return null === (e = this.dataSeries) || void 0 === e
              ? void 0
              : e.hasValues;
          }
          hasDataSeries() {
            return !!this.dataSeries;
          }
          getDataSeriesValuesCount() {
            return this.dataSeries.count();
          }
          getDataSeriesName() {
            var e;
            return null === (e = this.dataSeries) || void 0 === e
              ? void 0
              : e.dataSeriesName;
          }
          getNativeXValues() {
            return this.dataSeries.getNativeXValues();
          }
          getNativeYValues() {
            return this.dataSeries.getNativeYValues();
          }
          checkIsOutOfDataRange(e, t) {
            const i = this.getDataSeriesValuesCount(),
              r =
                this.xAxis.getCurrentCoordinateCalculator()
                  .isCategoryCoordinateCalculator,
              s = r ? 0 : this.getNativeXValues().get(0),
              o = r ? i - 1 : this.getNativeXValues().get(i - 1);
            return e < s || e > o;
          }
          pushPalettedColors(e, t) {
            t.palettedColors.push_back(e);
          }
          getSeriesInfo(e) {
            switch (e.dataSeriesType) {
              case A.EDataSeriesType.Ohlc:
                return new P.OhlcSeriesInfo(this, e);
              case A.EDataSeriesType.Xyy:
                return new x.XyySeriesInfo(this, e);
              case A.EDataSeriesType.Xyz:
                return new b.XyzSeriesInfo(this, e);
              case A.EDataSeriesType.HeatmapUniform:
              case A.EDataSeriesType.HeatmapNonUniform:
                return new m.HeatmapSeriesInfo(this, e);
              case A.EDataSeriesType.Hlc:
                return new S.HlcSeriesInfo(this, e);
              default:
                return new C.XySeriesInfo(this, e);
            }
          }
          onDpiChanged(e) {
            var t, i;
            null === (t = this.drawingProviders) ||
              void 0 === t ||
              t.forEach((t) => {
                t.onDpiChanged(e);
              }),
              null === (i = this.pointMarker) ||
                void 0 === i ||
                i.onDpiChanged(e);
          }
          toJSON(e = !1) {
            var t, i, r, s, o, a, n, l, d, h, u, c;
            let p;
            if (this.paletteProvider) {
              if (!("toJSON" in this.paletteProvider))
                throw new Error(
                  "Series contains a palletProvider.  This must implement toJSON to be correctly serialized"
                );
              p = this.paletteProvider.toJSON();
            }
            const g = {
                id: this.id,
                drawNaNAs: this.drawNaNAs,
                effect:
                  null === (t = this.effect) || void 0 === t
                    ? void 0
                    : t.toJSON(),
                isDigitalLine: this.isDigitalLine,
                isHovered: this.isHovered,
                isSelected: this.isSelected,
                isVisible: this.isVisible,
                opacity: this.opacity,
                paletteProvider: p,
                pointMarker:
                  null === (i = this.pointMarker) || void 0 === i
                    ? void 0
                    : i.toJSON(),
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
                xAxisId: this.xAxisId,
                yAxisId: this.yAxisId,
                animation: this.animation,
                resamplingMode: this.resamplingMode,
                resamplingPrecision: this.resamplingPrecision,
                clipToYRange: this.clipToYRange,
                yRangeMode: this.yRangeMode,
                onIsVisibleChanged: this.typeMap.get("onIsVisibleChanged"),
                onSelectedChanged: this.typeMap.get("onSelectedChanged"),
                onHoveredChanged: this.typeMap.get("onHoveredChanged"),
                dataLabelProvider:
                  null === (r = this.dataLabelProvider) || void 0 === r
                    ? void 0
                    : r.toJSON(),
              },
              y =
                null === (s = this.dataSeries) || void 0 === s
                  ? void 0
                  : s.toJSON(e),
              f = null == y ? void 0 : y.options;
            return (null === (o = this.dataSeries) || void 0 === o
              ? void 0
              : o.type) === A.EDataSeriesType.Xy
              ? { type: this.type, options: g, xyData: f }
              : (null === (a = this.dataSeries) || void 0 === a
                  ? void 0
                  : a.type) === A.EDataSeriesType.Xyy
              ? { type: this.type, options: g, xyyData: f }
              : (null === (n = this.dataSeries) || void 0 === n
                  ? void 0
                  : n.type) === A.EDataSeriesType.Xyz
              ? { type: this.type, options: g, xyzData: f }
              : (null === (l = this.dataSeries) || void 0 === l
                  ? void 0
                  : l.type) === A.EDataSeriesType.Ohlc
              ? { type: this.type, options: g, ohlcData: f }
              : (null === (d = this.dataSeries) || void 0 === d
                  ? void 0
                  : d.type) === A.EDataSeriesType.Hlc
              ? { type: this.type, options: g, hlcData: f }
              : (null === (h = this.dataSeries) || void 0 === h
                  ? void 0
                  : h.type) === A.EDataSeriesType.XyText
              ? { type: this.type, options: g, xyTextData: f }
              : (null === (u = this.dataSeries) || void 0 === u
                  ? void 0
                  : u.type) === A.EDataSeriesType.HeatmapUniform ||
                (null === (c = this.dataSeries) || void 0 === c
                  ? void 0
                  : c.type) === A.EDataSeriesType.HeatmapNonUniform
              ? { type: this.type, options: g, heatmapData: f }
              : { type: this.type, options: g };
          }
          enqueueAnimation(e) {
            this.animationQueue.push(e), this.invalidateParent();
          }
          runAnimation(e) {
            var t;
            (this.animationQueue = []),
              null === (t = this.animationFSM) ||
                void 0 === t ||
                t.toCompleted(),
              this.enqueueAnimation(e);
          }
          set animation(e) {
            e && this.animationQueue.push(e), this.invalidateParent();
          }
          get isRunningAnimation() {
            return V.animationHelpers.checkIsAnimationRunning(
              this.animationQueue,
              this.animationFSM
            );
          }
          get isRunningDataAnimation() {
            return (
              this.isRunningAnimation &&
              this.animationFSM &&
              (this.animationFSM.animation.isDataSeriesAnimation ||
                this.animationFSM.animation.isOnStartAnimation)
            );
          }
          onAnimate(e) {
            var t;
            if (
              !this.animationFSM ||
              (null === (t = this.animationFSM) || void 0 === t
                ? void 0
                : t.is([s.EAnimationState.Completed]))
            )
              if (this.animationQueue.length >= 1) {
                const e = this.animationQueue.shift();
                this.animationFSM = new s.SeriesAnimationFiniteStateMachine(
                  e,
                  this
                );
              } else this.animationFSM = void 0;
            this.animationFSM &&
              (this.dataSeries.xInitialAnimationValues ||
                this.dataSeries.createAnimationVectors(),
              V.animationHelpers.animationUpdate(
                this.animationFSM,
                e,
                this.beforeAnimationStart,
                this.afterAnimationComplete,
                this.updateAnimationProperties
              ));
          }
          toPointSeries(e) {
            if (e) {
              this.pointSeries
                ? (this.pointSeries.xRange = e.xVisibleRange)
                : (this.pointSeries = new E.XyPointSeriesResampled(
                    this.webAssemblyContext,
                    e.xVisibleRange
                  ));
              const t = this.resamplerHelper.resampleIntoPointSeries(
                this.webAssemblyContext,
                e,
                this.dataSeries.getNativeXValues(),
                this.dataSeries.getNativeYValues(),
                this.pointSeries.intIndexes,
                this.pointSeries.indexes,
                this.pointSeries.xValues,
                this.pointSeries.yValues,
                !1
              );
              return (
                (this.pointSeries.fifoStartIndex = t.OutputSplitIndex),
                this.pointSeries.clearIntIndexes(),
                this.pointSeries
              );
            }
            return new R.XyPointSeriesWrapped(this.dataSeries);
          }
          getIndicesRange(e, t = !1) {
            var i;
            return null === (i = this.dataSeries) || void 0 === i
              ? void 0
              : i.getIndicesRange(e, t);
          }
          getCurrentRenderPassData() {
            return this.currentRenderPassData;
          }
          get supportsResampling() {
            return (
              ![
                g.ESeriesType.UniformContoursSeries,
                g.ESeriesType.UniformHeatmapSeries,
                g.ESeriesType.NonUniformHeatmapSeries,
                g.ESeriesType.BubbleSeries,
                g.ESeriesType.ErrorBarsSeries,
              ].includes(this.type) &&
              O.SciChartDefaults.enableResampling &&
              this.enableDrawingOptimisations &&
              !this.isStacked &&
              this.dataSeries &&
              this.dataSeries.count() > 0 &&
              (this.dataSeries.dataDistributionCalculator.isSortedAscending ||
                this.xAxis.isCategoryAxis)
            );
          }
          needsResampling(e) {
            return this.resamplerHelper.needsResampling(
              e,
              this.getNativeXValues()
            );
          }
          get dataLabelProvider() {
            return this.dataLabelProviderProperty;
          }
          set dataLabelProvider(e) {
            (this.dataLabelProviderProperty = e),
              e.onAttach(this.webAssemblyContext, this),
              this.notifyPropertyChanged(N.PROPERTY.SERIES_TEXT_PROVIDER);
          }
          get renderDataTransform() {
            return this.renderDataTransformProperty;
          }
          set renderDataTransform(e) {
            if (e.parentSeries !== this)
              throw new Error(
                "renderDataTransform can only be added to the series it was created with"
              );
            (this.renderDataTransformProperty = e),
              this.notifyPropertyChanged(N.PROPERTY.SERIES_TEXT_PROVIDER);
          }
          resolveAutoColors(e, t, i) {
            if (this.strokeProperty.startsWith(M.AUTO_COLOR)) {
              const i = this.parentSurface.themeProvider.getStrokeColor(
                e,
                t,
                this.webAssemblyContext
              );
              this.stroke = M.AUTO_COLOR + this.adjustAutoColor("stroke", i);
            }
            this.pointMarker && this.pointMarker.resolveAutoColors(e, t, i),
              this.dataLabelProvider &&
                this.dataLabelProvider.resolveAutoColors(e, t, i);
          }
          adjustAutoColor(e, t) {
            return t;
          }
          updateTransformedValues(e) {
            this.dataSeries &&
              this.parentSurface &&
              (this.currentRenderPassData ||
                (this.currentRenderPassData = new L.RenderPassData(
                  this.getIndicesRange(
                    this.xAxis.visibleRange,
                    this.xAxis.isCategoryAxis
                  ),
                  this.xAxis.getCurrentCoordinateCalculator,
                  this.yAxis.getCurrentCoordinateCalculator,
                  this.xAxis.isVerticalChart,
                  new R.XyPointSeriesWrapped(this.dataSeries, void 0, e)
                )),
              (this.transformedRenderPassData =
                this.renderDataTransform.runTransform(
                  this.currentRenderPassData
                )));
          }
          setAnimationVectors(e) {
            const t = this.dataSeries;
            e.isOnStartAnimation
              ? t.setFinalAnimationVectors(t)
              : e.isDataSeriesAnimation &&
                (t.setInitialAnimationVectors(t),
                t.setFinalAnimationVectors(e.dataSeries),
                t.validateAnimationVectors());
          }
          beforeAnimationStart() {
            var e;
            const { animation: t } = this.animationFSM;
            this.setAnimationVectors(t);
            const i =
              null === (e = null == t ? void 0 : t.styles) || void 0 === e
                ? void 0
                : e.pointMarker;
            i &&
              (this.pointMarker = V.animationHelpers.createPointMarker(
                this.webAssemblyContext,
                i
              ));
          }
          afterAnimationComplete() {
            if (this.dataSeries) {
              const e = this.dataSeries;
              e.setInitialAnimationVectors(void 0),
                e.setFinalAnimationVectors(void 0);
            }
          }
          updateAnimationProperties(e, t) {
            const { animation: i } = t;
            i.updateSeriesProperties(
              this,
              t.initialStyles,
              t.animationProgress
            );
            const r = this.dataSeries;
            r &&
              (r.updateAnimationProperties(e, i),
              (this.currentRenderPassData = void 0)),
              this.renderDataTransform &&
                (this.renderDataTransform.requiresTransform = !0),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          dataSeriesDataChanged(e) {
            this.renderDataTransform &&
              this.renderDataTransform.onDataChange(e),
              this.invalidateParent();
          }
          valueChanged(e, t) {
            return e !== t;
          }
          setPaletteProvider(e) {
            var t, i;
            (null === (t = this.paletteProviderProperty) || void 0 === t
              ? void 0
              : t.onDetached) && this.paletteProviderProperty.onDetached(),
              (this.paletteProviderProperty = e),
              (null === (i = this.paletteProviderProperty) || void 0 === i
                ? void 0
                : i.onAttached) &&
                this.paletteProviderProperty.onAttached(this),
              this.notifyPropertyChanged(N.PROPERTY.PALETTE_PROVIDER);
          }
          invalidateParent() {
            this.invalidateParentCallback && this.invalidateParentCallback();
          }
          effectPropertyChanged() {
            this.invalidateParent();
          }
          get canDraw() {
            return V.animationHelpers.checkCanDraw(this.animationFSM);
          }
        }
        (t.BaseRenderableSeries = X),
          (t.getDataPointWidth = (e, t, i, r, s, o) => {
            if (r < 0 || r > 1)
              throw new Error(
                "WidthFraction should be between 0.0 and 1.0 inclusive"
              );
            const n = e.size();
            let l = i;
            const d = n;
            if (d > 1) {
              let i = Number.MIN_VALUE,
                r = Number.MAX_VALUE;
              if (s) (i = t.getCoordinate(n - 1)), (r = t.getCoordinate(0));
              else {
                let s;
                try {
                  (s = o.NumberUtil.MinMax(e)), (r = s.minD), (i = s.maxD);
                } finally {
                  (0, a.deleteSafe)(s);
                }
                (i = t.getCoordinate(i)), (r = t.getCoordinate(r));
              }
              l = Math.abs(i - r) / (d - 1);
            } else 1 === d && (l = Math.min(l, 2 * t.getCoordinate(e.get(0))));
            let h = Math.floor(l * r);
            return h % 2 != 0 && (h -= 1), h <= 1 && (h = 1), h;
          }),
          (t.getDelta = ({ pointSize: e, areaSize: t, range: i }) => {
            if (0 === t) return 0;
            const r = t / (t - e * _.DpiHelper.PIXEL_RATIO);
            return (Math.abs(i.diff) * (r - 1)) / 2;
          });
      },
      35246: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseStackedCollection = void 0);
        const r = i(82229),
          s = (i(55023), i(56744)),
          o = i(98140),
          a = i(37796),
          n = i(26361),
          l = i(9073),
          d = i(73538),
          h = (i(27307), i(24933)),
          u = i(42241),
          c = i(54580),
          p = i(20977);
        class g extends a.ObservableArray {
          constructor(e, t) {
            var i, r, s, o, a;
            super(),
              (this.id = (0, d.generateGuid)()),
              (this.isStacked = !0),
              (this.supportsResampling = !1),
              (this.isSpline = !1),
              (this.enableDrawingOptimisations = !0),
              (this.isAccumulatedVectorDirty = !0),
              (this.firstAnimationRender = !1),
              (this.isVisibleProperty = !0),
              (this.xAxisIdProperty = u.AxisCore.DEFAULT_AXIS_ID),
              (this.yAxisIdProperty = u.AxisCore.DEFAULT_AXIS_ID),
              (this.isOneHundredPercentProperty = !1),
              (this.animationQueue = []),
              (this.yRangeModeProperty = l.EYRangeMode.Drawn),
              (this.webAssemblyContext = e),
              (this.isVisibleProperty =
                null !== (i = null == t ? void 0 : t.isVisible) && void 0 !== i
                  ? i
                  : this.isVisibleProperty),
              (this.xAxisIdProperty =
                null !== (r = null == t ? void 0 : t.xAxisId) && void 0 !== r
                  ? r
                  : this.xAxisIdProperty),
              (this.yAxisIdProperty =
                null !== (s = null == t ? void 0 : t.yAxisId) && void 0 !== s
                  ? s
                  : this.yAxisIdProperty),
              (this.isOneHundredPercentProperty =
                null !== (o = null == t ? void 0 : t.isOneHundredPercent) &&
                void 0 !== o
                  ? o
                  : this.isOneHundredPercentProperty),
              (this.yRangeModeProperty =
                null !== (a = null == t ? void 0 : t.yRangeMode) && void 0 !== a
                  ? a
                  : this.yRangeModeProperty),
              (this.updateAnimationProperties =
                this.updateAnimationProperties.bind(this)),
              (this.notifyPropertyChanged =
                this.notifyPropertyChanged.bind(this)),
              (this.getParentSurface = this.getParentSurface.bind(this)),
              (this.beforeAnimationStart =
                this.beforeAnimationStart.bind(this)),
              (this.afterAnimationComplete =
                this.afterAnimationComplete.bind(this)),
              (this.updateAnimationProperties =
                this.updateAnimationProperties.bind(this)),
              (this.accumulatedValues0 =
                new this.webAssemblyContext.SCRTDoubleVector()),
              (this.accumulatedFinalAnimationValues0 =
                new this.webAssemblyContext.SCRTDoubleVector());
          }
          get isVisibleChanged() {
            throw new Error(
              "getting visibleChanged event is not supported for BaseStackedCollection"
            );
          }
          get selected() {
            throw new Error(
              "getting selected event is not supported for BaseStackedCollection"
            );
          }
          get hovered() {
            throw new Error(
              "getting hovered event is not supported for BaseStackedCollection"
            );
          }
          get isSelected() {
            return !1;
          }
          set isSelected(e) {
            throw new Error(
              "Setting isSelected is not supported for BaseStackedCollection"
            );
          }
          get isHovered() {
            return !1;
          }
          set isHovered(e) {
            throw new Error(
              "Setting isHovered is not supported for BaseStackedCollection"
            );
          }
          get isDigitalLine() {
            throw new Error(
              "Setting or getting isDigitalLine is not supported for BaseStackedCollection"
            );
          }
          set isDigitalLine(e) {
            throw new Error(
              "Setting or getting isDigitalLine is not supported for BaseStackedCollection"
            );
          }
          get isVisible() {
            return this.isVisibleProperty;
          }
          set isVisible(e) {
            (this.isVisibleProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.IS_VISIBLE);
          }
          get xAxis() {
            return this.parentSurface.xAxes
              .asArray()
              .find((e) => e.id === this.xAxisId);
          }
          get xAxisId() {
            return this.xAxisIdProperty;
          }
          set xAxisId(e) {
            (this.xAxisIdProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.XAXIS_ID);
          }
          get yAxis() {
            return this.parentSurface.yAxes
              .asArray()
              .find((e) => e.id === this.yAxisId);
          }
          get yAxisId() {
            return this.yAxisIdProperty;
          }
          set yAxisId(e) {
            (this.yAxisIdProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.YAXIS_ID);
          }
          get isOneHundredPercent() {
            return this.isOneHundredPercentProperty;
          }
          set isOneHundredPercent(e) {
            (this.isOneHundredPercentProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.IS_ONE_HUNDRED_PERCENT);
          }
          get yRangeMode() {
            return this.yRangeModeProperty;
          }
          set yRangeMode(e) {
            this.yRangeModeProperty !== e &&
              ((this.yRangeModeProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.YRANGEMODE));
          }
          get dataSeries() {
            throw Error(
              "dataSeries property is not supported for BaseStackedCollection"
            );
          }
          set dataSeries(e) {
            throw Error(
              "dataSeries property is not supported for BaseStackedCollection"
            );
          }
          get drawNaNAs() {
            throw Error(
              "drawNaNAs property is not supported for BaseStackedCollection"
            );
          }
          set drawNaNAs(e) {
            throw Error(
              "drawNaNAs property is not supported for BaseStackedCollection"
            );
          }
          get drawingProviders() {
            throw Error(
              "drawingProviders property is not supported for BaseStackedCollection"
            );
          }
          set drawingProviders(e) {
            throw Error(
              "drawingProviders property is not supported for BaseStackedCollection"
            );
          }
          get hitTestProvider() {
            throw Error(
              "hitTestProvider property is not supported for BaseStackedCollection, call hitTestProvider on BaseStackedRenderableSeries instead"
            );
          }
          set hitTestProvider(e) {
            throw Error(
              "hitTestProvider property is not supported for BaseStackedCollection, call hitTestProvider on BaseStackedRenderableSeries instead"
            );
          }
          get paletteProvider() {
            throw Error(
              "paletteProvider property is not supported for BaseStackedCollection"
            );
          }
          set paletteProvider(e) {
            throw Error(
              "paletteProvider property is not supported for BaseStackedCollection"
            );
          }
          get pointMarker() {
            throw Error(
              "pointMarker property is not supported for BaseStackedCollection"
            );
          }
          set pointMarker(e) {
            throw Error(
              "pointMarker property is not supported for BaseStackedCollection"
            );
          }
          get rolloverModifierProps() {
            throw Error(
              "rolloverModifierProps property is not supported for BaseStackedCollection"
            );
          }
          set rolloverModifierProps(e) {
            throw Error(
              "rolloverModifierProps property is not supported for BaseStackedCollection"
            );
          }
          get stroke() {
            throw Error(
              "stroke property is not supported for BaseStackedCollection"
            );
          }
          set stroke(e) {
            throw Error(
              "stroke property is not supported for BaseStackedCollection"
            );
          }
          get strokeThickness() {
            throw Error(
              "strokeThickness property is not supported for BaseStackedCollection"
            );
          }
          set strokeThickness(e) {
            throw Error(
              "strokeThickness property is not supported for BaseStackedCollection"
            );
          }
          get effect() {
            throw Error(
              "effect property is not supported for BaseStackedCollection"
            );
          }
          set effect(e) {
            throw Error(
              "effect property is not supported for BaseStackedCollection"
            );
          }
          get opacity() {
            throw Error(
              "opacity property is not supported for BaseStackedCollection"
            );
          }
          set opacity(e) {
            throw Error(
              "effect property is not supported for BaseStackedCollection"
            );
          }
          set rolloverModifierProps1(e) {
            throw Error(
              "rolloverModifierProps1() method is not supported for BaseStackedCollection"
            );
          }
          get rolloverModifierProps1() {
            throw Error(
              "rolloverModifierProps1() method is not supported for BaseStackedCollection"
            );
          }
          get resamplingMode() {
            throw Error(
              "resamplingMode property is not supported for BaseStackedCollection"
            );
          }
          set resamplingMode(e) {
            throw Error(
              "resamplingMode property is not supported for BaseStackedCollection"
            );
          }
          get resamplingPrecision() {
            throw Error(
              "resamplingPrecision property is not supported for BaseStackedCollection"
            );
          }
          set resamplingPrecision(e) {
            throw Error(
              "resamplingPrecision property is not supported for BaseStackedCollection"
            );
          }
          setAccumulatedValuesDirty() {
            this.isAccumulatedVectorDirty = !0;
          }
          getIndicesRange(e) {
            throw Error(
              "getIndicesRange() method is not supported for BaseStackedCollection"
            );
          }
          get canDraw() {
            return c.animationHelpers.checkCanDraw(this.animationFSM);
          }
          pushPalettedColors(e, t) {
            throw new Error("Method not implemented.");
          }
          getSeriesInfo(e) {
            throw new Error("Method not implemented.");
          }
          applyTheme(e) {
            this.asArray().forEach((t) => {
              t.applyTheme(e);
            });
          }
          delete() {
            (this.accumulatedValues0 = (0, s.deleteSafe)(
              this.accumulatedValues0
            )),
              (this.accumulatedFinalAnimationValues0 = (0, s.deleteSafe)(
                this.accumulatedFinalAnimationValues0
              )),
              (this.dataLabelProviderProperty = (0, s.deleteSafe)(
                this.dataLabelProvider
              )),
              this.asArray().forEach((e) => {
                e.delete();
              });
          }
          notifyPropertyChanged(e) {
            this.invalidateParent();
          }
          onDpiChanged(e) {
            this.asArray().forEach((t) => t.onDpiChanged(e));
          }
          getBaseXValues() {
            return [];
          }
          getDataSeriesName() {
            return "Stacked Collection";
          }
          getDataSeriesValuesCount() {
            if (this.getNativeXValues()) return this.getNativeXValues().size();
          }
          getNativeXValues() {
            var e;
            if (0 !== this.size())
              return null === (e = this.get(0).dataSeries) || void 0 === e
                ? void 0
                : e.getNativeXValues();
          }
          getYRange(e, t) {
            if (!this.isEnoughDataToDraw()) return new o.NumberRange();
            let i;
            return (
              this.getVisibleSeries().forEach((r) => {
                if (
                  r.accumulatedValues.size() === this.getNativeXValues().size()
                ) {
                  const s = (0, h.getWindowedYRange)(
                    this.webAssemblyContext,
                    this.getNativeXValues(),
                    r.accumulatedValues,
                    e,
                    !0,
                    t,
                    !0,
                    this.yRangeMode === l.EYRangeMode.Visible
                      ? n.ESearchMode.RoundUp
                      : n.ESearchMode.RoundDown,
                    this.yRangeMode === l.EYRangeMode.Visible
                      ? n.ESearchMode.RoundDown
                      : n.ESearchMode.RoundUp
                  );
                  s && (i = i ? i.union(s) : s);
                }
              }),
              i || new o.NumberRange()
            );
          }
          hasDataSeries() {
            return !!this.getNativeXValues();
          }
          hasStrokePaletteProvider() {
            return !1;
          }
          hasFillPaletteProvider() {
            return !1;
          }
          hasPointMarkerPaletteProvider() {
            return !1;
          }
          onAttach(e) {
            if (((this.parentSurface = e), this.invalidateParentCallback))
              throw new Error(
                "Invalid operation in sciChartSurface.attachSeries, this series has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            this.invalidateParentCallback = e.invalidateElement;
          }
          onDetach() {
            (this.invalidateParentCallback = void 0),
              (this.parentSurface = void 0);
          }
          getVisibleSeries() {
            return this.asArray().filter((e) => e.isVisible);
          }
          enqueueAnimation(e) {
            this.animationQueue.push(e), this.invalidateParent();
          }
          runAnimation(e) {
            (this.animationQueue = []),
              this.animationFSM.toCompleted(),
              this.afterAnimationComplete();
          }
          set animation(e) {
            e && this.animationQueue.push(e), this.invalidateParent();
          }
          get isRunningAnimation() {
            return (
              !!c.animationHelpers.checkIsAnimationRunning(
                this.animationQueue,
                this.animationFSM
              ) || !!this.getVisibleSeries().some((e) => e.isRunningAnimation)
            );
          }
          onAnimate(e) {
            var t;
            if (
              !this.animationFSM ||
              (null === (t = this.animationFSM) || void 0 === t
                ? void 0
                : t.is([r.EAnimationState.Completed]))
            )
              if (this.animationQueue.length >= 1) {
                const e = this.animationQueue.shift();
                this.animationFSM = new r.SeriesAnimationFiniteStateMachine(
                  e,
                  void 0
                );
              } else this.animationFSM = void 0;
            this.getVisibleSeries().forEach((t) => {
              t.isRunningAnimation && t.onAnimate(e);
            }),
              this.animationFSM &&
                c.animationHelpers.animationUpdate(
                  this.animationFSM,
                  e,
                  this.beforeAnimationStart,
                  this.afterAnimationComplete,
                  this.updateAnimationProperties
                );
          }
          checkIsOutOfDataRange(e, t) {
            throw Error(
              "checkIsOutOfDataRange() method is not supported for BaseStackedCollection"
            );
          }
          toPointSeries(e) {}
          getCurrentRenderPassData() {
            throw Error(
              "getCurrentRenderPassData method is not supported for BaseStackedCollection"
            );
          }
          get dataLabelProvider() {
            return this.dataLabelProviderProperty;
          }
          set dataLabelProvider(e) {
            (this.dataLabelProviderProperty = e),
              e.onAttach(this.webAssemblyContext, this),
              this.notifyPropertyChanged(p.PROPERTY.SERIES_TEXT_PROVIDER);
          }
          toJSON(e = !1) {
            var t;
            const i = [];
            for (const t of this.asArray()) i.push(t.toJSON(e));
            const r = {
              isVisible: this.isVisible,
              isOneHundredPercent: this.isOneHundredPercent,
              xAxisId: this.xAxisId,
              yAxisId: this.yAxisId,
              yRangeMode: this.yRangeMode,
              dataLabelProvider:
                null === (t = this.dataLabelProvider) || void 0 === t
                  ? void 0
                  : t.toJSON(),
            };
            return { type: this.type, series: i, options: r };
          }
          resolveAutoColors(e, t, i) {
            for (let r = 0; r < this.size(); r++)
              this.get(r).resolveAutoColors(e + r, t, i);
          }
          adjustAutoColor(e, t) {
            return t;
          }
          isAllDataSeriesSet() {
            let e = !0;
            return (
              this.asArray().forEach((t) => {
                t.dataSeries || (e = !1);
              }),
              e
            );
          }
          invalidateParent() {
            this.invalidateParentCallback && this.invalidateParentCallback();
          }
          getFirstSeries() {
            if (0 !== this.size()) return this.get(0);
          }
          getParentSurface() {
            return this.parentSurface;
          }
          beforeAnimationStart() {
            this.updateAccumulatedVectors();
            const e = this.accumulatedValues0.size();
            this.accumulatedFinalAnimationValues0.resize(e, 0);
            for (let t = 0; t < e; t++)
              this.accumulatedFinalAnimationValues0.set(
                t,
                this.accumulatedValues0.get(t)
              );
            this.getVisibleSeries().forEach((e) => {
              e.beforeAnimationStart();
            });
          }
          afterAnimationComplete() {
            this.getVisibleSeries().forEach((e) => {
              e.afterAnimationComplete();
            });
          }
          updateAnimationProperties(e, t) {
            this.isAllDataSeriesSet() &&
              (t.animation.calculateAnimationValues(
                this.webAssemblyContext,
                this.accumulatedFinalAnimationValues0,
                this.accumulatedValues0,
                e
              ),
              this.getVisibleSeries().forEach((i) => {
                i.updateAnimationProperties(e, t);
              })),
              this.invalidateParentCallback && this.invalidateParentCallback();
          }
          updateHitTestProviders(e) {
            this.getVisibleSeries().forEach((t) => {
              var i;
              null === (i = t.hitTestProvider) || void 0 === i || i.update(e);
            });
          }
          isEnoughDataToDraw() {
            const e = this.getVisibleSeries().length;
            if (e < 1) return !1;
            for (let t = 0; t < e; t++) if (!this.get(t).dataSeries) return !1;
            for (let t = 0; t < e; t++)
              if (0 === this.get(t).dataSeries.count()) return !1;
            return !0;
          }
        }
        t.BaseStackedCollection = g;
      },
      73124: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseStackedMountainRenderableSeries = void 0);
        const r = i(88915),
          s = i(84392),
          o = i(14184),
          a = i(48335),
          n = i(20977),
          l = i(7807),
          d = i(94707),
          h = i(99846);
        class u extends a.BaseStackedRenderableSeries {
          constructor(e, t) {
            var i, r, s;
            super(e, t),
              (this.fillProperty = "#7e8486"),
              (this.strokeY1Property = "transparent"),
              (this.strokeDashArrayProperty = []),
              (this.strokeY1DashArrayProperty = []),
              (this.fillProperty =
                null !== (i = null == t ? void 0 : t.fill) && void 0 !== i
                  ? i
                  : this.fillProperty),
              (this.stroke =
                null !== (r = null == t ? void 0 : t.stroke) && void 0 !== r
                  ? r
                  : o.SciChartSurfaceBase.DEFAULT_THEME.mountainLineColor),
              (this.strokeDashArrayProperty =
                null !== (s = null == t ? void 0 : t.strokeDashArray) &&
                void 0 !== s
                  ? s
                  : this.strokeDashArrayProperty),
              this.drawingProviders.push(
                new l.BandSeriesDrawingProvider(
                  e,
                  this,
                  (e) => e.y1Values,
                  (e) => e.yValues
                ),
                new d.PointMarkerDrawingProvider(e, this, (e) => e.y1Values)
              );
          }
          onAttachToParentCollection(e, t, i) {
            if (this.parentCollection)
              throw new Error(
                "Invalid operation in StackedMountainRenderableSeries.onAttachToParentCollection, this series has been already attached to collection. Please detach it from the collection before attaching to another"
              );
            (this.parentCollection = e),
              (this.getParentSurfaceFn = t),
              (this.notifyParentPropertyChangedFn = i);
          }
          onAttach(e) {
            if (this.invalidateParentCallback)
              throw new Error(
                "Invalid operation in sciChartSurface.attachSeries, this series has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            (this.invalidateParentCallback = e.invalidateElement),
              this.drawingProviders.forEach((e) => e.onAttachSeries()),
              this.rolloverModifierProps.setInvalidateParentCallback(
                e.invalidateElement
              );
          }
          onDetach() {
            (this.invalidateParentCallback = void 0),
              this.drawingProviders.forEach((e) => e.onDetachSeries()),
              this.rolloverModifierProps.setInvalidateParentCallback(void 0);
          }
          draw(e, t) {
            var i;
            (this.currentRenderPassData = t),
              null === (i = this.hitTestProvider) ||
                void 0 === i ||
                i.update(t);
            try {
              e.pushShaderEffect(this.effect),
                this.drawingProviders.forEach((i) => {
                  if (
                    this.renderDataTransform &&
                    this.renderDataTransform.drawingProviders.includes(i)
                  ) {
                    const r = this.renderDataTransform.runTransform(t);
                    i.draw(e, r);
                  } else i.draw(e, t);
                });
            } finally {
              e.popShaderEffect();
            }
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.notifyPropertyChanged(n.PROPERTY.STROKE);
          }
          get fill() {
            return (0, s.stripAutoColor)(this.fillProperty);
          }
          set fill(e) {
            this.fillProperty !== e &&
              ((this.fillProperty = e),
              this.drawingProviders.forEach((e) =>
                e.onSeriesPropertyChange(n.PROPERTY.FILL)
              ),
              this.drawingProviders.forEach((e) =>
                e.onSeriesPropertyChange(n.PROPERTY.FILL_Y1)
              ),
              this.notifyPropertyChanged(n.PROPERTY.FILL));
          }
          get strokeY1() {
            return this.strokeY1Property;
          }
          set strokeY1(e) {
            this.strokeY1Property !== e &&
              ((this.strokeY1Property = e),
              this.drawingProviders.forEach((e) =>
                e.onSeriesPropertyChange(n.PROPERTY.STROKE_Y1)
              ));
          }
          get fillY1() {
            return (0, s.stripAutoColor)(this.fillProperty);
          }
          set fillY1(e) {
            throw new Error(
              "Setting fillY1 property is not supported on StackedMountainRenderableSeries"
            );
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.STROKE_DASH_ARRAY);
          }
          get strokeY1DashArray() {
            return this.strokeY1DashArrayProperty;
          }
          set strokeY1DashArray(e) {
            (this.strokeY1DashArrayProperty = e),
              this.drawingProviders.forEach((e) =>
                e.onSeriesPropertyChange(n.PROPERTY.STROKE_Y1_DASH_ARRAY)
              );
          }
          getCurrentRenderPassData() {
            return this.currentRenderPassData;
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                fill: this.fill,
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
                strokeDashArray: this.strokeDashArray,
                paletteProvider: this.paletteProvider,
              };
            return Object.assign(t.options, i), t;
          }
          toPointSeries(e) {
            return new r.XyPointSeriesWrapped(this.dataSeries);
          }
          hasStrokePaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overrideStrokeArgb);
          }
          hasFillPaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overrideFillArgb);
          }
          hasPointMarkerPaletteProvider() {
            const e = this.paletteProvider;
            return void 0 !== (null == e ? void 0 : e.overridePointMarkerArgb);
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.fillProperty.startsWith(s.AUTO_COLOR))
            ) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = s.AUTO_COLOR + this.adjustAutoColor("fill", r);
            }
          }
          newHitTestProvider() {
            return new h.StackedMountainSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.BaseStackedMountainRenderableSeries = u;
      },
      48335: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseStackedRenderableSeries = void 0);
        const r = i(45921),
          s = i(56744),
          o = i(11043),
          a = i(2963),
          n = i(75662),
          l = i(51885),
          d = i(33240),
          h = i(79961),
          u = i(20977),
          c = i(54962);
        class p extends h.BaseRenderableSeries {
          constructor(e, t) {
            super(e, t),
              (this.isStacked = !0),
              (this.rolloverModifierProps =
                new c.RolloverModifierRenderableSeriesProps(this)),
              (this.typeMap = new Map()),
              (this.opacityOriginalValue = 1),
              (this.isStacked = !0),
              (this.accumulatedValues = new e.SCRTDoubleVector()),
              (this.accumulatedFinalAnimationValues = new e.SCRTDoubleVector()),
              (null == t ? void 0 : t.dataLabelProvider) &&
                ("draw" in t.dataLabelProvider ||
                  (t.dataLabelProvider.type === a.EDataLabelProviderType.Custom
                    ? (t.dataLabelProvider = (0, r.createType)(
                        o.EBaseType.DataLabelProvider,
                        t.dataLabelProvider.customType,
                        e,
                        t.dataLabelProvider.options
                      ))
                    : (t.dataLabelProvider = (0, r.createType)(
                        o.EBaseType.DataLabelProvider,
                        t.dataLabelProvider.type,
                        e,
                        t.dataLabelProvider.options
                      )))),
              (this.dataLabelProviderProperty =
                null == t ? void 0 : t.dataLabelProvider),
              this.dataLabelProviderProperty &&
                this.dataLabelProviderProperty.onAttach(e, this),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          dataSeriesDataChanged() {
            this.notifyPropertyChanged(u.PROPERTY.DATA_SERIES);
          }
          draw(e, t) {
            var i;
            (this.currentRenderPassData = t),
              null === (i = this.hitTestProvider) ||
                void 0 === i ||
                i.update(t),
              this.dataLabelProvider &&
                this.dataLabelProvider.generateDataLabels(e, t);
          }
          delete() {
            (this.accumulatedValues = (0, s.deleteSafe)(
              this.accumulatedValues
            )),
              (this.accumulatedFinalAnimationValues = (0, s.deleteSafe)(
                this.accumulatedFinalAnimationValues
              )),
              super.delete();
          }
          onDetachFromParentCollection() {
            (this.parentCollection = void 0),
              (this.getParentSurfaceFn = void 0),
              (this.notifyParentPropertyChangedFn = void 0),
              this.delete();
          }
          notifyPropertyChanged(e) {
            this.drawingProviders.forEach((t) => t.onSeriesPropertyChange(e)),
              this.notifyParentPropertyChangedFn &&
                this.notifyParentPropertyChangedFn(e);
          }
          checkIsOutOfDataRange(e, t) {
            const i = this.getDataSeriesValuesCount(),
              r =
                this.xAxis.getCurrentCoordinateCalculator()
                  .isCategoryCoordinateCalculator,
              s = r ? 0 : this.getNativeXValues().get(0),
              o = r ? i - 1 : this.getNativeXValues().get(i - 1);
            return e < s || e > o;
          }
          getBaseXValues() {
            throw Error(
              "getBaseXValues() is not supported for BaseStackedRenderableSeries"
            );
          }
          hasStrokePaletteProvider() {
            throw Error(
              "hasStrokePaletteProvider() method is not supported for BaseStackedRenderableSeries"
            );
          }
          hasPointMarkerPaletteProvider() {
            throw Error(
              "hasFillPaletteProvider() method is not supported for BaseStackedRenderableSeries"
            );
          }
          hasFillPaletteProvider() {
            throw Error(
              "hasFillPaletteProvider() method is not supported for BaseStackedRenderableSeries"
            );
          }
          onAttach(e) {
            throw Error(
              "onAttach() method is not supported for BaseStackedRenderableSeries"
            );
          }
          onDetach() {
            throw Error(
              "onDetach() method is not supported for BaseStackedRenderableSeries"
            );
          }
          get resamplingMode() {
            return d.EResamplingMode.None;
          }
          set resamplingMode(e) {
            throw Error(
              "Setting resamplingMode property is not supported for BaseStackedRenderableSeries"
            );
          }
          get resamplingPrecision() {
            throw Error(
              "resamplingPrecision property is not supported for BaseStackedRenderableSeries"
            );
          }
          set resamplingPrecision(e) {
            throw Error(
              "resamplingPrecision property is not supported for BaseStackedRenderableSeries"
            );
          }
          get dataLabelProvider() {
            return this.dataLabelProviderProperty;
          }
          set dataLabelProvider(e) {
            (this.dataLabelProviderProperty = e),
              e.onAttach(this.webAssemblyContext, this),
              this.notifyPropertyChanged(u.PROPERTY.SERIES_TEXT_PROVIDER);
          }
          get parentSurface() {
            return this.getParentSurfaceFn ? this.getParentSurfaceFn() : void 0;
          }
          set parentSurface(e) {
            throw Error(
              "set parentSurface property is not supported for BaseStackedRenderableSeries"
            );
          }
          get xAxis() {
            return this.parentCollection.xAxis;
          }
          get yAxis() {
            return this.parentCollection.yAxis;
          }
          beforeAnimationStart() {
            if (
              ((this.opacityOriginalValue = this.opacity),
              this.isRunningAnimation)
            )
              return void super.beforeAnimationStart();
            const e = this.accumulatedValues.size();
            this.accumulatedFinalAnimationValues.resize(e, 0);
            for (let t = 0; t < e; t++)
              this.accumulatedFinalAnimationValues.set(
                t,
                this.accumulatedValues.get(t)
              );
          }
          afterAnimationComplete() {
            (this.opacityProperty = this.opacityOriginalValue),
              this.isRunningAnimation && super.afterAnimationComplete();
          }
          updateAnimationProperties(e, t) {
            if (this.isRunningAnimation)
              return (
                super.updateAnimationProperties(e, this.animationFSM),
                void this.parentCollection.setAccumulatedValuesDirty()
              );
            t.animation.isFadeEffectAnimation
              ? (this.opacity = e * this.opacityOriginalValue)
              : (this.opacity = this.opacityOriginalValue),
              t.animation.calculateAnimationValues(
                this.webAssemblyContext,
                this.accumulatedFinalAnimationValues,
                this.accumulatedValues,
                e
              ),
              this.renderDataTransform &&
                (this.renderDataTransform.requiresTransform = !0);
          }
          getSeriesInfo(e) {
            return new n.StackedXySeriesInfo(this, e);
          }
          toJSON(e = !1) {
            var t, i;
            const r = {
              id: this.id,
              opacity: this.opacity,
              animation: this.animation,
              dataLabelProvider:
                null === (t = this.dataLabelProvider) || void 0 === t
                  ? void 0
                  : t.toJSON(),
            };
            return (null === (i = this.dataSeries) || void 0 === i
              ? void 0
              : i.type) === l.EDataSeriesType.Xy
              ? {
                  type: this.type,
                  options: r,
                  xyData: this.dataSeries.toJSON(e).options,
                }
              : { type: this.type, options: r };
          }
          toPointSeries(e) {
            throw Error(
              "toPointSeries method is not supported for BaseStackedRenderableSeries"
            );
          }
          getCurrentRenderPassData() {
            throw Error(
              "getCurrentRenderPassData method is not supported for BaseStackedRenderableSeries"
            );
          }
          get xAxisId() {
            var e;
            return null === (e = this.parentCollection) || void 0 === e
              ? void 0
              : e.xAxisId;
          }
          set xAxisId(e) {
            throw Error(
              "Setting xAxisId property is not supported for BaseStackedRenderableSeries"
            );
          }
          get yAxisId() {
            var e;
            return null === (e = this.parentCollection) || void 0 === e
              ? void 0
              : e.yAxisId;
          }
          set yAxisId(e) {
            throw Error(
              "yAxisId property is not supported for BaseStackedRenderableSeries"
            );
          }
        }
        t.BaseStackedRenderableSeries = p;
      },
      81856: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BandSeriesDataLabelProvider = void 0);
        const r = i(75772),
          s = i(2963),
          o = i(96528),
          a = i(36420),
          n = i(8591),
          l = i(55172),
          d = i(33802);
        class h extends d.LineSeriesDataLabelProvider {
          constructor(e) {
            var t;
            super(e),
              (this.type = s.EDataLabelProviderType.Band),
              (this.singleLabelProperty = !1),
              (this.singleLabelProperty =
                null !== (t = null == e ? void 0 : e.singleLabel) &&
                void 0 !== t
                  ? t
                  : this.singleLabelProperty);
          }
          get singleLabel() {
            return this.singleLabelProperty;
          }
          set singleLabel(e) {
            (this.singleLabelProperty = e), this.invalidateParent();
          }
          getText(e) {
            if (this.singleLabel) {
              if (((this.state1.index = e.index), this.metaDataSelector)) {
                const t = e.renderPassData.pointSeries.indexes.get(e.index);
                return this.metaDataSelector(
                  e.parentSeries.dataSeries.getMetadataAt(t)
                );
              }
              const t =
                  !this.updateTextInAnimation &&
                  e.parentSeries.isRunningAnimation,
                i = t ? e.yValAfterAnimation() : e.yVal(),
                r = t ? this.state1.yValAfterAnimation() : this.state1.yVal();
              return this.getSingleLabelText(e.xVal(), i, r);
            }
            return super.getText(e);
          }
          getSingleLabelText(e, t, i) {
            var r, s, a, l;
            if (t == t || i == i) {
              let e = "";
              return (
                t == t &&
                  (e = (0, n.formatNumber)(
                    t,
                    null !== (r = this.numericFormat) && void 0 !== r
                      ? r
                      : o.ENumericFormat.Decimal,
                    null !== (s = this.precision) && void 0 !== s ? s : 1
                  )),
                t == t && i == i && (e += "\n"),
                i == i &&
                  (e += (0, n.formatNumber)(
                    i,
                    null !== (a = this.numericFormat) && void 0 !== a
                      ? a
                      : o.ENumericFormat.Decimal,
                    null !== (l = this.precision) && void 0 !== l ? l : 1
                  )),
                e
              );
            }
          }
          getPosition(e, t) {
            var i, s, o, n;
            if (this.singleLabel) {
              let l = e.xCoord();
              this.horizontalTextPosition === a.EHorizontalTextPosition.Center
                ? (l -= t.m_fWidth / 2)
                : this.horizontalTextPosition === a.EHorizontalTextPosition.Left
                ? (l -=
                    t.m_fWidth +
                    (null !==
                      (s =
                        null === (i = this.style.padding) || void 0 === i
                          ? void 0
                          : i.right) && void 0 !== s
                      ? s
                      : 0))
                : (l +=
                    null !==
                      (n =
                        null === (o = this.style.padding) || void 0 === o
                          ? void 0
                          : o.right) && void 0 !== n
                      ? n
                      : 0);
              const d = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
              let h = (e.yCoord() + this.state1.yCoord()) / 2 - d;
              return (
                this.verticalTextPosition === a.EVerticalTextPosition.Center
                  ? (h += t.m_fHeight / 2)
                  : this.verticalTextPosition ===
                      a.EVerticalTextPosition.Below && (h += t.m_fHeight),
                new r.Point(l, h)
              );
            }
            return super.getPosition(e, t);
          }
          getY1Provider(e) {
            return new d.LineSeriesDataLabelProvider(e.toJSON().options);
          }
          generateDataLabels(e, t) {
            if (this.singleLabel) {
              const i = t.pointSeries.y1Values;
              (this.state1 = new l.DataLabelState(
                e,
                t,
                this.style,
                this.color,
                i,
                this.parentSeries
              )),
                super.generateDataLabels(e, t);
            } else {
              super.generateDataLabels(e, t);
              const i = this.getY1Provider(this);
              (i.ySelector = (e) => e.y1Values),
                i.onAttach(this.webAssemblyContext, this.parentSeries),
                i.generateDataLabels(e, t),
                this.dataLabels.push(...i.dataLabels);
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = { singleLabel: this.singleLabel };
            return Object.assign(e.options, t), e;
          }
        }
        t.BandSeriesDataLabelProvider = h;
      },
      49613: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseDataLabelProvider = void 0);
        const r = i(23866),
          s = i(36420),
          o = i(48008),
          a = i(84392),
          n = i(98353),
          l = i(86127);
        t.BaseDataLabelProvider = class {
          constructor(e) {
            (this.dataLabels = []),
              (this.getstyleProxy = (e) =>
                new Proxy(e, {
                  set: (e, t, i) => ((e[t] = i), this.invalidateParent(), !0),
                })),
              (this.styleProperty = (null == e ? void 0 : e.style)
                ? this.getstyleProxy(null == e ? void 0 : e.style)
                : void 0),
              (this.colorProperty = null == e ? void 0 : e.color);
          }
          onAttach(e, t) {
            r.Guard.notNull(e, "webAssemblyContext"),
              r.Guard.notNull(t, "parentSeries"),
              (this.webAssemblyContext = e),
              (this.parentSeries = t);
          }
          onDetach() {
            (this.webAssemblyContext = void 0), (this.parentSeries = void 0);
          }
          delete() {}
          get style() {
            return this.styleProperty;
          }
          set style(e) {
            (this.styleProperty = this.getstyleProxy(e)),
              this.invalidateParent();
          }
          get color() {
            var e, t, i;
            return this.colorProperty
              ? (0, a.stripAutoColor)(this.colorProperty)
              : null ===
                  (i =
                    null ===
                      (t =
                        null === (e = this.parentSeries) || void 0 === e
                          ? void 0
                          : e.parentSurface) || void 0 === t
                      ? void 0
                      : t.themeProvider) || void 0 === i
              ? void 0
              : i.tickTextBrush;
          }
          set color(e) {
            (this.colorProperty = e), this.invalidateParent();
          }
          updateStyle(e) {
            (this.styleProperty = this.getstyleProxy(
              Object.assign(Object.assign({}, this.styleProperty), e)
            )),
              this.invalidateParent();
          }
          generateDataLabels(e, t) {}
          draw(e) {
            var t, i, r;
            if (!this.dataLabels || 0 === this.dataLabels.length) return;
            if (!this.style || !this.style.fontFamily || !this.style.fontSize)
              return;
            const a = (0, o.parseColorToUIntArgb)(this.color),
              d = l.DpiHelper.adjustTextStyle(this.style),
              h = e.getFont(d),
              u = (0, n.getVector4)(this.webAssemblyContext, 0, 0, 0, 0),
              c = (0, s.convertMultiLineAlignment)(
                this.style.multiLineAlignment,
                this.webAssemblyContext
              );
            for (const e of this.dataLabels)
              h.DrawStringAdvanced(
                null !== (t = e.text) && void 0 !== t ? t : "",
                null !== (i = e.color) && void 0 !== i ? i : a,
                Math.round(
                  e.position.x +
                    this.parentSeries.parentSurface.seriesViewRect.left
                ),
                Math.round(
                  e.position.y +
                    this.parentSeries.parentSurface.seriesViewRect.top
                ),
                u,
                c,
                null !== (r = this.style.lineSpacing) && void 0 !== r ? r : 2
              );
          }
          resolveAutoColors(e, t, i) {
            if (
              this.colorProperty &&
              this.colorProperty.startsWith(a.AUTO_COLOR)
            ) {
              const r = i.getStrokeColor(e, t, this.webAssemblyContext);
              this.color = a.AUTO_COLOR + r;
            }
          }
          toJSON() {
            return {
              type: this.type,
              options: { style: this.style, color: this.color },
            };
          }
          invalidateParent() {
            var e;
            (null === (e = this.parentSeries) || void 0 === e
              ? void 0
              : e.invalidateParentCallback) &&
              this.parentSeries.invalidateParentCallback();
          }
        };
      },
      15273: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BubbleSeriesDataLabelProvider = void 0);
        const r = i(75772),
          s = i(36420),
          o = i(2963),
          a = i(96852);
        class n extends a.DataLabelProvider {
          constructor(e) {
            var t, i;
            super(e),
              (this.type = o.EDataLabelProviderType.Bubble),
              (this.horizontalTextPositionProperty =
                null !== (t = null == e ? void 0 : e.horizontalTextPosition) &&
                void 0 !== t
                  ? t
                  : s.EHorizontalTextPosition.Center),
              (this.verticalTextPositionProperty =
                null !== (i = null == e ? void 0 : e.verticalTextPosition) &&
                void 0 !== i
                  ? i
                  : s.EVerticalTextPosition.Center);
          }
          getPosition(e, t) {
            var i, o, a, n, l, d, h, u;
            let c = e.xCoord(),
              p = Math.abs(e.parentSeries.getBubbleDiameter(e.index)) / 2;
            this.horizontalTextPosition === s.EHorizontalTextPosition.Center
              ? (c -= t.m_fWidth / 2)
              : this.horizontalTextPosition === s.EHorizontalTextPosition.Left
              ? (c -=
                  t.m_fWidth +
                  (null !==
                    (o =
                      null === (i = this.style.padding) || void 0 === i
                        ? void 0
                        : i.right) && void 0 !== o
                    ? o
                    : 0) +
                  p)
              : (c +=
                  (null !==
                    (n =
                      null === (a = this.style.padding) || void 0 === a
                        ? void 0
                        : a.right) && void 0 !== n
                    ? n
                    : 0) + p);
            const g = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
            let y = e.yCoord() - g;
            return (
              this.verticalTextPosition === s.EVerticalTextPosition.Center
                ? (y += t.m_fHeight / 2)
                : this.verticalTextPosition === s.EVerticalTextPosition.Below
                ? (y +=
                    t.m_fHeight +
                    (null !==
                      (d =
                        null === (l = this.style.padding) || void 0 === l
                          ? void 0
                          : l.top) && void 0 !== d
                      ? d
                      : 0) +
                    p)
                : (y -=
                    (null !==
                      (u =
                        null === (h = this.style.padding) || void 0 === h
                          ? void 0
                          : h.bottom) && void 0 !== u
                      ? u
                      : 0) + p),
              new r.Point(c, y)
            );
          }
        }
        t.BubbleSeriesDataLabelProvider = n;
      },
      1367: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ColumnSeriesDataLabelProvider = t.EColumnDataLabelPosition =
            void 0);
        const r = i(75772),
          s = i(2963),
          o = i(36420),
          a = i(96852);
        var n;
        !(function (e) {
          (e.Outside = "Outside"),
            (e.Inside = "Inside"),
            (e.Position = "Position");
        })(
          (n = t.EColumnDataLabelPosition || (t.EColumnDataLabelPosition = {}))
        );
        class l extends a.DataLabelProvider {
          constructor(e) {
            var t;
            super(
              Object.assign(
                {
                  horizontalTextPosition: o.EHorizontalTextPosition.Center,
                  verticalTextPosition: o.EVerticalTextPosition.Center,
                },
                e
              )
            ),
              (this.type = s.EDataLabelProviderType.Column),
              (this.positionModeProperty = n.Outside),
              (this.positionModeProperty =
                null !== (t = null == e ? void 0 : e.positionMode) &&
                void 0 !== t
                  ? t
                  : this.positionMode);
          }
          get positionMode() {
            return this.positionModeProperty;
          }
          set positionMode(e) {
            (this.positionModeProperty = e), this.invalidateParent();
          }
          generateDataLabels(e, t) {
            const i = this.parentSeries;
            (this.yAdj = Math.ceil(i.strokeThickness / 2)),
              i.pointMarker &&
                (this.yAdj = Math.max(
                  this.yAdj,
                  Math.ceil(i.pointMarker.height / 2)
                )),
              super.generateDataLabels(e, t);
          }
          getPosition(e, t) {
            var i,
              s,
              a,
              l,
              d,
              h,
              u,
              c,
              p,
              g,
              y,
              f,
              v,
              m,
              S,
              P,
              C,
              x,
              b,
              A,
              T,
              E,
              R,
              w;
            let D = e.xCoord();
            const L = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
            let M = e.yCoord() - L;
            e.isXFlipped;
            const I = e.isYFlipped ? -1 : 1;
            return e.isVerticalChart
              ? (this.verticalTextPosition === o.EVerticalTextPosition.Center
                  ? (M += t.m_fHeight / 2)
                  : this.verticalTextPosition === o.EVerticalTextPosition.Below
                  ? (M +=
                      t.m_fHeight +
                      (null !==
                        (s =
                          null === (i = this.style.padding) || void 0 === i
                            ? void 0
                            : i.top) && void 0 !== s
                        ? s
                        : 0))
                  : (M -=
                      null !==
                        (l =
                          null === (a = this.style.padding) || void 0 === a
                            ? void 0
                            : a.bottom) && void 0 !== l
                        ? l
                        : 0),
                this.positionMode === n.Outside
                  ? (e.yVal() * I >= 0
                      ? (D +=
                          this.yAdj +
                          (null !==
                            (h =
                              null === (d = e.style.padding) || void 0 === d
                                ? void 0
                                : d.left) && void 0 !== h
                            ? h
                            : 1))
                      : (D -=
                          t.m_fWidth +
                          this.yAdj +
                          (null !==
                            (c =
                              null === (u = e.style.padding) || void 0 === u
                                ? void 0
                                : u.right) && void 0 !== c
                            ? c
                            : 1)),
                    new r.Point(D, M))
                  : this.positionMode === n.Inside
                  ? (e.yVal() * I >= 0
                      ? (D -=
                          t.m_fWidth +
                          this.yAdj +
                          (null !==
                            (g =
                              null === (p = e.style.padding) || void 0 === p
                                ? void 0
                                : p.right) && void 0 !== g
                            ? g
                            : 1))
                      : (D +=
                          this.yAdj +
                          (null !==
                            (f =
                              null === (y = e.style.padding) || void 0 === y
                                ? void 0
                                : y.left) && void 0 !== f
                            ? f
                            : 1)),
                    new r.Point(D, M))
                  : super.getPosition(e, t))
              : (this.horizontalTextPosition ===
                o.EHorizontalTextPosition.Center
                  ? (D -= t.m_fWidth / 2)
                  : this.horizontalTextPosition ===
                    o.EHorizontalTextPosition.Left
                  ? (D -=
                      t.m_fWidth +
                      (null !==
                        (m =
                          null === (v = this.style.padding) || void 0 === v
                            ? void 0
                            : v.right) && void 0 !== m
                        ? m
                        : 0))
                  : (D +=
                      null !==
                        (P =
                          null === (S = this.style.padding) || void 0 === S
                            ? void 0
                            : S.left) && void 0 !== P
                        ? P
                        : 0),
                this.positionMode === n.Outside
                  ? (e.yVal() * I >= 0
                      ? (M -=
                          this.yAdj +
                          (null !==
                            (x =
                              null === (C = e.style.padding) || void 0 === C
                                ? void 0
                                : C.bottom) && void 0 !== x
                            ? x
                            : 1))
                      : (M +=
                          t.m_fHeight +
                          this.yAdj +
                          (null !==
                            (A =
                              null === (b = e.style.padding) || void 0 === b
                                ? void 0
                                : b.top) && void 0 !== A
                            ? A
                            : 1)),
                    new r.Point(D, M))
                  : this.positionMode === n.Inside
                  ? (e.yVal() * I >= 0
                      ? (M +=
                          t.m_fHeight +
                          this.yAdj +
                          (null !==
                            (E =
                              null === (T = e.style.padding) || void 0 === T
                                ? void 0
                                : T.top) && void 0 !== E
                            ? E
                            : 1))
                      : (M -=
                          this.yAdj +
                          (null !==
                            (w =
                              null === (R = e.style.padding) || void 0 === R
                                ? void 0
                                : R.bottom) && void 0 !== w
                            ? w
                            : 1)),
                    new r.Point(D, M))
                  : super.getPosition(e, t));
          }
          toJSON() {
            const e = super.toJSON(),
              t = { positionMode: this.positionMode };
            return Object.assign(e.options, t), e;
          }
        }
        t.ColumnSeriesDataLabelProvider = l;
      },
      9488: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ContoursDataLabelProvider = void 0);
        const r = i(75772),
          s = i(87459),
          o = i(2963),
          a = i(96528),
          n = i(22022),
          l = i(8591),
          d = i(48008),
          h = i(98353),
          u = i(86127),
          c = i(49613);
        class p extends c.BaseDataLabelProvider {
          constructor(e) {
            var t, i, r, s;
            super(e),
              (this.type = o.EDataLabelProviderType.Contours),
              (this.isEnabledProperty = !0),
              (this.numericFormatProperty = a.ENumericFormat.Decimal),
              (this.precisionProperty = 1),
              (this.labelRowCountProperty = 10),
              (this.numericFormatProperty =
                null !== (t = null == e ? void 0 : e.numericFormat) &&
                void 0 !== t
                  ? t
                  : this.numericFormatProperty),
              (this.precision =
                null !== (i = null == e ? void 0 : e.precision) && void 0 !== i
                  ? i
                  : this.precisionProperty),
              (this.labelRowCountProperty =
                null !== (r = null == e ? void 0 : e.labelRowCount) &&
                void 0 !== r
                  ? r
                  : this.labelRowCountProperty),
              (this.metaDataSelector = null == e ? void 0 : e.metaDataSelector),
              (this.isEnabledProperty =
                null !== (s = null == e ? void 0 : e.isEnabled) && void 0 !== s
                  ? s
                  : this.isEnabledProperty);
          }
          get numericFormat() {
            return this.numericFormatProperty;
          }
          set numericFormat(e) {
            var t;
            (this.numericFormatProperty = e),
              null === (t = this.parentSeries) ||
                void 0 === t ||
                t.invalidateParentCallback();
          }
          get precision() {
            return this.precisionProperty;
          }
          set precision(e) {
            var t;
            (this.precisionProperty = e),
              null === (t = this.parentSeries) ||
                void 0 === t ||
                t.invalidateParentCallback();
          }
          get labelRowCount() {
            return this.labelRowCountProperty;
          }
          set labelRowCount(e) {
            var t;
            (this.labelRowCountProperty = e),
              null === (t = this.parentSeries) ||
                void 0 === t ||
                t.invalidateParentCallback();
          }
          get isEnabled() {
            return this.isEnabledProperty;
          }
          set isEnabled(e) {
            this.isEnabledProperty !== e &&
              ((this.isEnabledProperty = e), this.invalidateParent());
          }
          getText(e, t) {
            var i, r;
            if (this.metaDataSelector)
              return this.metaDataSelector(this.dataSeries.getMetadataAt(t, e));
            const s = this.zValues[t][e];
            return s == s
              ? (0, l.formatNumber)(
                  s,
                  null !== (i = this.numericFormat) && void 0 !== i
                    ? i
                    : a.ENumericFormat.Decimal,
                  null !== (r = this.precision) && void 0 !== r ? r : 1
                )
              : void 0;
          }
          getPosition(e, t, i, s, o, a) {
            let n = a.xCoordinateCalculator.getCoordinate(i),
              l = a.yCoordinateCalculator.getCoordinate(s);
            if (a.isVerticalChart) {
              const e = n;
              (n = l), (l = e);
            }
            return new r.Point(n, l);
          }
          shouldGenerate(e, t, i) {
            return e.height < i && e.width < t;
          }
          getColor(e, t, i) {
            return this.colorValue;
          }
          shouldSkipLabel(e, t, i, r, s) {
            const o = this.parentSeries.parentSurface.seriesViewRect;
            return (
              i.rect.y < 0 ||
              i.rect.bottom > o.height ||
              i.rect.x < 0 ||
              i.rect.right > o.width
            );
          }
          generateDataLabels(e, t) {
            var i, r, o, c;
            if (
              ((this.dataLabels = []),
              !(
                this.isEnabled &&
                this.style &&
                this.style.fontFamily &&
                this.style.fontSize
              ))
            )
              return;
            (this.dataSeries = this.parentSeries.dataSeries),
              (this.zValues = this.dataSeries.getZValues());
            const p = (0, h.getTextBounds)(this.webAssemblyContext),
              g = u.DpiHelper.adjustTextStyle(this.style),
              y = e.getFont(g);
            Math.abs(
              t.xCoordinateCalculator.getCoordinate(
                this.dataSeries.getXValue(1)
              ) -
                t.xCoordinateCalculator.getCoordinate(
                  this.dataSeries.getXValue(0)
                )
            ),
              Math.abs(
                t.yCoordinateCalculator.getCoordinate(
                  this.dataSeries.getYValue(1)
                ) -
                  t.yCoordinateCalculator.getCoordinate(
                    this.dataSeries.getYValue(0)
                  )
              ),
              (this.colorValue = (0, d.parseColorToUIntArgb)(this.color));
            const {
                xStart: f,
                xStep: v,
                yStart: m,
                yStep: S,
              } = this.parentSeries.dataSeries,
              P = this.parentSeries.getContourDrawingParams(),
              C = P.majorStepZ,
              x = (P.yMax - P.yMin) / (this.labelRowCount + 1);
            let b = m;
            for (let e = 0; e < this.dataSeries.arrayHeight; e++) {
              const d = m + S * e;
              if (d <= b + x) continue;
              if (
                ((b = d),
                t.yCoordinateCalculator.visibleMin > d + S ||
                  t.yCoordinateCalculator.visibleMax < d)
              )
                continue;
              let h;
              for (let d = 0; d < this.dataSeries.arrayWidth; d++) {
                const u = f + v * d;
                if (
                  t.xCoordinateCalculator.visibleMin > u + v ||
                  t.xCoordinateCalculator.visibleMax < u
                )
                  continue;
                const g = this.zValues[e][d];
                let m,
                  S = u;
                if (void 0 !== h) {
                  const e = Math.floor(h / C) * C,
                    t = e + C;
                  g <= e
                    ? ((m = (0, l.formatNumber)(
                        e,
                        null !== (i = this.numericFormat) && void 0 !== i
                          ? i
                          : a.ENumericFormat.Decimal,
                        null !== (r = this.precision) && void 0 !== r ? r : 1
                      )),
                      (S = (v * (e - g)) / (h - g) - v / 2 + u))
                    : g >= t &&
                      ((m = (0, l.formatNumber)(
                        t,
                        null !== (o = this.numericFormat) && void 0 !== o
                          ? o
                          : a.ENumericFormat.Decimal,
                        null !== (c = this.precision) && void 0 !== c ? c : 1
                      )),
                      (S = (v * (t - g)) / (g - h) - v / 2 + u));
                }
                if (((h = g), !m)) continue;
                y.CalculateStringBounds(null != m ? m : "", p, 2);
                const P = new n.Size(p.m_fWidth, p.m_fHeight),
                  x =
                    (this.dataSeries.getXValue(d),
                    this.dataSeries.getYValue(e)),
                  b = this.getPosition(d, e, S, x, P, t),
                  A = {
                    text: m,
                    position: b,
                    rect: new s.Rect(
                      b.x,
                      b.y - p.GetLineBounds(0).m_fHeight,
                      P.width,
                      P.height
                    ),
                    color: this.getColor(d, e, m),
                    dataX: this.dataSeries.getXValue(d),
                    dataY: this.dataSeries.getYValue(e),
                  };
                this.dataLabels.push(A);
              }
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                numericFormat: this.numericFormat,
                precision: this.precision,
                labelRowCount: this.labelRowCount,
                isEnabled: this.isEnabled,
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.ContoursDataLabelProvider = p;
      },
      96852: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataLabelProvider = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(87459),
          a = i(36420),
          n = i(2963),
          l = i(62993),
          d = i(96528),
          h = i(8591),
          u = i(98353),
          c = i(49613),
          p = i(55172),
          g = i(41493);
        class y extends c.BaseDataLabelProvider {
          constructor(e) {
            var t, i, r, s, o, h, u, c, p, g, y, f;
            super(e),
              (this.type = n.EDataLabelProviderType.Default),
              (this.dataLabels = []),
              (this.updateTextInAnimation = !1),
              (this.pointGapThresholdProperty = 0),
              (this.pointCountThresholdProperty = 1 / 0),
              (this.numericFormatProperty = d.ENumericFormat.Decimal),
              (this.engineeringPrefixProperty = {}),
              (this.precisionProperty = 1),
              (this.skipModeProperty =
                l.EDataLabelSkipMode.SkipIfOverlapPrevious),
              (this.skipNumberProperty = 0),
              (this.horizontalTextPositionProperty =
                a.EHorizontalTextPosition.Right),
              (this.verticalTextPositionProperty =
                a.EVerticalTextPosition.Above),
              (this.isEnabledProperty = !0),
              (this.pointGapThresholdProperty =
                null !== (t = null == e ? void 0 : e.pointGapThreshold) &&
                void 0 !== t
                  ? t
                  : this.pointGapThresholdProperty),
              (this.pointCountThresholdProperty =
                null !== (i = null == e ? void 0 : e.pointCountThreshold) &&
                void 0 !== i
                  ? i
                  : this.pointCountThresholdProperty),
              (this.numericFormatProperty =
                null !== (r = null == e ? void 0 : e.numericFormat) &&
                void 0 !== r
                  ? r
                  : this.numericFormatProperty),
              (this.engineeringPrefixProperty =
                null !== (s = null == e ? void 0 : e.engineeringPrefix) &&
                void 0 !== s
                  ? s
                  : this.engineeringPrefixProperty),
              (this.precision =
                null !== (o = null == e ? void 0 : e.precision) && void 0 !== o
                  ? o
                  : this.precisionProperty),
              (this.skipNumberProperty =
                null !== (h = null == e ? void 0 : e.skipNumber) && void 0 !== h
                  ? h
                  : this.skipNumberProperty),
              (this.skipModeProperty =
                null !== (u = null == e ? void 0 : e.skipMode) && void 0 !== u
                  ? u
                  : this.skipModeProperty),
              (this.metaDataSelector = null == e ? void 0 : e.metaDataSelector),
              (this.ySelector =
                null !== (c = null == e ? void 0 : e.ySelector) && void 0 !== c
                  ? c
                  : (e) => e.yValues),
              (this.updateTextInAnimation =
                null !== (p = null == e ? void 0 : e.updateTextInAnimation) &&
                void 0 !== p
                  ? p
                  : this.updateTextInAnimation),
              (this.horizontalTextPositionProperty =
                null !== (g = null == e ? void 0 : e.horizontalTextPosition) &&
                void 0 !== g
                  ? g
                  : this.horizontalTextPosition),
              (this.verticalTextPositionProperty =
                null !== (y = null == e ? void 0 : e.verticalTextPosition) &&
                void 0 !== y
                  ? y
                  : this.verticalTextPosition),
              (this.isEnabledProperty =
                null !== (f = null == e ? void 0 : e.isEnabled) && void 0 !== f
                  ? f
                  : this.isEnabledProperty);
          }
          onAttach(e, t) {
            r.Guard.notNull(e, "webAssemblyContext"),
              r.Guard.notNull(t, "parentSeries"),
              (this.webAssemblyContext = e),
              (this.parentSeries = t);
          }
          get pointGapThreshold() {
            return this.pointGapThresholdProperty;
          }
          set pointGapThreshold(e) {
            (this.pointGapThresholdProperty = e), this.invalidateParent();
          }
          get pointCountThreshold() {
            return this.pointCountThresholdProperty;
          }
          set pointCountThreshold(e) {
            (this.pointCountThresholdProperty = e), this.invalidateParent();
          }
          get skipMode() {
            return this.skipModeProperty;
          }
          set skipMode(e) {
            (this.skipModeProperty = e), this.invalidateParent();
          }
          get skipNumber() {
            return this.skipNumberProperty;
          }
          set skipNumber(e) {
            (this.skipNumberProperty = e), this.invalidateParent();
          }
          get numericFormat() {
            return this.numericFormatProperty;
          }
          set numericFormat(e) {
            (this.numericFormatProperty = e), this.invalidateParent();
          }
          get engineeringPrefix() {
            return this.engineeringPrefixProperty;
          }
          set engineeringPrefix(e) {
            (this.engineeringPrefixProperty = e), this.invalidateParent();
          }
          get precision() {
            return this.precisionProperty;
          }
          set precision(e) {
            (this.precisionProperty = e), this.invalidateParent();
          }
          get horizontalTextPosition() {
            return this.horizontalTextPositionProperty;
          }
          set horizontalTextPosition(e) {
            (this.horizontalTextPositionProperty = e), this.invalidateParent();
          }
          get verticalTextPosition() {
            return this.verticalTextPositionProperty;
          }
          set verticalTextPosition(e) {
            (this.verticalTextPositionProperty = e), this.invalidateParent();
          }
          get isEnabled() {
            return this.isEnabledProperty;
          }
          set isEnabled(e) {
            this.isEnabledProperty !== e &&
              ((this.isEnabledProperty = e), this.invalidateParent());
          }
          getText(e) {
            var t;
            if (this.metaDataSelector)
              return this.metaDataSelector(e.getMetaData());
            const i =
              !this.updateTextInAnimation && e.parentSeries.isRunningAnimation
                ? e.yValAfterAnimation()
                : e.yVal();
            return i == i
              ? this.engineeringPrefix
                ? (0, h.formatNumber)(
                    i,
                    this.numericFormat,
                    this.precision,
                    this.engineeringPrefixProperty
                  )
                : (0, h.formatNumber)(
                    i,
                    null !== (t = this.numericFormat) && void 0 !== t
                      ? t
                      : d.ENumericFormat.Decimal,
                    this.precision
                  )
              : void 0;
          }
          shouldGenerate(e) {
            var t, i;
            if (e.pointCount > this.pointCountThresholdProperty) return !1;
            const r = this.getText(e),
              s = (0, u.getTextBounds)(this.webAssemblyContext);
            return (
              e.font.CalculateStringBounds(
                null != r ? r : "",
                s,
                null !==
                  (i =
                    null === (t = this.style) || void 0 === t
                      ? void 0
                      : t.lineSpacing) && void 0 !== i
                  ? i
                  : 2
              ),
              e.pointGap >= s.m_fWidth * this.pointGapThreshold
            );
          }
          getPosition(e, t) {
            var i, r, o, n, l, d, h, u;
            let c = e.xCoord();
            this.horizontalTextPosition === a.EHorizontalTextPosition.Center
              ? (c -= t.m_fWidth / 2)
              : this.horizontalTextPosition === a.EHorizontalTextPosition.Left
              ? (c -=
                  t.m_fWidth +
                  (null !==
                    (r =
                      null === (i = this.style.padding) || void 0 === i
                        ? void 0
                        : i.right) && void 0 !== r
                    ? r
                    : 0))
              : (c +=
                  null !==
                    (n =
                      null === (o = this.style.padding) || void 0 === o
                        ? void 0
                        : o.left) && void 0 !== n
                    ? n
                    : 0);
            const p = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
            let g = e.yCoord() - p;
            return (
              this.verticalTextPosition === a.EVerticalTextPosition.Center
                ? (g += t.m_fHeight / 2)
                : this.verticalTextPosition === a.EVerticalTextPosition.Below
                ? (g +=
                    t.m_fHeight +
                    (null !==
                      (d =
                        null === (l = this.style.padding) || void 0 === l
                          ? void 0
                          : l.top) && void 0 !== d
                      ? d
                      : 0))
                : (g -=
                    null !==
                      (u =
                        null === (h = this.style.padding) || void 0 === h
                          ? void 0
                          : h.bottom) && void 0 !== u
                      ? u
                      : 0),
              new s.Point(c, g)
            );
          }
          getColor(e, t) {
            return e.color;
          }
          shouldSkipLabel(e, t) {
            var i;
            const r = e.parentSeries.parentSurface.seriesViewRect;
            if (t.rect.y < 0 || t.rect.bottom > r.height) return !0;
            if (t.rect.x < 0 || t.rect.right > r.width) return !0;
            switch (this.skipModeProperty) {
              case l.EDataLabelSkipMode.SkipIfOverlapPrevious:
                return this.skipIfOverlapPrevious(e, t);
              case l.EDataLabelSkipMode.SkipIfOverlapNext:
                return this.skipIfOverlapNext(e, t);
              case l.EDataLabelSkipMode.SkipIfSame:
                return (
                  (null === (i = e.lastLabel) || void 0 === i
                    ? void 0
                    : i.text) === t.text
                );
              case l.EDataLabelSkipMode.ShowAll:
              default:
                return !1;
            }
          }
          generateDataLabels(e, t) {
            var i, r;
            if (
              ((this.dataLabels = []),
              !(
                this.isEnabled &&
                this.style &&
                this.style.fontFamily &&
                this.style.fontSize
              ))
            )
              return;
            const s = this.ySelector(t.pointSeries);
            if (!s || 0 === s.size()) return;
            this.state = new p.DataLabelState(
              e,
              t,
              this.style,
              this.color,
              s,
              this.parentSeries
            );
            const {
                fifoCapacity: a,
                fifoSweeping: n,
                fifoSweepingGap: d,
                fifoStartIndex: h,
              } = this.parentSeries.dataSeries,
              c = (0, u.getTextBounds)(this.webAssemblyContext);
            if (!this.shouldGenerate(this.state)) return;
            let y = 0;
            const f = Math.max(0, this.skipNumberProperty);
            for (
              let e = this.state.indexStart;
              e <= this.state.indexEnd;
              e += f + 1
            ) {
              if (
                ((this.state.index =
                  this.skipModeProperty ===
                  l.EDataLabelSkipMode.SkipIfOverlapNext
                    ? this.state.indexEnd - (e - this.state.indexStart)
                    : e),
                n &&
                  this.state.pointCount === a &&
                  this.state.index >= h &&
                  this.state.index < h + d)
              )
                continue;
              const t = this.getText(this.state);
              if (!t) continue;
              this.state.font.CalculateStringBounds(
                null != t ? t : "",
                c,
                null !==
                  (r =
                    null === (i = this.style) || void 0 === i
                      ? void 0
                      : i.lineSpacing) && void 0 !== r
                  ? r
                  : 2
              );
              const s = this.getPosition(this.state, c),
                u = this.getColor(this.state, t),
                p = c.GetLineBounds(0).m_fHeight,
                g = {
                  text: t,
                  position: s,
                  rect: new o.Rect(s.x, s.y - p, c.m_fWidth, c.m_fHeight),
                  color: u,
                  dataX: this.state.xCoord(),
                  dataY: this.state.yCoord(),
                };
              this.shouldSkipLabel(this.state, g)
                ? y++
                : this.state.dataLabels.push(g);
            }
            y > 100 &&
              y / (this.state.indexEnd - this.state.indexStart) > 0.8 &&
              g.performanceWarnings.dataLabelsSkippingMany.warn(),
              (this.dataLabels = this.state.dataLabels);
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                numericFormat: this.numericFormat,
                pointGapThreshold: this.pointGapThreshold,
                precision: this.precision,
                pointCountThreshold: this.pointCountThreshold,
                skipNumber: this.skipNumber,
                skipMode: this.skipMode,
                updateTextInAnimation: this.updateTextInAnimation,
                horizontalTextPosition: this.horizontalTextPosition,
                verticalTextPosition: this.verticalTextPosition,
                isEnabled: this.isEnabled,
                engineeringPrefix: this.engineeringPrefixProperty,
              };
            return Object.assign(e.options, t), e;
          }
          skipIfOverlapPrevious(e, t) {
            const i = e.lastLabel;
            return !(
              !i ||
              i.rect.right + e.xPadding < t.rect.left ||
              Math.abs(i.rect.y - t.rect.y) > t.rect.height + e.yPadding
            );
          }
          skipIfOverlapNext(e, t) {
            const i = e.lastLabel;
            return !(
              !i ||
              t.rect.right + e.xPadding < i.rect.left ||
              Math.abs(i.rect.y - t.rect.y) > t.rect.height + e.yPadding
            );
          }
        }
        t.DataLabelProvider = y;
      },
      55172: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DataLabelState = void 0);
        const r = i(98140),
          s = i(48008),
          o = i(86127);
        t.DataLabelState = class {
          constructor(e, t, i, a, n, l) {
            var d, h, u, c, p, g, y, f, v;
            (this.dataLabels = []),
              (this.indexProperty = 0),
              (this.xCoordCache = void 0),
              (this.yCoordCache = void 0);
            const m = t.pointSeries,
              S = t.xCoordinateCalculator.isCategoryCoordinateCalculator;
            if (
              ((this.style = o.DpiHelper.adjustTextStyle(i)),
              (this.color = (0, s.parseColorToUIntArgb)(a)),
              (this.xValues = S ? m.indexes : m.xValues),
              (this.yValues = n),
              (this.parentSeries = l),
              (this.renderPassData = t),
              (this.yFinalValues =
                null === (d = this.parentSeries.dataSeries) || void 0 === d
                  ? void 0
                  : d.yFinalAnimationValues),
              (this.isXFlipped = (
                t.isVerticalChart
                  ? this.renderPassData.yCoordinateCalculator
                  : this.renderPassData.xCoordinateCalculator
              ).hasFlippedCoordinates),
              (this.isYFlipped = (
                t.isVerticalChart
                  ? this.renderPassData.xCoordinateCalculator
                  : this.renderPassData.yCoordinateCalculator
              ).hasFlippedCoordinates),
              t.indexRange)
            )
              (this.indexStart = m.resampled ? 0 : t.indexRange.min),
                (this.pointCount = m.resampled
                  ? m.count
                  : t.indexRange.diff + 1),
                (this.indexEnd = m.resampled ? m.count - 1 : t.indexRange.max),
                this.pointCount > 1
                  ? (this.pointGap = t.isVerticalChart
                      ? Math.abs(
                          this.yCoord(this.indexStart) -
                            this.yCoord(this.indexEnd)
                        ) / this.pointCount
                      : Math.abs(
                          this.xCoord(this.indexStart) -
                            this.xCoord(this.indexEnd)
                        ) / this.pointCount)
                  : (this.pointGap = 1 / 0);
            else {
              const e = this.parentSeries.getIndicesRange(
                new r.NumberRange(
                  t.xCoordinateCalculator.visibleMin,
                  t.xCoordinateCalculator.visibleMax
                ),
                S
              );
              (this.indexStart = e.min),
                (this.indexEnd = e.max),
                (this.pointCount = t.indexRange.diff + 1),
                this.pointCount > 1
                  ? (this.pointGap = t.isVerticalChart
                      ? Math.abs(
                          this.yCoord(this.indexStart) -
                            this.yCoord(this.indexEnd)
                        ) / this.pointCount
                      : Math.abs(
                          this.xCoord(this.indexStart) -
                            this.xCoord(this.indexEnd)
                        ) / this.pointCount)
                  : (this.pointGap = 1 / 0);
            }
            (this.index = this.indexStart),
              (this.font = e.getFont(this.style)),
              (this.xPadding =
                (null !==
                  (u =
                    null === (h = this.style.padding) || void 0 === h
                      ? void 0
                      : h.left) && void 0 !== u
                  ? u
                  : 0) +
                (null !==
                  (p =
                    null === (c = this.style.padding) || void 0 === c
                      ? void 0
                      : c.right) && void 0 !== p
                  ? p
                  : 0)),
              (this.yPadding =
                (null !==
                  (y =
                    null === (g = this.style.padding) || void 0 === g
                      ? void 0
                      : g.top) && void 0 !== y
                  ? y
                  : 0) +
                (null !==
                  (v =
                    null === (f = this.style.padding) || void 0 === f
                      ? void 0
                      : f.bottom) && void 0 !== v
                  ? v
                  : 0)),
              (this.fifoSweeping = l.dataSeries.fifoSweeping);
          }
          get index() {
            return this.indexProperty;
          }
          set index(e) {
            (this.xCoordCache = void 0),
              (this.yCoordCache = void 0),
              (this.indexProperty = e);
          }
          xVal(e) {
            let t = null != e ? e : this.indexProperty;
            return (
              this.isXFlipped || (t = this.indexEnd - (t - this.indexStart)),
              this.parentSeries.dataSeries.getNativeValue(this.xValues, t)
            );
          }
          yVal(e) {
            let t = null != e ? e : this.indexProperty;
            return (
              this.isXFlipped || (t = this.indexEnd - (t - this.indexStart)),
              this.parentSeries.dataSeries.getNativeValue(this.yValues, t)
            );
          }
          yValAfterAnimation(e) {
            if (!this.yFinalValues) return this.yVal(e);
            let t = null != e ? e : this.indexProperty;
            return (
              this.isXFlipped || (t = this.indexEnd - (t - this.indexStart)),
              this.yFinalValues.get(t)
            );
          }
          xCoord(e) {
            return this.renderPassData.isVerticalChart
              ? this.yCoordInternal(e)
              : this.xCoordInternal(e);
          }
          yCoord(e) {
            return this.renderPassData.isVerticalChart
              ? this.xCoordInternal(e)
              : this.yCoordInternal(e);
          }
          hasNext(e) {
            const t = null != e ? e : this.indexProperty;
            return this.isXFlipped ? t < this.indexEnd : t > 0;
          }
          get lastLabel() {
            return this.dataLabels.length > 0
              ? this.dataLabels[this.dataLabels.length - 1]
              : void 0;
          }
          getMetaData() {
            const e = this.renderPassData.pointSeries.indexes.get(this.index);
            return this.parentSeries.dataSeries.getMetadataAt(
              e,
              this.fifoSweeping
            );
          }
          get isVerticalChart() {
            return this.renderPassData.isVerticalChart;
          }
          xCoordInternal(e) {
            return void 0 !== e
              ? this.renderPassData.xCoordinateCalculator.getCoordinate(
                  this.xVal(e)
                )
              : (void 0 !== this.xCoordCache ||
                  (this.xCoordCache =
                    this.renderPassData.xCoordinateCalculator.getCoordinate(
                      this.xVal()
                    )),
                this.xCoordCache);
          }
          yCoordInternal(e) {
            return void 0 !== e
              ? this.renderPassData.yCoordinateCalculator.getCoordinate(
                  this.yVal(e)
                )
              : (void 0 !== this.yCoordCache ||
                  (this.yCoordCache =
                    this.renderPassData.yCoordinateCalculator.getCoordinate(
                      this.yVal()
                    )),
                this.yCoordCache);
          }
        };
      },
      75933: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HeatMapDataLabelProvider = void 0);
        const r = i(75772),
          s = i(87459),
          o = i(2963),
          a = i(96528),
          n = i(22022),
          l = i(8591),
          d = i(48008),
          h = i(98353),
          u = i(86127),
          c = i(49613);
        class p extends c.BaseDataLabelProvider {
          constructor(e) {
            var t, i, r;
            super(e),
              (this.type = o.EDataLabelProviderType.Heatmap),
              (this.isEnabledProperty = !0),
              (this.numericFormatProperty = a.ENumericFormat.Decimal),
              (this.precisionProperty = 1),
              (this.numericFormatProperty =
                null !== (t = null == e ? void 0 : e.numericFormat) &&
                void 0 !== t
                  ? t
                  : this.numericFormatProperty),
              (this.precision =
                null !== (i = null == e ? void 0 : e.precision) && void 0 !== i
                  ? i
                  : this.precisionProperty),
              (this.metaDataSelector = null == e ? void 0 : e.metaDataSelector),
              (this.isEnabledProperty =
                null !== (r = null == e ? void 0 : e.isEnabled) && void 0 !== r
                  ? r
                  : this.isEnabledProperty);
          }
          get numericFormat() {
            return this.numericFormatProperty;
          }
          set numericFormat(e) {
            var t;
            (this.numericFormatProperty = e),
              null === (t = this.parentSeries) ||
                void 0 === t ||
                t.invalidateParentCallback();
          }
          get precision() {
            return this.precisionProperty;
          }
          set precision(e) {
            var t;
            (this.precisionProperty = e),
              null === (t = this.parentSeries) ||
                void 0 === t ||
                t.invalidateParentCallback();
          }
          get isEnabled() {
            return this.isEnabledProperty;
          }
          set isEnabled(e) {
            this.isEnabledProperty !== e &&
              ((this.isEnabledProperty = e), this.invalidateParent());
          }
          getText(e, t) {
            var i, r;
            if (this.metaDataSelector)
              return this.metaDataSelector(this.dataSeries.getMetadataAt(t, e));
            const s = this.zValues[t][e];
            return s == s
              ? (0, l.formatNumber)(
                  s,
                  null !== (i = this.numericFormat) && void 0 !== i
                    ? i
                    : a.ENumericFormat.Decimal,
                  null !== (r = this.precision) && void 0 !== r ? r : 1
                )
              : void 0;
          }
          getPosition(e, t, i, s, o, a, n, l) {
            let d = l.xCoordinateCalculator.getCoordinate(i),
              h = l.yCoordinateCalculator.getCoordinate(s);
            if (l.isVerticalChart) {
              const e = d;
              (d = h), (h = e);
            }
            return (
              l.xCoordinateCalculator.hasFlippedCoordinates
                ? (d += (a - o.width) / 2)
                : (d -= a - (a - o.width) / 2),
              l.yCoordinateCalculator.hasFlippedCoordinates
                ? (h += n - (n - o.height) / 2)
                : (h -= (n - o.height) / 2),
              new r.Point(d, h)
            );
          }
          shouldGenerate(e, t, i) {
            return e.height < i && e.width < t;
          }
          getColor(e, t, i) {
            return this.colorValue;
          }
          shouldSkipLabel(e, t, i, r, s) {
            const o = this.parentSeries.parentSurface.seriesViewRect;
            return (
              i.rect.y < 0 ||
              i.rect.bottom > o.height ||
              i.rect.x < 0 ||
              i.rect.right > o.width
            );
          }
          generateDataLabels(e, t) {
            var i, r;
            if (
              ((this.dataLabels = []),
              !(
                this.isEnabled &&
                this.style &&
                this.style.fontFamily &&
                this.style.fontSize
              ))
            )
              return;
            (this.dataSeries = this.parentSeries.dataSeries),
              (this.zValues = this.dataSeries.getZValues());
            const o = (0, h.getTextBounds)(this.webAssemblyContext),
              a = u.DpiHelper.adjustTextStyle(this.style),
              l = e.getFont(a);
            let c = Math.abs(
                t.xCoordinateCalculator.getCoordinate(
                  this.dataSeries.getXValue(1)
                ) -
                  t.xCoordinateCalculator.getCoordinate(
                    this.dataSeries.getXValue(0)
                  )
              ),
              p = Math.abs(
                t.yCoordinateCalculator.getCoordinate(
                  this.dataSeries.getYValue(1)
                ) -
                  t.yCoordinateCalculator.getCoordinate(
                    this.dataSeries.getYValue(0)
                  )
              );
            if (
              (l.CalculateStringBounds(
                null !== (i = this.getText(0, 0)) && void 0 !== i ? i : "",
                o,
                null !== (r = this.style.lineSpacing) && void 0 !== r ? r : 2
              ),
              t.isVerticalChart && ([p, c] = [c, p]),
              !this.shouldGenerate(new n.Size(o.m_fWidth, o.m_fHeight), c, p))
            )
              return;
            this.colorValue = (0, d.parseColorToUIntArgb)(this.color);
            const {
              xStart: g,
              xStep: y,
              yStart: f,
              yStep: v,
            } = this.parentSeries.dataSeries;
            for (let e = 0; e < this.dataSeries.arrayHeight; e++) {
              const i = f + v * e;
              if (
                !(
                  t.yCoordinateCalculator.visibleMin > i + v ||
                  t.yCoordinateCalculator.visibleMax < i
                )
              )
                for (let i = 0; i < this.dataSeries.arrayWidth; i++) {
                  const r = g + y * i;
                  if (
                    t.xCoordinateCalculator.visibleMin > r + y ||
                    t.xCoordinateCalculator.visibleMax < r
                  )
                    continue;
                  const a = this.getText(i, e);
                  if (!a) continue;
                  l.CalculateStringBounds(null != a ? a : "", o, 2);
                  const d = new n.Size(o.m_fWidth, o.m_fHeight),
                    h = this.dataSeries.getXValue(i),
                    u = this.dataSeries.getYValue(e),
                    f = this.getPosition(i, e, h, u, d, c, p, t),
                    v = {
                      text: a,
                      position: f,
                      rect: new s.Rect(
                        f.x,
                        f.y - o.GetLineBounds(0).m_fHeight,
                        d.width,
                        d.height
                      ),
                      color: this.getColor(i, e, a),
                      dataX: this.dataSeries.getXValue(i),
                      dataY: this.dataSeries.getYValue(e),
                    };
                  this.shouldSkipLabel(i, e, v, c, p) ||
                    this.dataLabels.push(v);
                }
            }
          }
          toJSON() {
            const e = super.toJSON(),
              t = {
                numericFormat: this.numericFormat,
                precision: this.precision,
                isEnabled: this.isEnabled,
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.HeatMapDataLabelProvider = p;
      },
      33802: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LineSeriesDataLabelProvider = void 0);
        const r = i(75772),
          s = i(2963),
          o = i(96852);
        class a extends o.DataLabelProvider {
          constructor(e) {
            var t;
            super(e),
              (this.type = s.EDataLabelProviderType.Line),
              (this.aboveBelowProperty = !0),
              (this.aboveBelowProperty =
                null !== (t = null == e ? void 0 : e.aboveBelow) && void 0 !== t
                  ? t
                  : this.aboveBelow);
          }
          get aboveBelow() {
            return this.aboveBelowProperty;
          }
          set aboveBelow(e) {
            (this.aboveBelowProperty = e), this.invalidateParent();
          }
          generateDataLabels(e, t) {
            const i = this.parentSeries;
            (this.yAdj = Math.ceil(i.strokeThickness / 2)),
              i.pointMarker &&
                (this.yAdj = Math.max(
                  this.yAdj,
                  Math.ceil(i.pointMarker.height / 2)
                )),
              super.generateDataLabels(e, t);
          }
          getPosition(e, t) {
            var i, s, o, a, n, l;
            if (this.aboveBelow) {
              const d =
                  e.xCoord() +
                  (null !==
                    (s =
                      null === (i = this.style.padding) || void 0 === i
                        ? void 0
                        : i.left) && void 0 !== s
                    ? s
                    : 0),
                h = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
              let u = e.yCoord() - h;
              if (e.hasNext()) {
                const i = e.yCoord(e.index + 1),
                  r = e.xCoord(e.index + 1);
                (r > d && i > u) || (r < d && i < u)
                  ? (u -=
                      this.yAdj +
                      (null !==
                        (a =
                          null === (o = e.style.padding) || void 0 === o
                            ? void 0
                            : o.bottom) && void 0 !== a
                        ? a
                        : 1))
                  : (u +=
                      t.m_fHeight +
                      this.yAdj +
                      (null !==
                        (l =
                          null === (n = e.style.padding) || void 0 === n
                            ? void 0
                            : n.top) && void 0 !== l
                        ? l
                        : 1));
              }
              return new r.Point(d, u);
            }
            return super.getPosition(e, t);
          }
          toJSON() {
            const e = super.toJSON(),
              t = { aboveBelow: this.aboveBelow };
            return Object.assign(e.options, t), e;
          }
        }
        t.LineSeriesDataLabelProvider = a;
      },
      31544: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NonUniformHeatMapDataLabelProvider = void 0);
        const r = i(75772),
          s = i(87459),
          o = i(2963),
          a = i(22022),
          n = i(48008),
          l = i(98353),
          d = i(86127),
          h = i(75933);
        class u extends h.HeatMapDataLabelProvider {
          constructor() {
            super(...arguments),
              (this.type = o.EDataLabelProviderType.NonUniformHeatmap),
              (this.cellSizeThresholdCoefficient = 1);
          }
          getPosition(e, t, i, s, o, a, n, l) {
            let d = l.xCoordinateCalculator.getCoordinate(i),
              h = l.yCoordinateCalculator.getCoordinate(s);
            if (l.isVerticalChart) {
              const e = d;
              (d = h), (h = e);
            }
            return (
              l.xCoordinateCalculator.hasFlippedCoordinates
                ? (d += (a - o.width) / 2)
                : (d -= a - (a - o.width) / 2),
              l.yCoordinateCalculator.hasFlippedCoordinates
                ? (h += n - (n - o.height) / 2)
                : (h -= (n - o.height) / 2),
              new r.Point(d, h)
            );
          }
          generateDataLabels(e, t) {
            var i, r;
            if (
              ((this.dataLabels = []),
              !this.style || !this.style.fontFamily || !this.style.fontSize)
            )
              return;
            (this.dataSeries = this.parentSeries.dataSeries),
              (this.zValues = this.dataSeries.getZValues());
            const o = (0, l.getTextBounds)(this.webAssemblyContext),
              h = d.DpiHelper.adjustTextStyle(this.style),
              u = e.getFont(h),
              c = Math.abs(
                t.xCoordinateCalculator.getCoordinate(
                  this.dataSeries.getXValue(this.dataSeries.arrayWidth)
                ) -
                  t.xCoordinateCalculator.getCoordinate(
                    this.dataSeries.getXValue(0)
                  )
              ),
              p = Math.abs(
                t.yCoordinateCalculator.getCoordinate(
                  this.dataSeries.getYValue(this.dataSeries.arrayHeight)
                ) -
                  t.yCoordinateCalculator.getCoordinate(
                    this.dataSeries.getYValue(0)
                  )
              ),
              g = this.dataSeries.xCellSizes,
              y = this.dataSeries.yCellSizes;
            u.CalculateStringBounds(
              null !== (i = this.getText(0, 0)) && void 0 !== i ? i : "",
              o,
              null !== (r = this.style.lineSpacing) && void 0 !== r ? r : 2
            );
            const f = o.m_fHeight * this.cellSizeThresholdCoefficient,
              v = o.m_fWidth * this.cellSizeThresholdCoefficient;
            this.colorValue = (0, n.parseColorToUIntArgb)(this.color);
            for (let e = 0; e < this.dataSeries.arrayHeight; e++) {
              let i = p * y[e];
              if (i < f) continue;
              const r = this.dataSeries.getYValue(e),
                n = this.dataSeries.yCellOffsets[e + 1];
              if (
                !(
                  t.yCoordinateCalculator.visibleMin > r ||
                  t.yCoordinateCalculator.visibleMax < n
                )
              )
                for (let n = 0; n < this.dataSeries.arrayWidth; n++) {
                  let l = c * g[n];
                  if (l < v) continue;
                  const d = this.dataSeries.getXValue(n),
                    h = this.dataSeries.xCellOffsets[n + 1];
                  if (
                    t.xCoordinateCalculator.visibleMin > d ||
                    t.xCoordinateCalculator.visibleMax < h
                  )
                    continue;
                  const p = this.getText(n, e);
                  if (!p) continue;
                  u.CalculateStringBounds(null != p ? p : "", o, 2);
                  const y = new a.Size(o.m_fWidth, o.m_fHeight);
                  if (t.isVerticalChart) {
                    const e = i;
                    (i = l), (l = e);
                  }
                  const f = this.getPosition(n, e, d, r, y, l, i, t),
                    m = {
                      text: p,
                      position: f,
                      rect: new s.Rect(
                        f.x,
                        f.y - o.GetLineBounds(0).m_fHeight,
                        y.width,
                        y.height
                      ),
                      color: this.getColor(n, e, p),
                      dataX: d,
                      dataY: r,
                    };
                  this.shouldSkipLabel(n, e, m, l, i) ||
                    this.dataLabels.push(m);
                }
            }
          }
        }
        t.NonUniformHeatMapDataLabelProvider = u;
      },
      93752: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedCollectionDataLabelProvider = void 0);
        const r = i(49613);
        class s extends r.BaseDataLabelProvider {
          constructor() {
            super();
          }
          generateDataLabels(e, t) {}
          draw(e) {
            for (const t of this.parentSeries.asArray())
              t.isVisible && t.dataLabelProvider.draw(e);
          }
        }
        t.StackedCollectionDataLabelProvider = s;
      },
      74026: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedColumnSeriesDataLabelProvider = void 0);
        const r = i(75772),
          s = i(2963),
          o = i(36420),
          a = i(1367),
          n = i(96852);
        class l extends n.DataLabelProvider {
          constructor(e) {
            var t;
            super(
              Object.assign(
                {
                  horizontalTextPosition: o.EHorizontalTextPosition.Center,
                  verticalTextPosition: o.EVerticalTextPosition.Center,
                },
                e
              )
            ),
              (this.type = s.EDataLabelProviderType.Column),
              (this.positionModeProperty = a.EColumnDataLabelPosition.Outside),
              (this.positionModeProperty =
                null !== (t = null == e ? void 0 : e.positionMode) &&
                void 0 !== t
                  ? t
                  : this.positionMode);
          }
          get positionMode() {
            return this.positionModeProperty;
          }
          set positionMode(e) {
            (this.positionModeProperty = e), this.invalidateParent();
          }
          CalculateShift(e) {
            const t = this.columnWidth,
              i = this.groupSize;
            return (
              e -
              (t * i) / 2 -
              (this.spacing * (i - 1)) / 2 +
              this.groupIndex * (this.spacing + t) +
              0.5 * t
            );
          }
          generateDataLabels(e, t) {
            const i = this.parentSeries;
            (this.yAdj = Math.ceil(i.strokeThickness / 2)),
              i.pointMarker &&
                (this.yAdj = Math.max(
                  this.yAdj,
                  Math.ceil(i.pointMarker.height / 2)
                )),
              super.generateDataLabels(e, t);
          }
          getPosition(e, t) {
            var i,
              s,
              n,
              l,
              d,
              h,
              u,
              c,
              p,
              g,
              y,
              f,
              v,
              m,
              S,
              P,
              C,
              x,
              b,
              A,
              T,
              E,
              R,
              w,
              D,
              L,
              M,
              I,
              O,
              k,
              _,
              V;
            const N = e.isXFlipped
                ? e.index
                : e.indexEnd - (e.index - e.indexStart),
              F = this.topVector.get(N);
            let B = e.xCoord(),
              H = e.yCoord();
            const z = e.renderPassData.yCoordinateCalculator;
            e.isVerticalChart
              ? ((H = this.CalculateShift(H)), (B = z.getCoordinate(F)))
              : ((B = this.CalculateShift(B)), (H = z.getCoordinate(F))),
              (H -= t.m_fHeight - t.GetLineBounds(0).m_fHeight),
              e.isXFlipped;
            const Y = e.isYFlipped ? -1 : 1;
            return e.isVerticalChart
              ? (this.verticalTextPosition === o.EVerticalTextPosition.Center
                  ? (H += t.m_fHeight / 2)
                  : this.verticalTextPosition === o.EVerticalTextPosition.Below
                  ? (H +=
                      t.m_fHeight +
                      (null !==
                        (s =
                          null === (i = this.style.padding) || void 0 === i
                            ? void 0
                            : i.top) && void 0 !== s
                        ? s
                        : 1))
                  : (H -=
                      null !==
                        (l =
                          null === (n = this.style.padding) || void 0 === n
                            ? void 0
                            : n.bottom) && void 0 !== l
                        ? l
                        : 0),
                this.positionMode === a.EColumnDataLabelPosition.Outside
                  ? (e.yVal() * Y >= 0
                      ? ((B += this.yAdj),
                        e.isXFlipped
                          ? (B +=
                              null !==
                                (c =
                                  null === (u = e.style.padding) || void 0 === u
                                    ? void 0
                                    : u.left) && void 0 !== c
                                ? c
                                : 1)
                          : (B -=
                              t.m_fWidth +
                              (null !==
                                (h =
                                  null === (d = e.style.padding) || void 0 === d
                                    ? void 0
                                    : d.right) && void 0 !== h
                                ? h
                                : 1)))
                      : ((B -=
                          this.yAdj -
                          (null !==
                            (g =
                              null === (p = e.style.padding) || void 0 === p
                                ? void 0
                                : p.right) && void 0 !== g
                            ? g
                            : 1)),
                        (e.isXFlipped || e.isYFlipped) &&
                          (B -=
                            t.m_fWidth +
                            (null !==
                              (f =
                                null === (y = e.style.padding) || void 0 === y
                                  ? void 0
                                  : y.left) && void 0 !== f
                              ? f
                              : 1))),
                    new r.Point(B, H))
                  : this.positionMode === a.EColumnDataLabelPosition.Inside
                  ? (e.yVal() * Y >= 0
                      ? ((B -=
                          this.yAdj +
                          (null !==
                            (m =
                              null === (v = e.style.padding) || void 0 === v
                                ? void 0
                                : v.right) && void 0 !== m
                            ? m
                            : 1)),
                        (e.isXFlipped || e.isYFlipped) &&
                          (B -=
                            t.m_fWidth +
                            (null !==
                              (P =
                                null === (S = e.style.padding) || void 0 === S
                                  ? void 0
                                  : S.left) && void 0 !== P
                              ? P
                              : 1)))
                      : ((B +=
                          this.yAdj +
                          (null !==
                            (x =
                              null === (C = e.style.padding) || void 0 === C
                                ? void 0
                                : C.left) && void 0 !== x
                            ? x
                            : 1)),
                        e.isXFlipped ||
                          (B -=
                            t.m_fWidth +
                            (null !==
                              (A =
                                null === (b = e.style.padding) || void 0 === b
                                  ? void 0
                                  : b.right) && void 0 !== A
                              ? A
                              : 1))),
                    new r.Point(B, H))
                  : super.getPosition(e, t))
              : (this.horizontalTextPosition ===
                o.EHorizontalTextPosition.Center
                  ? (B -= t.m_fWidth / 2)
                  : this.horizontalTextPosition ===
                    o.EHorizontalTextPosition.Left
                  ? (B -=
                      t.m_fWidth +
                      (null !==
                        (E =
                          null === (T = this.style.padding) || void 0 === T
                            ? void 0
                            : T.right) && void 0 !== E
                        ? E
                        : 0) +
                      t.m_fWidth)
                  : (B +=
                      null !==
                        (w =
                          null === (R = this.style.padding) || void 0 === R
                            ? void 0
                            : R.left) && void 0 !== w
                        ? w
                        : 0 + t.m_fWidth),
                this.positionMode === a.EColumnDataLabelPosition.Outside
                  ? (e.yVal() * Y >= 0
                      ? (H -=
                          this.yAdj +
                          (null !==
                            (L =
                              null === (D = e.style.padding) || void 0 === D
                                ? void 0
                                : D.bottom) && void 0 !== L
                            ? L
                            : 1))
                      : (H +=
                          t.m_fHeight +
                          this.yAdj +
                          (null !==
                            (I =
                              null === (M = e.style.padding) || void 0 === M
                                ? void 0
                                : M.top) && void 0 !== I
                            ? I
                            : 1)),
                    new r.Point(B, H))
                  : this.positionMode === a.EColumnDataLabelPosition.Inside
                  ? (e.yVal() * Y >= 0
                      ? (H +=
                          t.m_fHeight +
                          this.yAdj +
                          (null !==
                            (k =
                              null === (O = e.style.padding) || void 0 === O
                                ? void 0
                                : O.top) && void 0 !== k
                            ? k
                            : 1))
                      : (H -=
                          this.yAdj +
                          (null !==
                            (V =
                              null === (_ = e.style.padding) || void 0 === _
                                ? void 0
                                : _.bottom) && void 0 !== V
                            ? V
                            : 1)),
                    new r.Point(B, H))
                  : super.getPosition(e, t));
          }
          toJSON() {
            const e = super.toJSON(),
              t = { positionMode: this.positionMode };
            return Object.assign(e.options, t), e;
          }
        }
        t.StackedColumnSeriesDataLabelProvider = l;
      },
      1126: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TextDataLabelProvider = void 0);
        const r = i(75772),
          s = i(87459),
          o = i(98353),
          a = i(49613),
          n = i(2963),
          l = i(55172),
          d = i(36420);
        class h extends a.BaseDataLabelProvider {
          constructor(e) {
            var t, i, r, s;
            super(
              Object.assign(Object.assign({}, e), {
                style: Object.assign(
                  { fontFamily: "Arial", fontSize: 12 },
                  null == e ? void 0 : e.style
                ),
              })
            ),
              (this.type = n.EDataLabelProviderType.Text),
              (this.calculateTextBounds = !1),
              (this.horizontalTextPositionProperty =
                d.EHorizontalTextPosition.Right),
              (this.verticalTextPositionProperty =
                d.EVerticalTextPosition.Above),
              (this.isEnabledProperty = !0),
              (this.calculateTextBounds =
                null !== (t = null == e ? void 0 : e.calculateTextBounds) &&
                void 0 !== t
                  ? t
                  : this.calculateTextBounds),
              (this.horizontalTextPositionProperty =
                null !== (i = null == e ? void 0 : e.horizontalTextPosition) &&
                void 0 !== i
                  ? i
                  : this.horizontalTextPosition),
              (this.verticalTextPositionProperty =
                null !== (r = null == e ? void 0 : e.verticalTextPosition) &&
                void 0 !== r
                  ? r
                  : this.verticalTextPosition),
              (this.isEnabledProperty =
                null !== (s = null == e ? void 0 : e.isEnabled) && void 0 !== s
                  ? s
                  : this.isEnabledProperty);
          }
          get horizontalTextPosition() {
            return this.horizontalTextPositionProperty;
          }
          set horizontalTextPosition(e) {
            (this.horizontalTextPositionProperty = e), this.invalidateParent();
          }
          get verticalTextPosition() {
            return this.verticalTextPositionProperty;
          }
          set verticalTextPosition(e) {
            (this.verticalTextPositionProperty = e), this.invalidateParent();
          }
          get isEnabled() {
            return this.isEnabledProperty;
          }
          set isEnabled(e) {
            this.isEnabledProperty !== e &&
              ((this.isEnabledProperty = e), this.invalidateParent());
          }
          getPosition(e, t) {
            var i, s, o, a, n, l, h, u;
            let c = e.xCoord();
            this.horizontalTextPosition === d.EHorizontalTextPosition.Center
              ? (c -= t.m_fWidth / 2)
              : this.horizontalTextPosition === d.EHorizontalTextPosition.Left
              ? (c -=
                  t.m_fWidth +
                  (null !==
                    (s =
                      null === (i = this.style.padding) || void 0 === i
                        ? void 0
                        : i.right) && void 0 !== s
                    ? s
                    : 0))
              : (c +=
                  null !==
                    (a =
                      null === (o = this.style.padding) || void 0 === o
                        ? void 0
                        : o.right) && void 0 !== a
                    ? a
                    : 0);
            const p = t.m_fHeight - t.GetLineBounds(0).m_fHeight;
            let g = e.yCoord() - p;
            return (
              this.verticalTextPosition === d.EVerticalTextPosition.Center
                ? (g += t.m_fHeight / 2)
                : this.verticalTextPosition === d.EVerticalTextPosition.Below
                ? (g +=
                    t.m_fHeight +
                    (null !==
                      (l =
                        null === (n = this.style.padding) || void 0 === n
                          ? void 0
                          : n.top) && void 0 !== l
                      ? l
                      : 0))
                : (g -=
                    null !==
                      (u =
                        null === (h = this.style.padding) || void 0 === h
                          ? void 0
                          : h.bottom) && void 0 !== u
                      ? u
                      : 0),
              new r.Point(c, g)
            );
          }
          getColor(e, t) {
            return e.color;
          }
          generateDataLabels(e, t) {
            var i, r, a, n, h;
            if (
              ((this.dataLabels = []),
              !(
                this.isEnabled &&
                this.style &&
                this.style.fontFamily &&
                this.style.fontSize
              ))
            )
              return;
            const u = this.parentSeries.dataSeries;
            if (!u || !u.textValues)
              return void console.warn(
                "TextDataLabelProvider requires an XyTextDataSeries"
              );
            const c = new l.DataLabelState(
                e,
                t,
                this.style,
                this.color,
                t.pointSeries.yValues,
                this.parentSeries
              ),
              p = (0, o.getTextBounds)(this.webAssemblyContext),
              {
                fifoCapacity: g,
                fifoSweeping: y,
                fifoSweepingGap: f,
                fifoStartIndex: v,
              } = this.parentSeries.dataSeries,
              m = t.pointSeries.indexes,
              S =
                this.verticalTextPosition !== d.EVerticalTextPosition.Above ||
                this.horizontalTextPosition !==
                  d.EHorizontalTextPosition.Right ||
                this.calculateTextBounds;
            if (u) {
              c.font.CalculateStringBounds(
                null !== (i = u.getTextValue(0)) && void 0 !== i ? i : "",
                p,
                null !==
                  (a =
                    null === (r = this.style) || void 0 === r
                      ? void 0
                      : r.lineSpacing) && void 0 !== a
                  ? a
                  : 2
              );
              for (let e = 0; e < m.size(); e++) {
                c.index = e;
                const t = m.get(c.index);
                if (y && c.pointCount === g && c.index >= v && c.index < v + f)
                  continue;
                const i = u.getTextValue(t);
                S &&
                  c.font.CalculateStringBounds(
                    null != i ? i : "",
                    p,
                    null !==
                      (h =
                        null === (n = this.style) || void 0 === n
                          ? void 0
                          : n.lineSpacing) && void 0 !== h
                      ? h
                      : 2
                  );
                const r = this.getPosition(c, p),
                  o = p.GetLineBounds(0).m_fHeight,
                  a = {
                    text: i,
                    position: r,
                    rect: new s.Rect(r.x, r.y - o, p.m_fWidth, p.m_fHeight),
                    color: this.getColor(c, i),
                    dataX: c.xCoord(),
                    dataY: c.yCoord(),
                  };
                this.dataLabels.push(a);
              }
            }
            this.onAfterGenerate(this.dataLabels);
          }
          onAfterGenerate(e) {}
          toJSON() {
            const e = super.toJSON(),
              t = {
                calculateTextBounds: this.calculateTextBounds,
                horizontalTextPosition: this.horizontalTextPosition,
                verticalTextPosition: this.verticalTextPosition,
                isEnabled: this.isEnabled,
              };
            return Object.assign(e.options, t), e;
          }
        }
        t.TextDataLabelProvider = h;
      },
      7807: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BandSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(51269),
          o = i(21915),
          a = i(16185),
          n = i(14184),
          l = i(20977),
          d = i(65043);
        class h extends d.BaseSeriesDrawingProvider {
          constructor(e, t, i, r) {
            super(e, t, i),
              (this.args = new this.webAssemblyContext.SCRTBandDrawingParams()),
              (this.y1Selector = null != r ? r : (e) => e.y1Values),
              (this.linesPenCache = new o.Pen2DCache(e)),
              (this.strokePenY1Cache = new o.Pen2DCache(e)),
              (this.fillBrushCache = new s.BrushCache(e)),
              (this.fillBrushY1Cache = new s.BrushCache(e));
          }
          onAttachSeries() {
            super.onAttachSeries(),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTBandSeriesDrawingProvider());
            const {
                parentSurface: e,
                stroke: t,
                strokeThickness: i,
                fill: r,
                strokeY1: a,
                fillY1: l,
                opacity: d,
                strokeDashArray: h,
                strokeY1DashArray: u,
                fillLinearGradient: c,
                fillLinearGradientY1: p,
              } = this.parentSeries,
              g = (null == e ? void 0 : e.isCopyCanvasSurface)
                ? e.domCanvas2D.height /
                  n.SciChartSurfaceBase.domMasterCanvas.height
                : 1,
              y = (null == e ? void 0 : e.isCopyCanvasSurface)
                ? e.domCanvas2D.width /
                  n.SciChartSurfaceBase.domMasterCanvas.width
                : 1;
            (0, o.createPenInCache)(this.linesPenCache, t, i, d, h),
              (0, o.createPenInCache)(this.strokePenY1Cache, a, i, d, u),
              (0, s.createBrushInCache)(this.fillBrushCache, r, d, g, y, c),
              (0, s.createBrushInCache)(this.fillBrushY1Cache, l, d, g, y, p);
          }
          onDetachSeries() {
            super.onDetachSeries(), this.delete();
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              (this.args = (0, r.deleteSafe)(this.args)),
              (this.linesPenCache = (0, r.deleteSafe)(this.linesPenCache)),
              (this.fillBrushCache = (0, r.deleteSafe)(this.fillBrushCache)),
              (this.strokePenY1Cache = (0, r.deleteSafe)(
                this.strokePenY1Cache
              )),
              (this.fillBrushY1Cache = (0, r.deleteSafe)(
                this.fillBrushY1Cache
              )),
              super.delete();
          }
          draw(e, t) {
            var i;
            const r = t.pointSeries,
              n =
                this.parentSeries.dataSeries.dataDistributionCalculator
                  .containsNaN;
            this.args.Reset(),
              (this.args.forceShaderMethod = !0),
              (this.args.verticalChart = t.isVerticalChart),
              (this.args.lineGaps = n
                ? this.parentSeries.drawNaNAs ===
                  a.ELineDrawMode.DiscontinuousLine
                  ? this.webAssemblyContext.SCRTLineGapMode.DrawGaps
                  : this.webAssemblyContext.SCRTLineGapMode.CloseGaps
                : this.webAssemblyContext.SCRTLineGapMode.Default),
              (this.args.isDigitalLine = this.parentSeries.isDigitalLine);
            const l = (0, s.getScrtBrushFromCache)(this.fillBrushCache);
            l && this.args.SetFillBrush(l);
            const d = (0, o.getScrtPenFromCache)(this.linesPenCache);
            d && this.args.SetLinesPen(d);
            const h = (0, s.getScrtBrushFromCache)(this.fillBrushY1Cache);
            h && this.args.SetFillBrush1(h);
            const u = (0, o.getScrtPenFromCache)(this.strokePenY1Cache);
            u && this.args.SetLinesPen1(u);
            const c = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
              p = r.xValues,
              {
                fifoCapacity: g,
                fifoSweeping: y,
                fifoSweepingGap: f,
              } = this.parentSeries.dataSeries,
              v = r.fifoStartIndex;
            let m = c ? r.indexes : p,
              S = this.ySelector(r),
              P = this.y1Selector(r);
            const { startIndex: C, count: x } = this.getStartAndCount(t, m);
            (this.args.count = x),
              (this.args.startIndex = C),
              g > 0 &&
                y &&
                g === this.parentSeries.dataSeries.count() &&
                (this.args.count = v),
              super.applyStrokeFillPaletting(
                void 0,
                void 0,
                void 0,
                void 0,
                this.parentSeries.opacity,
                !0,
                !0,
                t
              );
            const b =
              null === (i = this.palettingState.paletteTextureCache) ||
              void 0 === i
                ? void 0
                : i.value;
            b && this.args.SetPalette(b),
              (this.args.isSmoothColors =
                this.palettingState.gradientPaletting);
            const A = e.getNativeContext();
            this.nativeDrawingProvider.DrawPointsVec(
              A,
              m,
              S,
              P,
              t.xCoordinateCalculator.nativeCalculator,
              t.yCoordinateCalculator.nativeCalculator,
              this.args
            ),
              g > 0 &&
                y &&
                g === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(S.size(), v + f)),
                (this.args.count = Math.max(0, S.size() - v - f)),
                this.args.count > 0 &&
                  this.nativeDrawingProvider.DrawPointsVec(
                    A,
                    m,
                    S,
                    P,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args
                  ));
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(l.PROPERTY.STROKE),
              this.onSeriesPropertyChange(l.PROPERTY.STROKE_Y1);
          }
          onSeriesPropertyChange(e) {
            super.onSeriesPropertyChange(e);
            const {
              parentSurface: t,
              stroke: i,
              strokeY1: r,
              strokeThickness: a,
              fill: d,
              fillY1: h,
              opacity: u,
              strokeDashArray: c,
              strokeY1DashArray: p,
              fillLinearGradient: g,
              fillLinearGradientY1: y,
            } = this.parentSeries;
            if (
              e === l.PROPERTY.STROKE ||
              e === l.PROPERTY.STROKE_THICKNESS ||
              e === l.PROPERTY.OPACITY ||
              e === l.PROPERTY.STROKE_DASH_ARRAY
            )
              return (
                (this.palettingState.requiresUpdate = !0),
                void (0, o.createPenInCache)(this.linesPenCache, i, a, u, c)
              );
            if (
              e === l.PROPERTY.STROKE_Y1 ||
              e === l.PROPERTY.STROKE_THICKNESS ||
              e === l.PROPERTY.OPACITY ||
              e === l.PROPERTY.STROKE_Y1_DASH_ARRAY
            )
              return (
                (this.palettingState.requiresUpdate = !0),
                void (0, o.createPenInCache)(this.strokePenY1Cache, r, a, u, p)
              );
            const f = (null == t ? void 0 : t.isCopyCanvasSurface)
                ? t.domCanvas2D.height /
                  n.SciChartSurfaceBase.domMasterCanvas.height
                : 1,
              v = (null == t ? void 0 : t.isCopyCanvasSurface)
                ? t.domCanvas2D.width /
                  n.SciChartSurfaceBase.domMasterCanvas.width
                : 1;
            (e !== l.PROPERTY.FILL &&
              e !== l.PROPERTY.OPACITY &&
              e !== l.PROPERTY.FILL_LINEAR_GRADIENT) ||
              ((this.palettingState.requiresUpdate = !0),
              (0, s.createBrushInCache)(this.fillBrushCache, d, u, f, v, g)),
              (e !== l.PROPERTY.FILL_Y1 &&
                e !== l.PROPERTY.OPACITY &&
                e !== l.PROPERTY.FILL_LINEAR_GRADIENT_Y1) ||
                ((this.palettingState.requiresUpdate = !0),
                (0, s.createBrushInCache)(
                  this.fillBrushY1Cache,
                  h,
                  u,
                  f,
                  v,
                  y
                ));
          }
        }
        t.BandSeriesDrawingProvider = h;
      },
      65043: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseSeriesDrawingProvider = void 0);
        const r = i(55023),
          s = i(56744),
          o = i(23866),
          a = i(22950),
          n = i(8591),
          l = i(48008),
          d = i(59348),
          h = i(32747),
          u = i(33841),
          c = i(20977);
        class p extends r.DeletableEntity {
          constructor(e, t, i, r) {
            var s;
            super(),
              o.Guard.notNull(e, "webAssemblyContext"),
              o.Guard.notNull(t, "parentSeries"),
              (this.webAssemblyContext = e),
              (this.parentSeries = t),
              (this.ySelector = null != i ? i : (e) => e.yValues),
              (this.xSelector = null != r ? r : (e) => e.xValues),
              (this.palettingState = {
                palettedColors: void 0,
                palettedColorsHashCode: 0,
                gradientPaletting: !1,
                paletteTextureCache: new d.PaletteCache(e),
                requiresUpdate: !0,
              }),
              (this.seriesHasDataChanges =
                this.seriesHasDataChanges.bind(this)),
              (this.parentDataSeries = this.parentSeries.dataSeries),
              null === (s = this.parentDataSeries) ||
                void 0 === s ||
                s.dataChanged.subscribe(this.seriesHasDataChanges);
          }
          getStartAndCount(e, t) {
            var i, r, s;
            const o = null == e ? void 0 : e.pointSeries,
              a =
                null === (i = this.parentSeries) || void 0 === i
                  ? void 0
                  : i.xAxis,
              n =
                null === (r = null == a ? void 0 : a.clipToXRange) ||
                void 0 === r ||
                r;
            let l = t.size(),
              d = Math.min(o ? o.xValues.size() : l, l),
              h = 0;
            return (
              n &&
                !(null == o ? void 0 : o.resampled) &&
                (null === (s = null == e ? void 0 : e.indexRange) ||
                void 0 === s
                  ? void 0
                  : s.diff) >= 0 &&
                (e.indexRange.diff + 1 < d && (h = e.indexRange.min),
                (d = Math.min(e.indexRange.diff + 1, d))),
              { startIndex: h, count: d }
            );
          }
          applyStrokePaletting(e, t) {
            var i, r, s, o;
            const n = this.parentSeries.paletteProvider;
            if (
              this.parentSeries.hasStrokePaletteProvider() ||
              void 0 !== n.applyPaletting
            ) {
              const o = (0, a.uintArgbColorMultiplyOpacity)(
                (0, l.parseColorToUIntArgb)(this.parentSeries.stroke),
                this.parentSeries.opacity
              );
              if (isNaN(o))
                throw Error(
                  "applyStrokePaletting(): renderSeries.stroke " +
                    this.parentSeries.stroke +
                    " cannot be converted to a valid color"
                );
              const d = this.parentSeries.paletteProvider,
                u = this.parentSeries.dataSeries,
                c =
                  null ==
                  (t =
                    null != t
                      ? t
                      : this.parentSeries.getCurrentRenderPassData())
                    ? void 0
                    : t.pointSeries,
                p =
                  null !== (i = c ? this.xSelector(c) : void 0) && void 0 !== i
                    ? i
                    : u.getNativeXValues(),
                g =
                  null !== (r = c ? this.ySelector(c) : void 0) && void 0 !== r
                    ? r
                    : u.getNativeYValues(),
                { startIndex: y, count: f } = this.getStartAndCount(t, p);
              if (
                (this.palettingState.palettedColors ||
                  (this.palettingState.palettedColors =
                    new this.webAssemblyContext.UIntVector()),
                (this.palettingState.originalPenColor = e.m_uiColor),
                (e.m_uiColor = 4294967295),
                (e.m_bGradient =
                  d.strokePaletteMode === h.EStrokePaletteMode.GRADIENT),
                n.applyPaletting)
              )
                return void n.applyPaletting(
                  this.palettingState,
                  p,
                  g,
                  null !== (s = null == c ? void 0 : c.indexes) && void 0 !== s
                    ? s
                    : u.getNativeIndexes(),
                  y,
                  f
                );
              if (
                (this.shouldUpdatePalette(t, d, y, f),
                !this.palettingState.requiresUpdate)
              )
                return;
              this.palettingState.palettedColors.clear(),
                this.palettingState.palettedColors.reserve(f);
              const v = c && c.indexes.size() > 0;
              for (let e = y; e < y + f; e++) {
                let t = v ? c.indexes.get(e) : e;
                t < 0 ? (t = 0) : t >= u.count() && (t = u.count() - 1);
                const i = p.get(e),
                  r = g.get(e),
                  s = d.overrideStrokeArgb(
                    i,
                    r,
                    t,
                    this.parentSeries.opacity,
                    u.getMetadataAt(t)
                  );
                this.parentSeries.pushPalettedColors(
                  s || o,
                  this.palettingState
                );
              }
              this.palettingState.requiresUpdate = !1;
            } else
              this.palettingState.originalPenColor &&
                ((e.m_uiColor = this.palettingState.originalPenColor),
                (this.palettingState.originalPenColor = void 0)),
                null === (o = this.palettingState.palettedColors) ||
                  void 0 === o ||
                  o.clear();
            this.palettingState.palettedColors ||
              (this.palettingState.palettedColors =
                new this.webAssemblyContext.UIntVector());
          }
          applyStrokeFillPaletting(e, t, i, r, s, o = !1, d = !0, u) {
            var c, p, g, y, f, v;
            const m = this.parentSeries.hasStrokePaletteProvider(),
              S = this.parentSeries.hasFillPaletteProvider(),
              P = this.parentSeries.hasPointMarkerPaletteProvider(),
              C = this.parentSeries.paletteProvider,
              x = this.parentSeries.paletteProvider,
              b = void 0 !== (null == x ? void 0 : x.applyPaletting);
            if (m || S || P || b) {
              let v, S;
              if (o)
                v = S =
                  this.webAssemblyContext.SCRTPalette.GetNoOverrideColorCode();
              else {
                const t = void 0 !== s;
                (v =
                  e && t
                    ? (0, a.uintArgbColorMultiplyOpacity)(
                        (0, l.parseColorToUIntArgb)(e),
                        1
                      )
                    : 4294967295),
                  (S =
                    i && t
                      ? (0, a.uintArgbColorMultiplyOpacity)(
                          (0, l.parseColorToUIntArgb)(i),
                          1
                        )
                      : 4294967295);
              }
              if (isNaN(v))
                throw Error(
                  "updatePalette(): parentSeries.stroke " +
                    e +
                    " cannot be converted to a valid color"
                );
              if (isNaN(S))
                throw Error(
                  "updatePalette(): fillColor " +
                    S +
                    " cannot be converted to a valid color"
                );
              const P = this.parentSeries.dataSeries,
                b =
                  null ==
                  (u =
                    null != u
                      ? u
                      : this.parentSeries.getCurrentRenderPassData())
                    ? void 0
                    : u.pointSeries,
                A =
                  null !== (c = b ? this.xSelector(b) : void 0) && void 0 !== c
                    ? c
                    : P.getNativeXValues(),
                T =
                  null !== (p = b ? this.ySelector(b) : void 0) && void 0 !== p
                    ? p
                    : P.getNativeYValues(),
                { startIndex: E, count: R } = this.getStartAndCount(u, A);
              if (
                (this.palettingState.palettedColors ||
                  (this.palettingState.palettedColors =
                    new this.webAssemblyContext.UIntVector()),
                x.applyPaletting)
              )
                return void x.applyPaletting(
                  this.palettingState,
                  A,
                  T,
                  null !== (g = null == b ? void 0 : b.indexes) && void 0 !== g
                    ? g
                    : P.getNativeIndexes(),
                  E,
                  R
                );
              if (
                (this.shouldUpdatePalette(u, C, E, R),
                !this.palettingState.requiresUpdate)
              )
                return;
              this.palettingState.paletteTextureCache.reset(),
                this.palettingState.palettedColors.clear(),
                this.palettingState.palettedColors.reserve(2 * R),
                d &&
                  (t &&
                    m &&
                    ((this.palettingState.originalPenColor = t.m_uiColor),
                    (t.m_uiColor = 4294967295),
                    (this.palettingState.originalPenGradient = t.m_bGradient),
                    (t.m_bGradient =
                      C.strokePaletteMode === h.EStrokePaletteMode.GRADIENT)),
                  r &&
                    ((this.palettingState.originalBrushColor = r.GetColor()),
                    r.SetColor(4294967295)));
              let w = 0;
              const D = b && b.indexes.size() > 0;
              for (let e = E; e < E + R; e++) {
                let t = D ? b.indexes.get(e) : e;
                t < 0 ? (t = 0) : t >= P.count() && (t = P.count() - 1);
                const i = A.get(e),
                  r = T.get(e),
                  o = this.overridePaletteProviderColors(
                    this.parentSeries,
                    i,
                    r,
                    t,
                    s,
                    P.getMetadataAt(t)
                  ),
                  a = null !== (y = o.stroke) && void 0 !== y ? y : v,
                  l = null !== (f = o.fill) && void 0 !== f ? f : S;
                this.palettingState.palettedColors.push_back(a),
                  this.palettingState.palettedColors.push_back(l),
                  (w = (0, n.numericHashCode)(w, a)),
                  (w = (0, n.numericHashCode)(w, l));
              }
              o &&
                (this.palettingState.palettedColorsHashCode !== w &&
                  this.palettingState.paletteTextureCache.reset(),
                this.palettingState.paletteTextureCache.create(
                  this.palettingState.palettedColors
                ),
                (this.palettingState.palettedColorsHashCode = w)),
                (this.palettingState.requiresUpdate = !1);
            } else
              this.palettingState.paletteTextureCache.reset(),
                null === (v = this.palettingState.palettedColors) ||
                  void 0 === v ||
                  v.clear(),
                t &&
                  (this.palettingState.originalPenColor &&
                    ((t.m_uiColor = this.palettingState.originalPenColor),
                    (this.palettingState.originalPenColor = void 0)),
                  this.palettingState.originalPenGradient &&
                    ((t.m_bGradient = this.palettingState.originalPenGradient),
                    (this.palettingState.originalPenGradient = void 0))),
                r &&
                  this.palettingState.originalBrushColor &&
                  (r.SetColor(this.palettingState.originalBrushColor),
                  (this.palettingState.originalBrushColor = void 0));
            this.palettingState.palettedColors ||
              (this.palettingState.palettedColors =
                new this.webAssemblyContext.UIntVector()),
              (this.palettingState.gradientPaletting =
                this.isGradientFillPaletting(this.parentSeries));
          }
          createSolidBrush(e, t) {
            return (0, u.createSolidBrush)(this.webAssemblyContext, e, t);
          }
          delete() {
            this.palettingState.palettedColors &&
              (this.palettingState.palettedColors = (0, s.deleteSafe)(
                this.palettingState.palettedColors
              )),
              (this.palettingState.paletteTextureCache = (0, s.deleteSafe)(
                this.palettingState.paletteTextureCache
              ));
          }
          onSeriesPropertyChange(e) {
            var t, i;
            e === c.PROPERTY.DATA_SERIES &&
              (null === (t = this.parentDataSeries) ||
                void 0 === t ||
                t.dataChanged.unsubscribe(this.seriesHasDataChanges),
              (this.parentDataSeries = this.parentSeries.dataSeries),
              null === (i = this.parentDataSeries) ||
                void 0 === i ||
                i.dataChanged.subscribe(this.seriesHasDataChanges),
              (this.palettingState.requiresUpdate = !0));
          }
          onDpiChanged(e) {}
          onAttachSeries() {}
          onDetachSeries() {}
          seriesHasDataChanges() {
            this.palettingState.requiresUpdate = !0;
          }
          shouldUpdatePalette(e, t, i, r) {
            var s, o, a, n, l, d;
            (null === (s = null == e ? void 0 : e.pointSeries) || void 0 === s
              ? void 0
              : s.resampled) &&
              (null == e ? void 0 : e.resamplingHash) !==
                this.palettingState.lastResamplingHash &&
              ((this.palettingState.lastResamplingHash =
                null == e ? void 0 : e.resamplingHash),
              (this.palettingState.requiresUpdate = !0)),
              null !== (o = t.isRangeIndependant) && void 0 !== o && o
                ? (null !== (l = this.palettingState.lastStartIndex) &&
                  void 0 !== l
                    ? l
                    : Number.MAX_SAFE_INTEGER) > i ||
                  (null !== (d = this.palettingState.lastCount) && void 0 !== d
                    ? d
                    : 0) < r ||
                  i + r >
                    this.palettingState.lastStartIndex +
                      this.palettingState.lastCount
                  ? ((this.palettingState.lastStartIndex = i),
                    (this.palettingState.lastCount = r),
                    (this.palettingState.requiresUpdate = !0),
                    (this.palettingState.paletteStartIndex = 0))
                  : (this.palettingState.paletteStartIndex =
                      i - this.palettingState.lastStartIndex)
                : ((null !== (a = this.palettingState.lastStartIndex) &&
                  void 0 !== a
                    ? a
                    : 0) === i &&
                    (null !== (n = this.palettingState.lastCount) &&
                    void 0 !== n
                      ? n
                      : 0) === r) ||
                  ((this.palettingState.lastStartIndex = i),
                  (this.palettingState.lastCount = r),
                  (this.palettingState.requiresUpdate = !0),
                  (this.palettingState.paletteStartIndex = 0)),
              (t.shouldUpdatePalette && !t.shouldUpdatePalette()) ||
                (this.palettingState.requiresUpdate = !0);
          }
          overridePaletteProviderColors(e, t, i, r, s, o) {
            let a, n;
            return (
              e.hasStrokePaletteProvider() &&
                (a = e.paletteProvider.overrideStrokeArgb(t, i, r, s, o)),
              e.hasFillPaletteProvider() &&
                (n = e.paletteProvider.overrideFillArgb(t, i, r, s, o)),
              { stroke: a, fill: n }
            );
          }
          isGradientFillPaletting(e) {
            return (
              !!e.hasFillPaletteProvider() &&
              e.paletteProvider.fillPaletteMode === h.EFillPaletteMode.GRADIENT
            );
          }
        }
        t.BaseSeriesDrawingProvider = p;
      },
      9297: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BubbleSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(86127),
          o = i(65043);
        class a extends o.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTBubbleSeriesDrawingProvider()),
              (this.args =
                new this.webAssemblyContext.SCRTPointDrawingParams());
          }
          onSeriesPropertyChange(e) {}
          draw(e, t) {
            var i;
            const r = this.parentSeries.pointMarker;
            if (void 0 === r) return;
            const o = r.getSprite(),
              a = t.pointSeries,
              n = t.xCoordinateCalculator.isCategoryCoordinateCalculator;
            this.args.Reset();
            const l = a.xValues,
              d = a.yValues,
              h = a.zValues,
              { startIndex: u, count: c } = this.getStartAndCount(t, l);
            (this.args.count = c), (this.args.startIndex = u);
            const {
                fifoCapacity: p,
                fifoSweeping: g,
                fifoSweepingGap: y,
              } = this.parentSeries.dataSeries,
              f = a.fifoStartIndex;
            g &&
              p === this.parentSeries.dataSeries.count() &&
              (this.args.count = f),
              (this.args.verticalChart = t.isVerticalChart),
              (this.args.forceShaderMethod = !0),
              this.args.SetSpriteTexture(o.getTexture()),
              super.applyStrokeFillPaletting(
                this.parentSeries.stroke,
                void 0,
                void 0,
                void 0,
                this.parentSeries.opacity
              ),
              this.args.SetPalettedColors(this.palettingState.palettedColors),
              (this.args.paletteStart =
                null !== (i = this.palettingState.paletteStartIndex) &&
                void 0 !== i
                  ? i
                  : 0),
              (this.args.zMultiplier =
                this.parentSeries.zMultiplier * s.DpiHelper.PIXEL_RATIO);
            let v = n ? a.indexes : l;
            const m = e.getNativeContext();
            this.drawPoints(
              m,
              v,
              d,
              h,
              t.xCoordinateCalculator.nativeCalculator,
              t.yCoordinateCalculator.nativeCalculator,
              this.args,
              this.parentSeries.parentSurface.seriesViewRect
            ),
              g &&
                p === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(d.size(), f + y)),
                (this.args.count = Math.max(0, d.size() - f - y)),
                this.args.count > 0 &&
                  this.drawPoints(
                    m,
                    v,
                    d,
                    h,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args,
                    this.parentSeries.parentSurface.seriesViewRect
                  ));
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              (this.args = (0, r.deleteSafe)(this.args)),
              super.delete();
          }
          overridePaletteProviderColors(e, t, i, r, s, o) {
            if (e.hasPointMarkerPaletteProvider()) {
              const a = e.paletteProvider.overridePointMarkerArgb(
                t,
                i,
                r,
                s,
                o
              );
              if (a) return a;
            }
            return { stroke: void 0, fill: void 0 };
          }
          isGradientFillPaletting(e) {
            return !1;
          }
          drawPoints(e, t, i, r, s, o, a, n) {
            this.nativeDrawingProvider.DrawPointsVec(e, t, i, r, s, o, a);
          }
        }
        t.BubbleSeriesDrawingProvider = a;
      },
      50836: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ColumnSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(51269),
          o = i(21915),
          a = i(14184),
          n = i(20977),
          l = i(65043);
        class d extends l.BaseSeriesDrawingProvider {
          constructor(e, t, i, r) {
            super(e, t, i, r),
              (this.nativeDrawingProvider =
                new e.SCRTColumnSeriesDrawingProvider()),
              (this.args =
                new this.webAssemblyContext.SCRTColumnDrawingParams()),
              (this.strokePenCache = new o.Pen2DCache(e)),
              (this.strokePenFillColoredCache = new o.Pen2DCache(e)),
              (this.fillBrushCache = new s.BrushCache(e));
            const {
              stroke: a,
              strokeThickness: n,
              fill: l,
              opacity: d,
            } = this.getProperties(this.parentSeries);
            (0, o.createPenInCache)(this.strokePenCache, a, n, d),
              0 === n &&
                (0, o.createPenInCache)(
                  this.strokePenFillColoredCache,
                  l,
                  1,
                  d
                ),
              this.createBrush();
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              (this.args = (0, r.deleteSafe)(this.args)),
              (this.strokePenCache = (0, r.deleteSafe)(this.strokePenCache)),
              (this.strokePenFillColoredCache = (0, r.deleteSafe)(
                this.strokePenFillColoredCache
              )),
              (this.fillBrushCache = (0, r.deleteSafe)(this.fillBrushCache)),
              super.delete();
          }
          getProperties(e) {
            const {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              fill: s,
              fillLinearGradient: o,
            } = e;
            return {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              fill: s,
              fillLinearGradient: o,
            };
          }
          draw(e, t) {
            const i = t.pointSeries,
              r = this.parentSeries.parentSurface.seriesViewRect,
              { strokeThickness: a } = this.getProperties(this.parentSeries);
            this.args.Reset(),
              (this.args.forceShaderMethod = !0),
              (this.args.verticalChart = t.isVerticalChart),
              (this.args.zeroLineY = this.parentSeries.zeroLineY),
              (this.args.columnWidth = this.parentSeries.getDataPointWidth(
                t.xCoordinateCalculator,
                this.parentSeries.dataPointWidth,
                this.parentSeries.dataPointWidthMode
              )),
              (this.args.bottomRadius = this.parentSeries.cornerRadius);
            let n = this.strokePenCache;
            1 === this.args.columnWidth &&
              0 === a &&
              ((this.args.columnWidth = 0),
              (n = this.strokePenFillColoredCache));
            const l = (0, o.getScrtPenFromCache)(n);
            l && this.args.SetLinesPen(l);
            const d = (0, s.getScrtBrushFromCache)(this.fillBrushCache);
            d && this.args.SetFillBrush(d),
              (this.args.viewportWidth = r.width),
              (this.args.viewportHeight = r.height),
              super.applyStrokeFillPaletting(
                this.parentSeries.stroke,
                l,
                this.parentSeries.fill,
                d,
                this.parentSeries.opacity,
                !1,
                void 0 !== this.parentSeries.fillLinearGradient
              ),
              this.args.SetPalettedColors(this.palettingState.palettedColors),
              (this.args.paletteStart =
                2 * this.palettingState.paletteStartIndex);
            const h = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
              u = this.xSelector(i),
              c = this.ySelector(i),
              p = h ? i.indexes : u,
              { startIndex: g, count: y } = this.getStartAndCount(t, p);
            (this.args.count = y), (this.args.startIndex = g);
            const {
                fifoCapacity: f,
                fifoSweeping: v,
                fifoSweepingGap: m,
              } = this.parentSeries.dataSeries,
              S = i.fifoStartIndex;
            v &&
              f === this.parentSeries.dataSeries.count() &&
              (this.args.count = S);
            const P = e.getNativeContext();
            this.nativeDrawingProvider.DrawPointsVec(
              P,
              p,
              c,
              t.xCoordinateCalculator.nativeCalculator,
              t.yCoordinateCalculator.nativeCalculator,
              this.args
            ),
              v &&
                f === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(c.size(), S + m)),
                (this.args.count = Math.max(0, c.size() - S - m)),
                this.args.count > 0 &&
                  this.nativeDrawingProvider.DrawPointsVec(
                    P,
                    p,
                    c,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args
                  ));
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(n.PROPERTY.STROKE);
          }
          onSeriesPropertyChange(e) {
            super.onSeriesPropertyChange(e);
            const {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              fill: s,
            } = this.parentSeries;
            (e !== n.PROPERTY.STROKE &&
              e !== n.PROPERTY.STROKE_THICKNESS &&
              e !== n.PROPERTY.OPACITY) ||
              (0, o.createPenInCache)(this.strokePenCache, t, i, r),
              (e !== n.PROPERTY.FILL && e !== n.PROPERTY.OPACITY) ||
                this.createBrush(),
              0 !== i ||
                (e !== n.PROPERTY.STROKE_THICKNESS &&
                  e !== n.PROPERTY.STROKE &&
                  e !== n.PROPERTY.OPACITY &&
                  e !== n.PROPERTY.FILL) ||
                (0, o.createPenInCache)(
                  this.strokePenFillColoredCache,
                  s,
                  1,
                  r
                );
          }
          createBrush() {
            const e = this.parentSeries.parentSurface,
              {
                fillLinearGradient: t,
                fill: i,
                opacity: r,
              } = this.getProperties(this.parentSeries),
              o = (null == e ? void 0 : e.isCopyCanvasSurface)
                ? e.domCanvas2D.height /
                  a.SciChartSurfaceBase.domMasterCanvas.height
                : 1,
              n = (null == e ? void 0 : e.isCopyCanvasSurface)
                ? e.domCanvas2D.width /
                  a.SciChartSurfaceBase.domMasterCanvas.width
                : 1;
            return (0, s.createBrushInCache)(
              this.fillBrushCache,
              i,
              r,
              o,
              n,
              t
            );
          }
        }
        t.ColumnSeriesDrawingProvider = d;
      },
      71788: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ErrorSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(2192),
          o = i(79226),
          a = i(32287),
          n = i(21915),
          l = i(16185),
          d = i(51392),
          h = i(98353),
          u = i(20977),
          c = i(65043);
        class p extends c.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t), (this.linesPenCache = new n.Pen2DCache(e));
          }
          onAttachSeries() {
            super.onAttachSeries();
            const {
              stroke: e,
              strokeThickness: t,
              opacity: i,
              strokeDashArray: r,
            } = this.parentSeries;
            (0, n.createPenInCache)(this.linesPenCache, e, t, i, r);
          }
          onDetachSeries() {
            super.onDetachSeries(), this.delete();
          }
          delete() {
            (this.linesPenCache = (0, r.deleteSafe)(this.linesPenCache)),
              super.delete();
          }
          draw(e, t) {
            const i = (0, n.getScrtPenFromCache)(this.linesPenCache);
            if (!i) return;
            const r = t.pointSeries,
              u = (0, h.getVectorColorVertex)(this.webAssemblyContext),
              c = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
              p = r.xValues,
              g = c ? r.indexes : p,
              y = r.yValues,
              f = r.highValues,
              v = r.lowValues,
              m =
                this.parentSeries.errorDirection === o.EErrorDirection.Vertical,
              S = m ? t.xCoordinateCalculator : t.yCoordinateCalculator,
              P =
                0.5 *
                this.parentSeries.getDataPointWidth(
                  S,
                  this.parentSeries.dataPointWidth,
                  this.parentSeries.dataPointWidthMode
                ),
              C = this.parentSeries.xAxis.type === s.EAxisType.LogarithmicAxis,
              x = this.parentSeries.yAxis.type === s.EAxisType.LogarithmicAxis,
              b = this.parentSeries.xAxis.isNegative,
              A = this.parentSeries.yAxis.isNegative,
              T = this.parentSeries.errorMode !== a.EErrorMode.Low,
              E = this.parentSeries.errorMode !== a.EErrorMode.High,
              R = g.size();
            if (m)
              for (let e = 0; e < R; ++e) {
                const i = g.get(e),
                  r = y.get(e);
                let s = T ? f.get(e) : r,
                  o = E ? v.get(e) : r;
                const a = x && !A && o <= 0;
                a && (o = this.parentSeries.yAxis.visibleRange.min);
                const n = x && A && s >= 0;
                n && (s = this.parentSeries.yAxis.visibleRange.max);
                const l = t.xCoordinateCalculator.getCoordinate(i),
                  d = t.yCoordinateCalculator.getCoordinate(r),
                  h = t.yCoordinateCalculator.getCoordinate(s),
                  c = t.yCoordinateCalculator.getCoordinate(o),
                  p = l - P,
                  m = l + P;
                this.parentSeries.drawConnector &&
                  this.addLineVertices(
                    u,
                    l,
                    isNaN(s) ? d : h,
                    l,
                    isNaN(o) ? d : c
                  ),
                  T &&
                    !n &&
                    this.parentSeries.drawWhiskers &&
                    this.addLineVertices(u, p, h, m, h),
                  E &&
                    !a &&
                    this.parentSeries.drawWhiskers &&
                    this.addLineVertices(u, p, c, m, c);
              }
            else
              for (let e = 0; e < R; ++e) {
                const i = g.get(e),
                  r = y.get(e);
                let s = E ? v.get(e) : i,
                  o = T ? f.get(e) : i;
                const a = C && !b && s <= 0;
                a && (s = d.MIN_LOG_AXIS_VALUE);
                const n = C && b && o >= 0;
                n && (o = -d.MIN_LOG_AXIS_VALUE);
                const l = t.xCoordinateCalculator.getCoordinate(i),
                  h = t.yCoordinateCalculator.getCoordinate(r),
                  c = t.xCoordinateCalculator.getCoordinate(o),
                  p = t.xCoordinateCalculator.getCoordinate(s),
                  m = h - P,
                  S = h + P;
                this.parentSeries.drawConnector &&
                  this.addLineVertices(
                    u,
                    isNaN(s) ? l : p,
                    h,
                    isNaN(o) ? l : c,
                    h
                  ),
                  T &&
                    !n &&
                    this.parentSeries.drawWhiskers &&
                    this.addLineVertices(u, c, m, c, S),
                  E &&
                    !a &&
                    this.parentSeries.drawWhiskers &&
                    this.addLineVertices(u, p, m, p, S);
              }
            e.drawLinesNative(u, i, l.ELineDrawMode.DiscontinuousLine);
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(u.PROPERTY.STROKE);
          }
          onSeriesPropertyChange(e) {
            super.onSeriesPropertyChange(e);
            const {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              strokeDashArray: s,
            } = this.parentSeries;
            (e !== u.PROPERTY.STROKE &&
              e !== u.PROPERTY.STROKE_THICKNESS &&
              e !== u.PROPERTY.OPACITY &&
              e !== u.PROPERTY.STROKE_DASH_ARRAY) ||
              (0, n.createPenInCache)(this.linesPenCache, t, i, r, s);
          }
          addLineVertices(e, t, i, r, s) {
            this.parentSeries.xAxis.isVerticalChart
              ? (e.push_back((0, h.getVertex)(this.webAssemblyContext, i, t)),
                e.push_back((0, h.getVertex)(this.webAssemblyContext, s, r)))
              : (e.push_back((0, h.getVertex)(this.webAssemblyContext, t, i)),
                e.push_back((0, h.getVertex)(this.webAssemblyContext, r, s)));
          }
        }
        t.ErrorSeriesDrawingProvider = p;
      },
      24315: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.calculateHeatmapTexture =
            t.calculateCellCoordinates =
            t.calculateOffsets =
            t.createColorMap =
            t.getCellColor =
            t.getColor =
            t.getColorDataForTexture =
              void 0);
        const r = i(22950),
          s = i(48008);
        (t.getColorDataForTexture = (e, i, r) => {
          const {
            xStartInd: s,
            textureWidth: o,
            xInc: a,
            yStartInd: n,
            textureHeight: l,
            yInc: d,
            zValues: h,
            webAssemblyContext: u,
            colorMap: c,
            opacity: p,
            horCellCount: g,
            vertCellCount: y,
            horCellOffsets: f,
            vertCellOffsets: v,
            colorMin: m,
            colorMax: S,
            arrayWidth: P,
            arrayHeight: C,
            fillValuesOutOfRange: x,
          } = e;
          i.resize(o * l, 0);
          let b = 0,
            A = v[b];
          const T = new Array(g);
          let E,
            R = !1,
            w = s,
            D = n;
          for (let e = 0; e < l; e++) {
            let l = 0,
              g = f[l];
            if (
              e > A &&
              ((R = !1),
              b++,
              (A = v[b]),
              e - A > Number.EPSILON && Math.floor(A) + 1 === e)
            )
              e--;
            else {
              R
                ? (E = T[l])
                : ((w = s + l * a),
                  (D = n + b * d),
                  (E = (0, t.getColor)(D, w, c, p, h, u, m, S, P, C, x, r)),
                  (T[l] = E));
              for (let n = 0; n < o; n++) {
                if (n > g) {
                  if (
                    (l++,
                    (g = f[l]),
                    n - g > Number.EPSILON && Math.floor(g) + 1 === n)
                  ) {
                    n--;
                    continue;
                  }
                  R
                    ? (E = T[l])
                    : ((w = s + l * a),
                      (E = (0, t.getColor)(D, w, c, p, h, u, m, S, P, C, x, r)),
                      (T[l] = E));
                }
                i.set(e * o + n, E);
              }
              R = !0;
            }
          }
          return i;
        }),
          (t.getColor = (e, i, s, o, a, n, l, d, h, u, c, p) => {
            if (e >= u || i >= h) return 0;
            const g = a[e][i],
              y = (0, t.getCellColor)(g, s, l, d, c, n, p);
            return (0, r.uintArgbColorMultiplyOpacity)(y, o);
          }),
          (t.getCellColor = (e, t, i, r, s, o, a) => {
            if (isNaN(e)) return 0;
            if (s) e = (e = e < i ? i : e) > r ? r : e;
            else if (e < i || e > r) return 0;
            const n = (e - i) * ((a - 1) / Math.abs(r - i));
            let l = Math.floor(n + 0.5 * Math.sign(e));
            return (l = o.NumberUtil.Constrain(l, 0, t.length - 1)), t[l];
          }),
          (t.createColorMap = (e, t) => {
            const i = Array.from(Array(t)),
              r = [...e];
            r.sort((e, t) =>
              e.offset < t.offset ? -1 : e.offset > t.offset ? 1 : 0
            );
            const a = r.length,
              n = r[0].offset;
            let l = r[r.length - 1].offset - n;
            const d = l / (t - 1);
            let h = r[0].color,
              u = r[0].offset,
              c = h,
              p = u;
            a > 1 && ((c = r[1].color), (p = r[1].offset)), (l = p - u);
            let g = 0;
            for (let e = 0; e < t; ++e) {
              const t = n + e * d;
              let y;
              t >= p &&
                (g++,
                (u = p),
                (h = c),
                g + 1 < a && ((c = r[g + 1].color), (p = r[g + 1].offset)),
                (l = p - u)),
                (y =
                  h === c || l <= Number.EPSILON
                    ? Number.parseInt((0, s.parseColorToHexStringArgb)(c), 16)
                    : o(h, c, (t - u) / l)),
                (i[e] = y);
            }
            return i;
          });
        const o = (e, t, i) => {
          const r = (0, s.parseColorToTArgb)(e),
            o = (0, s.parseColorToTArgb)(t),
            a = r.opacity,
            n = o.opacity,
            l = r.red,
            d = o.red,
            h = r.green,
            u = o.green,
            c = r.blue,
            p = o.blue,
            g = l + Math.floor((d - l) * i),
            y = h + Math.floor((u - h) * i),
            f = c + Math.floor((p - c) * i),
            v = a + Math.floor((n - a) * i);
          return Number.parseInt(
            "0x" +
              (0, s.toHex)(v) +
              (0, s.toHex)(g) +
              (0, s.toHex)(y) +
              (0, s.toHex)(f),
            16
          );
        };
        (t.calculateOffsets = (e, i, r, s, o, a, n, l, d, h, u) => {
          let c = e.left < 0 ? -e.left : 0;
          const p = e.top < 0 ? -e.top : 0;
          return (
            i && (c = e.right > u.bottom ? e.right - u.bottom : 0),
            {
              horCellOffsets: (0, t.calculateCellCoordinates)(
                r,
                e.width,
                o,
                a,
                n,
                -c
              ),
              vertCellOffsets: (0, t.calculateCellCoordinates)(
                s,
                e.height,
                l,
                d,
                h,
                -p
              ),
            }
          );
        }),
          (t.calculateCellCoordinates = (e, t, i, r, s, o) => {
            let a = 0,
              n = i;
            for (let t = 0; t < r; t++, n += s) a += e[n];
            const l = 1 / a,
              d = new Array(r);
            let h = o;
            for (let o = 0; o < r - 1; o++)
              (h += e[o * s + i] * l * t), (d[o] = h);
            return (d[r - 1] = t + o), d;
          }),
          (t.calculateHeatmapTexture = (e, i, r, s) => {
            const {
                textureWidth: o,
                textureHeight: a,
                webAssemblyContext: n,
                useInterpolation: l,
              } = e,
              d = (0, t.getColorDataForTexture)(e, i, s),
              h = r.create(
                o,
                a,
                n.eTSRTextureFormat.TSR_TEXTUREFORMAT_A8B8G8R8
              );
            return (
              n.SCRTSetTextureLinearSamplerEnabled(h, l),
              n.SCRTFillTextureAbgr(h, o, a, d),
              h
            );
          });
      },
      36898: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LineSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(21915),
          o = i(16185),
          a = i(20782),
          n = i(20977),
          l = i(65043);
        class d extends l.BaseSeriesDrawingProvider {
          constructor(e, t, i, r) {
            super(e, t, i, r),
              (this.linesPenCache = new s.Pen2DCache(e)),
              (this.args = new e.SCRTLineDrawingParams());
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(n.PROPERTY.STROKE);
          }
          onSeriesPropertyChange(e) {
            if (
              (super.onSeriesPropertyChange(e),
              e === n.PROPERTY.PALETTE_PROVIDER &&
                this.linesPenCache.invalidateCache(),
              e === n.PROPERTY.STROKE ||
                e === n.PROPERTY.STROKE_THICKNESS ||
                e === n.PROPERTY.PALETTE_PROVIDER ||
                e === n.PROPERTY.OPACITY ||
                e === n.PROPERTY.STROKE_DASH_ARRAY)
            ) {
              this.palettingState.requiresUpdate = !0;
              const {
                stroke: e,
                strokeThickness: t,
                opacity: i,
                strokeDashArray: r,
              } = this.getProperties(this.parentSeries);
              e &&
                (0, s.createPenInCache)(
                  this.linesPenCache,
                  e,
                  t,
                  null != i ? i : 1,
                  r
                );
            }
          }
          getProperties(e) {
            const {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              strokeDashArray: s,
              isDigitalLine: o,
              drawNaNAs: a,
              lineType: n,
            } = e;
            return {
              stroke: t,
              strokeThickness: i,
              opacity: r,
              strokeDashArray: s,
              isDigitalLine: o,
              drawNaNAs: a,
              lineType: n,
              containsNaN: void 0,
            };
          }
          onAttachSeries() {
            super.onAttachSeries(),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTLineSeriesDrawingProvider());
            const {
              stroke: e,
              strokeThickness: t,
              opacity: i,
              strokeDashArray: r,
            } = this.getProperties(this.parentSeries);
            e &&
              (0, s.createPenInCache)(
                this.linesPenCache,
                e,
                t,
                null != i ? i : 1,
                r
              );
          }
          onDetachSeries() {
            super.onDetachSeries(),
              (this.nativeDrawingProvider = (0, r.deleteSafe)(
                this.nativeDrawingProvider
              ));
          }
          draw(e, t) {
            var i;
            const {
                stroke: r,
                isDigitalLine: n,
                lineType: l,
                drawNaNAs: d,
                containsNaN: h,
              } = this.getProperties(this.parentSeries),
              u = (0, s.getScrtPenFromCache)(this.linesPenCache);
            if (!u || !r) return;
            const c = t.pointSeries;
            let p =
              this.parentSeries.dataSeries.dataDistributionCalculator
                .containsNaN;
            (p = null != h ? h : p),
              this.args.Reset(),
              this.args.SetLinesPen(u),
              (this.args.isDigitalLine = n || l !== a.ELineType.Normal),
              (this.args.drawDigitalVertical = l !== a.ELineType.DigitalNoEdge),
              (this.args.digitalYX = l === a.ELineType.DigitalYX),
              (this.args.forceShaderMethod = !0),
              (this.args.containsNaN = p),
              (this.args.forceClamp = !this.args.isDigitalLine),
              (this.args.lineGaps = p
                ? d === o.ELineDrawMode.DiscontinuousLine
                  ? this.webAssemblyContext.SCRTLineGapMode.DrawGaps
                  : this.webAssemblyContext.SCRTLineGapMode.CloseGaps
                : this.webAssemblyContext.SCRTLineGapMode.Default),
              (this.args.verticalChart = t.isVerticalChart);
            const g = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
              {
                fifoCapacity: y,
                fifoSweeping: f,
                fifoSweepingGap: v,
              } = this.parentSeries.dataSeries,
              m = c.fifoStartIndex,
              S = this.xSelector(c);
            let P = g ? c.indexes : S,
              C = this.ySelector(c);
            const { startIndex: x, count: b } = this.getStartAndCount(t, P);
            (this.args.count = b),
              (this.args.startIndex = x),
              f &&
                y === this.parentSeries.dataSeries.count() &&
                (this.args.count = m),
              this.applyStrokePaletting(u, t),
              this.palettingState.palettedColors &&
                (this.args.SetPalettedColors(
                  this.palettingState.palettedColors
                ),
                (this.args.paletteStart =
                  null !== (i = this.palettingState.paletteStartIndex) &&
                  void 0 !== i
                    ? i
                    : 0));
            const A = e.getNativeContext();
            this.drawLines(
              e,
              A,
              P,
              C,
              t.xCoordinateCalculator.nativeCalculator,
              t.yCoordinateCalculator.nativeCalculator,
              this.args,
              this.parentSeries.parentSurface.seriesViewRect
            ),
              f &&
                y === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(C.size(), m + v)),
                (this.args.count = Math.max(0, C.size() - m - v)),
                this.args.count > 0 &&
                  this.drawLines(
                    e,
                    A,
                    P,
                    C,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args,
                    this.parentSeries.parentSurface.seriesViewRect
                  ));
          }
          delete() {
            (this.linesPenCache = (0, r.deleteSafe)(this.linesPenCache)),
              (this.nativeDrawingProvider = (0, r.deleteSafe)(
                this.nativeDrawingProvider
              )),
              (this.args = (0, r.deleteSafe)(this.args)),
              super.delete();
          }
          drawLines(e, t, i, r, s, o, a, n) {
            this.nativeDrawingProvider.DrawLinesVec(t, i, r, s, o, a);
          }
        }
        t.LineSeriesDrawingProvider = d;
      },
      36877: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MountainSeriesDrawingProvider = void 0);
        const r = i(56744),
          s = i(51269),
          o = i(21915),
          a = i(16185),
          n = i(14184),
          l = i(20977),
          d = i(65043);
        class h extends d.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTMountainSeriesDrawingProvider()),
              (this.args =
                new this.webAssemblyContext.SCRTMountainDrawingParams()),
              (this.strokePenCache = new o.Pen2DCache(e)),
              (this.fillBrushCache = new s.BrushCache(e));
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              (this.args = (0, r.deleteSafe)(this.args)),
              (this.strokePenCache = (0, r.deleteSafe)(this.strokePenCache)),
              (this.fillBrushCache = (0, r.deleteSafe)(this.fillBrushCache)),
              super.delete();
          }
          draw(e, t) {
            var i;
            const r = t.pointSeries,
              s =
                this.parentSeries.dataSeries.dataDistributionCalculator
                  .containsNaN;
            this.args.Reset(),
              (this.args.forceShaderMethod = !0),
              (this.args.lineGaps = s
                ? this.parentSeries.drawNaNAs ===
                  a.ELineDrawMode.DiscontinuousLine
                  ? this.webAssemblyContext.SCRTLineGapMode.DrawGaps
                  : this.webAssemblyContext.SCRTLineGapMode.CloseGaps
                : this.webAssemblyContext.SCRTLineGapMode.Default),
              (this.args.verticalChart = t.isVerticalChart);
            const { visibleMin: n, visibleMax: l } =
              t.getyCoordinateCalculator();
            (this.args.zeroLineY = Math.max(
              Math.min(this.parentSeries.zeroLineY, l),
              n
            )),
              (this.args.isDigitalLine = this.parentSeries.isDigitalLine);
            const d = this.createBrush();
            d && this.args.SetFillBrush(d);
            const h = (0, o.getScrtPenFromCache)(this.strokePenCache);
            h && this.args.SetLinesPen(h),
              super.applyStrokeFillPaletting(
                this.parentSeries.stroke,
                h,
                this.parentSeries.fill,
                d,
                this.parentSeries.opacity,
                !0,
                void 0 !== this.parentSeries.fillLinearGradient,
                t
              );
            const u =
              null === (i = this.palettingState.paletteTextureCache) ||
              void 0 === i
                ? void 0
                : i.value;
            u && this.args.SetPalette(u),
              (this.args.isSmoothColors =
                this.palettingState.gradientPaletting);
            const {
                fifoCapacity: c,
                fifoSweeping: p,
                fifoSweepingGap: g,
              } = this.parentSeries.dataSeries,
              y = r.fifoStartIndex,
              f = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
              v = r.xValues;
            let m = f ? r.indexes : v,
              S = r.yValues;
            const { startIndex: P, count: C } = this.getStartAndCount(t, m);
            (this.args.count = C),
              (this.args.startIndex = P),
              p &&
                c === this.parentSeries.dataSeries.count() &&
                (this.args.count = y);
            const x = e.getNativeContext();
            this.parentSeries.parentSurface.seriesViewRect,
              this.nativeDrawingProvider.DrawPointsVec(
                x,
                m,
                S,
                t.xCoordinateCalculator.nativeCalculator,
                t.yCoordinateCalculator.nativeCalculator,
                this.args
              ),
              p &&
                c === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(S.size(), y + g)),
                (this.args.count = Math.max(0, S.size() - y - g)),
                this.args.count > 0 &&
                  this.nativeDrawingProvider.DrawPointsVec(
                    x,
                    m,
                    S,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args
                  ));
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(l.PROPERTY.STROKE);
          }
          onSeriesPropertyChange(e) {
            super.onSeriesPropertyChange(e),
              (e !== l.PROPERTY.STROKE &&
                e !== l.PROPERTY.STROKE_DASH_ARRAY &&
                e !== l.PROPERTY.STROKE_THICKNESS &&
                e !== l.PROPERTY.OPACITY) ||
                this.createPen(),
              (e !== l.PROPERTY.FILL &&
                e !== l.PROPERTY.OPACITY &&
                e !== l.PROPERTY.FILL_LINEAR_GRADIENT) ||
                this.createBrush();
          }
          onAttachSeries() {
            super.onAttachSeries(), this.createPen(), this.createBrush();
          }
          createBrush() {
            this.palettingState.requiresUpdate = !0;
            const {
                fill: e,
                opacity: t,
                fillLinearGradient: i,
                parentSurface: r,
              } = this.parentSeries,
              o = (null == r ? void 0 : r.isCopyCanvasSurface)
                ? r.domCanvas2D.height /
                  n.SciChartSurfaceBase.domMasterCanvas.height
                : 1,
              a = (null == r ? void 0 : r.isCopyCanvasSurface)
                ? r.domCanvas2D.width /
                  n.SciChartSurfaceBase.domMasterCanvas.width
                : 1;
            return (0, s.createBrushInCache)(
              this.fillBrushCache,
              e,
              t,
              o,
              a,
              i
            );
          }
          createPen() {
            const {
              stroke: e,
              strokeThickness: t,
              opacity: i,
              strokeDashArray: r,
            } = this.parentSeries;
            return (
              (this.palettingState.requiresUpdate = !0),
              (0, o.createPenInCache)(this.strokePenCache, e, t, i, r)
            );
          }
        }
        t.MountainSeriesDrawingProvider = h;
      },
      37182: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__rest) ||
          function (e, t) {
            var i = {};
            for (var r in e)
              Object.prototype.hasOwnProperty.call(e, r) &&
                t.indexOf(r) < 0 &&
                (i[r] = e[r]);
            if (
              null != e &&
              "function" == typeof Object.getOwnPropertySymbols
            ) {
              var s = 0;
              for (r = Object.getOwnPropertySymbols(e); s < r.length; s++)
                t.indexOf(r[s]) < 0 &&
                  Object.prototype.propertyIsEnumerable.call(e, r[s]) &&
                  (i[r[s]] = e[r[s]]);
            }
            return i;
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NonUniformHeatmapDrawingProvider = void 0);
        const s = i(56744),
          o = i(98140),
          a = i(87459),
          n = i(4748),
          l = i(80445),
          d = i(53904),
          h = i(20977),
          u = i(65043),
          c = i(24315);
        class p extends u.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t),
              (this.heatTextureCache = new l.TextureCache(e)),
              (this.colorDataVector = new e.UIntVector()),
              this.onSeriesPropertyChange(h.PROPERTY.DATA_SERIES),
              this.onSeriesPropertyChange(h.PROPERTY.COLOR_MAP);
          }
          delete() {
            (this.colorDataVector = (0, s.deleteSafe)(this.colorDataVector)),
              (this.heatTextureCache = (0, s.deleteSafe)(
                this.heatTextureCache
              )),
              super.delete();
          }
          onSeriesPropertyChange(e) {
            (e === h.PROPERTY.DATA_SERIES ||
              e === h.PROPERTY.COLOR_MAP ||
              e.includes(d.COLOR_MAP_PREFIX) ||
              e === h.PROPERTY.OPACITY) &&
              (this.colorGradientScale = (0, c.createColorMap)(
                this.parentSeries.colorMap.gradientStops,
                100
              ));
          }
          draw(e, t) {
            const { isVerticalChart: i } = t,
              r = this.parentSeries.dataSeries,
              s = this.parentSeries.parentSurface.seriesViewRect,
              a = this.parentSeries.colorMap,
              n = this.colorGradientScale,
              l = r.getZValues(),
              d = r.getXIndicesRange(
                new o.NumberRange(
                  t.xCoordinateCalculator.visibleMin,
                  t.xCoordinateCalculator.visibleMax
                ),
                !1
              ),
              h = r.getYIndicesRange(
                new o.NumberRange(
                  t.yCoordinateCalculator.visibleMin,
                  t.yCoordinateCalculator.visibleMax
                ),
                !1
              ),
              u = r.getXValue(d.min),
              c = r.getXValue(d.max),
              p = r.getYValue(h.min),
              g = r.getYValue(h.max),
              y = !t.xCoordinateCalculator.hasFlippedCoordinates,
              f = t.yCoordinateCalculator.hasFlippedCoordinates,
              v = t.xCoordinateCalculator.getCoordinate(y ? c : u),
              m = t.xCoordinateCalculator.getCoordinate(y ? u : c),
              S = t.yCoordinateCalculator.getCoordinate(f ? p : g),
              P = t.yCoordinateCalculator.getCoordinate(f ? g : p),
              C = Math.ceil(Math.abs(v - m)),
              x = Math.ceil(Math.abs(S - P)),
              b = C <= 0 || x <= 0;
            if (
              !(
                v > (i ? s.height : s.width) ||
                S > (i ? s.width : s.height) ||
                m < 0 ||
                P < 0 ||
                b
              )
            ) {
              const o = d,
                u = h;
              let c = y ? o.max - 1 : o.min;
              const p = f ? u.min : u.max - 1;
              let g = y ? -1 : 1;
              const m = f ? 1 : -1;
              i && ((c = y ? o.min : o.max - 1), (g = y ? 1 : -1));
              const P = o.diff,
                b = u.diff,
                A = e.getNativeContext();
              this.drawHeatmapInTypescript(
                A,
                r.xCellOffsets,
                r.yCellOffsets,
                l,
                t.xCoordinateCalculator,
                t.yCoordinateCalculator,
                {
                  horCellCount: P,
                  vertCellCount: b,
                  arrayWidth: r.arrayWidth,
                  arrayHeight: r.arrayHeight,
                  opacity: this.parentSeries.opacity,
                  colorGradientScale: n,
                  colorMin: a.minimum,
                  colorMax: a.maximum,
                  horStartInd: c,
                  vertStartInd: p,
                  horInc: g,
                  vertInc: m,
                  isVerticalChart: i,
                  heatmapStartX: v,
                  heatmapStartY: S,
                  heatmapWidth: C,
                  heatmapHeight: x,
                  xCellSizes: r.xCellSizes,
                  yCellSizes: r.yCellSizes,
                  seriesViewRect: s,
                }
              );
            }
          }
          drawHeatmapInTypescript(e, t, i, r, s, o, n) {
            const {
                horStartInd: l,
                horInc: d,
                vertStartInd: h,
                vertInc: u,
                horCellCount: p,
                vertCellCount: g,
                heatmapStartX: y,
                heatmapStartY: f,
                heatmapWidth: v,
                heatmapHeight: m,
                opacity: S,
                colorGradientScale: P,
                colorMin: C,
                colorMax: x,
                isVerticalChart: b,
                arrayWidth: A,
                arrayHeight: T,
                xCellSizes: E,
                yCellSizes: R,
                seriesViewRect: w,
              } = n,
              D = t[0],
              L = t[t.length - 1],
              M = i[0],
              I = i[i.length - 1],
              O = Math.max(D, s.visibleMin),
              k = Math.min(L, s.visibleMax),
              _ = Math.max(M, o.visibleMin),
              V = Math.min(I, o.visibleMax),
              N = !s.hasFlippedCoordinates,
              F = o.hasFlippedCoordinates,
              B = s.getCoordinate(N ? k : O),
              H = s.getCoordinate(N ? O : k),
              z = o.getCoordinate(F ? V : _),
              Y = o.getCoordinate(F ? _ : V),
              G = Math.ceil(Math.abs(B - H)),
              X = Math.ceil(Math.abs(z - Y)),
              j = new a.Rect(y, f, v, m),
              { horCellOffsets: W, vertCellOffsets: U } = (0,
              c.calculateOffsets)(j, b, E, R, l, p, d, h, g, u, w),
              $ = this.calculateHeatmapTexture({
                xStartInd: l,
                textureWidth: G,
                xInc: d,
                yStartInd: h,
                textureHeight: X,
                yInc: u,
                zValues: r,
                webAssemblyContext: this.webAssemblyContext,
                colorMap: P,
                opacity: S,
                horCellCount: p,
                vertCellCount: g,
                horCellOffsets: W,
                vertCellOffsets: U,
                colorMin: C,
                colorMax: x,
                arrayWidth: A,
                arrayHeight: T,
                fillValuesOutOfRange: this.parentSeries.fillValuesOutOfRange,
                useInterpolation: this.parentSeries.useLinearTextureFiltering,
              });
            if (b) {
              e.PushMatrix(), e.PushState(), e.Rotate(-90);
              const t = N ? -B : -G - B;
              e.Translate(t, 0);
              const i = N ? 0 : G,
                r = z;
              return (
                e.DrawTexture($, i - G, r - X, G, X),
                e.PopMatrix(),
                void e.PopState()
              );
            }
            e.DrawTexture($, B, Y, G, X);
          }
          calculateHeatmapTexture(e) {
            if (!this.getMemoizedHeatmapTexture) {
              const e = (e, i) => {
                var [s] = e,
                  { horCellOffsets: o, vertCellOffsets: a } = s,
                  n = r(s, ["horCellOffsets", "vertCellOffsets"]),
                  l = i[0],
                  d = l.horCellOffsets,
                  h = l.vertCellOffsets,
                  u = r(l, ["horCellOffsets", "vertCellOffsets"]);
                return (
                  t(Object.values(n), Object.values(u)) && t(o, d) && t(a, h)
                );
              };
              this.getMemoizedHeatmapTexture = (0, n.memoize)(
                c.calculateHeatmapTexture,
                e
              );
            }
            const t = (e, t) => !e.some((e, i) => e !== t[i]);
            return this.getMemoizedHeatmapTexture(
              e,
              this.colorDataVector,
              this.heatTextureCache,
              100
            );
          }
        }
        t.NonUniformHeatmapDrawingProvider = p;
      },
      88302: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcSeriesDrawingProvider = t.EOhlcDrawingMode = void 0);
        const r = i(56744),
          s = i(51269),
          o = i(21915),
          a = i(20977),
          n = i(65043);
        var l;
        !(function (e) {
          (e.Candles = "Candles"), (e.Ohlc = "Ohlc");
        })((l = t.EOhlcDrawingMode || (t.EOhlcDrawingMode = {})));
        class d extends n.BaseSeriesDrawingProvider {
          constructor(e, t, i) {
            super(e, t),
              (this.drawingMode = i),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTCandlestickSeriesDrawingProvider()),
              (this.args = new this.webAssemblyContext.SCRTOhlcDrawingParams());
            const {
                strokeThickness: r,
                strokeUp: a,
                strokeDown: n,
                opacity: l,
              } = t,
              d = t;
            (this.strokeUpPenCache = new o.Pen2DCache(e)),
              (this.strokeDownPenCache = new o.Pen2DCache(e)),
              (this.brushUpCache = new s.BrushCache(e)),
              (this.brushDownCache = new s.BrushCache(e)),
              (0, o.createPenInCache)(this.strokeUpPenCache, a, r, l),
              (0, o.createPenInCache)(this.strokeDownPenCache, n, r, l),
              d.brushUp &&
                (0, s.createBrushInCache)(this.brushUpCache, d.brushUp, l),
              d.brushDown &&
                (0, s.createBrushInCache)(this.brushDownCache, d.brushDown, l);
          }
          onDpiChanged(e) {
            super.onDpiChanged(e),
              this.onSeriesPropertyChange(a.PROPERTY.STROKE_UP),
              this.onSeriesPropertyChange(a.PROPERTY.STROKE_DOWN);
          }
          onSeriesPropertyChange(e) {
            super.onSeriesPropertyChange(e);
            const {
              strokeThickness: t,
              strokeUp: i,
              strokeDown: r,
              opacity: n,
            } = this.parentSeries;
            (e !== a.PROPERTY.STROKE_UP &&
              e !== a.PROPERTY.STROKE_THICKNESS &&
              e !== a.PROPERTY.OPACITY) ||
              (0, o.createPenInCache)(this.strokeUpPenCache, i, t, n),
              (e !== a.PROPERTY.STROKE_DOWN &&
                e !== a.PROPERTY.STROKE_THICKNESS &&
                e !== a.PROPERTY.OPACITY) ||
                (0, o.createPenInCache)(this.strokeDownPenCache, r, t, n);
            const l = this.parentSeries;
            (e !== a.PROPERTY.BRUSH_DOWN && e !== a.PROPERTY.OPACITY) ||
              (0, s.createBrushInCache)(
                this.brushDownCache,
                null == l ? void 0 : l.brushDown,
                n
              ),
              (e !== a.PROPERTY.BRUSH_UP && e !== a.PROPERTY.OPACITY) ||
                (0, s.createBrushInCache)(
                  this.brushUpCache,
                  null == l ? void 0 : l.brushUp,
                  n
                );
          }
          draw(e, t) {
            const i = t.pointSeries;
            if ((this.args.Reset(), this.drawingMode === l.Candles)) {
              const e = (0, s.getScrtBrushFromCache)(this.brushUpCache),
                t = (0, s.getScrtBrushFromCache)(this.brushDownCache);
              if (!e || !t) return;
              this.args.SetBrushes(e, t);
            }
            const r = (0, o.getScrtPenFromCache)(this.strokeUpPenCache),
              a = (0, o.getScrtPenFromCache)(this.strokeDownPenCache);
            if (!r || !a) return;
            this.args.SetPens(r, a);
            const n = "#ffffffff";
            super.applyStrokeFillPaletting(
              n,
              void 0,
              n,
              void 0,
              this.parentSeries.opacity
            ),
              this.args.SetPalettedColors(this.palettingState.palettedColors),
              (this.args.forceShaderMethod = !0),
              (this.args.verticalChart = t.isVerticalChart),
              (this.args.candleWidth = this.parentSeries.getDataPointWidth(
                t.xCoordinateCalculator,
                this.parentSeries.dataPointWidth,
                this.parentSeries.dataPointWidthMode
              )),
              (this.args.drawAsOhlc = this.drawingMode === l.Ohlc);
            const d = e.getNativeContext(),
              h =
                (this.parentSeries.parentSurface.seriesViewRect,
                this.parentSeries.dataSeries,
                t.xCoordinateCalculator.isCategoryCoordinateCalculator),
              u = i.xValues,
              c = i.openValues,
              p = i.highValues,
              g = i.lowValues,
              y = i.closeValues,
              { startIndex: f, count: v } = this.getStartAndCount(t, u);
            (this.args.count = v), (this.args.startIndex = f);
            const {
                fifoCapacity: m,
                fifoSweeping: S,
                fifoSweepingGap: P,
              } = this.parentSeries.dataSeries,
              C = i.fifoStartIndex;
            S &&
              m === this.parentSeries.dataSeries.count() &&
              (this.args.count = C);
            let x = h ? i.indexes : u;
            this.args.SetValues(x, c, p, g, y),
              this.nativeDrawingProvider.DrawPointsVec(
                d,
                t.xCoordinateCalculator.nativeCalculator,
                t.yCoordinateCalculator.nativeCalculator,
                this.args
              ),
              S &&
                m === this.parentSeries.dataSeries.count() &&
                ((this.args.startIndex = Math.min(y.size(), C + P)),
                (this.args.count = Math.max(0, y.size() - C - P)),
                this.args.count > 0 &&
                  this.nativeDrawingProvider.DrawPointsVec(
                    d,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args
                  ));
          }
          delete() {
            (this.strokeDownPenCache = (0, r.deleteSafe)(
              this.strokeDownPenCache
            )),
              (this.strokeUpPenCache = (0, r.deleteSafe)(
                this.strokeUpPenCache
              )),
              (this.brushUpCache = (0, r.deleteSafe)(this.brushUpCache)),
              (this.brushDownCache = (0, r.deleteSafe)(this.brushDownCache)),
              (this.nativeDrawingProvider = (0, r.deleteSafe)(
                this.nativeDrawingProvider
              )),
              (this.args = (0, r.deleteSafe)(this.args)),
              super.delete();
          }
        }
        t.OhlcSeriesDrawingProvider = d;
      },
      94707: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PointMarkerDrawingProvider = void 0);
        const r = i(56744),
          s = i(65043);
        class o extends s.BaseSeriesDrawingProvider {
          constructor(e, t, i, r, s) {
            super(e, t, i, s),
              (this.ySplineValuesSelector =
                void 0 === r ? (e) => e.ySplineValues : r),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTScatterSeriesDrawingProvider()),
              (this.xAnimationPointMarkerValues =
                new this.webAssemblyContext.SCRTDoubleVector()),
              (this.yAnimationPointMarkerValues =
                new this.webAssemblyContext.SCRTDoubleVector()),
              (this.args =
                new this.webAssemblyContext.SCRTPointDrawingParams());
          }
          onSeriesPropertyChange(e) {}
          getProperties(e) {
            return e;
          }
          draw(e, t) {
            var i, r;
            const s =
              null === (i = this.getProperties(this.parentSeries)) ||
              void 0 === i
                ? void 0
                : i.pointMarker;
            if (void 0 === s) return;
            let o, a;
            this.parentSeries.hasPointMarkerPaletteProvider()
              ? ((o = s.getFillMask()), (a = s.getStrokeMask()))
              : ((o = s.getSprite()), (a = void 0));
            const n = t.pointSeries,
              l = t.xCoordinateCalculator.isCategoryCoordinateCalculator;
            let d = this.xSelector(n),
              h = this.ySelector(n);
            this.args.Reset(),
              (this.args.verticalChart = t.isVerticalChart),
              (this.args.forceShaderMethod = !0),
              this.args.SetSpriteTexture(o.getTexture()),
              a && this.args.SetStrokeMask(a.getTexture());
            const {
                fifoCapacity: u,
                fifoSweeping: c,
                fifoSweepingGap: p,
              } = this.parentSeries.dataSeries,
              g = n.fifoStartIndex;
            if (s.lastPointOnly && h.size() > 0)
              (this.args.count = 1),
                (this.args.startIndex =
                  c && this.parentSeries.dataSeries.count() === u
                    ? g - 1
                    : h.size() - 1);
            else {
              const { startIndex: e, count: i } = this.getStartAndCount(t, d);
              (this.args.count = i),
                (this.args.startIndex = e),
                c &&
                  u === this.parentSeries.dataSeries.count() &&
                  (this.args.count = g);
            }
            this.applyStrokeFillPaletting(
              s.stroke,
              void 0,
              s.fill,
              void 0,
              this.parentSeries.opacity
            ),
              this.args.SetPalettedColors(this.palettingState.palettedColors),
              (this.args.paletteStart =
                null !== (r = this.palettingState.paletteStartIndex) &&
                void 0 !== r
                  ? r
                  : 0);
            const y = e.getNativeContext();
            this.drawPoints(
              y,
              l ? n.indexes : d,
              h,
              t.xCoordinateCalculator.nativeCalculator,
              t.yCoordinateCalculator.nativeCalculator,
              this.args,
              this.parentSeries.parentSurface.seriesViewRect
            ),
              c &&
                u === this.parentSeries.dataSeries.count() &&
                !s.lastPointOnly &&
                ((this.args.startIndex = Math.min(h.size(), g + p)),
                (this.args.count = Math.max(0, h.size() - g - p)),
                this.args.count > 0 &&
                  this.drawPoints(
                    y,
                    l ? n.indexes : d,
                    h,
                    t.xCoordinateCalculator.nativeCalculator,
                    t.yCoordinateCalculator.nativeCalculator,
                    this.args,
                    this.parentSeries.parentSurface.seriesViewRect
                  ));
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              (this.xAnimationPointMarkerValues = (0, r.deleteSafe)(
                this.xAnimationPointMarkerValues
              )),
              (this.yAnimationPointMarkerValues = (0, r.deleteSafe)(
                this.yAnimationPointMarkerValues
              )),
              (this.args = (0, r.deleteSafe)(this.args)),
              super.delete();
          }
          overridePaletteProviderColors(e, t, i, r, s, o) {
            if (e.hasPointMarkerPaletteProvider()) {
              const a = e.paletteProvider.overridePointMarkerArgb(
                t,
                i,
                r,
                s,
                o
              );
              if (a) return a;
            }
            return { stroke: void 0, fill: void 0 };
          }
          isGradientFillPaletting(e) {
            return !1;
          }
          drawPoints(e, t, i, r, s, o, a) {
            this.nativeDrawingProvider.DrawPointsVec(e, t, i, r, s, o);
          }
          pointMarkerXYValuesFromSpline(e, t, i, r) {
            this.xAnimationPointMarkerValues.resize(e, 0),
              this.yAnimationPointMarkerValues.resize(e, 0);
            for (let s = 0; s < e - 1; s++) {
              const e = t.get((r + 1) * s);
              this.xAnimationPointMarkerValues.set(s, e);
              const o = i.get((r + 1) * s);
              this.yAnimationPointMarkerValues.set(s, o);
            }
            const s = i.size() - 1;
            this.xAnimationPointMarkerValues.set(e - 1, t.get(s)),
              this.yAnimationPointMarkerValues.set(e - 1, i.get(s));
          }
        }
        t.PointMarkerDrawingProvider = o;
      },
      9184: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformContoursDrawingProvider = void 0);
        const r = i(84745),
          s = i(56744),
          o = i(23866),
          a = i(48008),
          n = i(80445),
          l = i(98353),
          d = i(35992),
          h = i(53904),
          u = i(20977),
          c = i(65043);
        class p extends c.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t),
              (this.heightsTextureCache = new n.TextureCache(e)),
              this.onSeriesPropertyChange(u.PROPERTY.DATA_SERIES),
              this.onSeriesPropertyChange(u.PROPERTY.COLOR_MAP);
          }
          delete() {
            (this.heightsTextureCache = (0, s.deleteSafe)(
              this.heightsTextureCache
            )),
              (this.heightData = (0, s.deleteSafe)(this.heightData)),
              (this.paletteTexture = (0, s.deleteSafe)(this.paletteTexture)),
              super.delete();
          }
          onSeriesPropertyChange(e) {
            const t =
                e === u.PROPERTY.COLOR_MAP || e.includes(h.COLOR_MAP_PREFIX),
              i = e === u.PROPERTY.DATA_SERIES;
            if (
              (t &&
                ((this.paletteTexture = (0, s.deleteSafe)(this.paletteTexture)),
                this.parentSeries.colorMap &&
                this.parentSeries.colorMap.gradientStops
                  ? (this.paletteTexture = this.createPaletteTexture(
                      256,
                      1,
                      this.parentSeries.colorMap.gradientStops
                    ))
                  : (this.paletteTexture = this.createPaletteTexture(
                      256,
                      1,
                      void 0
                    ))),
              i)
            ) {
              const e = this.parentSeries.dataSeries;
              if (e) {
                const t = this.heightsTextureCache.create(
                  e.arrayWidth,
                  e.arrayHeight,
                  this.webAssemblyContext.eTSRTextureFormat
                    .TSR_TEXTUREFORMAT_R32F
                );
                this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(
                  t,
                  !0
                );
              }
            }
          }
          draw(e, t) {
            var i, r;
            const s =
              null === (i = this.heightsTextureCache) || void 0 === i
                ? void 0
                : i.value;
            if (s) {
              const i = this.parentSeries.dataSeries;
              this.webAssemblyContext.SCRTFillTextureFloat32(
                s,
                i.arrayWidth,
                i.arrayHeight,
                i.getNormalizedVector(
                  null !== (r = this.parentSeries.colorMap) && void 0 !== r
                    ? r
                    : this.getDefaultColorMap(i)
                )
              );
              const o = this.parentSeries.getContourDrawingParams(),
                { isVerticalChart: a } = t;
              let n = t.xCoordinateCalculator.getCoordinate(o.xMin);
              const l = t.yCoordinateCalculator.getCoordinate(o.yMin);
              let d = t.xCoordinateCalculator.getCoordinate(o.xMax);
              const h = t.yCoordinateCalculator.getCoordinate(o.yMax),
                u = Math.abs(n - d),
                c = () => {
                  this.parentSeries.minorsPerMajor > 0 &&
                    this.drawContours(
                      e,
                      n,
                      l,
                      d,
                      h,
                      o.zMin,
                      o.zMax,
                      o.minorStepZ,
                      o.minorLineStyle
                    ),
                    this.drawContours(
                      e,
                      n,
                      l,
                      d,
                      h,
                      o.zMin,
                      o.zMax,
                      o.majorStepZ,
                      o.majorLineStyle
                    );
                };
              if (a) {
                const i = e.getNativeContext(),
                  r = t.xCoordinateCalculator.hasFlippedCoordinates;
                i.PushMatrix(), i.PushState(), i.Rotate(-90);
                const s = r ? -u - n : -n;
                i.Translate(s, 0),
                  (n = r ? u : 0),
                  (d = r ? 0 : u),
                  c(),
                  i.PopMatrix(),
                  i.PopState();
              } else c();
            }
          }
          drawContours(e, t, i, s, o, n, d, h, u) {
            const c = (0, l.getVector4)(this.webAssemblyContext, 0, 1, 0, 0),
              p = new this.webAssemblyContext.SCRTContourParams(),
              g = Math.abs(n) < r.EPSILON ? 0.5 : 0.01,
              y = (0, a.parseColorToTArgb)(u.color);
            p.SetColorVector(
              y.red / 255,
              y.green / 255,
              y.blue / 255,
              y.opacity / 255
            ),
              p.SetParamsAVector(u.strokeThickness, h / 2, g, 0),
              p.SetParamsBVector(n, d, 0, 0);
            const f = e.getNativeContext(),
              v = this.heightsTextureCache.value;
            f.DrawHeatmapRectWithContours(null, v, t, i, s, o, c, p),
              null == p || p.delete();
          }
          computeHeightMap(e, t, i, r, o, a) {
            var n;
            const l = e * t;
            (null === (n = this.heightData) || void 0 === n
              ? void 0
              : n.size()) !== l &&
              ((this.heightData = (0, s.deleteSafe)(this.heightData)),
              (this.heightData = new this.webAssemblyContext.FloatVector()),
              this.heightData.resize(l, 0));
            for (let s = 0; s < e; s++)
              for (let n = 0; n < t; n++) {
                const l = r
                  ? i[a ? n : t - 1 - n][o ? e - s - 1 : s]
                  : i[a ? s : e - 1 - s][o ? t - n - 1 : n];
                this.heightData.set(s * t + n, isNaN(l) ? -1 : l);
              }
            return this.heightData;
          }
          createPaletteTexture(e, t, i) {
            if (r.IS_TEST_ENV) return;
            o.Guard.isTrue(e > 0, "width must be greater than 0"),
              o.Guard.isTrue(t > 0, "height must be greater than 0");
            const s = new d.CanvasTexture(this.webAssemblyContext, e, t);
            s.clear();
            const a = s.getContext(),
              n = e;
            if (i) {
              const e = a.createLinearGradient(0, 0, n, 0);
              i.forEach((t) => {
                e.addColorStop(t.offset, t.color);
              }),
                (a.fillStyle = e);
            } else a.fillStyle = "black";
            return a.fillRect(0, 0, e, t), s.copyTexture(), s;
          }
          getDefaultColorMap(e) {
            const t = e.zRange;
            return { minimum: t.min, maximum: t.max };
          }
        }
        t.UniformContoursDrawingProvider = p;
      },
      76566: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformHeatmapDrawingProvider = void 0);
        const r = i(84745),
          s = i(56744),
          o = i(23866),
          a = i(80445),
          n = i(35992),
          l = i(53904),
          d = i(20977),
          h = i(65043);
        class u extends h.BaseSeriesDrawingProvider {
          constructor(e, t) {
            super(e, t),
              (this.heatTextureCache = new a.TextureCache(e)),
              this.recreatePalette(),
              this.onSeriesPropertyChange(d.PROPERTY.DATA_SERIES),
              this.onSeriesPropertyChange(d.PROPERTY.COLOR_MAP);
          }
          delete() {
            (this.paletteTexture = (0, s.deleteSafe)(this.paletteTexture)),
              (this.heatTextureCache = (0, s.deleteSafe)(
                this.heatTextureCache
              )),
              super.delete();
          }
          onSeriesPropertyChange(e) {
            const t =
                e === d.PROPERTY.COLOR_MAP ||
                e.includes(l.COLOR_MAP_PREFIX) ||
                e === d.PROPERTY.OPACITY,
              i =
                e === d.PROPERTY.DATA_SERIES ||
                e === d.PROPERTY.USE_LINEAR_TEXTURE_FILTERING;
            if ((t && this.recreatePalette(), i)) {
              const e = this.parentSeries.dataSeries,
                t = this.parentSeries.useLinearTextureFiltering;
              if (e) {
                const i = this.heatTextureCache.create(
                  e.arrayWidth,
                  e.arrayHeight,
                  this.webAssemblyContext.eTSRTextureFormat
                    .TSR_TEXTUREFORMAT_R32F
                );
                this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(
                  i,
                  t
                );
              }
            }
          }
          seriesHasDataChanges() {
            this.onSeriesPropertyChange(d.PROPERTY.DATA_SERIES);
          }
          draw(e, t) {
            var i;
            const { isVerticalChart: r } = t,
              s = !t.xCoordinateCalculator.hasFlippedCoordinates,
              o =
                (t.yCoordinateCalculator.hasFlippedCoordinates,
                null === (i = this.heatTextureCache) || void 0 === i
                  ? void 0
                  : i.value);
            if (o) {
              const i = this.parentSeries.dataSeries,
                a = i.getNormalizedVector(
                  this.parentSeries.colorMap,
                  this.parentSeries.fillValuesOutOfRange
                );
              (this.packedFloatParams =
                this.webAssemblyContext.SCRTFillTextureFloat32(
                  o,
                  i.arrayWidth,
                  i.arrayHeight,
                  a
                )),
                (this.packedFloatParams.x = 0),
                (this.packedFloatParams.y = 1);
              const n = i.xRange,
                l = i.yRange,
                d = t.xCoordinateCalculator.getCoordinate(n.min),
                h = t.yCoordinateCalculator.getCoordinate(l.min),
                u = t.xCoordinateCalculator.getCoordinate(n.max),
                c = t.yCoordinateCalculator.getCoordinate(l.max),
                p = e.getNativeContext(),
                g =
                  (this.parentSeries.parentSurface.seriesViewRect,
                  Math.abs(d - u));
              if (r) {
                p.PushMatrix(), p.PushState(), p.Rotate(-90);
                const e = s ? -d : -g - d;
                p.Translate(e, 0);
                const t = s ? 0 : g,
                  i = s ? g : 0,
                  r = h,
                  o = c;
                this.drawHeatmap(p, t, r, i, o), p.PopMatrix(), p.PopState();
              } else this.drawHeatmap(p, d, h, u, c);
            }
          }
          createPaletteTexture(e, t, i, s, a) {
            if (r.IS_TEST_ENV) return;
            o.Guard.isTrue(e > 0, "width must be greater than 0"),
              o.Guard.isTrue(t > 0, "height must be greater than 0"),
              o.Guard.notNull(i, "gradientStops");
            const l = new n.CanvasTexture(this.webAssemblyContext, e, t);
            l.clear();
            const d = l.getContext();
            a && ((d.fillStyle = "#ffffff00"), d.fillRect(0, 0, 1, t));
            const h = e,
              u = d.createLinearGradient(0, 0, h, 0);
            i.forEach((e) => {
              u.addColorStop(e.offset, e.color);
            }),
              (d.fillStyle = u),
              (d.globalAlpha = s);
            const c = a ? 1 : 0;
            return d.fillRect(c, 0, e, t), l.copyTexture(), l;
          }
          recreatePalette() {
            var e, t;
            const i =
              null === (e = this.parentSeries.dataSeries) || void 0 === e
                ? void 0
                : e.hasNaNs;
            (this.hasNaNs === i &&
              this.opacity === this.parentSeries.opacity &&
              this.gradientStops ===
                (null === (t = this.parentSeries.colorMap) || void 0 === t
                  ? void 0
                  : t.gradientStops)) ||
              ((this.paletteTexture = (0, s.deleteSafe)(this.paletteTexture)),
              this.parentSeries.colorMap &&
                this.parentSeries.colorMap.gradientStops &&
                ((this.hasNaNs = i),
                (this.opacity = this.parentSeries.opacity),
                (this.gradientStops = this.parentSeries.colorMap.gradientStops),
                (this.paletteTexture = this.createPaletteTexture(
                  256,
                  1,
                  this.parentSeries.colorMap.gradientStops,
                  this.parentSeries.opacity,
                  i
                ))));
          }
          drawHeatmap(e, t, i, r, s) {
            const o = this.packedFloatParams,
              a = new this.webAssemblyContext.SCRTContourParams(),
              n = this.heatTextureCache.value;
            this.recreatePalette(),
              e.DrawHeatmapRectWithContours(
                this.paletteTexture.getTexture(),
                n,
                t,
                i,
                r,
                s,
                o,
                a
              ),
              a.delete(),
              o.delete();
          }
        }
        t.UniformHeatmapDrawingProvider = u;
      },
      98550: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastBandRenderableSeries = void 0);
        const r = i(5337),
          s = i(20181);
        class o extends s.BaseBandRenderableSeries {
          constructor(e, t) {
            var i, s;
            super(e, t),
              (this.type = r.ESeriesType.BandSeries),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this));
          }
        }
        t.FastBandRenderableSeries = o;
      },
      11555: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastBubbleRenderableSeries = void 0);
        const r = i(5337),
          s = i(62507),
          o = i(10749),
          a = i(79961),
          n = i(9297),
          l = i(89748),
          d = i(15273),
          h = i(20977);
        class u extends a.BaseRenderableSeries {
          constructor(e, t) {
            var i, s, a;
            super(e, t),
              (this.type = r.ESeriesType.BubbleSeries),
              (this.zMultiplierProperty = 1),
              (this.zMultiplierProperty =
                null !== (i = null == t ? void 0 : t.zMultiplier) &&
                void 0 !== i
                  ? i
                  : this.zMultiplierProperty),
              this.pointMarker ||
                (this.pointMarker = new o.EllipsePointMarker(e, {
                  width: 64,
                  height: 64,
                })),
              (null === (s = this.paletteProvider) || void 0 === s
                ? void 0
                : s.onAttached) &&
                (null === (a = this.paletteProvider) ||
                  void 0 === a ||
                  a.onAttached(this)),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new n.BubbleSeriesDrawingProvider(e, this)
              ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new d.BubbleSeriesDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          get paletteProvider() {
            return this.paletteProviderProperty;
          }
          set paletteProvider(e) {
            this.setPaletteProvider(e);
          }
          get zMultiplier() {
            return this.zMultiplierProperty;
          }
          set zMultiplier(e) {
            (this.zMultiplierProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.Z_MULTIPLIER);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.stroke === t.lineSeriesColor &&
              (this.stroke = e.lineSeriesColor);
          }
          getBubbleDiameter(e) {
            return this.dataSeries.getNativeZValues().get(e);
          }
          getNativeZValues() {
            return this.dataSeries.getNativeZValues();
          }
          toPointSeries(e) {
            return new s.XyzPointSeriesWrapped(this.dataSeries);
          }
          newHitTestProvider() {
            return new l.BubbleSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = { zMultiplier: this.zMultiplier };
            return Object.assign(t.options, i), t;
          }
        }
        t.FastBubbleRenderableSeries = u;
      },
      12641: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastCandlestickRenderableSeries = void 0);
        const r = i(5337),
          s = i(84392),
          o = i(14184),
          a = i(18790),
          n = i(20977),
          l = i(88302);
        class d extends a.BaseOhlcRenderableSeries {
          constructor(e, t) {
            var i, s;
            super(e, t),
              (this.type = r.ESeriesType.CandlestickSeries),
              (this.brushUp =
                (null == t ? void 0 : t.brushUp) ||
                o.SciChartSurfaceBase.DEFAULT_THEME.upBodyBrush),
              (this.brushDown =
                (null == t ? void 0 : t.brushDown) ||
                o.SciChartSurfaceBase.DEFAULT_THEME.downBodyBrush),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this)),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new l.OhlcSeriesDrawingProvider(
                  e,
                  this,
                  l.EOhlcDrawingMode.Candles
                )
              );
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.brushUp === t.upBodyBrush && (this.brushUp = e.upBodyBrush),
              this.brushDown === t.downBodyBrush &&
                (this.brushDown = e.downBodyBrush);
          }
          get brushUp() {
            return (0, s.stripAutoColor)(this.brushUpProperty);
          }
          set brushUp(e) {
            (this.brushUpProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.BRUSH_UP);
          }
          get brushDown() {
            return (0, s.stripAutoColor)(this.brushDownProperty);
          }
          set brushDown(e) {
            (this.brushDownProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.BRUSH_DOWN);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = { brushDown: this.brushDown, brushUp: this.brushUp };
            return Object.assign(t.options, i), t;
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.brushUpProperty.startsWith(s.AUTO_COLOR))
            ) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.brushUp = s.AUTO_COLOR + this.adjustAutoColor("brushUp", r);
            }
            const r = (e + Math.floor(t / 2)) % t;
            if (this.brushDownProperty.startsWith(s.AUTO_COLOR)) {
              const e = i.getFillColor(r, t, this.webAssemblyContext);
              this.brushDown =
                s.AUTO_COLOR + this.adjustAutoColor("brushDown", e);
            }
          }
        }
        t.FastCandlestickRenderableSeries = d;
      },
      20667: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getXRange = t.FastColumnRenderableSeries = void 0);
        const r = i(98140),
          s = i(27970),
          o = i(5337),
          a = i(84392),
          n = i(14184),
          l = i(79961),
          d = i(20977),
          h = i(1367),
          u = i(50836),
          c = i(94707),
          p = i(18314);
        class g extends l.BaseRenderableSeries {
          constructor(e, t) {
            var i, r, a, l, d, p, g, y;
            super(e, t),
              (this.type = o.ESeriesType.ColumnSeries),
              (this.fillProperty =
                n.SciChartSurfaceBase.DEFAULT_THEME.columnFillBrush),
              (this.zeroLineYProperty = 0),
              (this.dataPointWidthProperty = 0.8),
              (this.dataPointWidthModeProperty =
                s.EDataPointWidthMode.Relative),
              (this.cornerRadiusProperty = 0),
              (this.fill =
                null !== (i = null == t ? void 0 : t.fill) && void 0 !== i
                  ? i
                  : this.fillProperty),
              (this.zeroLineY =
                null !== (r = null == t ? void 0 : t.zeroLineY) && void 0 !== r
                  ? r
                  : this.zeroLineYProperty),
              (this.dataPointWidthProperty =
                null !== (a = null == t ? void 0 : t.dataPointWidth) &&
                void 0 !== a
                  ? a
                  : this.dataPointWidthProperty),
              (this.dataPointWidthMode =
                null !== (l = null == t ? void 0 : t.dataPointWidthMode) &&
                void 0 !== l
                  ? l
                  : this.dataPointWidthModeProperty),
              (this.fillLinearGradientProperty =
                null !== (d = null == t ? void 0 : t.fillLinearGradient) &&
                void 0 !== d
                  ? d
                  : this.fillLinearGradientProperty),
              (this.cornerRadiusProperty =
                null !== (p = null == t ? void 0 : t.cornerRadius) &&
                void 0 !== p
                  ? p
                  : this.cornerRadiusProperty),
              (null === (g = this.paletteProvider) || void 0 === g
                ? void 0
                : g.onAttached) &&
                (null === (y = this.paletteProvider) ||
                  void 0 === y ||
                  y.onAttached(this)),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new h.ColumnSeriesDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              this.drawingProviders.push(
                new u.ColumnSeriesDrawingProvider(e, this)
              ),
              this.drawingProviders.push(
                new c.PointMarkerDrawingProvider(e, this)
              ),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.fill === t.columnFillBrush && (this.fill = e.columnFillBrush),
              this.stroke === t.columnLineColor &&
                (this.stroke = e.columnLineColor);
          }
          get fill() {
            return (0, a.stripAutoColor)(this.fillProperty);
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL);
          }
          get fillLinearGradient() {
            return this.fillLinearGradientProperty;
          }
          set fillLinearGradient(e) {
            e !== this.fillLinearGradientProperty &&
              ((this.fillLinearGradientProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.FILL_LINEAR_GRADIENT));
          }
          get zeroLineY() {
            return this.zeroLineYProperty;
          }
          set zeroLineY(e) {
            (this.zeroLineYProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.ZERO_LINE_Y);
          }
          get dataPointWidth() {
            return this.dataPointWidthProperty;
          }
          set dataPointWidth(e) {
            (this.dataPointWidthProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.DATA_POINT_WIDTH);
          }
          get dataPointWidthMode() {
            return this.dataPointWidthModeProperty;
          }
          set dataPointWidthMode(e) {
            (this.dataPointWidthModeProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.DATA_POINT_WIDTH_MODE);
          }
          get cornerRadius() {
            return this.cornerRadiusProperty;
          }
          set cornerRadius(e) {
            (this.cornerRadiusProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.CORNER_RADIUS);
          }
          getXRange() {
            const e = super.getXRange(),
              t = this.dataSeries.count();
            let i = this.dataPointWidth / 2;
            if (
              (this.dataPointWidthMode === s.EDataPointWidthMode.Relative &&
                (i =
                  t > 1 ? ((e.diff / (t - 1)) * this.dataPointWidth) / 2 : 0),
              this.dataPointWidthMode === s.EDataPointWidthMode.Absolute)
            ) {
              const e = this.xAxis.getCurrentCoordinateCalculator();
              i = (e.getDataValue(this.dataPointWidth) - e.getDataValue(0)) / 2;
            }
            return new r.NumberRange(e.min - i, e.max + i);
          }
          getYRange(e, t = !1) {
            const i = super.getYRange(e, t);
            if (i)
              return new r.NumberRange(
                Math.min(i.min, this.zeroLineY),
                Math.max(i.max, this.zeroLineY)
              );
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.fillProperty.startsWith(a.AUTO_COLOR))
            ) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = a.AUTO_COLOR + this.adjustAutoColor("fill", r);
            }
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                dataPointWidth: this.dataPointWidth,
                dataPointWidthMode: this.dataPointWidthMode,
                fill: this.fill,
                zeroLineY: this.zeroLineY,
                fillLinearGradient: this.fillLinearGradient,
                cornerRadius: this.cornerRadius,
              };
            return Object.assign(t.options, i), t;
          }
          newHitTestProvider() {
            return new p.ColumnSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        (t.FastColumnRenderableSeries = g),
          (t.getXRange = (e, t, i) => {
            if (t > 1) {
              const s = ((e.diff / (t - 1)) * i) / 2;
              return new r.NumberRange(e.min - s, e.max + s);
            }
            return e;
          });
      },
      43852: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.adjustRangeByStrokeThickness = t.FastErrorBarsRenderableSeries =
            void 0);
        const r = i(56744),
          s = i(98140),
          o = i(2192),
          a = i(27970),
          n = i(79226),
          l = i(32287),
          d = i(5337),
          h = i(51885),
          u = i(89236),
          c = i(79961),
          p = i(20977),
          g = i(71788),
          y = i(94707),
          f = i(99828);
        class v extends c.BaseRenderableSeries {
          constructor(e, t) {
            var i, r, s, o, h, u, c, p, f;
            super(e, t),
              (this.type = d.ESeriesType.ErrorBarsSeries),
              (this.dataPointWidthProperty = 0.5),
              (this.dataPointWidthModeProperty =
                a.EDataPointWidthMode.Relative),
              (this.errorModeProperty = l.EErrorMode.Both),
              (this.errorDirectionProperty = n.EErrorDirection.Vertical),
              (this.strokeDashArrayProperty = []),
              (this.drawWhiskersProperty = !0),
              (this.drawConnectorProperty = !0),
              (this.dataPointWidth =
                null !== (i = null == t ? void 0 : t.dataPointWidth) &&
                void 0 !== i
                  ? i
                  : this.dataPointWidthProperty),
              (this.errorModeProperty =
                null !== (r = null == t ? void 0 : t.errorMode) && void 0 !== r
                  ? r
                  : this.errorModeProperty),
              (this.errorDirectionProperty =
                null !== (s = null == t ? void 0 : t.errorDirection) &&
                void 0 !== s
                  ? s
                  : this.errorDirectionProperty),
              (this.dataPointWidthMode =
                null !== (o = null == t ? void 0 : t.dataPointWidthMode) &&
                void 0 !== o
                  ? o
                  : this.dataPointWidthModeProperty),
              (this.strokeDashArray =
                null !== (h = null == t ? void 0 : t.strokeDashArray) &&
                void 0 !== h
                  ? h
                  : this.strokeDashArrayProperty),
              (this.drawWhiskers =
                null !== (u = null == t ? void 0 : t.drawWhiskers) &&
                void 0 !== u
                  ? u
                  : this.drawWhiskersProperty),
              (this.drawConnector =
                null !== (c = null == t ? void 0 : t.drawConnector) &&
                void 0 !== c
                  ? c
                  : this.drawConnectorProperty),
              (this.drawingProviders = [
                new g.ErrorSeriesDrawingProvider(e, this),
                new y.PointMarkerDrawingProvider(e, this),
              ]),
              (null === (p = this.paletteProvider) || void 0 === p
                ? void 0
                : p.onAttached) &&
                (null === (f = this.paletteProvider) ||
                  void 0 === f ||
                  f.onAttached(this)),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.stroke === t.lineSeriesColor &&
              (this.stroke = e.lineSeriesColor);
          }
          get strokeDashArray() {
            return this.strokeDashArrayProperty;
          }
          set strokeDashArray(e) {
            (this.strokeDashArrayProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.STROKE_DASH_ARRAY);
          }
          get drawWhiskers() {
            return this.drawWhiskersProperty;
          }
          set drawWhiskers(e) {
            (this.drawWhiskersProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.DRAW_WHISKERS);
          }
          get drawConnector() {
            return this.drawConnectorProperty;
          }
          set drawConnector(e) {
            (this.drawConnectorProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.DRAW_CONNECTOR);
          }
          get paletteProvider() {}
          set paletteProvider(e) {
            throw new Error(
              "paletteProvider is not supported by FastErrorBarsRenderableSeries!"
            );
          }
          get dataPointWidth() {
            return this.dataPointWidthProperty;
          }
          set dataPointWidth(e) {
            (this.dataPointWidthProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.DATA_POINT_WIDTH);
          }
          get errorMode() {
            return this.errorModeProperty;
          }
          set errorMode(e) {
            (this.errorModeProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.ERROR_MODE);
          }
          get errorDirection() {
            return this.errorDirectionProperty;
          }
          set errorDirection(e) {
            (this.errorDirectionProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.ERROR_DIRECTION);
          }
          get dataPointWidthMode() {
            return this.dataPointWidthModeProperty;
          }
          set dataPointWidthMode(e) {
            (this.dataPointWidthModeProperty = e),
              this.notifyPropertyChanged(p.PROPERTY.DATA_POINT_WIDTH_MODE);
          }
          delete() {
            super.delete(),
              (this.pointSeries = (0, r.deleteSafe)(this.pointSeries));
          }
          getDataPointWidth(e, t, i) {
            const r =
                this.errorDirection === n.EErrorDirection.Vertical
                  ? this.dataSeries.getNativeXValues()
                  : this.dataSeries.getNativeYValues(),
              s = e.viewportDimension,
              o = e.isCategoryCoordinateCalculator;
            if (i === a.EDataPointWidthMode.Range) {
              const i = e.visibleMax - e.visibleMin;
              return (e.viewportDimension / i) * t;
            }
            return i === a.EDataPointWidthMode.Absolute
              ? t
              : (0, c.getDataPointWidth)(
                  r,
                  e,
                  s,
                  t,
                  o,
                  this.webAssemblyContext
                );
          }
          getXRange() {
            var e;
            const i = this.errorDirection === n.EErrorDirection.Vertical,
              r = this.errorMode !== l.EErrorMode.Low,
              s = this.errorMode !== l.EErrorMode.High,
              a = this.dataSeries.getXRange(
                h.EDataSeriesValueType.Default,
                !i,
                r,
                s
              );
            return this.xAxis.type === o.EAxisType.LogarithmicAxis
              ? a
              : i
              ? this.adjustRangeByDataPointWidth(a)
              : (0, t.adjustRangeByStrokeThickness)(
                  a,
                  this.strokeThickness,
                  null === (e = this.parentSurface.seriesViewRect) ||
                    void 0 === e
                    ? void 0
                    : e.width
                );
          }
          getYRange(e, i = !1) {
            var r;
            const s = this.errorDirection === n.EErrorDirection.Horizontal,
              a = this.errorMode !== l.EErrorMode.Low,
              d = this.errorMode !== l.EErrorMode.High,
              u = this.isRunningDataAnimation
                ? h.EDataSeriesValueType.FinalAnimationValues
                : h.EDataSeriesValueType.Default,
              c = this.dataSeries.getWindowedYRange(
                e,
                !0,
                i,
                u,
                this.yRangeMode,
                s,
                a,
                d
              );
            return this.yAxis.type === o.EAxisType.LogarithmicAxis
              ? c
              : s
              ? this.adjustRangeByDataPointWidth(c)
              : (0, t.adjustRangeByStrokeThickness)(
                  c,
                  this.strokeThickness,
                  null === (r = this.parentSurface.seriesViewRect) ||
                    void 0 === r
                    ? void 0
                    : r.height
                );
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                dataPointWidth: this.dataPointWidth,
                dataPointWidthMode: this.dataPointWidthMode,
                errorDirection: this.errorDirection,
                errorMode: this.errorMode,
                drawWhiskers: this.drawWhiskers,
                drawConnector: this.drawConnector,
                strokeDashArray: this.strokeDashArray,
              };
            return Object.assign(t.options, i), t;
          }
          toPointSeries(e) {
            if (e)
              throw new Error("Error Bars Series don't support resampling!");
            return new u.HlcPointSeriesWrapped(this.dataSeries);
          }
          newHitTestProvider() {
            return new f.ErrorSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
          adjustRangeByDataPointWidth(e) {
            var t, i, r, o;
            const l = this.dataSeries.count();
            if (l > 1) {
              const d =
                  this.errorDirection === n.EErrorDirection.Vertical
                    ? null !==
                        (i =
                          null === (t = this.parentSurface.seriesViewRect) ||
                          void 0 === t
                            ? void 0
                            : t.width) && void 0 !== i
                      ? i
                      : 0
                    : null !==
                        (o =
                          null === (r = this.parentSurface.seriesViewRect) ||
                          void 0 === r
                            ? void 0
                            : r.height) && void 0 !== o
                    ? o
                    : 0,
                h =
                  this.dataPointWidthMode === a.EDataPointWidthMode.Relative
                    ? ((e.diff / (l - 1)) * this.dataPointWidth) / 2
                    : d &&
                      (0, c.getDelta)({
                        range: e,
                        areaSize: d,
                        pointSize: this.dataPointWidth,
                      });
              return new s.NumberRange(e.min - h, e.max + h);
            }
            return e;
          }
        }
        (t.FastErrorBarsRenderableSeries = v),
          (t.adjustRangeByStrokeThickness = (e, t, i = 0) => {
            const r =
              i && (0, c.getDelta)({ pointSize: t, areaSize: i, range: e });
            return new s.NumberRange(e.min - r, e.max + r);
          });
      },
      93522: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastImpulseRenderableSeries = void 0);
        const r = i(98140),
          s = i(5337),
          o = i(84392),
          a = i(10749),
          n = i(14184),
          l = i(79961),
          d = i(20977),
          h = i(20667),
          u = i(30995);
        class c extends h.FastColumnRenderableSeries {
          constructor(e, t) {
            var i, r, o, l;
            super(e, t),
              (this.type = s.ESeriesType.ImpulseSeries),
              (this.impulseFillProperty =
                n.SciChartSurfaceBase.DEFAULT_THEME.impulseFillBrush),
              (this.impulseSizeProperty = 10),
              (this.impulseDataPointWidthProperty = 0),
              (this.impulseStrokeThicknessProperty = 1),
              (this.strokeThickness =
                null !== (i = null == t ? void 0 : t.strokeThickness) &&
                void 0 !== i
                  ? i
                  : this.impulseStrokeThicknessProperty),
              (this.fill =
                null !== (r = null == t ? void 0 : t.fill) && void 0 !== r
                  ? r
                  : this.impulseFillProperty),
              (this.size =
                null !== (o = null == t ? void 0 : t.size) && void 0 !== o
                  ? o
                  : this.impulseSizeProperty),
              (this.stroke =
                null !== (l = null == t ? void 0 : t.fill) && void 0 !== l
                  ? l
                  : this.impulseFillProperty),
              (this.dataPointWidth = this.impulseDataPointWidthProperty),
              (null == t ? void 0 : t.pointMarker) ||
                (this.pointMarker = new a.EllipsePointMarker(e, {
                  width: this.impulseSizeProperty,
                  height: this.impulseSizeProperty,
                  fill: this.fill,
                  stroke: this.fill,
                }));
          }
          get fill() {
            return (0, o.stripAutoColor)(this.impulseFillProperty);
          }
          set fill(e) {
            (this.impulseFillProperty = e),
              (this.stroke = e),
              this.pointMarker &&
                ((this.pointMarker.fill = e), (this.pointMarker.stroke = e)),
              this.impulseFillProperty !== e &&
                this.notifyPropertyChanged(d.PROPERTY.STROKE);
          }
          get size() {
            return this.impulseSizeProperty;
          }
          set size(e) {
            (this.impulseSizeProperty = e),
              this.pointMarker &&
                ((this.pointMarker.width = e), (this.pointMarker.height = e));
          }
          getXRange() {
            var e, t;
            const i = super.getXRange(),
              s = (0, l.getDelta)({
                pointSize: this.size,
                areaSize:
                  null !==
                    (t =
                      null === (e = this.parentSurface.seriesViewRect) ||
                      void 0 === e
                        ? void 0
                        : e.width) && void 0 !== t
                    ? t
                    : 0,
                range: i,
              });
            return new r.NumberRange(i.min - s, i.max + s);
          }
          getYRange(e, t = !1) {
            var i, s;
            const o = super.getYRange(e, t);
            if (!o) return;
            const a = (0, l.getDelta)({
              pointSize: this.size,
              areaSize:
                null !==
                  (s =
                    null === (i = this.parentSurface.seriesViewRect) ||
                    void 0 === i
                      ? void 0
                      : i.height) && void 0 !== s
                  ? s
                  : 0,
              range: o,
            });
            return new r.NumberRange(o.min - a, o.max + a);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                fill: this.fill,
                size: this.size,
                zeroLineY: this.zeroLineY,
              };
            return Object.assign(t.options, i), t;
          }
          applyTheme(e) {
            super.applyTheme(e);
            const t = this.parentSurface.previousThemeProvider;
            this.fill === t.impulseFillBrush &&
              (this.fill = e.impulseFillBrush);
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.impulseFillProperty.startsWith(o.AUTO_COLOR))
            ) {
              const r = i.getStrokeColor(e, t, this.webAssemblyContext);
              this.fill = o.AUTO_COLOR + this.adjustAutoColor("impulseFill", r);
            }
          }
          newHitTestProvider() {
            return new u.ImpulseSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.FastImpulseRenderableSeries = c;
      },
      65297: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastLineRenderableSeries = void 0);
        const r = i(56744),
          s = i(5337),
          o = i(20782);
        class a extends o.BaseLineRenderableSeries {
          constructor(e, t) {
            var i, r;
            super(e, t),
              (this.type = s.ESeriesType.LineSeries),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (r = this.paletteProvider) ||
                  void 0 === r ||
                  r.onAttached(this));
          }
          delete() {
            super.delete(),
              (this.resamplerHelper = (0, r.deleteSafe)(this.resamplerHelper)),
              (this.pointSeries = (0, r.deleteSafe)(this.pointSeries));
          }
        }
        t.FastLineRenderableSeries = a;
      },
      72362: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastMountainRenderableSeries = void 0);
        const r = i(5337),
          s = i(36650);
        class o extends s.BaseMountainRenderableSeries {
          constructor(e, t) {
            var i, s;
            super(e, t),
              (this.type = r.ESeriesType.MountainSeries),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this));
          }
        }
        t.FastMountainRenderableSeries = o;
      },
      95179: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastOhlcRenderableSeries = void 0);
        const r = i(5337),
          s = i(18790),
          o = i(88302);
        class a extends s.BaseOhlcRenderableSeries {
          constructor(e, t) {
            var i, s;
            super(e, t),
              (this.type = r.ESeriesType.OhlcSeries),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this)),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new o.OhlcSeriesDrawingProvider(
                  e,
                  this,
                  o.EOhlcDrawingMode.Ohlc
                )
              );
          }
        }
        t.FastOhlcRenderableSeries = a;
      },
      89078: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.FastTextRenderableSeries = void 0);
        const r = i(5337),
          s = i(33240),
          o = i(79961),
          a = i(1126),
          n = i(94707),
          l = i(92231);
        class d extends o.BaseRenderableSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = r.ESeriesType.TextSeries),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new n.PointMarkerDrawingProvider(e, this)
              ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty = new a.TextDataLabelProvider(
                  null == t ? void 0 : t.dataLabels
                )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation);
          }
          needsResampling(e) {
            return (
              !!this.dataSeries.fifoCapacity &&
              ((e.resamplingMode = s.EResamplingMode.None),
              this.resamplerHelper.resetAndFillBasicNativeArgs(
                e,
                this.getNativeXValues()
              ),
              !0)
            );
          }
          newHitTestProvider() {
            return new l.TextSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.FastTextRenderableSeries = d;
      },
      21037: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GlowEffect = void 0);
        const r = i(75323),
          s = i(93545);
        class o extends s.ShaderEffect {
          constructor(e, t) {
            super(e, new e.SCRTGlowEffect(), {
              range: (null == t ? void 0 : t.range) || 1,
              intensity: (null == t ? void 0 : t.intensity) || 1,
            }),
              (this.type = r.EShaderEffectType.Glow);
          }
        }
        t.GlowEffect = o;
      },
      60981: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HeatmapColorMap = void 0);
        const r = i(3214),
          s = i(50605),
          o = i(20977);
        class a {
          constructor(e) {
            var t, i;
            (this.minimumProperty =
              null !== (t = null == e ? void 0 : e.minimum) && void 0 !== t
                ? t
                : 0),
              (this.maximumProperty =
                null !== (i = null == e ? void 0 : e.maximum) && void 0 !== i
                  ? i
                  : 100),
              (this.gradientStops = (null == e ? void 0 : e.gradientStops) || [
                { offset: 0, color: "Red" },
                { offset: 1, color: "Green" },
              ]),
              (this.propertyChanged = new r.EventHandler()),
              this.calculateScaleFactor();
          }
          get gradientStops() {
            return this.gradientStopsProperty;
          }
          set gradientStops(e) {
            (this.gradientStopsProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.GRADIENT_STOPS);
          }
          get minimum() {
            return this.minimumProperty;
          }
          set minimum(e) {
            (this.minimumProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.MINIMUM);
          }
          get maximum() {
            return this.maximumProperty;
          }
          set maximum(e) {
            (this.maximumProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.MAXIMUM);
          }
          toJSON() {
            return {
              minimum: this.minimum,
              maximum: this.maximum,
              gradientStops: this.gradientStops,
            };
          }
          notifyPropertyChanged(e) {
            var t;
            null === (t = this.propertyChanged) ||
              void 0 === t ||
              t.raiseEvent(new s.PropertyChangedEventArgs(e));
          }
          calculateScaleFactor() {
            this.scaleFactorProperty =
              (a.DefaultPrecision - 1) /
              Math.abs(this.maximumProperty - this.minimumProperty);
          }
        }
        (t.HeatmapColorMap = a), (a.DefaultPrecision = 1e3);
      },
      72704: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BandSeriesHitTestProvider = void 0);
        const r = i(7541),
          s = i(85414),
          o = i(35013);
        class a extends r.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: a,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return o.HitTestInfo.empty();
            const u = s.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              g = h.getNativeY1Values(),
              y = s.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                a,
                n,
                h,
                c,
                p,
                l,
                d,
                u,
                0
              );
            if (h.dataDistributionCalculator.isSortedAscending && u >= 0) {
              (y.y1Value = g.get(u)), (y.y1Coord = a.getCoordinate(y.y1Value));
              const e = s.hitTestHelpers.testIsHitForBand(
                this.parentSeries.isDigitalLine,
                r,
                a,
                h.getNativeXValues(),
                (e) => p.get(e),
                (e) => g.get(e),
                u,
                l,
                d,
                h
              );
              (y.isHit = e.isHit),
                (y.point2dataSeriesIndex = e.secondPointIndex),
                void 0 !== e.secondPointIndex &&
                  ((y.point2xValue = c.get(e.secondPointIndex)),
                  (y.point2xCoord = r.getCoordinate(y.point2xValue)),
                  (y.point2yValue = p.get(e.secondPointIndex)),
                  (y.point2yCoord = a.getCoordinate(y.point2yValue)),
                  (y.point2y1Value = g.get(e.secondPointIndex)),
                  (y.point2y1Coord = a.getCoordinate(y.point2y1Value)),
                  (y.point2metadata = h.getMetadataAt(e.secondPointIndex)));
            } else y.isHit = !1;
            return y;
          }
          hitTestDataPoint(
            e,
            t,
            i = r.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            const a = this.getTranslatedHitTestPoint(e, t);
            if (!a) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: n,
                yCoordinateCalculator: l,
                isVerticalChart: d,
              } = this.currentRenderPassData,
              h = d ? a.y : a.x,
              u = d ? a.x : a.y,
              c = this.parentSeries.dataSeries;
            if (!c) return o.HitTestInfo.empty();
            const { nearestPointIndex: p, distance: g } =
                s.hitTestHelpers.getNearestXyyPoint(
                  this.webAssemblyContext,
                  n,
                  l,
                  c,
                  h,
                  u,
                  i
                ),
              y = s.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                n,
                l,
                d,
                c,
                c.getNativeXValues(),
                c.getNativeYValues(),
                h,
                u,
                p,
                i,
                g
              );
            return (
              p >= 0
                ? ((y.y1Value = c.getNativeY1Values().get(p)),
                  (y.y1Coord = l.getCoordinate(y.y1Value)),
                  (y.isHit =
                    s.hitTestHelpers.testIsHitForPoint(
                      n,
                      l,
                      c.getNativeXValues(),
                      c.getNativeYValues(),
                      p,
                      h,
                      u,
                      i,
                      c
                    ) ||
                    s.hitTestHelpers.testIsHitForPoint(
                      n,
                      l,
                      c.getNativeXValues(),
                      c.getNativeY1Values(),
                      p,
                      h,
                      u,
                      i,
                      c
                    )))
                : (y.isHit = !1),
              y
            );
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: a,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return o.HitTestInfo.empty();
            const u = s.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              g = h.getNativeY1Values(),
              y = s.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                a,
                n,
                h,
                c,
                p,
                l,
                d,
                u,
                0
              );
            if (
              (u >= 0
                ? ((y.isHit = y.isWithinDataBounds),
                  (y.y1Value = g.get(u)),
                  (y.y1Coord = a.getCoordinate(y.y1Value)))
                : (y.isHit = !1),
              h.dataDistributionCalculator.isSortedAscending && u >= 0)
            ) {
              const e = c.size(),
                t = r.getCoordinate(
                  r.isCategoryCoordinateCalculator ? u : c.get(u)
                );
              if (
                !(
                  (u === e - 1 &&
                    (r.hasFlippedCoordinates ? l >= t : l <= t)) ||
                  (0 === u && (r.hasFlippedCoordinates ? l <= t : l >= t))
                )
              ) {
                const e = s.hitTestHelpers.testIsHitForLine(
                  r,
                  a,
                  c,
                  p,
                  u,
                  l,
                  d,
                  0,
                  h
                );
                (y.point2dataSeriesIndex = e.secondPointIndex),
                  void 0 !== e.secondPointIndex &&
                    ((y.point2xValue = c.get(e.secondPointIndex)),
                    (y.point2xCoord = r.getCoordinate(y.point2xValue)),
                    (y.point2yValue = p.get(e.secondPointIndex)),
                    (y.point2yCoord = a.getCoordinate(y.point2yValue)),
                    (y.point2y1Value = g.get(e.secondPointIndex)),
                    (y.point2y1Coord = a.getCoordinate(y.point2y1Value)),
                    (y.point2metadata = h.getMetadataAt(e.secondPointIndex)));
              }
            }
            return y;
          }
        }
        t.BandSeriesHitTestProvider = a;
      },
      7541: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BaseHitTestProvider = void 0);
        const r = i(23866),
          s = i(75772),
          o = i(32873),
          a = i(85414),
          n = i(35013);
        class l {
          constructor(e, t) {
            r.Guard.notNull(e, "parentSeries"),
              (this.parentSeries = e),
              (this.webAssemblyContext = t);
          }
          update(e) {
            this.currentRenderPassData = e;
          }
          hitTestDataPoint(e, t, i = l.DEFAULT_HIT_TEST_RADIUS) {
            const r = this.getTranslatedHitTestPoint(e, t);
            if (!r) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: o,
                isVerticalChart: d,
              } = this.currentRenderPassData,
              h = d ? r.y : r.x,
              u = d ? r.x : r.y,
              c = this.parentSeries.dataSeries;
            if (!c) return n.HitTestInfo.empty();
            const p = a.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                s,
                o,
                c,
                h,
                u,
                i
              ),
              g = c.getNativeXValues(),
              y = c.getNativeYValues(),
              f = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                o,
                d,
                c,
                g,
                y,
                h,
                u,
                p.nearestPointIndex,
                i,
                p.distance
              );
            return (
              p.nearestPointIndex >= 0
                ? (f.isHit = a.hitTestHelpers.testIsHitForPoint(
                    s,
                    o,
                    g,
                    y,
                    p.nearestPointIndex,
                    h,
                    u,
                    i,
                    c
                  ))
                : (f.isHit = !1),
              f
            );
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = l.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTestDataPoint(e, t, i);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: s,
                isVerticalChart: o,
              } = this.currentRenderPassData,
              l = o ? i.y : i.x,
              d = o ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return n.HitTestInfo.empty();
            const u = a.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              g = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                s,
                o,
                h,
                c,
                p,
                l,
                d,
                u,
                0,
                void 0
              );
            if (
              ((g.isHit = g.isWithinDataBounds),
              h.dataDistributionCalculator.isSortedAscending && u >= 0)
            ) {
              const e = c.size(),
                t = r.getCoordinate(
                  r.isCategoryCoordinateCalculator ? u : c.get(u)
                );
              if (
                !(
                  (u === e - 1 &&
                    (r.hasFlippedCoordinates ? l >= t : l <= t)) ||
                  (0 === u && (r.hasFlippedCoordinates ? l <= t : l >= t))
                )
              ) {
                const e = a.hitTestHelpers.testIsHitForLine(
                  r,
                  s,
                  c,
                  p,
                  u,
                  l,
                  d,
                  0,
                  h
                );
                (g.point2dataSeriesIndex = e.secondPointIndex),
                  (g.point2xValue = c.get(e.secondPointIndex)),
                  (g.point2xCoord = r.getCoordinate(g.point2xValue)),
                  (g.point2yValue = p.get(e.secondPointIndex)),
                  (g.point2yCoord = s.getCoordinate(g.point2yValue)),
                  (g.point2metadata = h.getMetadataAt(e.secondPointIndex));
              }
            }
            return g;
          }
          getTranslatedHitTestPoint(e, t) {
            if (this.currentRenderPassData && void 0 !== e && void 0 !== t)
              return (0, o.translateFromCanvasToSeriesViewRect)(
                new s.Point(e, t),
                this.parentSeries.parentSurface.seriesViewRect
              );
          }
        }
        (t.BaseHitTestProvider = l), (l.DEFAULT_HIT_TEST_RADIUS = 7.07);
      },
      89748: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.BubbleSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(86127),
          o = i(7541),
          a = i(85414),
          n = i(35013);
        class l extends o.BaseHitTestProvider {
          hitTest(e, t, i = 0) {
            const o = this.getTranslatedHitTestPoint(e, t);
            if (!o) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: l,
                yCoordinateCalculator: d,
                isVerticalChart: h,
              } = this.currentRenderPassData,
              u = h ? o.y : o.x,
              c = h ? o.x : o.y,
              p = this.parentSeries.dataSeries;
            if (!p) return n.HitTestInfo.empty();
            const g = a.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                l,
                d,
                p,
                u,
                c,
                i
              ),
              y = p.getNativeXValues(),
              f = p.getNativeYValues(),
              v = p.getNativeZValues(),
              m = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                l,
                d,
                h,
                p,
                y,
                f,
                u,
                c,
                g.nearestPointIndex,
                i
              );
            if (g.nearestPointIndex >= 0) {
              m.zValue = v.get(g.nearestPointIndex);
              const e = (0, r.calcDistance)(u, c, m.xCoord, m.yCoord);
              m.isHit = e < (m.zValue * s.DpiHelper.PIXEL_RATIO) / 2 + i;
              const t = l.isCategoryCoordinateCalculator,
                o = t ? 0 : y.get(0),
                a = l.getCoordinate(o),
                n = p.getNativeZValues().get(0) / 2,
                d = t ? y.size() - 1 : y.get(y.size() - 1),
                h = l.getCoordinate(d),
                f = p.getNativeZValues().get(y.size() - 1) / 2;
              m.isWithinDataBounds =
                a < h
                  ? a - n <= m.hitTestPoint.x && m.hitTestPoint.x <= h + f
                  : h - f <= m.hitTestPoint.x && m.hitTestPoint.x <= a + n;
            } else m.isHit = !1;
            return m;
          }
          hitTestDataPoint(
            e,
            t,
            i = o.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t, i);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: s,
                isVerticalChart: o,
              } = this.currentRenderPassData,
              l = o ? i.y : i.x,
              d = o ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return n.HitTestInfo.empty();
            const u = h.getNativeXValues(),
              c = h.getNativeYValues(),
              p = h.getNativeZValues(),
              g = a.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              y = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                s,
                o,
                h,
                u,
                c,
                l,
                d,
                g,
                0
              );
            if (g >= 0) {
              y.zValue = p.get(g);
              const e = r.isCategoryCoordinateCalculator,
                t = e ? 0 : u.get(0),
                i = r.getCoordinate(t),
                s = h.getNativeZValues().get(0) / 2,
                o = e ? u.size() - 1 : u.get(u.size() - 1),
                a = r.getCoordinate(o),
                n = h.getNativeZValues().get(u.size() - 1) / 2;
              (y.isWithinDataBounds =
                i < a
                  ? i - s <= y.hitTestPoint.x && y.hitTestPoint.x <= a + n
                  : a - n <= y.hitTestPoint.x && y.hitTestPoint.x <= i + s),
                (y.isHit = y.isWithinDataBounds);
            } else y.isHit = !1;
            return y;
          }
        }
        t.BubbleSeriesHitTestProvider = l;
      },
      18314: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ColumnSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: s,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return a.HitTestInfo.empty();
            const u = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              g = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                s,
                n,
                h,
                c,
                p,
                l,
                d,
                u,
                0
              );
            return (
              (g.isHit =
                u >= 0 &&
                o.hitTestHelpers.testIsHitForColumn(
                  r,
                  s,
                  this.parentSeries,
                  c,
                  p,
                  u,
                  l,
                  d
                )),
              g
            );
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = s.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = u.getNativeXValues(),
              p = u.getNativeYValues(),
              g = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                u,
                d,
                u.dataDistributionCalculator.isSortedAscending
              ),
              y = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                u,
                c,
                p,
                d,
                h,
                g,
                0
              ),
              f = s.isCategoryCoordinateCalculator;
            if (g >= 0) {
              const e = f ? 0 : c.get(0),
                t = f ? c.size() - 1 : c.get(c.size() - 1),
                { dataPointWidth: i } = this.parentSeries;
              (y.isWithinDataBounds = (0, r.testIsInInterval)(
                y.hitTestPointValues.x,
                e,
                t,
                i / 2
              )),
                (y.isHit = y.isWithinDataBounds);
            } else y.isHit = !1;
            return y;
          }
        }
        t.ColumnSeriesHitTestProvider = n;
      },
      99828: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ErrorSeriesHitTestProvider = void 0);
        const r = i(79226),
          s = i(32287),
          o = i(21670),
          a = i(7541),
          n = i(85414),
          l = i(35013);
        class d extends a.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return l.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: s,
                isVerticalChart: o,
              } = this.currentRenderPassData,
              a = o ? i.y : i.x,
              d = o ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return l.HitTestInfo.empty();
            const u = n.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                a,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              g = n.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                s,
                o,
                h,
                c,
                p,
                a,
                d,
                u,
                0
              );
            if (u >= 0) {
              const e = n.hitTestHelpers.testIsHitForErrorBars(
                r,
                s,
                this.parentSeries,
                c,
                p,
                u,
                a,
                d
              );
              (g.isHit = e.isHit),
                (g.highValue = e.highValue),
                (g.lowValue = e.lowValue);
            } else g.isHit = !1;
            return g;
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = a.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return l.HitTestInfo.empty();
            const {
                xCoordinateCalculator: a,
                yCoordinateCalculator: d,
                isVerticalChart: h,
              } = this.currentRenderPassData,
              u = h ? i.y : i.x,
              c = h ? i.x : i.y,
              p = this.parentSeries.dataSeries;
            if (!p) return l.HitTestInfo.empty();
            const g = p.getNativeXValues(),
              y = p.getNativeYValues(),
              f = p.getNativeLowValues(),
              v = p.getNativeHighValues(),
              m = n.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                a,
                p,
                u,
                p.dataDistributionCalculator.isSortedAscending
              ),
              S = n.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                a,
                d,
                h,
                p,
                g,
                y,
                u,
                c,
                m,
                0
              ),
              P = a.isCategoryCoordinateCalculator;
            if (m >= 0) {
              const e =
                this.parentSeries.errorDirection === r.EErrorDirection.Vertical;
              (S.highValue = v.get(m)), (S.lowValue = f.get(m));
              const t = this.parentSeries.errorMode !== s.EErrorMode.High,
                i = this.parentSeries.errorMode !== s.EErrorMode.Low;
              let n, l;
              e
                ? ((n = P ? 0 : g.get(0)),
                  (l = P ? g.size() - 1 : g.get(g.size() - 1)))
                : ((n = t ? f.get(0) : g.get(0)),
                  (l = i ? v.get(g.size() - 1) : g.get(g.size() - 1)));
              const h =
                  this.parentSeries.getDataPointWidth(
                    e ? a : d,
                    this.parentSeries.dataPointWidth,
                    this.parentSeries.dataPointWidthMode
                  ) / 2,
                u = a.getCoordinate(S.hitTestPointValues.x),
                c = a.getCoordinate(n),
                p = a.getCoordinate(l);
              (S.isWithinDataBounds = (0, o.testIsInInterval)(u, c - h, p + h)),
                (S.isHit = S.isWithinDataBounds);
            } else S.isHit = !1;
            return S;
          }
        }
        t.ErrorSeriesHitTestProvider = d;
      },
      35013: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HitTestInfo = void 0);
        class i {
          constructor(e, t = !1) {
            (this.isEmpty = t), (this.associatedSeries = e);
          }
          static empty() {
            return new i(void 0, !0);
          }
          getEuclideanDistance() {
            var e, t;
            const i =
                (null === (e = this.hitTestPoint) || void 0 === e
                  ? void 0
                  : e.x) - this.xCoord,
              r =
                (null === (t = this.hitTestPoint) || void 0 === t
                  ? void 0
                  : t.y) - this.yCoord;
            return Math.sqrt(i * i + r * r);
          }
          get distance() {
            return void 0 !== this.distanceProperty
              ? this.distanceProperty
              : this.getEuclideanDistance();
          }
          set distance(e) {
            this.distanceProperty = e;
          }
        }
        t.HitTestInfo = i;
      },
      30995: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ImpulseSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(86127),
          o = i(7541),
          a = i(85414),
          n = i(35013);
        class l extends o.BaseHitTestProvider {
          hitTest(e, t, i = o.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS) {
            const r = this.getTranslatedHitTestPoint(e, t);
            if (!r) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: l,
                isVerticalChart: d,
              } = this.currentRenderPassData,
              h = d ? r.y : r.x,
              u = d ? r.x : r.y,
              c = this.parentSeries.dataSeries;
            if (!c) return n.HitTestInfo.empty();
            const p = a.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                s,
                l,
                c,
                h,
                u,
                i
              ),
              g = a.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                c,
                h,
                c.dataDistributionCalculator.isSortedAscending
              ),
              y = c.getNativeXValues(),
              f = c.getNativeYValues(),
              v = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                l,
                d,
                c,
                y,
                f,
                h,
                u,
                g,
                0
              );
            return (
              g >= 0 || p.nearestPointIndex >= 0
                ? (v.isHit =
                    a.hitTestHelpers.testIsHitForImpulse(
                      s,
                      l,
                      this.parentSeries,
                      y,
                      f,
                      g,
                      h,
                      u,
                      i
                    ) ||
                    a.hitTestHelpers.testIsHitForPoint(
                      s,
                      l,
                      y,
                      f,
                      p.nearestPointIndex,
                      h,
                      u,
                      this.parentSeries.size,
                      c
                    ))
                : (v.isHit = !1),
              v
            );
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = o.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t, i);
          }
          hitTestXSlice(e, t) {
            var i;
            const o = this.getTranslatedHitTestPoint(e, t);
            if (!o) return n.HitTestInfo.empty();
            const {
                xCoordinateCalculator: l,
                yCoordinateCalculator: d,
                isVerticalChart: h,
              } = this.currentRenderPassData,
              u = h ? o.y : o.x,
              c = h ? o.x : o.y,
              p = this.parentSeries.dataSeries;
            if (!p) return n.HitTestInfo.empty();
            const g = p.getNativeXValues(),
              y = p.getNativeYValues(),
              f = a.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                l,
                p,
                u,
                p.dataDistributionCalculator.isSortedAscending
              ),
              v = a.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                l,
                d,
                h,
                p,
                g,
                y,
                u,
                c,
                f,
                0
              ),
              m = l.isCategoryCoordinateCalculator,
              S =
                (null !== (i = this.parentSeries.size) && void 0 !== i
                  ? i
                  : 0) * s.DpiHelper.PIXEL_RATIO,
              P = Math.abs(l.getDataValue(S) - l.getDataValue(0));
            if (f >= 0) {
              const e = m ? 0 : g.get(0),
                t = m ? g.size() - 1 : g.get(g.size() - 1);
              (v.isWithinDataBounds = (0, r.testIsInInterval)(
                v.hitTestPointValues.x,
                e,
                t,
                P / 2
              )),
                (v.isHit = v.isWithinDataBounds);
            } else v.isHit = !1;
            return v;
          }
        }
        t.ImpulseSeriesHitTestProvider = l;
      },
      28628: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LineSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t, i = s.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS) {
            const r = this.getTranslatedHitTestPoint(e, t);
            if (!r) return a.HitTestInfo.empty();
            const { isVerticalChart: o } = this.currentRenderPassData,
              n = o ? r.y : r.x,
              l = o ? r.x : r.y;
            return this.parentSeries.dataSeries.dataDistributionCalculator
              .isSortedAscending
              ? this.hitTestSorted(n, l, i)
              : this.hitTestUnsorted(n, l, i);
          }
          hitTestSorted(e, t, i) {
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: s,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = this.parentSeries.dataSeries;
            if (!l) return a.HitTestInfo.empty();
            const d = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                l,
                e,
                l.dataDistributionCalculator.isSortedAscending
              ),
              h = l.getNativeXValues(),
              u = l.getNativeYValues(),
              c = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                s,
                n,
                l,
                h,
                u,
                e,
                t,
                d,
                i,
                void 0
              );
            if (d >= 0) {
              const a = h.size(),
                n = r.getCoordinate(
                  r.isCategoryCoordinateCalculator ? d : h.get(d)
                );
              if (
                (d === a - 1 && (r.hasFlippedCoordinates ? e >= n : e <= n)) ||
                (0 === d && (r.hasFlippedCoordinates ? e <= n : e >= n))
              )
                c.isHit = o.hitTestHelpers.testIsHitForPoint(
                  r,
                  s,
                  h,
                  u,
                  d,
                  e,
                  t,
                  i,
                  l
                );
              else {
                const a = o.hitTestHelpers.testIsHitForLine(
                  r,
                  s,
                  h,
                  u,
                  d,
                  e,
                  t,
                  i,
                  l
                );
                (c.isHit = a.isHit),
                  (c.point2dataSeriesIndex = a.secondPointIndex),
                  (c.point2xValue = h.get(a.secondPointIndex)),
                  (c.point2xCoord = r.getCoordinate(c.point2xValue)),
                  (c.point2yValue = u.get(a.secondPointIndex)),
                  (c.point2yCoord = s.getCoordinate(c.point2yValue)),
                  (c.point2metadata = l.getMetadataAt(a.secondPointIndex));
              }
            } else c.isHit = !1;
            return c;
          }
          hitTestUnsorted(e, t, i) {
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = this.parentSeries.dataSeries;
            if (!d) return a.HitTestInfo.empty();
            const h = o.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                s,
                n,
                d,
                e,
                t,
                i
              ),
              u = d.getNativeXValues(),
              c = d.getNativeYValues(),
              p = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                d,
                u,
                c,
                e,
                t,
                h.nearestPointIndex,
                i,
                h.distance
              );
            if (h.nearestPointIndex >= 0) {
              const o = u.size();
              let a = Number.MAX_VALUE,
                l = Number.MIN_VALUE,
                h = Number.MAX_VALUE,
                g = Number.MIN_VALUE;
              for (let e = 0; e < o; e++) {
                const t = u.get(e),
                  i = c.get(e);
                (a = t < a ? t : a),
                  (l = t > l ? t : l),
                  (h = i < h ? i : h),
                  (g = i > g ? i : g);
              }
              if (
                ((p.isWithinDataBounds =
                  a <= p.hitTestPointValues.x &&
                  p.hitTestPointValues.x <= l &&
                  h <= p.hitTestPointValues.y &&
                  p.hitTestPointValues.y <= g),
                (0, r.calcDistance)(e, t, p.xCoord, p.yCoord) < i)
              )
                return (p.isHit = !0), p;
              let y = Number.MAX_VALUE,
                f = -1;
              for (let a = 0; a < o - 1; a++) {
                const o = u.get(a),
                  l = c.get(a),
                  d = u.get(a + 1),
                  h = c.get(a + 1),
                  p = s.getCoordinate(o),
                  g = n.getCoordinate(l),
                  v = s.getCoordinate(d),
                  m = n.getCoordinate(h),
                  S = (0, r.calcDistance)(p, g, v, m),
                  P = (0, r.calcDistance)(p, g, e, t),
                  C = (0, r.calcDistance)(v, m, e, t);
                if (P <= S + i && C <= S + i) {
                  const i = (0, r.calcDistanceFromLine)(e, t, p, g, v, m);
                  i <= y && ((y = i), (f = a));
                }
              }
              if (-1 !== f)
                return (
                  (p.dataSeriesIndex = f),
                  (p.xValue = u.get(f)),
                  (p.xCoord = s.getCoordinate(p.xValue)),
                  (p.yValue = c.get(f)),
                  (p.yCoord = n.getCoordinate(p.yValue)),
                  (p.point2dataSeriesIndex = f + 1),
                  (p.point2xValue = u.get(f + 1)),
                  (p.point2xCoord = s.getCoordinate(p.point2xValue)),
                  (p.point2yValue = c.get(f + 1)),
                  (p.point2yCoord = n.getCoordinate(p.point2yValue)),
                  (p.isHit = y <= i),
                  (p.point2metadata = d.getMetadataAt(f + 1)),
                  p
                );
            }
            return (p.isHit = !1), p;
          }
        }
        t.LineSeriesHitTestProvider = n;
      },
      47453: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MountainSeriesHitTestProvider = void 0);
        const r = i(7541),
          s = i(85414),
          o = i(35013);
        class a extends r.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: a,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries,
              u = h.dataSeries;
            if (!u) return o.HitTestInfo.empty();
            const c = s.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                u,
                l,
                u.dataDistributionCalculator.isSortedAscending
              ),
              p = u.getNativeXValues(),
              g = u.getNativeYValues(),
              y = s.hitTestHelpers.createHitTestInfo(
                h,
                r,
                a,
                n,
                u,
                p,
                g,
                l,
                d,
                c,
                0
              );
            if (u.dataDistributionCalculator.isSortedAscending && c >= 0) {
              const e = s.hitTestHelpers.testIsHitForMountain(
                this.parentSeries.isDigitalLine,
                r,
                a,
                u,
                h.zeroLineY,
                c,
                l,
                d
              );
              (y.isHit = e.isHit),
                (y.point2dataSeriesIndex = e.secondPointIndex),
                void 0 !== e.secondPointIndex &&
                  ((y.point2xValue = p.get(e.secondPointIndex)),
                  (y.point2xCoord = r.getCoordinate(y.point2xValue)),
                  (y.point2yValue = g.get(e.secondPointIndex)),
                  (y.point2yCoord = a.getCoordinate(y.point2yValue)),
                  (y.point2metadata = u.getMetadataAt(e.secondPointIndex)));
            } else y.isHit = !1;
            return y;
          }
        }
        t.MountainSeriesHitTestProvider = a;
      },
      80456: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NonUniformHeatmapHitTestProvider = void 0);
        const r = i(75772),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = o.hitTestHelpers.getNearestNonUniformHeatmapPoint(
                s,
                n,
                u,
                d,
                h
              ),
              { xIndex: p, yIndex: g, zValue: y } = c,
              f = new a.HitTestInfo(this.parentSeries);
            (f.dataSeriesName = this.parentSeries.type),
              (f.dataSeriesType = u.type),
              (f.hitTestPoint = new r.Point(d, h));
            const v = s.getDataValue(d),
              m = n.getDataValue(h);
            return (
              (f.hitTestPointValues = new r.Point(v, m)),
              (f.xValue = v),
              (f.yValue = m),
              (f.heatmapXIndex = p),
              (f.heatmapYIndex = g),
              (f.zValue = y),
              (f.heatmapValue = y),
              (f.xCoord = d),
              (f.yCoord = h),
              (f.isHit = -1 !== p && -1 !== g),
              (f.isWithinDataBounds = f.isHit),
              -1 !== p && -1 !== g && (f.metadata = u.getMetadataAt(g, p)),
              f
            );
          }
          hitTestDataPoint(e, t) {
            return this.hitTest(e, t);
          }
          hitTestXSlice(e, t) {
            return this.hitTest(e, t);
          }
        }
        t.NonUniformHeatmapHitTestProvider = n;
      },
      8535: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t, i = 0) {
            const r = this.getTranslatedHitTestPoint(e, t);
            if (!r) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? r.y : r.x,
              h = l ? r.x : r.y,
              u = this.parentSeries,
              c = this.parentSeries.dataSeries;
            if (!c) return a.HitTestInfo.empty();
            const p = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                c,
                d,
                c.dataDistributionCalculator.isSortedAscending
              ),
              g = c.getNativeXValues(),
              y = c.getNativeYValues(),
              f = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                c,
                g,
                y,
                d,
                h,
                p,
                i
              );
            if (p >= 0) {
              const e = o.hitTestHelpers.testIsHitForOHLC(
                s,
                n,
                u,
                c,
                p,
                d,
                h,
                i
              );
              (f.isHit = e.isHit),
                (f.openValue = e.openValue),
                (f.highValue = e.highValue),
                (f.lowValue = e.lowValue),
                (f.closeValue = e.closeValue);
            } else f.isHit = !1;
            return f;
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = s.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t, i);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = u.getNativeXValues(),
              p = u.getNativeYValues(),
              g = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                u,
                d,
                u.dataDistributionCalculator.isSortedAscending
              ),
              y = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                u,
                c,
                p,
                d,
                h,
                g,
                0
              );
            if (g >= 0) {
              (y.openValue = u.getNativeOpenValues().get(g)),
                (y.highValue = u.getNativeHighValues().get(g)),
                (y.lowValue = u.getNativeLowValues().get(g)),
                (y.closeValue = u.getNativeCloseValues().get(g));
              const e = s.isCategoryCoordinateCalculator,
                t = e ? 0 : c.get(0),
                i = e ? c.size() - 1 : c.get(c.size() - 1),
                { dataPointWidth: o } = this.parentSeries;
              (y.isWithinDataBounds = (0, r.testIsInInterval)(
                y.hitTestPointValues.x,
                t,
                i,
                o / 2
              )),
                (y.isHit = y.isWithinDataBounds);
            } else y.isHit = !1;
            return y;
          }
        }
        t.OhlcSeriesHitTestProvider = n;
      },
      64485: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ScatterSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t, i = 0) {
            const s = this.getTranslatedHitTestPoint(e, t);
            if (!s) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: n,
                yCoordinateCalculator: l,
                isVerticalChart: d,
              } = this.currentRenderPassData,
              h = d ? s.y : s.x,
              u = d ? s.x : s.y,
              c = this.parentSeries.dataSeries;
            if (!c) return a.HitTestInfo.empty();
            const p = o.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                n,
                l,
                c,
                h,
                u,
                i
              ),
              g = c.getNativeXValues(),
              y = c.getNativeYValues(),
              f = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                n,
                l,
                d,
                c,
                g,
                y,
                h,
                u,
                p.nearestPointIndex,
                i
              );
            if (p.nearestPointIndex >= 0) {
              const { width: e, height: t } = this.parentSeries.pointMarker,
                s = n.isCategoryCoordinateCalculator,
                o = s ? 0 : g.get(0),
                a = n.getCoordinate(o),
                l = s ? g.size() - 1 : g.get(g.size() - 1),
                d = n.getCoordinate(l);
              (f.isWithinDataBounds = (0, r.testIsInInterval)(h, a, d, e / 2)),
                (f.isHit = (0, r.testIsInBounds)(
                  h,
                  u,
                  f.xCoord - e / 2 - i,
                  f.yCoord + t / 2 + i,
                  f.xCoord + e / 2 + i,
                  f.yCoord - t / 2 - i
                ));
            } else f.isHit = !1;
            return f;
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = u.getNativeXValues(),
              p = u.getNativeYValues(),
              g = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                u,
                d,
                u.dataDistributionCalculator.isSortedAscending
              ),
              y = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                u,
                c,
                p,
                d,
                h,
                g,
                0
              );
            if (g >= 0) {
              const { width: e } = this.parentSeries.pointMarker,
                t = s.isCategoryCoordinateCalculator;
              let i, o;
              if (u.dataDistributionCalculator.isSortedAscending) {
                const e = t ? 0 : c.get(0);
                i = s.getCoordinate(e);
                const r = t ? c.size() - 1 : c.get(c.size() - 1);
                o = s.getCoordinate(r);
              } else {
                const e = u.getXRange();
                (i = s.getCoordinate(e.min)), (o = s.getCoordinate(e.max));
              }
              (y.isWithinDataBounds = (0, r.testIsInInterval)(d, i, o, e / 2)),
                (y.isHit = y.isWithinDataBounds);
            } else y.isHit = !1;
            return y;
          }
        }
        t.ScatterSeriesHitTestProvider = n;
      },
      51825: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedColumnSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                u,
                d,
                u.dataDistributionCalculator.isSortedAscending
              ),
              p = u.getNativeXValues(),
              g = u.getNativeYValues(),
              {
                accumulatedValues: y,
                getGroupIndex: f,
                getGroupsCount: v,
                getColumnWidth: m,
              } = this.parentSeries,
              S = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                u,
                p,
                y,
                d,
                h,
                c,
                0
              );
            if (c >= 0) {
              const e = f(),
                t = v(),
                i = m(s),
                o = i / 2,
                a = (0.5 + e - t / 2) * i;
              S.xValue = s.getDataValue(S.xCoord + a);
              const l = g.get(c),
                u = y.get(c),
                P = n.getCoordinate(u),
                C = n.getCoordinate(u - l),
                x = S.xCoord + a;
              S.isHit = (0, r.testIsInBounds)(d, h, x - o, C, x + o, P);
              const b = s.isCategoryCoordinateCalculator,
                A = b ? 0 : p.get(0),
                T = s.getCoordinate(A),
                E = b ? p.size() - 1 : p.get(p.size() - 1),
                R = s.getCoordinate(E);
              (S.isWithinDataBounds = (0, r.testIsInInterval)(
                S.hitTestPoint.x,
                T,
                R,
                (i * t) / 2
              )),
                (S.y1Value = g.get(c));
            } else S.isHit = !1;
            return S;
          }
          hitTestDataPoint(
            e,
            t,
            i = s.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            throw Error(
              "hitTestDataPoint method is not supported for StackedColumnSeriesHitTestProvider"
            );
          }
          hitTestForDataPointSelectionModifier(
            e,
            t,
            i = s.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t);
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = o.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                s,
                u,
                d,
                u.dataDistributionCalculator.isSortedAscending
              ),
              p = u.getNativeXValues(),
              g = u.getNativeYValues(),
              {
                accumulatedValues: y,
                getGroupIndex: f,
                getGroupsCount: v,
                getColumnWidth: m,
              } = this.parentSeries,
              S = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                s,
                n,
                l,
                u,
                p,
                y,
                d,
                h,
                c,
                0
              );
            if (c >= 0) {
              const e = f(),
                t = v(),
                i = m(s),
                o = i / 2,
                a = s.isCategoryCoordinateCalculator,
                n = a ? 0 : p.get(0),
                l = s.getCoordinate(n),
                h = a ? p.size() - 1 : p.get(p.size() - 1),
                u = s.getCoordinate(h);
              S.isWithinDataBounds = (0, r.testIsInInterval)(
                S.hitTestPoint.x,
                l,
                u,
                (i * t) / 2
              );
              const y = (0.5 + e - t / 2) * i;
              S.xValue = s.getDataValue(S.xCoord + y);
              const P = S.xCoord + y;
              (S.isHit = (0, r.testIsInInterval)(d, P - o, P + o)),
                (S.y1Value = g.get(c));
            } else S.isHit = !1;
            return S;
          }
        }
        t.StackedColumnSeriesHitTestProvider = n;
      },
      99846: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedMountainSeriesHitTestProvider = void 0);
        const r = i(7541),
          s = i(85414),
          o = i(35013);
        class a extends r.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: a,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return o.HitTestInfo.empty();
            const u = s.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              { accumulatedValues: p } = this.parentSeries,
              g = s.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                a,
                n,
                h,
                c,
                p,
                l,
                d,
                u,
                0
              );
            if (u >= 0) {
              const e = (e) => p.get(e),
                t = (e) => p.get(e) - h.getNativeYValues().get(e),
                i = s.hitTestHelpers.testIsHitForBand(
                  this.parentSeries.isDigitalLine,
                  r,
                  a,
                  c,
                  e,
                  t,
                  u,
                  l,
                  d,
                  h
                );
              (g.isHit = i.isHit),
                (g.point2dataSeriesIndex = i.secondPointIndex);
            } else g.isHit = !1;
            return g;
          }
          hitTestXSlice(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return o.HitTestInfo.empty();
            const {
                xCoordinateCalculator: r,
                yCoordinateCalculator: a,
                isVerticalChart: n,
              } = this.currentRenderPassData,
              l = n ? i.y : i.x,
              d = n ? i.x : i.y,
              h = this.parentSeries.dataSeries;
            if (!h) return o.HitTestInfo.empty();
            const u = s.hitTestHelpers.getNearestXPoint(
                this.webAssemblyContext,
                r,
                h,
                l,
                h.dataDistributionCalculator.isSortedAscending
              ),
              c = h.getNativeXValues(),
              p = h.getNativeYValues(),
              { accumulatedValues: g } = this.parentSeries,
              y = s.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                r,
                a,
                n,
                h,
                c,
                g,
                l,
                d,
                u,
                0
              );
            return (
              u >= 0
                ? ((y.y1Value = p.get(u)), (y.isHit = y.isWithinDataBounds))
                : (y.isHit = !1),
              y
            );
          }
          hitTestDataPoint(
            e,
            t,
            i = r.BaseHitTestProvider.DEFAULT_HIT_TEST_RADIUS
          ) {
            return this.hitTest(e, t);
          }
        }
        t.StackedMountainSeriesHitTestProvider = a;
      },
      92231: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.TextSeriesHitTestProvider = void 0);
        const r = i(21670),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t, i) {
            const s = this.getTranslatedHitTestPoint(e, t);
            if (!s) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: n,
                yCoordinateCalculator: l,
                isVerticalChart: d,
              } = this.currentRenderPassData,
              h = d ? s.y : s.x,
              u = d ? s.x : s.y,
              c = this.parentSeries.dataSeries,
              p = o.hitTestHelpers.getNearestXyPoint(
                this.webAssemblyContext,
                n,
                l,
                c,
                h,
                u,
                i
              ),
              g = c.getNativeXValues(),
              y = c.getNativeYValues(),
              f = o.hitTestHelpers.createHitTestInfo(
                this.parentSeries,
                n,
                l,
                d,
                c,
                g,
                y,
                h,
                u,
                p.nearestPointIndex,
                i,
                p.distance
              ),
              v = this.parentSeries.dataLabelProvider.dataLabels;
            let m = !1;
            for (const e of v) {
              const { left: t, top: i, right: o, bottom: a } = e.rect;
              if ((0, r.testIsInBounds)(s.x, s.y, t, i, o, a)) {
                m = !0;
                break;
              }
            }
            return (f.isHit = m), f;
          }
        }
        t.TextSeriesHitTestProvider = n;
      },
      3798: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformHeatmapHitTestProvider = void 0);
        const r = i(75772),
          s = i(7541),
          o = i(85414),
          a = i(35013);
        class n extends s.BaseHitTestProvider {
          hitTest(e, t) {
            const i = this.getTranslatedHitTestPoint(e, t);
            if (!i) return a.HitTestInfo.empty();
            const {
                xCoordinateCalculator: s,
                yCoordinateCalculator: n,
                isVerticalChart: l,
              } = this.currentRenderPassData,
              d = l ? i.y : i.x,
              h = l ? i.x : i.y,
              u = this.parentSeries.dataSeries;
            if (!u) return a.HitTestInfo.empty();
            const c = o.hitTestHelpers.getNearestUniformHeatmapPoint(
                s,
                n,
                u,
                d,
                h
              ),
              { xIndex: p, yIndex: g, zValue: y } = c,
              f = new a.HitTestInfo(this.parentSeries);
            (f.dataSeriesName = this.parentSeries.type),
              (f.dataSeriesType = u.type),
              (f.hitTestPoint = new r.Point(d, h));
            const v = s.getDataValue(d),
              m = n.getDataValue(h);
            return (
              (f.hitTestPointValues = new r.Point(v, m)),
              (f.xValue = v),
              (f.yValue = m),
              (f.heatmapXIndex = p),
              (f.heatmapYIndex = g),
              (f.zValue = y),
              (f.heatmapValue = y),
              (f.xCoord = d),
              (f.yCoord = h),
              (f.isHit = -1 !== p && -1 !== g),
              (f.isWithinDataBounds = f.isHit),
              -1 !== p && -1 !== g && (f.metadata = u.getMetadataAt(g, p)),
              f
            );
          }
          hitTestDataPoint(e, t) {
            return this.hitTest(e, t);
          }
          hitTestXSlice(e, t) {
            return this.hitTest(e, t);
          }
        }
        t.UniformHeatmapHitTestProvider = n;
      },
      85414: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.hitTestHelpers = void 0);
        const r = i(56744),
          s = i(75772),
          o = i(79226),
          a = i(21670),
          n = i(35013),
          l = (e, t, i, r, s) => i + ((s - i) * (e - t)) / (r - t),
          d = (e, t, i, r, s, o, a) => {
            const n = t.isCategoryCoordinateCalculator
                ? r.getNativeIndexes()
                : r.getNativeXValues(),
              l = r.getNativeYValues();
            return h(
              e,
              t,
              i,
              n,
              l,
              r.dataDistributionCalculator.isSortedAscending,
              s,
              o,
              a
            );
          },
          h = (e, t, i, s, o, a, n, l, d) => {
            let h;
            try {
              return (
                (h = e.SCRTHitTestHelper.GetNearestXyPoint(
                  t.nativeCalculator,
                  i.nativeCalculator,
                  s,
                  o,
                  a,
                  n,
                  l,
                  null != d ? d : 1
                )),
                { nearestPointIndex: h.minD, distance: h.maxD }
              );
            } finally {
              (0, r.deleteSafe)(h);
            }
          };
        t.hitTestHelpers = {
          createHitTestInfo: (e, t, i, r, o, l, d, h, u, c, p, g) => {
            const y = t.isCategoryCoordinateCalculator,
              f = new n.HitTestInfo(e);
            (f.dataSeriesName = o.dataSeriesName),
              (f.dataSeriesType = o.type),
              (f.hitTestPoint = new s.Point(h, u));
            const v = t.getDataValue(h),
              m = i.getDataValue(u);
            if (
              ((f.hitTestPointValues = new s.Point(v, m)),
              (f.dataSeriesIndex = c),
              (f.hitTestRadius = p),
              (f.isCategoryAxis = y),
              (f.distance = g),
              c >= 0)
            ) {
              const e = y ? c : o.getNativeValue(l, c),
                r = o.getNativeValue(d, c);
              (f.xCoord = t.getCoordinate(e)),
                (f.yCoord = i.getCoordinate(r)),
                (f.xValue = e),
                y && (f.xCategoryValue = l.get(c)),
                (f.yValue = r);
              let s = y ? 0 : o.getNativeValue(l, 0),
                n = y ? l.size() - 1 : o.getNativeValue(l, l.size() - 1);
              if (!o.dataDistributionCalculator.isSortedAscending)
                for (let e = 0; e < o.count(); e++) {
                  const t = o.getNativeValue(l, e);
                  t < s && (s = t), t > n && (n = t);
                }
              (f.isWithinDataBounds = (0, a.testIsInInterval)(v, s, n)),
                (f.metadata = o.getMetadataAt(c));
            } else f.isWithinDataBounds = !1;
            return (f.isHit = void 0), f;
          },
          getNearestPoint: h,
          getNearestXPoint: (e, t, i, r, s) =>
            d(e, t, t, i, r, 0, 0).nearestPointIndex,
          getNearestXyPoint: d,
          getNearestXyyPoint: (e, t, i, s, o, a, n) => {
            const l = t.isCategoryCoordinateCalculator
                ? s.getNativeIndexes()
                : s.getNativeXValues(),
              d = s.getNativeYValues();
            let h, u, c;
            try {
              (h = e.SCRTHitTestHelper.GetNearestXyPoint(
                t.nativeCalculator,
                i.nativeCalculator,
                l,
                d,
                s.dataDistributionCalculator.isSortedAscending,
                o,
                a,
                null != n ? n : 1
              )),
                (u = h.minD),
                (c = h.maxD);
            } finally {
              (0, r.deleteSafe)(h);
            }
            try {
              return (
                (h = e.SCRTHitTestHelper.GetNearestXyPoint(
                  t.nativeCalculator,
                  i.nativeCalculator,
                  l,
                  s.getNativeY1Values(),
                  s.dataDistributionCalculator.isSortedAscending,
                  o,
                  a,
                  null != n ? n : 1
                )),
                c < h.maxD
                  ? { nearestPointIndex: u, distance: c }
                  : { nearestPointIndex: h.minD, distance: h.maxD }
              );
            } finally {
              (0, r.deleteSafe)(h);
            }
          },
          getNearestUniformHeatmapPoint: (e, t, i, r, s) => {
            const o = e.getDataValue(r),
              a = t.getDataValue(s),
              n = Math.floor((o - i.xStart) / i.xStep),
              l = Math.floor((a - i.yStart) / i.yStep);
            return n < 0 || n >= i.arrayWidth || l < 0 || l >= i.arrayHeight
              ? { xIndex: -1, yIndex: -1, zValue: void 0 }
              : { xIndex: n, yIndex: l, zValue: i.getZValue(l, n) };
          },
          getNearestNonUniformHeatmapPoint: (e, t, i, r, s) => {
            const o = e.getDataValue(r),
              a = t.getDataValue(s),
              { xCellOffsets: n, yCellOffsets: l } = i;
            let d = -1;
            if (o >= n[0] && o <= n[n.length - 1])
              for (let e = 0; e < n.length; e++)
                if (o >= n[e] && o <= n[e + 1]) {
                  d = e;
                  break;
                }
            let h = -1;
            if (a >= l[0] && a <= l[l.length - 1])
              for (let e = 0; e < l.length - 1; e++)
                if (a >= l[e] && a <= l[e + 1]) {
                  h = e;
                  break;
                }
            return d < 0 || d >= i.arrayWidth || h < 0 || h >= i.arrayHeight
              ? { xIndex: -1, yIndex: -1, zValue: void 0 }
              : { xIndex: d, yIndex: h, zValue: i.getZValue(h, d) };
          },
          testIsHitForPoint: (e, t, i, r, s, o, n, l, d) => {
            const h = e.isCategoryCoordinateCalculator
                ? s
                : d.getNativeValue(i, s),
              u = d.getNativeValue(r, s),
              c = e.getCoordinate(h),
              p = t.getCoordinate(u);
            return (0, a.calcDistance)(o, n, c, p) < l;
          },
          testIsHitForLine: (e, t, i, r, s, o, n, l, d) => {
            let h, u, c, p, g, y;
            const f = e.isCategoryCoordinateCalculator,
              v = f ? s : d.getNativeValue(i, s),
              m = d.getNativeValue(r, s);
            v <= e.getDataValue(o)
              ? ((c = v),
                (g = m),
                (p = f ? s + 1 : d.getNativeValue(i, s + 1)),
                (y = d.getNativeValue(r, s + 1)),
                (u = s + 1))
              : ((c = f ? s - 1 : d.getNativeValue(i, s - 1)),
                (g = d.getNativeValue(r, s - 1)),
                (u = s - 1),
                (p = v),
                (y = m));
            const S = e.getCoordinate(c),
              P = e.getCoordinate(p),
              C = t.getCoordinate(g),
              x = t.getCoordinate(y),
              b = (0, a.calcDistance)(S, C, P, x),
              A = (0, a.calcDistance)(S, C, o, n),
              T = (0, a.calcDistance)(P, x, o, n);
            return (
              (h =
                !(A > b + l || T > b + l) &&
                (0, a.calcDistanceFromLine)(o, n, S, C, P, x) < l),
              { isHit: h, secondPointIndex: u }
            );
          },
          testIsHitForBand: (e, t, i, r, s, o, a, n, d, h) => {
            let u;
            const c = t.getDataValue(n),
              p = t.isCategoryCoordinateCalculator,
              g = p ? a : h.getNativeValue(r, a),
              y = g <= c,
              f = y ? a + 1 : a - 1;
            if (f < 0 || f >= r.size())
              return { isHit: !1, secondPointIndex: void 0 };
            const v = p ? f : h.getNativeValue(r, f),
              m = y ? g : v,
              S = s(y ? a : f),
              P = o(y ? a : f),
              C = y ? v : g,
              x = s(y ? f : a),
              b = o(y ? f : a),
              A = t.getCoordinate(m),
              T = t.getCoordinate(C),
              E = i.getCoordinate(S),
              R = i.getCoordinate(x),
              w = i.getCoordinate(P),
              D = i.getCoordinate(b);
            if (e) u = E < w ? d >= E && d <= w : d >= w && d <= E;
            else {
              const e = l(n, A, E, T, R),
                t = l(n, A, w, T, D);
              u = e < t ? d >= e && d <= t : d >= t && d <= e;
            }
            return { isHit: u, secondPointIndex: f };
          },
          testIsHitForColumn: (e, t, i, r, s, o, n, l) => {
            const {
                getDataPointWidth: d,
                dataPointWidth: h,
                zeroLineY: u,
                dataSeries: c,
              } = i,
              p = e.isCategoryCoordinateCalculator ? o : c.getNativeValue(r, o),
              g = c.getNativeValue(s, o),
              y = e.getCoordinate(p),
              f = t.getCoordinate(g),
              v = d(e, h),
              m = t.getCoordinate(u),
              S = v / 2,
              P = m > f ? m : f,
              C = m > f ? f : m;
            return (0, a.testIsInBounds)(n, l, y - S, P, y + S, C);
          },
          testIsHitForOHLC: (e, t, i, r, s, o, n, l) => {
            const { getDataPointWidth: d, dataPointWidth: h } = i,
              u = e.isCategoryCoordinateCalculator
                ? s
                : r.getNativeValue(r.getNativeXValues(), s),
              c = e.getCoordinate(u),
              p = r.getNativeValue(r.getNativeOpenValues(), s),
              g = t.getCoordinate(p),
              y = r.getNativeValue(r.getNativeHighValues(), s),
              f = t.getCoordinate(y),
              v = r.getNativeValue(r.getNativeLowValues(), s),
              m = t.getCoordinate(v),
              S = r.getNativeValue(r.getNativeCloseValues(), s),
              P = t.getCoordinate(S),
              C = d(e, h) / 2,
              x = P > g ? P : g,
              b = P > g ? g : P,
              A = (0, a.testIsInBounds)(o, n, c - C, x, c + C, b),
              T = (0, a.calcDistanceFromLineSegment)(o, n, c, f, c, m);
            return {
              isHit: A || T < l,
              openValue: p,
              highValue: y,
              lowValue: v,
              closeValue: S,
            };
          },
          testIsHitForMountain: (e, t, i, r, s, o, a, n) => {
            let d;
            const h = r.getNativeXValues(),
              u = t.isCategoryCoordinateCalculator,
              c = u ? o : r.getNativeValue(h, o),
              p = r.getNativeYValues(),
              g = c <= t.getDataValue(a),
              y = g ? o + 1 : o - 1;
            if (y < 0 || y >= r.count())
              return { isHit: !1, secondPointIndex: void 0 };
            const f = u ? y : h.get(y),
              v = g ? c : f,
              m = g ? r.getNativeValue(p, o) : r.getNativeValue(p, y),
              S = g ? f : c,
              P = g ? r.getNativeValue(p, y) : r.getNativeValue(p, o),
              C = t.getCoordinate(v),
              x = t.getCoordinate(S),
              b = i.getCoordinate(m),
              A = i.getCoordinate(P),
              T = i.getCoordinate(s);
            if (e) d = b < T ? n >= b && n <= T : n >= T && n <= b;
            else {
              const e = l(a, C, b, x, A);
              d = e < T ? n >= e && n <= T : n >= T && n <= e;
            }
            return { isHit: d, secondPointIndex: y };
          },
          testIsHitForErrorBars: (e, t, i, r, s, n, l, d) => {
            const {
                getDataPointWidth: h,
                dataPointWidth: u,
                errorDirection: c,
                dataSeries: p,
              } = i,
              g = e.isCategoryCoordinateCalculator,
              y = c === o.EErrorDirection.Vertical,
              f = g ? n : p.getNativeValue(r, n),
              v = p.getNativeValue(s, n);
            let m = p.getNativeValue(p.getNativeHighValues(), n),
              S = p.getNativeValue(p.getNativeLowValues(), n);
            isNaN(m) && (m = v), isNaN(S) && (S = v);
            const P = e.getCoordinate(f),
              C = t.getCoordinate(v),
              x = y ? t.getCoordinate(m) : e.getCoordinate(m),
              b = y ? t.getCoordinate(S) : e.getCoordinate(S),
              A = h(y ? e : t, u) / 2;
            let T = !1;
            const E = x > b ? x : b,
              R = x > b ? b : x;
            return (
              (T = y
                ? (0, a.testIsInBounds)(l, d, P - A, E, P + A, R)
                : (0, a.testIsInBounds)(l, d, R, C + A, E, C - A)),
              { isHit: T, highValue: m, lowValue: S }
            );
          },
          testIsHitForImpulse: (e, t, i, r, s, o, n, l, d) => {
            const { zeroLineY: h, dataSeries: u } = i,
              c = e.isCategoryCoordinateCalculator ? o : u.getNativeValue(r, o),
              p = u.getNativeValue(s, o),
              g = e.getCoordinate(c),
              y = t.getCoordinate(p),
              f = t.getCoordinate(h),
              v = f > y ? f : y,
              m = f > y ? y : f;
            return (0, a.testIsInBounds)(n, l, g, v, g, m, d);
          },
        };
      },
      69570: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.HoveredChangedArgs = void 0),
          (t.HoveredChangedArgs = class {
            constructor(e, t, i, r) {
              (this.source = e),
                (this.hoveredSeries = t),
                (this.allSeries = i),
                (this.hitTestInfo = r);
            }
          });
      },
      50085: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NonUniformHeatmapRenderableSeries = void 0);
        const r = i(84745),
          s = i(5337),
          o = i(53904),
          a = i(31544),
          n = i(37182),
          l = i(80456);
        class d extends o.BaseHeatmapRenderableSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = s.ESeriesType.NonUniformHeatmapSeries),
              (this.drawingProviders = []),
              r.IS_TEST_ENV ||
                this.drawingProviders.push(
                  new n.NonUniformHeatmapDrawingProvider(e, this)
                ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new a.NonUniformHeatMapDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                ));
          }
          newHitTestProvider() {
            return new l.NonUniformHeatmapHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.NonUniformHeatmapRenderableSeries = d;
      },
      4450: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OhlcBaseRenderDataTransform =
            t.XyyBaseRenderDataTransform =
            t.XyBaseRenderDataTransform =
            t.BaseRenderDataTransform =
              void 0);
        const r = i(55023),
          s = i(56744),
          o = i(23866),
          a = i(98140),
          n = i(65052),
          l = i(58564),
          d = i(14023),
          h = i(48570);
        class u extends r.DeletableEntity {
          constructor(e, t, i) {
            super(),
              (this.requiresTransform = !0),
              (this.useForYRange = !1),
              (this.parentSeries = e),
              (this.wasmContext = t),
              this.parentSeries.dataSeries,
              (this.pointSeries = this.createPointSeries()),
              (this.drawingProviders = null != i ? i : []);
          }
          runTransform(e) {
            if (
              this.requiresTransform ||
              (e.indexRange && !e.indexRange.equals(this.lastIndexRange)) ||
              (e.resamplingHash && e.resamplingHash !== this.lastResamplingHash)
            ) {
              o.Guard.notNull(e, "renderPassData"),
                o.Guard.notNull(e.pointSeries, "renderPassData.pointSeries");
              const t = this.runTransformInternal(e);
              return (
                t === this.pointSeries && (this.requiresTransform = !1),
                (this.lastIndexRange = e.indexRange),
                (this.lastResamplingHash = e.resamplingHash),
                this.makeRenderPassData(e, t)
              );
            }
            return this.makeRenderPassData(e, this.pointSeries);
          }
          onDataChange(e) {
            this.requiresTransform = !0;
          }
          delete() {
            (this.pointSeries = (0, s.deleteSafe)(this.pointSeries)),
              (this.wasmContext = void 0);
          }
          makeRenderPassData(e, t) {
            const i = new a.NumberRange(0, t.xValues.size() - 1);
            return (
              (t.xRange = e.pointSeries.xRange),
              (t.fifoStartIndex = e.pointSeries.fifoStartIndex),
              new h.RenderPassData(
                i,
                e.getxCoordinateCalculator,
                e.getyCoordinateCalculator,
                e.isVerticalChart,
                t,
                e.resamplingHash
              )
            );
          }
        }
        (t.BaseRenderDataTransform = u),
          (t.XyBaseRenderDataTransform = class extends u {
            createPointSeries() {
              return new l.XyPointSeriesResampled(
                this.wasmContext,
                new a.NumberRange(0, 0)
              );
            }
            runTransformInternal(e) {
              throw new Error("runTransformInternal not implemented.");
            }
          }),
          (t.XyyBaseRenderDataTransform = class extends u {
            createPointSeries() {
              return new d.XyyPointSeriesResampled(
                this.wasmContext,
                new a.NumberRange(0, 0)
              );
            }
            runTransformInternal(e) {
              throw new Error("runTransformInternal not implemented.");
            }
          }),
          (t.OhlcBaseRenderDataTransform = class extends u {
            createPointSeries() {
              return new n.OhlcPointSeriesResampled(
                this.wasmContext,
                new a.NumberRange(0, 0)
              );
            }
            runTransformInternal(e) {
              throw new Error("runTransformInternal not implemented.");
            }
          });
      },
      89136: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SmoothStackedRenderDataTransform =
            t.XyyBezierRenderDataTransform =
            t.BezierRenderDataTransform =
            t.bezierTransform =
              void 0);
        const r = i(10276),
          s = i(98140),
          o = i(58564),
          a = i(14023),
          n = i(4450);
        t.bezierTransform = (e, t, i, s, o, a, n, l, d, h) => {
          var u, c;
          e.clear(), t.clear(), i.clear();
          const p = (e, t, i, r, s, o, a) => {
              if (r != r) return { xc: e, yc: t };
              if (e === i && t === r) return { xc: e, yc: t };
              let n,
                l,
                d = Number.MAX_VALUE;
              e !== i && (d = (t - r) / (e - i));
              const h = (s - e) * a;
              return (
                (n = e + h),
                (l = t + d * h),
                (l = Math.max(Math.min(l, Math.max(t, o)), Math.min(t, o))),
                { xc: n, yc: l }
              );
            },
            g = (e, t, i, r, s) => {
              const o = 1 - s;
              return (
                Math.pow(o, 3) * e +
                3 * o * o * s * t +
                3 * o * s * s * i +
                Math.pow(s, 3) * r
              );
            },
            y = (e) => ({ x: s.get(e), y: o.get(e) }),
            f = (e) => {
              const t = null == h ? void 0 : h.get(x);
              return void 0 === t || t != t ? 1 / 0 : t;
            };
          let v,
            m = y(a),
            S = y(a),
            P = y(a + 1),
            C = y(a + 2),
            x = 0;
          for (let s = a; s < n; s++) {
            e.push_back(S.x),
              i.push_back(x),
              t.push_back(Math.min(S.y, f())),
              x++;
            const o = p(
              S.x,
              S.y,
              null !== (u = null == v ? void 0 : v.xc) && void 0 !== u
                ? u
                : m.x,
              null !== (c = null == v ? void 0 : v.yc) && void 0 !== c
                ? c
                : m.y,
              P.x,
              P.y,
              d
            );
            v = p(P.x, P.y, C.x, C.y, S.x, S.y, d);
            for (let s = 1; s < l; s++) {
              const a = r.easing.inOutCubic(s / l),
                n = g(S.x, o.xc, v.xc, P.x, a),
                d = g(S.y, o.yc, v.yc, P.y, a);
              e.push_back(n),
                t.push_back(Math.min(d, f())),
                i.push_back(x),
                x++;
            }
            s > a && (m = S), (S = P), (P = C), s < n - 2 && (C = y(s + 3));
          }
          e.push_back(P.x), t.push_back(Math.min(P.y, f())), i.push_back(x);
        };
        class l extends n.BaseRenderDataTransform {
          constructor(e, t, i, r) {
            var s, o;
            super(e, t, i),
              (this.interpolationPointsProperty = 20),
              (this.curvatureProperty = 0.5),
              (this.interpolationPointsProperty =
                null !== (s = null == r ? void 0 : r.interpolationPoints) &&
                void 0 !== s
                  ? s
                  : this.interpolationPoints),
              (this.curvatureProperty =
                null !== (o = null == r ? void 0 : r.curvature) && void 0 !== o
                  ? o
                  : this.curvature);
          }
          get interpolationPoints() {
            return this.interpolationPointsProperty;
          }
          set interpolationPoints(e) {
            var t, i;
            this.interpolationPointsProperty !== e &&
              ((this.interpolationPointsProperty = e),
              (this.requiresTransform = !0),
              (null === (t = this.parentSeries) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                (null === (i = this.parentSeries) ||
                  void 0 === i ||
                  i.invalidateParentCallback()));
          }
          get curvature() {
            return this.curvatureProperty;
          }
          set curvature(e) {
            var t, i;
            this.curvatureProperty !== e &&
              ((this.curvatureProperty = e),
              (this.requiresTransform = !0),
              (null === (t = this.parentSeries) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                (null === (i = this.parentSeries) ||
                  void 0 === i ||
                  i.invalidateParentCallback()));
          }
          createPointSeries() {
            return new o.XyPointSeriesResampled(
              this.wasmContext,
              new s.NumberRange(0, 0)
            );
          }
          runTransformInternal(e) {
            var i;
            let {
              xValues: r,
              yValues: s,
              indexes: o,
              resampled: a,
            } = e.pointSeries;
            const { xValues: n, yValues: l, indexes: d } = this.pointSeries,
              h = a ? 0 : e.indexRange.min,
              u = a
                ? r.size() - 1
                : null === (i = e.indexRange) || void 0 === i
                ? void 0
                : i.max;
            return 0 == r.size()
              ? e.pointSeries
              : ((0, t.bezierTransform)(
                  n,
                  l,
                  d,
                  r,
                  s,
                  h,
                  u,
                  this.interpolationPoints,
                  this.curvature
                ),
                this.pointSeries);
          }
        }
        t.BezierRenderDataTransform = l;
        class d extends n.BaseRenderDataTransform {
          constructor(e, t, i, r) {
            var s, o;
            super(e, t, i),
              (this.interpolationPointsProperty = 20),
              (this.curvatureProperty = 0.5),
              (this.forceYGreaterThanY1 = !1),
              (this.interpolationPointsProperty =
                null !== (s = null == r ? void 0 : r.interpolationPoints) &&
                void 0 !== s
                  ? s
                  : this.interpolationPoints),
              (this.curvatureProperty =
                null !== (o = null == r ? void 0 : r.curvature) && void 0 !== o
                  ? o
                  : this.curvature);
          }
          get interpolationPoints() {
            return this.interpolationPointsProperty;
          }
          set interpolationPoints(e) {
            var t, i;
            this.interpolationPointsProperty !== e &&
              ((this.interpolationPointsProperty = e),
              (this.requiresTransform = !0),
              (null === (t = this.parentSeries) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                (null === (i = this.parentSeries) ||
                  void 0 === i ||
                  i.invalidateParentCallback()));
          }
          get curvature() {
            return this.curvatureProperty;
          }
          set curvature(e) {
            var t, i;
            this.curvatureProperty !== e &&
              ((this.curvatureProperty = e),
              (this.requiresTransform = !0),
              (null === (t = this.parentSeries) || void 0 === t
                ? void 0
                : t.invalidateParentCallback) &&
                (null === (i = this.parentSeries) ||
                  void 0 === i ||
                  i.invalidateParentCallback()));
          }
          createPointSeries() {
            return new a.XyyPointSeriesResampled(
              this.wasmContext,
              new s.NumberRange(0, 0)
            );
          }
          runTransformInternal(e) {
            var i;
            let {
              xValues: r,
              yValues: s,
              y1Values: o,
              indexes: a,
              resampled: n,
            } = e.pointSeries;
            const {
                xValues: l,
                yValues: d,
                y1Values: h,
                indexes: u,
              } = this.pointSeries,
              c = n ? 0 : e.indexRange.min,
              p = n
                ? r.size() - 1
                : null === (i = e.indexRange) || void 0 === i
                ? void 0
                : i.max;
            return 0 == r.size()
              ? e.pointSeries
              : ((0, t.bezierTransform)(
                  l,
                  h,
                  u,
                  r,
                  o,
                  c,
                  p,
                  this.interpolationPoints,
                  this.curvature
                ),
                (0, t.bezierTransform)(
                  l,
                  d,
                  u,
                  r,
                  s,
                  c,
                  p,
                  this.interpolationPoints,
                  this.curvature,
                  this.forceYGreaterThanY1 ? h : void 0
                ),
                this.pointSeries);
          }
        }
        (t.XyyBezierRenderDataTransform = d),
          (t.SmoothStackedRenderDataTransform = class extends d {
            constructor() {
              super(...arguments), (this.forceYGreaterThanY1 = !0);
            }
          });
      },
      95103: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SplineRenderDataTransform = void 0);
        const r = i(98140),
          s = i(58564),
          o = i(4450);
        class a extends o.BaseRenderDataTransform {
          constructor() {
            super(...arguments),
              (this.interpolationPoints = 10),
              (this.warnOnSplineFailure = !0),
              (this.useForYRange = !0);
          }
          createPointSeries() {
            return new s.XyPointSeriesResampled(
              this.wasmContext,
              new r.NumberRange(0, 0)
            );
          }
          runTransformInternal(e) {
            const t = this.parentSeries.xAxis.isCategoryAxis
                ? e.pointSeries.indexes
                : e.pointSeries.xValues,
              i = t.size();
            if (0 == i) return e.pointSeries;
            const r = e.pointSeries.yValues,
              s =
                this.parentSeries.dataSeries.dataDistributionCalculator
                  .containsNaN;
            return (
              this.wasmContext.SCRTSplineHelperCubicSpline(
                t,
                r,
                this.pointSeries.xValues,
                this.pointSeries.yValues,
                i,
                this.interpolationPoints,
                this.parentSeries.dataSeries.dataDistributionCalculator
                  .containsNaN
              ),
              !s && isNaN(this.pointSeries.yValues.get(0))
                ? (this.warnOnSplineFailure &&
                    console.warn(
                      "Could not calculate spline values.  X data may contain duplicates.  Falling back to original values.\n    To disable this warning set warnOnSplineFailure = false."
                    ),
                  e.pointSeries)
                : this.pointSeries
            );
          }
        }
        t.SplineRenderDataTransform = a;
      },
      69133: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyySplineRenderDataTransform = void 0);
        const r = i(98140),
          s = i(14023),
          o = i(4450);
        class a extends o.BaseRenderDataTransform {
          constructor() {
            super(...arguments),
              (this.interpolationPoints = 10),
              (this.warnOnSplineFailure = !0),
              (this.useForYRange = !0);
          }
          createPointSeries() {
            return new s.XyyPointSeriesResampled(
              this.wasmContext,
              new r.NumberRange(0, 0)
            );
          }
          runTransformInternal(e) {
            const t = this.parentSeries.xAxis.isCategoryAxis
                ? e.pointSeries.indexes
                : e.pointSeries.xValues,
              i = e.pointSeries.yValues,
              r = e.pointSeries.y1Values,
              s = t.size();
            if (0 == s) return e.pointSeries;
            const o =
              this.parentSeries.dataSeries.dataDistributionCalculator
                .containsNaN;
            return (
              this.wasmContext.SCRTSplineHelperCubicSpline(
                t,
                i,
                this.pointSeries.xValues,
                this.pointSeries.yValues,
                s,
                this.interpolationPoints,
                o
              ),
              !o && isNaN(this.pointSeries.yValues.get(0))
                ? (this.warnOnSplineFailure &&
                    console.warn(
                      "Could not calculate spline values.  X data may contain duplicates.  Falling back to original values.\n    To disable this warning set warnOnSplineFailure = false."
                    ),
                  e.pointSeries)
                : (this.wasmContext.SCRTSplineHelperCubicSpline(
                    t,
                    r,
                    this.pointSeries.xValues,
                    this.pointSeries.y1Values,
                    s,
                    this.interpolationPoints,
                    o
                  ),
                  this.pointSeries)
            );
          }
        }
        t.XyySplineRenderDataTransform = a;
      },
      54962: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RolloverModifierRenderableSeriesProps = void 0);
        const r = i(56744),
          s = i(14184),
          o = i(70142);
        t.RolloverModifierRenderableSeriesProps = class {
          constructor(e, t = !1) {
            (this.tooltipLegendOffsetX = 20),
              (this.tooltipLegendOffsetY = 20),
              (this.showsRolloverProperty = !0),
              (this.tooltipTextColorProperty =
                s.SciChartSurfaceBase.DEFAULT_THEME.textAnnotationForeground),
              (this.renderableSeries = e),
              (this.isY1 = t);
          }
          static copy(e, t) {
            (t.markerColorProperty = e.markerColor),
              (t.showsRolloverProperty = e.showRollover),
              (t.tooltipColorProperty = e.tooltipColor),
              (t.tooltipDataTemplateProperty = e.tooltipDataTemplate),
              (t.tooltipLabelX = e.tooltipLabelX),
              (t.tooltipLabelY = e.tooltipLabelY),
              (t.tooltipLegendOffsetX = e.tooltipLegendOffsetX),
              (t.tooltipLegendOffsetY = e.tooltipLegendOffsetY),
              (t.tooltipTemplate = e.tooltipTemplate),
              (t.tooltipTextColorProperty = e.tooltipTextColorProperty),
              (t.tooltipTitleProperty = e.tooltipTitle),
              (t.shadowColorProperty = e.shadowColorProperty),
              (t.invalidateParentCallback = e.invalidateParentCallback);
          }
          setInvalidateParentCallback(e) {
            this.invalidateParentCallback = e;
          }
          get showRollover() {
            return this.showsRolloverProperty;
          }
          set showRollover(e) {
            (this.showsRolloverProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.SHOWS_ROLLOVER);
          }
          get tooltipColor() {
            return this.tooltipColorProperty
              ? this.tooltipColorProperty
              : this.getRenderableSeriesStroke()
              ? this.getRenderableSeriesStroke()
              : s.SciChartSurfaceBase.DEFAULT_THEME.textAnnotationBackground;
          }
          set tooltipColor(e) {
            (this.tooltipColorProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_COLOR);
          }
          get tooltipTextColor() {
            return this.tooltipTextColorProperty;
          }
          set tooltipTextColor(e) {
            (this.tooltipTextColorProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_TEXT_COLOR);
          }
          get tooltipTitle() {
            return this.tooltipTitleProperty;
          }
          set tooltipTitle(e) {
            (this.tooltipTitleProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_TITLE);
          }
          get markerColor() {
            return this.markerColorProperty
              ? this.markerColorProperty
              : this.getRenderableSeriesStroke()
              ? this.getRenderableSeriesStroke()
              : s.SciChartSurfaceBase.DEFAULT_THEME.textAnnotationBackground;
          }
          set markerColor(e) {
            (this.markerColorProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.MARKER_COLOR);
          }
          get shadowColor() {
            return this.shadowColorProperty;
          }
          set shadowColor(e) {
            (this.shadowColorProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_SHADOW_COLOR);
          }
          get tooltipDataTemplate() {
            return this.tooltipDataTemplateProperty;
          }
          set tooltipDataTemplate(e) {
            (this.tooltipDataTemplateProperty = e),
              this.notifyPropertyChanged(o.PROPERTY.TOOLTIP_DATA_TEMPLATE);
          }
          get tooltipLegendTemplate() {
            return this.tooltipLegendTemplateProperty;
          }
          set tooltipLegendTemplate(e) {
            console.warn(
              "tooltipLegendTemplate property on the RolloverModifierRenderableSeriesProps will be removed in version 2.0, please set tooltipLegendTemplate on the RolloverModifier instead"
            ),
              (this.tooltipLegendTemplateProperty = e);
          }
          delete() {
            var e, t;
            (this.rolloverModifier = void 0),
              (null === (e = this.marker) || void 0 === e
                ? void 0
                : e.isDeleted) ||
                (this.marker = (0, r.deleteSafe)(this.marker)),
              (this.marker = void 0),
              (null === (t = this.tooltip) || void 0 === t
                ? void 0
                : t.isDeleted) ||
                (this.tooltip = (0, r.deleteSafe)(this.tooltip)),
              (this.tooltip = void 0);
          }
          notifyPropertyChanged(e) {
            this.invalidateParentCallback && this.invalidateParentCallback();
          }
          getRenderableSeriesStroke() {
            return this.isY1
              ? this.renderableSeries.strokeY1Property
              : this.renderableSeries.strokeProperty;
          }
        };
      },
      70142: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).MARKER_COLOR = "MARKER_COLOR"),
          (i.SHOWS_ROLLOVER = "SHOWS_ROLLOVER"),
          (i.TOOLTIP_COLOR = "TOOLTIP_COLOR"),
          (i.TOOLTIP_DATA_TEMPLATE = "TOOLTIP_DATA_TEMPLATE"),
          (i.TOOLTIP_TEXT_COLOR = "TOOLTIP_TEXT_COLOR"),
          (i.TOOLTIP_TITLE = "TOOLTIP_TITLE"),
          (i.TOOLTIP_SHADOW_COLOR = "TOOLTIP_SHADOW_COLOR");
      },
      9150: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SelectionChangedArgs = void 0),
          (t.SelectionChangedArgs = class {
            constructor(e, t, i, r) {
              (this.source = e),
                (this.selectedSeries = t),
                (this.allSeries = i),
                (this.hitTestInfo = r);
            }
          });
      },
      57318: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesHoveredArgs = void 0),
          (t.SeriesHoveredArgs = class {
            constructor(e, t) {
              (this.sourceSeries = e), (this.hovered = t);
            }
          });
      },
      29593: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesSelectedArgs = void 0),
          (t.SeriesSelectedArgs = class {
            constructor(e, t) {
              (this.sourceSeries = e), (this.isSelected = t);
            }
          });
      },
      72469: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesVisibleChangedArgs = void 0),
          (t.SeriesVisibleChangedArgs = class {
            constructor(e, t) {
              (this.sourceSeries = e), (this.isVisible = t);
            }
          });
      },
      93545: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ShaderEffect = void 0);
        const r = i(84745),
          s = i(56744),
          o = i(3214),
          a = i(23866),
          n = i(75772),
          l = i(50605),
          d = i(48008),
          h = i(11727),
          u = i(20977),
          c = i(98353),
          p = i(55023);
        class g extends p.DeletableEntity {
          constructor(e, t, i) {
            super(),
              a.Guard.notNull(e, "webAssemblyContext"),
              r.IS_TEST_ENV || a.Guard.notNull(t, "seriesEffect"),
              (this.webAssemblyContext = e),
              (this.propertyChanged = new o.EventHandler()),
              (this.nativeEffect = t),
              (this.intensity = (null == i ? void 0 : i.intensity) || 1),
              (this.range = (null == i ? void 0 : i.range) || 0),
              (this.offset =
                (null == i ? void 0 : i.offset) || new n.Point(0, 0)),
              (this.color = (null == i ? void 0 : i.color) || "#444444");
          }
          delete() {
            (this.nativeEffect = (0, s.deleteSafe)(this.nativeEffect)),
              (this.webAssemblyContext = void 0);
          }
          getNativeEffect() {
            return this.nativeEffect;
          }
          get intensity() {
            return this.intensityProperty;
          }
          set intensity(e) {
            (this.intensityProperty = e),
              this.nativeEffect.SetIntensity(e),
              this.notifyPropertyChanged(u.PROPERTY.INTENSITY);
          }
          get offset() {
            return this.offsetProperty;
          }
          set offset(e) {
            a.Guard.notNull(e, "offset"), (this.offsetProperty = e);
            const t = new this.webAssemblyContext.TSRVector2(e.x, e.y);
            this.nativeEffect.SetOffset(t),
              t.delete(),
              this.notifyPropertyChanged(u.PROPERTY.OFFSET);
          }
          get color() {
            return this.colorProperty;
          }
          set color(e) {
            this.colorProperty = e;
            const t = (0, d.parseColorToTArgb)(e),
              i = (0, c.getVector4)(this.webAssemblyContext, 0, 0, 0, 0);
            (0, h.updateTsrVector4)(t, i),
              this.nativeEffect.SetColor(i),
              this.notifyPropertyChanged(u.PROPERTY.COLOR);
          }
          get range() {
            return this.rangeProperty;
          }
          set range(e) {
            (this.rangeProperty = e),
              this.nativeEffect.SetRange(e),
              this.notifyPropertyChanged(u.PROPERTY.RANGE);
          }
          notifyPropertyChanged(e) {
            var t;
            null === (t = this.propertyChanged) ||
              void 0 === t ||
              t.raiseEvent(new l.PropertyChangedEventArgs(e));
          }
          toJSON() {
            const e = {
              color: this.color,
              intensity: this.intensity,
              offset: this.offset,
              range: this.range,
            };
            return { type: this.type, options: e };
          }
        }
        t.ShaderEffect = g;
      },
      68264: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ShadowEffect = void 0);
        const r = i(75772),
          s = i(75323),
          o = i(93545);
        class a extends o.ShaderEffect {
          constructor(e, t) {
            super(e, new e.SCRTShadowEffect(), {
              offset: (null == t ? void 0 : t.offset) || new r.Point(10, 10),
              range: (null == t ? void 0 : t.range) || 1,
              color: t
                ? `rgba(${(null == t ? void 0 : t.brightness) || 68},${
                    (null == t ? void 0 : t.brightness) || 68
                  },${(null == t ? void 0 : t.brightness) || 68},1)`
                : "#444444",
            }),
              (this.type = s.EShaderEffectType.Shadow);
          }
        }
        t.ShadowEffect = a;
      },
      56664: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SmoothStackedMountainRenderableSeries = void 0);
        const r = i(5337),
          s = i(89136),
          o = i(1391);
        class a extends o.StackedMountainRenderableSeries {
          constructor(e, t) {
            var i, o;
            super(e, t),
              (this.type = r.ESeriesType.SmoothStackedMountainSeries);
            const a = new s.SmoothStackedRenderDataTransform(this, e, []);
            (a.interpolationPoints =
              null !== (i = null == t ? void 0 : t.interpolationPoints) &&
              void 0 !== i
                ? i
                : a.interpolationPoints),
              (a.curvature =
                null !== (o = null == t ? void 0 : t.curvature) && void 0 !== o
                  ? o
                  : a.curvature),
              (this.renderDataTransform = a);
          }
        }
        t.SmoothStackedMountainRenderableSeries = a;
      },
      78146: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SplineBandRenderableSeries = void 0);
        const r = i(56744),
          s = i(98140),
          o = i(5337),
          a = i(72934),
          n = i(24933),
          l = i(51885),
          d = i(2354),
          h = i(48570),
          u = i(20181),
          c = i(20977),
          p = i(69133);
        class g extends u.BaseBandRenderableSeries {
          constructor(e, t) {
            var i, r, s;
            super(e, t),
              (this.type = o.ESeriesType.SplineBandSeries),
              (this.isSplineProperty = !0),
              (this.interpolationPointsProperty = 10),
              (this.interpolationPointsProperty =
                null !== (i = null == t ? void 0 : t.interpolationPoints) &&
                void 0 !== i
                  ? i
                  : this.interpolationPointsProperty),
              (this.renderDataTransform = new p.XyySplineRenderDataTransform(
                this,
                e,
                [this.drawingProviders[0]]
              )),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (null === (r = this.paletteProvider) || void 0 === r
                ? void 0
                : r.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this));
          }
          get isSpline() {
            return this.isSplineProperty;
          }
          get interpolationPoints() {
            return this.interpolationPointsProperty;
          }
          set interpolationPoints(e) {
            (this.interpolationPointsProperty = e),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (this.renderDataTransform.requiresTransform = !0),
              this.notifyPropertyChanged(c.PROPERTY.INTERPOLATION_POINTS);
          }
          get xSplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.xValues;
          }
          get ySplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.yValues;
          }
          get y1SplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.y1Values;
          }
          get warnOnSplineFailure() {
            return this.renderDataTransform.warnOnSplineFailure;
          }
          set warnOnSplineFailure(e) {
            this.renderDataTransform.warnOnSplineFailure = e;
          }
          updateTransformedValues() {
            this.dataSeries &&
              this.parentSurface &&
              (this.currentRenderPassData ||
                (this.currentRenderPassData = new h.RenderPassData(
                  this.getIndicesRange(
                    this.xAxis.visibleRange,
                    this.xAxis.isCategoryAxis
                  ),
                  this.xAxis.getCurrentCoordinateCalculator,
                  this.yAxis.getCurrentCoordinateCalculator,
                  this.xAxis.isVerticalChart,
                  new d.XyyPointSeriesWrapped(this.dataSeries)
                )),
              (this.transformedRenderPassData =
                this.renderDataTransform.runTransform(
                  this.currentRenderPassData
                )));
          }
          updateSplineValues() {
            this.updateTransformedValues();
          }
          onSplineFailure() {}
          getYRange(e, t = !1) {
            var i;
            if (this.isRunningAnimation)
              return this.dataSeries.getWindowedYRange(
                e,
                !0,
                t,
                l.EDataSeriesValueType.Default,
                this.yRangeMode
              );
            this.updateSplineValues();
            const o = this.xSplineValues,
              d = this.ySplineValues,
              h = this.y1SplineValues;
            if (1 === o.size()) {
              const e = Math.min(d.get(0), h.get(0)),
                t = Math.max(d.get(0), h.get(0));
              return new s.NumberRange(e, t);
            }
            const u = t
                ? e
                : (0, n.getIndicesRange)(
                    this.webAssemblyContext,
                    o,
                    e,
                    null === (i = this.dataSeries) || void 0 === i
                      ? void 0
                      : i.dataDistributionCalculator.isSortedAscending
                  ),
              c = Math.max(Math.floor(u.min), 0),
              p = Math.min(Math.ceil(u.max), o.size() - 1);
            if (p < c) return;
            let g, y;
            try {
              if (
                ((g = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                  d,
                  c,
                  p - c + 1
                )),
                !(0, a.isRealNumber)(g.minD) || !(0, a.isRealNumber)(g.maxD))
              )
                return;
              if (
                ((y = this.webAssemblyContext.NumberUtil.MinMaxWithIndex(
                  h,
                  c,
                  p - c + 1
                )),
                !(0, a.isRealNumber)(y.minD) || !(0, a.isRealNumber)(y.maxD))
              )
                return;
              return new s.NumberRange(
                Math.min(g.minD, y.minD),
                Math.max(g.maxD, y.maxD)
              );
            } finally {
              (0, r.deleteSafe)(g), (0, r.deleteSafe)(y);
            }
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = { interpolationPoints: this.interpolationPoints };
            return Object.assign(t.options, i), t;
          }
        }
        t.SplineBandRenderableSeries = g;
      },
      32471: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SplineLineRenderableSeries = void 0);
        const r = i(5337),
          s = i(20782),
          o = i(20977),
          a = i(95103);
        class n extends s.BaseLineRenderableSeries {
          constructor(e, t) {
            var i, s, o;
            super(e, t),
              (this.type = r.ESeriesType.SplineLineSeries),
              (this.isSplineProperty = !0),
              (this.interpolationPointsProperty = 10),
              (this.interpolationPointsProperty =
                null !== (i = null == t ? void 0 : t.interpolationPoints) &&
                void 0 !== i
                  ? i
                  : this.interpolationPointsProperty),
              (this.renderDataTransform = new a.SplineRenderDataTransform(
                this,
                e,
                [this.drawingProviders[0]]
              )),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (null === (s = this.paletteProvider) || void 0 === s
                ? void 0
                : s.onAttached) &&
                (null === (o = this.paletteProvider) ||
                  void 0 === o ||
                  o.onAttached(this));
          }
          get xSplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.xValues;
          }
          get ySplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.yValues;
          }
          get isSpline() {
            return this.isSplineProperty;
          }
          get interpolationPoints() {
            return this.interpolationPointsProperty;
          }
          set interpolationPoints(e) {
            (this.interpolationPointsProperty = e),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (this.renderDataTransform.requiresTransform = !0),
              this.notifyPropertyChanged(o.PROPERTY.INTERPOLATION_POINTS);
          }
          get warnOnSplineFailure() {
            return this.renderDataTransform.warnOnSplineFailure;
          }
          set warnOnSplineFailure(e) {
            this.renderDataTransform.warnOnSplineFailure = e;
          }
          updateSplineValues() {
            this.updateTransformedValues();
          }
          onSplineFailure() {}
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = { interpolationPoints: this.interpolationPoints };
            return Object.assign(t.options, i), t;
          }
        }
        t.SplineLineRenderableSeries = n;
      },
      86109: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SplineMountainRenderableSeries = void 0);
        const r = i(5337),
          s = i(36650),
          o = i(20977),
          a = i(95103);
        class n extends s.BaseMountainRenderableSeries {
          constructor(e, t) {
            var i, s, o;
            super(e, t),
              (this.type = r.ESeriesType.SplineMountainSeries),
              (this.isSplineProperty = !0),
              (this.interpolationPointsProperty = 10),
              (this.interpolationPointsProperty =
                null !== (i = null == t ? void 0 : t.interpolationPoints) &&
                void 0 !== i
                  ? i
                  : this.interpolationPointsProperty),
              (this.renderDataTransform = new a.SplineRenderDataTransform(
                this,
                e,
                [this.drawingProviders[0]]
              )),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (null === (s = this.paletteProvider) || void 0 === s
                ? void 0
                : s.onAttached) &&
                (null === (o = this.paletteProvider) ||
                  void 0 === o ||
                  o.onAttached(this));
          }
          get isSpline() {
            return this.isSplineProperty;
          }
          get interpolationPoints() {
            return this.interpolationPointsProperty;
          }
          set interpolationPoints(e) {
            (this.interpolationPointsProperty = e),
              (this.renderDataTransform.interpolationPoints =
                this.interpolationPoints),
              (this.renderDataTransform.requiresTransform = !0),
              this.notifyPropertyChanged(o.PROPERTY.INTERPOLATION_POINTS);
          }
          get xSplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.xValues;
          }
          get ySplineValues() {
            if (!this.transformedRenderPassData)
              throw Error(
                "Spline values are not available until after first render, or call updateSplineValues"
              );
            return this.transformedRenderPassData.pointSeries.yValues;
          }
          get warnOnSplineFailure() {
            return this.renderDataTransform.warnOnSplineFailure;
          }
          set warnOnSplineFailure(e) {
            this.renderDataTransform.warnOnSplineFailure = e;
          }
          updateSplineValues() {
            this.updateTransformedValues();
          }
          onSplineFailure() {}
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = { interpolationPoints: this.interpolationPoints };
            return Object.assign(t.options, i), t;
          }
        }
        t.SplineMountainRenderableSeries = n;
      },
      1406: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedColumnCollection = void 0);
        const r = i(56744),
          s = i(98140),
          o = i(5337),
          a = i(48570),
          n = i(79961),
          l = i(35246),
          d = i(20977),
          h = i(88915),
          u = i(93752),
          c = i(27970);
        class p extends l.BaseStackedCollection {
          constructor(e, t) {
            var i, r, s, a, n;
            super(e, t),
              (this.type = o.ESeriesType.StackedColumnCollection),
              (this.seriesGroups = {}),
              (this.dataPointWidthProperty = 0.5),
              (this.dataPointWidthModeProperty =
                c.EDataPointWidthMode.Relative),
              (this.zeroLineYProperty = 0),
              (this.dataPointWidthProperty =
                null !== (i = null == t ? void 0 : t.dataPointWidth) &&
                void 0 !== i
                  ? i
                  : this.dataPointWidthProperty),
              (this.dataPointWidthMode =
                null !== (r = null == t ? void 0 : t.dataPointWidthMode) &&
                void 0 !== r
                  ? r
                  : this.dataPointWidthModeProperty),
              (this.zeroLineYProperty =
                null !== (s = null == t ? void 0 : t.zeroLineY) && void 0 !== s
                  ? s
                  : this.zeroLineYProperty),
              (this.spacingProperty =
                null !==
                  (n =
                    null !== (a = null == t ? void 0 : t.spacing) &&
                    void 0 !== a
                      ? a
                      : this.spacingProperty) && void 0 !== n
                  ? n
                  : 0),
              (this.getColumnWidth = this.getColumnWidth.bind(this)),
              (this.detachChildSeries = this.detachChildSeries.bind(this)),
              (this.attachChildSeries = this.attachChildSeries.bind(this)),
              this.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach(this.detachChildSeries),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach(this.attachChildSeries);
              }),
              (this.dataLabelProvider =
                new u.StackedCollectionDataLabelProvider()),
              this.dataLabelProviderProperty.onAttach(
                this.webAssemblyContext,
                this
              );
          }
          delete() {
            (this.nativeDrawingProvider = (0, r.deleteSafe)(
              this.nativeDrawingProvider
            )),
              super.delete();
          }
          updateAccumulatedVectors() {
            const e = this.getDataSeriesValuesCount();
            if (!this.isAccumulatedVectorDirty || !e) return;
            this.checkXValuesCorrect(),
              (this.isAccumulatedVectorDirty = !1),
              this.clearAccumulatedVectors(e),
              this.updateGroups();
            const t = this.seriesGroups,
              i = this.getGroupsCount();
            Object.keys(t).forEach((e, r) => {
              t[e].forEach((e) => {
                e.setGroupsCount(i), e.setGroupIndex(r);
              });
            });
            for (let i = 0; i < e; i++)
              this.accumulatedValues0.push_back(this.zeroLineY),
                Object.keys(t).forEach((e) => {
                  const r = t[e];
                  let s;
                  this.isOneHundredPercent &&
                    (s = r.reduce(
                      (e, t) => e + t.dataSeries.getNativeYValues().get(i),
                      0
                    ));
                  let o = 0;
                  r.forEach((e) => {
                    let t = e.dataSeries.getNativeYValues().get(i);
                    this.isOneHundredPercent && (t = (100 * t) / s);
                    const r = o + t;
                    e.accumulatedValues.push_back(r), (o = r);
                  });
                });
          }
          draw(e, t) {
            if (this.canDraw) {
              if ((this.updateHitTestProviders(t), !this.isEnoughDataToDraw()))
                return;
              this.updateAccumulatedVectors();
              const i = t.xCoordinateCalculator.isCategoryCoordinateCalculator,
                r = this.getFirstSeries().dataSeries,
                s = this.parentSurface.seriesViewRect;
              if (null == r ? void 0 : r.fifoCapacity)
                throw new Error(
                  "Sorry, fifo is not currently supported for stacked series"
                );
              const {
                  isVerticalChart: o,
                  xCoordinateCalculator: n,
                  yCoordinateCalculator: l,
                } = t,
                d = i ? r.getNativeIndexes() : r.getNativeXValues(),
                u = this.seriesGroups,
                c = this.getGroupsCount(),
                p = this.getColumnWidth(n);
              Object.keys(u).forEach((t, i) => {
                let r;
                u[t].forEach((t, u) => {
                  var y;
                  const f =
                      0 === u ? this.accumulatedValues0 : r.accumulatedValues,
                    v = t.accumulatedValues;
                  this.setDataLabelProviderProperties(
                    t.dataLabelProvider,
                    v,
                    i,
                    c,
                    p,
                    this.spacingProperty,
                    this.isOneHundredPercent
                  ),
                    t.dataLabelProvider.generateDataLabels(
                      e,
                      new a.RenderPassData(
                        null === (y = t.dataSeries) || void 0 === y
                          ? void 0
                          : y.getIndicesRange(
                              this.xAxis.visibleRange,
                              this.xAxis.isCategoryAxis
                            ),
                        this.xAxis.getCurrentCoordinateCalculator,
                        this.yAxis.getCurrentCoordinateCalculator,
                        this.xAxis.isVerticalChart,
                        new h.XyPointSeriesWrapped(t.dataSeries)
                      )
                    ),
                    g(
                      this.webAssemblyContext,
                      e,
                      n,
                      l,
                      o,
                      this.nativeDrawingProvider,
                      d,
                      f,
                      v,
                      t.getFillBrush(),
                      t.getStrokePen(),
                      s,
                      p,
                      this.spacingProperty,
                      c,
                      i
                    ),
                    (r = t);
                });
              });
            }
          }
          getXRange() {
            if (!this.isEnoughDataToDraw()) return new s.NumberRange();
            const e = this.getFirstSeries().dataSeries.xRange,
              t = this.getFirstSeries().dataSeries.count();
            let i = this.dataPointWidth / 2;
            if (
              (this.dataPointWidthMode === c.EDataPointWidthMode.Relative &&
                (i =
                  t > 1 ? ((e.diff / (t - 1)) * this.dataPointWidth) / 2 : 0),
              this.dataPointWidthMode === c.EDataPointWidthMode.Absolute)
            ) {
              const e = this.xAxis.getCurrentCoordinateCalculator();
              i = (e.getDataValue(this.dataPointWidth) - e.getDataValue(0)) / 2;
            }
            return new s.NumberRange(e.min - i, e.max + i);
          }
          getYRange(e, t) {
            const i = super.getYRange(e, t);
            return new s.NumberRange(
              Math.min(i.min, this.zeroLineY),
              Math.max(i.max, this.zeroLineY)
            );
          }
          onAttach(e) {
            super.onAttach(e),
              (this.nativeDrawingProvider =
                new this.webAssemblyContext.SCRTStackedColumnSeriesDrawingProvider());
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              (e !== d.PROPERTY.DATA_SERIES &&
                e !== d.PROPERTY.IS_VISIBLE &&
                e !== d.PROPERTY.IS_ONE_HUNDRED_PERCENT &&
                e !== d.PROPERTY.STACKED_GROUP_ID) ||
                (this.isAccumulatedVectorDirty = !0);
          }
          hasDataSeriesValues() {
            return this.isEnoughDataToDraw();
          }
          getColumnWidth(e) {
            const t = this.dataPointWidth,
              i = this.dataPointWidthMode,
              r = this.getFirstSeries().dataSeries,
              s = e.isCategoryCoordinateCalculator,
              o = s ? r.getNativeIndexes() : r.getNativeXValues(),
              a = this.parentSurface.seriesViewRect,
              l = this.getGroupsCount();
            if (i === c.EDataPointWidthMode.Range) {
              const i = e.visibleMax - e.visibleMin;
              return ((e.viewportDimension / i) * t) / l;
            }
            return i === c.EDataPointWidthMode.Absolute
              ? t / l
              : (0, n.getDataPointWidth)(
                  o,
                  e,
                  a.width,
                  t,
                  s,
                  this.webAssemblyContext
                ) / l;
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                dataPointWidth: this.dataPointWidth,
                dataPointWidthMode: this.dataPointWidthMode,
                zeroLineY: this.zeroLineY,
                spacing: this.spacingProperty,
              };
            return Object.assign(t.options, i), t;
          }
          get dataPointWidth() {
            return this.dataPointWidthProperty;
          }
          set dataPointWidth(e) {
            (this.dataPointWidthProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.DATA_POINT_WIDTH);
          }
          get dataPointWidthMode() {
            return this.dataPointWidthModeProperty;
          }
          set dataPointWidthMode(e) {
            (this.dataPointWidthModeProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.DATA_POINT_WIDTH_MODE);
          }
          get zeroLineY() {
            return this.zeroLineYProperty;
          }
          set zeroLineY(e) {
            (this.zeroLineYProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.ZERO_LINE_Y);
          }
          get spacing() {
            return this.spacingProperty;
          }
          set spacing(e) {
            (this.spacingProperty = e),
              this.notifyPropertyChanged(d.PROPERTY.SPACING);
          }
          detachChildSeries(e) {
            e.onDetachFromParentCollection(),
              (this.isAccumulatedVectorDirty = !0),
              this.invalidateParent();
          }
          attachChildSeries(e) {
            e.onAttachToParentCollection(
              this,
              this.getParentSurface,
              this.notifyPropertyChanged,
              this.getColumnWidth
            ),
              (this.isAccumulatedVectorDirty = !0),
              this.invalidateParent();
          }
          checkXValuesCorrect() {
            const e = this.getDataSeriesValuesCount();
            this.getVisibleSeries().forEach((t) => {
              var i;
              if (
                (null === (i = t.dataSeries) || void 0 === i
                  ? void 0
                  : i.count()) !== e
              )
                throw Error(
                  "All stacked series in on collection should have the same amount of X Values"
                );
            });
          }
          setDataLabelProviderProperties(e, t, i, r, s, o, a) {
            (e.topVector = t),
              (e.groupIndex = i),
              (e.groupSize = r),
              (e.columnWidth = s),
              (e.spacing = o),
              (e.isOneHundredPercent = a);
          }
          clearAccumulatedVectors(e) {
            this.accumulatedValues0.clear(),
              this.accumulatedValues0.reserve(e),
              this.asArray().forEach((t) => {
                t.accumulatedValues.clear(), t.accumulatedValues.reserve(e);
              });
          }
          getLastVisibleSeries() {
            const [e] = this.getVisibleSeries().slice(-1);
            return e;
          }
          updateGroups() {
            const e = {};
            this.getVisibleSeries().forEach((t) => {
              const i = t.stackedGroupId;
              e[i] || (e[i] = []), e[i].push(t);
            }),
              (this.seriesGroups = e);
          }
          getGroupsCount() {
            return Object.keys(this.seriesGroups).length;
          }
        }
        t.StackedColumnCollection = p;
        const g = (e, t, i, r, s, o, a, n, l, d, h, u, c, p, g, y) => {
          const f = new e.SCRTStackedColumnDrawingParams();
          (f.count = a.size()),
            (f.columnWidth = c <= 0 ? 1 : c),
            (f.spacing = p),
            (f.viewportWidth = u.width),
            (f.viewportHeight = u.height),
            (f.verticalChart = s),
            (f.stackedGroupCount = g),
            (f.stackedGroupIndex = y),
            (f.forceShaderMethod = !0),
            h && f.SetLinesPen(h),
            d && f.SetFillBrush(d);
          const v = t.getNativeContext();
          o.DrawPointsVec(
            v,
            a,
            l,
            n,
            i.nativeCalculator,
            r.nativeCalculator,
            f
          ),
            f.delete();
        };
      },
      83262: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedColumnRenderableSeries = void 0);
        const r = i(56744),
          s = i(5337),
          o = i(51269),
          a = i(21915),
          n = i(84392),
          l = i(14184),
          d = i(48335),
          h = i(20977),
          u = i(51825),
          c = i(74026);
        class p extends d.BaseStackedRenderableSeries {
          constructor(e, t) {
            var i, r, n, d, h, u, p;
            super(e, t),
              (this.type = s.ESeriesType.StackedColumnSeries),
              (this.fillProperty = "#7e8486"),
              (this.spacingProperty = 0),
              (this.stackedGroupIdProperty = "default"),
              (this.getGroupIndex = this.getGroupIndex.bind(this)),
              (this.getGroupsCount = this.getGroupsCount.bind(this)),
              (this.getColumnWidth = this.getColumnWidth.bind(this)),
              (this.fillBrushCache = new o.BrushCache(e)),
              (this.strokePenCache = new a.Pen2DCache(e)),
              (this.isOneHundredPercent =
                null !==
                  (r =
                    null === (i = this.parentCollection) || void 0 === i
                      ? void 0
                      : i.isOneHundredPercent) &&
                void 0 !== r &&
                r),
              (this.fill =
                null !== (n = null == t ? void 0 : t.fill) && void 0 !== n
                  ? n
                  : this.fillProperty),
              (this.stroke =
                null !== (d = null == t ? void 0 : t.stroke) && void 0 !== d
                  ? d
                  : l.SciChartSurfaceBase.DEFAULT_THEME.mountainLineColor),
              (this.strokeThickness =
                null !== (h = null == t ? void 0 : t.strokeThickness) &&
                void 0 !== h
                  ? h
                  : 1),
              (this.spacingProperty =
                null !== (u = null == t ? void 0 : t.spacing) && void 0 !== u
                  ? u
                  : this.spacingProperty),
              (this.stackedGroupIdProperty =
                null !== (p = null == t ? void 0 : t.stackedGroupId) &&
                void 0 !== p
                  ? p
                  : this.stackedGroupIdProperty),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new c.StackedColumnSeriesDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                ));
          }
          delete() {
            (this.strokePenCache = (0, r.deleteSafe)(this.strokePenCache)),
              (this.fillBrushCache = (0, r.deleteSafe)(this.fillBrushCache)),
              super.delete();
          }
          onAttachToParentCollection(e, t, i, r) {
            if (this.parentCollection)
              throw new Error(
                "Invalid operation in StackedColumnRenderableSeries.onAttachToParentCollection, this series has been already attached to collection. Please detach it from the collection before attaching to another"
              );
            (this.parentCollection = e),
              (this.getParentSurfaceFn = t),
              (this.notifyParentPropertyChangedFn = i),
              (this.getColumnWidthFn = r);
            const { stroke: s, strokeThickness: n, fill: l, opacity: d } = this;
            (0, a.createPenInCache)(this.strokePenCache, s, n, d),
              (0, o.createBrushInCache)(this.fillBrushCache, l, d);
          }
          getFillBrush() {
            return (0, o.getScrtBrushFromCache)(this.fillBrushCache);
          }
          getStrokePen() {
            const { stroke: e, strokeThickness: t, opacity: i } = this;
            return (0, a.createPenInCache)(this.strokePenCache, e, t, i);
          }
          getGroupIndex() {
            return this.groupIndex;
          }
          setGroupIndex(e) {
            this.groupIndex = e;
          }
          getGroupsCount() {
            return this.groupsCount;
          }
          setGroupsCount(e) {
            this.groupsCount = e;
          }
          getColumnWidth(e) {
            return this.getColumnWidthFn(e);
          }
          onDpiChanged(e) {
            this.notifyPropertyChanged(h.PROPERTY.STROKE);
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              (e !== h.PROPERTY.STROKE &&
                e !== h.PROPERTY.STROKE_THICKNESS &&
                e !== h.PROPERTY.OPACITY) ||
                (0, a.createPenInCache)(
                  this.strokePenCache,
                  this.stroke,
                  this.strokeThickness,
                  this.opacity
                ),
              (e !== h.PROPERTY.FILL && e !== h.PROPERTY.OPACITY) ||
                (0, o.createBrushInCache)(
                  this.fillBrushCache,
                  this.fill,
                  this.opacity
                );
          }
          get fill() {
            return (0, n.stripAutoColor)(this.fillProperty);
          }
          set fill(e) {
            (this.fillProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.FILL);
          }
          get drawingProviders() {
            return [];
          }
          set drawingProviders(e) {}
          get effect() {}
          set effect(e) {}
          get spacing() {
            return this.spacingProperty;
          }
          set spacing(e) {
            (this.spacingProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.SPACING);
          }
          get stackedGroupId() {
            return this.stackedGroupIdProperty;
          }
          set stackedGroupId(e) {
            (this.stackedGroupIdProperty = e),
              this.notifyPropertyChanged(h.PROPERTY.STACKED_GROUP_ID);
          }
          toJSON(e = !1) {
            const t = super.toJSON(e),
              i = {
                fill: this.fill,
                stroke: this.stroke,
                strokeThickness: this.strokeThickness,
                spacing: this.spacing,
                stackedGroupId: this.stackedGroupId,
              };
            return Object.assign(t.options, i), t;
          }
          resolveAutoColors(e, t, i) {
            if (
              (super.resolveAutoColors(e, t, i),
              this.fillProperty.startsWith(n.AUTO_COLOR))
            ) {
              const r = i.getFillColor(e, t, this.webAssemblyContext);
              this.fill = n.AUTO_COLOR + this.adjustAutoColor("fill", r);
            }
          }
          newHitTestProvider() {
            return new u.StackedColumnSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.StackedColumnRenderableSeries = p;
      },
      71719: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedMountainCollection = void 0);
        const r = i(98140),
          s = i(5337),
          o = i(46544),
          a = i(2354),
          n = i(48570),
          l = i(35246),
          d = i(20977);
        class h extends l.BaseStackedCollection {
          constructor(e, t) {
            super(e, t),
              (this.type = s.ESeriesType.StackedMountainCollection),
              (this.detachChildSeries = this.detachChildSeries.bind(this)),
              (this.attachChildSeries = this.attachChildSeries.bind(this)),
              this.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach(this.detachChildSeries),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach(this.attachChildSeries);
              });
          }
          updateAccumulatedVectors() {
            const e = this.getDataSeriesValuesCount();
            if (this.isAccumulatedVectorDirty && e) {
              this.checkXValuesCorrect(),
                (this.isAccumulatedVectorDirty = !1),
                this.clearAccumulatedVectors(e);
              for (let t = 0; t < e; t++) {
                this.accumulatedValues0.push_back(0);
                let e,
                  i = 0;
                this.isOneHundredPercent &&
                  (e = this.getVisibleSeries().reduce(
                    (e, i) => e + i.dataSeries.getNativeYValues().get(t),
                    0
                  )),
                  this.getVisibleSeries().forEach((r) => {
                    let s = r.dataSeries.getNativeYValues().get(t);
                    this.isOneHundredPercent && (s = (100 * s) / e);
                    const o = i + s;
                    r.accumulatedValues.push_back(o),
                      (i = o),
                      r.renderDataTransform &&
                        (r.renderDataTransform.requiresTransform = !0);
                  });
              }
            }
          }
          draw(e, t) {
            var i;
            if (this.canDraw) {
              if ((this.updateHitTestProviders(t), !this.isEnoughDataToDraw()))
                return;
              if (
                null === (i = this.getFirstSeries().dataSeries) || void 0 === i
                  ? void 0
                  : i.fifoCapacity
              )
                throw new Error(
                  "Sorry, fifo is not currently supported for stacked series"
                );
              this.updateAccumulatedVectors();
              const r = this.parentSurface.getXAxisById(this.xAxisId),
                s = this.getVisibleSeries();
              s.reduceRight((i, l, d, h) => {
                let u = l.accumulatedValues,
                  c =
                    0 === d
                      ? this.accumulatedValues0
                      : h[d - 1].accumulatedValues;
                const p = new a.XyyPointSeriesWrapped(l.dataSeries, c, u),
                  g = new n.RenderPassData(
                    l.getIndicesRange(r.visibleRange),
                    t.getxCoordinateCalculator,
                    t.getyCoordinateCalculator,
                    r.isVerticalChart,
                    p
                  );
                if (l.renderDataTransform) {
                  let i = new n.RenderPassData(
                    l.getIndicesRange(r.visibleRange),
                    t.getxCoordinateCalculator,
                    t.getyCoordinateCalculator,
                    r.isVerticalChart,
                    p
                  );
                  return (
                    (i = l.renderDataTransform.runTransform(i)),
                    d < s.length - 1 &&
                      (0, o.copyDoubleVector)(
                        h[d + 1].renderDataTransform.pointSeries.yValues,
                        i.pointSeries.y1Values,
                        this.webAssemblyContext
                      ),
                    (l.strokeY1 = 0 === d ? "transparent" : h[d - 1].stroke),
                    (l.strokeY1DashArray =
                      0 === d ? [] : h[d - 1].strokeDashArray),
                    l.drawingProviders[0].draw(e, i),
                    l
                  );
                }
                return (
                  (l.strokeY1 = 0 === d ? "transparent" : h[d - 1].stroke),
                  (l.strokeY1DashArray =
                    0 === d ? [] : h[d - 1].strokeDashArray),
                  l.draw(e, g),
                  l
                );
              }, void 0);
            }
          }
          getXRange() {
            return this.isEnoughDataToDraw()
              ? this.getFirstSeries().dataSeries.xRange
              : new r.NumberRange();
          }
          onAttach(e) {
            super.onAttach(e),
              this.getVisibleSeries().forEach((t) => {
                t.onAttach(e);
              });
          }
          onDetach() {
            this.getVisibleSeries().forEach((e) => {
              e.onDetach();
            }),
              super.onDetach();
          }
          notifyPropertyChanged(e) {
            super.notifyPropertyChanged(e),
              (e !== d.PROPERTY.DATA_SERIES &&
                e !== d.PROPERTY.IS_VISIBLE &&
                e !== d.PROPERTY.IS_ONE_HUNDRED_PERCENT) ||
                (this.isAccumulatedVectorDirty = !0);
          }
          hasDataSeriesValues() {
            return this.isEnoughDataToDraw();
          }
          detachChildSeries(e) {
            e.onDetachFromParentCollection(),
              (this.isAccumulatedVectorDirty = !0),
              this.invalidateParent();
          }
          attachChildSeries(e) {
            e.onAttachToParentCollection(
              this,
              this.getParentSurface,
              this.notifyPropertyChanged
            ),
              this.parentSurface && e.onAttach(this.parentSurface),
              (this.isAccumulatedVectorDirty = !0),
              this.invalidateParent();
          }
          checkXValuesCorrect() {
            const e = this.getDataSeriesValuesCount();
            this.getVisibleSeries().forEach((t) => {
              if (t.dataSeries.count() !== e)
                throw Error(
                  "All stacked series in on collection should have the same amount of X Values"
                );
            });
          }
          clearAccumulatedVectors(e) {
            this.accumulatedValues0.clear(),
              this.accumulatedValues0.reserve(e),
              this.asArray().forEach((t) => {
                t.accumulatedValues.clear(), t.accumulatedValues.reserve(e);
              });
          }
          getLastVisibleSeries() {
            const [e] = this.getVisibleSeries().slice(-1);
            return e;
          }
        }
        t.StackedMountainCollection = h;
      },
      1391: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.StackedMountainRenderableSeries = void 0);
        const r = i(5337),
          s = i(73124);
        class o extends s.BaseStackedMountainRenderableSeries {
          constructor(e, t) {
            super(e, t), (this.type = r.ESeriesType.StackedMountainSeries);
          }
        }
        t.StackedMountainRenderableSeries = o;
      },
      88189: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformContoursRenderableSeries =
            t.EContourColorMapMode =
            t.COLOR_MAP_PREFIX =
              void 0);
        const r = i(5337),
          s = i(72934),
          o = i(42241),
          a = i(79961),
          n = i(20977),
          l = i(9488),
          d = i(9184),
          h = i(60981);
        var u;
        (t.COLOR_MAP_PREFIX = "colorMap."),
          ((u = t.EContourColorMapMode || (t.EContourColorMapMode = {}))[
            (u.AlternateColors = 0)
          ] = "AlternateColors"),
          (u[(u.GradientColors = 1)] = "GradientColors");
        class c extends a.BaseRenderableSeries {
          constructor(e, t) {
            var i, s, a;
            super(e, t),
              (this.type = r.ESeriesType.UniformContoursSeries),
              (this.colorMapPropertyChanged =
                this.colorMapPropertyChanged.bind(this)),
              (null == t ? void 0 : t.colorMap) &&
                ("toJSON" in t.colorMap ||
                  (t.colorMap = new h.HeatmapColorMap(t.colorMap))),
              (this.colorMap = null == t ? void 0 : t.colorMap),
              (this.dataSeries = null == t ? void 0 : t.dataSeries),
              (this.xAxisId =
                null !== (i = null == t ? void 0 : t.xAxisId) && void 0 !== i
                  ? i
                  : o.AxisCore.DEFAULT_AXIS_ID),
              (this.xAxisId =
                (null == t ? void 0 : t.yAxisId) || o.AxisCore.DEFAULT_AXIS_ID),
              (this.zMin = (null == t ? void 0 : t.zMin) || NaN),
              (this.zMax = (null == t ? void 0 : t.zMax) || NaN),
              (this.zStep = (null == t ? void 0 : t.zStep) || NaN),
              (this.majorLineStyle =
                (null == t ? void 0 : t.majorLineStyle) ||
                c.DEFAULT_MAJOR_LINE_STYLE),
              (this.minorLineStyle =
                (null == t ? void 0 : t.minorLineStyle) ||
                c.DEFAULT_MINOR_LINE_STYLE),
              (this.minorsPerMajor =
                (null == t ? void 0 : t.minorsPerMajor) || 0),
              (this.majorLineStyleProperty =
                null == t ? void 0 : t.majorLineStyle),
              (this.minorLineStyleProperty =
                null == t ? void 0 : t.minorLineStyle),
              (null === (s = this.paletteProvider) || void 0 === s
                ? void 0
                : s.onAttached) &&
                (null === (a = this.paletteProvider) ||
                  void 0 === a ||
                  a.onAttached(this)),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new l.ContoursDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new d.UniformContoursDrawingProvider(e, this)
              );
          }
          get zMin() {
            return this.zMinProperty;
          }
          set zMin(e) {
            (this.zMinProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.Z_MIN);
          }
          get zMax() {
            return this.zMaxProperty;
          }
          set zMax(e) {
            (this.zMaxProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.Z_MAX);
          }
          get zStep() {
            return this.zStepProperty;
          }
          set zStep(e) {
            (this.zStepProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.Z_STEP);
          }
          get colorMap() {
            return this.colorMapProperty;
          }
          set colorMap(e) {
            var t, i;
            null === (t = this.colorMapProperty) ||
              void 0 === t ||
              t.propertyChanged.unsubscribe(this.colorMapPropertyChanged),
              (this.colorMapProperty = e),
              null === (i = this.colorMapProperty) ||
                void 0 === i ||
                i.propertyChanged.subscribe(this.colorMapPropertyChanged),
              this.notifyPropertyChanged(n.PROPERTY.COLOR_MAP);
          }
          get colorMapMode() {
            return this.colorMapModeProperty;
          }
          set colorMapMode(e) {
            (this.colorMapModeProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.CONTOUR_COLOR_MAP_MODE);
          }
          get majorLineStyle() {
            return this.majorLineStyleProperty;
          }
          set majorLineStyle(e) {
            (this.majorLineStyleProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.CONTOUR_MAJOR_LINE_STYLE);
          }
          get minorLineStyle() {
            return this.minorLineStyleProperty;
          }
          set minorLineStyle(e) {
            (this.minorLineStyleProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.CONTOUR_MINOR_LINE_STYLE);
          }
          get minorsPerMajor() {
            return this.minorsPerMajorProperty;
          }
          set minorsPerMajor(e) {
            (this.minorsPerMajorProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.CONTOUR_MINORS_PER_MAJOR);
          }
          getContourDrawingParams() {
            var e, t;
            const i = this.dataSeries,
              r = i.zRange;
            let o =
                this.zMin && (0, s.isRealNumber)(this.zMin) ? this.zMin : r.min,
              a =
                this.zMax && (0, s.isRealNumber)(this.zMax) ? this.zMax : r.max;
            (o = Math.max(o, r.min)), (a = Math.min(a, r.max));
            const n =
                this.zStep && (0, s.isRealNumber)(this.zStep)
                  ? this.zStep
                  : Math.abs(a - o) / c.DEFAULT_CONTOURS_COUNT,
              l =
                this.minorsPerMajor && this.minorsPerMajor > 0
                  ? n / (this.minorsPerMajor + 1)
                  : n,
              d =
                null !== (e = this.minorLineStyle) && void 0 !== e
                  ? e
                  : {
                      strokeThickness: this.strokeThickness,
                      color: this.stroke,
                    },
              h =
                null !== (t = this.majorLineStyle) && void 0 !== t
                  ? t
                  : {
                      strokeThickness: this.strokeThickness,
                      color: this.stroke,
                    };
            return {
              xMax: i.xMax,
              yMin: i.yMin,
              yMax: i.yMax,
              xMin: i.xMin,
              zMin: o,
              zMax: a,
              majorStepZ: n,
              minorStepZ: l,
              minorLineStyle: d,
              majorLineStyle: h,
            };
          }
          toPointSeries(e) {}
          toJSON(e = !1) {
            var t;
            const i = super.toJSON(e),
              r = {
                colorMap:
                  null === (t = this.colorMap) || void 0 === t
                    ? void 0
                    : t.toJSON(),
                majorLineStyle: this.majorLineStyle,
                minorLineStyle: this.minorLineStyle,
                zMax: this.zMax,
                zMin: this.zMin,
                zStep: this.zStep,
                minorsPerMajor: this.minorsPerMajor,
              };
            return Object.assign(i.options, r), i;
          }
          colorMapPropertyChanged(e) {
            this.notifyPropertyChanged(t.COLOR_MAP_PREFIX + e.propertyName);
          }
          newHitTestProvider() {}
        }
        (t.UniformContoursRenderableSeries = c),
          (c.DEFAULT_CONTOURS_COUNT = 15),
          (c.DEFAULT_MAJOR_LINE_STYLE = { strokeThickness: 2, color: "white" }),
          (c.DEFAULT_MINOR_LINE_STYLE = { strokeThickness: 1, color: "white" });
      },
      70033: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UniformHeatmapRenderableSeries = void 0);
        const r = i(84745),
          s = i(5337),
          o = i(53904),
          a = i(75933),
          n = i(76566),
          l = i(3798);
        class d extends o.BaseHeatmapRenderableSeries {
          constructor(e, t) {
            super(e, t),
              (this.type = s.ESeriesType.UniformHeatmapSeries),
              (this.drawingProviders = []),
              r.IS_TEST_ENV ||
                this.drawingProviders.push(
                  new n.UniformHeatmapDrawingProvider(e, this)
                ),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty =
                  new a.HeatMapDataLabelProvider(
                    null == t ? void 0 : t.dataLabels
                  )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                ));
          }
          newHitTestProvider() {
            return new l.UniformHeatmapHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
        }
        t.UniformHeatmapRenderableSeries = d;
      },
      52954: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.XyScatterRenderableSeries = void 0);
        const r = i(5337),
          s = i(33240),
          o = i(10749),
          a = i(79961),
          n = i(20977),
          l = i(96852),
          d = i(94707),
          h = i(64485);
        class u extends a.BaseRenderableSeries {
          constructor(e, t) {
            var i, s, a;
            super(e, t),
              (this.type = r.ESeriesType.ScatterSeries),
              (this.scatterOpacityProperty = 1),
              this.pointMarker ||
                (this.pointMarker = new o.EllipsePointMarker(e, {
                  width: 10,
                  height: 10,
                })),
              (this.drawingProviders = []),
              this.drawingProviders.push(
                new d.PointMarkerDrawingProvider(e, this)
              ),
              (null == t ? void 0 : t.animation) &&
                this.animationQueue.push(t.animation),
              this.dataLabelProviderProperty ||
                ((this.dataLabelProviderProperty = new l.DataLabelProvider(
                  null == t ? void 0 : t.dataLabels
                )),
                this.dataLabelProviderProperty.onAttach(
                  this.webAssemblyContext,
                  this
                )),
              (null === (i = this.paletteProvider) || void 0 === i
                ? void 0
                : i.onAttached) &&
                (null === (s = this.paletteProvider) ||
                  void 0 === s ||
                  s.onAttached(this)),
              (this.scatterOpacityProperty =
                null !== (a = null == t ? void 0 : t.opacity) && void 0 !== a
                  ? a
                  : this.scatterOpacityProperty);
          }
          needsResampling(e) {
            return (
              !!this.dataSeries.fifoCapacity &&
              ((e.resamplingMode = s.EResamplingMode.None),
              this.resamplerHelper.resetAndFillBasicNativeArgs(
                e,
                this.getNativeXValues()
              ),
              !0)
            );
          }
          newHitTestProvider() {
            return new h.ScatterSeriesHitTestProvider(
              this,
              this.webAssemblyContext
            );
          }
          get opacity() {
            return this.scatterOpacityProperty;
          }
          set opacity(e) {
            (this.scatterOpacityProperty = e),
              this.notifyPropertyChanged(n.PROPERTY.OPACITY),
              this.pointMarker &&
                ((this.pointMarker.opacity = e),
                this.notifyPropertyChanged(n.PROPERTY.POINT_MARKER));
          }
        }
        t.XyScatterRenderableSeries = u;
      },
      20977: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).BRUSH_UP = "BRUSH_UP"),
          (i.BRUSH_DOWN = "BRUSH_DOWN"),
          (i.COLOR = "COLOR"),
          (i.COLOR_MAP = "COLOR_MAP"),
          (i.CONTOUR_DRAWING_MODE = "CONTOUR_DRAWING_MODE"),
          (i.CONTOUR_MINORS_PER_MAJOR = "CONTOUR_MINORS_PER_MAJOR"),
          (i.CONTOUR_MINOR_LINE_STYLE = "CONTOUR_MINOR_LINE_STYLE"),
          (i.CONTOUR_MAJOR_LINE_STYLE = "CONTOUR_MAJOR_LINE_STYLE"),
          (i.CONTOUR_COLOR_MAP_MODE = "CONTOUR_COLOR_MAP_MODE"),
          (i.CORNER_RADIUS = "CORNER_RADIUS"),
          (i.DATA_POINT_WIDTH = "dataPointWidth"),
          (i.DATA_POINT_WIDTH_MODE = "DATA_POINT_WIDTH_MODE"),
          (i.DATA_SERIES = "dataSeries"),
          (i.DRAWING_PROVIDERS = "DRAWING_PROVIDERS"),
          (i.DRAW_NAN_AS = "drawNaNAs"),
          (i.DRAW_CONNECTOR = "DRAW_CONNECTOR"),
          (i.DRAW_WHISKERS = "DRAW_WHISKERS"),
          (i.EFFECT = "EFFECT"),
          (i.ENABLE_DRAWING_OPTIMISATIONS = "ENABLE_DRAWING_OPTIMISATIONS"),
          (i.ERROR_DIRECTION = "ERROR_DIRECTION"),
          (i.ERROR_MODE = "ERROR_MODE"),
          (i.FILL = "fill"),
          (i.FILL_Y1 = "FILL_Y1"),
          (i.FILL_LINEAR_GRADIENT = "FILL_LINEAR_GRADIENT"),
          (i.FILL_LINEAR_GRADIENT_Y1 = "FILL_LINEAR_GRADIENT_Y1"),
          (i.FILL_VALUES_OUT_OF_RANGE = "FILL_VALUES_OUT_OF_RANGE"),
          (i.GRADIENT_STOPS = "GRADIENT_STOPS"),
          (i.HOVERED = "HOVERED"),
          (i.INTERPOLATION_POINTS = "INTERPOLATION_POINTS"),
          (i.IS_DIGITAL_LINE = "IS_DIGITAL_LINE"),
          (i.IS_ONE_HUNDRED_PERCENT = "IS_ONE_HUNDRED_PERCENT"),
          (i.IS_SELECTED = "IS_SELECTED"),
          (i.IS_VISIBLE = "IS_VISIBLE"),
          (i.INTENSITY = "INTENSITY"),
          (i.LINE_TYPE = "LINE_TYPE"),
          (i.MAXIMUM = "MAXIMUM"),
          (i.MINIMUM = "MINIMUM"),
          (i.OFFSET = "OFFSET"),
          (i.OPACITY = "OPACITY"),
          (i.PALETTE_PROVIDER = "PALETTE_PROVIDER"),
          (i.PARENT_SURFACE = "PARENT_SURFACE"),
          (i.POINT_MARKER = "pointMarker"),
          (i.RANGE = "RANGE"),
          (i.RESAMPLING_MODE = "RESAMPLING_MODE"),
          (i.RESAMPLING_PRECISION = "RESAMPLING_PRECISION"),
          (i.SPACING = "SPACING"),
          (i.STACKED_GROUP_ID = "STACKED_GROUP_ID"),
          (i.STROKE = "STROKE"),
          (i.STROKE_Y1 = "STROKE_Y1"),
          (i.STROKE_DASH_ARRAY = "STROKE_DASH_ARRAY"),
          (i.STROKE_Y1_DASH_ARRAY = "STROKE_Y1_DASH_ARRAY"),
          (i.STROKE_DOWN = "STROKE_DOWN"),
          (i.STROKE_UP = "STROKE_UP"),
          (i.STROKE_THICKNESS = "STROKE_THICKNESS"),
          (i.USE_LINEAR_TEXTURE_FILTERING = "USE_LINEAR_TEXTURE_FILTERING"),
          (i.XAXIS_ID = "XAXIS_ID"),
          (i.YAXIS_ID = "YAXIS_ID"),
          (i.ZERO_LINE_Y = "ZERO_LINE_Y"),
          (i.Z_STEP = "Z_STEP"),
          (i.Z_MAX = "Z_MAX"),
          (i.Z_MIN = "Z_MIN"),
          (i.Z_MULTIPLIER = "Z_MULTIPLIER"),
          (i.Z_LABEL_PROVIDER = "Z_LABEL_PROVIDER"),
          (i.SERIES_TEXT_PROVIDER = "SERIES_TEXT_PROVIDER"),
          (i.CLIPTOYRANGE = "CLIPTOYRANGE"),
          (i.YRANGEMODE = "YRANGEMODE");
      },
      90182: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.RubberBandSvgRect = void 0);
        const r = i(55023),
          s = i(86572);
        class o extends r.DeletableEntity {
          constructor(e, t, i, r) {
            super(),
              (this.svgTemplate = a),
              (this.x1Property = 0),
              (this.x2Property = 0),
              (this.y1Property = 0),
              (this.y2Property = 0),
              (this.isHiddenProperty = !0),
              (this.svgRoot = e),
              this.create(t, i, r);
          }
          get x1() {
            return this.x1Property;
          }
          set x1(e) {
            (this.x1Property = e), this.notifyPropertyChanged(s.PROPERTY.X1);
          }
          get x2() {
            return this.x2Property;
          }
          set x2(e) {
            (this.x2Property = e), this.notifyPropertyChanged(s.PROPERTY.X2);
          }
          get y1() {
            return this.y1Property;
          }
          set y1(e) {
            (this.y1Property = e), this.notifyPropertyChanged(s.PROPERTY.Y1);
          }
          get y2() {
            return this.y2Property;
          }
          set y2(e) {
            (this.y2Property = e), this.notifyPropertyChanged(s.PROPERTY.Y2);
          }
          get isHidden() {
            return this.isHiddenProperty;
          }
          set isHidden(e) {
            (this.isHiddenProperty = e),
              this.notifyPropertyChanged(s.PROPERTY.IS_HIDDEN);
          }
          clear() {
            this.svgRoot.removeChild(this.svg);
          }
          delete() {
            this.clear();
          }
          create(e, t, i) {
            if ((this.svg && this.clear(), this.svgRoot)) {
              const r = this.svgTemplate(e, t, i, 0, 0);
              this.svgRoot.appendChild(r),
                (this.svg = r),
                this.svg.setAttribute("x", "100px"),
                this.svg.setAttribute("y", "100px");
            }
          }
          update(e) {
            if (this.svgRoot) {
              if (
                (e === s.PROPERTY.IS_HIDDEN &&
                  (this.svg.style.display = this.isHidden ? "none" : "block"),
                e === s.PROPERTY.X1 || e === s.PROPERTY.X2)
              ) {
                const e = Math.abs(this.x2 - this.x1);
                this.svg.setAttribute("x", this.x1.toString()),
                  this.svg.setAttribute("width", `${e}px`);
              }
              if (e === s.PROPERTY.Y1 || e === s.PROPERTY.Y2) {
                const e = Math.abs(this.y2 - this.y1);
                this.svg.setAttribute("y", this.y1.toString()),
                  this.svg.setAttribute("height", `${e}px`);
              }
            }
          }
          notifyPropertyChanged(e) {
            this.update(e);
          }
        }
        t.RubberBandSvgRect = o;
        const a = (e, t, i, r = 0, s = 0) => {
          const o = "http://www.w3.org/2000/svg",
            a = document.createElementNS(o, "svg");
          a.setAttributeNS(null, "width", r.toString()),
            a.setAttributeNS(null, "height", s.toString()),
            (a.style.display = "none");
          const n = document.createElementNS(o, "rect");
          return (
            a.appendChild(n),
            n.setAttributeNS(null, "width", "100%"),
            n.setAttributeNS(null, "height", "100%"),
            n.setAttributeNS(null, "fill", e),
            n.setAttributeNS(null, "stroke", t),
            n.setAttributeNS(null, "stroke-width", i.toString()),
            a
          );
        };
      },
      86572: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).IS_HIDDEN = "IS_HIDDEN"),
          (i.X1 = "X1"),
          (i.X2 = "X2"),
          (i.Y1 = "Y1"),
          (i.Y2 = "Y2");
      },
      85479: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartDefaults = void 0);
        const r = i(24149);
        class s {}
        (t.SciChartDefaults = s),
          (s.asyncLabels = !1),
          (s.useSharedCache = !1),
          (s.enableResampling = !0),
          (s.performanceWarnings = !0),
          (s.useNativeText = !1),
          (s.nativeFontTimeout = 2e3),
          (s.watermarkPosition = r.EWatermarkPosition.BottomLeft),
          (s.watermarkRelativeToCanvas = !1),
          (s.wasmBufferSizesKb = 8192),
          (s.createSuspended = !1);
      },
      36544: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartOverview = void 0);
        const s = i(12193),
          o = i(55023),
          a = i(98140),
          n = i(12785),
          l = i(2192),
          d = i(55526),
          h = i(57397),
          u = i(59516),
          c = i(51392),
          p = i(54948),
          g = i(84626);
        class y extends o.DeletableEntity {
          constructor(e, t, i, r, s, o) {
            super(),
              (this.overviewXAxisProperty = s),
              (this.overviewYAxisProperty = o),
              (this.rangeSelectionModifierProperty = r),
              (this.parentSciChartSurfaceProperty = e),
              (this.overviewSciChartSurfaceProperty = t),
              (this.overviewWasmContext = i);
          }
          static create(e, t, i) {
            return r(this, void 0, void 0, function* () {
              const {
                sciChartSurface: r,
                wasmContext: s,
                rangeSelectionModifier: o,
                xAxis: a,
                yAxis: n,
              } = yield f(e, t, i);
              return new y(e, r, s, o, a, n);
            });
          }
          get overviewSciChartSurface() {
            return this.overviewSciChartSurfaceProperty;
          }
          get parentSciChartSurface() {
            return this.parentSciChartSurfaceProperty;
          }
          get rangeSelectionModifier() {
            return this.rangeSelectionModifierProperty;
          }
          get overviewXAxis() {
            return this.overviewXAxisProperty;
          }
          get overviewYAxis() {
            return this.overviewYAxisProperty;
          }
          applyTheme(e) {
            this.overviewSciChartSurface.applyTheme(e);
          }
          delete() {
            this.overviewSciChartSurface &&
              !this.overviewSciChartSurface.isDeleted &&
              this.overviewSciChartSurface.delete(),
              (this.overviewWasmContext = void 0);
          }
        }
        t.SciChartOverview = y;
        const f = (e, t, i) =>
          r(void 0, void 0, void 0, function* () {
            var r, o, y, f;
            const { wasmContext: v, sciChartSurface: m } =
                yield g.SciChartSurface.create(t, i),
              S =
                null !== (r = null == i ? void 0 : i.mainAxisId) && void 0 !== r
                  ? r
                  : h.AxisBase2D.DEFAULT_AXIS_ID,
              P =
                null !== (o = null == i ? void 0 : i.secondaryAxisId) &&
                void 0 !== o
                  ? o
                  : h.AxisBase2D.DEFAULT_AXIS_ID,
              C = e.getXAxisById(S),
              x = e.getYAxisById(P);
            if (!C)
              throw new Error(
                `Could not find a main axis with id ${S}.` +
                  ((null == i ? void 0 : i.mainAxisId)
                    ? ""
                    : "Please specify mainAxisId in the options")
              );
            if (!C)
              throw new Error(
                `Could not find a secondary axis with id ${P}.` +
                  ((null == i ? void 0 : i.secondaryAxisId)
                    ? ""
                    : "Please specify secondaryAxisId in the options")
              );
            const b = C.isXAxis ? C : x,
              A = C.isXAxis ? x : C,
              T = Object.assign(
                {
                  axisAlignment: b.axisAlignment,
                  isVisible: !1,
                  autoRange: n.EAutoRange.Always,
                  visibleRange: b.visibleRange,
                },
                null == i ? void 0 : i.overviewXAxisOptions
              ),
              E = Object.assign(
                {
                  axisAlignment: A.axisAlignment,
                  isVisible: !1,
                  autoRange: n.EAutoRange.Always,
                  visibleRange: A.visibleRange,
                },
                null == i ? void 0 : i.overviewYAxisOptions
              ),
              R = b.isCategoryAxis
                ? new u.CategoryAxis(v, T)
                : b.type === l.EAxisType.LogarithmicAxis
                ? new c.LogarithmicAxis(v, T)
                : new p.NumericAxis(v, T),
              w = A.isCategoryAxis
                ? new u.CategoryAxis(v, E)
                : b.type === l.EAxisType.LogarithmicAxis
                ? new c.LogarithmicAxis(v, E)
                : new p.NumericAxis(v, E),
              D = C.isXAxis ? R : w,
              L = e.renderableSeries
                .asArray()
                .map(
                  null !==
                    (y = null == i ? void 0 : i.transformRenderableSeries) &&
                    void 0 !== y
                    ? y
                    : (e) => {
                        if (e.xAxisId !== b.id || e.yAxisId !== A.id) return;
                        const [t] = (0, s.buildSeries)(v, e.toJSON(!0));
                        return (
                          t.dataSeries.delete(),
                          (t.dataSeries = e.dataSeries),
                          (t.xAxisId = R.id),
                          (t.yAxisId = w.id),
                          t
                        );
                      }
                )
                .filter((e) => e);
            m.xAxes.add(R),
              m.yAxes.add(w),
              m.renderableSeries.add(...L),
              m.zoomExtents();
            const M =
              null !==
                (f = null == i ? void 0 : i.customRangeSelectionModifier) &&
              void 0 !== f
                ? f
                : new d.OverviewRangeSelectionModifier();
            return (
              (M.xAxisId = R.id),
              (M.yAxisId = w.id),
              (M.onSelectedAreaChanged = (e) => {
                e.equals(C.visibleRange) || (C.visibleRange = e);
              }),
              (M.selectedArea = new a.NumberRange(
                Math.max(R.visibleRange.min, C.visibleRange.min),
                Math.min(R.visibleRange.max, C.visibleRange.max)
              )),
              m.chartModifiers.add(M),
              void 0 !==
                (null == i ? void 0 : i.rangeSelectionAnnotationSvgString) &&
                (M.rangeSelectionAnnotation.svgString =
                  i.rangeSelectionAnnotationSvgString),
              R.visibleRangeChanged.subscribe(({ visibleRange: e }) => {
                const t = C.visibleRange.clip(e);
                M.selectedArea = t;
              }),
              C.visibleRangeChanged.subscribe(({ visibleRange: e }) => {
                const t = e.clip(D.visibleRange);
                !t.equals(M.selectedArea) && (M.selectedArea = t);
              }),
              {
                sciChartSurface: m,
                xAxis: R,
                yAxis: w,
                rangeSelectionModifier: M,
                wasmContext: v,
              }
            );
          });
      },
      57419: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PieSegment = void 0);
        const r = i(45921),
          s = i(75772),
          o = i(11043),
          a = i(73538),
          n = i(92596),
          l = i(79423);
        t.PieSegment = class {
          constructor(e) {
            var t, i, n, l, d, h, u, c, p, g;
            (this.colorProperty = "grey"),
              (this.isSelectedProperty = !1),
              (this.textProperty = ""),
              (this.deltaProperty = 15),
              (this.shiftProperty = 0),
              (this.labelOffsetProperty = new s.Point(0, 0)),
              (this.radiusAdjustmentProperty = 1),
              (this.id =
                null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                  ? t
                  : (0, a.generateGuid)()),
              (this.colorProperty =
                null !== (i = null == e ? void 0 : e.color) && void 0 !== i
                  ? i
                  : this.colorProperty),
              (this.colorLinearGradientProperty =
                null !== (n = null == e ? void 0 : e.colorLinearGradient) &&
                void 0 !== n
                  ? n
                  : this.colorLinearGradientProperty),
              (this.isSelectedProperty =
                null !== (l = null == e ? void 0 : e.isSelected) && void 0 !== l
                  ? l
                  : this.isSelectedProperty),
              (this.textProperty =
                null !== (d = null == e ? void 0 : e.text) && void 0 !== d
                  ? d
                  : this.textProperty),
              (this.valueProperty =
                null !== (h = null == e ? void 0 : e.value) && void 0 !== h
                  ? h
                  : this.valueProperty),
              (this.deltaProperty =
                null !== (u = null == e ? void 0 : e.delta) && void 0 !== u
                  ? u
                  : this.deltaProperty),
              (this.showLabelProperty =
                null === (c = null == e ? void 0 : e.showLabel) ||
                void 0 === c ||
                c),
              (null == e ? void 0 : e.labelProvider) &&
                ("getSegmentText" in (null == e ? void 0 : e.labelProvider) ||
                  (e.labelProvider = (0, r.createType)(
                    o.EBaseType.LabelProvider,
                    e.labelProvider.type,
                    void 0,
                    e.labelProvider.options
                  ))),
              (this.labelProviderProperty =
                null == e ? void 0 : e.labelProvider),
              (this.labelOffsetProperty =
                null !== (p = null == e ? void 0 : e.labelOffset) &&
                void 0 !== p
                  ? p
                  : this.labelOffsetProperty),
              (this.labelStyleProperty = null == e ? void 0 : e.labelStyle),
              (this.radiusAdjustmentProperty =
                null !== (g = null == e ? void 0 : e.radiusAdjustment) &&
                void 0 !== g
                  ? g
                  : this.radiusAdjustmentProperty);
          }
          onAttach(e) {
            (this.parentSurface = e),
              this.labelProviderProperty &&
                this.labelProviderProperty.attachedToSurface(e),
              (this.invalidateParentCallback = e.invalidateElement);
          }
          onDetach() {
            this.invalidateParentCallback = void 0;
          }
          get showLabel() {
            return this.showLabelProperty;
          }
          set showLabel(e) {
            (this.showLabelProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.SHOW_LABEL);
          }
          get colorLinearGradient() {
            return this.colorLinearGradientProperty;
          }
          set colorLinearGradient(e) {
            (this.colorLinearGradientProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.COLOR_LINEAR_GRADIENT);
          }
          get color() {
            return this.colorProperty;
          }
          set color(e) {
            (this.colorProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.COLOR);
          }
          get isSelected() {
            return this.isSelectedProperty;
          }
          set isSelected(e) {
            this.isSelectedProperty !== e &&
              ((this.isSelectedProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.IS_SELECTED));
          }
          get text() {
            return this.textProperty;
          }
          set text(e) {
            (this.textProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.TEXT);
          }
          get labelProvider() {
            return (
              void 0 === this.labelProviderProperty &&
                (this.labelProvider = new n.PieLabelProvider()),
              this.labelProviderProperty
            );
          }
          set labelProvider(e) {
            (this.labelProviderProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.LABEL_PROVIDER);
          }
          getPercentage(e) {
            return (100 * this.value) / e;
          }
          get value() {
            return this.valueProperty;
          }
          set value(e) {
            (this.oldValueProperty = this.valueProperty),
              (this.valueProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.VALUE);
          }
          get oldValue() {
            return this.oldValueProperty;
          }
          get delta() {
            return this.deltaProperty;
          }
          set delta(e) {
            this.deltaProperty !== e &&
              ((this.deltaProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.DELTA));
          }
          get shift() {
            return this.shiftProperty;
          }
          set shift(e) {
            this.shiftProperty !== e &&
              ((this.shiftProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.SHIFT));
          }
          get labelStyle() {
            var e;
            return Object.assign(
              Object.assign(
                {},
                null === (e = this.parentSurface) || void 0 === e
                  ? void 0
                  : e.labelStyle
              ),
              this.labelStyleProperty
            );
          }
          set labelStyle(e) {
            (this.labelStyleProperty = Object.assign(
              Object.assign({}, this.labelStyleProperty),
              e
            )),
              this.notifyPropertyChanged(l.PROPERTY.LABEL_STYLE);
          }
          get labelOffset() {
            return this.labelOffsetProperty;
          }
          set labelOffset(e) {
            var t, i;
            (null === (t = this.labelOffsetProperty) || void 0 === t
              ? void 0
              : t.x) !== e.x &&
              (null === (i = this.labelOffsetProperty) || void 0 === i
                ? void 0
                : i.y) !== e.y &&
              ((this.labelOffsetProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.LABEL_OFFSET));
          }
          get radiusAdjustment() {
            return this.radiusAdjustmentProperty;
          }
          set radiusAdjustment(e) {
            (this.radiusAdjustmentProperty = e),
              this.notifyPropertyChanged(l.PROPERTY.RADIUS_ADJUSTMENT);
          }
          toJSON() {
            var e;
            return {
              id: this.id,
              color: this.color,
              colorLinearGradient: this.colorLinearGradient,
              isSelected: this.isSelected,
              delta: this.delta,
              text: this.text,
              value: this.value,
              labelProvider:
                null === (e = this.labelProviderProperty) || void 0 === e
                  ? void 0
                  : e.toJSON(),
              labelOffset: this.labelOffset,
              labelStyle: this.labelStyle,
              radiusAdjustment: this.radiusAdjustment,
            };
          }
          getLabelText(e) {
            return this.labelProviderProperty
              ? this.labelProvider.getSegmentText(this, e)
              : this.parentSurface.labelProvider.getSegmentText(this, e);
          }
          notifyPropertyChanged(e) {
            e === l.PROPERTY.LABEL_PROVIDER &&
              this.labelProviderProperty &&
              this.labelProviderProperty.attachedToSurface(this.parentSurface),
              this.invalidateParentCallback && this.invalidateParentCallback(e);
          }
        };
      },
      79423: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).COLOR = "COLOR"),
          (i.COLOR_LINEAR_GRADIENT = "COLOR_LINEAR_GRADIENT"),
          (i.DELTA = "DELTA"),
          (i.IS_SELECTED = "IS_SELECTED"),
          (i.PERCENTAGE = "PERCENTAGE"),
          (i.TEXT = "TEXT"),
          (i.VALUE = "VALUE"),
          (i.SHIFT = "SHIFT"),
          (i.LABEL_PROVIDER = "LABEL_PROVIDER"),
          (i.LABEL_STYLE = "LABEL_STYLE"),
          (i.LABEL_OFFSET = "LABEL_OFFSET"),
          (i.RADIUS_ADJUSTMENT = "RADIUS_ADJUSTMENT"),
          (i.SHOW_LABEL = "SHOW_LABEL");
      },
      79548: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.addEventListenerToPieSegment =
            t.SciChartPieSurface =
            t.EPieValueMode =
            t.EPieType =
            t.ESizingMode =
              void 0);
        const r = i(58996),
          s = i(45921),
          o = i(84745),
          a = i(10276),
          n = i(55023),
          l = i(56744),
          d = i(3214),
          h = i(99263),
          u = i(37796),
          c = i(87459),
          p = i(11043),
          g = i(91465),
          y = i(73538),
          f = i(99016),
          v = i(92415),
          m = i(92596),
          S = i(28243),
          P = i(25606),
          C = i(14184),
          x = i(86127),
          b = i(6340),
          A = i(79423),
          T = Math.PI / 180;
        var E, R, w;
        !(function (e) {
          (e.Absolute = "Absolute"), (e.Relative = "Relative");
        })((E = t.ESizingMode || (t.ESizingMode = {}))),
          (function (e) {
            (e.Pie = "Pie"), (e.Donut = "Donut");
          })((R = t.EPieType || (t.EPieType = {}))),
          (function (e) {
            (e[(e.Percentage = 0)] = "Percentage"), (e[(e.Raw = 1)] = "Raw");
          })((w = t.EPieValueMode || (t.EPieValueMode = {})));
        class D extends n.DeletableEntity {
          constructor(e = {}, t) {
            var i, r, o, a, n, l, h, g, v, b, A, T, D, L, M, I;
            super(),
              (this.animate = !0),
              (this.animationFrames = 30),
              (this.rendered = new d.EventHandler()),
              (this.pieTypeProperty = R.Pie),
              (this.holeRadiusProperty = 0.5),
              (this.holeRadiusSizingModeProperty = E.Relative),
              (this.seriesSpacingProperty = 0),
              (this.labelRadiusProperty = 1),
              (this.titleDivs = []),
              (this.sweepAnimationDone = !1),
              (this.suspendUpdate = !1),
              (this.themeProviderProperty = new f.SciChartJSDarkTheme()),
              (this.previousThemeProviderProperty =
                new f.SciChartJSDarkTheme()),
              (this.deletables = []),
              (this.valueModeProperty = w.Percentage),
              (this.labelStyleProperty = {
                fontSize: 14,
                fontFamily: "Arial",
                color: "#1e323d",
                fontWeight: "bold",
              }),
              (this.id =
                null !== (i = null == t ? void 0 : t.id) && void 0 !== i
                  ? i
                  : (0, y.generateGuid)()),
              (this.domChartRoot = e.domChartRoot),
              (this.domCanvas2D = e.domCanvas2D),
              (this.domSvgContainer = e.domSvgContainer),
              (this.domSvgAdornerLayer = e.domSvgAdornerLayer),
              (this.domDivContainer = e.domDivContainer);
            const O = this.domCanvas2D.width / x.DpiHelper.PIXEL_RATIO,
              k = this.domCanvas2D.height / x.DpiHelper.PIXEL_RATIO;
            (this.viewRect = new c.Rect(0, 0, O, k)),
              (this.resizeSubscriptionToken = P.default.subscribeToResize(
                e.domCanvas2D,
                e.aspect,
                this
              )),
              (this.drawChart = this.drawChart.bind(this)),
              (this.deleteInternals = this.deleteInternals.bind(this)),
              (this.invalidateElement = this.invalidateElement.bind(this)),
              (this.detachPieSegment = this.detachPieSegment.bind(this)),
              (this.attachPieSegment = this.attachPieSegment.bind(this)),
              (this.pieSegments = new u.ObservableArray()),
              this.pieSegments.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach(this.detachPieSegment),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach(this.attachPieSegment),
                  this.invalidateElement();
              }),
              this.applySciChartBackground(
                C.SciChartSurfaceBase.DEFAULT_THEME.sciChartBackground
              ),
              (this.legend = new S.SciChartPieLegend()),
              this.legend.setRootDiv(this.domDivContainer),
              this.legend.setPieSegmentArray(this.pieSegments.asArray()),
              this.legend.setInvalidateParentSurface(this.invalidateElement),
              this.legend.setParentSurface(this),
              (this.heightAspect =
                null !== (r = null == t ? void 0 : t.heightAspect) &&
                void 0 !== r
                  ? r
                  : 0),
              (this.widthAspect =
                null !== (o = null == t ? void 0 : t.widthAspect) &&
                void 0 !== o
                  ? o
                  : 0),
              (this.pieTypeProperty =
                null !== (a = null == t ? void 0 : t.pieType) && void 0 !== a
                  ? a
                  : this.pieType),
              (this.holeRadiusProperty =
                null !== (n = null == t ? void 0 : t.holeRadius) && void 0 !== n
                  ? n
                  : this.holeRadius),
              (this.animate =
                null !== (l = null == t ? void 0 : t.animate) && void 0 !== l
                  ? l
                  : this.animate),
              (this.holeRadiusSizingModeProperty =
                null !== (h = null == t ? void 0 : t.holeRadiusSizingMode) &&
                void 0 !== h
                  ? h
                  : this.holeRadiusSizingModeProperty),
              (this.seriesSpacingProperty =
                null !== (g = null == t ? void 0 : t.seriesSpacing) &&
                void 0 !== g
                  ? g
                  : this.seriesSpacingProperty),
              (this.labelRadiusProperty =
                null !== (v = null == t ? void 0 : t.labelRadiusAdjustment) &&
                void 0 !== v
                  ? v
                  : this.labelRadiusProperty),
              (this.legend.showLegend =
                null !== (b = null == t ? void 0 : t.showLegend) && void 0 !== b
                  ? b
                  : this.legend.showLegend),
              (this.legend.animate =
                null !== (A = null == t ? void 0 : t.animateLegend) &&
                void 0 !== A
                  ? A
                  : this.legend.animate),
              (this.legend.showCheckboxes =
                null !== (T = null == t ? void 0 : t.showLegendCheckBoxes) &&
                void 0 !== T
                  ? T
                  : this.legend.showCheckboxes),
              (this.legend.showSeriesMarkers =
                null !== (D = null == t ? void 0 : t.showLegendSeriesMarkers) &&
                void 0 !== D
                  ? D
                  : this.legend.showSeriesMarkers),
              (this.paddingProperty =
                null !== (L = null == t ? void 0 : t.padding) && void 0 !== L
                  ? L
                  : this.paddingProperty),
              (null == t ? void 0 : t.labelProvider) &&
                ("getSegmentText" in (null == t ? void 0 : t.labelProvider) ||
                  (t.labelProvider = (0, s.createType)(
                    p.EBaseType.LabelProvider,
                    t.labelProvider.type,
                    void 0,
                    t.labelProvider.options
                  ))),
              (this.labelProvider =
                null !== (M = null == t ? void 0 : t.labelProvider) &&
                void 0 !== M
                  ? M
                  : new m.PieLabelProvider()),
              (this.valueModeProperty =
                null !== (I = null == t ? void 0 : t.valueMode) && void 0 !== I
                  ? I
                  : this.valueModeProperty);
          }
          static create(e, t) {
            var i, s;
            (0, r.ensureRegistrations)();
            const o = P.default.initCanvas(
              e,
              null !== (i = null == t ? void 0 : t.widthAspect) && void 0 !== i
                ? i
                : 0,
              null !== (s = null == t ? void 0 : t.heightAspect) && void 0 !== s
                ? s
                : 0,
              P.default.ECanvasType.svg,
              void 0,
              null == t ? void 0 : t.touchAction
            );
            return new Promise((e) => {
              var i, r, s;
              [
                ...h.sciChartDestinations,
                ...h.sciChart3DDestinations,
                ...h.sciChartSingleDestinations,
                ...h.sciChartPieDestinations,
              ]
                .filter(
                  (e) => e.sciChartSurface.domChartRoot.id === o.domChartRoot.id
                )
                .forEach((e) => e.sciChartSurface.delete()),
                (t = C.SciChartSurfaceBase.resolveOptions(t));
              const a = new D(o, t);
              a.applyTheme(null == t ? void 0 : t.theme),
                h.sciChartPieDestinations.push({
                  canvasElementId:
                    null === (i = o.domCanvas2D) || void 0 === i
                      ? void 0
                      : i.id,
                  sciChartSurface: a,
                  width:
                    null === (r = o.domCanvas2D) || void 0 === r
                      ? void 0
                      : r.width,
                  height:
                    null === (s = o.domCanvas2D) || void 0 === s
                      ? void 0
                      : s.height,
                }),
                a.setDestinations(h.sciChartPieDestinations),
                setTimeout(() => e(a), 0);
            });
          }
          get isDeleted() {
            return this.isDeletedProperty;
          }
          get labelProvider() {
            return this.labelProviderProperty;
          }
          set labelProvider(e) {
            e &&
              this.labelProviderProperty !== e &&
              ((this.labelProviderProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.LABEL_PROVIDER));
          }
          get labelStyle() {
            return this.labelStyleProperty;
          }
          set labelStyle(e) {
            (this.labelStyleProperty = Object.assign(
              Object.assign({}, this.labelStyle),
              e
            )),
              this.notifyPropertyChanged(b.PROPERTY.TEXT_STYLE);
          }
          applyTheme(e) {
            (this.previousThemeProviderProperty = this.themeProviderProperty),
              (this.themeProviderProperty = e),
              this.applySciChartBackground(e.sciChartBackground),
              this.labelStyle.color ===
                this.previousThemeProvider.tickTextBrush &&
                (this.labelStyle = { color: e.tickTextBrush }),
              this.invalidateElement();
          }
          get themeProvider() {
            return this.themeProviderProperty;
          }
          get previousThemeProvider() {
            return this.previousThemeProviderProperty;
          }
          setDestinations(e) {
            this.destinations = e;
          }
          get otherSurfaces() {
            return this.destinations
              ? this.destinations
                  .map((e) => e.sciChartSurface)
                  .filter((e) => e !== this)
              : [];
          }
          invalidateElement(e) {
            this.isValidToDraw() &&
              ("string" == typeof e &&
                e === A.PROPERTY.VALUE &&
                (this.sweepAnimationDone = !1),
              this.update());
          }
          update() {
            var e;
            this.suspendUpdate ||
              (this.draw(),
              null === (e = this.legend) || void 0 === e || e.update());
          }
          delete() {
            var e;
            this.deleteInternals(),
              (this.legend = (0, l.deleteSafe)(this.legend)),
              (this.labelProvider = (0, l.deleteSafe)(this.labelProvider)),
              (this.resizeSubscriptionToken = (0, l.deleteSafe)(
                this.resizeSubscriptionToken
              ));
            const t =
              null === (e = this.destinations) || void 0 === e
                ? void 0
                : e.findIndex((e) => e.sciChartSurface.id === this.id);
            t >= 0 && this.destinations.splice(t, 1),
              (this.isDeletedProperty = !0);
          }
          deleteInternals(e) {
            this.svg &&
              (this.domSvgContainer.removeChild(this.svg), (this.svg = void 0)),
              e ||
                (this.titleDivs.forEach((e) => {
                  this.domDivContainer.removeChild(e);
                }),
                (this.titleDivs = []));
            for (const e of this.deletables) (0, l.deleteSafe)(e);
            this.deletables = [];
          }
          addDeletable(e) {
            this.deletables.push(e);
          }
          changeViewportSize(e, t) {
            const i = e,
              r = t;
            (this.viewRect = new c.Rect(0, 0, e, t)),
              this.changeDomViewportSize(i, r),
              this.invalidateElement();
          }
          get pieType() {
            return this.pieTypeProperty;
          }
          set pieType(e) {
            (this.pieTypeProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.PIE_TYPE);
          }
          get holeRadius() {
            return this.holeRadiusProperty;
          }
          set holeRadius(e) {
            (this.holeRadiusProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.HOLE_RADIUS);
          }
          get holeRadiusSizingMode() {
            return this.holeRadiusSizingModeProperty;
          }
          set holeRadiusSizingMode(e) {
            (this.holeRadiusSizingModeProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.HOLE_RADIUS_SIZING_MODE);
          }
          get padding() {
            return this.paddingProperty;
          }
          set padding(e) {
            this.paddingProperty !== e &&
              ((this.paddingProperty = e),
              this.updateLegendMargin(),
              this.notifyPropertyChanged(b.PROPERTY.PADDING));
          }
          get canvasBorder() {
            return this.canvasBorderProperty;
          }
          set canvasBorder(e) {
            this.canvasBorderProperty !== e &&
              ((this.canvasBorderProperty = e),
              this.updateLegendMargin(),
              this.notifyPropertyChanged(b.PROPERTY.PADDING));
          }
          get seriesSpacing() {
            return this.seriesSpacingProperty;
          }
          set seriesSpacing(e) {
            this.seriesSpacingProperty !== e &&
              ((this.seriesSpacingProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.SERIES_SPACING));
          }
          get valueMode() {
            return this.valueModeProperty;
          }
          set valueMode(e) {
            (this.valueModeProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.VALUE_MODE);
          }
          get labelRadiusAdjustment() {
            return this.labelRadiusProperty;
          }
          set labelRadiusAdjustment(e) {
            (this.labelRadiusProperty = e),
              this.notifyPropertyChanged(b.PROPERTY.VALUE_MODE);
          }
          toJSON(e = !1) {
            let t;
            t =
              "toJSON" in this.themeProvider
                ? this.themeProvider.toJSON()
                : this.themeProvider;
            const i = {
              surface: {
                animate: this.animate,
                animateLegend: this.legend.animate,
                heightAspect: this.heightAspect,
                widthAspect: this.widthAspect,
                holeRadius: this.holeRadius,
                holeRadiusSizingMode: this.holeRadiusSizingMode,
                pieType: this.pieType,
                showLegend: this.legend.showLegend,
                showLegendCheckBoxes: this.legend.showCheckboxes,
                showLegendSeriesMarkers: this.legend.showSeriesMarkers,
                padding: this.padding,
                canvasBorder: this.canvasBorder,
                seriesSpacing: this.seriesSpacing,
                labelProvider: this.labelProvider.toJSON(),
                valueMode: this.valueMode,
                labelRadiusAdjustment: this.labelRadiusAdjustment,
                animationFrames: this.animationFrames,
                theme: t,
              },
              onCreated: this.onCreatedName,
            };
            return (
              e ||
                (i.segments = this.pieSegments
                  .asArray()
                  .map((e) => e.toJSON())),
              { type: g.ESciChartSurfaceType.Pie2D, options: i }
            );
          }
          calcTitlePosition(e, t, i, r, s, o, a, n, l) {
            const d = r < i / 2 ? (2 * i) / 3 + r / 6 : (i + r) / 2,
              h = (s + o) / 2;
            return {
              left:
                e +
                Math.cos(T * h) * (d * this.labelRadiusProperty + a) -
                n / 2,
              top:
                t +
                Math.sin(T * h) * (d * this.labelRadiusProperty + a) -
                l / 2,
            };
          }
          changeDomViewportSize(e, t) {
            this.domSvgContainer &&
              (this.domSvgContainer.setAttribute("width", e.toString()),
              this.domSvgContainer.setAttribute("height", t.toString())),
              this.domSvgAdornerLayer &&
                (this.domSvgAdornerLayer.setAttribute("width", e.toString()),
                this.domSvgAdornerLayer.setAttribute("height", t.toString()));
          }
          notifyPropertyChanged(e) {
            this.invalidateElement(),
              e === b.PROPERTY.LABEL_PROVIDER &&
                this.labelProviderProperty &&
                this.labelProviderProperty.attachedToSurface(this);
          }
          isValidToDraw() {
            return !0;
          }
          detachPieSegment(e) {
            e.onDetach();
          }
          attachPieSegment(e) {
            e.onAttach(this);
          }
          updateLegendMargin() {
            var e, t, i;
            const r =
                (null === (e = this.padding) || void 0 === e
                  ? void 0
                  : e.top) || 0,
              s =
                (null === (t = this.canvasBorder) || void 0 === t
                  ? void 0
                  : t.border) ||
                (null === (i = this.canvasBorder) || void 0 === i
                  ? void 0
                  : i.borderTop) ||
                0;
            this.legend.margin = r + s + 10;
          }
          calculateViewRectWidth(e) {
            var t, i, r, s, o;
            return (
              (null === (t = this.padding) || void 0 === t ? void 0 : t.left) &&
                (e -= this.padding.left),
              (null === (i = this.padding) || void 0 === i
                ? void 0
                : i.right) && (e -= this.padding.right),
              (
                null === (r = this.canvasBorder) || void 0 === r
                  ? void 0
                  : r.border
              )
                ? (e -= 2 * this.canvasBorder.border)
                : ((null === (s = this.canvasBorder) || void 0 === s
                    ? void 0
                    : s.borderLeft) && (e -= this.canvasBorder.borderLeft),
                  (null === (o = this.canvasBorder) || void 0 === o
                    ? void 0
                    : o.borderRight) && (e -= this.canvasBorder.borderRight)),
              e
            );
          }
          calculateViewRectHeight(e) {
            var t, i, r, s, o;
            return (
              (null === (t = this.padding) || void 0 === t ? void 0 : t.top) &&
                (e -= this.padding.top),
              (null === (i = this.padding) || void 0 === i
                ? void 0
                : i.bottom) && (e -= this.padding.bottom),
              (
                null === (r = this.canvasBorder) || void 0 === r
                  ? void 0
                  : r.border
              )
                ? (e -= 2 * this.canvasBorder.border)
                : ((null === (s = this.canvasBorder) || void 0 === s
                    ? void 0
                    : s.borderTop) && (e -= this.canvasBorder.borderTop),
                  (null === (o = this.canvasBorder) || void 0 === o
                    ? void 0
                    : o.borderBottom) && (e -= this.canvasBorder.borderBottom)),
              e
            );
          }
          draw() {
            if (0 !== this.pieSegments.size()) {
              if (this.sweepAnimationDone || !this.animate)
                this.deleteInternals(), this.drawChart();
              else {
                const e = this.animationFrames;
                this.suspendUpdate = !0;
                const t = () => (this.suspendUpdate = !1),
                  i = () => (this.sweepAnimationDone = !0),
                  r = this.invalidateElement,
                  s = this.drawChart,
                  o = this.deleteInternals;
                !(function a(n) {
                  setTimeout(() => {
                    const l = n / e;
                    o(!0), s(l), n === e && (t(), i(), r()), ++n <= e && a(n);
                  }, 20);
                })(1);
              }
              o.IS_TEST_ENV ||
                this.pieSegments.asArray().forEach((e) => {
                  const i = this.domChartRoot.querySelector(`[id='${e.id}']`);
                  if (i) {
                    const r = (0, t.addEventListenerToPieSegment)(
                      e,
                      i,
                      this.animate
                    );
                    this.addDeletable(r);
                  }
                }),
                this.rendered.raiseEvent();
            }
          }
          drawChart(e = 1) {
            const t = this.pieSegmentsTotalValue();
            if (!t) return;
            const i = this.themeProviderProperty.sciChartBackground,
              r = this.pieSegments.asArray(),
              s = this.pieSegmentsTotalOldValue(),
              o =
                (0.8 *
                  Math.min(
                    this.calculateViewRectWidth(this.viewRect.width),
                    this.calculateViewRectHeight(this.viewRect.height)
                  )) /
                2;
            let n = 0;
            this.pieType === R.Donut &&
              (n =
                this.holeRadiusSizingMode === E.Absolute
                  ? this.holeRadius
                  : o * this.holeRadius);
            const l = this.calculateViewRectWidth(this.viewRect.width) / 2,
              d = this.calculateViewRectHeight(this.viewRect.height) / 2;
            let h = "<defs>",
              u = "",
              c = 0,
              p = 0;
            r.forEach((r, g) => {
              var y;
              if (0 === r.value) return;
              const f = null !== (y = r.oldValue) && void 0 !== y ? y : 0,
                v = (360 * c) / t - 90,
                m = (360 * (c + r.value)) / t - 90 - 1e-4,
                S = (360 * p) / s - 90,
                P = (360 * (p + f)) / s - 90;
              (c += r.value), (p += f);
              const C = S + (v - S) * a.easing.inOutCubic(e),
                x = P + (m - P) * a.easing.inOutCubic(e),
                b = !!r.colorLinearGradient,
                A = `grad${r.id}`;
              if (b) {
                let e = `<linearGradient id="${A}" x1="${
                  100 * r.colorLinearGradient.startPoint.x
                }%" y1="${100 * r.colorLinearGradient.startPoint.y}%" x2="${
                  100 * r.colorLinearGradient.endPoint.x
                }%" y2="${100 * r.colorLinearGradient.endPoint.y}%">`;
                r.colorLinearGradient.gradientStops.forEach((t) => {
                  const i = 100 * t.offset;
                  e += `<stop offset="${i}%" style="stop-color:${t.color};stop-opacity:1" />`;
                }),
                  (e += "</linearGradient>"),
                  (h += e);
              }
              const T =
                  this.pieType === R.Donut
                    ? M(
                        l,
                        d,
                        o * r.radiusAdjustment,
                        n,
                        C,
                        x,
                        r.shift + this.seriesSpacing
                      )
                    : L(
                        l,
                        d,
                        o * r.radiusAdjustment,
                        C,
                        x,
                        r.shift + this.seriesSpacing
                      ),
                E = b
                  ? `<g fill="url(#${A})"><path id="${r.id}" stroke="${i}" stroke-width="2" d="${T}" /></g>`
                  : `<path id="${r.id}" stroke="${i}" stroke-width="2" d="${T}" fill="${r.color}" />`;
              (u += E),
                (1 === e || r.oldValue) &&
                  this.drawSegmentLabel(
                    r,
                    g,
                    t,
                    C,
                    x,
                    l,
                    d,
                    o * r.radiusAdjustment,
                    n
                  );
            }),
              (h += "</defs>"),
              this.adjustDomContainer();
            const g = `<svg width="${this.calculateViewRectWidth(
                this.viewRect.width
              )}" height="${this.calculateViewRectHeight(
                this.viewRect.height
              )}">${h}${u}</svg>`,
              y = v.annotationHelpers.createSvg(g, this.domSvgContainer);
            this.svg = y;
          }
          adjustDomContainer() {
            var e, t, i, r, s, o;
            this.padding &&
              this.padding.left &&
              (this.domSvgContainer.style.paddingLeft =
                this.padding.left + "px"),
              this.padding &&
                this.padding.right &&
                (this.domSvgContainer.style.paddingRight =
                  this.padding.right + "px"),
              this.padding &&
                this.padding.top &&
                (this.domSvgContainer.style.paddingTop =
                  this.padding.top + "px"),
              this.padding &&
                this.padding.bottom &&
                (this.domSvgContainer.style.paddingBottom =
                  this.padding.bottom + "px"),
              this.canvasBorder &&
                (this.domSvgContainer.style.borderStyle = "solid"),
              (null === (e = this.canvasBorder) || void 0 === e
                ? void 0
                : e.border) &&
                (this.domSvgContainer.style.borderWidth =
                  this.canvasBorder.border + "px"),
              (null === (t = this.canvasBorder) || void 0 === t
                ? void 0
                : t.color) &&
                (this.domSvgContainer.style.borderColor =
                  this.canvasBorder.color),
              (null === (i = this.canvasBorder) || void 0 === i
                ? void 0
                : i.borderBottom) &&
                (this.domSvgContainer.style.borderBottomWidth =
                  this.canvasBorder.borderBottom + "px"),
              (null === (r = this.canvasBorder) || void 0 === r
                ? void 0
                : r.borderTop) &&
                (this.domSvgContainer.style.borderTopWidth =
                  this.canvasBorder.borderTop + "px"),
              (null === (s = this.canvasBorder) || void 0 === s
                ? void 0
                : s.borderLeft) &&
                (this.domSvgContainer.style.borderLeftWidth =
                  this.canvasBorder.borderLeft + "px"),
              (null === (o = this.canvasBorder) || void 0 === o
                ? void 0
                : o.borderRight) &&
                (this.domSvgContainer.style.borderRightWidth =
                  this.canvasBorder.borderRight + "px");
          }
          drawSegmentLabel(e, t, i, r, s, o, a, n, l) {
            var d, h, u, c, p, g, y, f, v, m, S;
            if (!1 === e.showLabel) return;
            const P = "segment" + t;
            let C = this.titleDivs.find((e) => e.id === P);
            C ||
              ((C = document.createElement("div")),
              e.labelStyle,
              (C.className = "scichart-pie-text-container"),
              (C.id = P),
              (C.style.position = "absolute"),
              (C.style.pointerEvents = "none"),
              (C.style.padding = "5px"),
              (C.style.borderRadius = "3px"),
              this.titleDivs.push(C),
              this.domDivContainer.appendChild(C),
              (C.style.display = "block")),
              (C.style.color = e.labelStyle.color),
              (C.style.fontWeight = e.labelStyle.fontWeight),
              (C.style.fontFamily = e.labelStyle.fontFamily),
              (C.style.fontSize = e.labelStyle.fontSize.toString() + "px"),
              (C.innerHTML = e.getLabelText(i));
            const x = C.offsetWidth,
              b = C.offsetHeight;
            let A = 0,
              T = 0;
            (null === (d = this.padding) || void 0 === d ? void 0 : d.left) &&
              (A +=
                null === (h = this.padding) || void 0 === h ? void 0 : h.left),
              (null === (u = this.padding) || void 0 === u ? void 0 : u.top) &&
                (T +=
                  null === (c = this.padding) || void 0 === c ? void 0 : c.top),
              (
                null === (p = this.canvasBorder) || void 0 === p
                  ? void 0
                  : p.border
              )
                ? ((A +=
                    null === (g = this.canvasBorder) || void 0 === g
                      ? void 0
                      : g.border),
                  (T +=
                    null === (y = this.canvasBorder) || void 0 === y
                      ? void 0
                      : y.border))
                : ((null === (f = this.canvasBorder) || void 0 === f
                    ? void 0
                    : f.borderLeft) &&
                    (A +=
                      null === (v = this.canvasBorder) || void 0 === v
                        ? void 0
                        : v.borderLeft),
                  (null === (m = this.canvasBorder) || void 0 === m
                    ? void 0
                    : m.borderTop) &&
                    (A +=
                      null === (S = this.canvasBorder) || void 0 === S
                        ? void 0
                        : S.borderTop));
            const E = this.calcTitlePosition(
              o + A,
              a + T,
              n,
              l,
              r,
              s,
              e.shift + this.seriesSpacing,
              x,
              b
            );
            (C.style.left = `${E.left + e.labelOffset.x}px`),
              (C.style.top = `${E.top + e.labelOffset.y}px`);
          }
          pieSegmentsTotalValue() {
            return this.pieSegments.asArray().reduce((e, t) => e + t.value, 0);
          }
          pieSegmentsTotalOldValue() {
            const e = this.pieSegments.asArray().reduce((e, t) => {
              var i;
              return e + (null !== (i = t.oldValue) && void 0 !== i ? i : 0);
            }, 0);
            return e > 0 ? e : 1;
          }
          applySciChartBackground(e) {
            this.domCanvas2D.style.background = e;
          }
        }
        t.SciChartPieSurface = D;
        const L = (e, t, i, r, s, o) => {
            const a = Math.abs(s - r) > 180 ? 1 : 0,
              n = (r + s) / 2,
              l = Math.cos(T * n) * o,
              d = Math.sin(T * n) * o,
              h = Math.cos(T * s) * i + e + l,
              u = Math.sin(T * s) * i + t + d;
            let c = Math.cos(T * r) * i + e + l;
            const p = Math.sin(T * r) * i + t + d;
            return (
              Math.abs(h - c) < 1e-4 && (c += 0.001),
              `M${e + l} ${t + d} ${h} ${u} A${i} ${i} 0 ${a} 0 ${c} ${p}Z`
            );
          },
          M = (e, t, i, r, s, o, a) => {
            const n = Math.abs(o - s) > 180 ? 1 : 0,
              l = (s + o) / 2,
              d = Math.cos(T * l) * a,
              h = Math.sin(T * l) * a,
              u = Math.cos(T * o) * i + e + d,
              c = Math.sin(T * o) * i + t + h,
              p = Math.cos(T * s) * i + e + d,
              g = Math.sin(T * s) * i + t + h,
              y = Math.cos(T * o) * r + e + d,
              f = Math.sin(T * o) * r + t + h;
            return `M${u} ${c} A${i} ${i} 0 ${n} 0 ${p} ${g} L${
              Math.cos(T * s) * r + e + d
            } ${Math.sin(T * s) * r + t + h} A${r} ${r} 0 ${n} 1 ${y} ${f}Z`;
          };
        let I = !1;
        t.addEventListenerToPieSegment = (e, t, i) => {
          const r = (t) => {
            if (i) {
              if (!I) {
                const t = 10,
                  i = e.isSelected,
                  r = i ? e.delta : 0,
                  s = i ? -e.delta / t : e.delta / t;
                (I = !0),
                  (e.isSelected = !e.isSelected),
                  (function i(o) {
                    setTimeout(() => {
                      (e.shift = r + s * o),
                        o === t && (I = !1),
                        ++o <= t && i(o);
                    }, 20);
                  })(1);
              }
            } else e.isSelected = !e.isSelected;
          };
          return (
            t.addEventListener("click", r),
            {
              eventListener: r,
              eventType: "click",
              element: t,
              delete: () => t.removeEventListener("click", r),
            }
          );
        };
      },
      6340: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PROPERTY = void 0),
          ((i = t.PROPERTY || (t.PROPERTY = {})).HOLE_RADIUS = "HOLE_RADIUS"),
          (i.HOLE_RADIUS_SIZING_MODE = "HOLE_RADIUS_SIZING_MODE"),
          (i.PIE_TYPE = "PIE_TYPE"),
          (i.SERIES_SPACING = "SERIES_SPACING"),
          (i.PADDING = "PADDING"),
          (i.CANVAS_BORDER = "CANVAS_BORDER"),
          (i.LABEL_PROVIDER = "LABEL_PROVIDER"),
          (i.VALUE_MODE = "VALUE_MODE"),
          (i.LABEL_RADIUS = "LABEL_RADIUS"),
          (i.TEXT_STYLE = "TEXT_STYLE");
      },
      84626: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SciChartSubSurface =
            t.SciChartSurface =
            t.sciChartConfig =
              void 0);
        const s = i(58996),
          o = i(45921),
          a = i(84745),
          n = i(41493),
          l = i(10276),
          d = i(34238),
          h = i(56744),
          u = i(21079),
          c = i(3214),
          p = i(37796),
          g = i(87459),
          y = i(87108),
          f = i(39922),
          v = i(11043),
          m = i(5337),
          S = i(22022),
          P = i(77809),
          C = i(14379),
          x = i(48008),
          b = i(32873),
          A = i(13063),
          T = i(93113),
          E = i(51269),
          R = i(77186),
          w = i(78623),
          D = i(16185),
          L = i(45481),
          M = i(23059),
          I = i(5102),
          O = i(31306),
          k = i(57397),
          _ = i(42241),
          V = i(23447),
          N = i(43937),
          F = i(63458),
          B = i(94389),
          H = i(98353),
          z = i(1406),
          Y = i(71719),
          G = i(25606),
          X = i(14184),
          j = i(86127),
          W = i(83823),
          U = i(75772),
          $ = i(85479),
          q = i(3434),
          K = i(71238),
          Z = i(36420),
          J = i(99263),
          Q = i(38051),
          ee = i(28709),
          te = i(9254),
          ie = i(68021);
        t.sciChartConfig = {};
        class re extends X.SciChartSurfaceBase {
          constructor(e, t) {
            var i, r, s, o, n;
            super(e, null == t ? void 0 : t.canvases),
              (this.preRender = new c.EventHandler()),
              (this.layersOffset = 0),
              (this.stepBetweenLayers = 10),
              (this.isSubSurface = !1),
              (this.svgClippingMode = P.ESvgClippingMode.SeriesViewRect),
              (this.renderNativeAxisLabelsImmediately = !1),
              (this.watermarkPosition = $.SciChartDefaults.watermarkPosition),
              (this.watermarkRelativeToCanvas = !1),
              (this.animationList = []),
              (this.titleStyleProperty = {
                fontSize: 60,
                fontFamily: "Arial",
                color: X.SciChartSurfaceBase.DEFAULT_THEME.chartTitleColor,
                fontWeight: "normal",
                fontStyle: "normal",
                lineSpacing: 1.1,
                padding: y.Thickness.fromString("10 4 10 4"),
                multilineAlignment: Z.EMultiLineAlignment.Center,
                rotation: void 0,
                alignment: K.ETextAlignment.Center,
                position: K.ETitlePosition.Top,
                placeWithinChart: !1,
                useNativeText: $.SciChartDefaults.useNativeText,
              }),
              (this.getPaddingProxy = (e) =>
                new Proxy(e, {
                  set: (e, t, i) => (
                    e[t] !== i && ((e[t] = i), this.invalidateElement()), !0
                  ),
                })),
              (this.paddingProperty = this.getPaddingProxy(
                y.Thickness.fromNumber(10)
              )),
              (this.zoomStateProperty = C.EZoomState.AtExtents),
              (this.viewportBorderProperty = {
                borderBottom: void 0,
                borderLeft: void 0,
                borderRight: void 0,
                borderTop: void 0,
                color: "#00000000",
                border: void 0,
              }),
              (this.canvasBorderProperty = {
                borderBottom: void 0,
                borderLeft: void 0,
                borderRight: void 0,
                borderTop: void 0,
                color: "#00000000",
                border: void 0,
              }),
              (this.subChartsProperty = []),
              (this.drawSeriesBehindAxisProperty = !1),
              (this.autoColorModeProperty = f.EAutoColorMode.OnAddRemoveSeries),
              (this.autoColorRequired = !0),
              (this.xCoordSvgTrans = 0),
              (this.yCoordSvgTrans = 0),
              (this.subChartCounter = 0);
            const l =
                null !==
                  (r =
                    null === (i = this.domCanvas2D) || void 0 === i
                      ? void 0
                      : i.width) && void 0 !== r
                  ? r
                  : a.DEFAULT_WIDTH,
              d =
                null !==
                  (o =
                    null === (s = this.domCanvas2D) || void 0 === s
                      ? void 0
                      : s.height) && void 0 !== o
                  ? o
                  : a.DEFAULT_HEIGHT;
            if (((this.webAssemblyContext2D = e), !a.IS_TEST_ENV)) {
              const t = l / j.DpiHelper.PIXEL_RATIO,
                i = d / j.DpiHelper.PIXEL_RATIO;
              this.isCopyCanvasSurface
                ? this.changeMasterCanvasViewportSize(e, t, i)
                : this.changeWebGLCanvasViewportSize(e, t, i);
            }
            (this.invalidateElement = this.invalidateElement.bind(this)),
              (this.onRenderSurfaceDraw = this.onRenderSurfaceDraw.bind(this));
            const h = this.domCanvas2D
              ? new S.Size(l, d)
              : new S.Size(a.DEFAULT_WIDTH, a.DEFAULT_HEIGHT);
            (this.renderSurface = new R.RenderSurface(
              e,
              h,
              null === (n = this.domCanvas2D) || void 0 === n ? void 0 : n.id
            )),
              (this.renderSurface.handleDraw = this.onRenderSurfaceDraw),
              (this.sciChartRenderer = new M.SciChartRenderer(this)),
              (this.chartTitleRendererProperty = new q.ChartTitleRenderer(
                this.webAssemblyContext2D
              )),
              (this.layoutManager = new L.LayoutManager()),
              (this.detachSeries = this.detachSeries.bind(this)),
              (this.attachSeries = this.attachSeries.bind(this)),
              (this.renderableSeries = new p.ObservableArray()),
              this.renderableSeries.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach(this.detachSeries),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach(this.attachSeries);
              }),
              (this.detachAxis = this.detachAxis.bind(this)),
              (this.attachAxis = this.attachAxis.bind(this)),
              (this.xAxes = new p.ObservableArray()),
              (this.yAxes = new p.ObservableArray());
            const u = (e, t) => {
              var i, r;
              null === (i = e.getOldItems()) ||
                void 0 === i ||
                i.forEach((e) => {
                  e.visibleRangeChanged.unsubscribeAll(), this.detachAxis(e);
                }),
                null === (r = e.getNewItems()) ||
                  void 0 === r ||
                  r.forEach((e) => this.attachAxis(e, t));
            };
            this.xAxes.collectionChanged.subscribe((e) => u(e, !0)),
              this.yAxes.collectionChanged.subscribe((e) => u(e, !1)),
              (this.adornerLayer = new I.AdornerLayer(this)),
              (this.solidBrushCacheViewportBorder = new w.SolidBrushCache(e)),
              (this.solidBrushCacheCanvasBorder = new w.SolidBrushCache(e)),
              a.IS_TEST_ENV ||
                ((this.watermarkProperties = new e.SCRTWaterMarkProperties()),
                (this.watermarkPropertyPosition = new e.TSRVector2(0, 0)),
                this.watermarkProperties.SetPosition(
                  this.watermarkPropertyPosition
                ),
                this.watermarkProperties.SetOpacity(0.5),
                e.SCRTSetWaterMarkProperties(this.watermarkProperties));
          }
          static create(e, t) {
            const i = ie.PerformanceDebugHelper.mark(
              ie.EPerformanceMarkType.InitializationStart,
              { contextId: null == t ? void 0 : t.id }
            );
            return (
              (0, s.ensureRegistrations)(),
              (t = re.resolveOptions(t)),
              a.IS_TEST_ENV
                ? this.createTest(e, t)
                : (0, V.createMultichart)(e, t).then((e) => {
                    var r;
                    return (
                      e.sciChartSurface.applyOptions(t),
                      ie.PerformanceDebugHelper.mark(
                        ie.EPerformanceMarkType.InitializationEnd,
                        {
                          contextId: e.sciChartSurface.id,
                          relatedId:
                            null === (r = null == i ? void 0 : i.detail) ||
                            void 0 === r
                              ? void 0
                              : r.relatedId,
                        }
                      ),
                      e
                    );
                  })
            );
          }
          static disposeSharedWasmContext() {
            0 === J.sciChart3DDestinations.length &&
              0 === J.sciChartDestinations.length &&
              ((0, V.disposeMultiChart)(), (0, Q.disposeMultiChart3d)()),
              super.disposeSharedWasmContext();
          }
          static createSingle(e, t) {
            const i = ie.PerformanceDebugHelper.mark(
              ie.EPerformanceMarkType.InitializationStart,
              { contextId: null == t ? void 0 : t.id }
            );
            return (
              (0, s.ensureRegistrations)(),
              (t = re.resolveOptions(t)),
              a.IS_TEST_ENV
                ? this.createTest(e, t)
                : (0, N.createSingleInternal)(e, t).then((e) => {
                    var r;
                    return (
                      e.sciChartSurface.applyOptions(t),
                      ie.PerformanceDebugHelper.mark(
                        ie.EPerformanceMarkType.InitializationEnd,
                        {
                          contextId: e.sciChartSurface.id,
                          relatedId:
                            null === (r = null == i ? void 0 : i.detail) ||
                            void 0 === r
                              ? void 0
                              : r.relatedId,
                        }
                      ),
                      e
                    );
                  })
            );
          }
          static configure(e) {
            var i, r;
            (t.sciChartConfig.dataUrl =
              null !== (i = null == e ? void 0 : e.dataUrl) && void 0 !== i
                ? i
                : void 0),
              (t.sciChartConfig.wasmUrl =
                null !== (r = null == e ? void 0 : e.wasmUrl) && void 0 !== r
                  ? r
                  : void 0);
          }
          static useWasmFromCDN() {
            (t.sciChartConfig.dataUrl = `https://cdn.jsdelivr.net/npm/scichart@3.5.704${d.libraryVersion}/_wasm/scichart2d.data`),
              (t.sciChartConfig.wasmUrl = `https://cdn.jsdelivr.net/npm/scichart@3.5.704${d.libraryVersion}/_wasm/scichart2d.wasm`);
          }
          static useWasmLocal() {
            re.configure(void 0);
          }
          static loadWasmFromCDN() {
            return re.useWasmFromCDN();
          }
          static loadWasmLocal() {
            return re.useWasmLocal();
          }
          static isSubSurface(e) {
            return e.isSubSurface;
          }
          static createTest(e, i) {
            var r, s;
            const o = G.default.initCanvas(
                e,
                null !== (r = null == i ? void 0 : i.widthAspect) &&
                  void 0 !== r
                  ? r
                  : 0,
                null !== (s = null == i ? void 0 : i.heightAspect) &&
                  void 0 !== s
                  ? s
                  : 0,
                G.default.ECanvasType.canvas2D
              ),
              a = new re(t.sciChartConfig.testWasm, { canvases: o });
            return (
              a.applyTheme(null == i ? void 0 : i.theme),
              a.applyOptions(i),
              new Promise((e) =>
                e({ wasmContext: a.webAssemblyContext2D, sciChartSurface: a })
              )
            );
          }
          addSubChart(e) {
            const t = re.resolveOptions(e);
            (e = Object.assign(Object.assign({}, e), t)),
              this.subChartCounter++;
            const i =
                this.domChartRoot.id + "_" + this.subChartCounter.toString(),
              r = this.domChartRoot,
              s = r.clientWidth,
              o = r.clientHeight,
              a = (0, G.createSvgLayer)(`${i}_SVG`, s, o);
            (a.style.left = "0"),
              (a.style.top = "0"),
              (a.style.pointerEvents = "none"),
              a.classList.add(G.ELayerClass.FRONT_SVG_ROOT),
              r.appendChild(a);
            const n = (0, G.createSvgLayer)(`${i}_BACKGROUND_SVG`, s, o);
            (n.style.left = "0"),
              (n.style.top = "0"),
              (n.style.pointerEvents = "none"),
              n.classList.add(G.ELayerClass.BACK_SVG_ROOT),
              r.insertBefore(n, this.getMainCanvas());
            const l = document.createElement("div");
            (l.id = `${i}_background_div`),
              l.classList.add(
                G.ELayerClass.DIV_ROOT,
                G.ELayerClass.BACK_DIV_ROOT
              ),
              (l.style.left = "0"),
              (l.style.top = "0"),
              (l.style.position = "absolute"),
              (l.style.pointerEvents = "none"),
              r.insertBefore(l, n);
            const d = {
                domChartRoot: this.domChartRoot,
                domCanvasWebGL: this.domCanvasWebGL,
                domCanvas2D: this.domCanvas2D,
                domSvgContainer: a,
                domSvgAdornerLayer: this.domSvgAdornerLayer,
                domDivContainer: this.domDivContainer,
                domBackgroundSvgContainer: n,
                domSeriesBackground: l,
              },
              h = new se(this.webAssemblyContext2D, {
                canvases: d,
                parentSurface: this,
                subSurfaceOptions: e,
              });
            return (
              (null == e ? void 0 : e.theme) && h.applyTheme(e.theme),
              h.mouseManager.unsubscribe(),
              this.subChartsProperty.push(h),
              this.onAttachSubSurface(h),
              h.setIsInitialized(),
              h
            );
          }
          removeSubChart(e) {
            const t = this.subChartsProperty.findIndex((t) => t === e);
            t > -1 && (this.subChartsProperty.splice(t, 1), e.delete());
          }
          get subCharts() {
            return this.subChartsProperty;
          }
          get surfaceType() {
            return X.ESurfaceType.SciChartSurfaceType;
          }
          get layoutManager() {
            return this.layoutManagerProperty;
          }
          set layoutManager(e) {
            (this.layoutManagerProperty = e),
              (this.layoutManagerProperty.sciChartSurface = this),
              this.invalidateElement();
          }
          get chartTitleRenderer() {
            return this.chartTitleRendererProperty;
          }
          set chartTitleRenderer(e) {
            var t;
            null === (t = this.chartTitleRendererProperty) ||
              void 0 === t ||
              t.delete(),
              (this.chartTitleRendererProperty = e),
              this.invalidateElement();
          }
          get dataLabelLayoutManager() {
            return this.dataLabelLayoutManagerProperty;
          }
          set dataLabelLayoutManager(e) {
            (this.dataLabelLayoutManagerProperty = e), this.invalidateElement();
          }
          get title() {
            return this.titleProperty;
          }
          set title(e) {
            this.titleProperty !== e &&
              ((this.titleProperty = e), this.invalidateElement());
          }
          get titleStyle() {
            return this.titleStyleProperty;
          }
          set titleStyle(e) {
            this.titleStyleProperty !== e &&
              ((this.titleStyleProperty = Object.assign(
                {},
                this.titleStyleProperty,
                e
              )),
              this.invalidateElement());
          }
          get padding() {
            return this.paddingProperty;
          }
          set padding(e) {
            this.paddingProperty.equals(e) ||
              ((this.paddingProperty = this.getPaddingProxy(e)),
              this.invalidateElement());
          }
          get adjustedPadding() {
            return j.DpiHelper.adjustThickness(this.padding);
          }
          get debugRendering() {
            return this.debugRenderingProperty;
          }
          set debugRendering(e) {
            (this.debugRenderingProperty = e), this.invalidateElement();
          }
          get autoColorMode() {
            return this.autoColorModeProperty;
          }
          set autoColorMode(e) {
            (this.autoColorModeProperty = e),
              e === f.EAutoColorMode.Never || this.autoColorRequired
                ? e === f.EAutoColorMode.Never && (this.autoColorRequired = !1)
                : (this.autoColorRequired = !0),
              this.invalidateElement();
          }
          get isInvalidated() {
            var e;
            return null === (e = this.sciChartRenderer) || void 0 === e
              ? void 0
              : e.isInvalidated;
          }
          applyTheme(e) {
            const t = this.previousThemeProvider;
            this.titleStyle.color === t.chartTitleColor &&
              (this.titleStyle = { color: e.chartTitleColor }),
              super.applyTheme(e),
              this.renderableSeries.asArray().forEach((t) => t.applyTheme(e)),
              this.xAxes.asArray().forEach((t) => t.applyTheme(e)),
              this.yAxes.asArray().forEach((t) => t.applyTheme(e));
          }
          changeViewportSize(e, t) {
            if (
              (te.Logger.debug("changeViewportSize"),
              !e || !t || this.isDeleted)
            )
              return;
            const i = e * j.DpiHelper.PIXEL_RATIO,
              r = t * j.DpiHelper.PIXEL_RATIO;
            (this.renderSurface.viewportSize = new S.Size(i, r)),
              this.isCopyCanvasSurface
                ? (this.changeMasterCanvasViewportSize(
                    this.webAssemblyContext2D,
                    e,
                    t
                  ),
                  this.domCanvas2D &&
                    j.DpiHelper.setSize(this.domCanvas2D, e, t))
                : this.changeWebGLCanvasViewportSize(
                    this.webAssemblyContext2D,
                    e,
                    t
                  ),
              this.domSvgAdornerLayer &&
                (this.domSvgAdornerLayer.setAttribute("width", e.toString()),
                this.domSvgAdornerLayer.setAttribute("height", t.toString()));
            for (const e of this.subChartsProperty) e.updateSubLayout();
            this.invalidateElement({ force: !0 });
          }
          invalidateElement(e) {
            var t, i;
            if (
              (te.Logger.debug(
                `Invalidating ${
                  null !==
                    (i =
                      null === (t = this.domChartRoot) || void 0 === t
                        ? void 0
                        : t.id) && void 0 !== i
                    ? i
                    : this.id
                }: force=${null == e ? void 0 : e.force} isSuspended=${
                  this.isSuspended
                } isInitialized=${this.isInitialized}.`
              ),
              !(null == e ? void 0 : e.force) &&
                (this.isSuspended || this.isDeleted || !this.isInitialized))
            )
              return;
            ie.PerformanceDebugHelper.mark(
              this.sciChartRenderer.isInvalidated
                ? ie.EPerformanceMarkType.Invalidate
                : ie.EPerformanceMarkType.LeadingInvalidate,
              { contextId: this.id }
            ),
              (this.sciChartRenderer.isInvalidated = !0);
            const r = this.domCanvas2D
              ? this.domCanvas2D.id
              : "undefinedCanvasId";
            this.renderSurface.invalidateElement(r);
          }
          doDrawingLoop(e) {
            if (!this.isDeleted) {
              (e = null != e ? e : this.renderSurface.getRenderContext()),
                (this.currentWebGlRenderContextProperty = e);
              try {
                const t = new W.UpdateSuspender(this, !1);
                try {
                  this.autoColorRequired &&
                    ((this.themeProvider.strokePalette &&
                      this.themeProvider.strokePalette.length > 0) ||
                      (this.themeProvider.fillPalette &&
                        this.themeProvider.fillPalette.length > 0)) &&
                    (this.resolveAutoColors(),
                    this.autoColorMode !== f.EAutoColorMode.Always &&
                      (this.autoColorRequired = !1)),
                    this.preRender.raiseEvent(e);
                } catch (e) {
                  (null == e ? void 0 : e.message) &&
                    console.error(null == e ? void 0 : e.message),
                    console.error(e);
                } finally {
                  t.resume(), t.delete();
                }
                this.sciChartRenderer.render(e);
              } catch (e) {
                if ("BindingError" === e.name)
                  console.error(e),
                    console.warn(
                      "Binding errors can occur if a previous chart using the same div id was not deleted correctly, or if you try to share data or series between charts that use different webassembly contexts."
                    ),
                    (0, H.freeCache)(this.webAssemblyContext2D).delete();
                else {
                  if (!this.domChartRoot) throw e;
                  console.error(
                    `Error from chart in div ${this.domChartRoot.id}:`,
                    e
                  );
                }
              }
            }
          }
          delete(e = !0) {
            if (this.isDeleted);
            else {
              for (const e of this.subChartsProperty) e.delete();
              (this.subChartsProperty = []),
                this.layoutManagerProperty.type ===
                  ee.ELayoutManagerType.Synchronised &&
                  (this.layoutManagerProperty.verticalGroup &&
                    this.layoutManagerProperty.verticalGroup.removeSurface(
                      this
                    ),
                  this.layoutManagerProperty.horizontalGroup &&
                    this.layoutManagerProperty.horizontalGroup.removeSurface(
                      this
                    )),
                (this.layoutManagerProperty.sciChartSurface = void 0),
                (this.layoutManagerProperty = void 0),
                this.renderableSeries.asArray().forEach((e) => e.delete()),
                this.renderableSeries.clear(),
                this.xAxes.asArray().forEach((e) => e.delete()),
                this.yAxes.asArray().forEach((e) => e.delete()),
                (this.solidBrushCacheViewportBorder = (0, h.deleteSafe)(
                  this.solidBrushCacheViewportBorder
                )),
                (this.solidBrushCacheCanvasBorder = (0, h.deleteSafe)(
                  this.solidBrushCacheCanvasBorder
                )),
                (this.watermarkProperties = (0, h.deleteSafe)(
                  this.watermarkProperties
                )),
                (this.watermarkPropertyPosition = (0, h.deleteSafe)(
                  this.watermarkPropertyPosition
                )),
                (this.chartTitleRendererProperty = (0, h.deleteSafe)(
                  this.chartTitleRenderer
                )),
                (this.sciChartRenderer = void 0),
                (this.renderSurface = void 0),
                this.clearRootElement(e),
                super.delete();
            }
          }
          onDpiChanged(e) {
            var t, i;
            ie.PerformanceDebugHelper.mark(ie.EPerformanceMarkType.DpiChange, {
              contextId: this.id,
            }),
              te.Logger.debug("onDpiChanged"),
              this.renderableSeries.asArray().forEach((t) => t.onDpiChanged(e)),
              this.xAxes.asArray().forEach((e) => e.onDpiChanged()),
              this.yAxes.asArray().forEach((e) => e.onDpiChanged()),
              this.changeViewportSize(
                null === (t = this.getMainCanvas()) || void 0 === t
                  ? void 0
                  : t.clientWidth,
                null === (i = this.getMainCanvas()) || void 0 === i
                  ? void 0
                  : i.clientHeight
              ),
              super.onDpiChanged(e);
          }
          getXAxisById(e) {
            let t = this.xAxes.getById(e);
            return (
              !t &&
                e === _.AxisCore.DEFAULT_AXIS_ID &&
                this.xAxes.size() > 0 &&
                (t = this.xAxes.get(0)),
              t
            );
          }
          getYAxisById(e) {
            let t = this.yAxes.getById(e);
            return (
              !t &&
                e === _.AxisCore.DEFAULT_AXIS_ID &&
                this.yAxes.size() > 0 &&
                (t = this.yAxes.get(0)),
              t
            );
          }
          updateStackedCollectionAccumulatedVectors() {
            this.renderableSeries
              .asArray()
              .filter((e) => e.isStacked && "size" in e)
              .forEach((e) => e.updateAccumulatedVectors());
          }
          zoomExtents(e = 0, t = l.easing.outExpo, i = () => {}) {
            this.updateStackedCollectionAccumulatedVectors();
            const r = void 0 === this.xAxes ? 0 : this.xAxes.size(),
              s = void 0 === this.yAxes ? 0 : this.yAxes.size();
            if (0 === r || 0 === s)
              throw new Error(
                "Cannot ZoomExtents when XAxes or YAxes is undefined or empty"
              );
            const o = this.zoomExtentsXInternal(e, t, i);
            this.zoomExtentsYInternal(o, e, t, i);
          }
          zoomExtentsX(e = 0, t = l.easing.outExpo) {
            this.zoomExtentsXInternal(e, t);
          }
          zoomExtentsY(e = 0, t = l.easing.outExpo) {
            this.zoomExtentsYInternal(void 0, e, t);
          }
          updateWatermark(e, t) {
            var i;
            if (!a.IS_TEST_ENV) {
              (this.watermarkPropertyPosition.x = e),
                (this.watermarkPropertyPosition.y = t),
                (this.watermarkProperties.m_fCanvasWidth =
                  this.renderSurface.viewportSize.width),
                this.watermarkProperties.SetPosition(
                  this.watermarkPropertyPosition
                );
              const r =
                null === (i = this.themeProvider) || void 0 === i
                  ? void 0
                  : i.isLightBackground;
              (this.watermarkProperties.m_bIsDarkBackground =
                void 0 !== r && !r),
                this.webAssemblyContext2D.SCRTSetWaterMarkProperties(
                  this.watermarkProperties
                );
            }
          }
          setZoomState(e) {
            this.zoomStateProperty = e;
          }
          get zoomState() {
            return this.zoomStateProperty;
          }
          get viewportBorder() {
            return this.viewportBorderProperty;
          }
          set viewportBorder(e) {
            (this.viewportBorderProperty = Object.assign(
              Object.assign({}, this.viewportBorderProperty),
              e
            )),
              this.notifyPropertyChanged("ViewportBorder");
          }
          get canvasBorder() {
            return this.canvasBorderProperty;
          }
          set canvasBorder(e) {
            (this.canvasBorderProperty = Object.assign(
              Object.assign({}, this.canvasBorderProperty),
              e
            )),
              this.notifyPropertyChanged("Border");
          }
          drawBorder(e) {
            (0, B.drawBorder)(
              e,
              this.webAssemblyContext2D,
              this.solidBrushCacheViewportBorder,
              this.seriesViewRect,
              this.leftViewportBorder,
              this.topViewportBorder,
              this.rightViewportBorder,
              this.bottomViewportBorder,
              this.viewportBorder.color
            );
            const t = e.viewportSize,
              i = g.Rect.create(
                this.leftCanvasBorder,
                this.topCanvasBorder,
                Math.floor(
                  t.width - this.leftCanvasBorder - this.rightCanvasBorder
                ),
                Math.floor(
                  t.height - this.topCanvasBorder - this.bottomCanvasBorder
                )
              );
            (0, B.drawBorder)(
              e,
              this.webAssemblyContext2D,
              this.solidBrushCacheCanvasBorder,
              i,
              this.leftCanvasBorder,
              this.topCanvasBorder,
              this.rightCanvasBorder,
              this.bottomCanvasBorder,
              this.canvasBorder.color
            );
          }
          get leftViewportBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.viewportBorder.borderLeft) && void 0 !== e
                  ? e
                  : this.viewportBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get rightViewportBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.viewportBorder.borderRight) && void 0 !== e
                  ? e
                  : this.viewportBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get topViewportBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.viewportBorder.borderTop) && void 0 !== e
                  ? e
                  : this.viewportBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get bottomViewportBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.viewportBorder.borderBottom) && void 0 !== e
                  ? e
                  : this.viewportBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get leftCanvasBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.canvasBorder.borderLeft) && void 0 !== e
                  ? e
                  : this.canvasBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get rightCanvasBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.canvasBorder.borderRight) && void 0 !== e
                  ? e
                  : this.canvasBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get topCanvasBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.canvasBorder.borderTop) && void 0 !== e
                  ? e
                  : this.canvasBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get bottomCanvasBorder() {
            var e, t;
            return null !==
              (t =
                null !== (e = this.canvasBorder.borderBottom) && void 0 !== e
                  ? e
                  : this.canvasBorder.border) && void 0 !== t
              ? t
              : 0;
          }
          get currentWebGlRenderContext() {
            return this.currentWebGlRenderContextProperty;
          }
          onAnimate(e) {
            this.renderableSeries.asArray().forEach((t) => t.onAnimate(e));
            const t = [];
            for (let i = 0; i < this.animationList.length; i++) {
              const r = this.animationList[i];
              r.isComplete || (r.update(e), r.isComplete || t.push(r));
            }
            this.animationList = t;
          }
          getAnimations() {
            return this.animationList;
          }
          addAnimation(...e) {
            void 0 !== e &&
              (e.forEach((e) => this.animationList.push(e)),
              this.invalidateElement());
          }
          get isRunningAnimation() {
            for (let e = 0; e < this.renderableSeries.size(); e++)
              if (this.renderableSeries.get(e).isRunningAnimation) return !0;
            return this.animationList.some((e) => !e.isComplete);
          }
          getSeriesViewRectPadding(e = !0) {
            if (!this.seriesViewRect)
              throw new Error(
                "Cannot get seriesViewRect before layout has ocurred. Move code that calls to be triggered by sciChartSurface.rendered"
              );
            const t = e ? 1 : j.DpiHelper.PIXEL_RATIO,
              i = this.seriesViewRect,
              r = i.left / t,
              s = i.top / t,
              o = (this.domCanvas2D.width - i.right) / t,
              a = (this.domCanvas2D.height - i.bottom) / t;
            return new y.Thickness(s, o, a, r);
          }
          resolveAutoColors(e) {
            if (!e) {
              const t = this.renderableSeries
                .asArray()
                .filter((e) => e.isStacked && "size" in e);
              e = this.renderableSeries.size() - t.length;
              for (const i of t) e += i.size();
            }
            let t = 0;
            for (let i = 0; i < this.renderableSeries.size(); i++) {
              const r = this.renderableSeries.get(i);
              r && r.resolveAutoColors(t, e, this.themeProvider),
                r.isStacked && "size" in r ? (t += r.size()) : (t += 1);
            }
          }
          registerFont(e, t) {
            return r(this, void 0, void 0, function* () {
              return (
                e.includes(".") || (e += ".ttf"),
                new Promise((i, r) => {
                  const s =
                    this.webAssemblyContext2D.SCRTFileLoadCallbackInterface.implement(
                      {
                        OnLoadComplete(r, s) {
                          r
                            ? i(!0)
                            : (console.error(
                                `Failed to load ${e} from ${t}.  Error: ${s}`
                              ),
                              i(!1));
                        },
                      }
                    );
                  this.webAssemblyContext2D.SCRTRegisterFile(e, t, s);
                })
              );
            });
          }
          setCoordSvgTranslation(e, t) {
            (this.xCoordSvgTrans = e), (this.yCoordSvgTrans = t);
          }
          getCoordSvgTranslation() {
            return new U.Point(this.xCoordSvgTrans, this.yCoordSvgTrans);
          }
          toJSON(e = !1) {
            var t;
            let i;
            return (
              (i =
                "toJSON" in this.themeProvider
                  ? this.themeProvider.toJSON()
                  : this.themeProvider),
              {
                surface: {
                  id: this.id,
                  title: this.title,
                  titleStyle: this.titleStyle,
                  canvasBorder: this.canvasBorder,
                  heightAspect: this.heightAspect,
                  widthAspect: this.widthAspect,
                  layoutManager:
                    null === (t = this.layoutManager) || void 0 === t
                      ? void 0
                      : t.toJSON(),
                  padding: this.padding,
                  theme: i,
                  viewportBorder: this.viewportBorder,
                  loader: this.loaderJson,
                  drawSeriesBehindAxis: this.drawSeriesBehindAxis,
                  disableAspect: this.disableAspect,
                  createSuspended: this.createSuspended,
                  autoColorMode: this.autoColorMode,
                  touchAction: this.touchActionProperty,
                },
                xAxes: this.xAxes.asArray().map((e) => e.toJSON()),
                yAxes: this.yAxes.asArray().map((e) => e.toJSON()),
                series: this.renderableSeries.asArray().map((t) => t.toJSON(e)),
                modifiers: this.chartModifiers.asArray().map((e) => e.toJSON()),
                annotations: this.annotations.asArray().map((e) => e.toJSON()),
                onCreated: this.onCreatedName,
                subCharts: this.subCharts.map((e) => e.toJSON()),
                createSingle:
                  "SciChartMasterCanvas" !==
                  this.webAssemblyContext2D.canvas.id,
              }
            );
          }
          getNextState(e = !1) {
            return r(this, void 0, void 0, function* () {
              return (
                yield this.nextStateRender({
                  resumeBefore: !0,
                  invalidateOnResume: !0,
                  suspendAfter: !0,
                }),
                this.toJSON(e)
              );
            });
          }
          applyOptions(e) {
            super.applyOptions(e),
              (null == e ? void 0 : e.layoutManager) &&
                ("layoutChart" in e.layoutManager ||
                  (e.layoutManager = (0, o.createType)(
                    v.EBaseType.LayoutManager,
                    e.layoutManager.type,
                    null,
                    e.layoutManager.options
                  )),
                (this.layoutManager = e.layoutManager)),
              (null == e ? void 0 : e.padding) && (this.padding = e.padding),
              (null == e ? void 0 : e.viewportBorder) &&
                (this.viewportBorder = e.viewportBorder),
              (null == e ? void 0 : e.canvasBorder) &&
                (this.canvasBorder = e.canvasBorder),
              (null == e ? void 0 : e.loader) && "toJSON" in e.loader
                ? (this.loaderJson = e.loader.toJSON())
                : !1 === (null == e ? void 0 : e.loader) &&
                  (this.loaderJson = !1),
              (null == e ? void 0 : e.drawSeriesBehindAxis) &&
                (this.drawSeriesBehindAxisProperty = e.drawSeriesBehindAxis),
              (null == e ? void 0 : e.autoColorMode) &&
                (this.autoColorMode = e.autoColorMode),
              (null == e ? void 0 : e.title) && (this.title = e.title),
              (null == e ? void 0 : e.titleStyle) &&
                (this.titleStyle = e.titleStyle),
              (null == e ? void 0 : e.touchAction) &&
                (this.touchActionProperty = e.touchAction);
          }
          detachChartModifier(e) {
            super.detachChartModifier(e),
              this.subCharts.forEach((t) => {
                e.onDetachSubSurface(t);
              });
          }
          attachChartModifier(e) {
            super.attachChartModifier(e),
              e.modifierType !== A.EModifierType.MultiChart2DModifier &&
                (e.setParentSurface(this),
                (e.invalidateParentCallback = this.invalidateElement),
                e.onAttach(),
                this.subCharts.forEach((t) => {
                  e.onAttachSubSurface(t);
                }),
                this.invalidateElement());
          }
          applySciChartBackground(e, t = !0) {
            this.backgroundProperty = e;
            const i = this.webAssemblyContext2D.SCRTGetMainRenderContext2D();
            this.domChartRoot && (this.domChartRoot.style.background = e),
              i && (i.SetClearColor(0, 0, 0, 0), i.Clear());
          }
          setClearAlphaParams(e, t) {
            this.webAssemblyContext2D.SCRTSetClearAlphaParams(e, t);
          }
          zoomExtentsYInternal(e, t = 0, i = l.easing.outExpo, r = () => {}) {
            this.yAxes.asArray().forEach((s) => {
              const o = s.getWindowedYRange(e);
              o && s.animateVisibleRange(o, t, i, r);
            });
          }
          zoomExtentsXInternal(e = 0, t = l.easing.outExpo, i = () => {}) {
            const r = new u.Dictionary();
            return (
              this.xAxes.asArray().forEach((s) => {
                const o = s.getMaximumRange();
                s.animateVisibleRange(o, e, t, i), r.add(s.id, o);
              }),
              r
            );
          }
          onRenderSurfaceDraw() {
            var e;
            if (this.subChartsProperty.length > 0) {
              const t = new T.BatchRenderContext(
                  this.webAssemblyContext2D,
                  this.renderSurface.viewportSize,
                  null === (e = this.domCanvas2D) || void 0 === e
                    ? void 0
                    : e.id
                ),
                i = this.subChartsProperty.filter((e) => e.isVisible);
              0 === i.length && (t.doDraw = !0), this.doDrawingLoop(t);
              const r = 100;
              i.forEach((e, s) => {
                (e.layersOffset = r * (s + 1)),
                  s === i.length - 1 && (t.doDraw = !0),
                  e.doDrawingLoop(t);
              });
            } else this.doDrawingLoop();
            this.currentWebGlRenderContextProperty = (0, h.deleteSafe)(
              this.currentWebGlRenderContext
            );
          }
          detachSeries(e) {
            e.type !== m.ESeriesType.StackedColumnSeries &&
              e.type !== m.ESeriesType.StackedMountainSeries &&
              (this.chartModifiers.asArray().forEach((t) => {
                t.onDetachSeries(e);
              }),
              e.onDetach(),
              this.autoColorMode === f.EAutoColorMode.OnAddRemoveSeries &&
                (this.autoColorRequired = !0),
              this.invalidateElement());
          }
          attachSeries(e) {
            if (e.type === m.ESeriesType.StackedColumnSeries) {
              let t = this.renderableSeries
                .asArray()
                .find((e) => e.type === m.ESeriesType.StackedColumnCollection);
              if (!t) {
                t = new z.StackedColumnCollection(this.webAssemblyContext2D);
                const i = this.renderableSeries
                  .asArray()
                  .findIndex((t) => t === e);
                this.renderableSeries.insert(i, t);
              }
              return t.add(e), void this.renderableSeries.remove(e);
            }
            if (e.type === m.ESeriesType.StackedMountainSeries) {
              let t = this.renderableSeries
                .asArray()
                .find(
                  (e) => e.type === m.ESeriesType.StackedMountainCollection
                );
              if (!t) {
                t = new Y.StackedMountainCollection(this.webAssemblyContext2D);
                const i = this.renderableSeries
                  .asArray()
                  .findIndex((t) => t === e);
                this.renderableSeries.insert(i, t);
              }
              t.add(e), this.renderableSeries.remove(e);
            }
            (e.isStacked && !("size" in e)) || e.onAttach(this),
              this.themeProviderProperty &&
                e.applyTheme(this.themeProviderProperty),
              this.chartModifiers.asArray().forEach((t) => {
                t.onAttachSeries(e);
              }),
              this.autoColorMode === f.EAutoColorMode.OnAddRemoveSeries &&
                (this.autoColorRequired = !0),
              this.invalidateElement();
          }
          detachAxis(e) {
            e.onDetach(), this.invalidateElement();
          }
          attachAxis(e, t) {
            if (e.invalidateParentCallback)
              throw new Error(
                "Invalid operation in sciChartSurface.attachAxis, this axis has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            let i = !1;
            t && !this.xAxes.asArray().some((e) => e.isPrimaryAxis) && (i = !0),
              t ||
                this.yAxes.asArray().some((e) => e.isPrimaryAxis) ||
                (i = !0),
              e.onAttach(this, t, i),
              this.themeProviderProperty &&
                e.applyTheme(this.themeProviderProperty),
              (e.invalidateParentCallback = this.invalidateElement),
              this.invalidateElement();
          }
          onAttachSubSurface(e) {
            this.chartModifiers.asArray().forEach((t) => {
              t.onAttachSubSurface(e);
            });
          }
          onDetachSubSurface(e) {
            this.chartModifiers.asArray().forEach((t) => {
              t.onDetachSubSurface(e);
            });
          }
          get drawSeriesBehindAxis() {
            return this.drawSeriesBehindAxisProperty;
          }
          set drawSeriesBehindAxis(e) {
            (this.drawSeriesBehindAxisProperty = e), this.invalidateElement();
          }
        }
        t.SciChartSurface = re;
        class se extends re {
          constructor(e, t) {
            var i, r, s, o, a, n, l, d, h, u, c, p, y, f, v;
            super(e, t),
              (this.isSubSurface = !0),
              (this.topSectionClass = "top-section"),
              (this.leftSectionClass = "left-section"),
              (this.bottomSectionClass = "bottom-section"),
              (this.rightSectionClass = "right-section"),
              (this.backgroundProperty = "transparent"),
              (this.isTransparentProperty = !0),
              (this.subPositionProperty = new g.Rect(0, 0, 1, 1)),
              (this.coordinateModeProperty = O.ECoordinateMode.Relative),
              (this.parentXAxisIdProperty = k.AxisBase2D.DEFAULT_AXIS_ID),
              (this.parentYAxisIdProperty = k.AxisBase2D.DEFAULT_AXIS_ID),
              (this.isVisibleProperty = !0),
              (this.sectionScaleProperty = 1),
              (this.parentSurfaceProperty = t.parentSurface),
              (this.subChartContainerId =
                null === (i = t.subSurfaceOptions) || void 0 === i
                  ? void 0
                  : i.subChartContainerId),
              (this.subPaddingProperty =
                null === (r = null == t ? void 0 : t.subSurfaceOptions) ||
                void 0 === r
                  ? void 0
                  : r.subChartPadding),
              (this.isTransparentProperty =
                null !==
                  (o =
                    null === (s = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === s
                      ? void 0
                      : s.isTransparent) && void 0 !== o
                  ? o
                  : this.isTransparent),
              (this.coordinateModeProperty =
                null !==
                  (n =
                    null === (a = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === a
                      ? void 0
                      : a.coordinateMode) && void 0 !== n
                  ? n
                  : this.coordinateMode),
              (this.parentXAxisIdProperty =
                null !==
                  (d =
                    null === (l = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === l
                      ? void 0
                      : l.parentXAxisId) && void 0 !== d
                  ? d
                  : this.parentXAxisId),
              (this.parentYAxisIdProperty =
                null !==
                  (u =
                    null === (h = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === h
                      ? void 0
                      : h.parentYAxisId) && void 0 !== u
                  ? u
                  : this.parentYAxisId),
              (this.sectionScaleProperty =
                null !==
                  (p =
                    null === (c = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === c
                      ? void 0
                      : c.sectionScale) && void 0 !== p
                  ? p
                  : this.sectionScaleProperty),
              (this.isVisible =
                null !==
                  (f =
                    null === (y = null == t ? void 0 : t.subSurfaceOptions) ||
                    void 0 === y
                      ? void 0
                      : y.isVisible) && void 0 !== f
                  ? f
                  : this.isVisible),
              this.subChartContainerId &&
                (this.subChartContainer =
                  "string" == typeof this.subChartContainerId
                    ? document.querySelector(
                        `[id='${this.subChartContainerId}']`
                      )
                    : this.subChartContainerId),
              this.applyOptions(t.subSurfaceOptions),
              (this.subPosition =
                null !== (v = t.subSurfaceOptions.position) && void 0 !== v
                  ? v
                  : this.subPositionProperty),
              (this.backgroundFillBrushCache = new E.BrushCache(e)),
              this.preRender.subscribe((e) => {
                this.coordinateMode === O.ECoordinateMode.DataValue &&
                  this.updateSubLayout(!0);
              });
          }
          get isTransparent() {
            return this.isTransparentProperty;
          }
          set isTransparent(e) {
            this.isTransparentProperty !== e &&
              ((this.isTransparentProperty = e), this.updateBackground());
          }
          get subChartPadding() {
            return this.subPaddingProperty;
          }
          set subChartPadding(e) {
            (this.subPaddingProperty = e), this.updateSubLayout();
          }
          get coordinateMode() {
            return this.coordinateModeProperty;
          }
          set coordinateMode(e) {
            (this.coordinateModeProperty = e), this.updateSubLayout();
          }
          get parentXAxisId() {
            return this.parentXAxisIdProperty;
          }
          set parentXAxisId(e) {
            (this.parentXAxisIdProperty = e), this.updateSubLayout();
          }
          get parentYAxisId() {
            return this.parentYAxisIdProperty;
          }
          set parentYAxisId(e) {
            (this.parentYAxisIdProperty = e), this.updateSubLayout();
          }
          get subPosition() {
            return this.subPositionProperty;
          }
          set subPosition(e) {
            if (!this.parentSurface)
              throw new Error("subPosition can only be changed for subCharts.");
            g.Rect.isEqual(this.subPositionProperty, e) ||
              ((this.subPositionProperty = e), this.updateSubLayout());
          }
          get isVisible() {
            return this.isVisibleProperty;
          }
          set isVisible(e) {
            (this.isVisibleProperty = e), this.invalidateElement();
          }
          get sectionScale() {
            return this.sectionScaleProperty;
          }
          set sectionScale(e) {
            (this.sectionScaleProperty = e), this.updateSubLayout();
          }
          updateSubLayout(e = !1) {
            this.updateWrapper(this.subPosition);
            const t = this.getOffsets(this.subChartContainer);
            this.padding = this.calcPadding(
              this.parentSurface.renderSurface.viewportSize,
              this.subPositionProperty,
              t,
              e
            );
          }
          get parentSurface() {
            return this.parentSurfaceProperty;
          }
          get surfaceType() {
            return X.ESurfaceType.SciChartSurfaceType;
          }
          changeViewportSize(e, t) {
            this.renderSurface.viewportSize =
              this.parentSurface.renderSurface.viewportSize;
          }
          getSubChartContainer() {
            return this.subChartContainer;
          }
          getSubChartRect() {
            const { width: e, height: t } = this.renderSurface.viewportSize,
              { top: i, left: r, bottom: s, right: o } = this.adjustedPadding,
              a = e - r - o > 0 ? e - r - o : 0,
              n = t - i - s > 0 ? t - i - s : 0;
            return new g.Rect(r, i, a, n);
          }
          delete(e = !0) {
            e &&
              this.domChartRoot.contains(this.domSvgContainer) &&
              this.domChartRoot.removeChild(this.domSvgContainer),
              e &&
                this.domChartRoot.contains(this.domBackgroundSvgContainer) &&
                this.domChartRoot.removeChild(this.domBackgroundSvgContainer),
              (this.backgroundFillBrushCache = (0, h.deleteSafe)(
                this.backgroundFillBrushCache
              )),
              super.delete(!1);
          }
          toJSON(e = !1) {
            var t;
            let i;
            i =
              "toJSON" in this.themeProvider
                ? this.themeProvider.toJSON()
                : this.themeProvider;
            const r = super.toJSON();
            return {
              surface: Object.assign(Object.assign({}, r.surface), {
                isTransparent: this.isTransparent,
                isVisible: this.isVisible,
                sectionScale: this.sectionScale,
                subChartPadding: this.subPaddingProperty,
                position: this.subPosition,
                subChartContainerId:
                  "string" == typeof this.subChartContainerId
                    ? this.subChartContainerId
                    : null === (t = this.subChartContainerId) || void 0 === t
                    ? void 0
                    : t.id,
                coordinateMode: this.coordinateMode,
                parentXAxisId: this.parentXAxisId,
                parentYAxisId: this.parentYAxisId,
              }),
              xAxes: this.xAxes.asArray().map((e) => e.toJSON()),
              yAxes: this.yAxes.asArray().map((e) => e.toJSON()),
              series: this.renderableSeries.asArray().map((t) => t.toJSON(e)),
              modifiers: this.chartModifiers.asArray().map((e) => e.toJSON()),
              annotations: this.annotations.asArray().map((e) => e.toJSON()),
            };
          }
          calcPadding(e, t, i, r = !1) {
            var s, o, a, n, l, d, h, u;
            const { width: c, height: p } = e,
              g = (0, b.translateToNotScaled)(c),
              f = (0, b.translateToNotScaled)(p),
              { x: v, y: m, width: S, height: P } = t;
            let C = v,
              x = m,
              A = f - m - P,
              T = g - v - S;
            if (this.coordinateMode === O.ECoordinateMode.Relative)
              (C = g * v + i.left),
                (x = f * m + i.top),
                (T = g - g * v - g * S + i.right),
                (A = f - f * m - f * P + i.bottom);
            else if (this.coordinateMode === O.ECoordinateMode.DataValue && r) {
              const e = this.parentSurface.getXAxisById(this.parentXAxisId);
              if (!e)
                throw new Error(
                  `No x axis with id ${this.parentXAxisId} found on parent surface`
                );
              const t = e.getCurrentCoordinateCalculator(),
                i = this.parentSurface.getYAxisById(this.parentYAxisId);
              if (!i)
                throw new Error(
                  `No y axis with id ${this.parentYAxisId} found on parent surface`
                );
              const { seriesViewRect: r } = this.parentSurface,
                s = (0, b.translateToNotScaled)(r.left),
                o = (0, b.translateToNotScaled)(r.top),
                a = (0, b.translateToNotScaled)(r.bottom),
                n = (0, b.translateToNotScaled)(r.right),
                l = i.getCurrentCoordinateCalculator();
              (C = e.isVerticalChart ? l.getCoordinate(v) : t.getCoordinate(v)),
                (x = e.isVerticalChart
                  ? t.getCoordinate(m)
                  : l.getCoordinate(m)),
                (C = Math.max((0, b.translateToNotScaled)(C), 0)),
                (x = Math.max((0, b.translateToNotScaled)(x), 0)),
                (C += s),
                (x += o);
              const d = e.flippedCoordinates ? v - S : v + S,
                h = i.flippedCoordinates ? m + P : m - P;
              (A = Math.max(
                f -
                  o -
                  (0, b.translateToNotScaled)(
                    e.isVerticalChart ? t.getCoordinate(h) : l.getCoordinate(h)
                  ),
                f - a
              )),
                (T = Math.max(
                  g -
                    s -
                    (0, b.translateToNotScaled)(
                      e.isVerticalChart
                        ? l.getCoordinate(d)
                        : t.getCoordinate(d)
                    ),
                  g - n
                ));
            }
            return (
              (C +=
                null !==
                  (o =
                    null === (s = this.subPaddingProperty) || void 0 === s
                      ? void 0
                      : s.left) && void 0 !== o
                  ? o
                  : 0),
              (x +=
                null !==
                  (n =
                    null === (a = this.subPaddingProperty) || void 0 === a
                      ? void 0
                      : a.top) && void 0 !== n
                  ? n
                  : 0),
              (T +=
                null !==
                  (d =
                    null === (l = this.subPaddingProperty) || void 0 === l
                      ? void 0
                      : l.right) && void 0 !== d
                  ? d
                  : 0),
              (A +=
                null !==
                  (u =
                    null === (h = this.subPaddingProperty) || void 0 === h
                      ? void 0
                      : h.bottom) && void 0 !== u
                  ? u
                  : 0),
              new y.Thickness(x, T, A, C)
            );
          }
          applySciChartBackground(e, t = !0) {
            if (((this.backgroundProperty = e), !this.isTransparent)) {
              const t = new D.WebGlRenderContext2D(
                  this.webAssemblyContext2D,
                  this.renderSurface.viewportSize,
                  this.renderSurface.canvasId
                ),
                i = t.getNativeContext(),
                { width: r, height: s } =
                  this.parentSurface.renderSurface.viewportSize;
              i.SetClipRect(
                this.adjustedPadding.left,
                this.adjustedPadding.top,
                r - this.adjustedPadding.right - this.adjustedPadding.left,
                s - this.adjustedPadding.bottom - this.adjustedPadding.top
              ),
                i.SetClearColor(0, 0, 0, 0),
                i.Clear(),
                i.SetClipRect(0, 0, r, s);
              try {
                (0, x.parseColorToUIntArgb)(e);
                const i = (0, H.getVectorRectVertex)(this.webAssemblyContext2D);
                i.push_back(
                  (0, F.createNativeRect)(
                    this.webAssemblyContext2D,
                    this.adjustedPadding.left,
                    this.adjustedPadding.top,
                    this.renderSurface.viewportSize.width -
                      this.adjustedPadding.right,
                    this.renderSurface.viewportSize.height -
                      this.adjustedPadding.bottom
                  )
                );
                const r = (0, E.createBrushInCache)(
                  this.backgroundFillBrushCache,
                  e,
                  1
                );
                t.drawRects(i, r, 0, 0);
              } catch (e) {
                n.performanceWarnings.subchartBackgroundNotSimpleColor.warn();
              }
              t.delete();
            }
          }
          updateWrapper(e) {
            if (!this.parentSurface || !this.subChartContainer) return;
            const { seriesViewRect: t } = this.parentSurface;
            if (!t && this.coordinateMode !== O.ECoordinateMode.Relative)
              return;
            (this.subChartContainer.style.pointerEvents = "none"),
              (this.subChartContainer.style.position = "absolute");
            const i = ((e) => {
              if (this.coordinateMode === O.ECoordinateMode.DataValue) {
                const i = this.parentSurface.getXAxisById(this.parentXAxisId);
                if (!i)
                  throw new Error(
                    `No x axis with id ${this.parentXAxisId} found on parent surface`
                  );
                const r = this.parentSurface.getYAxisById(this.parentYAxisId);
                if (!r)
                  throw new Error(
                    `No y axis with id ${this.parentYAxisId} found on parent surface`
                  );
                const s = (0, b.translateDataValueRectToAbsolute)(e, i, r, t);
                return {
                  left: (0, b.convertToHtmlPx)(s.x),
                  top: (0, b.convertToHtmlPx)(s.y),
                  width: (0, b.convertToHtmlPx)(s.width),
                  height: (0, b.convertToHtmlPx)(s.height),
                };
              }
              return this.coordinateMode === O.ECoordinateMode.Relative
                ? {
                    left: (0, b.convertToRelativeHtmlSize)(e.x),
                    top: (0, b.convertToRelativeHtmlSize)(e.y),
                    width: (0, b.convertToRelativeHtmlSize)(e.width),
                    height: (0, b.convertToRelativeHtmlSize)(e.height),
                  }
                : {
                    left: (0, b.convertToHtmlPx)(e.x),
                    top: (0, b.convertToHtmlPx)(e.y),
                    width: (0, b.convertToHtmlPx)(e.width),
                    height: (0, b.convertToHtmlPx)(e.height),
                  };
            })(e);
            (this.subChartContainer.style.left = i.left),
              (this.subChartContainer.style.top = i.top),
              (this.subChartContainer.style.width = i.width),
              (this.subChartContainer.style.height = i.height);
          }
          getOffsets(e) {
            var t, i, r, s;
            if (!e) return { left: 0, top: 0, right: 0, bottom: 0 };
            const o = e.getElementsByClassName(this.leftSectionClass)[0],
              a = e.getElementsByClassName(this.topSectionClass)[0],
              n = e.getElementsByClassName(this.rightSectionClass)[0],
              l = e.getElementsByClassName(this.bottomSectionClass)[0],
              d =
                null !== (t = null == o ? void 0 : o.clientWidth) &&
                void 0 !== t
                  ? t
                  : 0,
              h =
                null !== (i = null == a ? void 0 : a.clientHeight) &&
                void 0 !== i
                  ? i
                  : 0,
              u =
                null !== (r = null == n ? void 0 : n.clientWidth) &&
                void 0 !== r
                  ? r
                  : 0,
              c =
                null !== (s = null == l ? void 0 : l.clientHeight) &&
                void 0 !== s
                  ? s
                  : 0;
            return {
              left: d * this.sectionScaleProperty,
              top: h * this.sectionScaleProperty,
              right: u * this.sectionScaleProperty,
              bottom: c * this.sectionScaleProperty,
            };
          }
        }
        t.SciChartSubSurface = se;
      },
      14184: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getLocateFile =
            t.getMasterCanvas =
            t.createChartDestination =
            t.SciChartSurfaceBase =
            t.ESurfaceType =
            t.DebugForDpi =
              void 0);
        const s = i(45921),
          o = i(84518),
          a = i(43621),
          n = i(84745),
          l = i(55023),
          d = i(56744),
          h = i(3214),
          u = i(99263),
          c = i(23866),
          p = i(85258),
          g = i(37796),
          y = i(50605),
          f = i(62049),
          v = i(11043),
          m = i(45215),
          S = i(73538),
          P = (i(27307), i(68021)),
          C = i(13063),
          x = i(2705),
          b = i(86127),
          A = i(83823);
        var T;
        (t.DebugForDpi = !1),
          ((T = t.ESurfaceType || (t.ESurfaceType = {})).SciChartSurfaceType =
            "SciChartSurfaceType"),
          (T.SciChart3DSurfaceType = "SciChart3DSurfaceType");
        class E extends l.DeletableEntity {
          constructor(e, t = {}) {
            if (
              (super(),
              (this.rendered = new h.EventHandler()),
              (this.themeProviderProperty = E.DEFAULT_THEME),
              (this.previousThemeProviderProperty = E.DEFAULT_THEME),
              (this.isInitializedProperty = !1),
              (this.isDeletedProperty = !1),
              (this.backgroundProperty = E.DEFAULT_THEME.sciChartBackground),
              (this.idProperty = (0, S.generateGuid)()),
              (this.suspendableIdProperty = (0, S.generateGuid)()),
              (this.isAlphaEnabledProperty = !0),
              (this.deletables = []),
              c.Guard.notNull(e, "webAssemblyContext"),
              (this.domChartRoot = t.domChartRoot),
              (this.domCanvasWebGL = t.domCanvasWebGL),
              (this.domCanvas2D = t.domCanvas2D),
              (this.domSvgContainer = t.domSvgContainer),
              (this.domSvgAdornerLayer = t.domSvgAdornerLayer),
              (this.domBackgroundSvgContainer = t.domBackgroundSvgContainer),
              (this.domSeriesBackground = t.domSeriesBackground),
              (this.domDivContainer = t.domDivContainer),
              (this.sharedWasmContext = e),
              (this.propertyChanged = new h.EventHandler()),
              e.TSRSetDrawRequestsEnabled(!0),
              (this.detachChartModifier = this.detachChartModifier.bind(this)),
              (this.attachChartModifier = this.attachChartModifier.bind(this)),
              (this.chartModifiers = new g.ObservableArray()),
              this.chartModifiers.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach((e) => this.detachChartModifier(e)),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach((e) => this.attachChartModifier(e));
              }),
              (this.detachAnnotation = this.detachAnnotation.bind(this)),
              (this.attachAnnotation = this.attachAnnotation.bind(this)),
              (this.annotations = new g.ObservableArray()),
              (this.modifierAnnotations = new g.ObservableArray()),
              this.annotations.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach((e) => this.detachAnnotation(e)),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach((e) => this.attachAnnotation(e));
              }),
              this.modifierAnnotations.collectionChanged.subscribe((e) => {
                var t, i;
                null === (t = e.getOldItems()) ||
                  void 0 === t ||
                  t.forEach((e) => this.detachAnnotation(e)),
                  null === (i = e.getNewItems()) ||
                    void 0 === i ||
                    i.forEach((e) => this.attachAnnotation(e));
              }),
              (this.mouseManager = new p.MouseManager(this)),
              t.domCanvasWebGL
                ? this.mouseManager.subscribe(t.domCanvasWebGL)
                : t.domCanvas2D && this.mouseManager.subscribe(t.domCanvas2D),
              (this.onDpiChanged = this.onDpiChanged.bind(this)),
              b.DpiHelper.dpiChanged.subscribe(this.onDpiChanged),
              P.PerformanceDebugHelper.enableDebug &&
                this.enableRenderListener(),
              !n.IS_TEST_ENV && E.invalidateOnTabVisible)
            ) {
              const e = () => {
                "visible" === document.visibilityState &&
                  this.invalidateElement({ force: !0 });
              };
              document.addEventListener("visibilitychange", e),
                this.addDeletable({
                  delete: () =>
                    document.removeEventListener("visibilitychange", e),
                });
            }
          }
          static disposeSharedWasmContext() {
            0 === u.sciChart3DDestinations.length &&
              0 === u.sciChartDestinations.length &&
              E.domMasterCanvas &&
              (document.body.removeChild(E.domMasterCanvas),
              (E.domMasterCanvas = void 0)),
              (0, o.forceReapplyLicense2D)(),
              (0, a.forceReapplyLicense3D)();
          }
          static setRuntimeLicenseKey(e) {
            o.licenseManager.setRuntimeLicenseKey(e);
          }
          static UseCommunityLicense() {
            o.licenseManager.setRuntimeLicenseKey("community");
          }
          static setServerLicenseEndpoint(e) {
            o.licenseManager.setServerLicenseEndpoint(e);
          }
          static setLicenseCallback(e) {
            o.licenseManager.setLicenseCallback(e);
          }
          static resolveOptions(e) {
            if ((null == e ? void 0 : e.theme) && "type" in e.theme) {
              if (!("applyOverrides" in e.theme)) {
                const t = (0, s.createType)(
                  v.EBaseType.ThemeProvider,
                  e.theme.type,
                  null,
                  e.theme
                );
                "applyOverrides" in t && t.applyOverrides(e.theme),
                  (e.theme = t);
              }
            } else
              e
                ? (e.theme = E.DEFAULT_THEME)
                : (e = { theme: E.DEFAULT_THEME });
            return (
              (null == e ? void 0 : e.loader) &&
                ("addChartLoader" in e.loader ||
                  (e.loader = (0, s.createType)(
                    v.EBaseType.Loader,
                    e.loader.type,
                    null,
                    e.loader
                  ))),
              e
            );
          }
          get id() {
            return this.idProperty;
          }
          set id(e) {
            this.idProperty = e;
          }
          get background() {
            return this.backgroundProperty;
          }
          set background(e) {
            (this.backgroundProperty = e),
              this.applySciChartBackground(e, this.isAlphaEnabledProperty),
              this.notifyPropertyChanged("Background");
          }
          updateBackground() {
            this.applySciChartBackground(
              this.backgroundProperty,
              this.isAlphaEnabledProperty
            );
          }
          get isCopyCanvasSurface() {
            return !this.domCanvasWebGL && this.domCanvas2D;
          }
          get seriesViewRect() {
            return this.seriesViewRectProperty;
          }
          get otherSurfaces() {
            return this.destinations
              ? this.destinations
                  .map((e) => e.sciChartSurface)
                  .filter((e) => e !== this)
              : [];
          }
          get isInitialized() {
            return this.isInitializedProperty;
          }
          get isDeleted() {
            return this.isDeletedProperty;
          }
          get isSuspended() {
            return A.UpdateSuspender.getIsSuspended(this);
          }
          get suspendableId() {
            return this.suspendableIdProperty;
          }
          decrementSuspend() {}
          resumeUpdates(e) {
            e.shouldResumeTarget &&
              (this.invalidateElement(),
              e === this.suspender && (this.suspender = void 0));
          }
          resume() {
            var e;
            null === (e = this.suspender) || void 0 === e || e.resume();
          }
          suspendUpdates() {
            return (
              (this.suspender = new A.UpdateSuspender(this)),
              this.addDeletable(this.suspender),
              this.suspender
            );
          }
          applyTheme(e) {
            (this.previousThemeProviderProperty = this.themeProviderProperty),
              (this.themeProviderProperty = e),
              this.applySciChartBackground(e.sciChartBackground),
              this.chartModifiers.asArray().forEach((t) => t.applyTheme(e)),
              this.invalidateElement();
          }
          get themeProvider() {
            return this.themeProviderProperty;
          }
          get previousThemeProvider() {
            return this.previousThemeProviderProperty;
          }
          delete(e = !0) {
            var t;
            this.isDeletedProperty = !0;
            const i =
              null === (t = this.destinations) || void 0 === t
                ? void 0
                : t.findIndex((e) => e.sciChartSurface.id === this.id);
            i >= 0 && this.destinations.splice(i, 1),
              b.DpiHelper.dpiChanged.unsubscribe(this.onDpiChanged),
              this.mouseManager.unsubscribe(),
              (this.mouseManager = void 0),
              this.chartModifiers.asArray().forEach((e) => e.delete()),
              this.modifierAnnotations.asArray().forEach((e) => e.delete()),
              this.annotations.asArray().forEach((e) => e.delete()),
              (this.adornerLayer = void 0);
            for (const e of this.deletables) (0, d.deleteSafe)(e);
            (this.domChartRoot = void 0),
              (this.domCanvasWebGL = void 0),
              (this.domCanvas2D = void 0),
              (this.domSvgContainer = void 0),
              (this.domSvgAdornerLayer = void 0),
              (this.domBackgroundSvgContainer = void 0),
              (this.domSeriesBackground = void 0),
              (this.domDivContainer = void 0),
              (this.sharedWasmContext = void 0),
              (this.deletables = []);
          }
          addDeletable(e) {
            this.deletables.push(e);
          }
          getMainCanvas() {
            return this.domCanvasWebGL || this.domCanvas2D;
          }
          setSeriesViewRect(e) {
            this.seriesViewRectProperty = e;
          }
          setDestinations(e) {
            this.destinations = e;
          }
          setIsInitialized() {
            this.isInitializedProperty = !0;
          }
          onDpiChanged(e) {
            this.annotations.asArray().forEach((t) => t.onDpiChanged(e)),
              this.modifierAnnotations
                .asArray()
                .forEach((t) => t.onDpiChanged(e)),
              this.invalidateElement();
          }
          nextStateRender(e) {
            return r(this, void 0, void 0, function* () {
              return new Promise((t, i) => {
                const r = (s) => {
                  try {
                    if (!s) {
                      if (null == e ? void 0 : e.suspendAfter) {
                        const e = this.suspendUpdates();
                        t(e);
                      } else t(null);
                      this.rendered.unsubscribe(r);
                    }
                  } catch (e) {
                    console.error(e), i(e);
                  }
                };
                this.rendered.subscribe(r),
                  (null == e ? void 0 : e.resumeBefore) &&
                    (this.resume(),
                    (null == e ? void 0 : e.invalidateOnResume) &&
                      this.invalidateElement());
              });
            });
          }
          get chartModifierGroups() {
            const e = this.chartModifiers
              .asArray()
              .filter((e) => void 0 !== e.modifierGroup)
              .map((e) => e.modifierGroup);
            return (0, m.getUniqueValues)(e);
          }
          enableRenderListener() {
            const e = (e) => {
              P.PerformanceDebugHelper.mark(
                e
                  ? P.EPerformanceMarkType.Rendered
                  : P.EPerformanceMarkType.FullStateRendered,
                { contextId: this.id }
              );
            };
            this.rendered.subscribe(e),
              this.addDeletable({ delete: () => this.rendered.unsubscribe(e) });
          }
          clearRootElement(e) {
            if (e && this.domChartRoot) {
              const e = this.domChartRoot.style;
              e && ((e.background = ""), (e.position = "")),
                this.domChartRoot.hasOwnProperty("replaceChildren")
                  ? this.domChartRoot.replaceChildren()
                  : (this.domChartRoot.innerHTML = "");
            }
          }
          applyOptions(e) {
            var t;
            (this.idProperty =
              null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                ? t
                : this.idProperty),
              (this.widthAspect = null == e ? void 0 : e.widthAspect),
              (this.heightAspect = null == e ? void 0 : e.heightAspect),
              (this.disableAspect = null == e ? void 0 : e.disableAspect);
          }
          detachChartModifier(e) {
            e.modifierType !== C.EModifierType.MultiChart2DModifier &&
              ((e.invalidateParentCallback = void 0),
              e.onDetach(),
              e.setParentSurface(void 0),
              this.invalidateElement());
          }
          attachChartModifier(e) {
            if (e.modifierType === C.EModifierType.MultiChart2DModifier) {
              if (
                this.chartModifiers.asArray().filter((t) => t === e).length > 1
              )
                throw Error(
                  "Invalid operation in sciChartSurface.attachChartModifier, this FinChartModifier has already been attached to this SciChartSurface."
                );
            } else if (e.invalidateParentCallback)
              throw Error(
                "Invalid operation in sciChartSurface.attachChartModifier, this chartModifier has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            this.themeProviderProperty &&
              e.applyTheme(this.themeProviderProperty);
          }
          notifyPropertyChanged(e) {
            var t;
            null === (t = this.propertyChanged) ||
              void 0 === t ||
              t.raiseEvent(new y.PropertyChangedEventArgs(e)),
              this.invalidateElement();
          }
          changeMasterCanvasViewportSize(e, t, i) {
            if (!E.domMasterCanvas) return;
            let r = t,
              s = i;
            const o = E.domMasterCanvas.width / b.DpiHelper.PIXEL_RATIO,
              a = E.domMasterCanvas.height / b.DpiHelper.PIXEL_RATIO;
            o > r && (r = o),
              a > s && (s = a),
              b.DpiHelper.setSize(E.domMasterCanvas, r, s);
            const n = E.domMasterCanvas.width,
              l = E.domMasterCanvas.height;
            e.SCRTSetMainWindowSize(n, l);
          }
          changeWebGLCanvasViewportSize(e, t, i) {
            if (!this.domCanvasWebGL) return;
            const r = t * b.DpiHelper.PIXEL_RATIO,
              s = i * b.DpiHelper.PIXEL_RATIO;
            b.DpiHelper.setSize(this.domCanvasWebGL, t, i),
              e.SCRTSetMainWindowSize(r, s);
          }
          detachAnnotation(e) {
            e.onDetach(),
              (e.invalidateParentCallback = void 0),
              (e.parentSurface = void 0),
              this.invalidateElement();
          }
          attachAnnotation(e) {
            if (e.invalidateParentCallback)
              throw new Error(
                "Invalid operation in sciChartSurface.attachAnnotation, this annotation has already been attached to a SciChartSurface. Please detach it from a SciChartSurface before attaching to another"
              );
            (e.parentSurface = this),
              (e.invalidateParentCallback = this.invalidateElement),
              e.onAttach(this),
              this.invalidateElement();
          }
        }
        (t.SciChartSurfaceBase = E),
          (E.DEFAULT_THEME = new x.SciChartJSDarkv2Theme()),
          (E.AntiAliasWebGlBackbuffer = !1),
          (E.wasmContextDisposeTimeout = 0),
          (E.autoDisposeWasmContext = !1),
          (E.invalidateOnTabVisible = !0),
          (t.createChartDestination = (e) => {
            if (e)
              return {
                canvas: e,
                GetHeight() {
                  return this.canvas.height;
                },
                GetWidth() {
                  return this.canvas.width;
                },
                GetID() {
                  return this.canvas.id;
                },
              };
          }),
          (t.getMasterCanvas = () => {
            if (!E.domMasterCanvas) {
              const e = document.createElement("canvas");
              (e.id = "SciChartMasterCanvas"),
                (e.style.display = "none"),
                (e.style.position = "absolute"),
                (e.style.left = "0"),
                (e.style.top = "0"),
                t.DebugForDpi &&
                  ((e.style.background = "#00000077"),
                  (e.style.pointerEvents = "none"),
                  (e.style.left = ""),
                  (e.style.top = ""),
                  (e.style.display = "inline")),
                e.addEventListener(
                  "webglcontextcreationerror",
                  (e) => {
                    console.warn(
                      "WebGL Context creation error: ",
                      e.statusMessage || "Unknown error"
                    );
                  },
                  !1
                ),
                document.body.appendChild(e),
                f.WebGlHelper.getContext(e, {
                  premultipliedAlpha: !0,
                  antialias: E.AntiAliasWebGlBackbuffer,
                }),
                (E.domMasterCanvas = e);
            }
            return E.domMasterCanvas;
          }),
          (t.getLocateFile = (e) => (t, i) =>
            t.endsWith(".wasm") && e.wasmUrl
              ? e.wasmUrl
              : t.endsWith(".data") && e.dataUrl
              ? e.dataUrl
              : i + t);
      },
      35992: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.CanvasTexture = void 0);
        const r = i(84745),
          s = i(56744),
          o = i(80445),
          a = i(23866),
          n = i(55023);
        class l extends n.DeletableEntity {
          constructor(e, t, i) {
            super(),
              (this.width = Math.floor(t)),
              (this.height = Math.floor(i)),
              a.Guard.isTrue(
                this.width > 0,
                "CanvasTexture.width must be greater than zero"
              ),
              a.Guard.isTrue(
                this.height > 0,
                "CanvasTexture.height must be greater than zero"
              ),
              r.IS_TEST_ENV ||
                ((this.canvas = document.createElement("canvas")),
                (this.canvas.width = this.width),
                (this.canvas.height = this.height)),
              (this.wasmContext = e),
              (this.intermediateVector = new this.wasmContext.UIntVector()),
              this.intermediateVector.resize(this.height * this.width, 0),
              (this.originalIntermediateVector =
                new this.wasmContext.UIntVector()),
              this.originalIntermediateVector.resize(
                this.height * this.width,
                0
              );
            const s =
              this.wasmContext.eTSRTextureFormat.TSR_TEXTUREFORMAT_A8B8G8R8;
            (this.tsrTextureCache = new o.TextureCache(e)),
              this.tsrTextureCache.create(this.width, this.height, s);
          }
          getContext() {
            return this.canvas.getContext("2d", { willReadFrequently: !0 });
          }
          getTexture() {
            return this.tsrTextureCache.value;
          }
          clear() {
            this.getContext().clearRect(0, 0, this.width, this.height),
              this.intermediateVector.fill(0),
              this.originalIntermediateVector.fill(0);
          }
          delete() {
            (this.intermediateVector = (0, s.deleteSafe)(
              this.intermediateVector
            )),
              (this.originalIntermediateVector = (0, s.deleteSafe)(
                this.originalIntermediateVector
              )),
              (this.tsrTextureCache = (0, s.deleteSafe)(this.tsrTextureCache)),
              (this.wasmContext = void 0);
          }
          copyTexture() {
            var e;
            const t = this.width * this.height;
            if (
              !this.intermediateVector ||
              this.intermediateVector.size() !== t
            )
              throw new Error(
                `CanvasTexture.ts: IntermediateVector size is ${
                  null === (e = this.intermediateVector) || void 0 === e
                    ? void 0
                    : e.size()
                } and expected ${t}`
              );
            const i = this.getContext().getImageData(
                0,
                0,
                this.width,
                this.height
              ).data,
              r = this.width * this.height;
            for (let e = 0; e < r; e++) {
              const t = 4 * e,
                r = i[t + 3];
              if (0 !== r) {
                const s = (r << 24) | (i[t] << 16) | (i[t + 1] << 8) | i[t + 2];
                this.intermediateVector.set(e, s >>> 0),
                  this.originalIntermediateVector.set(e, s >>> 0);
              }
            }
            const s = this.tsrTextureCache.value;
            this.wasmContext.SCRTFillTextureAbgr(
              s,
              this.width,
              this.height,
              this.intermediateVector
            );
          }
          applyOpacity(e) {
            this.wasmContext.SCRTMultiplyColorVectorOpacity(
              this.originalIntermediateVector,
              this.intermediateVector,
              e
            );
            const t = this.tsrTextureCache.value;
            this.wasmContext.SCRTFillTextureAbgr(
              t,
              this.width,
              this.height,
              this.intermediateVector
            );
          }
        }
        t.CanvasTexture = l;
      },
      86127: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DpiHelper = void 0);
        const r = i(84745),
          s = i(3214),
          o = i(87108),
          a = i(14184);
        class n {
          static initialize() {
            n.initialized ||
              ((n.PIXEL_RATIO = 1),
              n.IsDpiScaleEnabled &&
                "undefined" != typeof window &&
                window.devicePixelRatio &&
                (n.PIXEL_RATIO = window.devicePixelRatio),
              a.DebugForDpi &&
                console.log(
                  "Initializing Dpi Helper. Scaling factor = " + n.PIXEL_RATIO
                ),
              n.IsDpiScaleEnabled &&
                !r.IS_TEST_ENV &&
                window.addEventListener("resize", () => {
                  const e = window.devicePixelRatio || 1,
                    t = n.PIXEL_RATIO;
                  t !== e &&
                    (a.DebugForDpi &&
                      console.log(`Dpi Changing, was ${t}, now ${e}`),
                    (n.PIXEL_RATIO = e),
                    n.dpiChanged.raiseEvent({ newValue: e, oldValue: t }));
                }),
              (n.initialized = !0));
          }
          static createCanvas(e = 0, t = 0) {
            const i = document.createElement("canvas");
            return e && t && n.setSize(i, e, t), i;
          }
          static setSize(e, t, i) {
            n.setWidth(e, t), n.setHeight(e, i);
          }
          static setWidth(e, t) {
            a.DebugForDpi &&
              console.log(
                `setWidth ${e.id} backBuffer=${t * n.PIXEL_RATIO} display=${t}`
              ),
              (e.width = t * n.PIXEL_RATIO);
          }
          static setHeight(e, t) {
            a.DebugForDpi &&
              console.log(
                `setHeight ${e.id} backBuffer=${t * n.PIXEL_RATIO} display=${t}`
              ),
              (e.height = t * n.PIXEL_RATIO);
          }
          static adjustLineStyle(e, t = n.PIXEL_RATIO) {
            const i = Object.assign({}, e);
            return (i.end *= t), (i.start *= t), (i.strokeThickness *= t), i;
          }
          static adjustTextStyle(e, t = n.PIXEL_RATIO) {
            const i = Object.assign({}, e);
            return (
              (i.fontSize = Math.round(i.fontSize * t)),
              e.padding && (i.padding = n.adjustThickness(e.padding, t)),
              i
            );
          }
          static adjustStrokeSize(e, t = n.PIXEL_RATIO) {
            var i;
            const r = Object.assign({}, e),
              s = Math.round(e.strokeThickness * t);
            return (
              (r.strokeDashArray =
                null === (i = e.strokeDashArray) || void 0 === i
                  ? void 0
                  : i.map((e) => Math.round(e * t))),
              (r.strokeThickness = s > 0 || 0 === e.strokeThickness ? s : 1),
              r
            );
          }
          static adjustThickness(e, t = n.PIXEL_RATIO) {
            return new o.Thickness(
              Math.round(e.top * t),
              Math.round(e.right * t),
              Math.round(e.bottom * t),
              Math.round(e.left * t)
            );
          }
        }
        (t.DpiHelper = n),
          (n.IsDpiScaleEnabled = !0),
          (n.dpiChanged = new s.EventHandler());
      },
      76829: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.measureTextWidth =
            t.measureTextHeight =
            t.TextureManager =
              void 0);
        const r = i(84745),
          s = i(55023),
          o = i(38215),
          a = i(63415),
          n = i(52578),
          l = i(48008),
          d = i(98353),
          h = i(86127);
        class u extends s.DeletableEntity {
          constructor(e) {
            super(),
              (this.webAssemblyContext = e),
              r.IS_TEST_ENV ||
                ((this.canvas = document.createElement("canvas")),
                (this.canvas.width = 1920),
                (this.canvas.height = 1080),
                (this.ctx = this.canvas.getContext("2d", {
                  willReadFrequently: !0,
                })));
          }
          createSimpleTextTexture(e, t, i, r, s, o) {
            let a = 0;
            return (
              r && (a = s ? 90 : -90),
              this.createTextTexture([e], t, a, void 0, i, o)
            );
          }
          createTextTextureNative(e, t, i, r, s, o) {
            const {
                fontStyle: a,
                fontWeight: n,
                fontFamily: h,
                fontSize: u,
                padding: c,
                alignment: p,
                color: g,
              } = t,
              y = this.webAssemblyContext.SCRTGetMainRenderContext2D(),
              f = (0, d.getFontKey)(this.webAssemblyContext, {
                fontFamily: h,
                fontSize: null != u ? u : 12,
              }),
              v = s ? (0, l.parseColorToUIntArgb)(s) : 0;
            let m = y.CreateTextTextureColored(
              f,
              e.join("\n"),
              (0, l.parseColorToUIntArgb)(g),
              v
            );
            this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(m, !1);
            const S = m.GetWidth(),
              P = m.GetHeight();
            return { bitmapTexture: m, textureWidth: S, textureHeight: P };
          }
          createTextTexture(e, i, s, o, l, d) {
            var h;
            if (r.IS_TEST_ENV)
              return {
                bitmapTexture: void 0,
                textureWidth: 1,
                textureHeight: 1,
              };
            const {
              fontStyle: u,
              fontWeight: c,
              fontFamily: p,
              fontSize: g,
              padding: y,
              alignment: f,
              color: v,
            } = i;
            this.ctx.save(),
              (this.ctx.globalAlpha = null != d ? d : 1),
              (this.ctx.textBaseline = "alphabetic"),
              this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
              l &&
                ((this.ctx.fillStyle = l),
                this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height)),
              (this.ctx.fillStyle = v),
              (this.ctx.font = (0, n.getFontString)(u, c, g, p));
            let m = 0,
              S = y.top + y.bottom,
              P = 0,
              C = 0;
            const x = [];
            for (let t = 0; t < e.length; t++) {
              const i = e[t],
                r = this.ctx.measureText(i),
                s = Math.round(
                  r.actualBoundingBoxAscent + r.actualBoundingBoxDescent
                );
              x.push(s),
                s > P && (P = s),
                0 === t && (C = r.actualBoundingBoxAscent);
              const o = Math.round(r.width + y.left + y.right);
              o > m && (m = o), (S += s);
            }
            const b = Math.round(P * ((null != o ? o : 1.1) - 1));
            S += (e.length - 1) * b;
            let A = y.top + C,
              T = y.left;
            if (!m || !S)
              return {
                bitmapTexture: void 0,
                textureWidth: m,
                textureHeight: S,
              };
            let E = m,
              R = S;
            if (s) {
              const e = (s * Math.PI) / 180;
              (E = Math.round(
                m * Math.abs(Math.cos(e)) + S * Math.abs(Math.sin(e))
              )),
                (R = Math.round(
                  m * Math.abs(Math.sin(e)) + S * Math.abs(Math.cos(e))
                )),
                this.ctx.translate(E / 2, R / 2),
                this.ctx.rotate(e),
                this.ctx.translate(-m / 2, -S / 2);
            }
            const w =
                null !== (h = i.multilineAlignment) && void 0 !== h ? h : f,
              D = m - y.right - y.left;
            for (let i = 0; i < e.length; i++) {
              const r = e[i];
              if (
                w === a.ELabelAlignment.Center ||
                w === a.ELabelAlignment.Right
              ) {
                const e = (0, t.measureTextWidth)(this.ctx, r);
                T =
                  w === a.ELabelAlignment.Right
                    ? m - e - y.right
                    : (D - e) / 2 + y.left;
              }
              this.ctx.fillText(r, Math.round(T), Math.round(A)),
                (A += x[i] + b);
            }
            return (
              (this.ctx.strokeStyle = v),
              this.ctx.restore(),
              this.createTextureFromCtxBuffer(E, R)
            );
          }
          createAxisMarkerTexture(e, i, r, s, a, l, d, h = 0, u, p) {
            (this.ctx.globalAlpha = null != p ? p : 1),
              (this.ctx.textBaseline = "top"),
              this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
              (this.ctx.font = (0, n.getFontString)(r, s, a, l));
            const g = (0, t.measureTextWidth)(this.ctx, i) + 4 * h,
              y = (0, t.measureTextHeight)(a) + 2 * h,
              {
                angle: f,
                alignmentLeft: v,
                alignmentTop: m,
                finalTextureWidth: S,
                finalTextureHeight: P,
                halfHeight: C,
              } = c(y, g, i, e);
            if (
              (this.ctx.save(),
              this.ctx.translate((g + C) / 2, y / 2),
              this.ctx.rotate(f),
              this.ctx.translate(v, m),
              u)
            ) {
              const e = new Path2D(),
                t = y,
                i = g;
              e.moveTo(0, 0),
                e.lineTo(i, 0),
                e.lineTo(C + i, C),
                e.lineTo(i, t),
                e.lineTo(0, t),
                e.closePath(),
                (this.ctx.fillStyle = u),
                this.ctx.fill(e);
            }
            return (
              e !== o.EAxisAlignment.Right &&
                ((this.ctx.fillStyle = d), this.ctx.fillText(i, 2 * h, h)),
              this.ctx.restore(),
              e === o.EAxisAlignment.Right &&
                ((this.ctx.fillStyle = d), this.ctx.fillText(i, 2 * h + C, h)),
              this.createTextureFromCtxBuffer(S, P)
            );
          }
          createTextureFromImage(e, t, i) {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
            const r = (null != t ? t : e.width) * h.DpiHelper.PIXEL_RATIO,
              s = (null != i ? i : e.height) * h.DpiHelper.PIXEL_RATIO;
            return (
              this.ctx.drawImage(e, 0, 0, r, s),
              this.createTextureFromCtxBuffer(r, s)
            );
          }
          getTextureContext(e, t) {
            if (!r.IS_TEST_ENV)
              return (
                e > this.canvas.width && (this.canvas.width = e),
                t > this.canvas.height && (this.canvas.height = t),
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),
                this.ctx
              );
          }
          createTextureFromCtxBuffer(e, t) {
            const i = this.ctx.getImageData(0, 0, e, t);
            return this.createTextureFromImageData(i, e, t);
          }
          createTextureFromImageData(e, t, i) {
            const r =
                this.webAssemblyContext.eTSRTextureFormat
                  .TSR_TEXTUREFORMAT_A8B8G8R8,
              s = this.webAssemblyContext.SCRTCreateBitmapTexture(t, i, r);
            let o;
            try {
              const r = e.data;
              this.webAssemblyContext.SCRTSetActiveTexture(s),
                (o = this.webAssemblyContext._malloc(r.length)),
                this.webAssemblyContext.HEAP8.set(r, o),
                this.webAssemblyContext.ccall(
                  "SCRTFillActiveTextureCharArray",
                  null,
                  ["number", "number", "number"],
                  [t, i, o]
                );
            } catch (e) {
              console.error(e);
            } finally {
              this.webAssemblyContext._free(o),
                this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(
                  s,
                  !1
                );
            }
            return { bitmapTexture: s, textureWidth: t, textureHeight: i };
          }
          delete() {
            (this.canvas = void 0),
              (this.ctx = void 0),
              (this.webAssemblyContext = void 0);
          }
          createTextureFromCtx(e, t) {
            const i = this.ctx.getImageData(0, 0, e, t).data,
              r = e * t,
              s = new this.webAssemblyContext.UIntVector();
            s.resize(r, 0);
            for (let e = 0; e < r; e++) {
              const t = 4 * e,
                r = i[t + 3];
              if (0 !== r) {
                const o = i[t],
                  a = i[t + 1],
                  n = (r << 24) | (i[t + 2] << 16) | (a << 8) | o;
                s.set(e, n >>> 0);
              }
            }
            const o =
                this.webAssemblyContext.eTSRTextureFormat
                  .TSR_TEXTUREFORMAT_A8B8G8R8,
              a = this.webAssemblyContext.SCRTCreateBitmapTexture(e, t, o);
            return (
              this.webAssemblyContext.SCRTFillTextureAbgr(a, e, t, s),
              s.delete(),
              { bitmapTexture: a, textureWidth: e, textureHeight: t }
            );
          }
        }
        (t.TextureManager = u),
          (t.measureTextHeight = (e) => e),
          (t.measureTextWidth = (e, t) => {
            if (r.IS_TEST_ENV) return 1;
            const i = e.measureText(t);
            return Math.ceil(i.width);
          });
        const c = (e, t, i, r) => {
          const s = Math.ceil(e / 2);
          let a = 0,
            n = 0,
            l = 0,
            d = t + s,
            h = e;
          switch (r) {
            case o.EAxisAlignment.Left:
              (a = 0), (n = -(t + s) / 2), (l = -e / 2);
              break;
            case o.EAxisAlignment.Top:
              (a = 0.5 * Math.PI),
                (n = -e / 2),
                (l = (t + s) / 2 - e),
                (d = e),
                (h = t + s);
              break;
            case o.EAxisAlignment.Right:
              (a = Math.PI), (n = -(t + s) / 2), (l = -e / 2);
              break;
            case o.EAxisAlignment.Bottom:
              (a = 1.5 * Math.PI),
                (n = -t),
                (l = -(t + s) / 2),
                (d = e),
                (h = t + s);
          }
          return {
            angle: a,
            alignmentLeft: n,
            alignmentTop: l,
            finalTextureWidth: d,
            finalTextureHeight: h,
            halfHeight: s,
          };
        };
      },
      83823: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.UpdateSuspender = void 0);
        const r = i(55023),
          s = i(21079),
          o = i(23866);
        class a extends r.DeletableEntity {
          constructor(e, t = !0) {
            super(),
              (this.resumeTargetProperty = t),
              (this.targetProperty = e),
              a.suspendedInstances.containsKey(
                this.targetProperty.suspendableId
              )
                ? this.increment(e)
                : a.suspendedInstances.add(e.suspendableId, {
                    id: e.suspendableId,
                    suspendable: e,
                    suspendCount: 1,
                  });
          }
          static getIsSuspended(e) {
            return a.suspendedInstances.containsKey(e.suspendableId);
          }
          static using(e, t) {
            o.Guard.notNull(e, "target");
            const i = e.suspendUpdates();
            try {
              t();
            } finally {
              i.resume();
            }
          }
          get isSuspended() {
            return a.getIsSuspended(this.targetProperty);
          }
          get shouldResumeTarget() {
            return this.resumeTargetProperty;
          }
          resume() {
            this.targetProperty.decrementSuspend(),
              0 === this.decrement(this.targetProperty) &&
                (this.remove(), this.targetProperty.resumeUpdates(this));
          }
          delete() {
            this.remove(), (this.targetProperty = void 0);
          }
          remove() {
            a.suspendedInstances.remove(this.targetProperty.suspendableId);
          }
          increment(e) {
            a.suspendedInstances.item(e.suspendableId).suspendCount++;
          }
          decrement(e) {
            let t = a.suspendedInstances.item(e.suspendableId).suspendCount;
            return (
              t--,
              (a.suspendedInstances.item(e.suspendableId).suspendCount = t),
              t
            );
          }
        }
        (t.UpdateSuspender = a), (a.suspendedInstances = new s.Dictionary());
      },
      13639: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.copyToCanvas = void 0);
        const r = i(9254);
        t.copyToCanvas = (e, t) => (i) => {
          r.Logger.debug("copyToCanvas");
          const s = t(i),
            o = null == s ? void 0 : s.sciChartSurface,
            a = null == s ? void 0 : s.sciChartSurface.domCanvas2D;
          if (a) {
            const t = a.getContext("2d");
            t.clearRect(0, 0, t.canvas.width, t.canvas.height),
              t.drawImage(e, 0, 0),
              o.rendered.raiseEvent(o.isInvalidated);
          }
        };
      },
      23447: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.monitorWebGL =
            t.disposeMultiChart =
            t.initializeChartEngine2D =
            t.getSharedWasmContext =
            t.createMultichart =
              void 0);
        const s = i(84215),
          o = i(34238),
          a = i(23866),
          n = i(16185),
          l = i(84518),
          d = i(66570),
          h = i(85479),
          u = i(25606),
          c = i(84626),
          p = i(14184),
          g = i(99263),
          y = i(55023),
          f = i(98353),
          v = i(16155),
          m = (i(27307), i(62049)),
          S = i(9254),
          P = i(13639),
          C = i(68021),
          x = {
            wasmContext: void 0,
            getChildSurfaces: void 0,
            createChildSurface: void 0,
          };
        let b, A;
        (t.createMultichart = (e, i) =>
          r(void 0, void 0, void 0, function* () {
            var r, s, o, a, n;
            u.default.checkChartDivExists(e);
            const l = u.default.initCanvas(
                e,
                null !== (r = null == i ? void 0 : i.widthAspect) &&
                  void 0 !== r
                  ? r
                  : 0,
                null !== (s = null == i ? void 0 : i.heightAspect) &&
                  void 0 !== s
                  ? s
                  : 0,
                u.default.ECanvasType.canvas2D,
                null == i ? void 0 : i.disableAspect,
                null == i ? void 0 : i.touchAction
              ),
              c =
                null !== (o = null == i ? void 0 : i.loader) && void 0 !== o
                  ? o
                  : new d.DefaultSciChartLoader();
            let p =
              null === (a = c.addChartLoader) || void 0 === a
                ? void 0
                : a.call(c, l.domDivContainer, null == i ? void 0 : i.theme);
            try {
              yield (0, t.initializeChartEngine2D)();
              const { createChildSurface: e, wasmContext: r } = x,
                s = e(l.domChartRoot.id, l, null == i ? void 0 : i.theme);
              return new Promise((e) => {
                setTimeout(() => {
                  var t, o;
                  (null !== (t = null == i ? void 0 : i.createSuspended) &&
                  void 0 !== t
                    ? t
                    : h.SciChartDefaults.createSuspended) && s.suspendUpdates(),
                    null === (o = c.removeChartLoader) ||
                      void 0 === o ||
                      o.call(c, l.domDivContainer, p),
                    (p = void 0),
                    s.setIsInitialized(),
                    e({ wasmContext: r, sciChartSurface: s });
                }, 0);
              });
            } catch (e) {
              return (
                console.error(e),
                null === (n = c.removeChartLoader) ||
                  void 0 === n ||
                  n.call(c, l.domDivContainer, p),
                (p = void 0),
                Promise.reject(e)
              );
            }
          })),
          (t.getSharedWasmContext = () =>
            r(void 0, void 0, void 0, function* () {
              const { wasmContext: e } = yield (0, t.initializeChartEngine2D)();
              return e;
            })),
          (t.initializeChartEngine2D = () =>
            r(void 0, void 0, void 0, function* () {
              var e;
              const i = C.PerformanceDebugHelper.mark(
                C.EPerformanceMarkType.EngineInitStart
              );
              if (
                (m.WebGlHelper.initialize(),
                !x.wasmContext || !x.createChildSurface || !x.getChildSurfaces)
              ) {
                b || ((0, l.forceReapplyLicense2D)(), (b = T()));
                const e = yield b;
                (x.wasmContext = e.wasmContext),
                  (0, o.checkBuildStamp)(e.wasmContext),
                  (x.createChildSurface = e.createChildSurface),
                  (x.getChildSurfaces = e.getChildSurfaces),
                  (0, t.monitorWebGL)(e.wasmContext);
              }
              return (
                C.PerformanceDebugHelper.mark(
                  C.EPerformanceMarkType.EngineInitEnd,
                  {
                    relatedId:
                      null === (e = null == i ? void 0 : i.detail) ||
                      void 0 === e
                        ? void 0
                        : e.relatedId,
                  }
                ),
                b
              );
            })),
          (t.disposeMultiChart = () => {
            A && A(),
              (x.createChildSurface = void 0),
              (x.getChildSurfaces = void 0),
              (x.wasmContext = void 0),
              (b = void 0),
              l.licenseManager.clear();
          }),
          (t.monitorWebGL = (e) => {
            e.canvas.addEventListener(
              "webglcontextlost",
              (t) => {
                console.warn("WebGL context lost: ", t.statusMessage),
                  t.preventDefault(),
                  n.WebGlRenderContext2D.webGlResourcesRefs.forEach((e) => {
                    e.invalidateCache();
                  }),
                  v.labelCache.resetCache(),
                  (0, f.deleteCache)(e),
                  e.SCRTShutdownEngine2D();
              },
              !1
            ),
              e.canvas.addEventListener(
                "webglcontextrestored",
                (t) => {
                  console.warn("WebGL context restored: ", t.statusMessage),
                    e.SCRTInitEngine2D(),
                    e.TSRSetDrawRequestsEnabled(!0);
                },
                !1
              );
          });
        const T = () => {
            const e = (e, t, i, r, s, o) => {
              const a = (0, p.createChartDestination)(i.domCanvas2D);
              if (!a) return void i.delete();
              const n = e.SCRTSurfaceDestination.implement(a);
              o.AddDestination(n),
                o.SetFPSCounterEnabled(!1),
                g.sciChartDestinations.push({
                  canvasElementId: t,
                  sciChartSurface: i,
                  width: r,
                  height: s,
                });
            };
            return new Promise((t, i) => {
              const r = (0, p.getMasterCanvas)(),
                o = (0, p.getLocateFile)(c.sciChartConfig);
              new s({ locateFile: o, noInitialRun: !0 })
                .then((i, s) => {
                  let o = (0, y.createWasmContextRevocableProxy)(i);
                  const n = o.proxy;
                  A = () => {
                    v.labelCache.resetCache(),
                      n.TSRRequestExit(),
                      d.delete(),
                      n
                        .SCRTGetGlobalSampleChartInterface()
                        .SetFrameRenderer(null),
                      n.SCRTGetGlobalSampleChartInterface().delete(),
                      n.SCRTSetGlobalSampleChartInterface(null),
                      (0, f.deleteCache)(n),
                      m.delete(),
                      n.SCRTSetGlobalCopyToDestinationInterface(null),
                      o.revoke(),
                      (o = void 0),
                      (A = void 0);
                  };
                  const d = new n.SCRTFrameRenderer2D(),
                    m = n.SCRTCopyToDestinationInterface.implement({
                      CopyToDestination: (0, P.copyToCanvas)(
                        p.SciChartSurfaceBase.domMasterCanvas,
                        E
                      ),
                    }),
                    C = () =>
                      g.sciChartDestinations.map((e) => e.sciChartSurface),
                    x = (t, i, r) => {
                      a.Guard.notNull(r, "theme");
                      const s = u.default.getCanvas2dId(t),
                        o = g.sciChartDestinations.filter(
                          (e) => e.canvasElementId === s
                        ),
                        d = g.sciChartDestinations.filter(
                          (e) => e.canvasElementId !== s
                        );
                      for (
                        T.ClearDestinations();
                        g.sciChartDestinations.length > 0;

                      )
                        g.sciChartDestinations.pop();
                      d.forEach((t) =>
                        e(
                          n,
                          t.canvasElementId,
                          t.sciChartSurface,
                          t.width,
                          t.height,
                          T
                        )
                      );
                      const h = ((e, t, i, r) => {
                        a.Guard.notNull(r, "theme");
                        const s = new c.SciChartSurface(e, { canvases: i });
                        s.applyTheme(r);
                        const o = u.default.subscribeToResize(
                          i.domChartRoot,
                          i.aspect,
                          s,
                          i.disableAspect
                        );
                        return (
                          s.addDeletable(o),
                          s.setDestinations(g.sciChartDestinations),
                          s
                        );
                      })(n, 0, i, r);
                      return (
                        h.addDeletable({
                          delete: () => {
                            c.SciChartSurface.autoDisposeWasmContext &&
                              0 === h.otherSurfaces.length &&
                              (c.SciChartSurface.wasmContextDisposeTimeout
                                ? setTimeout(() => {
                                    0 === g.sciChartDestinations.length &&
                                      c.SciChartSurface.disposeSharedWasmContext();
                                  }, c.SciChartSurface.wasmContextDisposeTimeout)
                                : c.SciChartSurface.disposeSharedWasmContext());
                          },
                        }),
                        e(
                          n,
                          s,
                          h,
                          i.domCanvas2D.width,
                          i.domCanvas2D.height,
                          T
                        ),
                        o.forEach((e) => e.sciChartSurface.delete(!1)),
                        l.licenseManager.applyLicense2D(n, h, !1),
                        h
                      );
                    };
                  n.canvas = r;
                  const b = {
                      InitializeChart() {
                        S.Logger.debug("InitializeChart"),
                          t({
                            getChildSurfaces: C,
                            createChildSurface: x,
                            wasmContext: n,
                          });
                      },
                      Draw(e) {
                        S.Logger.debug("Draw", e);
                        const t = g.sciChartDestinations.find(
                          (t) => t.canvasElementId === e
                        );
                        t &&
                          t.sciChartSurface.renderSurface.onRenderTimeElapsed();
                      },
                      Update(e) {
                        S.Logger.debug("sciChartInitCommon.ts Update", e);
                      },
                      ShutDownChart() {
                        S.Logger.debug("sciChartInitCommon.ts ShutDownChart");
                      },
                    },
                    T = n.SCRTSampleChartInterface.implement(b);
                  T.SetFrameRenderer(d),
                    T.SetWasmBufferSizesKb(
                      h.SciChartDefaults.wasmBufferSizesKb
                    ),
                    n.SCRTSetGlobalSampleChartInterface(T),
                    n.SCRTSetGlobalCopyToDestinationInterface(m),
                    n.TSRSetDrawRequestsEnabled(!0),
                    p.SciChartSurfaceBase.domMasterCanvas &&
                      n.SCRTSetMainWindowSize(
                        p.SciChartSurfaceBase.domMasterCanvas.width,
                        p.SciChartSurfaceBase.domMasterCanvas.height
                      ),
                    n.callMain();
                })
                .catch((e) => {
                  console.error(e),
                    i(
                      "Could not load SciChart WebAssembly module.\n                Check your build process and ensure that your scichart2d.wasm, scichart2d.data and scichart2d.js files are from the same version"
                    );
                });
            });
          },
          E = (e) =>
            g.sciChartDestinations.find((t) => t.canvasElementId === e);
      },
      43937: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.initDrawEngineSingleChart = t.createSingleInternal = void 0);
        const r = i(84215),
          s = i(34238),
          o = i(23866),
          a = i(62049),
          n = i(9254),
          l = i(84518),
          d = i(66570),
          h = i(85479),
          u = i(25606),
          c = i(84626),
          p = i(14184),
          g = i(98353),
          y = i(55023),
          f = i(99263),
          v = i(16155),
          m = i(23447),
          S = i(68021);
        (t.createSingleInternal = (e, i) =>
          new Promise((o, l) => {
            var g, f;
            const v = u.default.initCanvas(
                e,
                null == i ? void 0 : i.widthAspect,
                null == i ? void 0 : i.heightAspect,
                void 0,
                null == i ? void 0 : i.disableAspect,
                null == i ? void 0 : i.touchAction
              ),
              P =
                null !== (g = null == i ? void 0 : i.loader) && void 0 !== g
                  ? g
                  : new d.DefaultSciChartLoader(),
              C =
                null === (f = P.addChartLoader) || void 0 === f
                  ? void 0
                  : f.call(P, v.domDivContainer, null == i ? void 0 : i.theme);
            S.PerformanceDebugHelper.mark(
              S.EPerformanceMarkType.EngineInitStart
            );
            const x = a.WebGlHelper.getWebGlSupport();
            if (x !== a.EWebGLSupport.WebGL2 && x !== a.EWebGLSupport.WebGL1)
              throw Error("Sorry Your browser does not support WebGL.");
            {
              const e = (0, p.getLocateFile)(c.sciChartConfig);
              new r({ locateFile: e, noInitialRun: !0 })
                .then((e) => {
                  var r;
                  null === (r = P.removeChartLoader) ||
                    void 0 === r ||
                    r.call(P, v.domDivContainer, C),
                    (e.doNotCaptureKeyboard = !0);
                  let a = (0, y.createWasmContextRevocableProxy)(e);
                  (0, t.initDrawEngineSingleChart)(
                    a.proxy,
                    v,
                    (e) => {
                      var t;
                      (null !== (t = null == i ? void 0 : i.createSuspended) &&
                      void 0 !== t
                        ? t
                        : h.SciChartDefaults.createSuspended) &&
                        e.sciChartSurface.suspendUpdates(),
                        e.sciChartSurface.addDeletable({
                          delete: () => {
                            a.revoke(), (a = void 0);
                          },
                        }),
                        o(e);
                    },
                    null == i ? void 0 : i.theme
                  ),
                    (0, s.checkBuildStamp)(e),
                    (0, m.monitorWebGL)(e);
                })
                .catch((e) => {
                  var t;
                  n.Logger.debug(e),
                    null === (t = P.removeChartLoader) ||
                      void 0 === t ||
                      t.call(P, v.domDivContainer, C),
                    l(
                      "Could not load SciChart WebAssembly module.\n                    Check your build process and ensure that your scichart2d.wasm, scichart2d.data and scichart2d.js files are from the same version"
                    );
                });
            }
          })),
          (t.initDrawEngineSingleChart = (e, t, i, r) => {
            o.Guard.notNull(r, "theme");
            const s = t.domCanvas2D.width,
              a = t.domCanvas2D.height;
            let n;
            e.preRun.push(
              () => (ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = "#chart_WebGL")
            ),
              (e.canvas = t.domCanvasWebGL);
            const d = new e.SCRTFrameRenderer2D(),
              p = t.domCanvasWebGL.id,
              y = {
                InitializeChart() {
                  (n = new c.SciChartSurface(e, { canvases: t })),
                    n.applyTheme(r),
                    f.sciChartSingleDestinations.push({
                      canvasElementId: p,
                      sciChartSurface: n,
                      width: s,
                      height: a,
                    }),
                    n.setDestinations(f.sciChartSingleDestinations),
                    n.addDeletable({
                      delete: () => {
                        e.TSRRequestExit(),
                          d.delete(),
                          e
                            .SCRTGetGlobalSampleChartInterface()
                            .SetFrameRenderer(null),
                          e.SCRTGetGlobalSampleChartInterface().delete(),
                          e.SCRTSetGlobalSampleChartInterface(null),
                          v.labelCache.resetCache();
                      },
                    }),
                    setTimeout(() => {
                      n.invalidateElement(),
                        l.licenseManager.applyLicense2D(e, n, !0);
                      const r = u.default.subscribeToResize(
                        t.domChartRoot,
                        t.aspect,
                        n,
                        t.disableAspect
                      );
                      n.addDeletable(r),
                        n.addDeletable((0, g.freeCache)(e)),
                        n.setIsInitialized(),
                        i({ wasmContext: e, sciChartSurface: n });
                    }, 0);
                },
                Draw(e) {
                  n.renderSurface.onRenderTimeElapsed();
                },
                Update(e) {},
                ShutDownChart() {},
              },
              m = e.SCRTSampleChartInterface.implement(y);
            m.SetFrameRenderer(d),
              m.SetFPSCounterEnabled(!1),
              m.SetWasmBufferSizesKb(h.SciChartDefaults.wasmBufferSizesKb),
              e.SCRTSetGlobalSampleChartInterface(m),
              e.callMain(),
              S.PerformanceDebugHelper.mark(
                S.EPerformanceMarkType.EngineInitEnd,
                { contextId: null == n ? void 0 : n.id }
              );
          });
      },
      84518: function (e, t, i) {
        "use strict";
        var r =
          (this && this.__awaiter) ||
          function (e, t, i, r) {
            return new (i || (i = Promise))(function (s, o) {
              function a(e) {
                try {
                  l(r.next(e));
                } catch (e) {
                  o(e);
                }
              }
              function n(e) {
                try {
                  l(r.throw(e));
                } catch (e) {
                  o(e);
                }
              }
              function l(e) {
                var t;
                e.done
                  ? s(e.value)
                  : ((t = e.value),
                    t instanceof i
                      ? t
                      : new i(function (e) {
                          e(t);
                        })).then(a, n);
              }
              l((r = r.apply(e, t || [])).next());
            });
          };
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.licenseManager =
            t.updateLicenseDisplay =
            t.getLicenseInfo =
            t.applyLicense =
            t.forceReapplyLicense2D =
            t.getLicenseCookie =
            t.setCallbacks3D =
            t.setUseLicenseWizard =
            t.setRuntimeLicenseKey =
            t.setLicenseCallback =
            t.setIsDebugLicensing =
            t.setDependencies =
              void 0);
        const s = i(84745),
          o = i(34238),
          a = i(21079),
          n = i(99263),
          l = i(31601),
          d = i(33519),
          h = i(72072),
          u = i(48125),
          c = i(41670),
          p = i(2056);
        let g = 24278,
          y = 24279;
        const f = l.localStorageApi.getLicenseWizardPort();
        f && ((g = f), (y = g + 1));
        let v = {
          fetchFromWizard: (e) => {
            return (
              (t = e),
              r(void 0, void 0, void 0, function* () {
                try {
                  const e = "http://localhost:" + g.toString() + t;
                  return yield fetch(e);
                } catch (e) {
                  if (
                    (S(
                      "Could not connect to license wizard on port " +
                        g.toString()
                    ),
                    "undefined" != typeof localStorage)
                  ) {
                    const e = l.localStorageApi.getLicenseWizardMaxPort();
                    if (e)
                      for (; y <= e; )
                        try {
                          const e = "http://localhost:" + y.toString() + t,
                            i = yield fetch(e);
                          return (g = y), i;
                        } catch (e) {
                          S(
                            "Could not connect to license wizard on port " +
                              y.toString()
                          ),
                            (y += 1);
                        }
                  }
                  throw e;
                }
              })
            );
            var t;
          },
          setCookie: (e, t, i) => (0, c.setCookie)(e, t, i),
          getCookie: (e) => (0, c.getCookie)(e),
          fetchForChallenge: (e) => fetch(e),
          updateLicenseDisplay: (e, t, i, r) => ee(e, t, i, r),
          debug: (e) => console.log(e),
        };
        t.setDependencies = (e) => (v = e);
        let m = null;
        t.setIsDebugLicensing = (e, t = !1) => {
          (m = e), (!t && e) || l.localStorageApi.setIsLicenseDebug(e);
        };
        const S = (e) => {
          null === m && (m = l.localStorageApi.getIsLicenseDebug()),
            (s.IS_TEST_ENV || m) && v.debug(e);
        };
        let P;
        S("SciChart version " + o.libraryVersion),
          (t.setLicenseCallback = (e) => {
            P = e;
          });
        let C = "";
        const x = () => C;
        t.setRuntimeLicenseKey = (e) => {
          const i = C;
          if (
            ((C = e), C !== i && "" !== C && n.sciChartDestinations.length > 0)
          ) {
            const e = n.sciChartDestinations[0].sciChartSurface;
            (0, t.applyLicense)(e.sharedWasmContext, e);
          }
        };
        let b = !0;
        t.setUseLicenseWizard = (e) => {
          b = e;
        };
        const A = s.IS_TEST_ENV ? 0.1 : 5,
          T = s.IS_TEST_ENV ? 12 : 10;
        let E,
          R,
          w = "api/license",
          D = 0;
        const L = {
          getLicenseChallenge3D: () => {},
          setChallengeResponse3D: (e) => {},
          setNewLicense3D: (e) => {},
          updateLicenseDisplay3D: () => {},
        };
        let M = L;
        t.setCallbacks3D = (e) => (M = e);
        const I = (e, i) =>
            r(void 0, void 0, void 0, function* () {
              if (!i.isDeleted) {
                try {
                  if (
                    B !== u.LicenseCheckStatus.StartLookingForLicenseWizard &&
                    B !== u.LicenseCheckStatus.LookingForLicenseWizard &&
                    B !== u.LicenseCheckStatus.NoLicenseInWizard
                  )
                    return;
                  let t;
                  if (
                    (S("Trying to get license from local license wizard"),
                    (t = yield v.fetchFromWizard("/license")),
                    t.ok)
                  ) {
                    const r = yield t.text(),
                      { requiresValidation: s, trialExpired: o } = G(r, e, i);
                    s
                      ? (S(
                          "Got a developer license from local license wizard.  Validating..."
                        ),
                        (B = u.LicenseCheckStatus.ValidatingDeveloperLicense),
                        V(e, i))
                      : o
                      ? ((B = u.LicenseCheckStatus.NoLicenseInWizard),
                        S(
                          `No valid license available in licensing wizard. Trying again in ${A} seconds`
                        ),
                        (E = setTimeout(() => I(e, i), 1e3 * A)))
                      : (S("Got a valid license from local license wizard."),
                        (B = u.LicenseCheckStatus.LicenseOK));
                  } else
                    (B = u.LicenseCheckStatus.NoLicenseInWizard),
                      S(
                        `No license available in licensing wizard. Trying again in ${A} seconds`
                      ),
                      (E = setTimeout(() => I(e, i), 1e3 * A));
                } catch (t) {
                  (B = u.LicenseCheckStatus.LookingForLicenseWizard),
                    (D += 1),
                    D < T
                      ? (S(
                          `Could not find licensing wizard. Trying again in ${A} seconds`
                        ),
                        (E = setTimeout(() => I(e, i), 1e3 * A)))
                      : (console.log(
                          "Failed to connect to licensing wizard. Refresh page to retry."
                        ),
                        (D = 0),
                        (B = u.LicenseCheckStatus.FailedToFindLicenseWizard));
                }
                void 0 === e ||
                  i.isDeleted ||
                  ((0, t.updateLicenseDisplay)(
                    (0, t.getLicenseInfo)(e),
                    i,
                    !0,
                    !0
                  ),
                  M.updateLicenseDisplay3D());
              }
            }),
          O = (e, t, i, r) => {
            const s = `${e},${t},${i},${r}`;
            return v.setCookie("scLicense", s, 365);
          };
        t.getLicenseCookie = () => {
          let e;
          e = v.getCookie("scLicense");
          const t = e.split(",");
          return 4 === t.length
            ? {
                key: t[0],
                token: t[1],
                expiry: new Date(1e3 * Number.parseInt(t[2], 10)),
                lastValidated: new Date(1e3 * Number.parseInt(t[3], 10)),
              }
            : { key: t[0], token: null, expiry: null, lastValidated: null };
        };
        const k = (e, t) => {
          let i = -1;
          void 0 !== t && (i = t.SCRTCredentials.ApplyLicenseResponse(e));
          const r = M.setChallengeResponse3D(e);
          return void 0 !== r ? r : i;
        };
        let _ = 0;
        const V = (e, i) =>
          r(void 0, void 0, void 0, function* () {
            if (i.isDeleted) return;
            const r = p.licenseManager2dState.getIsDev()
              ? "license wizard"
              : "server";
            try {
              if (B !== u.LicenseCheckStatus.ValidatingDeveloperLicense) return;
              let s, o, a;
              S(`Attempting to validate license with ${r}`),
                void 0 !== e
                  ? ((s = e.SCRTCredentials.GetLicenseChallenge()),
                    (o = e.SCRTCredentials.GetOrderId()))
                  : ({ challenge: s, orderId: o } = M.getLicenseChallenge3D());
              const n = `orderid=${o}&challenge=${s}`;
              if (p.licenseManager2dState.getIsDev()) {
                const e = `/validate?${n}`;
                a = yield v.fetchFromWizard(e);
              } else if (void 0 !== P) a = yield P(n);
              else {
                const e = "/" + w + (w.indexOf("?") > 0 ? "&" : "?") + n;
                a = yield v.fetchForChallenge(e);
              }
              if (a.ok) {
                const r = yield a.text();
                if (r.startsWith("Error"))
                  S("Server rejected the license challenge: " + r),
                    (B = u.LicenseCheckStatus.FailedToValidateDeveloperLicense);
                else {
                  const s = k(r, e);
                  if (s > 0) {
                    let o = (0, t.getLicenseCookie)().key;
                    o || (o = x());
                    const a = Math.floor(new Date().getTime() / 1e3);
                    O(o, r, s, a),
                      S("License validated"),
                      (B = u.LicenseCheckStatus.LicenseOK);
                    const n = s - a;
                    (_ = 0),
                      (R = setTimeout(
                        () => V(e, i),
                        Math.floor(0.95 * n * 1e3)
                      ));
                  } else
                    S("license challenge response was invalid: " + r),
                      (B =
                        u.LicenseCheckStatus.FailedToValidateDeveloperLicense);
                }
              } else {
                if (!p.licenseManager2dState.getIsDev())
                  throw new Error(a.statusText);
                console.warn(
                  "Error during license validation: " + a.statusText
                ),
                  (B = u.LicenseCheckStatus.FailedToValidateDeveloperLicense);
              }
            } catch (s) {
              if (!p.licenseManager2dState.getIsDev()) {
                if (
                  (console.warn(
                    "Server license validation failed.  Looking for local developer license"
                  ),
                  (C = ""),
                  (B = u.LicenseCheckStatus.NoLicense),
                  e.SCRTCredentials.ResetRuntimeLicense(),
                  (H = !1),
                  p.licenseManager2dState.setIsDev(!0),
                  (B = u.LicenseCheckStatus.StartLookingForLicenseWizard),
                  I(e, i),
                  n.sciChartDestinations.length > 0 && !i.isDeleted)
                ) {
                  const e = n.sciChartDestinations[0].sciChartSurface;
                  (0, t.updateLicenseDisplay)(
                    (0, t.getLicenseInfo)(e.sharedWasmContext),
                    e,
                    !0,
                    !1
                  ),
                    M.updateLicenseDisplay3D();
                }
                return;
              }
              if (((_ += 1), _ < T))
                S(`Could not find ${r}/${w}. Trying again in ${A} seconds`),
                  (R = setTimeout(() => V(e, i), 1e3 * A));
              else {
                const e = (0, t.getLicenseCookie)().expiry,
                  i = p.licenseManager2dState.getIsDev()
                    ? "Please run the license wizard, ensure your license is activated, then refresh page to retry."
                    : "Please check that the endpoint is configured correctly.";
                console.error(
                  `Failed to connect to ${r}/${w}.  License must be revalidated before ${e.toLocaleString()}. ${i}`
                ),
                  (_ = 0),
                  new Date() > e &&
                    (B = u.LicenseCheckStatus.FailedToFindLicenseWizard);
              }
            }
            void 0 === e ||
              i.isDeleted ||
              ((0, t.updateLicenseDisplay)((0, t.getLicenseInfo)(e), i, !0, !0),
              M.updateLicenseDisplay3D());
          });
        let N = !0;
        t.forceReapplyLicense2D = () => {
          N = !0;
        };
        let F,
          B = u.LicenseCheckStatus.NoLicense,
          H = !1,
          z = !1;
        t.applyLicense = (e, i) => {
          var r, a, n, l;
          S("applyLicense running");
          let d = "",
            h = e.SCRTCredentials.GetLicenseType();
          S("Initial license status is " + u.LicenseType[K(h, e)]);
          const g = x();
          if (
            (B === u.LicenseCheckStatus.NoLicense ||
              B === u.LicenseCheckStatus.LicenseOK ||
              B === u.LicenseCheckStatus.StartLookingForLicenseWizard ||
              B === u.LicenseCheckStatus.LookingForLicenseWizard) &&
            g
          ) {
            S("Runtime license found");
            const t = g.indexOf(";");
            if (t > 0) {
              const e = Math.floor(new Date().getTime() / 1e3),
                i = g.substring(t + 1);
              O(g.substr(0, t), i, e + 60, e);
            } else {
              e.SCRTCredentials.SetRuntimeLicenseKeyW(g),
                (h = e.SCRTCredentials.GetLicenseType());
              const t = K(h, e);
              if (
                (S("Runtime license status is " + u.LicenseType[t]),
                h === e.SCRTLicenseType.LICENSE_TYPE_FULL ||
                  h === e.SCRTLicenseType.LICENSE_TYPE_TRIAL ||
                  h === e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY ||
                  h === e.SCRTLicenseType.LICENSE_TYPE_REQUIRES_VALIDATION)
              )
                (H = !0), (d = g);
              else {
                const t = e.SCRTCredentials.GetLicenseErrors();
                (window &&
                  (null === (r = window.location) || void 0 === r
                    ? void 0
                    : r.hostname) &&
                  !(null ===
                    (n =
                      null === (a = window.location) || void 0 === a
                        ? void 0
                        : a.hostname) || void 0 === n
                    ? void 0
                    : n.includes("localhost"))) ||
                !t.startsWith("License is not valid for this domain")
                  ? m
                    ? S("Runtime license is invalid: " + t)
                    : console.warn(
                        "Runtime license is invalid.  Call setIsDebugLicensing(true) for details."
                      )
                  : S("Runtime license is invalid: " + t),
                  (d = "");
              }
            }
          }
          const y = (0, t.getLicenseCookie)();
          if (
            ("" === d && y && "" !== y.key
              ? (S("Found license in cookie."),
                (d = y.key),
                e.SCRTCredentials.SetRuntimeLicenseKeyW(d),
                (h = e.SCRTCredentials.GetLicenseType()),
                h !== e.SCRTLicenseType.LICENSE_TYPE_FULL &&
                  h !== e.SCRTLicenseType.LICENSE_TYPE_TRIAL &&
                  h !== e.SCRTLicenseType.LICENSE_TYPE_REQUIRES_VALIDATION &&
                  (S(
                    "License cookie is invalid. " +
                      e.SCRTCredentials.GetLicenseErrors()
                  ),
                  (0, c.deleteCookie)("scLicense"),
                  (d = ""),
                  (h = e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY)))
              : B === u.LicenseCheckStatus.FetchingFromServer &&
                (B = u.LicenseCheckStatus.NoLicense),
            "" !== d)
          )
            if (
              (h === e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY &&
                (e.SCRTCredentials.SetRuntimeLicenseKeyW(d),
                (h = e.SCRTCredentials.GetLicenseType())),
              p.licenseManager2dState.setIsDev(
                e.SCRTCredentials.GetAllowDebugging()
              ),
              h === e.SCRTLicenseType.LICENSE_TYPE_FULL ||
                h === e.SCRTLicenseType.LICENSE_TYPE_TRIAL ||
                h === e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY)
            ) {
              if (
                ((B = u.LicenseCheckStatus.LicenseOK),
                S("license ok"),
                h === e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY && H && !z)
              ) {
                console.log(
                  "Using SciChart Community Edition. To use a license from the License Wizard, remove the call to UseCommunityLicense"
                );
                const t = e.SCRTCredentials.GetLicenseDaysRemaining();
                console.log(
                  `The community license is valid for 6 months from the date the version in use was released.  This version ${
                    o.libraryVersion
                  } has ${t} day${1 === t ? "" : "s"} remaining`
                ),
                  (z = !0);
              }
            } else if (e.SCRTCredentials.RequiresValidation())
              if (
                (S("license requires validation"),
                H && p.licenseManager2dState.getIsDev())
              )
                e.SCRTCredentials.ResetRuntimeLicense(),
                  (0, c.deleteCookie)("scLicense"),
                  (B = u.LicenseCheckStatus.DevKeyInRuntimeKey);
              else if (y.expiry > new Date() && y.key === d) {
                S("current token in cookie");
                const t = k(y.token, e);
                (h = e.SCRTCredentials.GetLicenseType()),
                  (h !== e.SCRTLicenseType.LICENSE_TYPE_FULL &&
                    h !== e.SCRTLicenseType.LICENSE_TYPE_TRIAL) ||
                    (B = u.LicenseCheckStatus.LicenseOK);
                const r = Math.floor(new Date().getTime() / 1e3);
                1e3 * t > y.expiry.getTime() && O(d, y.token, t, r);
                const s = 86400,
                  o = (new Date().getTime() - y.lastValidated.getTime()) / 1e3;
                S(
                  `License expires in ${
                    t - r
                  } seconds.  Last validated ${o} seconds ago`
                ),
                  o > s &&
                    B !== u.LicenseCheckStatus.ValidatingDeveloperLicense &&
                    ((B = u.LicenseCheckStatus.ValidatingDeveloperLicense),
                    V(e, i));
              } else
                B === u.LicenseCheckStatus.NoLicense &&
                  ((B = u.LicenseCheckStatus.ValidatingDeveloperLicense),
                  V(e, i));
            else
              S("license is invalid: " + e.SCRTCredentials.GetLicenseErrors());
          if (
            (S("checkstatus: " + u.LicenseCheckStatus[B]),
            B === u.LicenseCheckStatus.NoLicense)
          ) {
            if (h === e.SCRTLicenseType.LICENSE_TYPE_COMMUNITY && !z) {
              console.log(
                "Defaulting to SciChart Community Edition. Usage constitutes acceptance of our EULA and terms at https://www.scichart.com/community-licensing. See https://store.scichart.com for commercial licensing options."
              );
              const t = e.SCRTCredentials.GetLicenseDaysRemaining();
              console.log(
                `The community license is valid for 6 months from the date the version in use was released.  This version ${
                  o.libraryVersion
                } has ${t} day${1 === t ? "" : "s"} remaining`
              ),
                !s.IS_TEST_ENV &&
                  (null ===
                    (l =
                      null === document || void 0 === document
                        ? void 0
                        : document.location) || void 0 === l
                    ? void 0
                    : l.hostname.startsWith("localhost")) &&
                  b &&
                  console.log(
                    "SciChart is looking for a paid developer activation from the scichart licensing wizard... To disable this call SciChartSurface.UseCommunityLicense()"
                  ),
                (z = !0);
            }
            void 0 === E &&
              b &&
              ((B = u.LicenseCheckStatus.StartLookingForLicenseWizard),
              p.licenseManager2dState.setIsDev(!0),
              I(e, i));
          }
          void 0 !== e &&
            ((0, t.updateLicenseDisplay)((0, t.getLicenseInfo)(e), i, !0, !1),
            M.updateLicenseDisplay3D());
        };
        let Y = () => {
          console.error("Modal not initialized");
        };
        const G = (e, i, r) => {
            let s,
              o = !1;
            F && (F.style.display = "none"),
              (H = !1),
              O(e, null, null, null),
              void 0 !== i &&
                (i.SCRTCredentials.SetRuntimeLicenseKeyW(e),
                (o = i.SCRTCredentials.RequiresValidation()),
                (s =
                  i.SCRTCredentials.GetLicenseType() ===
                  i.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED),
                (0, t.updateLicenseDisplay)(
                  (0, t.getLicenseInfo)(i),
                  r,
                  !0,
                  !0
                ));
            const a = M.setNewLicense3D(e);
            return (
              void 0 !== a &&
                ((o = a.requiresValidation), (s = a.trialExpired)),
              { requiresValidation: o, trialExpired: s }
            );
          },
          X = new a.Dictionary(),
          j = (e, t) => {
            if (X.containsKey(e)) return;
            const i = document.styleSheets;
            if (0 === i.length) {
              const e = document.createElement("style");
              e.appendChild(document.createTextNode("")),
                document.head.appendChild(e);
            }
            const r = i[i.length - 1],
              s = r.insertRule(t, r.cssRules.length);
            X.add(e, s);
          },
          W = "licenseMessage";
        let U = null,
          $ = null;
        const q = (e, t) => {
            if (!e) return;
            const i = t.cloneNode(!0),
              r = e.getElementsByClassName(W);
            if (r.length > 0) {
              const t = r[0];
              e.replaceChild(i, t);
            } else e.appendChild(i);
            b && (i.onclick = Y);
          },
          K = (e, t) => {
            let i = u.LicenseType.NoLicense;
            switch (e) {
              case t.SCRTLicenseType.LICENSE_TYPE_NO_LICENSE:
                i = u.LicenseType.NoLicense;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_TRIAL:
                i = u.LicenseType.Trial;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_COMMUNITY:
                i = u.LicenseType.Community;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_FULL:
                i = u.LicenseType.Full;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_FULL_EXPIRED:
                i = u.LicenseType.Full_Expired;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED:
                i = u.LicenseType.Trial_Expired;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_SUBSCRIPTION_EXPIRED:
                i = u.LicenseType.Subscription_Expired;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_INVALID_DEVELOPER_LICENSE:
                i = u.LicenseType.Invalid_Developer;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_REQUIRES_VALIDATION:
                i = u.LicenseType.Requres_Validation;
                break;
              case t.SCRTLicenseType.LICENSE_TYPE_INVALID_LICENSE:
                i = u.LicenseType.Invalid;
            }
            return i;
          };
        let Z, J, Q;
        t.getLicenseInfo = (e) => {
          const t = e.SCRTCredentials.GetLicenseType(),
            i = K(t, e),
            r = e.SCRTCredentials.GetLicenseDaysRemaining();
          if (
            (B === u.LicenseCheckStatus.LicenseOK ||
              i === u.LicenseType.Community) &&
            p.licenseManager2dState.getLicenseType() !== i
          ) {
            i === u.LicenseType.Community
              ? p.licenseManager2dState.setOrderId("Community")
              : p.licenseManager2dState.setOrderId(
                  e.SCRTCredentials.GetEncryptedOrderId()
                ),
              p.licenseManager2dState.setProductCode(
                e.SCRTCredentials.GetProductCode()
              ),
              p.licenseManager2dState.setLicenseType(i),
              p.licenseManager2dState.setDevCount(
                e.SCRTCredentials.GetDeveloperCount()
              );
            const t = e.SCRTCredentials.HasFeature("TE");
            p.licenseManager2dState.setTelemetry(
              t === e.SCRTLicenseType.LICENSE_TYPE_FULL ||
                t === e.SCRTLicenseType.LICENSE_TYPE_TRIAL
            );
          }
          return (
            m && S(e.SCRTCredentials.Dump()),
            {
              licenseType: i,
              daysRemaining: r,
              error: e.SCRTCredentials.GetLicenseErrors(),
            }
          );
        };
        const ee = (e, i, r, s) => {
          null == U &&
            ((U = document.createElement("div")),
            (U.className = W),
            ($ = document.createElement("div")),
            ($.className = "licenseMessageChild"),
            ($.innerHTML = ""),
            U.appendChild($));
          let o = "",
            a = "",
            n = "";
          const { licenseType: l, daysRemaining: c, error: g } = e;
          if ((r && l !== Z) || (!r && l !== J) || B !== Q) {
            if (
              ((Q = B),
              r ? (Z = l) : (J = l),
              S((r ? "2D" : "3D") + " license status changed"),
              i.invalidateElement(),
              i.otherSurfaces.map((e) => e.invalidateElement()),
              B === u.LicenseCheckStatus.StartLookingForLicenseWizard)
            )
              return;
            const e =
                '<a href="https://www.scichart.com/licensing-scichart-js"  target="_blank" style="color: white">www.scichart.com/licensing-scichart-js</a>',
              s =
                '<a href="https://www.scichart.com/contact-us/"  target="_blank" style="color: orange">contact support</a>';
            l === u.LicenseType.NoLicense
              ? ((o = "You need to have a license to use SciChart.  "),
                (n = `Instructions can be seen at ${e}`))
              : l === u.LicenseType.Invalid
              ? ((o = g.startsWith("License is not valid for this domain")
                  ? `Sorry! The runtime license key is not valid for this domain</br>\n                Please ${s} with your OrderID if you believe this to be incorrect. <u>Click for more information</u></br>\n                For local development, make sure the Licensing Wizard is running and activated.</br>\n                To use Community Edition, remove the call to setRuntimeLicenseKey`
                  : g.startsWith(
                      "This version of SciChart can no longer be trialed"
                    )
                  ? "Sorry! This version of SciChart is too old to be trialed.  Please update to the latest version"
                  : g.startsWith(
                      "This version of SciChart can no longer be used for the community edition"
                    )
                  ? "Sorry! This version of SciChart is too old to be used for the community edition.  Please update to the latest version"
                  : `Sorry! Your license key appears to be invalid</br>Please ${s} with your OrderID if you believe this to be incorrect.`),
                (n = `Instructions can be seen at ${e}`))
              : l === u.LicenseType.Invalid_Developer
              ? ((o =
                  "Sorry! You need a developer license to use SciChart on a domain not included in your runtime key."),
                (n = `Instructions can be seen at ${e}</br>\n                    Please ${s} with your OrderID if you are experiencing issues.`))
              : l === u.LicenseType.Requres_Validation
              ? ((o = p.licenseManager2dState.getIsDev()
                  ? "Your developer license must be validated by the SciChart Licensing Wizard running locally"
                  : "This runtime key must be validated by a server side key."),
                (n = `Instructions can be seen at ${e}</br>\n                    Please ${s} with your OrderID if you are experiencing issues.`))
              : l === u.LicenseType.Subscription_Expired
              ? ((o = "Sorry! Your support subscription has expired.<br>"),
                (n = `Please ${s} us if you would like to renew your subscription.`))
              : l === u.LicenseType.Trial_Expired && c < 1
              ? ((o = "Sorry! Your trial has expired."),
                (n = `Please ${s} if you require an extension.`))
              : l === u.LicenseType.Trial_Expired && c > 1
              ? ((o = "This version is too old to trial."),
                (n = `Please ${s} if you require an extension.`))
              : l === u.LicenseType.Trial && c <= 7
              ? (o = `You have ${c} day${
                  1 === c ? "" : "s"
                } remaining of the trial.`)
              : l === u.LicenseType.Community && c <= 7
              ? (o = `You have ${c} day${
                  1 === c ? "" : "s"
                } remaining on the community license for this version.  Please update to the latest version of SciChart`)
              : (l === u.LicenseType.Full ||
                  ((l === u.LicenseType.Trial ||
                    l === u.LicenseType.Community) &&
                    c > 7)) &&
                ((U.style.display = "none"), ($.innerHTML = "")),
              B !== u.LicenseCheckStatus.LicenseOK
                ? (B === u.LicenseCheckStatus.FetchingFromServer &&
                    (a = "<br>Fetching license from server..."),
                  B === u.LicenseCheckStatus.LookingForLicenseWizard
                    ? (l === u.LicenseType.Community && (0, d.sendTelemetry)(),
                      (a = "<br>Looking for Licensing Wizard..."))
                    : B === u.LicenseCheckStatus.FailedToFindLicenseWizard
                    ? (a = p.licenseManager2dState.getIsDev()
                        ? "<br><u>Could not connect to the Licensing Wizard.  Please run it, then reload this page.</u>"
                        : "<br><u>Could not connect to the server licensing endpoint</u>")
                    : B === u.LicenseCheckStatus.ValidatingDeveloperLicense
                    ? (a = p.licenseManager2dState.getIsDev()
                        ? "<br><u>Trying to validate your license..."
                        : "<br><u>Trying to validate your license with the server...</u>.")
                    : B ===
                      u.LicenseCheckStatus.FailedToValidateDeveloperLicense
                    ? (a = p.licenseManager2dState.getIsDev()
                        ? "<br><u>Failed to validate your developer license with the Licensing Wizard.  If you have changed your activated license, try clearing your cookies for this site.</u>."
                        : "<br><u>Failed to validate the runtime license with the server</u>.")
                    : B === u.LicenseCheckStatus.NoLicenseInWizard &&
                      l === u.LicenseType.NoLicense
                    ? (a =
                        "<br><u>Please use the Licensing wizard to start a trial or activate a serial key.  Click for more information</u>.")
                    : B === u.LicenseCheckStatus.DevKeyInRuntimeKey
                    ? (a =
                        "<br><u>You have set a developer key as a runtime key, which will not work on any other machine.  Click for more information</u>")
                    : l === u.LicenseType.Trial_Expired && c > 1
                    ? (a =
                        "<br><u>Please update to the latest version of SciChart. Click for more information</u>.")
                    : B === u.LicenseCheckStatus.NoLicenseInWizard &&
                      l === u.LicenseType.Trial_Expired &&
                      (a =
                        "<br><u>Please activate a serial key in the Licensing Wizard, or contact sales for an extension.  Click for more information</u>."),
                  o &&
                    ((U.style.width = "100%"),
                    (U.style.height = "100%"),
                    (U.style.top = "0"),
                    (U.style.left = "0"),
                    (U.style.position = "absolute"),
                    (U.style.pointerEvents = "auto"),
                    (U.style.cursor = "pointer"),
                    (U.style.background = h.EColor.BackgroundColor),
                    (U.style.zIndex = "10"),
                    ($.style.display = "block"),
                    ($.style.color = "orange"),
                    ($.style.width = "80%"),
                    ($.style.position = "absolute"),
                    ($.style.left = "50%"),
                    ($.style.top = "50%"),
                    ($.style.transform = "translate(-50%, -50%)"),
                    ($.style.textAlign = "center"),
                    ($.style.pointerEvents = "auto"),
                    b
                      ? (($.innerHTML = o + a),
                        ((e, i) => {
                          (F = document.createElement("div")),
                            (F.id = "scichartLicenseModal"),
                            (F.style.display = "none"),
                            (F.style.position = "fixed"),
                            (F.style.zIndex = "100"),
                            (F.style.left = "0"),
                            (F.style.top = "0"),
                            (F.style.width = "100%"),
                            (F.style.height = "100%"),
                            (F.style.overflow = "auto"),
                            (F.style.backgroundColor = "rgb(0,0,0)"),
                            (F.style.backgroundColor = "rgba(0,0,0,0.4)");
                          const r = document.createElement("div");
                          (r.style.backgroundColor = "#fefefe"),
                            (r.style.position = "absolute"),
                            (r.style.left = "50%"),
                            (r.style.top = "50%"),
                            (r.style.transform = "translate(-50%, -50%)"),
                            (r.style.borderRadius = "4px"),
                            (r.style.padding = "20px"),
                            (r.style.maxWidth = "460px"),
                            F.appendChild(r);
                          const s = document.createElement("div");
                          (s.style.display = "block"), r.appendChild(s);
                          const o = document.createElement("div");
                          (o.style.display = "none"),
                            r.appendChild(o),
                            (Y = () => {
                              (F.style.display = "block"),
                                (s.style.display = "block"),
                                (o.style.display = "none");
                            });
                          const a = document.createElement("div");
                          (a.style.display = "flex"),
                            (a.style.padding = "8px 16px"),
                            (a.style.backgroundColor = "#5cb85c"),
                            (a.style.color = "white"),
                            s.appendChild(a);
                          const n = document.createElement("div");
                          (n.style.flexGrow = "1"),
                            (n.innerHTML = e),
                            a.appendChild(n),
                            j(
                              "licenseModalClose",
                              ".licenseModalClose {\n        color: #aaa;\n        float: right;\n        font-size: 28px;\n        font-weight: bold;\n      }"
                            ),
                            j(
                              "licenseModalClose:hover",
                              ".licenseModalClose:hover {\n        color: black;\n        text-decoration: none;\n        cursor: pointer;\n      }"
                            ),
                            j(
                              "licenseModalClose:focus",
                              ".licenseModalClose:focus {\n        color: black;\n        text-decoration: none;\n        cursor: pointer;\n      }"
                            );
                          const l = document.createElement("span");
                          (l.innerHTML = "&times;"),
                            (l.className = "licenseModalClose"),
                            a.appendChild(l);
                          const d = document.createElement("div");
                          d.innerHTML =
                            "If you contact support with a licensing issue, we will ask you to send us the license debug log.\n    To toggle License debug mode use the button below and refresh the page, then check the console output.  \n    When copying the log, make sure to start from the beginning, indicated by the reported version number";
                          const h = document.createElement("button");
                          h.style.margin = "10px";
                          const u = () => {
                            h.textContent = m
                              ? "Disable licensing debug mode"
                              : "Enable licensing debug mode";
                          };
                          u(),
                            (h.onclick = () => {
                              (0, t.setIsDebugLicensing)(!m, !0), u();
                            }),
                            s.appendChild(d),
                            s.appendChild(h);
                          const c = document.createElement("div");
                          (c.innerHTML = i),
                            (c.style.padding = "8px 16px"),
                            (c.style.backgroundColor = "#5cb85c"),
                            (c.style.color = "white"),
                            s.appendChild(c),
                            (window.onclick = (e) => {
                              e.target === F && (F.style.display = "none");
                            });
                          const p = document.querySelector(`[id='${F.id}']`);
                          null == p
                            ? document.body.appendChild(F)
                            : document.body.replaceChild(F, p),
                            (l.onclick = () => {
                              F.style.display = "none";
                            });
                        })(o, n))
                      : ($.innerHTML =
                          o +
                          '<br><a href="https://www.scichart.com/licensing-scichart-js/"  target="_blank" style="color: white">Click here for licensing information</a>')))
                : (0, d.sendTelemetry)();
          }
          q(i.domDivContainer, U),
            s &&
              i.otherSurfaces.forEach((e) => {
                q(e.domDivContainer, U);
              });
        };
        (t.updateLicenseDisplay = (e, t, i, r) =>
          v.updateLicenseDisplay(e, t, i, r)),
          (t.licenseManager = {
            clear: () => {
              n.sciChartDestinations.length ||
                n.sciChartSingleDestinations.length ||
                n.sciChart3DDestinations.length ||
                (clearTimeout(E),
                clearTimeout(R),
                (0, t.setCallbacks3D)(L),
                ($ = null),
                (U = null));
            },
            setRuntimeLicenseKey: (e) => (0, t.setRuntimeLicenseKey)(e),
            setIsDebugLicensing: (e) => (0, t.setIsDebugLicensing)(e),
            setLicenseCallback: (e) => (0, t.setLicenseCallback)(e),
            setServerLicenseEndpoint: (e) =>
              ((e) => {
                w = e;
              })(e),
            applyLicense2D: (e, i, r) =>
              ((e, i, r) => {
                S("applyLicense 2D"),
                  r || N
                    ? (0, t.applyLicense)(e, i)
                    : B !== u.LicenseCheckStatus.LicenseOK &&
                      (0, t.updateLicenseDisplay)(
                        (0, t.getLicenseInfo)(e),
                        i,
                        !0,
                        !1
                      ),
                  r || (N = !1);
              })(e, i, r),
          });
      },
      2056: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.licenseManager2dState = void 0);
        const r = i(48125);
        let s = !1,
          o = "",
          a = "",
          n = 1,
          l = r.LicenseType.NoLicense,
          d = !1;
        t.licenseManager2dState = {
          getIsDev: () => s,
          setIsDev: (e) => {
            s = e;
          },
          getOrderId: () => o,
          setOrderId: (e) => {
            o = e;
          },
          getProductCode: () => a,
          setProductCode: (e) => {
            a = e;
          },
          getLicenseType: () => l,
          setLicenseType: (e) => {
            l = e;
          },
          getDevCount: () => n,
          setDevCount: (e) => {
            n = e;
          },
          getTelemetry: () => d,
          setTelemetry: (e) => {
            d = e;
          },
        };
      },
      66570: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DefaultSciChartLoader = void 0);
        const r = i(23866);
        class s {
          addChartLoader(e, t) {
            this.addLoaderStyles(),
              r.Guard.notNull(e, "domDivContainer"),
              r.Guard.notNull(t, "theme");
            const i = document.createElement("div");
            (i.style.background = t.loadingAnimationBackground),
              (i.style.height = "100%"),
              (i.style.width = "100%"),
              (i.style.position = "relative"),
              (i.style.zIndex = "11");
            const s = document.createElement("div"),
              o = `<div><span style="background: ${t.loadingAnimationForeground}"/></div>`;
            return (
              (s.innerHTML = o.repeat(8)),
              s.classList.add("scichart_loader"),
              i.appendChild(s),
              e.appendChild(i),
              i
            );
          }
          removeChartLoader(e, t) {
            try {
              e.removeChild(t);
            } catch (e) {
              console.error(e);
            }
          }
          toJSON() {
            return { type: this.type };
          }
          addLoaderStyles() {
            if (s.hasStyles) return;
            const e = document.head,
              t = document.createElement("style");
            (t.id = s.sciChartLoaderStylesId),
              e.appendChild(t),
              t.appendChild(document.createTextNode(o)),
              (s.hasStyles = !0);
          }
        }
        (t.DefaultSciChartLoader = s),
          (s.hasStyles = !1),
          (s.sciChartLoaderStylesId = "scichart_default_loader_styles_id");
        const o =
          "\n    .scichart_loader {\n      display: inline-block;\n      position: relative;\n      width: 80px;\n      height: 80px;\n      top: 50%;\n      transform: translateY(-50%);\n    }\n    .scichart_loader div {\n      animation: scichart_loader 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n      transform-origin: 40px 40px;\n    }\n    .scichart_loader div span {\n      display: block;\n      position: absolute;\n      width: 7px;\n      height: 7px;\n      border-radius: 50%;\n      margin: -4px 0 0 -4px;\n    }\n    .scichart_loader div:nth-child(1) {\n      animation-delay: -0.036s;\n    }\n    .scichart_loader div:nth-child(1) span {\n      top: 63px;\n      left: 63px;\n    }\n    .scichart_loader div:nth-child(2) {\n      animation-delay: -0.072s;\n    }\n    .scichart_loader div:nth-child(2) span {\n      top: 68px;\n      left: 56px;\n    }\n    .scichart_loader div:nth-child(3) {\n      animation-delay: -0.108s;\n    }\n    .scichart_loader div:nth-child(3) span {\n      top: 71px;\n      left: 48px;\n    }\n    .scichart_loader div:nth-child(4) {\n      animation-delay: -0.144s;\n    }\n    .scichart_loader div:nth-child(4) span {\n      top: 72px;\n      left: 40px;\n    }\n    .scichart_loader div:nth-child(5) {\n      animation-delay: -0.18s;\n    }\n    .scichart_loader div:nth-child(5) span {\n      top: 71px;\n      left: 32px;\n    }\n    .scichart_loader div:nth-child(6) {\n      animation-delay: -0.216s;\n    }\n    .scichart_loader div:nth-child(6) span {\n      top: 68px;\n      left: 24px;\n    }\n    .scichart_loader div:nth-child(7) {\n      animation-delay: -0.252s;\n    }\n    .scichart_loader div:nth-child(7) span {\n      top: 63px;\n      left: 17px;\n    }\n    .scichart_loader div:nth-child(8) {\n      animation-delay: -0.288s;\n    }\n    .scichart_loader div:nth-child(8) span {\n      top: 56px;\n      left: 12px;\n    }\n    @keyframes scichart_loader {\n      0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n";
      },
      25606: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createSvgLayer = t.ELayerClass = void 0);
        const r = i(62049),
          s = i(68021),
          o = i(14184),
          a = i(86127);
        var n, l;
        !(function (e) {
          (e[(e.canvasWebGL = 0)] = "canvasWebGL"),
            (e[(e.canvas2D = 1)] = "canvas2D"),
            (e[(e.svg = 2)] = "svg");
        })(n || (n = {})),
          (function (e) {
            (e.DIV_ROOT = "div-root"),
              (e.SVG_ROOT = "svg-root"),
              (e.BACK_DIV_ROOT = "back-div-root"),
              (e.FRONT_DIV_ROOT = "front-div-root"),
              (e.BACK_SVG_ROOT = "back-svg-root"),
              (e.FRONT_SVG_ROOT = "front-svg-root"),
              (e.ADORNER_SVG_ROOT = "adorner-svg-root"),
              (e.CANVAS_ROOT = "canvas-root");
          })((l = t.ELayerClass || (t.ELayerClass = {})));
        const d = (e) => `${e}_2D`,
          h = (e) => {
            const t = e.style.maxHeight;
            if (t && t.includes("px")) {
              const e = parseInt(t.replace("px", ""), 10);
              if (!isNaN(e)) return e;
            }
          };
        t.createSvgLayer = (e, t, i) => {
          const r = document.createElementNS(
            "http://www.w3.org/2000/svg",
            "svg"
          );
          return (
            (r.id = e),
            r.setAttribute("width", t.toString()),
            r.setAttribute("height", i.toString()),
            r.setAttribute("role", "img"),
            r.setAttribute("xmlns", "http://www.w3.org/2000/svg"),
            (r.style.position = "absolute"),
            (r.style.display = "block"),
            r.classList.add(l.SVG_ROOT),
            r
          );
        };
        const u = {
          checkChartDivExists: (e) => {
            if ("string" == typeof e) {
              const t = document.querySelectorAll(`[id=${e}]`).length;
              t > 1
                ? console.error(
                    `Please provide a unique ID for each chart div element, "${e}" it is not a unique identifier`
                  )
                : 0 === t &&
                  console.error(
                    `Chart div element with the ID "${e}" is not present in the DOM`
                  );
            } else if (!e)
              throw new Error("Provided div element doesn't exist!");
          },
          ECanvasType: n,
          getCanvas2dId: d,
          initCanvas: (e, i, s, u = n.canvasWebGL, c, p) => {
            r.WebGlHelper.initialize(), a.DpiHelper.initialize();
            const g = ((e) => {
              const t =
                "string" == typeof e ? document.querySelector(`#${e}`) : e;
              if (!t)
                throw new Error(`Check div element with id "${t.id}" exists`);
              if ("div" !== t.nodeName.toLowerCase())
                throw new Error(
                  `Element with id "${t.id}" should be of type div`
                );
              return t;
            })(e);
            (g.innerHTML = ""),
              "" === g.style.position && (g.style.position = "relative");
            const y = g.id,
              { offsetWidth: f, offsetHeight: v } = g,
              m = h(g),
              {
                width: S,
                height: P,
                aspectRatio: C,
              } = ((e, t, i, r = 0, s = 0) => {
                let o;
                o = r && s ? r / s : e && t ? void 0 : 1.5;
                const a = Math.round(e || 600);
                if (o) {
                  let e = Math.round(a / o);
                  return (
                    e > i && (e = i), { width: a, height: e, aspectRatio: o }
                  );
                }
                return { width: a, height: Math.round(t), aspectRatio: o };
              })(f, v, m, i, s);
            !c && C && (g.style.aspectRatio = `${C}`);
            const x = document.createElement("div");
            (x.id = `${y}_background_div`),
              x.classList.add(l.DIV_ROOT, l.BACK_DIV_ROOT),
              (x.style.width = "100%"),
              (x.style.height = "100%"),
              (x.style.position = "absolute"),
              (x.style.pointerEvents = "none"),
              g.appendChild(x);
            const b = (0, t.createSvgLayer)(`${y}_BACKGROUND_SVG`, S, P);
            let A;
            (b.style.width = "100%"),
              (b.style.height = "100%"),
              (b.style.pointerEvents = "none"),
              b.classList.add(l.BACK_SVG_ROOT),
              g.appendChild(b),
              u === n.canvasWebGL &&
                ((A = document.createElement("canvas")),
                (A.id = `${y}_WebGL`),
                A.classList.add(l.CANVAS_ROOT),
                (A.style.position = "absolute"),
                (A.style.display = "block"),
                (A.style.width = "100%"),
                (A.style.height = "100%"),
                r.WebGlHelper.getContext(A, {
                  premultipliedAlpha: !0,
                  antialias: o.SciChartSurfaceBase.AntiAliasWebGlBackbuffer,
                }),
                g.appendChild(A));
            const T = document.createElement("canvas");
            (T.id = d(y)),
              T.classList.add(l.CANVAS_ROOT),
              (T.style.width = "100%"),
              (T.style.height = "100%"),
              a.DpiHelper.setSize(T, S, P),
              (T.style.position = "absolute"),
              u !== n.canvas2D && (T.style.pointerEvents = "none"),
              u === n.canvasWebGL
                ? (T.style.display = "none")
                : (T.style.display = "block"),
              g.appendChild(T),
              (T.style.touchAction = null != p ? p : "none"),
              (T.onselectstart = () => !1);
            const E = (0, t.createSvgLayer)(`${y}_SVG`, S, P);
            (E.style.width = "100%"),
              (E.style.height = "100%"),
              u !== n.svg && (E.style.pointerEvents = "none"),
              E.classList.add(l.FRONT_SVG_ROOT),
              g.appendChild(E);
            const R = (0, t.createSvgLayer)(`${y}_Adorner`, S, P);
            (R.style.pointerEvents = "none"),
              (R.style.width = "100%"),
              (R.style.height = "100%"),
              (R.style.zIndex = "1"),
              R.classList.add(l.ADORNER_SVG_ROOT),
              g.appendChild(R);
            const w = document.createElement("div");
            return (
              (w.id = `${y}_div`),
              w.classList.add(l.DIV_ROOT, l.FRONT_DIV_ROOT),
              (w.style.width = "100%"),
              (w.style.height = "100%"),
              (w.style.position = "relative"),
              (w.style.pointerEvents = "none"),
              (w.style.textAlign = "center"),
              g.appendChild(w),
              u === n.canvasWebGL &&
                A.addEventListener(
                  "webglcontextlost",
                  (e) => {
                    console.warn("WebGL context lost. Reloading the page."),
                      e.preventDefault(),
                      location.reload();
                  },
                  !1
                ),
              {
                domChartRoot: g,
                domCanvasWebGL: A,
                domCanvas2D: T,
                domSvgContainer: E,
                domSvgAdornerLayer: R,
                domDivContainer: w,
                domSeriesBackground: x,
                domBackgroundSvgContainer: b,
                aspect: C,
                disableAspect: c,
              }
            );
          },
          subscribeToResize: (e, t, i, r) => {
            const o = new ResizeObserver((t) => {
              for (const r of t) {
                let t, o;
                r.contentRect
                  ? ((t = r.contentRect.width), (o = r.contentRect.height))
                  : r.contentBoxSize
                  ? r.contentBoxSize.inlineSize
                    ? (t = r.contentBoxSize.inlineSize)
                    : r.contentBoxSize[0] &&
                      (t = r.contentBoxSize[0].inlineSize)
                  : (console.error("ResizeObserver is not supported"),
                    (t = 900));
                const n = h(e);
                n && o > n && (o = n);
                const l = 0 !== t && 0 !== o,
                  d =
                    i.domCanvas2D.width !== t * a.DpiHelper.PIXEL_RATIO ||
                    i.domCanvas2D.height !== o * a.DpiHelper.PIXEL_RATIO;
                l &&
                  d &&
                  setTimeout(() => {
                    s.PerformanceDebugHelper.mark(
                      s.EPerformanceMarkType.Resize,
                      { contextId: i.id }
                    ),
                      i.changeViewportSize(t, o);
                  }, 0);
              }
            });
            return (
              o.observe(e, { box: "border-box" }),
              { delete: () => o.disconnect() }
            );
          },
        };
        t.default = u;
      },
      66549: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.AnimationToken = void 0),
          (t.AnimationToken = class {
            constructor(e, t) {
              (this.token = e), (this.onCompleted = t);
            }
            cancelAnimation() {
              this.token && (clearInterval(this.token), (this.token = void 0));
            }
            completeAnimation() {
              this.token && (clearInterval(this.token), (this.token = void 0)),
                this.onCompleted && this.onCompleted();
            }
          });
      },
      82229: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.SeriesAnimationFiniteStateMachine =
            t.AnimationFiniteStateMachine =
            t.EAnimationStateTransition =
            t.EAnimationState =
              void 0);
        const r = i(64645);
        var s, o;
        !(function (e) {
          (e.InitialState = "InitialState"),
            (e.Delayed = "Delayed"),
            (e.Running = "Running"),
            (e.Completed = "Completed");
        })((s = t.EAnimationState || (t.EAnimationState = {}))),
          (function (e) {
            (e.NoChange = "NoChange"),
              (e.InitialState_Delayed = "InitialState_Delayed"),
              (e.InitialState_Running = "InitialState_Running"),
              (e.InitialState_Completed = "InitialState_Completed"),
              (e.Delayed_Running = "Delayed_Running"),
              (e.Running_Completed = "Running_Completed");
          })(
            (o =
              t.EAnimationStateTransition || (t.EAnimationStateTransition = {}))
          );
        class a {
          constructor(e) {
            (this.stateProperty = s.InitialState), (this.animationProperty = e);
          }
          get state() {
            return this.stateProperty;
          }
          get animation() {
            return this.animationProperty;
          }
          is(e) {
            return e.includes(this.stateProperty);
          }
          update(e) {
            return this.stateProperty === s.InitialState
              ? this.animationProperty.delay
                ? (this.toDelayed(), o.InitialState_Delayed)
                : this.animationProperty.duration
                ? (this.toRunning(), o.InitialState_Running)
                : (this.toCompleted(), o.InitialState_Completed)
              : this.stateProperty === s.Delayed
              ? this.updateDelayedState(e)
              : this.stateProperty === s.Running
              ? this.updateRunningState(e)
              : o.NoChange;
          }
          get animationProgress() {
            if (this.stateProperty === s.Running) {
              const e = r.NumberUtil.constrain(
                this.animationElapsed / this.animationProperty.duration,
                0,
                1
              );
              return this.animationProperty.ease(e);
            }
            return this.stateProperty === s.Completed ? 1 : 0;
          }
          toCompleted() {
            this.stateProperty = s.Completed;
          }
          validate(e, t) {
            if (!e.includes(this.stateProperty))
              throw Error(
                `Transition from state ${this.stateProperty} to ${t} if forbidden`
              );
          }
          toDelayed() {
            (this.animationDelayStartTimestamp = Date.now()),
              (this.animationDelayElapsed = 0),
              (this.stateProperty = s.Delayed);
          }
          toRunning() {
            (this.animationStartTimestamp = Date.now()),
              (this.animationElapsed = 0),
              (this.stateProperty = s.Running);
          }
          updateDelayedState(e) {
            return (
              (this.animationDelayElapsed += e),
              this.animationDelayElapsed >= this.animationProperty.delay
                ? (this.toRunning(), o.Delayed_Running)
                : o.NoChange
            );
          }
          updateRunningState(e) {
            return (
              (this.animationElapsed += e),
              this.animationElapsed >= this.animationProperty.duration
                ? (this.toCompleted(), o.Running_Completed)
                : o.NoChange
            );
          }
        }
        (t.AnimationFiniteStateMachine = a),
          (t.SeriesAnimationFiniteStateMachine = class extends a {
            constructor(e, t) {
              super(e), t && (this.initialStylesProperty = e.getSeriesStyle(t));
            }
            get animation() {
              return this.animationProperty;
            }
            get initialStyles() {
              return this.initialStylesProperty;
            }
          });
      },
      90995: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.animateAny = void 0);
        const r = i(66549),
          s = i(23866),
          o = i(64645);
        t.animateAny = function (e, t, i, a, n, l, d) {
          s.Guard.notNull(a, "onAnimate"),
            s.Guard.notNull(t, "from"),
            s.Guard.notNull(i, "to"),
            s.Guard.notNull(n, "interpolate");
          const h = new Date().getTime() + e;
          a(t);
          const u = new r.AnimationToken(
            setInterval(() => {
              const r = new Date().getTime(),
                s = o.NumberUtil.constrain(1 - (h - r) / e, 0, 1),
                l = d(s),
                c = n(t, i, l);
              a(c),
                r > h && (1 !== l && a(n(t, i, d(1))), u.completeAnimation());
            }, 16.67),
            l
          );
          return u;
        };
      },
      33485: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.DoubleAnimator = void 0);
        const r = i(90995),
          s = i(10276);
        class o {
          static animate(e, t, i, a, n, l = s.easing.outExpo) {
            return (0, r.animateAny)(i, e, t, a, o.interpolate, n, l);
          }
          static interpolate(e, t, i) {
            return (t - e) * i + e;
          }
        }
        t.DoubleAnimator = o;
      },
      10276: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.autoReverseEasing = t.easing = void 0),
          (t.easing = {
            linear: (e) => e,
            quadratic: (e) => e * (-e * e * e + 4 * e * e - 6 * e + 4),
            cubic: (e) => e * (4 * e * e - 9 * e + 6),
            elastic: (e) =>
              e *
              (33 * e * e * e * e -
                106 * e * e * e +
                126 * e * e -
                67 * e +
                15),
            inQuad: (e) => e * e,
            outQuad: (e) => e * (2 - e),
            inOutQuad: (e) => (e < 0.5 ? 2 * e * e : (4 - 2 * e) * e - 1),
            inCubic: (e) => e * e * e,
            outCubic: (e) => --e * e * e + 1,
            inOutCubic: (e) =>
              e < 0.5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1,
            inQuart: (e) => e * e * e * e,
            outQuart: (e) => 1 - --e * e * e * e,
            inOutQuart: (e) =>
              e < 0.5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e,
            inQuint: (e) => e * e * e * e * e,
            outQuint: (e) => 1 + --e * e * e * e * e,
            inOutQuint: (e) =>
              e < 0.5 ? 16 * e * e * e * e * e : 1 + 16 * --e * e * e * e * e,
            inSine: (e) => 1 - Math.cos(e * (Math.PI / 2)),
            outSine: (e) => Math.sin(e * (Math.PI / 2)),
            inOutSine: (e) => -(Math.cos(Math.PI * e) - 1) / 2,
            inExpo: (e) => Math.pow(2, 10 * (e - 1)),
            outExpo: (e) => (1 === e ? 1 : 1 - Math.pow(2, -10 * e)),
            inOutExpo: (e) =>
              (e /= 0.5) < 1
                ? Math.pow(2, 10 * (e - 1)) / 2
                : (e--, (2 - Math.pow(2, -10 * e)) / 2),
            inCirc: (e) => 1 - Math.sqrt(1 - e * e),
            outCirc: (e) => Math.sqrt(1 - (e -= 1) * e),
            inOutCirc: (e) =>
              (e /= 0.5) < 1
                ? -(Math.sqrt(1 - e * e) - 1) / 2
                : ((e -= 2), (Math.sqrt(1 - e * e) + 1) / 2),
          }),
          (t.autoReverseEasing = {
            linear: (e) => (e < 0.5 ? 2 * e : 2 - 2 * e),
          });
      },
      70162: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GenericAnimation = void 0);
        const r = i(73538),
          s = i(82229),
          o = i(10276);
        t.GenericAnimation = class {
          constructor(e) {
            var t, i, a, n;
            (this.delay = 0),
              (this.duration = 1e3),
              (this.ease = o.easing.linear),
              (this.id =
                null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                  ? t
                  : (0, r.generateGuid)()),
              (this.delay =
                null !== (i = null == e ? void 0 : e.delay) && void 0 !== i
                  ? i
                  : this.delay),
              (this.duration =
                null !== (a = null == e ? void 0 : e.duration) && void 0 !== a
                  ? a
                  : this.duration),
              (null == e ? void 0 : e.ease) &&
                "string" == typeof e.ease &&
                (e.ease = o.easing[e.ease]),
              (this.ease =
                null !== (n = null == e ? void 0 : e.ease) && void 0 !== n
                  ? n
                  : this.ease),
              (this.from = e.from),
              (this.to = e.to),
              (this.onAnimate = e.onAnimate),
              (this.onCompleted = null == e ? void 0 : e.onCompleted),
              (this.animationFSM = new s.AnimationFiniteStateMachine(this)),
              (null == e ? void 0 : e.setInitialValueImmediately) &&
                this.onAnimate(this.from, this.to, 0);
          }
          get isComplete() {
            return this.animationFSM.is([s.EAnimationState.Completed]);
          }
          reset() {
            this.animationFSM = new s.AnimationFiniteStateMachine(this);
          }
          update(e) {
            const t = this.animationFSM.update(e);
            [
              s.EAnimationStateTransition.InitialState_Running,
              s.EAnimationStateTransition.Delayed_Running,
            ].includes(t) && this.onAnimate(this.from, this.to, 0),
              this.animationFSM.is([
                s.EAnimationState.Running,
                s.EAnimationState.Completed,
              ]) &&
                this.onAnimate(
                  this.from,
                  this.to,
                  this.animationFSM.animationProgress
                ),
              [
                s.EAnimationStateTransition.Running_Completed,
                s.EAnimationStateTransition.InitialState_Completed,
              ].includes(t) &&
                this.onCompleted &&
                this.onCompleted();
          }
          cancel() {
            this.animationFSM.toCompleted();
          }
        };
      },
      31194: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumberRangeAnimator = void 0);
        const r = i(23866),
          s = i(98140),
          o = i(10276),
          a = i(70162);
        class n {
          static animate(e, t, i, r, s, l = o.easing.outExpo, d = !1) {
            return new a.GenericAnimation({
              from: e,
              to: t,
              duration: i,
              onAnimate: (e, t, i) => {
                const s = (d ? n.interpolateLog : n.interpolate)(e, t, i);
                r(s);
              },
              delay: 0,
              ease: l,
              onCompleted: s,
            });
          }
          static interpolate(e, t, i) {
            r.Guard.notNull(e, "from"), r.Guard.notNull(t, "to");
            const o = (t.min - e.min) * i + e.min,
              a = (t.max - e.max) * i + e.max;
            return new s.NumberRange(o, a);
          }
          static interpolateLog(e, t, i) {
            r.Guard.notNull(e, "from"), r.Guard.notNull(t, "to");
            const o = Math.pow(t.min / e.min, i) * e.min,
              a = Math.pow(t.max / e.max, i) * e.max;
            return new s.NumberRange(o, a);
          }
        }
        t.NumberRangeAnimator = n;
      },
      34238: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.checkBuildStamp = t.libraryVersion = void 0);
        const i = "2024-09-10T00:00:00";
        let r;
        (t.libraryVersion = "3.4.662"),
          (t.checkBuildStamp = (e) => {
            if (void 0 !== r) return r;
            if (!e) return !1;
            if (e.SCRTCredentials.GetBuildStamp) {
              const t = e.SCRTCredentials.GetBuildStamp();
              if (t === i) return (r = !0), r;
              console.warn(`Build stamp diff: JS - ${i}; WASM - ${t}`);
            }
            return (
              console.warn(
                "The SciChart webassembly module is from a different version than the javascript that is calling it.\n    Ensure that your build process is copying the correct wasm and data files."
              ),
              (r = !1),
              r
            );
          });
      },
      55023: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createWasmContextRevocableProxy =
            t.WasmContextProxyHandler =
            t.WasmObjectConstructorProxyHandler =
            t.DeletableEntityProxyHandler =
            t.DeletableEntity =
            t.createTrackableProxy =
              void 0);
        const r = i(27307);
        (t.createTrackableProxy = (e, t = !1) => {
          const i = (0, r.generateIdentifier)(e),
            o = Proxy.revocable(e, new s(i));
          return (
            r.MemoryUsageHelper.objectRegistry.add(e, i, {
              proxy: o.proxy,
              revocableToken: o,
              isWasmObject: t,
            }),
            o.proxy
          );
        }),
          (t.DeletableEntity = class {
            constructor(e) {}
          });
        class s {
          constructor(e) {
            this.disposableEntityId = e;
          }
          construct(e, t) {
            return (
              console.warn(
                "construct called on Deletable",
                this.disposableEntityId
              ),
              e
            );
          }
          apply(e, t, i) {
            console.warn("apply called on Deletable", this.disposableEntityId);
          }
          get(e, t, i) {
            return "delete" === t
              ? (...i) => (
                  r.MemoryUsageHelper.objectRegistry.remove(
                    this.disposableEntityId
                  ) ||
                    console.warn(
                      `Failed to remove ${this.disposableEntityId} from the Object Registry Probably it has been already deleted!`
                    ),
                  e[t](...i)
                )
              : e[t];
          }
        }
        t.DeletableEntityProxyHandler = s;
        class o {
          construct(e, i, r) {
            const s = new e(...i);
            return (0, t.createTrackableProxy)(s, !0);
          }
        }
        t.WasmObjectConstructorProxyHandler = o;
        const a = { construct: () => a };
        (t.WasmContextProxyHandler = class {
          constructor() {
            this.constructorProxyHandler = new o();
          }
          get(e, t, i) {
            const r = e[t];
            return ((e) => {
              try {
                return !!new new Proxy(e, a)();
              } catch (e) {
                return !1;
              }
            })(r)
              ? new Proxy(r, this.constructorProxyHandler)
              : r;
          }
        }),
          (t.createWasmContextRevocableProxy = (e) => (
            r.MemoryUsageHelper.register(e, "wasmContext"),
            Proxy.revocable(e, {})
          ));
      },
      56744: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.deleteSafe = void 0),
          (t.deleteSafe = function (e) {
            null == e || e.delete();
          });
      },
      21079: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Dictionary = void 0),
          (t.Dictionary = class {
            constructor() {
              (this.items = {}), (this.countProperty = 0);
            }
            containsKey(e) {
              return this.items.hasOwnProperty(e);
            }
            get count() {
              return this.countProperty;
            }
            add(e, t) {
              this.items.hasOwnProperty(e) || this.countProperty++,
                (this.items[e] = t);
            }
            remove(e) {
              const t = this.items[e];
              return delete this.items[e], this.countProperty--, t;
            }
            item(e) {
              return this.items[e];
            }
            get keys() {
              return Object.keys(this.items);
            }
            get values() {
              return this.keys.map((e) => this.items[e]);
            }
            clear() {
              (this.items = {}), (this.countProperty = 0);
            }
          });
      },
      3214: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EventHandler = void 0),
          (t.EventHandler = class {
            constructor() {
              this.handlers = [];
            }
            subscribe(e) {
              this.handlers.includes(e) || this.handlers.push(e);
            }
            unsubscribe(e) {
              this.handlers = this.handlers.filter((t) => t !== e);
            }
            unsubscribeAll() {
              this.handlers = [];
            }
            raiseEvent(e) {
              this.handlers.slice(0).forEach((t) => t(e));
            }
          });
      },
      99263: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.sciChartPieDestinations =
            t.sciChart3DSingleDestinations =
            t.sciChartSingleDestinations =
            t.sciChart3DDestinations =
            t.sciChartDestinations =
              void 0),
          (t.sciChartDestinations = []),
          (t.sciChart3DDestinations = []),
          (t.sciChartSingleDestinations = []),
          (t.sciChart3DSingleDestinations = []),
          (t.sciChartPieDestinations = []);
      },
      58599: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.GradientParams = void 0),
          (t.GradientParams = class {
            constructor(e, t, i) {
              if (((this.gradientStops = []), i.length < 2))
                throw Error("At least two gradient point should be provided");
              if (e.x < 0 || e.y < 0 || e.x > 1 || e.y > 1)
                throw Error("startPoint values should be within [0,1]");
              if (t.x < 0 || t.y < 0 || t.x > 1 || t.y > 1)
                throw Error("endPoint values should be within [0,1]");
              i.forEach((e) => {
                if (e.offset < 0 || e.offset > 1)
                  throw Error("gradientStops offset should be within [0,1]");
              }),
                (this.startPoint = e),
                (this.endPoint = t),
                (this.gradientStops = i);
            }
          });
      },
      23866: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Guard = void 0);
        const r = i(72934);
        t.Guard = class {
          static notNull(e, t) {
            if (null == e)
              throw new Error("Argument " + t + " must not be undefined");
          }
          static isTrue(e, t) {
            if (!e) throw new Error(t);
          }
          static arraysSameLength(e, t, i, r) {
            if ((this.notNull(e, t), this.notNull(i, r), e.length !== i.length))
              throw new Error(`Arrays ${t} and ${r} must have the same length`);
          }
          static arraysSameLengthArr(e = []) {
            if (
              (e.forEach((e) => {
                this.notNull(e.arg, e.name);
              }),
              e.length >= 0)
            ) {
              const t = e[0].arg.length,
                i = e[0].name;
              e.forEach((e) => {
                if (e.arg.length !== t)
                  throw new Error(
                    `Arrays ${i} and ${e.name} must have the same length`
                  );
              });
            }
          }
          static argumentIsRealNumber(e, t) {
            if (!(0, r.isRealNumber)(e))
              throw new Error(
                `Argument ${t} must be a real number (not infinite, not NAN)`
              );
          }
          static argumentIsRealInteger(e, t) {
            if (!Number.isInteger(e) || !(0, r.isRealNumber)(e))
              throw new Error(
                `Argument ${t} must be a real integer number (not infinite, not NAN)`
              );
          }
        };
      },
      98869: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.List = void 0),
          (t.List = class {
            constructor() {
              this.items = [];
            }
            size() {
              return this.items.length;
            }
            add(e) {
              this.items.push(e);
            }
            get(e) {
              return this.items[e];
            }
          });
      },
      85258: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MouseManager = void 0);
        const r = i(39299),
          s = i(14184),
          o = i(86127),
          a = i(45215),
          n = i(23866);
        var l;
        !(function (e) {
          (e[(e.Move = 0)] = "Move"),
            (e[(e.Down = 1)] = "Down"),
            (e[(e.Up = 2)] = "Up"),
            (e[(e.Wheel = 3)] = "Wheel"),
            (e[(e.Click = 4)] = "Click"),
            (e[(e.Leave = 5)] = "Leave"),
            (e[(e.Enter = 6)] = "Enter"),
            (e[(e.Cancel = 7)] = "Cancel"),
            (e[(e.Drop = 8)] = "Drop");
        })(l || (l = {})),
          (t.MouseManager = class {
            constructor(e) {
              (this.isOver = !1),
                (this.maxTapDuration = 500),
                (this.enableDoubleTapPolyfill = !0),
                (this.forceDoubleTapPolyfill = !1),
                (this.sciChartSurface = e),
                (this.onPointerMove = this.onPointerMove.bind(this)),
                (this.onPointerDown = this.onPointerDown.bind(this)),
                (this.onPointerUp = this.onPointerUp.bind(this)),
                (this.onMouseWheel = this.onMouseWheel.bind(this)),
                (this.onDoubleClick = this.onDoubleClick.bind(this)),
                (this.onMouseLeave = this.onMouseLeave.bind(this)),
                (this.onMouseEnter = this.onMouseEnter.bind(this)),
                (this.onContextMenu = this.onContextMenu.bind(this)),
                (this.onPointerCancel = this.onPointerCancel.bind(this)),
                (this.onDrop = this.onDrop.bind(this));
            }
            subscribe(e) {
              n.Guard.notNull(e, "source"),
                this.unsubscribe(),
                (this.canvas = e),
                e.addEventListener("pointermove", this.onPointerMove),
                e.addEventListener("pointerdown", this.onPointerDown),
                e.addEventListener("pointerup", this.onPointerUp),
                e.addEventListener("pointercancel", this.onPointerCancel),
                e.addEventListener("wheel", this.onMouseWheel),
                e.addEventListener("dblclick", this.onDoubleClick),
                e.addEventListener("mouseleave", this.onMouseLeave),
                e.addEventListener("mouseenter", this.onMouseEnter),
                e.addEventListener("contextmenu", this.onContextMenu),
                e.addEventListener("drop", this.onDrop);
            }
            unsubscribe() {
              this.canvas &&
                (this.canvas.removeEventListener(
                  "pointermove",
                  this.onPointerMove
                ),
                this.canvas.removeEventListener(
                  "pointerdown",
                  this.onPointerDown
                ),
                this.canvas.removeEventListener("pointerup", this.onPointerUp),
                this.canvas.removeEventListener(
                  "pointercancel",
                  this.onPointerCancel
                ),
                this.canvas.removeEventListener("wheel", this.onMouseWheel),
                this.canvas.removeEventListener("dblclick", this.onDoubleClick),
                this.canvas.removeEventListener(
                  "mouseleave",
                  this.onMouseLeave
                ),
                this.canvas.removeEventListener(
                  "mouseenter",
                  this.onMouseEnter
                ),
                this.canvas.removeEventListener(
                  "contextmenu",
                  this.onContextMenu
                ),
                this.canvas.removeEventListener("drop", this.onDrop)),
                (this.canvas = null);
            }
            onPointerCancel(e) {
              const t = r.ModifierMouseArgs.fromPointerEvent(e);
              this.modifierPointerCancel(t);
            }
            onPointerMove(e) {
              const t = r.ModifierMouseArgs.fromPointerEvent(e);
              this.modifierMouseMove(t);
            }
            onPointerDown(e) {
              const t = r.ModifierMouseArgs.fromPointerEvent(e);
              this.modifierMouseDown(t);
              const i =
                  this.forceDoubleTapPolyfill ||
                  (this.enableDoubleTapPolyfill && !this.supportsDoubleTap),
                s = "touch" === e.pointerType || "pen" === e.pointerType;
              if (i && s) {
                const t = new Date().getTime(),
                  i = !!this.lastTapTime,
                  s = t - this.lastTapTime < this.maxTapDuration,
                  o = e.isPrimary;
                if (i && o && s) {
                  (this.lastTapTime = void 0), (this.doubleTapHandled = !0);
                  const t = r.ModifierMouseArgs.fromPointerEvent(e);
                  this.modifierDoubleClick(t);
                } else (this.lastTapTime = t), (this.doubleTapHandled = !1);
              } else this.doubleTapHandled = !1;
            }
            onPointerUp(e) {
              const t = r.ModifierMouseArgs.fromPointerEvent(e);
              this.modifierMouseUp(t);
            }
            onDoubleClick(e) {
              if (this.doubleTapHandled)
                return void (this.supportsDoubleTap = !0);
              const t = r.ModifierMouseArgs.fromMouseEvent(e);
              this.modifierDoubleClick(t);
            }
            onMouseWheel(e) {
              const t = r.ModifierMouseArgs.fromWheelEvent(e);
              this.modifierMouseWheel(t), t.handled && e.preventDefault();
            }
            onMouseLeave(e) {
              const t = r.ModifierMouseArgs.fromMouseEvent(e);
              this.modifierMouseLeave(t);
            }
            onMouseEnter(e) {
              const t = r.ModifierMouseArgs.fromMouseEvent(e);
              this.modifierMouseEnter(t);
            }
            onContextMenu(e) {
              e.preventDefault();
            }
            onDrop(e) {
              const t = r.ModifierMouseArgs.fromMouseEvent(e);
              this.modifierDrop(t);
            }
            modifierPointerCancel(e) {
              if (
                (e.isMaster && e.target.releasePointerCapture(e.pointerId),
                this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierPointerCancel(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierPointerCancel(o);
                  });
                }),
                  this.updateSubCharts(e, l.Cancel);
              }
            }
            modifierMouseMove(e) {
              if (
                this.sciChartSurface.surfaceType ===
                s.ESurfaceType.SciChartSurfaceType
              ) {
                const t = this.sciChartSurface;
                if (t.adornerLayer.isAnnotationSelected) {
                  const i = t.adornerLayer.selectedAnnotation;
                  i.isDraggingStarted && i.onDragAdorner(e);
                }
              }
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierMouseMove(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierMouseMove(o);
                  });
                }),
                  this.updateSubCharts(e, l.Move);
              }
            }
            modifierMouseDown(e) {
              var t;
              e.isMaster &&
                (null === (t = e.target) ||
                  void 0 === t ||
                  t.setPointerCapture(e.pointerId));
              const i = () => {
                if (
                  (this.chartModifiers.forEach((t) => {
                    !t.canReceiveMouseEvents ||
                      (e.handled && !t.receiveHandledEvents) ||
                      ((e.isMaster ||
                        (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                        t.modifierMouseDown(e, this.sciChartSurface));
                  }),
                  e.isMaster)
                ) {
                  const t = this.getMasterData(this.sciChartSurface, e);
                  this.chartModifierGroups.forEach((i) => {
                    this.sciChartSurface.otherSurfaces.forEach((s) => {
                      const o = r.ModifierMouseArgs.copy(
                        e,
                        i,
                        this.sciChartSurface.seriesViewRect,
                        s.seriesViewRect,
                        t
                      );
                      s.mouseManager.modifierMouseDown(o);
                    });
                  }),
                    this.updateSubCharts(e, l.Down);
                }
              };
              if (e.isMaster) {
                const t = (t) => {
                  t.adornerLayer.selectAnnotation(e);
                  const r = t.adornerLayer.selectedAnnotation;
                  r ? r.onDragStarted(e) && this.modifierMouseMove(e) : i();
                };
                if (
                  this.sciChartSurface.surfaceType ===
                  s.ESurfaceType.SciChartSurfaceType
                ) {
                  const i = this.sciChartSurface,
                    r = i.adornerLayer.selectedAnnotation;
                  (r && r.onDragStarted(e)) || t(i);
                } else i();
              } else i();
            }
            modifierMouseUp(e) {
              var t;
              if (
                (e.isMaster &&
                  (null === (t = e.target) ||
                    void 0 === t ||
                    t.releasePointerCapture(e.pointerId)),
                this.sciChartSurface.surfaceType ===
                  s.ESurfaceType.SciChartSurfaceType)
              ) {
                const e = this.sciChartSurface;
                if (e.adornerLayer.isAnnotationSelected) {
                  const t = e.adornerLayer.selectedAnnotation;
                  t.isDraggingStarted && t.onDragEnded();
                }
              }
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierMouseUp(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierMouseUp(o);
                  });
                }),
                  this.updateSubCharts(e, l.Up);
              }
            }
            modifierMouseWheel(e) {
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierMouseWheel(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierMouseWheel(o);
                  });
                }),
                  this.updateSubCharts(e, l.Wheel);
              }
            }
            modifierDoubleClick(e) {
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierDoubleClick(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierDoubleClick(o);
                  });
                }),
                  this.updateSubCharts(e, l.Click);
              }
            }
            modifierMouseLeave(e) {
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierMouseLeave(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierMouseLeave(o);
                  });
                }),
                  this.updateSubCharts(e, l.Leave);
              }
            }
            modifierMouseEnter(e) {
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierMouseEnter(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierMouseEnter(o);
                  });
                }),
                  this.updateSubCharts(e, l.Enter);
              }
            }
            modifierDrop(e) {
              if (
                (this.chartModifiers.forEach((t) => {
                  !t.canReceiveMouseEvents ||
                    (e.handled && !t.receiveHandledEvents) ||
                    ((e.isMaster ||
                      (!e.isMaster && t.modifierGroup === e.modifierGroup)) &&
                      t.modifierDrop(e, this.sciChartSurface));
                }),
                e.isMaster)
              ) {
                const t = this.getMasterData(this.sciChartSurface, e);
                this.chartModifierGroups.forEach((i) => {
                  this.sciChartSurface.otherSurfaces.forEach((s) => {
                    const o = r.ModifierMouseArgs.copy(
                      e,
                      i,
                      this.sciChartSurface.seriesViewRect,
                      s.seriesViewRect,
                      t
                    );
                    s.mouseManager.modifierDrop(o);
                  });
                }),
                  this.updateSubCharts(e, l.Drop);
              }
            }
            getMasterData(e, t) {
              return {};
            }
            get chartModifiers() {
              return this.sciChartSurface.chartModifiers.asArray();
            }
            get chartModifierGroups() {
              const e = this.chartModifiers
                .filter((e) => void 0 !== e.modifierGroup)
                .map((e) => e.modifierGroup);
              return (0, a.getUniqueValues)(e);
            }
            updateSubCharts(e, t) {
              const i = this.sciChartSurface.subCharts;
              if (!i || 0 === i.length) return;
              const s =
                null == i
                  ? void 0
                  : i.find((t) => {
                      const {
                          top: i,
                          left: r,
                          bottom: s,
                          right: a,
                        } = t.padding,
                        { x: n, y: l } = e.mousePoint,
                        d = n / o.DpiHelper.PIXEL_RATIO,
                        h = l / o.DpiHelper.PIXEL_RATIO,
                        { width: u, height: c } =
                          this.sciChartSurface.renderSurface.viewportSize,
                        p = u / o.DpiHelper.PIXEL_RATIO,
                        g = c / o.DpiHelper.PIXEL_RATIO;
                      return r <= d && d <= p - a && i <= h && h <= g - s;
                    });
              let a = !1;
              null == i ||
                i.forEach((o) => {
                  let n = t,
                    d = !0;
                  if (o.mouseManager.isOver) {
                    if (o !== s) {
                      if (((o.mouseManager.isOver = !1), n === l.Move)) {
                        const t = new r.ModifierMouseArgs(e.mousePoint, e);
                        a =
                          a ||
                          this.processSubChartEvent(l.Leave, o, t, i, void 0);
                      }
                      n !== l.Cancel && n !== l.Up && (n = void 0);
                    }
                  } else if (o === s) {
                    if (((o.mouseManager.isOver = !0), n === l.Move)) {
                      const t = new r.ModifierMouseArgs(e.mousePoint, e);
                      a =
                        a ||
                        this.processSubChartEvent(l.Enter, o, t, i, void 0);
                    }
                  } else
                    [l.Cancel, l.Up, l.Move].includes(n) || (n = void 0),
                      (d = !1);
                  if (void 0 !== n) {
                    const t = this.getMasterData(s, e);
                    a =
                      a ||
                      this.processSubChartEvent(
                        n,
                        o,
                        Object.assign(Object.assign({}, e), {
                          isActiveSubChartEvent: d,
                        }),
                        i,
                        t
                      );
                  }
                }),
                (e.handled = e.handled || a);
            }
            processSubChartEvent(e, t, i, s, o) {
              (i.handled = !1), this.callEvent(e, t, i);
              let a = i.handled;
              return (
                i.isActiveSubChartEvent &&
                  t.chartModifierGroups.forEach((n) => {
                    s.filter((e) => e.id !== t.id).forEach((s) => {
                      const l = r.ModifierMouseArgs.copyForSubChart(
                        i,
                        n,
                        t.seriesViewRect,
                        s.seriesViewRect,
                        o
                      );
                      this.callEvent(e, s, l), (a = a || l.handled);
                    });
                  }),
                a
              );
            }
            callEvent(e, t, i) {
              switch (e) {
                case l.Cancel:
                  t.mouseManager.modifierPointerCancel(i);
                  break;
                case l.Click:
                  t.mouseManager.modifierDoubleClick(i);
                  break;
                case l.Down:
                  t.mouseManager.modifierMouseDown(i);
                  break;
                case l.Enter:
                  t.mouseManager.modifierMouseEnter(i);
                  break;
                case l.Leave:
                  t.mouseManager.modifierMouseLeave(i);
                  break;
                case l.Move:
                  t.mouseManager.modifierMouseMove(i);
                  break;
                case l.Up:
                  t.mouseManager.modifierMouseUp(i);
                  break;
                case l.Wheel:
                  t.mouseManager.modifierMouseWheel(i);
                  break;
                case l.Drop:
                  t.mouseManager.modifierDrop(i);
              }
            }
          });
      },
      98140: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumberRange = void 0);
        const r = i(72934),
          s = i(67492);
        class o {
          constructor(e = 0, t = 10) {
            (this.min = e), (this.max = t);
          }
          union(e) {
            const t = Math.min(this.min, e.min),
              i = Math.max(this.max, e.max);
            return new o(t, i);
          }
          clip(e) {
            const t = Math.max(this.min, e.min),
              i = Math.min(this.max, e.max);
            return new o(t, i);
          }
          growBy(e) {
            const t = this.max - this.min;
            let i = this.min - e.min * (this.isZero() ? this.min : t),
              r = this.max + e.max * (this.isZero() ? this.max : t);
            if (i > r) {
              const e = i;
              (i = r), (r = e);
            }
            return new o(i, r);
          }
          growByLog(e, t) {
            const i = this.min < 0 ? -1 : 1,
              r = 0 !== this.min ? (0, s.logToBase)(Math.abs(this.min), t) : 0,
              a = 0 !== this.max ? (0, s.logToBase)(Math.abs(this.max), t) : 0,
              n = a - r,
              l = n * e.min,
              d = n * e.max;
            let h = i * (0 !== this.min ? Math.pow(t, r - l) : 0),
              u = i * (0 !== this.max ? Math.pow(t, a + d) : 0);
            if (h > u) {
              const e = u;
              (u = h), (h = e);
            }
            return new o(h, u);
          }
          isDefined() {
            return (
              (0, r.isRealNumber)(this.max) && (0, r.isRealNumber)(this.min)
            );
          }
          equals(e) {
            return !!e && e.min === this.min && e.max === this.max;
          }
          toString() {
            return `NumberRange (${this.min}, ${this.max})`;
          }
          get diff() {
            return this.max - this.min;
          }
          isZero() {
            return this.min === this.max;
          }
          static areEqual(e, t) {
            return e === t || (!!e && e.equals(t));
          }
        }
        t.NumberRange = o;
      },
      64645: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.NumberUtil = void 0),
          (t.NumberUtil = class {
            static constrain(e, t, i) {
              return Math.max(Math.min(e, i), t);
            }
          });
      },
      37796: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ObservableArray = t.ObservableArrayBase = void 0);
        const r = i(3214),
          s = i(71664);
        class o {
          constructor() {
            (this.items = []), (this.collectionChanged = new r.EventHandler());
          }
          size() {
            return this.items.length;
          }
          add(...e) {
            e.forEach((e) => this.items.push(e)),
              this.collectionChanged.raiseEvent(
                new s.ObservableArrayChangedArgs(
                  s.EObservableArrayChangedAction.Add,
                  e,
                  void 0
                )
              );
          }
          asArray() {
            return this.items;
          }
          insert(e, t) {
            e < 0 && (e = 0),
              e >= this.items.length
                ? this.add(t)
                : (this.items.splice(e, 0, t),
                  this.collectionChanged.raiseEvent(
                    new s.ObservableArrayChangedArgs(
                      s.EObservableArrayChangedAction.Add,
                      [t],
                      void 0
                    )
                  ));
          }
          contains(e) {
            return this.items.includes(e);
          }
          removeAt(e, t = !1) {
            if (e < 0 || e >= this.items.length) return;
            const i = this.items[e];
            this.items.splice(e, 1),
              this.collectionChanged.raiseEvent(
                new s.ObservableArrayChangedArgs(
                  s.EObservableArrayChangedAction.Remove,
                  void 0,
                  [i]
                )
              ),
              t && (null == i ? void 0 : i.delete) && i.delete();
          }
          remove(e, t = !1) {
            for (let i = 0; i < this.size(); i++)
              if (this.items[i] === e) {
                this.removeAt(i, t);
                break;
              }
          }
          clear(e = !1) {
            const t = this.items;
            (this.items = []),
              this.collectionChanged.raiseEvent(
                new s.ObservableArrayChangedArgs(
                  s.EObservableArrayChangedAction.Reset,
                  void 0,
                  t
                )
              ),
              e &&
                (null == t ||
                  t.forEach((e) => {
                    (null == e ? void 0 : e.delete) && e.delete();
                  }));
          }
          get(e) {
            return this.items[e];
          }
          set(e, t) {
            (this.items[e] = t),
              this.collectionChanged.raiseEvent(
                new s.ObservableArrayChangedArgs(
                  s.EObservableArrayChangedAction.Replace,
                  [t],
                  void 0
                )
              );
          }
        }
        (t.ObservableArrayBase = o),
          (t.ObservableArray = class extends o {
            getById(e) {
              return this.items.find((t) => t.id === e);
            }
          });
      },
      71664: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ObservableArrayChangedArgs = t.EObservableArrayChangedAction =
            void 0),
          ((i =
            t.EObservableArrayChangedAction ||
            (t.EObservableArrayChangedAction = {}))[(i.Add = 0)] = "Add"),
          (i[(i.Remove = 1)] = "Remove"),
          (i[(i.Replace = 2)] = "Replace"),
          (i[(i.Reset = 3)] = "Reset"),
          (t.ObservableArrayChangedArgs = class {
            constructor(e, t, i) {
              (this.action = e), (this.oldItems = i), (this.newItems = t);
            }
            getAction() {
              return this.action;
            }
            getNewItems() {
              return this.newItems;
            }
            getOldItems() {
              return this.oldItems;
            }
          });
      },
      63508: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.OneTimePerformanceWarning = void 0);
        const r = i(2056),
          s = i(85479);
        t.OneTimePerformanceWarning = class {
          constructor(e) {
            (this.warnedProperty = !1), (this.messageProperty = e);
          }
          warn() {
            return !(
              !s.SciChartDefaults.performanceWarnings ||
              this.warnedProperty ||
              !r.licenseManager2dState.getIsDev() ||
              (console.warn(this.messageProperty),
              (this.warnedProperty = !0),
              0)
            );
          }
        };
      },
      75772: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Point = void 0),
          (t.Point = class {
            constructor(e, t) {
              (this.x = e), (this.y = t);
            }
            toString() {
              return `Point (${this.x}, ${this.y})`;
            }
          });
      },
      50605: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PropertyChangedEventArgs = void 0),
          (t.PropertyChangedEventArgs = class {
            constructor(e) {
              this.propertyName = e;
            }
          });
      },
      87459: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Rect = void 0);
        const r = i(75772);
        class s {
          constructor(e, t, i, r) {
            if (i < 0 || r < 0)
              throw new Error("Can not create Rect with negative width/height");
            (this.x = e), (this.y = t), (this.width = i), (this.height = r);
          }
          static create(e, t, i, r) {
            if (i < 0 || r < 0)
              throw new Error(
                "Rect.create width and height cannot be less than zero"
              );
            return new s(e, t, i, r);
          }
          static createWithCoords(e, t, i, r) {
            return new s(e, t, i - e, r - t);
          }
          static createWithPoints(e, t) {
            const i = Math.min(e.x, t.x),
              r = Math.min(e.y, t.y),
              o = Math.max(Math.max(e.x, t.x) - i, 0),
              a = Math.max(Math.max(e.y, t.y) - r, 0);
            return s.create(i, r, o, a);
          }
          static createCopy(e) {
            return new s(e.x, e.y, e.width, e.height);
          }
          static createZero() {
            return new s(0, 0, 0, 0);
          }
          static isEqual(e, t) {
            return (
              e.x === t.x &&
              e.y === t.y &&
              e.width === t.width &&
              e.height === t.height
            );
          }
          static clipPointToRect(e, t) {
            const i =
                e.x < t.x ? t.x : e.x > t.x + t.width ? t.x + t.width : e.x,
              s = e.y < t.y ? t.y : e.y > t.y + t.height ? t.y + t.height : e.y;
            return new r.Point(i, s);
          }
          get left() {
            return this.x;
          }
          get top() {
            return this.y;
          }
          get right() {
            return this.x + this.width;
          }
          get bottom() {
            return this.y + this.height;
          }
        }
        t.Rect = s;
      },
      33519: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.sendTelemetry = t.shouldSendTelemetry = t.getUserCookie = void 0);
        const r = i(2056),
          s = i(41670),
          o = i(34238),
          a = i(84745),
          n = i(73538),
          l = i(48125);
        let d = !1;
        (t.getUserCookie = () => {
          const e = (0, s.getCookie)("scUser");
          if (e) {
            const t = e.split(",");
            if (3 === t.length)
              return {
                userId: t[0],
                sessionId: t[1],
                sessionStart: Number.parseInt(t[2], 10),
              };
          }
          return {
            userId: (0, n.base64Id)(),
            sessionId: (0, n.base64Id)(),
            sessionStart: 0,
          };
        }),
          (t.shouldSendTelemetry = () =>
            !(
              a.IS_TEST_ENV ||
              d ||
              (r.licenseManager2dState.getLicenseType() !==
                l.LicenseType.Community &&
                !r.licenseManager2dState.getIsDev()) ||
              !r.licenseManager2dState.getTelemetry() ||
              (window && !window.navigator.onLine)
            )),
          (t.sendTelemetry = () => {
            if (!(0, t.shouldSendTelemetry)()) return;
            const e = (0, t.getUserCookie)(),
              i = new Date().toISOString();
            if (Date.now() - e.sessionStart < 36e5) return;
            (e.sessionId = (0, n.base64Id)()),
              (e.sessionStart = Date.now()),
              ((e, t, i) => {
                const r = `${e},${t},${i}`;
                (0, s.setCookie)("scUser", r, 365);
              })(e.userId, e.sessionId, e.sessionStart);
            const a = {
              time: i,
              iKey: "210b4d64-8147-471e-b6cb-244a2c939455",
              name: "Microsoft.ApplicationInsights.210b4d648147471eb6cb244a2c939455.Event",
              tags: {
                "ai.user.id": e.userId,
                "ai.session.id": e.sessionId,
                "ai.device.id": "browser",
                "ai.device.type": "Browser",
              },
              data: {
                baseType: "EventData",
                baseData: {
                  ver: 2,
                  name: "LicenseSet",
                  properties: {
                    platform: "JS",
                    licenseType: r.licenseManager2dState.getLicenseType(),
                    orderId: r.licenseManager2dState.getOrderId(),
                    productCode: r.licenseManager2dState.getProductCode(),
                    isDev: r.licenseManager2dState.getIsDev(),
                    devCount: r.licenseManager2dState.getDevCount(),
                    sciChartVersion: o.libraryVersion,
                  },
                  measurements: {},
                },
              },
            };
            r.licenseManager2dState.getLicenseType() ===
              l.LicenseType.Community &&
              (a.data.baseData.properties.url = window.location.href);
            const h = JSON.stringify([a]);
            fetch("https://dc.services.visualstudio.com/v2/track", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: h,
            }).catch((e) => {}),
              (d = !0);
          });
      },
      87108: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Thickness = void 0);
        const r = i(23866);
        class s {
          constructor(e, t, i, r) {
            (this.top = e),
              (this.right = t),
              (this.bottom = i),
              (this.left = r);
          }
          static fromString(e) {
            r.Guard.notNull(e, "str");
            const t = e.split(" ").map((e) => parseFloat(e));
            if (4 !== t.length)
              throw new Error(
                "Expected string in the format '1 2 3 4' where values are top, right bottom and left"
              );
            return new s(t[0], t[1], t[2], t[3]);
          }
          static fromNumber(e) {
            return new s(e, e, e, e);
          }
          equals(e) {
            return (
              this.top === e.top &&
              this.right === e.right &&
              this.bottom === e.bottom &&
              this.left === e.left
            );
          }
          static mergeMax(e, t) {
            const i = new s(0, 0, 0, 0);
            return (
              (i.top = Math.max(e.top, t.top)),
              (i.left = Math.max(e.left, t.left)),
              (i.bottom = Math.max(e.bottom, t.bottom)),
              (i.right = Math.max(e.right, t.right)),
              i
            );
          }
        }
        t.Thickness = s;
      },
      62049: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.WebGlHelper = t.EWebGLSupport = void 0);
        const r = i(84745);
        var s;
        !(function (e) {
          (e.WebGL2 = "WebGL 2"),
            (e.WebGL1 = "WebGL 1"),
            (e.NoWebGL = "No WebGL support");
        })((s = t.EWebGLSupport || (t.EWebGLSupport = {})));
        class o {
          static initialize() {
            if (!o.initialized) {
              if (!o.webGlSupport && !r.IS_TEST_ENV) {
                const e = document.createElement("canvas");
                e.getContext("webgl2")
                  ? (o.webGlSupport = s.WebGL2)
                  : e.getContext("webgl")
                  ? (o.webGlSupport = s.WebGL1)
                  : (o.webGlSupport = s.NoWebGL);
              }
              o.initialized = !0;
            }
          }
          static getWebGlSupport() {
            return o.webGlSupport;
          }
          static getContext(e, t) {
            if (e && !r.IS_TEST_ENV) {
              if (o.webGlSupport === s.WebGL1) return e.getContext("webgl", t);
              if (o.webGlSupport === s.WebGL2) return e.getContext("webgl2", t);
              throw new Error("SciChart: WebGL not supported!");
            }
          }
        }
        (t.WebGlHelper = o), (o.webGlSupport = void 0), (o.initialized = !1);
      },
      31601: (e, t) => {
        "use strict";
        let i;
        function r() {
          if (void 0 !== i) return i;
          try {
            var e = window.localStorage,
              t = "__storage_test__";
            return e.setItem(t, t), e.removeItem(t), (i = !0), !0;
          } catch (e) {
            return (i = !1), !1;
          }
        }
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.localStorageApi = void 0),
          (t.localStorageApi = {
            storageAvailable: r,
            getIsLicenseDebug: function () {
              if (r()) return "1" === localStorage.getItem("LICENSE_DEBUG");
            },
            setIsLicenseDebug: function (e) {
              r() && localStorage.setItem("LICENSE_DEBUG", e ? "1" : "0");
            },
            clearLicensingDebug: function () {
              r() && localStorage.removeItem("LICENSE_DEBUG");
            },
            getLicenseWizardMaxPort: function () {
              if (!r()) return;
              const e = localStorage.getItem("LICENSE_WIZARD_MAXPORT"),
                t = Number(e);
              return isNaN(t) ? void 0 : t;
            },
            getLicenseWizardPort: function () {
              if (!r()) return;
              const e = localStorage.getItem("LICENSE_WIZARD_PORT"),
                t = Number(e);
              return isNaN(t) ? void 0 : t;
            },
          });
      },
      84745: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EPSILON =
            t.DEFAULT_HEIGHT =
            t.DEFAULT_WIDTH =
            t.IS_TEST_ENV =
              void 0);
        let r = !1;
        (t.IS_TEST_ENV = r),
          "undefined" != typeof process &&
            (t.IS_TEST_ENV = r =
              "1" ===
              (null === (i = process.env) || void 0 === i
                ? void 0
                : i.TEST_ENV)),
          (t.DEFAULT_WIDTH = 900),
          (t.DEFAULT_HEIGHT = 600),
          (t.EPSILON = 1e-4);
      },
      41493: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.performanceWarnings = void 0);
        const r = i(63508);
        t.performanceWarnings = {
          dataDistributionFlagNaN: new r.OneTimePerformanceWarning(
            "Data Distribution flag (BaseDataSeries.containsNaN = false) can be applied to improve performance. Read this website article https://www.scichart.com/documentation/js/current/DataSeries_Resampling.html for more info. To disable this warning set SciChartDefaults.performanceWarnings = false"
          ),
          dataDistributionFlagSortedAscending: new r.OneTimePerformanceWarning(
            "Data Distribution flag (BaseDataSeries.isSorted = true) can be applied to improve performance. Read this website article https://www.scichart.com/documentation/js/current/DataSeries_Resampling.html for more info. To disable this warning set SciChartDefaults.performanceWarnings = false"
          ),
          subchartBackgroundNotSimpleColor: new r.OneTimePerformanceWarning(
            "When using isTransparent: false on a SubChart, the background needs to be a simple color, not an html gradient (which the default theme uses). To disable this warning set SciChartDefaults.performanceWarnings = false"
          ),
          dataLabelsSkippingMany: new r.OneTimePerformanceWarning(
            "DataLabelProvider generated many more labels than it could display.  To improve performance consider increasing the pointGapThreshold, increasing the skipNumber, or decreasing the pointCountThreshold. To disable this warning set SciChartDefaults.performanceWarnings = false"
          ),
          dateTimeDeltaCalculatorBadDelta: new r.OneTimePerformanceWarning(
            "The DateTimeDeltaCalculator could not find a suitable delta given the current settings. \n        Either increase axis.maxAutoTicks, set axis.deltaCalculator.minTicks less than maxAutoTicks / 3, or set possibleDeltas to an array containing more closely spaced values.\n        To disable this warning set SciChartDefaults.performanceWarnings = false"
          ),
        };
      },
      60986: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EVerticalAnchorPoint = t.EHorizontalAnchorPoint = void 0),
          ((r =
            t.EHorizontalAnchorPoint || (t.EHorizontalAnchorPoint = {})).Left =
            "Left"),
          (r.Center = "Center"),
          (r.Right = "Right"),
          ((i = t.EVerticalAnchorPoint || (t.EVerticalAnchorPoint = {})).Top =
            "Top"),
          (i.Center = "Center"),
          (i.Bottom = "Bottom");
      },
      10763: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAnimationType = void 0),
          ((i = t.EAnimationType || (t.EAnimationType = {})).Fade = "Fade"),
          (i.Scale = "Scale"),
          (i.Sweep = "Sweep"),
          (i.Wave = "Wave"),
          (i.Style = "Style"),
          (i.Custom = "Custom");
      },
      39922: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAutoColorMode = void 0),
          ((i = t.EAutoColorMode || (t.EAutoColorMode = {})).Never = "Never"),
          (i.Once = "Once"),
          (i.OnAddRemoveSeries = "OnAddRemoveSeries"),
          (i.Always = "Always");
      },
      12785: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAutoRange = void 0),
          ((i = t.EAutoRange || (t.EAutoRange = {})).Once = "Once"),
          (i.Always = "Always"),
          (i.Never = "Never");
      },
      38215: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.handleInvalidAxisAlignment =
            t.getIsVertical =
            t.getIsHorizontal =
            t.EAxisAlignment =
              void 0),
          (function (e) {
            (e.Right = "Right"),
              (e.Left = "Left"),
              (e.Top = "Top"),
              (e.Bottom = "Bottom");
          })((i = t.EAxisAlignment || (t.EAxisAlignment = {}))),
          (t.getIsHorizontal = (e) =>
            !![i.Bottom, i.Top].includes(e) ||
            (![i.Right, i.Left].includes(e) && void 0)),
          (t.getIsVertical = (e) =>
            !1 === (0, t.getIsHorizontal)(e) ||
            (!0 !== (0, t.getIsHorizontal)(e) && void 0)),
          (t.handleInvalidAxisAlignment = (e) => {
            throw new Error(`Invalid Axis Alignment value: "${e}"!`);
          });
      },
      2192: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EAxisType = void 0),
          ((i = t.EAxisType || (t.EAxisType = {})).CategoryAxis =
            "CategoryAxis"),
          (i.NumericAxis = "NumericAxis"),
          (i.LogarithmicAxis = "LogarithmicAxis"),
          (i.NumericAxis3D = "NumericAxis3D"),
          (i.DateTimeNumericAxis = "DateTimeNumericAxis");
      },
      11043: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EBaseType = void 0),
          (function (e) {
            (e.Axis = "Axis"),
              (e.Annotation = "Annotation"),
              (e.RenderableSeries = "RenderableSeries"),
              (e.LayoutManager = "LayoutManager"),
              (e.ThemeProvider = "ThemeProvider"),
              (e.Chart2DModifier = "Chart2DModifier"),
              (e.LabelProvider = "LabelProvider"),
              (e.PointMarker = "PointMarker"),
              (e.ShaderEffect = "ShaderEffect"),
              (e.PaletteProvider = "PaletteProvider"),
              (e.Animation = "Animation"),
              (e.Loader = "Loader"),
              (e.MetadataGenerator = "MetadataGenerator"),
              (e.OptionFunction = "OptionFunction"),
              (e.OnCreateFunction = "OnCreateFunction"),
              (e.DataFilter = "DataFilter"),
              (e.LayoutStrategy = "LayoutStrategy"),
              (e.DataLabelProvider = "DataLabelProvider");
          })(t.EBaseType || (t.EBaseType = {}));
      },
      89955: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EChart3DModifierType = t.EChart2DModifierType = void 0),
          ((r =
            t.EChart2DModifierType || (t.EChart2DModifierType = {})).Cursor =
            "Cursor"),
          (r.DataPointSelection = "DataPointSelection"),
          (r.Legend = "Legend"),
          (r.MouseWheelZoom = "MouseWheelZoom"),
          (r.PinchZoom = "PinchZoom"),
          (r.Rollover = "Rollover"),
          (r.VerticalSlice = "VerticalSlice"),
          (r.RubberBandXYZoom = "RubberBandXYZoom"),
          (r.SeriesSelection = "SeriesSelection"),
          (r.XAxisDrag = "XAxisDrag"),
          (r.YAxisDrag = "YAxisDrag"),
          (r.ZoomExtents = "ZoomExtents"),
          (r.ZoomPan = "ZoomPan"),
          (r.OverviewRangeSelection = "OverviewRangeSelection"),
          (r.AnnotationHover = "AnnotationHover"),
          (r.Custom = "Custom"),
          ((i =
            t.EChart3DModifierType ||
            (t.EChart3DModifierType = {})).MouseWheelZoom = "MouseWheelZoom"),
          (i.Orbit = "Orbit"),
          (i.ZoomExtents = "ZoomExtents"),
          (i.Tooltip = "Tooltip"),
          (i.PinchZoom = "PinchZoom"),
          (i.Custom = "Custom");
      },
      72072: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EColor = void 0),
          ((i = t.EColor || (t.EColor = {})).Aqua = "#00ffff"),
          (i.BackgroundColor = "#1c1c1e"),
          (i.Blue = "#368BC1"),
          (i.DarkGreen = "#03925e"),
          (i.DarkRed = "#be0000"),
          (i.DarkGrey = "#7e8486"),
          (i.DefaultGridBandsColor = "#202123"),
          (i.DefaultTextColor = "#c8c7c3"),
          (i.DodgerBlue = "#1E90FF"),
          (i.Green = "#228B22"),
          (i.LightGrey = "#eeeeee"),
          (i.LightSteelBlue = "#b0c4de"),
          (i.LimeGreen = "#32CD32"),
          (i.Orange = "#ff6600"),
          (i.OrangeRed = "#FF4500"),
          (i.Purple = "#B200FF"),
          (i.Red = "#ff0000"),
          (i.White = "#ffffff"),
          (i.Yellow = "#FFFF00");
      },
      14278: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ECursorStyle = void 0),
          ((i = t.ECursorStyle || (t.ECursorStyle = {})).NS = "ns-resize"),
          (i.EW = "ew-resize"),
          (i.Defalut = "auto");
      },
      51097: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDataFilterType = void 0),
          ((i = t.EDataFilterType || (t.EDataFilterType = {})).XyLinearTrend =
            "XyLinearTrend"),
          (i.XyMovingAverage = "XyMovingAverage"),
          (i.XyRatio = "XyRatio"),
          (i.XyScaleOffset = "XyScaleOffset"),
          (i.XyyScaleOffset = "XyyScaleOffset"),
          (i.XyzScaleOffset = "XyzScaleOffset"),
          (i.HlcScaleOffset = "HlcScaleOffset"),
          (i.OhlcScaleOffset = "OhlcScaleOffset");
      },
      2963: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDataLabelProviderType = void 0),
          ((i =
            t.EDataLabelProviderType ||
            (t.EDataLabelProviderType = {})).Default = "Default"),
          (i.Line = "Line"),
          (i.Column = "Column"),
          (i.Text = "Text"),
          (i.Heatmap = "Heatmap"),
          (i.Band = "Band"),
          (i.Bubble = "Bubble"),
          (i.NonUniformHeatmap = "NonUniformHeatmap"),
          (i.Contours = "Contours"),
          (i.StackedCollection = "StackedCollection"),
          (i.Custom = "Custom");
      },
      62993: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDataLabelSkipMode = void 0),
          ((i = t.EDataLabelSkipMode || (t.EDataLabelSkipMode = {})).ShowAll =
            "ShowAll"),
          (i.SkipIfOverlapPrevious = "SkipIfOverlapPrevious"),
          (i.SkipIfOverlapNext = "SkipIfOverlapNext"),
          (i.SkipIfSame = "SkipIfSame");
      },
      27970: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDataPointWidthMode = void 0),
          ((i =
            t.EDataPointWidthMode || (t.EDataPointWidthMode = {})).Absolute =
            "Absolute"),
          (i.Relative = "Relative"),
          (i.Range = "Range");
      },
      3777: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDefaultRenderLayer = void 0),
          ((i = t.EDefaultRenderLayer || (t.EDefaultRenderLayer = {}))[
            (i.Background = 0)
          ] = "Background"),
          (i[(i.AxisBandsLayer = 1)] = "AxisBandsLayer"),
          (i[(i.MinorGridLinesLayer = 2)] = "MinorGridLinesLayer"),
          (i[(i.MajorGridLinesLayer = 3)] = "MajorGridLinesLayer"),
          (i[(i.AnnotationsBelowSeriesLayer = 4)] =
            "AnnotationsBelowSeriesLayer"),
          (i[(i.SeriesLayer = 5)] = "SeriesLayer"),
          (i[(i.AxisBordersLayer = 6)] = "AxisBordersLayer"),
          (i[(i.AxesLayer = 7)] = "AxesLayer"),
          (i[(i.AnnotationsAboveSeriesLayer = 8)] =
            "AnnotationsAboveSeriesLayer");
      },
      7980: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EDragMode = void 0),
          ((i = t.EDragMode || (t.EDragMode = {})).Scaling = "Scaling"),
          (i.Panning = "Panning");
      },
      79226: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EErrorDirection = void 0),
          ((i = t.EErrorDirection || (t.EErrorDirection = {})).Horizontal =
            "Horizontal"),
          (i.Vertical = "Vertical");
      },
      32287: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EErrorMode = void 0),
          ((i = t.EErrorMode || (t.EErrorMode = {})).Both = "Both"),
          (i.High = "High"),
          (i.Low = "Low");
      },
      59481: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EExecuteOn = void 0),
          ((i = t.EExecuteOn || (t.EExecuteOn = {}))[(i.MouseLeftButton = 0)] =
            "MouseLeftButton"),
          (i[(i.MouseMiddleButton = 1)] = "MouseMiddleButton"),
          (i[(i.MouseRightButton = 2)] = "MouseRightButton"),
          (i[(i.BrowserBackButton = 3)] = "BrowserBackButton"),
          (i[(i.BrowserForwardButton = 4)] = "BrowserForwardButton");
      },
      10581: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EHoverMode = void 0),
          ((i = t.EHoverMode || (t.EHoverMode = {})).Multi = "Multi"),
          (i.TopmostIncluded = "TopmostIncluded"),
          (i.AbsoluteTopmost = "AbsoluteTopmost");
      },
      63415: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ELabelAlignment = void 0),
          ((i = t.ELabelAlignment || (t.ELabelAlignment = {})).Auto = "Auto"),
          (i.Left = "Left"),
          (i.Right = "Right"),
          (i.Center = "Center");
      },
      11805: (e, t) => {
        "use strict";
        var i, r, s;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EVerticalAlignment =
            t.EHorizontalAlignment =
            t.ELabelPlacement =
              void 0),
          ((s = t.ELabelPlacement || (t.ELabelPlacement = {})).Right = "Right"),
          (s.TopRight = "TopRight"),
          (s.BottomRight = "BottomRight"),
          (s.Bottom = "Bottom"),
          (s.Left = "Left"),
          (s.TopLeft = "TopLeft"),
          (s.BottomLeft = "BottomLeft"),
          (s.Top = "Top"),
          (s.Axis = "Axis"),
          (s.Auto = "Auto"),
          ((r = t.EHorizontalAlignment || (t.EHorizontalAlignment = {})).Right =
            "Right"),
          (r.Left = "Left"),
          ((i = t.EVerticalAlignment || (t.EVerticalAlignment = {})).Top =
            "Top"),
          (i.Bottom = "Bottom");
      },
      40359: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ELabelProviderType = void 0),
          ((i = t.ELabelProviderType || (t.ELabelProviderType = {})).Numeric =
            "Numeric"),
          (i.Logarithmic = "Logarithmic"),
          (i.Date = "Date"),
          (i.SmartDate = "SmartDate"),
          (i.Text = "Text"),
          (i.Pie = "Pie");
      },
      28709: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ELayoutManagerType = void 0),
          ((i = t.ELayoutManagerType || (t.ELayoutManagerType = {})).Default =
            "Default"),
          (i.CentralAxes = "CentralAxes"),
          (i.Synchronised = "Synchronised");
      },
      73785: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ELayoutStrategyType = void 0),
          ((i =
            t.ELayoutStrategyType || (t.ELayoutStrategyType = {})).LeftOuter =
            "LeftOuter"),
          (i.RightOuter = "RightOuter"),
          (i.TopOuter = "TopOuter"),
          (i.BottomOuter = "BottomOuter"),
          (i.LeftInner = "LeftInner"),
          (i.RightInner = "RightInner"),
          (i.TopInner = "TopInner"),
          (i.BottomInner = "BottomInner"),
          (i.LeftStacked = "LeftStacked"),
          (i.RightStacked = "RightStacked"),
          (i.TopStacked = "TopStacked"),
          (i.BottomStacked = "BottomStacked"),
          (i.Custom = "Custom");
      },
      57935: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EMousePosition = void 0),
          ((i = t.EMousePosition || (t.EMousePosition = {})).OutOfCanvas =
            "OutOfCanvas"),
          (i.AxisArea = "AxisArea"),
          (i.SeriesArea = "SeriesArea");
      },
      65885: (e, t) => {
        "use strict";
        function i(e) {
          return e instanceof Float64Array;
        }
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.subArray = t.isNumberArray = t.isTypedArray = void 0),
          (t.isTypedArray = i),
          (t.isNumberArray = function (e) {
            return (
              Array.isArray(e) && (!(e.length > 0) || "number" == typeof e[0])
            );
          }),
          (t.subArray = function (e, t, r) {
            return i(e) ? e.subarray(t, r) : e.slice(t, r);
          });
      },
      96528: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ENumericFormat = void 0),
          ((i = t.ENumericFormat || (t.ENumericFormat = {})).NoFormat =
            "NoFormat"),
          (i.Decimal = "Decimal"),
          (i.SignificantFigures = "SignificantFigures"),
          (i.Date_DDMMYYYY = "Date_DDMMYYYY"),
          (i.Date_DDMMYY = "Date_DDMMYY"),
          (i.Date_DDMMHHMM = "Date_DDMMHHMM"),
          (i.Date_DDMM = "Date_DDMM"),
          (i.Date_HHMM = "Date_HHMM"),
          (i.Date_HHMMSS = "Date_HHMMSS"),
          (i.Date_SSms = "Date_SSms"),
          (i.Exponential = "Exponential"),
          (i.Scientific = "Scientific"),
          (i.Engineering = "Engineering");
      },
      28436: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EPaletteProviderType = void 0),
          ((i =
            t.EPaletteProviderType || (t.EPaletteProviderType = {})).Gradient =
            "Gradient"),
          (i.DataPointSelection = "DataPointSelection"),
          (i.Custom = "Custom");
      },
      30323: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EPointMarkerType = void 0),
          ((i = t.EPointMarkerType || (t.EPointMarkerType = {})).Ellipse =
            "Ellipse"),
          (i.Cross = "Cross"),
          (i.Sprite = "Sprite"),
          (i.Square = "Square"),
          (i.Triangle = "Triangle"),
          (i.X = "X"),
          (i.Custom = "Custom");
      },
      32406: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ERenderLayer = void 0),
          ((i = t.ERenderLayer || (t.ERenderLayer = {}))[(i.First = 0)] =
            "First"),
          (i[(i.Second = 1)] = "Second"),
          (i[(i.Third = 2)] = "Third");
      },
      34116: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ESceneEntityType = void 0),
          ((i = t.ESceneEntityType || (t.ESceneEntityType = {}))[
            (i.AxisCubeEntity = 0)
          ] = "AxisCubeEntity"),
          (i[(i.Custom = 1)] = "Custom"),
          (i[(i.GizmoEntity = 2)] = "GizmoEntity"),
          (i[(i.RootSceneEntity = 3)] = "RootSceneEntity"),
          (i[(i.ScatterPointsSceneEntity = 4)] = "ScatterPointsSceneEntity"),
          (i[(i.SCRTSceneEntity = 5)] = "SCRTSceneEntity"),
          (i[(i.SurfaceMeshSceneEntity = 6)] = "SurfaceMeshSceneEntity"),
          (i[(i.PointLine3DSceneEntity = 7)] = "PointLine3DSceneEntity");
      },
      91465: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ESciChartSurfaceType = void 0),
          ((i =
            t.ESciChartSurfaceType || (t.ESciChartSurfaceType = {})).Default2D =
            "Default2D"),
          (i.Pie2D = "Pie2D"),
          (i.Default3D = "Default3D");
      },
      26361: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.convertSearchMode = t.ESearchMode = void 0),
          (function (e) {
            (e.Exact = "Exact"),
              (e.Nearest = "Nearest"),
              (e.RoundDown = "RoundDown"),
              (e.RoundUp = "RoundUp");
          })((i = t.ESearchMode || (t.ESearchMode = {}))),
          (t.convertSearchMode = (e, t) => {
            switch (t) {
              case i.Exact:
                return e.SCRTFindIndexSearchMode.Exact;
              case i.Nearest:
                return e.SCRTFindIndexSearchMode.Nearest;
              case i.RoundDown:
                return e.SCRTFindIndexSearchMode.RoundDown;
              case i.RoundUp:
                return e.SCRTFindIndexSearchMode.RoundUp;
            }
          });
      },
      5337: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ESeriesType = void 0),
          ((i = t.ESeriesType || (t.ESeriesType = {})).BandSeries =
            "BandSeries"),
          (i.SplineBandSeries = "SplineBandSeries"),
          (i.BubbleSeries = "BubbleSeries"),
          (i.CandlestickSeries = "CandlestickSeries"),
          (i.ColumnSeries = "ColumnSeries"),
          (i.ImpulseSeries = "ImpulseSeries"),
          (i.LineSeries = "LineSeries"),
          (i.SplineLineSeries = "SplineLineSeries"),
          (i.MountainSeries = "MountainSeries"),
          (i.SplineMountainSeries = "SplineMountainSeries"),
          (i.OhlcSeries = "OhlcSeries"),
          (i.StackedColumnSeries = "StackedColumnSeries"),
          (i.StackedMountainSeries = "StackedMountainSeries"),
          (i.SmoothStackedMountainSeries = "SmoothStackedMountainSeries"),
          (i.UniformContoursSeries = "UniformContoursSeries"),
          (i.UniformHeatmapSeries = "UniformHeatmapSeries"),
          (i.NonUniformHeatmapSeries = "NonUniformHeatmapSeries"),
          (i.StackedMountainCollection = "StackedMountainCollection"),
          (i.StackedColumnCollection = "StackedColumnCollection"),
          (i.ScatterSeries = "ScatterSeries"),
          (i.ErrorBarsSeries = "ErrorBarsSeries"),
          (i.TextSeries = "TextSeries"),
          (i.Custom = "Custom");
      },
      75323: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EShaderEffectType = void 0),
          ((i = t.EShaderEffectType || (t.EShaderEffectType = {})).Glow =
            "Glow"),
          (i.Shadow = "Shadow");
      },
      22022: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Size = void 0);
        class i {
          constructor(e, t) {
            (this.width = e), (this.height = t);
          }
        }
        (t.Size = i), (i.EMPTY = new i(0, 0));
      },
      77809: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.ESvgClippingMode = void 0),
          ((i =
            t.ESvgClippingMode || (t.ESvgClippingMode = {})).SeriesViewRect =
            "SeriesViewRect"),
          (i.SubChart = "SubChart"),
          (i.Chart = "Chart");
      },
      62186: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EColorMapMode = void 0),
          ((i = t.EColorMapMode || (t.EColorMapMode = {}))[
            (i.Interpolated = 0)
          ] = "Interpolated"),
          (i[(i.Stepped = 1)] = "Stepped");
      },
      99176: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 });
      },
      36420: (e, t) => {
        "use strict";
        var i, r, s;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.convertMultiLineAlignment =
            t.EMultiLineAlignment =
            t.EVerticalTextPosition =
            t.EHorizontalTextPosition =
              void 0),
          ((s =
            t.EHorizontalTextPosition ||
            (t.EHorizontalTextPosition = {})).Left = "Left"),
          (s.Center = "Center"),
          (s.Right = "Right"),
          ((r =
            t.EVerticalTextPosition || (t.EVerticalTextPosition = {})).Above =
            "Above"),
          (r.Center = "Center"),
          (r.Below = "Below"),
          (function (e) {
            (e.Left = "Left"), (e.Right = "Right"), (e.Center = "Center");
          })((i = t.EMultiLineAlignment || (t.EMultiLineAlignment = {}))),
          (t.convertMultiLineAlignment = (e, t) => {
            let r = t.eTSRTextAlignMode.Left;
            switch (e) {
              case i.Left:
                r = t.eTSRTextAlignMode.Left;
                break;
              case i.Right:
                r = t.eTSRTextAlignMode.Right;
                break;
              case i.Center:
                r = t.eTSRTextAlignMode.Center;
            }
            return r;
          });
      },
      71238: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.adjustTextStyle =
            t.areEqualTextStyles =
            t.areEqualSimpleTextStyles =
            t.areEqualNativeTextStyles =
            t.areEqualTextureTextStyles =
            t.handleInvalidTextAlignment =
            t.handleInvalidChartTitlePosition =
            t.getIsHorizontalPlacement =
            t.ETitlePosition =
            t.ETextAlignment =
              void 0);
        const r = i(86127);
        var s, o;
        ((o = t.ETextAlignment || (t.ETextAlignment = {})).Center = "Center"),
          (o.Left = "Left"),
          (o.Right = "Right"),
          (function (e) {
            (e.Top = "Top"),
              (e.Bottom = "Bottom"),
              (e.Right = "Right"),
              (e.Left = "Left");
          })((s = t.ETitlePosition || (t.ETitlePosition = {}))),
          (t.getIsHorizontalPlacement = (e) => e === s.Top || e === s.Bottom),
          (t.handleInvalidChartTitlePosition = (e) => {
            throw new Error(`Invalid chart title position: ${e}!`);
          }),
          (t.handleInvalidTextAlignment = (e) => {
            throw new Error(`Invalid text alignment "${e}"!`);
          }),
          (t.areEqualTextureTextStyles = (e, t) =>
            e.color === t.color &&
            e.fontFamily === t.fontFamily &&
            e.fontSize === t.fontSize &&
            e.fontStyle === t.fontStyle &&
            e.fontWeight === t.fontWeight &&
            e.lineSpacing === t.lineSpacing &&
            ((void 0 === e.padding && void 0 === t.padding) ||
              e.padding.equals(t.padding))),
          (t.areEqualNativeTextStyles = (e, t) =>
            e.color === t.color &&
            e.fontFamily === t.fontFamily &&
            e.fontSize === t.fontSize &&
            e.lineSpacing === t.lineSpacing &&
            ((void 0 === e.padding && void 0 === t.padding) ||
              e.padding.equals(t.padding))),
          (t.areEqualSimpleTextStyles = (e, i) =>
            !(!e || !i || !e.useNativeText != !i.useNativeText) &&
            (e.useNativeText && i.useNativeText
              ? (0, t.areEqualNativeTextStyles)(e, i)
              : (0, t.areEqualTextureTextStyles)(e, i))),
          (t.areEqualTextStyles = (e, i) =>
            (0, t.areEqualSimpleTextStyles)(e, i) &&
            e.rotation === i.rotation &&
            e.multilineAlignment === i.multilineAlignment),
          (t.adjustTextStyle = (e) => r.DpiHelper.adjustTextStyle(e));
      },
      62916: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EThemeProviderType = void 0),
          ((i = t.EThemeProviderType || (t.EThemeProviderType = {})).Light =
            "Light"),
          (i.Dark = "Dark"),
          (i.DarkV2 = "DarkV2"),
          (i.Navy = "Navy"),
          (i.Custom = "Custom");
      },
      24149: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EWatermarkPosition = void 0),
          ((i = t.EWatermarkPosition || (t.EWatermarkPosition = {}))[
            (i.BottomLeft = 0)
          ] = "BottomLeft"),
          (i[(i.BottomRight = 1)] = "BottomRight"),
          (i[(i.TopLeft = 2)] = "TopLeft"),
          (i[(i.TopRight = 3)] = "TopRight");
      },
      86699: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EXyDirection = void 0),
          ((i = t.EXyDirection || (t.EXyDirection = {})).XDirection =
            "XDirection"),
          (i.YDirection = "YDirection"),
          (i.XyDirection = "XyDirection");
      },
      9073: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EYRangeMode = void 0),
          ((i = t.EYRangeMode || (t.EYRangeMode = {})).Visible = "Visible"),
          (i.Drawn = "Drawn");
      },
      14379: (e, t) => {
        "use strict";
        var i;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.EZoomState = void 0),
          ((i = t.EZoomState || (t.EZoomState = {}))[(i.AtExtents = 0)] =
            "AtExtents"),
          (i[(i.UserZooming = 1)] = "UserZooming");
      },
      48125: (e, t) => {
        "use strict";
        var i, r;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.LicenseCheckStatus = t.LicenseType = void 0),
          ((r = t.LicenseType || (t.LicenseType = {}))[(r.NoLicense = 0)] =
            "NoLicense"),
          (r[(r.Trial = 1)] = "Trial"),
          (r[(r.Full = 2)] = "Full"),
          (r[(r.Full_Expired = 3)] = "Full_Expired"),
          (r[(r.Trial_Expired = 4)] = "Trial_Expired"),
          (r[(r.Subscription_Expired = 5)] = "Subscription_Expired"),
          (r[(r.Invalid_Developer = 6)] = "Invalid_Developer"),
          (r[(r.Requres_Validation = 7)] = "Requres_Validation"),
          (r[(r.Invalid = 8)] = "Invalid"),
          (r[(r.Community = 9)] = "Community"),
          ((i = t.LicenseCheckStatus || (t.LicenseCheckStatus = {}))[
            (i.NoLicense = 0)
          ] = "NoLicense"),
          (i[(i.FetchingFromServer = 1)] = "FetchingFromServer"),
          (i[(i.StartLookingForLicenseWizard = 2)] =
            "StartLookingForLicenseWizard"),
          (i[(i.LookingForLicenseWizard = 3)] = "LookingForLicenseWizard"),
          (i[(i.ValidatingDeveloperLicense = 4)] =
            "ValidatingDeveloperLicense"),
          (i[(i.NoLicenseInWizard = 5)] = "NoLicenseInWizard"),
          (i[(i.FailedToFindLicenseWizard = 6)] = "FailedToFindLicenseWizard"),
          (i[(i.FailedToValidateDeveloperLicense = 7)] =
            "FailedToValidateDeveloperLicense"),
          (i[(i.DevKeyInRuntimeKey = 8)] = "DevKeyInRuntimeKey"),
          (i[(i.LicenseOK = 9)] = "LicenseOK");
      },
      27307: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.MemoryUsageHelper =
            t.generateIdentifier =
            t.ObjectRegistry =
              void 0);
        const r = i(16155),
          s = i(99263),
          o = i(73538);
        (t.ObjectRegistry = class {
          constructor() {
            (this.weakMapRegistry = new WeakMap()),
              (this.undeletedObjectsMap = new Map()),
              (this.uncollectedObjectsMap = new Map()),
              (this.finalizationRegistry = new FinalizationRegistry((e) => {
                this.uncollectedObjectsMap.delete(e), this.onCollect(e);
              }));
          }
          add(e, t, i = { isWasmObject: !1 }) {
            var r, s;
            const { isWasmObject: o } = i;
            this.weakMapRegistry.has(e) &&
              console.warn("Adding existing entry to the registry!", t),
              this.undeletedObjectsMap.has(t) &&
                console.warn("Adding existing entry id to the registry!", t),
              this.finalizationRegistry.register(e, t),
              this.weakMapRegistry.set(e, t);
            const a =
                null !==
                  (s =
                    null === (r = null == i ? void 0 : i.revocableToken) ||
                    void 0 === r
                      ? void 0
                      : r.proxy) && void 0 !== s
                  ? s
                  : null == i
                  ? void 0
                  : i.proxy,
              n = null == i ? void 0 : i.revocableToken;
            a && this.weakMapRegistry.set(a, t);
            const l = {
              isWasmObject: o,
              objectRef: new WeakRef(e),
              proxyRef: a && new WeakRef(a),
              revocableTokenRef: n && new WeakRef(n),
            };
            e.delete && this.undeletedObjectsMap.set(t, l),
              this.uncollectedObjectsMap.set(t, l);
          }
          remove(e) {
            return (
              this.undeletedObjectsMap.has(e) ||
                this.uncollectedObjectsMap.has(e) ||
                console.warn(`${e} was not found in the ObjectRegistry!`),
              this.undeletedObjectsMap.delete(e)
            );
          }
          getObjectId(e) {
            return this.weakMapRegistry.get(e);
          }
          deleteIDeletableObjects() {
            this.undeletedObjectsMap.forEach((e, t) => {
              e.isWasmObject || this.deleteEntry(e, t);
            });
          }
          deleteWasmObjects() {
            this.undeletedObjectsMap.forEach((e, t) => {
              e.isWasmObject && this.deleteEntry(e, t);
            });
          }
          log() {
            const e = Array.from(this.undeletedObjectsMap.keys()),
              t = Array.from(this.uncollectedObjectsMap.keys()),
              i = e.filter((e) => !this.uncollectedObjectsMap.has(e)),
              s = t.filter((e) => !this.undeletedObjectsMap.has(e)),
              o = r.labelCache.getSize();
            console.log("Object Registry Log Start:"),
              console.log("undeletedObjectsMap", this.undeletedObjectsMap),
              console.log("uncollectedObjectsMap", this.uncollectedObjectsMap),
              console.log("collectedNotDeleted", i),
              console.log("deletedNotCollected", s),
              console.log("weakMap", this.weakMapRegistry),
              console.log("axisLabelCacheSize", o),
              console.log("Object Registry Log End");
          }
          getState() {
            const e = Array.from(this.undeletedObjectsMap.keys()),
              t = Array.from(this.uncollectedObjectsMap.keys()),
              i = {};
            return (
              e.length && (i.undeletedObjectsIds = e),
              t.length && (i.uncollectedObjectsIds = t),
              i
            );
          }
          deleteEntry(e, t) {
            const i = e.objectRef.deref();
            i
              ? (i.delete(), this.remove(t))
              : console.warn(
                  `Looks like the ${t} has already been garbage collected, thus the proper cleanup could not be executed!`
                );
          }
          onCollect(e) {}
        }),
          (t.generateIdentifier = (e) =>
            `${null == e ? void 0 : e.constructor.name}_${(0,
            o.generateGuid)()}`);
        class a {
          static get isMemoryUsageDebugEnabled() {
            return this.isMemoryUsageDebugEnabledProperty;
          }
          static set isMemoryUsageDebugEnabled(e) {
            e &&
              console.warn(
                "Memory usage debug enabled! Make sure to disable it for production build!"
              );
          }
          static register(e, i) {
            var r;
            e
              ? null === (r = a.objectRegistry) ||
                void 0 === r ||
                r.add(e, null != i ? i : (0, t.generateIdentifier)(e))
              : console.warn(`Registering invalid object "${e}"!`);
          }
          static unregister(e) {
            var t;
            null === (t = a.objectRegistry) || void 0 === t || t.remove(e);
          }
          static destroyMultiChart() {
            s.sciChartDestinations.forEach((e) => e.sciChartSurface.delete(!0)),
              s.sciChart3DDestinations.forEach((e) =>
                e.sciChartSurface.delete(!0)
              );
          }
          static destroySingleCharts() {
            s.sciChartSingleDestinations.forEach((e) =>
              e.sciChartSurface.delete(!0)
            ),
              s.sciChart3DSingleDestinations.forEach((e) =>
                e.sciChartSurface.delete(!0)
              );
          }
          static destroyPieCharts() {
            s.sciChartPieDestinations.forEach((e) =>
              e.sciChartSurface.delete(!0)
            );
          }
          static destroyAllCharts() {
            a.destroyMultiChart(),
              a.destroySingleCharts(),
              a.destroyPieCharts();
          }
        }
        (t.MemoryUsageHelper = a), (a.isMemoryUsageDebugEnabledProperty = !1);
      },
      45215: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.appendRangeFifo =
            t.makeIncArray =
            t.isArraySorted =
            t.arrayRemove =
            t.areArraysEqual =
            t.countUnique =
            t.getUniqueValues =
              void 0),
          (t.getUniqueValues = function (e) {
            return e.filter((e, t, i) => null != e && i.indexOf(e) === t);
          }),
          (t.countUnique = function (e) {
            return new Set(e).size;
          }),
          (t.areArraysEqual = (e, t) => {
            if (e === t) return !0;
            if (
              (null == e ? void 0 : e.length) !==
              (null == t ? void 0 : t.length)
            )
              return !1;
            if (e && t)
              for (let i = 0; i < e.length; ++i) if (e[i] !== t[i]) return !1;
            return !0;
          }),
          (t.arrayRemove = function (e, t) {
            for (let i = 0; i < e.length; i++)
              if (e[i] === t) {
                e.splice(i, 1);
                break;
              }
            return e;
          }),
          (t.isArraySorted = function (e, t = !0) {
            let i = !0;
            const r = t ? (t) => e[t] > e[t + 1] : (t) => e[t] < e[t + 1];
            for (let t = 0; t < e.length - 1; t++)
              if (r(t)) {
                i = !1;
                break;
              }
            return i;
          }),
          (t.makeIncArray = function (e, t, i) {
            const r = Array.from(Array(e)).map(
              (e, i) => (null != t ? t : 1) * i
            );
            return i ? r.map(i) : r;
          }),
          (t.appendRangeFifo = function (e, t, i, r) {
            const s = t.length,
              o = e.length;
            if (i >= s + o) {
              t.length += o;
              for (let i = 0; i < o; ++i) t[s + i] = e[i];
            } else if (o > i) {
              const r = o - i;
              t = e.slice(r);
            } else if (i > s) {
              const r = i - s;
              t.length = i;
              for (let i = 0; i < o; ++i)
                i < r ? (t[s + i] = e[i]) : (t[r - i] = e[i]);
            } else {
              let s = o;
              r + o > i && (s = i - r);
              for (let i = 0; i < o; ++i)
                i < s ? (t[r + i] = e[i]) : (t[s - i] = e[i]);
            }
          });
      },
      19387: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.calcAverageForArray = t.calcAverageForDoubleVector = void 0),
          (t.calcAverageForDoubleVector = (e, t, i) => {
            const r = e.size(),
              s = null != i ? i : r - 1;
            if (s >= r || s < 0)
              throw Error("index should be in range [0, length-1]");
            if (s + 1 < t) return NaN;
            let o = 0;
            for (let i = s + 1 - t; i < s + 1; i++) o += e.get(i);
            return (o /= t), o;
          }),
          (t.calcAverageForArray = (e, t, i) => {
            const r = e.length,
              s = null != i ? i : r - 1;
            if (s >= r || s < 0)
              throw Error("index should be in range [0, length-1]");
            if (s + 1 < t) return NaN;
            let o = 0;
            for (let i = s + 1 - t; i < s + 1; i++) o += e[i];
            return (o /= t), o;
          });
      },
      27699: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.appendDoubleVectorFromJsArray =
            t.memCopyFloat32 =
            t.insertDoubleVectorFromJsArray =
            t.SIZEOF_FLOAT32 =
            t.SIZEOF_NUMBER =
              void 0);
        const r = i(23866);
        (t.SIZEOF_NUMBER = 8),
          (t.SIZEOF_FLOAT32 = 4),
          (t.insertDoubleVectorFromJsArray = function (e, i, s, o) {
            r.Guard.notNull(e, "wasmContext"),
              r.Guard.notNull(i, "source"),
              r.Guard.notNull(s, "dest"),
              r.Guard.isTrue(
                o >= 0,
                "destIndex must be greater than or equal to zero"
              ),
              r.Guard.isTrue(
                o <= s.size(),
                "destIndex must be less than or equal to dest.size()"
              );
            const a = i.length;
            if (0 === a) return;
            const n = s.size();
            s.resizeFast(n + a),
              o < n &&
                e.SCRTMemMove(
                  s.dataPtr(o + a),
                  s.dataPtr(o),
                  (n - o) * t.SIZEOF_NUMBER
                ),
              e.HEAPF64.set(i, s.dataPtr(o) / t.SIZEOF_NUMBER);
          }),
          (t.memCopyFloat32 = function (e, i, s, o) {
            r.Guard.notNull(e, "wasmContext"),
              r.Guard.notNull(i, "source"),
              r.Guard.notNull(s, "dest"),
              r.Guard.isTrue(
                o >= 0,
                "destIndex must be greater than or equal to zero"
              ),
              r.Guard.isTrue(
                o <= s.size() + i.length,
                "destIndex must be less than or equal to dest.size() + source.Length"
              ),
              0 !== i.length &&
                e.HEAPF32.set(i, s.dataPtr(o) / t.SIZEOF_FLOAT32);
          }),
          (t.appendDoubleVectorFromJsArray = function (e, i, r, s = !0) {
            let o;
            try {
              if (s) {
                const s = i.size(),
                  o = r.length,
                  a = s,
                  n = a + o;
                i.resizeFast(n);
                const l = i.dataPtr(a);
                e.HEAPF64.set(r, l / t.SIZEOF_NUMBER);
              } else {
                const s = i.size(),
                  a = r.length,
                  n = s,
                  l = n + a;
                e.SCRTSetActiveDoubleVector(i, s),
                  (o = e._malloc(8 * a)),
                  e.HEAPF64.set(r, o / t.SIZEOF_NUMBER),
                  e.ccall(
                    "SCRTFillActiveDoubleVector",
                    null,
                    ["number", "number", "number"],
                    [o, n, l]
                  );
              }
            } catch (e) {
              console.log(e);
            } finally {
              o && e._free(o);
            }
          });
      },
      22950: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.applyOpacityToHtmlColor =
            t.uintArgbColorIsTransparent =
            t.uintArgbColorOverrideOpacity =
            t.uintArgbColorMultiplyOpacity =
            t.uintArgbColorToAbgr =
            t.linearColorMapLerp =
            t.uintArgbColorLerp =
            t.uintArgbColorLerp24bit =
              void 0);
        const r = i(62186),
          s = i(48008);
        function o(e, t, i) {
          const r = 16711935,
            s = 4278255360,
            o = 256 * i,
            a = 256 - o;
          return (
            ((((e & r) * a + (t & r) * o) >> 8) & r) |
            ((((e & s) * a + (t & s) * o) >> 8) & s)
          );
        }
        function a(e, t, i) {
          const r = (65535 & e) >>> 0,
            s = (65535 & t) >>> 0;
          return ((o(e >>> 16, t >>> 16, i) << 16) >>> 0) + o(r, s, i);
        }
        (t.uintArgbColorLerp24bit = o),
          (t.uintArgbColorLerp = a),
          (t.linearColorMapLerp = function (e, t) {
            if (t < e.Minimum)
              return (0, s.parseColorToUIntArgb)(e.GradientStops[0].color);
            const i = 1 / (e.Maximum - e.Minimum),
              o = (t - e.Minimum) * i,
              n = e.GradientStops,
              l = [];
            let d;
            for (d = 1; d < n.length; d++)
              l.push(1 / (n[d].offset - n[d - 1].offset));
            for (d = 0; d < n.length - 1; d++) {
              const t = n[d],
                i = n[d + 1];
              if (o >= t.offset && o < i.offset) {
                if (e.Mode === r.EColorMapMode.Stepped)
                  return (0, s.parseColorToUIntArgb)(t.color);
                const n = (o - t.offset) * l[d];
                return a(
                  (0, s.parseColorToUIntArgb)(t.color),
                  (0, s.parseColorToUIntArgb)(i.color),
                  n
                );
              }
            }
            return (0, s.parseColorToUIntArgb)(e.GradientStops[d].color);
          }),
          (t.uintArgbColorToAbgr = function (e) {
            let t = e - (16777215 & e);
            return (
              (t += (255 & e) << 16),
              (t += ((65280 & e) >> 8) << 8),
              (t += (16711680 & e) >> 16),
              t
            );
          }),
          (t.uintArgbColorMultiplyOpacity = function (e, t) {
            let i = e - (16777215 & e);
            return (
              (i >>>= 24),
              (i *= t),
              (i = Math.floor(i)),
              (i *= 16777216),
              i + (16777215 & e)
            );
          }),
          (t.uintArgbColorOverrideOpacity = function (e, t) {
            let i = 255 * t;
            return (i = Math.floor(i)), (i *= 16777216), i + (16777215 & e);
          }),
          (t.uintArgbColorIsTransparent = function (e) {
            return 4278190080 != e - (16777215 & e);
          }),
          (t.applyOpacityToHtmlColor = function (e, t) {
            const i = (0, s.parseColorToTArgb)(e);
            return (
              (i.opacity = Math.floor(256 * t)), (0, s.parseTArgbToHtmlColor)(i)
            );
          });
      },
      85505: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.convertRgbToHexColor = t.convertColor = void 0),
          (t.convertColor = (e, t = 1) => {
            const r = i(t),
              s = e.toLowerCase();
            return 0 === s.length
              ? ""
              : "#" === s[0]
              ? `0x${r}${s.substr(1)}`
              : `0x${r}${s}`;
          }),
          (t.convertRgbToHexColor = (e, t, r) => "#" + i(e) + i(t) + i(r));
        const i = (e) => {
          if (e >= 1) return "ff";
          if (e <= 0) return "00";
          const t = Math.floor(256 * e).toString(16);
          return 1 === t.length ? "0" + t : t;
        };
      },
      76630: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.convertToPixel = void 0),
          (t.convertToPixel = (e, t, r, s) => {
            const o = "0x" + i(s) + i(e) + i(t) + i(r);
            return parseInt(o, 16);
          });
        const i = (e) => (e >= 255 ? "ff" : e <= 0 ? "00" : e.toString(16));
      },
      41670: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.deleteCookie = t.getCookie = t.setCookie = void 0),
          (t.setCookie = function (e, t, i) {
            const r = new Date(),
              s = t;
            r.setTime(r.getTime() + 24 * i * 60 * 60 * 1e3),
              "undefined" != typeof document &&
                (document.cookie =
                  e + "=" + s + "; expires=" + r.toUTCString() + "; path=/");
          }),
          (t.getCookie = function (e) {
            if ("undefined" == typeof document) return null;
            const t = ("; " + document.cookie).split("; " + e + "=");
            return 2 === t.length ? t.pop().split(";").shift() : "";
          }),
          (t.deleteCookie = function (e) {
            if ("undefined" == typeof document) return;
            const t = new Date();
            t.setTime(t.getTime() + -864e5),
              (document.cookie =
                e + "=; expires=" + t.toUTCString() + "; path=/");
          });
      },
      46544: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.copyDoubleVector = void 0);
        const r = i(27699);
        t.copyDoubleVector = (e, t, i) => {
          const s = e.size();
          t.resizeFast(s),
            i.SCRTMemCopy(t.dataPtr(0), e.dataPtr(0), s * r.SIZEOF_NUMBER);
        };
      },
      72633: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.formatUnixDateToHumanStringYYYY =
            t.formatUnixDateToHumanStringDD =
            t.formatUnixDateToHumanStringMMM =
            t.formatUnixDateToHumanStringMMMDD =
            t.formatUnixDateToHumanStringHHMM =
            t.formatUnixDateToHumanStringSSms =
            t.formatUnixDateToHumanStringHHMMSS =
            t.formatUnixDateToHumanStringDDMM =
            t.formatUnixDateToHumanStringDDMMHHMM =
            t.formatUnixDateToHumanStringDDMMYY =
            t.formatUnixDateToHumanString =
              void 0),
          (t.formatUnixDateToHumanString = (e, t = "en-US") => {
            const i = new Date(1e3 * e).toLocaleDateString(t, {
              month: "numeric",
              year: "numeric",
              day: "numeric",
            });
            return "Invalid Date" === i ? "" : i;
          }),
          (t.formatUnixDateToHumanStringDDMMYY = (e) => {
            const t = new Date(1e3 * e).toLocaleDateString("en-GB", {
              timeZone: "utc",
              year: "2-digit",
              month: "2-digit",
              day: "2-digit",
            });
            return "Invalid Date" === t ? "" : t;
          }),
          (t.formatUnixDateToHumanStringDDMMHHMM = (e) =>
            `${(0, t.formatUnixDateToHumanStringDDMM)(e)} ${(0,
            t.formatUnixDateToHumanStringHHMM)(e)}`),
          (t.formatUnixDateToHumanStringDDMM = (e) => {
            const t = new Date(1e3 * e).toLocaleDateString("en-GB", {
              timeZone: "utc",
              day: "numeric",
              month: "numeric",
            });
            return "Invalid Date" === t ? "" : t;
          }),
          (t.formatUnixDateToHumanStringHHMMSS = (e) => {
            const t = new Date(1e3 * e),
              i = t.getUTCHours(),
              r = t.getUTCMinutes(),
              s = t.getUTCSeconds();
            return isNaN(i) || isNaN(r) || isNaN(s)
              ? ""
              : `${i <= 9 ? `0${i}` : i.toString(10)}:${
                  r <= 9 ? `0${r}` : r.toString(10)
                }:${s <= 9 ? `0${s}` : s.toString(10)}`;
          }),
          (t.formatUnixDateToHumanStringSSms = (e) => {
            const t = new Date(1e3 * e),
              i = t.getUTCSeconds(),
              r = t.getUTCMilliseconds();
            return isNaN(i) || isNaN(r)
              ? ""
              : `${i <= 9 ? `0${i}` : i.toString(10)}.${
                  r <= 9 ? `0${r}` : r.toString(10)
                }`;
          }),
          (t.formatUnixDateToHumanStringHHMM = (e) => {
            const t = new Date(1e3 * e),
              i = t.getUTCHours(),
              r = t.getUTCMinutes();
            return isNaN(i) || isNaN(r)
              ? ""
              : `${i <= 9 ? `0${i}` : i.toString(10)}:${
                  r <= 9 ? `0${r}` : r.toString(10)
                }`;
          }),
          (t.formatUnixDateToHumanStringMMMDD = (e) => {
            const t = new Date(1e3 * e),
              r = t.getUTCMonth(),
              s = t.getUTCDate();
            return isNaN(r) || isNaN(s) ? "" : `${i(r)} ${s}`;
          }),
          (t.formatUnixDateToHumanStringMMM = (e) => {
            const t = new Date(1e3 * e).getUTCMonth();
            return isNaN(t) ? "" : i(t);
          }),
          (t.formatUnixDateToHumanStringDD = (e) => {
            const t = new Date(1e3 * e).getUTCDate();
            if (isNaN(t)) return "";
            const i = t.toString();
            return 2 === i.length ? i : 1 === i.length ? `0${i}` : "";
          }),
          (t.formatUnixDateToHumanStringYYYY = (e) => {
            const t = new Date(1e3 * e).getUTCFullYear();
            return isNaN(t) ? "" : t.toString(10);
          });
        const i = (e) => {
          switch (e) {
            case 0:
              return "Jan";
            case 1:
              return "Feb";
            case 2:
              return "Mar";
            case 3:
              return "Apr";
            case 4:
              return "May";
            case 5:
              return "Jun";
            case 6:
              return "Jul";
            case 7:
              return "Aug";
            case 8:
              return "Sep";
            case 9:
              return "Oct";
            case 10:
              return "Nov";
            case 11:
              return "Dec";
            default:
              throw Error("Not correct month");
          }
        };
      },
      71497: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.logDoubleVector = void 0),
          (t.logDoubleVector = (e, t, i = 2) => {
            let r = "";
            for (let t = 0; t < e.size(); t++) r += e.get(t).toFixed(i) + ",";
            t ? console.log(t, r) : console.log(r);
          });
      },
      52578: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getFontString = void 0),
          (t.getFontString = (e, t, i, r) =>
            t ? `${e} ${t} ${i}px ${r}` : `${e} ${i}px ${r}`);
      },
      73538: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.base64Id = t.generateGuid = void 0),
          (t.generateGuid = () =>
            "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (e) => {
              const t = (16 * Math.random()) | 0;
              return ("x" === e ? t : (3 & t) | 8).toString(16);
            })),
          (t.base64Id = (e = 22) => {
            let t = "";
            for (; t.length < e; ) {
              const e = Math.floor(64 * Math.random());
              t +=
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(
                  e
                );
            }
            return t;
          });
      },
      54535: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.hasAllProperties = void 0),
          (t.hasAllProperties = (e, t) => {
            for (let i = 0; i < t.length; i++)
              if (!e.hasOwnProperty(t[i])) return !1;
            return !0;
          });
      },
      17575: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.hashUtils = void 0);
        const i = (e) =>
          e
            .split("")
            .reduce((e, t) => (e = (e << 5) - e + t.charCodeAt(0)) & e, 0);
        t.hashUtils = {
          generateHash: i,
          generateObjectHash: (e) => {
            const t = JSON.stringify(e);
            return i(t);
          },
          generateBooleanHash: (e) => i(!1 === e ? "0" : !0 === e ? "1" : "-1"),
          generateNumberHash: (e) => {
            const t = e.toString(10);
            return i(t);
          },
          generateCombinedHash: (e) => e.reduce((e, t) => (397 * e) ^ t, 0),
        };
      },
      99064: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.stringOccurrences = t.htmlToElement = void 0),
          (t.htmlToElement = function (e) {
            const t = document.createElement("template");
            return (e = e.trim()), (t.innerHTML = e), t.content.firstChild;
          }),
          (t.stringOccurrences = function (e, t, i = !1) {
            if (((e += ""), (t += "").length <= 0)) return e.length + 1;
            let r = 0,
              s = 0;
            const o = i ? 1 : t.length;
            for (; (s = e.indexOf(t, s)), s >= 0; ) ++r, (s += o);
            return r;
          });
      },
      34483: (e, t) => {
        "use strict";
        function i(e) {
          return new Promise((t, i) => {
            const r = new Image();
            (r.crossOrigin = "Anonymous"),
              (r.onload = () => t(r)),
              (r.onerror = i),
              (r.src = e);
          });
        }
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.createImagesArrayAsync = t.createImageAsync = void 0),
          (t.createImageAsync = i),
          (t.createImagesArrayAsync = function (e) {
            const t = e.map((e) => i(e));
            return Promise.all(t);
          });
      },
      74617: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.testHasExcluded = t.getIncludedAxis = void 0),
          (t.getIncludedAxis = (e, i) =>
            0 === i.size
              ? e
              : (0, t.testHasExcluded)(i)
              ? e.filter((e) => !1 !== i.get(e.id))
              : e.filter((e) => !0 === i.get(e.id))),
          (t.testHasExcluded = (e) => {
            let t = !1;
            return (
              e.forEach((e) => {
                !1 === e && (t = !0);
              }),
              t
            );
          });
      },
      72934: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.isRealNumber = void 0),
          (t.isRealNumber = function (e) {
            return (
              !isNaN(e) &&
              isFinite(e) &&
              e !== Number.MAX_VALUE &&
              e !== Number.MIN_VALUE
            );
          });
      },
      9254: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.Logger = void 0);
        class i {
          static log(e, ...t) {
            console.log(e, t);
          }
          static debug(e, ...t) {
            i.enableDebug && console.debug(e, ...t);
          }
        }
        (t.Logger = i), (i.enableDebug = !1);
      },
      67492: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.logToBase = t.fillNoisySinewave = t.getNoisySinewave = void 0),
          (t.getNoisySinewave = (e, t, i, r, s) => {
            const o = [],
              a = [],
              n = i / t,
              l = 2 * Math.PI * n;
            for (let i = 0; i < e; i++) {
              const n = (i * t) / (e - 1);
              o.push(n);
              const d = r * Math.sin(n * l),
                h = (Math.random() - 0.5) * s;
              a.push(d + h);
            }
            return [o, a];
          }),
          (t.fillNoisySinewave = (e, t, i, r, s, o) => {
            const a = i / t,
              n = 2 * Math.PI * a,
              l = o.getNativeXValues(),
              d = o.getNativeYValues();
            l.reserve(e), d.reserve(e);
            for (let i = 0; i < e; i++) {
              const o = (i * t) / (e - 1),
                a = r * Math.sin(o * n),
                h = (Math.random() - 0.5) * s;
              l.push_back(o), d.push_back(a + h);
            }
          }),
          (t.logToBase = (e, t) =>
            10 === t ? Math.log10(e) : Math.log(e) / (t ? Math.log(t) : 1));
      },
      4748: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.memoize = void 0),
          (t.memoize = function (e, t) {
            let i, r;
            const s = null != t ? t : (e, t) => !e.some((e, i) => e !== t[i]);
            return (...t) => {
              const o = r && s(t, r);
              return (r && o) || ((r = t), (i = e(...t))), i;
            };
          });
      },
      8591: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.checkIsNaN =
            t.toEngineering =
            t.toScientific =
            t.toSuperScript =
            t.formatNumber =
            t.numericHashCode =
            t.formatNumber2Digits =
              void 0);
        const r = i(96528),
          s = i(72633),
          o = i(67492);
        (t.formatNumber2Digits = (e) =>
          (Math.round(100 * (e + Number.EPSILON)) / 100).toFixed(2)),
          (t.numericHashCode = (e, t) => 0 | (e = 31 * e - e + t)),
          (t.formatNumber = (e, i, o, a) => {
            if (void 0 === e) return "";
            switch (i) {
              case r.ENumericFormat.NoFormat:
                return e.toString();
              case r.ENumericFormat.Decimal:
                return e.toFixed(o);
              case r.ENumericFormat.SignificantFigures:
                return Number(e.toPrecision(o)).toString();
              case r.ENumericFormat.Exponential:
                return e.toExponential(o);
              case r.ENumericFormat.Scientific:
                return (0, t.toScientific)(e, o, 10);
              case r.ENumericFormat.Date_DDMMYYYY:
                return (0, s.formatUnixDateToHumanString)(e);
              case r.ENumericFormat.Date_DDMMYY:
                return (0, s.formatUnixDateToHumanStringDDMMYY)(e);
              case r.ENumericFormat.Date_DDMMHHMM:
                return (0, s.formatUnixDateToHumanStringDDMMHHMM)(e);
              case r.ENumericFormat.Date_DDMM:
                return (0, s.formatUnixDateToHumanStringDDMM)(e);
              case r.ENumericFormat.Date_HHMM:
                return (0, s.formatUnixDateToHumanStringHHMM)(e);
              case r.ENumericFormat.Date_HHMMSS:
                return (0, s.formatUnixDateToHumanStringHHMMSS)(e);
              case r.ENumericFormat.Date_SSms:
                return (0, s.formatUnixDateToHumanStringSSms)(e);
              case r.ENumericFormat.Engineering:
                return (0, t.toEngineering)(
                  e,
                  null == a ? void 0 : a.large,
                  null == a ? void 0 : a.small
                );
            }
          });
        const a = ["⁰", "¹", "²", "³", "⁴", "⁵", "⁶", "⁷", "⁸", "⁹"];
        (t.toSuperScript = (e) => {
          let t = "",
            i = e < 0,
            r = Math.abs(e).toString();
          for (const e of r) {
            const i = Number.parseInt(e);
            isNaN(i) || (t += a[i]);
          }
          return (i ? "⁻" : "") + t;
        }),
          (t.toScientific = (e, i, r) => {
            if (0 === e) return "0";
            let s = (0, o.logToBase)(Math.abs(e), r);
            return (
              (s = Math.floor(s)),
              (e / Math.pow(r, s)).toPrecision(i).toString() +
                "x" +
                r.toString() +
                (0, t.toSuperScript)(s)
            );
          }),
          (t.toEngineering = (e, t, i) => {
            const r = Math.abs(e);
            if (
              0 == (null == t ? void 0 : t.length) &&
              0 == (null == i ? void 0 : i.length)
            )
              return e.toString();
            if (
              (!t && r > 1 && (t = ["K", "M", "B", "T"]),
              !i && r < 1 && (i = ["m", "µ", "n", "p"]),
              r > 999)
            ) {
              for (let i = 1; i <= t.length; i++)
                if (r < Math.pow(10, 3 * (i + 1)))
                  return (e / Math.pow(10, 3 * i)).toPrecision(3) + t[i - 1];
              return (
                Math.floor(e / Math.pow(10, 3 * t.length)) + t[t.length - 1]
              );
            }
            if (r < 1 && 0 !== e) {
              for (let t = 0; t < i.length; t++)
                if (r >= Math.pow(10, -3 * (t + 1)))
                  return (e * Math.pow(10, 3 * (t + 1))).toPrecision(3) + i[t];
              return e * Math.pow(10, 3 * i.length) + i[i.length - 1];
            }
            return e.toString();
          }),
          (t.checkIsNaN = (e) => e != e);
      },
      48008: (e, t) => {
        "use strict";
        function i(e, t) {
          const i = s(e);
          return (
            "0x" +
            r(null != t ? t : i.opacity) +
            r(i.red) +
            r(i.green) +
            r(i.blue)
          );
        }
        function r(e) {
          const t = e.toString(16);
          return 1 === t.length ? "0" + t : t;
        }
        function s(e) {
          if (!e || !e.length || e.length > 50)
            throw Error("'" + e + "' is not a valid color...");
          const i = e.match(/^#?([0-9a-f]{3})$/i);
          if (i) {
            const e = i[1],
              t = 255,
              r = 17 * parseInt(e.charAt(0), 16),
              s = 17 * parseInt(e.charAt(1), 16),
              a = 17 * parseInt(e.charAt(2), 16);
            return (
              o([r, s, a], ["red", "green", "blue"]),
              { opacity: t, red: r, green: s, blue: a }
            );
          }
          const r = e.match(/^#?([0-9a-f]{6})$/i);
          if (r) {
            const e = r[1],
              t = 255,
              i = parseInt(e.substr(0, 2), 16),
              s = parseInt(e.substr(2, 2), 16),
              a = parseInt(e.substr(4, 2), 16);
            return (
              o([i, s, a], ["red", "green", "blue"]),
              { opacity: t, red: i, green: s, blue: a }
            );
          }
          const n = e.match(/^#?([0-9a-f]{8})$/i);
          if (n) {
            const e = n[1],
              t = parseInt(e.substr(0, 2), 16),
              i = parseInt(e.substr(2, 2), 16),
              r = parseInt(e.substr(4, 2), 16),
              s = parseInt(e.substr(6, 2), 16);
            return (
              o([s, t, i, r], ["opacity", "red", "green", "blue"]),
              { opacity: s, red: t, green: i, blue: r }
            );
          }
          const l = e.match(
            /^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d*\.?\d*)\s*\)$/i
          );
          if (l) {
            const e = parseFloat(l[4]);
            !(function (e) {
              if (void 0 === e)
                throw Error("parseColor error opacity should not be null");
              if (Number.isNaN(e))
                throw Error("parseColor error opacity should not be NaN");
              if (e < 0 || e > 1)
                throw Error(
                  "parseColor error opacity should be within [0, 1] range"
                );
            })(e);
            const t = a(e),
              i = parseInt(l[1], 10),
              r = parseInt(l[2], 10),
              s = parseInt(l[3], 10);
            return (
              o([i, r, s], ["red", "green", "blue"]),
              { opacity: t, red: i, green: r, blue: s }
            );
          }
          const d = t.webColors[e.toLowerCase()];
          if (d) return s(d);
          throw Error("'" + e + "' is not a valid color...");
        }
        function o(e, t) {
          e.forEach((e, i) => {
            const r = t[i];
            if (void 0 === e)
              throw Error(`parseColor error ${r} color should not be null`);
            if (Number.isNaN(e))
              throw Error(`parseColor error ${r} color should not be NaN`);
            if (e < 0 || e > 255)
              throw Error(
                `parseColor error ${r} color should be within [0, 255] range`
              );
          });
        }
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.webColors =
            t.parseTArgbToHtmlColor =
            t.parseArgbToHtmlColor =
            t.parseColorToTArgb =
            t.toHex =
            t.parseColorToUIntArgb =
            t.parseColorToHexStringAbgr =
            t.parseColorToHexStringArgb =
              void 0),
          (t.parseColorToHexStringArgb = i),
          (t.parseColorToHexStringAbgr = function (e, t) {
            const i = s(e);
            return "0x" + r(t || i.opacity) + r(i.blue) + r(i.green) + r(i.red);
          }),
          (t.parseColorToUIntArgb = function (e, t) {
            return parseInt(i(e, t), 16);
          }),
          (t.toHex = r),
          (t.parseColorToTArgb = s),
          (t.parseArgbToHtmlColor = (e) => {
            const t = e.toString(16);
            if (t.length > 8)
              throw new Error("HTML color length cannot be greater than 8");
            const i = (e, t) => {
              const i = t - e.length;
              return new Array(i + 1).join("0") + e;
            };
            return (
              "#" + i(t.substr(-6), 6) + i(t.substring(0, t.length - 6), 2)
            );
          }),
          (t.parseTArgbToHtmlColor = (e) =>
            (
              "#" +
              n(e.red) +
              n(e.green) +
              n(e.blue) +
              n(e.opacity)
            ).toUpperCase());
        const a = (e) => (e >= 1 ? 255 : e <= 0 ? 0 : Math.floor(256 * e)),
          n = (e) => {
            if (e >= 256) return "ff";
            if (e <= 0) return "00";
            const t = e.toString(16);
            return 1 === t.length ? "0" + t : t;
          };
        t.webColors = {
          transparent: "#00000000",
          aliceblue: "#f0f8ff",
          antiquewhite: "#faebd7",
          aqua: "#00ffff",
          aquamarine: "#7fffd4",
          azure: "#f0ffff",
          beige: "#f5f5dc",
          bisque: "#ffe4c4",
          black: "#000000",
          blanchedalmond: "#ffebcd",
          blue: "#0000ff",
          blueviolet: "#8a2be2",
          brown: "#a52a2a",
          burlywood: "#deb887",
          cadetblue: "#5f9ea0",
          chartreuse: "#7fff00",
          chocolate: "#d2691e",
          coral: "#ff7f50",
          cornflowerblue: "#6495ed",
          cornsilk: "#fff8dc",
          crimson: "#dc143c",
          cyan: "#00ffff",
          darkblue: "#00008b",
          darkcyan: "#008b8b",
          darkgoldenrod: "#b8860b",
          darkgray: "#a9a9a9",
          darkgrey: "#a9a9a9",
          darkgreen: "#006400",
          darkkhaki: "#bdb76b",
          darkmagenta: "#8b008b",
          darkolivegreen: "#556b2f",
          darkorange: "#ff8c00",
          darkorchid: "#9932cc",
          darkred: "#8b0000",
          darksalmon: "#e9967a",
          darkseagreen: "#8fbc8f",
          darkslateblue: "#483d8b",
          darkslategray: "#2f4f4f",
          darkslategrey: "#2f4f4f",
          darkturquoise: "#00ced1",
          darkviolet: "#9400d3",
          deeppink: "#ff1493",
          deepskyblue: "#00bfff",
          dimgray: "#696969",
          dimgrey: "#696969",
          dodgerblue: "#1e90ff",
          firebrick: "#b22222",
          floralwhite: "#fffaf0",
          forestgreen: "#228b22",
          fuchsia: "#ff00ff",
          gainsboro: "#dcdcdc",
          ghostwhite: "#f8f8ff",
          gold: "#ffd700",
          goldenrod: "#daa520",
          gray: "#808080",
          grey: "#808080",
          green: "#008000",
          greenyellow: "#adff2f",
          honeydew: "#f0fff0",
          hotpink: "#ff69b4",
          indianred: "#cd5c5c",
          indigo: "#4b0082",
          ivory: "#fffff0",
          khaki: "#f0e68c",
          lavender: "#e6e6fa",
          lavenderblush: "#fff0f5",
          lawngreen: "#7cfc00",
          lemonchiffon: "#fffacd",
          lightblue: "#add8e6",
          lightcoral: "#f08080",
          lightcyan: "#e0ffff",
          lightgoldenrodyellow: "#fafad2",
          lightgray: "#d3d3d3",
          lightgrey: "#d3d3d3",
          lightgreen: "#90ee90",
          lightpink: "#ffb6c1",
          lightsalmon: "#ffa07a",
          lightseagreen: "#20b2aa",
          lightskyblue: "#87cefa",
          lightslategray: "#778899",
          lightslategrey: "#778899",
          lightsteelblue: "#b0c4de",
          lightyellow: "#ffffe0",
          lime: "#00ff00",
          limegreen: "#32cd32",
          linen: "#faf0e6",
          magenta: "#ff00ff",
          maroon: "#800000",
          mediumaquamarine: "#66cdaa",
          mediumblue: "#0000cd",
          mediumorchid: "#ba55d3",
          mediumpurple: "#9370db",
          mediumseagreen: "#3cb371",
          mediumslateblue: "#7b68ee",
          mediumspringgreen: "#00fa9a",
          mediumturquoise: "#48d1cc",
          mediumvioletred: "#c71585",
          midnightblue: "#191970",
          mintcream: "#f5fffa",
          mistyrose: "#ffe4e1",
          moccasin: "#ffe4b5",
          navajowhite: "#ffdead",
          navy: "#000080",
          oldlace: "#fdf5e6",
          olive: "#808000",
          olivedrab: "#6b8e23",
          orange: "#ffa500",
          orangered: "#ff4500",
          orchid: "#da70d6",
          palegoldenrod: "#eee8aa",
          palegreen: "#98fb98",
          paleturquoise: "#afeeee",
          palevioletred: "#db7093",
          papayawhip: "#ffefd5",
          peachpuff: "#ffdab9",
          peru: "#cd853f",
          pink: "#ffc0cb",
          plum: "#dda0dd",
          powderblue: "#b0e0e6",
          purple: "#800080",
          rebeccapurple: "#663399",
          red: "#ff0000",
          rosybrown: "#bc8f8f",
          royalblue: "#4169e1",
          saddlebrown: "#8b4513",
          salmon: "#fa8072",
          sandybrown: "#f4a460",
          seagreen: "#2e8b57",
          seashell: "#fff5ee",
          sienna: "#a0522d",
          silver: "#c0c0c0",
          skyblue: "#87ceeb",
          slateblue: "#6a5acd",
          slategray: "#708090",
          slategrey: "#708090",
          snow: "#fffafa",
          springgreen: "#00ff7f",
          steelblue: "#4682b4",
          tan: "#d2b48c",
          teal: "#008080",
          thistle: "#d8bfd8",
          tomato: "#ff6347",
          turquoise: "#40e0d0",
          violet: "#ee82ee",
          wheat: "#f5deb3",
          white: "#ffffff",
          whitesmoke: "#f5f5f5",
          yellow: "#ffff00",
          yellowgreen: "#9acd32",
        };
      },
      68021: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.PerformanceDebugHelper = t.EPerformanceMarkType = void 0);
        const r = i(73538);
        var s;
        ((s =
          t.EPerformanceMarkType ||
          (t.EPerformanceMarkType = {})).InitializationStart =
          "InitializationStart"),
          (s.InitializationEnd = "InitializationEnd"),
          (s.EngineInitStart = "EngineInitStart"),
          (s.EngineInitEnd = "EngineInitEnd"),
          (s.LeadingInvalidate = "LeadingInvalidate"),
          (s.Invalidate = "Invalidate"),
          (s.DataUpdateStart = "DataUpdateStart"),
          (s.DataUpdateEnd = "DataUpdateEnd"),
          (s.RenderStart = "RenderStart"),
          (s.RenderEnd = "RenderEnd"),
          (s.Rendered = "Rendered"),
          (s.FullStateRendered = "FullStateRendered"),
          (s.Resize = "Resize"),
          (s.DpiChange = "DpiChange"),
          (s.SetupStart = "SetupStart"),
          (s.SetupEnd = "SetupEnd");
        class o {
          static mark(e, t) {
            var i;
            if (o.enableDebug) {
              const s =
                null !== (i = null == t ? void 0 : t.relatedId) && void 0 !== i
                  ? i
                  : (0, r.generateGuid)();
              return performance.mark(`${e}_${s}`, {
                detail: {
                  relatedId: s,
                  contextId: null == t ? void 0 : t.contextId,
                },
              });
            }
            return null;
          }
          static outputLogs() {
            performance.getEntriesByType("mark").forEach((e) => {
              console.log(e.name, e.startTime);
            });
          }
        }
        (t.PerformanceDebugHelper = o), (o.enableDebug = !1);
      },
      21670: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.calcDistanceFromLineSegment =
            t.calcDotProduct =
            t.testIsInInterval =
            t.testIsInXBounds =
            t.calcAnnotationBordersForAxisMarker =
            t.testIsInBounds =
            t.calcDistance =
            t.calcCrossProduct =
            t.calcDistanceFromLine =
              void 0);
        const r = i(38215);
        (t.calcDistanceFromLine = (e, i, r, s, o, a) =>
          Math.abs(
            (0, t.calcCrossProduct)(r, s, o, a, e, i) /
              (0, t.calcDistance)(r, s, o, a)
          )),
          (t.calcCrossProduct = (e, t, i, r, s, o) =>
            (i - e) * (o - t) - (r - t) * (s - e)),
          (t.calcDistance = (e, t, i, r) => {
            const s = e - i,
              o = t - r;
            return Math.sqrt(s * s + o * o);
          }),
          (t.testIsInBounds = (e, t, i, r, s, o, a = 0) =>
            e >= i - a && e <= s + a && t <= r - a && t >= o + a),
          (t.calcAnnotationBordersForAxisMarker = (
            e,
            t,
            i,
            s,
            o,
            a,
            n,
            l,
            d,
            h,
            u,
            c,
            p,
            g
          ) => {
            const y = { x1: 0, x2: 0, y1: 0, y2: 0 };
            return (
              e
                ? t
                  ? s.axisAlignment === r.EAxisAlignment.Top
                    ? o.axisAlignment === r.EAxisAlignment.Left
                      ? ((y.x1 = a - n.y),
                        (y.y1 = d - n.y),
                        (y.x2 = 0),
                        (y.y2 = d + h - n.y))
                      : o.axisAlignment === r.EAxisAlignment.Right &&
                        ((y.x1 = n.width - a + n.y),
                        (y.y1 = d - n.y),
                        (y.x2 = n.width),
                        (y.y2 = d + h - n.y))
                    : o.axisAlignment === r.EAxisAlignment.Left
                    ? ((y.x1 = a - n.x + u),
                      (y.y1 = d - n.y),
                      (y.x2 = 0),
                      (y.y2 = d + h - n.y))
                    : o.axisAlignment === r.EAxisAlignment.Right &&
                      ((y.x1 = l - u),
                      (y.y1 = d - n.y),
                      (y.x2 = n.width),
                      (y.y2 = d + h - n.y))
                  : i &&
                    (s.axisAlignment === r.EAxisAlignment.Top
                      ? ((y.x1 = l + a / 2 - n.x + c),
                        (y.y1 = h - n.y + c),
                        (y.x2 = l - a / 2 - n.x + c),
                        (y.y2 = 0))
                      : ((y.x1 = l - a / 2 - n.x + c),
                        (y.y1 = d - c),
                        (y.x2 = l + a / 2 - n.x + c),
                        (y.y2 = n.height)))
                : t
                ? p
                  ? ((y.x1 = l - a / 2 + c),
                    (y.y1 = d + h - n.y),
                    (y.x2 = l + a / 2),
                    (y.y2 = d))
                  : g
                  ? ((y.x1 = l - a / 2 + u - n.x),
                    (y.y1 = d - u),
                    (y.x2 = l + a / 2 + u - n.x),
                    (y.y2 = n.height))
                  : ((y.x1 = l - a / 2 - c),
                    (y.y1 = d - u),
                    (y.x2 = l + a / 2 - c),
                    (y.y2 = d + h - n.y))
                : i &&
                  (g
                    ? ((y.x1 = a - n.x + c),
                      (y.y1 = d - h / 2),
                      (y.x2 = 0),
                      (y.y2 = d + h / 2))
                    : ((y.x1 = l - c),
                      (y.y1 = d - h / 2 - u),
                      (y.x2 = l + a),
                      (y.y2 = d + h / 2 - u))),
              y
            );
          }),
          (t.testIsInXBounds = (e, t, i) => Math.abs(e - t) < i),
          (t.testIsInInterval = (e, t, i, r = 0) =>
            t <= i ? t - r <= e && e <= i + r : i - r <= e && e <= t + r),
          (t.calcDotProduct = (e, t, i, r, s, o) =>
            (i - e) * (s - i) + (r - t) * (o - r)),
          (t.calcDistanceFromLineSegment = (e, i, r, s, o, a) =>
            (0, t.calcDotProduct)(r, s, o, a, e, i) > 0
              ? (0, t.calcDistance)(o, a, e, i)
              : (0, t.calcDotProduct)(o, a, r, s, e, i) > 0
              ? (0, t.calcDistance)(r, s, e, i)
              : (0, t.calcDistanceFromLine)(e, i, r, s, o, a));
      },
      20346: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getRandomInRange = void 0),
          (t.getRandomInRange = (e, t, i) => {
            const r = Math.random();
            return (
              parseInt(((e + r * (t - e)) * Math.pow(10, i)).toFixed(i), 10) /
              Math.pow(10, i)
            );
          });
      },
      61090: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getNextRandomPriceBarFactory = t.getStocksDataFactory = void 0);
        const r = i(20346);
        t.getStocksDataFactory = (e, t, i) => (s, o) => {
          const a = s + e,
            n = o,
            l = (0, r.getRandomInRange)(t, i, 3),
            d = Math.abs(n - l),
            h = Math.max(n, l),
            u = (0, r.getRandomInRange)(h, Math.min(i, h + 0.7 * d), 3),
            c = Math.min(n, l);
          return {
            xValue: a,
            openValue: n,
            highValue: u,
            lowValue: (0, r.getRandomInRange)(Math.max(t, c - 0.7 * d), c, 3),
            closeValue: l,
          };
        };
        class s {
          constructor(e, t, i, r, s, o) {
            (this.xValue = e),
              (this.openValue = t),
              (this.highValue = i),
              (this.lowValue = r),
              (this.closeValue = s),
              (this.volume = o);
          }
        }
        t.getNextRandomPriceBarFactory = (e, t, i, r) => {
          let a = e,
            n = new s(e, r, r, r, r, 0);
          return (e = !1) =>
            e
              ? (() => {
                  const e =
                      n.closeValue +
                      (Math.random() - 0.48) * (n.closeValue / 100),
                    t = e > n.highValue ? e : n.highValue,
                    i = e < n.lowValue ? e : n.lowValue,
                    r = 0.05 * (3e4 * Math.random() + 2e4);
                  return (
                    (n = new s(n.xValue, n.openValue, t, i, e, n.volume + r)), n
                  );
                })()
              : (() => {
                  const e = n.closeValue,
                    l = ((Math.random() - 0.9) * r) / 30,
                    d = Math.random(),
                    h =
                      0.5 * r +
                      (r / 2) * Math.sin(727220521664304e-20 * a) +
                      (r / 16) * Math.cos(727220521664304e-19 * a) +
                      (r / 32) * Math.sin(727220521664304e-19 * (10 + d) * a) +
                      (r / 64) * Math.cos(727220521664304e-19 * (20 + d) * a) +
                      l,
                    u = Math.max(e, h) + (Math.random() * r) / 100,
                    c = Math.min(e, h) - (Math.random() * r) / 100,
                    p = 3e4 * Math.random() + 2e4,
                    g = i ? o(n.xValue) : n.xValue;
                  return (
                    (n = new s(g + 60 * t, e, u, c, h, p)), (a += 60 * t), n
                  );
                })();
        };
        const o = (e) => e;
      },
      94532: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getAttributeFromString = void 0),
          (t.getAttributeFromString = (e, t) => {
            const i = e.indexOf(t);
            if (i >= 0) {
              const t = e.indexOf('"', i),
                r = t >= 0 ? e.indexOf('"', t + 1) : -1;
              if (r >= 0) {
                const i = e.substr(t + 1, r - t - 1),
                  s = parseInt(i, 10);
                if (!isNaN(s)) return s;
              }
            }
          });
      },
      87092: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getNativeTextSize = t.wrapNativeText = void 0);
        const r = i(98353);
        (t.wrapNativeText = (e, t, i, r) => {
          if (0 === t) return e;
          if (!e) return "";
          const s = [],
            o = e.split(" "),
            a = o[0].trim(),
            n = a + " " + a + "\n" + o.map((e) => e.trim()).join("\n");
          i.CalculateStringBounds(null != n ? n : "", r, 2);
          let l = "",
            d = 0,
            h = r.GetLineBounds(0).m_fWidth - 2 * r.GetLineBounds(1).m_fWidth;
          for (let e = 0; e < o.length; e++) {
            const i = o[e],
              a = r.GetLineBounds(e + 1).m_fWidth,
              n = l + ("" !== l ? " " : "") + i;
            (d += ("" !== l ? h : 0) + a),
              d > t
                ? "" === l
                  ? (s.push(i), (d = 0))
                  : (s.push(l), (l = i), (d = a))
                : (l = n),
              l.endsWith("\n") && (d = 0);
          }
          return s.push(l), s.join("\n");
        }),
          (t.getNativeTextSize = (e, t, i, s, o = 0) => {
            const a = (0, r.getTextBounds)(s);
            t.CalculateStringBounds(e, a, 0);
            let n = 0;
            for (let e = 0; e < a.GetLinesCount(); e++) {
              const t = a.GetLineBounds(e),
                i = t.m_fHeight - t.m_fOffsetY;
              n < i && (n = i);
            }
            const l = Math.round(n * (i.lineSpacing - 1)),
              d = Math.round(
                a.m_fHeight +
                  (a.GetLinesCount() - 1) * l +
                  i.padding.top +
                  i.padding.bottom
              ),
              h = Math.round(a.m_fWidth + i.padding.left + i.padding.right),
              u = a.GetLineBounds(0).m_fHeight,
              c = ((o % 360) * Math.PI) / 180;
            let p = Math.sin(c),
              g = Math.cos(c);
            const y = Math.round(h * Math.abs(g) + d * Math.abs(p)),
              f = Math.round(h * Math.abs(p) + d * Math.abs(g));
            let v = 0,
              m = 0;
            return (
              o >= 0 && o < 90
                ? ((v = (d - i.padding.top - u) * p + i.padding.left * g),
                  (m = i.padding.left * p + (i.padding.top + u) * g))
                : o >= 90 && o <= 180
                ? ((v = y - (i.padding.top + u) * p + i.padding.left * g),
                  (m = -(d - i.padding.top - u) * g + i.padding.left * p))
                : o > 180 && o <= 270
                ? ((v = y - (i.padding.top + u - d) * p + i.padding.left * g),
                  (m = f + (i.padding.top + u) * g + i.padding.left * p))
                : o > 270 &&
                  o < 360 &&
                  ((v = -(i.padding.top + u) * p + i.padding.left * g),
                  (m = f - (d - u - i.padding.top) * g + i.padding.left * p)),
              {
                textHeight: f,
                textWidth: y,
                nativeLineSpacing: l,
                deltaX: v,
                deltaY: m,
              }
            );
          });
      },
      58345: (e, t) => {
        "use strict";
        var i, r, s;
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.getTooltipPositionProperties =
            t.getUpdatedPoints =
            t.getEndPoint =
            t.getStartPoint =
            t.getTotalSpacing =
            t.getTotalSize =
            t.checkHasOverlap =
            t.spreadTooltips =
            t.EShift =
            t.ECoord =
            t.ESize =
              void 0),
          (function (e) {
            (e.width = "width"), (e.height = "height");
          })((i = t.ESize || (t.ESize = {}))),
          (function (e) {
            (e.xCoord = "xCoord"), (e.yCoord = "yCoord");
          })((r = t.ECoord || (t.ECoord = {}))),
          (function (e) {
            (e.xCoordShift = "xCoordShift"), (e.yCoordShift = "yCoordShift");
          })((s = t.EShift || (t.EShift = {}))),
          (t.spreadTooltips = (e, i, r, s, o) => {
            const a = new Map(),
              n = e.length,
              l = (0, t.getTotalSize)(e, r.sizePropertyName),
              d = l + (0, t.getTotalSpacing)(e, s),
              h = e[0],
              u = e[n - 1];
            let c = (0, t.getStartPoint)(
                h[r.coordPropertyName],
                h[r.shiftPropertyName],
                i
              ),
              p = (0, t.getEndPoint)(
                u[r.coordPropertyName],
                u[r.shiftPropertyName],
                i,
                u[r.sizePropertyName]
              );
            const g = (0, t.getUpdatedPoints)(c, p, d, o[r.sizePropertyName]);
            (c = g.start), (p = g.end);
            const y = (p - c - l) / (e.length - 1);
            return (
              e.reduce(
                (e, t) => (
                  a.set(t.index, (e - t[r.coordPropertyName]) / i),
                  e + t[r.sizePropertyName] + y
                ),
                c
              ),
              a
            );
          }),
          (t.checkHasOverlap = (e, t, i, r) => {
            const s = e.length;
            for (let o = 0; o < s - 1; o++) {
              const s = e[o],
                a =
                  s[r.coordPropertyName] +
                  s[r.sizePropertyName] +
                  s[r.shiftPropertyName] * i,
                n = e[o + 1];
              if (n[r.coordPropertyName] + n[r.shiftPropertyName] * i - a < t)
                return !0;
            }
            return !1;
          }),
          (t.getTotalSize = (e, t) =>
            e.reduce((e, i) => {
              const r = i[t];
              return "number" == typeof r ? e + r : e;
            }, 0)),
          (t.getTotalSpacing = (e, t) => (e.length - 1) * t),
          (t.getStartPoint = (e, t, i) => e + t * i),
          (t.getEndPoint = (e, t, i, r) => e + t * i + r),
          (t.getUpdatedPoints = (e, t, i, r) => {
            const s = i - (t - e),
              o = s / 2,
              a = r - t;
            let n = e - o,
              l = t + o;
            return (
              e < o && ((n = 0), (l = t + (s - e))),
              a < o && ((n = e - (s - a)), (l = r)),
              { start: n, end: l }
            );
          }),
          (t.getTooltipPositionProperties = (e) =>
            e
              ? {
                  sizePropertyName: i.width,
                  coordPropertyName: r.xCoord,
                  shiftPropertyName: s.xCoordShift,
                }
              : {
                  sizePropertyName: i.height,
                  coordPropertyName: r.yCoord,
                  shiftPropertyName: s.yCoordShift,
                });
      },
      32873: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.fitSvgToViewRect =
            t.fitElementToViewRect =
            t.convertToRelativeHtmlSize =
            t.convertToHtmlPx =
            t.translateDataValueRectToAbsolute =
            t.translateToNotScaled =
            t.translateFromSeriesViewRectToCanvasY =
            t.translateFromSeriesViewRectToCanvasX =
            t.translateFromCanvasToSeriesViewRectY =
            t.translateFromCanvasToSeriesViewRectX =
            t.translateFromSeriesViewRectToCanvas =
            t.translateFromCanvasToSeriesViewRect =
              void 0);
        const r = i(86127),
          s = i(75772),
          o = i(87459);
        (t.translateFromCanvasToSeriesViewRect = (e, t, i = !1) => {
          if (!t) return;
          const r = e.x - t.x,
            o = e.y - t.y;
          return i || !(r < 0 || r > t.width || o < 0 || o > t.height)
            ? new s.Point(r, o)
            : void 0;
        }),
          (t.translateFromSeriesViewRectToCanvas = (e, t, i = !1) => {
            if (!t) return;
            const r = e.x + t.x,
              o = e.y + t.y;
            return i || !(r < 0 || r > t.width || o < 0 || o > t.height)
              ? new s.Point(r, o)
              : void 0;
          }),
          (t.translateFromCanvasToSeriesViewRectX = (e, t, i = !1) => {
            if (!t) return;
            const r = e - t.x;
            return i || !(r < 0 || r > t.width) ? r : void 0;
          }),
          (t.translateFromCanvasToSeriesViewRectY = (e, t, i = !1) => {
            if (!t) return;
            const r = e - t.y;
            return i || !(r < 0 || r > t.height) ? r : void 0;
          }),
          (t.translateFromSeriesViewRectToCanvasX = (e, t, i = !1) => {
            if (!t) return;
            const r = e + t.x;
            return i || !(r < 0 || r > t.width) ? r : void 0;
          }),
          (t.translateFromSeriesViewRectToCanvasY = (e, t, i = !1) => {
            if (!t) return;
            const r = e + t.y;
            return i || !(r < 0 || r > t.height) ? r : void 0;
          }),
          (t.translateToNotScaled = (e) => e / r.DpiHelper.PIXEL_RATIO),
          (t.translateDataValueRectToAbsolute = (e, i, r, s) => {
            const { x: a, y: n, width: l, height: d } = e,
              h = (0, t.translateToNotScaled)(s.left),
              u = (0, t.translateToNotScaled)(s.top),
              c = i.getCurrentCoordinateCalculator(),
              p = r.getCurrentCoordinateCalculator();
            let g = i.isVerticalChart ? p.getCoordinate(a) : c.getCoordinate(a),
              y = i.isVerticalChart ? c.getCoordinate(n) : p.getCoordinate(n);
            (g = Math.max((0, t.translateToNotScaled)(g), 0)),
              (y = Math.max((0, t.translateToNotScaled)(y), 0));
            const f = i.flippedCoordinates ? a - l : a + l,
              v = r.flippedCoordinates ? n + d : n - d;
            let m = (0, t.translateToNotScaled)(
                i.isVerticalChart ? c.getCoordinate(v) : p.getCoordinate(v)
              ),
              S = (0, t.translateToNotScaled)(
                i.isVerticalChart ? p.getCoordinate(f) : c.getCoordinate(f)
              );
            return (
              (g += h),
              (y += u),
              (S += h),
              (m += u),
              new o.Rect(g, y, Math.abs(S - g), Math.abs(y - m))
            );
          }),
          (t.convertToHtmlPx = (e) => `${e}px`),
          (t.convertToRelativeHtmlSize = (e) => 100 * e + "%"),
          (t.fitElementToViewRect = (e, t) => {
            (e.style.marginLeft = `${t.x}px`),
              (e.style.marginTop = `${t.y}px`),
              e.setAttribute("width", t.width.toString()),
              e.setAttribute("height", t.height.toString()),
              (e.style.width = t.width + "px"),
              (e.style.height = t.height + "px");
          }),
          (t.fitSvgToViewRect = (e, i) => {
            (0, t.fitElementToViewRect)(e, i), (e.currentScale = 1);
          });
      },
      11727: (e, t, i) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.fromTsrVector4 = t.updateTsrVector4 = void 0);
        const r = i(23866);
        (t.updateTsrVector4 = (e, t) => {
          r.Guard.notNull(e, "color");
          const i = 1 / 255;
          (t.x = e.red * i),
            (t.y = e.green * i),
            (t.z = e.blue * i),
            (t.w = e.opacity * i);
        }),
          (t.fromTsrVector4 = (e) => (
            r.Guard.notNull(e, "tsrColor"),
            {
              red: Math.round(255 * e.x),
              green: Math.round(255 * e.y),
              blue: Math.round(255 * e.z),
              opacity: Math.round(255 * e.w),
            }
          ));
      },
      14936: (e, t) => {
        "use strict";
        Object.defineProperty(t, "__esModule", { value: !0 }),
          (t.zeroArray2D = void 0),
          (t.zeroArray2D = (e) => {
            if (!e) return;
            const i = [];
            for (let r = 0; r < e[0]; ++r)
              i.push(1 === e.length ? 0 : (0, t.zeroArray2D)(e.slice(1)));
            return i;
          });
      },
      84215: (e) => {
        var t,
          i =
            ((t =
              "undefined" != typeof document && document.currentScript
                ? document.currentScript.src
                : void 0),
            function (e = {}) {
              var i, r;
              ((e = void 0 !== e ? e : {}).ready = new Promise((e, t) => {
                (i = e), (r = t);
              })),
                e.expectedDataFileDownloads ||
                  (e.expectedDataFileDownloads = 0),
                e.expectedDataFileDownloads++,
                e.ENVIRONMENT_IS_PTHREAD ||
                  e.$ww ||
                  (function (t) {
                    "object" == typeof window
                      ? window.encodeURIComponent(
                          window.location.pathname
                            .toString()
                            .substring(
                              0,
                              window.location.pathname
                                .toString()
                                .lastIndexOf("/")
                            ) + "/"
                        )
                      : "undefined" == typeof process &&
                        "undefined" != typeof location &&
                        encodeURIComponent(
                          location.pathname
                            .toString()
                            .substring(
                              0,
                              location.pathname.toString().lastIndexOf("/")
                            ) + "/"
                        );
                    var i = "scichart2d.data",
                      r = "scichart2d.data";
                    "function" != typeof e.locateFilePackage ||
                      e.locateFile ||
                      ((e.locateFile = e.locateFilePackage),
                      v(
                        "warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)"
                      ));
                    var s,
                      o,
                      a,
                      n,
                      l = e.locateFile ? e.locateFile(r, "") : r,
                      d = t.remote_package_size,
                      h = null,
                      u = e.getPreloadedPackage
                        ? e.getPreloadedPackage(l, d)
                        : null;
                    function c() {
                      function r(e, t) {
                        if (!e) throw t + new Error().stack;
                      }
                      function s(e, t, i) {
                        (this.start = e), (this.end = t), (this.audio = i);
                      }
                      e.FS_createPath("/", "assets", !0, !0),
                        (s.prototype = {
                          requests: {},
                          open: function (t, i) {
                            (this.name = i),
                              (this.requests[i] = this),
                              e.addRunDependency(`fp ${this.name}`);
                          },
                          send: function () {},
                          onload: function () {
                            var e = this.byteArray.subarray(
                              this.start,
                              this.end
                            );
                            this.finish(e);
                          },
                          finish: function (t) {
                            e.FS_createDataFile(this.name, null, t, !0, !0, !0),
                              e.removeRunDependency(`fp ${this.name}`),
                              (this.requests[this.name] = null);
                          },
                        });
                      for (var o = t.files, a = 0; a < o.length; ++a)
                        new s(o[a].start, o[a].end, o[a].audio || 0).open(
                          "GET",
                          o[a].filename
                        );
                      function n(i) {
                        r(i, "Loading data file failed."),
                          r(
                            i.constructor.name === ArrayBuffer.name,
                            "bad input to processPackageData"
                          );
                        var o = new Uint8Array(i);
                        s.prototype.byteArray = o;
                        for (var a = t.files, n = 0; n < a.length; ++n)
                          s.prototype.requests[a[n].filename].onload();
                        e.removeRunDependency("datafile_scichart2d.data");
                      }
                      e.addRunDependency("datafile_scichart2d.data"),
                        e.preloadResults || (e.preloadResults = {}),
                        (e.preloadResults[i] = { fromCache: !1 }),
                        u ? (n(u), (u = null)) : (h = n);
                    }
                    u ||
                      ((s = l),
                      (o = d),
                      (a = function (e) {
                        h ? (h(e), (h = null)) : (u = e);
                      }),
                      (n = new XMLHttpRequest()).open("GET", s, !0),
                      (n.responseType = "arraybuffer"),
                      (n.onprogress = function (t) {
                        var i = s,
                          r = o;
                        if ((t.total && (r = t.total), t.loaded)) {
                          n.addedTotal
                            ? (e.dataFileDownloads[i].loaded = t.loaded)
                            : ((n.addedTotal = !0),
                              e.dataFileDownloads || (e.dataFileDownloads = {}),
                              (e.dataFileDownloads[i] = {
                                loaded: t.loaded,
                                total: r,
                              }));
                          var a = 0,
                            l = 0,
                            d = 0;
                          for (var h in e.dataFileDownloads) {
                            var u = e.dataFileDownloads[h];
                            (a += u.total), (l += u.loaded), d++;
                          }
                          (a = Math.ceil(
                            (a * e.expectedDataFileDownloads) / d
                          )),
                            e.setStatus &&
                              e.setStatus(`Downloading data... (${l}/${a})`);
                        } else
                          e.dataFileDownloads ||
                            (e.setStatus && e.setStatus("Downloading data..."));
                      }),
                      (n.onerror = function (e) {
                        throw new Error("NetworkError for: " + s);
                      }),
                      (n.onload = function (e) {
                        if (
                          !(
                            200 == n.status ||
                            304 == n.status ||
                            206 == n.status ||
                            (0 == n.status && n.response)
                          )
                        )
                          throw new Error(n.statusText + " : " + n.responseURL);
                        var t = n.response;
                        a(t);
                      }),
                      n.send(null)),
                      e.calledRun
                        ? c()
                        : (e.preRun || (e.preRun = []), e.preRun.push(c));
                  })({
                    files: [
                      {
                        filename: "/assets/SCRTNAssets.web.pkg",
                        start: 0,
                        end: 118922,
                      },
                      {
                        filename: "/assets/TSRAssets.web.pkg",
                        start: 118922,
                        end: 734386,
                      },
                    ],
                    remote_package_size: 734386,
                  }),
                li &&
                  (li = function (t) {
                    t = ai(t);
                    var i = ni[t] || document.querySelector(t);
                    return "#canvas" === t && (i = i || e.canvas), i;
                  });
              var s,
                o,
                a,
                n,
                l = Object.assign({}, e),
                d = [],
                h = "./this.program",
                u = (e, t) => {
                  throw t;
                },
                c = !0,
                p = !1,
                g = "";
              (c || p) &&
                (p
                  ? (g = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (g = document.currentScript.src),
                t && (g = t),
                (g =
                  0 !== g.indexOf("blob:")
                    ? g.substr(0, g.replace(/[?#].*/, "").lastIndexOf("/") + 1)
                    : ""),
                (s = (e) => {
                  var t = new XMLHttpRequest();
                  return t.open("GET", e, !1), t.send(null), t.responseText;
                }),
                p &&
                  (a = (e) => {
                    var t = new XMLHttpRequest();
                    return (
                      t.open("GET", e, !1),
                      (t.responseType = "arraybuffer"),
                      t.send(null),
                      new Uint8Array(t.response)
                    );
                  }),
                (o = (e, t, i) => {
                  var r = new XMLHttpRequest();
                  r.open("GET", e, !0),
                    (r.responseType = "arraybuffer"),
                    (r.onload = () => {
                      200 == r.status || (0 == r.status && r.response)
                        ? t(r.response)
                        : i();
                    }),
                    (r.onerror = i),
                    r.send(null);
                }),
                (n = (e) => (document.title = e)));
              var y,
                f = e.print || console.log.bind(console),
                v = e.printErr || console.error.bind(console);
              Object.assign(e, l),
                (l = null),
                e.arguments && (d = e.arguments),
                e.thisProgram && (h = e.thisProgram),
                e.quit && (u = e.quit),
                e.wasmBinary && (y = e.wasmBinary);
              var m,
                S = e.noExitRuntime || !0;
              "object" != typeof WebAssembly &&
                j("no native wasm support detected");
              var P,
                C,
                x,
                b,
                A,
                T,
                E,
                R,
                w,
                D,
                L = !1;
              function M(e, t) {
                e || j(t);
              }
              function I() {
                var t = m.buffer;
                (e.HEAP8 = C = new Int8Array(t)),
                  (e.HEAP16 = b = new Int16Array(t)),
                  (e.HEAP32 = T = new Int32Array(t)),
                  (e.HEAPU8 = x = new Uint8Array(t)),
                  (e.HEAPU16 = A = new Uint16Array(t)),
                  (e.HEAPU32 = E = new Uint32Array(t)),
                  (e.HEAPF32 = R = new Float32Array(t)),
                  (e.HEAPF64 = w = new Float64Array(t));
              }
              var O = [],
                k = [],
                _ = [],
                V = [],
                N = [],
                F = 0;
              function B() {
                return S || F > 0;
              }
              var H = 0,
                z = null,
                Y = null;
              function G(t) {
                H++, e.monitorRunDependencies && e.monitorRunDependencies(H);
              }
              function X(t) {
                if (
                  (H--,
                  e.monitorRunDependencies && e.monitorRunDependencies(H),
                  0 == H && (null !== z && (clearInterval(z), (z = null)), Y))
                ) {
                  var i = Y;
                  (Y = null), i();
                }
              }
              function j(t) {
                e.onAbort && e.onAbort(t),
                  v((t = "Aborted(" + t + ")")),
                  (L = !0),
                  (P = 1),
                  (t += ". Build with -sASSERTIONS for more info.");
                var i = new WebAssembly.RuntimeError(t);
                throw (r(i), i);
              }
              var W,
                U,
                $,
                q,
                K = "data:application/octet-stream;base64,";
              function Z(e) {
                return e.startsWith(K);
              }
              function J(e) {
                try {
                  if (e == W && y) return new Uint8Array(y);
                  if (a) return a(e);
                  throw "both async and sync fetching of the wasm failed";
                } catch (e) {
                  j(e);
                }
              }
              function Q(e, t, i) {
                return (function (e) {
                  return y || (!c && !p) || "function" != typeof fetch
                    ? Promise.resolve().then(() => J(e))
                    : fetch(e, { credentials: "same-origin" })
                        .then((t) => {
                          if (!t.ok)
                            throw (
                              "failed to load wasm binary file at '" + e + "'"
                            );
                          return t.arrayBuffer();
                        })
                        .catch(() => J(e));
                })(e)
                  .then((e) => WebAssembly.instantiate(e, t))
                  .then((e) => e)
                  .then(i, (e) => {
                    v("failed to asynchronously prepare wasm: " + e), j(e);
                  });
              }
              Z((W = "scichart2d.wasm")) ||
                ((U = W), (W = e.locateFile ? e.locateFile(U, g) : g + U));
              var ee = {
                386820: () => {
                  var e =
                    navigator.userAgent || navigator.vendor || window.opera;
                  return /windows phone/i.test(e)
                    ? 0
                    : /Android/i.test(e)
                    ? 1
                    : /iPad|iPhone|iPod/.test(e) && !window.MSStream
                    ? 2
                    : 0;
                },
                387090: () => e.getRandomValue(),
                387126: () => {
                  if (void 0 === e.getRandomValue)
                    try {
                      var t = "object" == typeof window ? window : self,
                        i = void 0 !== t.crypto ? t.crypto : t.msCrypto,
                        r = function () {
                          var e = new Uint32Array(1);
                          return i.getRandomValues(e), e[0] >>> 0;
                        };
                      r(), (e.getRandomValue = r);
                    } catch (t) {
                      try {
                        var s = Math.pow(2, 32),
                          o = function () {
                            return (
                              Math.floor(Math.random() * Math.floor(s)) >>> 0
                            );
                          };
                        o(), (e.getRandomValue = o);
                      } catch (e) {
                        throw "No secure random number generator found";
                      }
                    }
                },
                387808: (e) => {
                  var t =
                      Ce(e) + "\n\nAbort/Retry/Ignore/AlwaysIgnore? [ariA] :",
                    i = window.prompt(t, "i");
                  return (
                    null === i && (i = "i"), allocate(ce(i), "i8", ALLOC_NORMAL)
                  );
                },
                388033: () =>
                  "undefined" != typeof AudioContext ||
                  "undefined" != typeof webkitAudioContext,
                388180: () =>
                  (void 0 !== navigator.mediaDevices &&
                    void 0 !== navigator.mediaDevices.getUserMedia) ||
                  void 0 !== navigator.webkitGetUserMedia,
                388414: (t) => {
                  void 0 === e.SDL2 && (e.SDL2 = {});
                  var i,
                    r,
                    s = e.SDL2;
                  return (
                    t ? (s.capture = {}) : (s.audio = {}),
                    s.audioContext ||
                      ("undefined" != typeof AudioContext
                        ? (s.audioContext = new AudioContext())
                        : "undefined" != typeof webkitAudioContext &&
                          (s.audioContext = new webkitAudioContext()),
                      s.audioContext &&
                        ((i = s.audioContext),
                        r ||
                          (r = [document, document.getElementById("canvas")]),
                        ["keydown", "mousedown", "touchstart"].forEach((e) => {
                          r.forEach((t) => {
                            t &&
                              (function (e, t, r) {
                                e.addEventListener(
                                  t,
                                  () => {
                                    "suspended" === i.state && i.resume();
                                  },
                                  { once: !0 }
                                );
                              })(t, e);
                          });
                        }))),
                    void 0 === s.audioContext ? -1 : 0
                  );
                },
                388907: () => e.SDL2.audioContext.sampleRate,
                388975: (t, i, r, s) => {
                  var o = e.SDL2,
                    a = function (e) {
                      void 0 !== o.capture.silenceTimer &&
                        (clearTimeout(o.capture.silenceTimer),
                        (o.capture.silenceTimer = void 0)),
                        (o.capture.mediaStreamNode =
                          o.audioContext.createMediaStreamSource(e)),
                        (o.capture.scriptProcessorNode =
                          o.audioContext.createScriptProcessor(i, t, 1)),
                        (o.capture.scriptProcessorNode.onaudioprocess =
                          function (e) {
                            void 0 !== o &&
                              void 0 !== o.capture &&
                              (e.outputBuffer.getChannelData(0).fill(0),
                              (o.capture.currentCaptureBuffer = e.inputBuffer),
                              se("vi", r, [s]));
                          }),
                        o.capture.mediaStreamNode.connect(
                          o.capture.scriptProcessorNode
                        ),
                        o.capture.scriptProcessorNode.connect(
                          o.audioContext.destination
                        ),
                        (o.capture.stream = e);
                    },
                    n = function (e) {};
                  (o.capture.silenceBuffer = o.audioContext.createBuffer(
                    t,
                    i,
                    o.audioContext.sampleRate
                  )),
                    o.capture.silenceBuffer.getChannelData(0).fill(0),
                    (o.capture.silenceTimer = setTimeout(function () {
                      (o.capture.currentCaptureBuffer =
                        o.capture.silenceBuffer),
                        se("vi", r, [s]);
                    }, (i / o.audioContext.sampleRate) * 1e3)),
                    void 0 !== navigator.mediaDevices &&
                    void 0 !== navigator.mediaDevices.getUserMedia
                      ? navigator.mediaDevices
                          .getUserMedia({ audio: !0, video: !1 })
                          .then(a)
                          .catch(n)
                      : void 0 !== navigator.webkitGetUserMedia &&
                        navigator.webkitGetUserMedia(
                          { audio: !0, video: !1 },
                          a,
                          n
                        );
                },
                390627: (t, i, r, s) => {
                  var o = e.SDL2;
                  (o.audio.scriptProcessorNode =
                    o.audioContext.createScriptProcessor(i, 0, t)),
                    (o.audio.scriptProcessorNode.onaudioprocess = function (e) {
                      void 0 !== o &&
                        void 0 !== o.audio &&
                        ((o.audio.currentOutputBuffer = e.outputBuffer),
                        se("vi", r, [s]));
                    }),
                    o.audio.scriptProcessorNode.connect(
                      o.audioContext.destination
                    );
                },
                391037: (t, i) => {
                  for (
                    var r = e.SDL2,
                      s = r.capture.currentCaptureBuffer.numberOfChannels,
                      o = 0;
                    o < s;
                    ++o
                  ) {
                    var a = r.capture.currentCaptureBuffer.getChannelData(o);
                    if (a.length != i)
                      throw (
                        "Web Audio capture buffer length mismatch! Destination size: " +
                        a.length +
                        " samples vs expected " +
                        i +
                        " samples!"
                      );
                    if (1 == s)
                      for (var n = 0; n < i; ++n) oe(t + 4 * n, a[n], "float");
                    else
                      for (n = 0; n < i; ++n)
                        oe(t + 4 * (n * s + o), a[n], "float");
                  }
                },
                391642: (t, i) => {
                  for (
                    var r = e.SDL2,
                      s = r.audio.currentOutputBuffer.numberOfChannels,
                      o = 0;
                    o < s;
                    ++o
                  ) {
                    var a = r.audio.currentOutputBuffer.getChannelData(o);
                    if (a.length != i)
                      throw (
                        "Web Audio output buffer length mismatch! Destination size: " +
                        a.length +
                        " samples vs expected " +
                        i +
                        " samples!"
                      );
                    for (var n = 0; n < i; ++n)
                      a[n] = R[(t + ((n * s + o) << 2)) >> 2];
                  }
                },
                392122: (t) => {
                  var i = e.SDL2;
                  if (t) {
                    if (
                      (void 0 !== i.capture.silenceTimer &&
                        clearTimeout(i.capture.silenceTimer),
                      void 0 !== i.capture.stream)
                    ) {
                      for (
                        var r = i.capture.stream.getAudioTracks(), s = 0;
                        s < r.length;
                        s++
                      )
                        i.capture.stream.removeTrack(r[s]);
                      i.capture.stream = void 0;
                    }
                    void 0 !== i.capture.scriptProcessorNode &&
                      ((i.capture.scriptProcessorNode.onaudioprocess =
                        function (e) {}),
                      i.capture.scriptProcessorNode.disconnect(),
                      (i.capture.scriptProcessorNode = void 0)),
                      void 0 !== i.capture.mediaStreamNode &&
                        (i.capture.mediaStreamNode.disconnect(),
                        (i.capture.mediaStreamNode = void 0)),
                      void 0 !== i.capture.silenceBuffer &&
                        (i.capture.silenceBuffer = void 0),
                      (i.capture = void 0);
                  } else
                    null != i.audio.scriptProcessorNode &&
                      (i.audio.scriptProcessorNode.disconnect(),
                      (i.audio.scriptProcessorNode = void 0)),
                      (i.audio = void 0);
                  void 0 !== i.audioContext &&
                    void 0 === i.audio &&
                    void 0 === i.capture &&
                    (i.audioContext.close(), (i.audioContext = void 0));
                },
                393294: (t, i, r) => {
                  var s = t,
                    o = i,
                    a = r;
                  e.SDL2 || (e.SDL2 = {});
                  var n = e.SDL2;
                  n.ctxCanvas !== e.canvas &&
                    ((n.ctx = e.createContext(e.canvas, !1, !0)),
                    (n.ctxCanvas = e.canvas)),
                    (n.w === s && n.h === o && n.imageCtx === n.ctx) ||
                      ((n.image = n.ctx.createImageData(s, o)),
                      (n.w = s),
                      (n.h = o),
                      (n.imageCtx = n.ctx));
                  var l,
                    d = n.image.data,
                    h = a >> 2,
                    u = 0;
                  if (
                    "undefined" != typeof CanvasPixelArray &&
                    d instanceof CanvasPixelArray
                  )
                    for (l = d.length; u < l; ) {
                      var c = T[h];
                      (d[u] = 255 & c),
                        (d[u + 1] = (c >> 8) & 255),
                        (d[u + 2] = (c >> 16) & 255),
                        (d[u + 3] = 255),
                        h++,
                        (u += 4);
                    }
                  else {
                    n.data32Data !== d &&
                      ((n.data32 = new Int32Array(d.buffer)),
                      (n.data8 = new Uint8Array(d.buffer)),
                      (n.data32Data = d));
                    var p = n.data32;
                    (l = p.length), p.set(T.subarray(h, h + l));
                    var g = n.data8,
                      y = 3,
                      f = y + 4 * l;
                    if (l % 8 == 0)
                      for (; y < f; )
                        (g[y] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (y = (y + 4) | 0);
                    else for (; y < f; ) (g[y] = 255), (y = (y + 4) | 0);
                  }
                  n.ctx.putImageData(n.image, 0, 0);
                },
                394763: (e, t, i, r, s) => {
                  var o = e,
                    a = t,
                    n = i,
                    l = r,
                    d = s,
                    h = document.createElement("canvas");
                  (h.width = o), (h.height = a);
                  var u,
                    c = h.getContext("2d"),
                    p = c.createImageData(o, a),
                    g = p.data,
                    y = d >> 2,
                    f = 0;
                  if (
                    "undefined" != typeof CanvasPixelArray &&
                    g instanceof CanvasPixelArray
                  )
                    for (u = g.length; f < u; ) {
                      var v = T[y];
                      (g[f] = 255 & v),
                        (g[f + 1] = (v >> 8) & 255),
                        (g[f + 2] = (v >> 16) & 255),
                        (g[f + 3] = (v >> 24) & 255),
                        y++,
                        (f += 4);
                    }
                  else {
                    var m = new Int32Array(g.buffer);
                    (u = m.length), m.set(T.subarray(y, y + u));
                  }
                  c.putImageData(p, 0, 0);
                  var S =
                      0 === n && 0 === l
                        ? "url(" + h.toDataURL() + "), auto"
                        : "url(" +
                          h.toDataURL() +
                          ") " +
                          n +
                          " " +
                          l +
                          ", auto",
                    P = xa(S.length + 1);
                  return wt(S, P, S.length + 1), P;
                },
                395752: (t) => {
                  e.canvas && (e.canvas.style.cursor = Ce(t));
                },
                395835: () => {
                  e.canvas && (e.canvas.style.cursor = "none");
                },
                395904: () => window.innerWidth,
                395934: () => window.innerHeight,
              };
              function te(e) {
                (this.name = "ExitStatus"),
                  (this.message = `Program terminated with exit(${e})`),
                  (this.status = e);
              }
              function ie(t) {
                for (; t.length > 0; ) t.shift()(e);
              }
              function re(e) {
                return D.get(e);
              }
              function se(t, i, r) {
                return t.includes("j")
                  ? (function (t, i, r) {
                      var s = e["dynCall_" + t];
                      return r && r.length
                        ? s.apply(null, [i].concat(r))
                        : s.call(null, i);
                    })(t, i, r)
                  : re(i).apply(null, r);
              }
              function oe(e, t, i = "i8") {
                switch ((i.endsWith("*") && (i = "*"), i)) {
                  case "i1":
                  case "i8":
                    C[e >> 0] = t;
                    break;
                  case "i16":
                    b[e >> 1] = t;
                    break;
                  case "i32":
                    T[e >> 2] = t;
                    break;
                  case "i64":
                    (q = [
                      t >>> 0,
                      (($ = t),
                      +Math.abs($) >= 1
                        ? $ > 0
                          ? +Math.floor($ / 4294967296) >>> 0
                          : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>> 0
                        : 0),
                    ]),
                      (T[e >> 2] = q[0]),
                      (T[(e + 4) >> 2] = q[1]);
                    break;
                  case "float":
                    R[e >> 2] = t;
                    break;
                  case "double":
                    w[e >> 3] = t;
                    break;
                  case "*":
                    E[e >> 2] = t;
                    break;
                  default:
                    j(`invalid type for setValue: ${i}`);
                }
              }
              function ae(e) {
                (this.excPtr = e),
                  (this.ptr = e - 24),
                  (this.set_type = function (e) {
                    E[(this.ptr + 4) >> 2] = e;
                  }),
                  (this.get_type = function () {
                    return E[(this.ptr + 4) >> 2];
                  }),
                  (this.set_destructor = function (e) {
                    E[(this.ptr + 8) >> 2] = e;
                  }),
                  (this.get_destructor = function () {
                    return E[(this.ptr + 8) >> 2];
                  }),
                  (this.set_caught = function (e) {
                    (e = e ? 1 : 0), (C[(this.ptr + 12) >> 0] = e);
                  }),
                  (this.get_caught = function () {
                    return 0 != C[(this.ptr + 12) >> 0];
                  }),
                  (this.set_rethrown = function (e) {
                    (e = e ? 1 : 0), (C[(this.ptr + 13) >> 0] = e);
                  }),
                  (this.get_rethrown = function () {
                    return 0 != C[(this.ptr + 13) >> 0];
                  }),
                  (this.init = function (e, t) {
                    this.set_adjusted_ptr(0),
                      this.set_type(e),
                      this.set_destructor(t);
                  }),
                  (this.set_adjusted_ptr = function (e) {
                    E[(this.ptr + 16) >> 2] = e;
                  }),
                  (this.get_adjusted_ptr = function () {
                    return E[(this.ptr + 16) >> 2];
                  }),
                  (this.get_exception_ptr = function () {
                    if (Ma(this.get_type())) return E[this.excPtr >> 2];
                    var e = this.get_adjusted_ptr();
                    return 0 !== e ? e : this.excPtr;
                  });
              }
              var ne = {
                isAbs: (e) => "/" === e.charAt(0),
                splitPath: (e) =>
                  /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                    .exec(e)
                    .slice(1),
                normalizeArray: (e, t) => {
                  for (var i = 0, r = e.length - 1; r >= 0; r--) {
                    var s = e[r];
                    "." === s
                      ? e.splice(r, 1)
                      : ".." === s
                      ? (e.splice(r, 1), i++)
                      : i && (e.splice(r, 1), i--);
                  }
                  if (t) for (; i; i--) e.unshift("..");
                  return e;
                },
                normalize: (e) => {
                  var t = ne.isAbs(e),
                    i = "/" === e.substr(-1);
                  return (
                    (e = ne
                      .normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !t
                      )
                      .join("/")) ||
                      t ||
                      (e = "."),
                    e && i && (e += "/"),
                    (t ? "/" : "") + e
                  );
                },
                dirname: (e) => {
                  var t = ne.splitPath(e),
                    i = t[0],
                    r = t[1];
                  return i || r
                    ? (r && (r = r.substr(0, r.length - 1)), i + r)
                    : ".";
                },
                basename: (e) => {
                  if ("/" === e) return "/";
                  var t = (e = (e = ne.normalize(e)).replace(
                    /\/$/,
                    ""
                  )).lastIndexOf("/");
                  return -1 === t ? e : e.substr(t + 1);
                },
                join: function () {
                  var e = Array.prototype.slice.call(arguments);
                  return ne.normalize(e.join("/"));
                },
                join2: (e, t) => ne.normalize(e + "/" + t),
              };
              function le(e) {
                return (le = (function () {
                  if (
                    "object" == typeof crypto &&
                    "function" == typeof crypto.getRandomValues
                  )
                    return (e) => crypto.getRandomValues(e);
                  j("initRandomDevice");
                })())(e);
              }
              var de = {
                resolve: function () {
                  for (
                    var e = "", t = !1, i = arguments.length - 1;
                    i >= -1 && !t;
                    i--
                  ) {
                    var r = i >= 0 ? arguments[i] : Pe.cwd();
                    if ("string" != typeof r)
                      throw new TypeError(
                        "Arguments to path.resolve must be strings"
                      );
                    if (!r) return "";
                    (e = r + "/" + e), (t = ne.isAbs(r));
                  }
                  return (
                    (t ? "/" : "") +
                      (e = ne
                        .normalizeArray(
                          e.split("/").filter((e) => !!e),
                          !t
                        )
                        .join("/")) || "."
                  );
                },
                relative: (e, t) => {
                  function i(e) {
                    for (var t = 0; t < e.length && "" === e[t]; t++);
                    for (var i = e.length - 1; i >= 0 && "" === e[i]; i--);
                    return t > i ? [] : e.slice(t, i - t + 1);
                  }
                  (e = de.resolve(e).substr(1)), (t = de.resolve(t).substr(1));
                  for (
                    var r = i(e.split("/")),
                      s = i(t.split("/")),
                      o = Math.min(r.length, s.length),
                      a = o,
                      n = 0;
                    n < o;
                    n++
                  )
                    if (r[n] !== s[n]) {
                      a = n;
                      break;
                    }
                  var l = [];
                  for (n = a; n < r.length; n++) l.push("..");
                  return (l = l.concat(s.slice(a))).join("/");
                },
              };
              function he(e) {
                for (var t = 0, i = 0; i < e.length; ++i) {
                  var r = e.charCodeAt(i);
                  r <= 127
                    ? t++
                    : r <= 2047
                    ? (t += 2)
                    : r >= 55296 && r <= 57343
                    ? ((t += 4), ++i)
                    : (t += 3);
                }
                return t;
              }
              function ue(e, t, i, r) {
                if (!(r > 0)) return 0;
                for (var s = i, o = i + r - 1, a = 0; a < e.length; ++a) {
                  var n = e.charCodeAt(a);
                  if (
                    (n >= 55296 &&
                      n <= 57343 &&
                      (n =
                        (65536 + ((1023 & n) << 10)) |
                        (1023 & e.charCodeAt(++a))),
                    n <= 127)
                  ) {
                    if (i >= o) break;
                    t[i++] = n;
                  } else if (n <= 2047) {
                    if (i + 1 >= o) break;
                    (t[i++] = 192 | (n >> 6)), (t[i++] = 128 | (63 & n));
                  } else if (n <= 65535) {
                    if (i + 2 >= o) break;
                    (t[i++] = 224 | (n >> 12)),
                      (t[i++] = 128 | ((n >> 6) & 63)),
                      (t[i++] = 128 | (63 & n));
                  } else {
                    if (i + 3 >= o) break;
                    (t[i++] = 240 | (n >> 18)),
                      (t[i++] = 128 | ((n >> 12) & 63)),
                      (t[i++] = 128 | ((n >> 6) & 63)),
                      (t[i++] = 128 | (63 & n));
                  }
                }
                return (t[i] = 0), i - s;
              }
              function ce(e, t, i) {
                var r = i > 0 ? i : he(e) + 1,
                  s = new Array(r),
                  o = ue(e, s, 0, s.length);
                return t && (s.length = o), s;
              }
              var pe =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0;
              function ge(e, t, i) {
                for (var r = t + i, s = t; e[s] && !(s >= r); ) ++s;
                if (s - t > 16 && e.buffer && pe)
                  return pe.decode(e.subarray(t, s));
                for (var o = ""; t < s; ) {
                  var a = e[t++];
                  if (128 & a) {
                    var n = 63 & e[t++];
                    if (192 != (224 & a)) {
                      var l = 63 & e[t++];
                      if (
                        (a =
                          224 == (240 & a)
                            ? ((15 & a) << 12) | (n << 6) | l
                            : ((7 & a) << 18) |
                              (n << 12) |
                              (l << 6) |
                              (63 & e[t++])) < 65536
                      )
                        o += String.fromCharCode(a);
                      else {
                        var d = a - 65536;
                        o += String.fromCharCode(
                          55296 | (d >> 10),
                          56320 | (1023 & d)
                        );
                      }
                    } else o += String.fromCharCode(((31 & a) << 6) | n);
                  } else o += String.fromCharCode(a);
                }
                return o;
              }
              var ye = {
                ttys: [],
                init: function () {},
                shutdown: function () {},
                register: function (e, t) {
                  (ye.ttys[e] = { input: [], output: [], ops: t }),
                    Pe.registerDevice(e, ye.stream_ops);
                },
                stream_ops: {
                  open: function (e) {
                    var t = ye.ttys[e.node.rdev];
                    if (!t) throw new Pe.ErrnoError(43);
                    (e.tty = t), (e.seekable = !1);
                  },
                  close: function (e) {
                    e.tty.ops.fsync(e.tty);
                  },
                  fsync: function (e) {
                    e.tty.ops.fsync(e.tty);
                  },
                  read: function (e, t, i, r, s) {
                    if (!e.tty || !e.tty.ops.get_char)
                      throw new Pe.ErrnoError(60);
                    for (var o = 0, a = 0; a < r; a++) {
                      var n;
                      try {
                        n = e.tty.ops.get_char(e.tty);
                      } catch (e) {
                        throw new Pe.ErrnoError(29);
                      }
                      if (void 0 === n && 0 === o) throw new Pe.ErrnoError(6);
                      if (null == n) break;
                      o++, (t[i + a] = n);
                    }
                    return o && (e.node.timestamp = Date.now()), o;
                  },
                  write: function (e, t, i, r, s) {
                    if (!e.tty || !e.tty.ops.put_char)
                      throw new Pe.ErrnoError(60);
                    try {
                      for (var o = 0; o < r; o++)
                        e.tty.ops.put_char(e.tty, t[i + o]);
                    } catch (e) {
                      throw new Pe.ErrnoError(29);
                    }
                    return r && (e.node.timestamp = Date.now()), o;
                  },
                },
                default_tty_ops: {
                  get_char: function (e) {
                    if (!e.input.length) {
                      var t = null;
                      if (
                        ("undefined" != typeof window &&
                        "function" == typeof window.prompt
                          ? null !== (t = window.prompt("Input: ")) &&
                            (t += "\n")
                          : "function" == typeof readline &&
                            null !== (t = readline()) &&
                            (t += "\n"),
                        !t)
                      )
                        return null;
                      e.input = ce(t, !0);
                    }
                    return e.input.shift();
                  },
                  put_char: function (e, t) {
                    null === t || 10 === t
                      ? (f(ge(e.output, 0)), (e.output = []))
                      : 0 != t && e.output.push(t);
                  },
                  fsync: function (e) {
                    e.output &&
                      e.output.length > 0 &&
                      (f(ge(e.output, 0)), (e.output = []));
                  },
                },
                default_tty1_ops: {
                  put_char: function (e, t) {
                    null === t || 10 === t
                      ? (v(ge(e.output, 0)), (e.output = []))
                      : 0 != t && e.output.push(t);
                  },
                  fsync: function (e) {
                    e.output &&
                      e.output.length > 0 &&
                      (v(ge(e.output, 0)), (e.output = []));
                  },
                },
              };
              function fe(e) {
                j();
              }
              var ve = {
                  ops_table: null,
                  mount: function (e) {
                    return ve.createNode(null, "/", 16895, 0);
                  },
                  createNode: function (e, t, i, r) {
                    if (Pe.isBlkdev(i) || Pe.isFIFO(i))
                      throw new Pe.ErrnoError(63);
                    ve.ops_table ||
                      (ve.ops_table = {
                        dir: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                            lookup: ve.node_ops.lookup,
                            mknod: ve.node_ops.mknod,
                            rename: ve.node_ops.rename,
                            unlink: ve.node_ops.unlink,
                            rmdir: ve.node_ops.rmdir,
                            readdir: ve.node_ops.readdir,
                            symlink: ve.node_ops.symlink,
                          },
                          stream: { llseek: ve.stream_ops.llseek },
                        },
                        file: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                          },
                          stream: {
                            llseek: ve.stream_ops.llseek,
                            read: ve.stream_ops.read,
                            write: ve.stream_ops.write,
                            allocate: ve.stream_ops.allocate,
                            mmap: ve.stream_ops.mmap,
                            msync: ve.stream_ops.msync,
                          },
                        },
                        link: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                            readlink: ve.node_ops.readlink,
                          },
                          stream: {},
                        },
                        chrdev: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                          },
                          stream: Pe.chrdev_stream_ops,
                        },
                      });
                    var s = Pe.createNode(e, t, i, r);
                    return (
                      Pe.isDir(s.mode)
                        ? ((s.node_ops = ve.ops_table.dir.node),
                          (s.stream_ops = ve.ops_table.dir.stream),
                          (s.contents = {}))
                        : Pe.isFile(s.mode)
                        ? ((s.node_ops = ve.ops_table.file.node),
                          (s.stream_ops = ve.ops_table.file.stream),
                          (s.usedBytes = 0),
                          (s.contents = null))
                        : Pe.isLink(s.mode)
                        ? ((s.node_ops = ve.ops_table.link.node),
                          (s.stream_ops = ve.ops_table.link.stream))
                        : Pe.isChrdev(s.mode) &&
                          ((s.node_ops = ve.ops_table.chrdev.node),
                          (s.stream_ops = ve.ops_table.chrdev.stream)),
                      (s.timestamp = Date.now()),
                      e && ((e.contents[t] = s), (e.timestamp = s.timestamp)),
                      s
                    );
                  },
                  getFileDataAsTypedArray: function (e) {
                    return e.contents
                      ? e.contents.subarray
                        ? e.contents.subarray(0, e.usedBytes)
                        : new Uint8Array(e.contents)
                      : new Uint8Array(0);
                  },
                  expandFileStorage: function (e, t) {
                    var i = e.contents ? e.contents.length : 0;
                    if (!(i >= t)) {
                      (t = Math.max(t, (i * (i < 1048576 ? 2 : 1.125)) >>> 0)),
                        0 != i && (t = Math.max(t, 256));
                      var r = e.contents;
                      (e.contents = new Uint8Array(t)),
                        e.usedBytes > 0 &&
                          e.contents.set(r.subarray(0, e.usedBytes), 0);
                    }
                  },
                  resizeFileStorage: function (e, t) {
                    if (e.usedBytes != t)
                      if (0 == t) (e.contents = null), (e.usedBytes = 0);
                      else {
                        var i = e.contents;
                        (e.contents = new Uint8Array(t)),
                          i &&
                            e.contents.set(
                              i.subarray(0, Math.min(t, e.usedBytes))
                            ),
                          (e.usedBytes = t);
                      }
                  },
                  node_ops: {
                    getattr: function (e) {
                      var t = {};
                      return (
                        (t.dev = Pe.isChrdev(e.mode) ? e.id : 1),
                        (t.ino = e.id),
                        (t.mode = e.mode),
                        (t.nlink = 1),
                        (t.uid = 0),
                        (t.gid = 0),
                        (t.rdev = e.rdev),
                        Pe.isDir(e.mode)
                          ? (t.size = 4096)
                          : Pe.isFile(e.mode)
                          ? (t.size = e.usedBytes)
                          : Pe.isLink(e.mode)
                          ? (t.size = e.link.length)
                          : (t.size = 0),
                        (t.atime = new Date(e.timestamp)),
                        (t.mtime = new Date(e.timestamp)),
                        (t.ctime = new Date(e.timestamp)),
                        (t.blksize = 4096),
                        (t.blocks = Math.ceil(t.size / t.blksize)),
                        t
                      );
                    },
                    setattr: function (e, t) {
                      void 0 !== t.mode && (e.mode = t.mode),
                        void 0 !== t.timestamp && (e.timestamp = t.timestamp),
                        void 0 !== t.size && ve.resizeFileStorage(e, t.size);
                    },
                    lookup: function (e, t) {
                      throw Pe.genericErrors[44];
                    },
                    mknod: function (e, t, i, r) {
                      return ve.createNode(e, t, i, r);
                    },
                    rename: function (e, t, i) {
                      if (Pe.isDir(e.mode)) {
                        var r;
                        try {
                          r = Pe.lookupNode(t, i);
                        } catch (e) {}
                        if (r)
                          for (var s in r.contents) throw new Pe.ErrnoError(55);
                      }
                      delete e.parent.contents[e.name],
                        (e.parent.timestamp = Date.now()),
                        (e.name = i),
                        (t.contents[i] = e),
                        (t.timestamp = e.parent.timestamp),
                        (e.parent = t);
                    },
                    unlink: function (e, t) {
                      delete e.contents[t], (e.timestamp = Date.now());
                    },
                    rmdir: function (e, t) {
                      var i = Pe.lookupNode(e, t);
                      for (var r in i.contents) throw new Pe.ErrnoError(55);
                      delete e.contents[t], (e.timestamp = Date.now());
                    },
                    readdir: function (e) {
                      var t = [".", ".."];
                      for (var i in e.contents)
                        e.contents.hasOwnProperty(i) && t.push(i);
                      return t;
                    },
                    symlink: function (e, t, i) {
                      var r = ve.createNode(e, t, 41471, 0);
                      return (r.link = i), r;
                    },
                    readlink: function (e) {
                      if (!Pe.isLink(e.mode)) throw new Pe.ErrnoError(28);
                      return e.link;
                    },
                  },
                  stream_ops: {
                    read: function (e, t, i, r, s) {
                      var o = e.node.contents;
                      if (s >= e.node.usedBytes) return 0;
                      var a = Math.min(e.node.usedBytes - s, r);
                      if (a > 8 && o.subarray) t.set(o.subarray(s, s + a), i);
                      else for (var n = 0; n < a; n++) t[i + n] = o[s + n];
                      return a;
                    },
                    write: function (e, t, i, r, s, o) {
                      if ((t.buffer === C.buffer && (o = !1), !r)) return 0;
                      var a = e.node;
                      if (
                        ((a.timestamp = Date.now()),
                        t.subarray && (!a.contents || a.contents.subarray))
                      ) {
                        if (o)
                          return (
                            (a.contents = t.subarray(i, i + r)),
                            (a.usedBytes = r),
                            r
                          );
                        if (0 === a.usedBytes && 0 === s)
                          return (
                            (a.contents = t.slice(i, i + r)),
                            (a.usedBytes = r),
                            r
                          );
                        if (s + r <= a.usedBytes)
                          return a.contents.set(t.subarray(i, i + r), s), r;
                      }
                      if (
                        (ve.expandFileStorage(a, s + r),
                        a.contents.subarray && t.subarray)
                      )
                        a.contents.set(t.subarray(i, i + r), s);
                      else
                        for (var n = 0; n < r; n++)
                          a.contents[s + n] = t[i + n];
                      return (a.usedBytes = Math.max(a.usedBytes, s + r)), r;
                    },
                    llseek: function (e, t, i) {
                      var r = t;
                      if (
                        (1 === i
                          ? (r += e.position)
                          : 2 === i &&
                            Pe.isFile(e.node.mode) &&
                            (r += e.node.usedBytes),
                        r < 0)
                      )
                        throw new Pe.ErrnoError(28);
                      return r;
                    },
                    allocate: function (e, t, i) {
                      ve.expandFileStorage(e.node, t + i),
                        (e.node.usedBytes = Math.max(e.node.usedBytes, t + i));
                    },
                    mmap: function (e, t, i, r, s) {
                      if (!Pe.isFile(e.node.mode)) throw new Pe.ErrnoError(43);
                      var o,
                        a,
                        n = e.node.contents;
                      if (2 & s || n.buffer !== C.buffer) {
                        if (
                          ((i > 0 || i + t < n.length) &&
                            (n = n.subarray
                              ? n.subarray(i, i + t)
                              : Array.prototype.slice.call(n, i, i + t)),
                          (a = !0),
                          !(o = fe()))
                        )
                          throw new Pe.ErrnoError(48);
                        C.set(n, o);
                      } else (a = !1), (o = n.byteOffset);
                      return { ptr: o, allocated: a };
                    },
                    msync: function (e, t, i, r, s) {
                      return ve.stream_ops.write(e, t, 0, r, i, !1), 0;
                    },
                  },
                },
                me = e.preloadPlugins || [];
              function Se(e, t) {
                var i = 0;
                return e && (i |= 365), t && (i |= 146), i;
              }
              var Pe = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, t = {}) => {
                  if (!(e = de.resolve(e))) return { path: "", node: null };
                  if (
                    (t = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      t
                    )).recurse_count > 8
                  )
                    throw new Pe.ErrnoError(32);
                  for (
                    var i = e.split("/").filter((e) => !!e),
                      r = Pe.root,
                      s = "/",
                      o = 0;
                    o < i.length;
                    o++
                  ) {
                    var a = o === i.length - 1;
                    if (a && t.parent) break;
                    if (
                      ((r = Pe.lookupNode(r, i[o])),
                      (s = ne.join2(s, i[o])),
                      Pe.isMountpoint(r) &&
                        (!a || (a && t.follow_mount)) &&
                        (r = r.mounted.root),
                      !a || t.follow)
                    )
                      for (var n = 0; Pe.isLink(r.mode); ) {
                        var l = Pe.readlink(s);
                        if (
                          ((s = de.resolve(ne.dirname(s), l)),
                          (r = Pe.lookupPath(s, {
                            recurse_count: t.recurse_count + 1,
                          }).node),
                          n++ > 40)
                        )
                          throw new Pe.ErrnoError(32);
                      }
                  }
                  return { path: s, node: r };
                },
                getPath: (e) => {
                  for (var t; ; ) {
                    if (Pe.isRoot(e)) {
                      var i = e.mount.mountpoint;
                      return t
                        ? "/" !== i[i.length - 1]
                          ? `${i}/${t}`
                          : i + t
                        : i;
                    }
                    (t = t ? `${e.name}/${t}` : e.name), (e = e.parent);
                  }
                },
                hashName: (e, t) => {
                  for (var i = 0, r = 0; r < t.length; r++)
                    i = ((i << 5) - i + t.charCodeAt(r)) | 0;
                  return ((e + i) >>> 0) % Pe.nameTable.length;
                },
                hashAddNode: (e) => {
                  var t = Pe.hashName(e.parent.id, e.name);
                  (e.name_next = Pe.nameTable[t]), (Pe.nameTable[t] = e);
                },
                hashRemoveNode: (e) => {
                  var t = Pe.hashName(e.parent.id, e.name);
                  if (Pe.nameTable[t] === e) Pe.nameTable[t] = e.name_next;
                  else
                    for (var i = Pe.nameTable[t]; i; ) {
                      if (i.name_next === e) {
                        i.name_next = e.name_next;
                        break;
                      }
                      i = i.name_next;
                    }
                },
                lookupNode: (e, t) => {
                  var i = Pe.mayLookup(e);
                  if (i) throw new Pe.ErrnoError(i, e);
                  for (
                    var r = Pe.hashName(e.id, t), s = Pe.nameTable[r];
                    s;
                    s = s.name_next
                  ) {
                    var o = s.name;
                    if (s.parent.id === e.id && o === t) return s;
                  }
                  return Pe.lookup(e, t);
                },
                createNode: (e, t, i, r) => {
                  var s = new Pe.FSNode(e, t, i, r);
                  return Pe.hashAddNode(s), s;
                },
                destroyNode: (e) => {
                  Pe.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagsToPermissionString: (e) => {
                  var t = ["r", "w", "rw"][3 & e];
                  return 512 & e && (t += "w"), t;
                },
                nodePermissions: (e, t) =>
                  Pe.ignorePermissions ||
                  ((!t.includes("r") || 292 & e.mode) &&
                    (!t.includes("w") || 146 & e.mode) &&
                    (!t.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  Pe.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, t) => {
                  try {
                    return Pe.lookupNode(e, t), 20;
                  } catch (e) {}
                  return Pe.nodePermissions(e, "wx");
                },
                mayDelete: (e, t, i) => {
                  var r;
                  try {
                    r = Pe.lookupNode(e, t);
                  } catch (e) {
                    return e.errno;
                  }
                  var s = Pe.nodePermissions(e, "wx");
                  if (s) return s;
                  if (i) {
                    if (!Pe.isDir(r.mode)) return 54;
                    if (Pe.isRoot(r) || Pe.getPath(r) === Pe.cwd()) return 10;
                  } else if (Pe.isDir(r.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, t) =>
                  e
                    ? Pe.isLink(e.mode)
                      ? 32
                      : Pe.isDir(e.mode) &&
                        ("r" !== Pe.flagsToPermissionString(t) || 512 & t)
                      ? 31
                      : Pe.nodePermissions(e, Pe.flagsToPermissionString(t))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: () => {
                  for (var e = 0; e <= Pe.MAX_OPEN_FDS; e++)
                    if (!Pe.streams[e]) return e;
                  throw new Pe.ErrnoError(33);
                },
                getStream: (e) => Pe.streams[e],
                createStream: (e, t = -1) => (
                  Pe.FSStream ||
                    ((Pe.FSStream = function () {
                      this.shared = {};
                    }),
                    (Pe.FSStream.prototype = {}),
                    Object.defineProperties(Pe.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                  (e = Object.assign(new Pe.FSStream(), e)),
                  -1 == t && (t = Pe.nextfd()),
                  (e.fd = t),
                  (Pe.streams[t] = e),
                  e
                ),
                closeStream: (e) => {
                  Pe.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var t = Pe.getDevice(e.node.rdev);
                    (e.stream_ops = t.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new Pe.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, t) => (e << 8) | t,
                registerDevice: (e, t) => {
                  Pe.devices[e] = { stream_ops: t };
                },
                getDevice: (e) => Pe.devices[e],
                getMounts: (e) => {
                  for (var t = [], i = [e]; i.length; ) {
                    var r = i.pop();
                    t.push(r), i.push.apply(i, r.mounts);
                  }
                  return t;
                },
                syncfs: (e, t) => {
                  "function" == typeof e && ((t = e), (e = !1)),
                    Pe.syncFSRequests++,
                    Pe.syncFSRequests > 1 &&
                      v(
                        `warning: ${Pe.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`
                      );
                  var i = Pe.getMounts(Pe.root.mount),
                    r = 0;
                  function s(e) {
                    return Pe.syncFSRequests--, t(e);
                  }
                  function o(e) {
                    if (e) return o.errored ? void 0 : ((o.errored = !0), s(e));
                    ++r >= i.length && s(null);
                  }
                  i.forEach((t) => {
                    if (!t.type.syncfs) return o(null);
                    t.type.syncfs(t, e, o);
                  });
                },
                mount: (e, t, i) => {
                  var r,
                    s = "/" === i,
                    o = !i;
                  if (s && Pe.root) throw new Pe.ErrnoError(10);
                  if (!s && !o) {
                    var a = Pe.lookupPath(i, { follow_mount: !1 });
                    if (((i = a.path), (r = a.node), Pe.isMountpoint(r)))
                      throw new Pe.ErrnoError(10);
                    if (!Pe.isDir(r.mode)) throw new Pe.ErrnoError(54);
                  }
                  var n = { type: e, opts: t, mountpoint: i, mounts: [] },
                    l = e.mount(n);
                  return (
                    (l.mount = n),
                    (n.root = l),
                    s
                      ? (Pe.root = l)
                      : r &&
                        ((r.mounted = n), r.mount && r.mount.mounts.push(n)),
                    l
                  );
                },
                unmount: (e) => {
                  var t = Pe.lookupPath(e, { follow_mount: !1 });
                  if (!Pe.isMountpoint(t.node)) throw new Pe.ErrnoError(28);
                  var i = t.node,
                    r = i.mounted,
                    s = Pe.getMounts(r);
                  Object.keys(Pe.nameTable).forEach((e) => {
                    for (var t = Pe.nameTable[e]; t; ) {
                      var i = t.name_next;
                      s.includes(t.mount) && Pe.destroyNode(t), (t = i);
                    }
                  }),
                    (i.mounted = null);
                  var o = i.mount.mounts.indexOf(r);
                  i.mount.mounts.splice(o, 1);
                },
                lookup: (e, t) => e.node_ops.lookup(e, t),
                mknod: (e, t, i) => {
                  var r = Pe.lookupPath(e, { parent: !0 }).node,
                    s = ne.basename(e);
                  if (!s || "." === s || ".." === s)
                    throw new Pe.ErrnoError(28);
                  var o = Pe.mayCreate(r, s);
                  if (o) throw new Pe.ErrnoError(o);
                  if (!r.node_ops.mknod) throw new Pe.ErrnoError(63);
                  return r.node_ops.mknod(r, s, t, i);
                },
                create: (e, t) => (
                  (t = void 0 !== t ? t : 438),
                  (t &= 4095),
                  (t |= 32768),
                  Pe.mknod(e, t, 0)
                ),
                mkdir: (e, t) => (
                  (t = void 0 !== t ? t : 511),
                  (t &= 1023),
                  (t |= 16384),
                  Pe.mknod(e, t, 0)
                ),
                mkdirTree: (e, t) => {
                  for (var i = e.split("/"), r = "", s = 0; s < i.length; ++s)
                    if (i[s]) {
                      r += "/" + i[s];
                      try {
                        Pe.mkdir(r, t);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, t, i) => (
                  void 0 === i && ((i = t), (t = 438)),
                  (t |= 8192),
                  Pe.mknod(e, t, i)
                ),
                symlink: (e, t) => {
                  if (!de.resolve(e)) throw new Pe.ErrnoError(44);
                  var i = Pe.lookupPath(t, { parent: !0 }).node;
                  if (!i) throw new Pe.ErrnoError(44);
                  var r = ne.basename(t),
                    s = Pe.mayCreate(i, r);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!i.node_ops.symlink) throw new Pe.ErrnoError(63);
                  return i.node_ops.symlink(i, r, e);
                },
                rename: (e, t) => {
                  var i,
                    r,
                    s = ne.dirname(e),
                    o = ne.dirname(t),
                    a = ne.basename(e),
                    n = ne.basename(t);
                  if (
                    ((i = Pe.lookupPath(e, { parent: !0 }).node),
                    (r = Pe.lookupPath(t, { parent: !0 }).node),
                    !i || !r)
                  )
                    throw new Pe.ErrnoError(44);
                  if (i.mount !== r.mount) throw new Pe.ErrnoError(75);
                  var l,
                    d = Pe.lookupNode(i, a),
                    h = de.relative(e, o);
                  if ("." !== h.charAt(0)) throw new Pe.ErrnoError(28);
                  if ("." !== (h = de.relative(t, s)).charAt(0))
                    throw new Pe.ErrnoError(55);
                  try {
                    l = Pe.lookupNode(r, n);
                  } catch (e) {}
                  if (d !== l) {
                    var u = Pe.isDir(d.mode),
                      c = Pe.mayDelete(i, a, u);
                    if (c) throw new Pe.ErrnoError(c);
                    if ((c = l ? Pe.mayDelete(r, n, u) : Pe.mayCreate(r, n)))
                      throw new Pe.ErrnoError(c);
                    if (!i.node_ops.rename) throw new Pe.ErrnoError(63);
                    if (Pe.isMountpoint(d) || (l && Pe.isMountpoint(l)))
                      throw new Pe.ErrnoError(10);
                    if (r !== i && (c = Pe.nodePermissions(i, "w")))
                      throw new Pe.ErrnoError(c);
                    Pe.hashRemoveNode(d);
                    try {
                      i.node_ops.rename(d, r, n);
                    } catch (e) {
                      throw e;
                    } finally {
                      Pe.hashAddNode(d);
                    }
                  }
                },
                rmdir: (e) => {
                  var t = Pe.lookupPath(e, { parent: !0 }).node,
                    i = ne.basename(e),
                    r = Pe.lookupNode(t, i),
                    s = Pe.mayDelete(t, i, !0);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!t.node_ops.rmdir) throw new Pe.ErrnoError(63);
                  if (Pe.isMountpoint(r)) throw new Pe.ErrnoError(10);
                  t.node_ops.rmdir(t, i), Pe.destroyNode(r);
                },
                readdir: (e) => {
                  var t = Pe.lookupPath(e, { follow: !0 }).node;
                  if (!t.node_ops.readdir) throw new Pe.ErrnoError(54);
                  return t.node_ops.readdir(t);
                },
                unlink: (e) => {
                  var t = Pe.lookupPath(e, { parent: !0 }).node;
                  if (!t) throw new Pe.ErrnoError(44);
                  var i = ne.basename(e),
                    r = Pe.lookupNode(t, i),
                    s = Pe.mayDelete(t, i, !1);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!t.node_ops.unlink) throw new Pe.ErrnoError(63);
                  if (Pe.isMountpoint(r)) throw new Pe.ErrnoError(10);
                  t.node_ops.unlink(t, i), Pe.destroyNode(r);
                },
                readlink: (e) => {
                  var t = Pe.lookupPath(e).node;
                  if (!t) throw new Pe.ErrnoError(44);
                  if (!t.node_ops.readlink) throw new Pe.ErrnoError(28);
                  return de.resolve(
                    Pe.getPath(t.parent),
                    t.node_ops.readlink(t)
                  );
                },
                stat: (e, t) => {
                  var i = Pe.lookupPath(e, { follow: !t }).node;
                  if (!i) throw new Pe.ErrnoError(44);
                  if (!i.node_ops.getattr) throw new Pe.ErrnoError(63);
                  return i.node_ops.getattr(i);
                },
                lstat: (e) => Pe.stat(e, !0),
                chmod: (e, t, i) => {
                  var r;
                  if (
                    !(r =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !i }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  r.node_ops.setattr(r, {
                    mode: (4095 & t) | (-4096 & r.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, t) => {
                  Pe.chmod(e, t, !0);
                },
                fchmod: (e, t) => {
                  var i = Pe.getStream(e);
                  if (!i) throw new Pe.ErrnoError(8);
                  Pe.chmod(i.node, t);
                },
                chown: (e, t, i, r) => {
                  var s;
                  if (
                    !(s =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !r }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  s.node_ops.setattr(s, { timestamp: Date.now() });
                },
                lchown: (e, t, i) => {
                  Pe.chown(e, t, i, !0);
                },
                fchown: (e, t, i) => {
                  var r = Pe.getStream(e);
                  if (!r) throw new Pe.ErrnoError(8);
                  Pe.chown(r.node, t, i);
                },
                truncate: (e, t) => {
                  if (t < 0) throw new Pe.ErrnoError(28);
                  var i;
                  if (
                    !(i =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  if (Pe.isDir(i.mode)) throw new Pe.ErrnoError(31);
                  if (!Pe.isFile(i.mode)) throw new Pe.ErrnoError(28);
                  var r = Pe.nodePermissions(i, "w");
                  if (r) throw new Pe.ErrnoError(r);
                  i.node_ops.setattr(i, { size: t, timestamp: Date.now() });
                },
                ftruncate: (e, t) => {
                  var i = Pe.getStream(e);
                  if (!i) throw new Pe.ErrnoError(8);
                  if (0 == (2097155 & i.flags)) throw new Pe.ErrnoError(28);
                  Pe.truncate(i.node, t);
                },
                utime: (e, t, i) => {
                  var r = Pe.lookupPath(e, { follow: !0 }).node;
                  r.node_ops.setattr(r, { timestamp: Math.max(t, i) });
                },
                open: (t, i, r) => {
                  if ("" === t) throw new Pe.ErrnoError(44);
                  var s;
                  if (
                    ((r = void 0 === r ? 438 : r),
                    (r =
                      64 &
                      (i =
                        "string" == typeof i
                          ? (function (e) {
                              var t = {
                                r: 0,
                                "r+": 2,
                                w: 577,
                                "w+": 578,
                                a: 1089,
                                "a+": 1090,
                              }[e];
                              if (void 0 === t)
                                throw new Error(`Unknown file open mode: ${e}`);
                              return t;
                            })(i)
                          : i)
                        ? (4095 & r) | 32768
                        : 0),
                    "object" == typeof t)
                  )
                    s = t;
                  else {
                    t = ne.normalize(t);
                    try {
                      s = Pe.lookupPath(t, { follow: !(131072 & i) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & i)
                    if (s) {
                      if (128 & i) throw new Pe.ErrnoError(20);
                    } else (s = Pe.mknod(t, r, 0)), (o = !0);
                  if (!s) throw new Pe.ErrnoError(44);
                  if (
                    (Pe.isChrdev(s.mode) && (i &= -513),
                    65536 & i && !Pe.isDir(s.mode))
                  )
                    throw new Pe.ErrnoError(54);
                  if (!o) {
                    var a = Pe.mayOpen(s, i);
                    if (a) throw new Pe.ErrnoError(a);
                  }
                  512 & i && !o && Pe.truncate(s, 0), (i &= -131713);
                  var n = Pe.createStream({
                    node: s,
                    path: Pe.getPath(s),
                    flags: i,
                    seekable: !0,
                    position: 0,
                    stream_ops: s.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    n.stream_ops.open && n.stream_ops.open(n),
                    !e.logReadFiles ||
                      1 & i ||
                      (Pe.readFiles || (Pe.readFiles = {}),
                      t in Pe.readFiles || (Pe.readFiles[t] = 1)),
                    n
                  );
                },
                close: (e) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    Pe.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, t, i) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new Pe.ErrnoError(70);
                  if (0 != i && 1 != i && 2 != i) throw new Pe.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, t, i)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, t, i, r, s) => {
                  if (r < 0 || s < 0) throw new Pe.ErrnoError(28);
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (Pe.isDir(e.node.mode)) throw new Pe.ErrnoError(31);
                  if (!e.stream_ops.read) throw new Pe.ErrnoError(28);
                  var o = void 0 !== s;
                  if (o) {
                    if (!e.seekable) throw new Pe.ErrnoError(70);
                  } else s = e.position;
                  var a = e.stream_ops.read(e, t, i, r, s);
                  return o || (e.position += a), a;
                },
                write: (e, t, i, r, s, o) => {
                  if (r < 0 || s < 0) throw new Pe.ErrnoError(28);
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (Pe.isDir(e.node.mode)) throw new Pe.ErrnoError(31);
                  if (!e.stream_ops.write) throw new Pe.ErrnoError(28);
                  e.seekable && 1024 & e.flags && Pe.llseek(e, 0, 2);
                  var a = void 0 !== s;
                  if (a) {
                    if (!e.seekable) throw new Pe.ErrnoError(70);
                  } else s = e.position;
                  var n = e.stream_ops.write(e, t, i, r, s, o);
                  return a || (e.position += n), n;
                },
                allocate: (e, t, i) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (t < 0 || i <= 0) throw new Pe.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (!Pe.isFile(e.node.mode) && !Pe.isDir(e.node.mode))
                    throw new Pe.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new Pe.ErrnoError(138);
                  e.stream_ops.allocate(e, t, i);
                },
                mmap: (e, t, i, r, s) => {
                  if (0 != (2 & r) && 0 == (2 & s) && 2 != (2097155 & e.flags))
                    throw new Pe.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new Pe.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new Pe.ErrnoError(43);
                  return e.stream_ops.mmap(e, t, i, r, s);
                },
                msync: (e, t, i, r, s) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, t, i, r, s) : 0,
                munmap: (e) => 0,
                ioctl: (e, t, i) => {
                  if (!e.stream_ops.ioctl) throw new Pe.ErrnoError(59);
                  return e.stream_ops.ioctl(e, t, i);
                },
                readFile: (e, t = {}) => {
                  if (
                    ((t.flags = t.flags || 0),
                    (t.encoding = t.encoding || "binary"),
                    "utf8" !== t.encoding && "binary" !== t.encoding)
                  )
                    throw new Error(`Invalid encoding type "${t.encoding}"`);
                  var i,
                    r = Pe.open(e, t.flags),
                    s = Pe.stat(e).size,
                    o = new Uint8Array(s);
                  return (
                    Pe.read(r, o, 0, s, 0),
                    "utf8" === t.encoding
                      ? (i = ge(o, 0))
                      : "binary" === t.encoding && (i = o),
                    Pe.close(r),
                    i
                  );
                },
                writeFile: (e, t, i = {}) => {
                  i.flags = i.flags || 577;
                  var r = Pe.open(e, i.flags, i.mode);
                  if ("string" == typeof t) {
                    var s = new Uint8Array(he(t) + 1),
                      o = ue(t, s, 0, s.length);
                    Pe.write(r, s, 0, o, void 0, i.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(t))
                      throw new Error("Unsupported data type");
                    Pe.write(r, t, 0, t.byteLength, void 0, i.canOwn);
                  }
                  Pe.close(r);
                },
                cwd: () => Pe.currentPath,
                chdir: (e) => {
                  var t = Pe.lookupPath(e, { follow: !0 });
                  if (null === t.node) throw new Pe.ErrnoError(44);
                  if (!Pe.isDir(t.node.mode)) throw new Pe.ErrnoError(54);
                  var i = Pe.nodePermissions(t.node, "x");
                  if (i) throw new Pe.ErrnoError(i);
                  Pe.currentPath = t.path;
                },
                createDefaultDirectories: () => {
                  Pe.mkdir("/tmp"),
                    Pe.mkdir("/home"),
                    Pe.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  Pe.mkdir("/dev"),
                    Pe.registerDevice(Pe.makedev(1, 3), {
                      read: () => 0,
                      write: (e, t, i, r, s) => r,
                    }),
                    Pe.mkdev("/dev/null", Pe.makedev(1, 3)),
                    ye.register(Pe.makedev(5, 0), ye.default_tty_ops),
                    ye.register(Pe.makedev(6, 0), ye.default_tty1_ops),
                    Pe.mkdev("/dev/tty", Pe.makedev(5, 0)),
                    Pe.mkdev("/dev/tty1", Pe.makedev(6, 0));
                  var e = new Uint8Array(1024),
                    t = 0,
                    i = () => (0 === t && (t = le(e).byteLength), e[--t]);
                  Pe.createDevice("/dev", "random", i),
                    Pe.createDevice("/dev", "urandom", i),
                    Pe.mkdir("/dev/shm"),
                    Pe.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  Pe.mkdir("/proc");
                  var e = Pe.mkdir("/proc/self");
                  Pe.mkdir("/proc/self/fd"),
                    Pe.mount(
                      {
                        mount: () => {
                          var t = Pe.createNode(e, "fd", 16895, 73);
                          return (
                            (t.node_ops = {
                              lookup: (e, t) => {
                                var i = +t,
                                  r = Pe.getStream(i);
                                if (!r) throw new Pe.ErrnoError(8);
                                var s = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => r.path },
                                };
                                return (s.parent = s), s;
                              },
                            }),
                            t
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  e.stdin
                    ? Pe.createDevice("/dev", "stdin", e.stdin)
                    : Pe.symlink("/dev/tty", "/dev/stdin"),
                    e.stdout
                      ? Pe.createDevice("/dev", "stdout", null, e.stdout)
                      : Pe.symlink("/dev/tty", "/dev/stdout"),
                    e.stderr
                      ? Pe.createDevice("/dev", "stderr", null, e.stderr)
                      : Pe.symlink("/dev/tty1", "/dev/stderr"),
                    Pe.open("/dev/stdin", 0),
                    Pe.open("/dev/stdout", 1),
                    Pe.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  Pe.ErrnoError ||
                    ((Pe.ErrnoError = function (e, t) {
                      (this.name = "ErrnoError"),
                        (this.node = t),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (Pe.ErrnoError.prototype = new Error()),
                    (Pe.ErrnoError.prototype.constructor = Pe.ErrnoError),
                    [44].forEach((e) => {
                      (Pe.genericErrors[e] = new Pe.ErrnoError(e)),
                        (Pe.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  Pe.ensureErrnoError(),
                    (Pe.nameTable = new Array(4096)),
                    Pe.mount(ve, {}, "/"),
                    Pe.createDefaultDirectories(),
                    Pe.createDefaultDevices(),
                    Pe.createSpecialDirectories(),
                    (Pe.filesystems = { MEMFS: ve });
                },
                init: (t, i, r) => {
                  (Pe.init.initialized = !0),
                    Pe.ensureErrnoError(),
                    (e.stdin = t || e.stdin),
                    (e.stdout = i || e.stdout),
                    (e.stderr = r || e.stderr),
                    Pe.createStandardStreams();
                },
                quit: () => {
                  Pe.init.initialized = !1;
                  for (var e = 0; e < Pe.streams.length; e++) {
                    var t = Pe.streams[e];
                    t && Pe.close(t);
                  }
                },
                findObject: (e, t) => {
                  var i = Pe.analyzePath(e, t);
                  return i.exists ? i.object : null;
                },
                analyzePath: (e, t) => {
                  try {
                    e = (r = Pe.lookupPath(e, { follow: !t })).path;
                  } catch (e) {}
                  var i = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var r = Pe.lookupPath(e, { parent: !0 });
                    (i.parentExists = !0),
                      (i.parentPath = r.path),
                      (i.parentObject = r.node),
                      (i.name = ne.basename(e)),
                      (r = Pe.lookupPath(e, { follow: !t })),
                      (i.exists = !0),
                      (i.path = r.path),
                      (i.object = r.node),
                      (i.name = r.node.name),
                      (i.isRoot = "/" === r.path);
                  } catch (e) {
                    i.error = e.errno;
                  }
                  return i;
                },
                createPath: (e, t, i, r) => {
                  e = "string" == typeof e ? e : Pe.getPath(e);
                  for (var s = t.split("/").reverse(); s.length; ) {
                    var o = s.pop();
                    if (o) {
                      var a = ne.join2(e, o);
                      try {
                        Pe.mkdir(a);
                      } catch (e) {}
                      e = a;
                    }
                  }
                  return a;
                },
                createFile: (e, t, i, r, s) => {
                  var o = ne.join2("string" == typeof e ? e : Pe.getPath(e), t),
                    a = Se(r, s);
                  return Pe.create(o, a);
                },
                createDataFile: (e, t, i, r, s, o) => {
                  var a = t;
                  e &&
                    ((e = "string" == typeof e ? e : Pe.getPath(e)),
                    (a = t ? ne.join2(e, t) : e));
                  var n = Se(r, s),
                    l = Pe.create(a, n);
                  if (i) {
                    if ("string" == typeof i) {
                      for (
                        var d = new Array(i.length), h = 0, u = i.length;
                        h < u;
                        ++h
                      )
                        d[h] = i.charCodeAt(h);
                      i = d;
                    }
                    Pe.chmod(l, 146 | n);
                    var c = Pe.open(l, 577);
                    Pe.write(c, i, 0, i.length, 0, o),
                      Pe.close(c),
                      Pe.chmod(l, n);
                  }
                  return l;
                },
                createDevice: (e, t, i, r) => {
                  var s = ne.join2("string" == typeof e ? e : Pe.getPath(e), t),
                    o = Se(!!i, !!r);
                  Pe.createDevice.major || (Pe.createDevice.major = 64);
                  var a = Pe.makedev(Pe.createDevice.major++, 0);
                  return (
                    Pe.registerDevice(a, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        r && r.buffer && r.buffer.length && r(10);
                      },
                      read: (e, t, r, s, o) => {
                        for (var a = 0, n = 0; n < s; n++) {
                          var l;
                          try {
                            l = i();
                          } catch (e) {
                            throw new Pe.ErrnoError(29);
                          }
                          if (void 0 === l && 0 === a)
                            throw new Pe.ErrnoError(6);
                          if (null == l) break;
                          a++, (t[r + n] = l);
                        }
                        return a && (e.node.timestamp = Date.now()), a;
                      },
                      write: (e, t, i, s, o) => {
                        for (var a = 0; a < s; a++)
                          try {
                            r(t[i + a]);
                          } catch (e) {
                            throw new Pe.ErrnoError(29);
                          }
                        return s && (e.node.timestamp = Date.now()), a;
                      },
                    }),
                    Pe.mkdev(s, o, a)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!s)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = ce(s(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new Pe.ErrnoError(29);
                  }
                },
                createLazyFile: (e, t, i, r, s) => {
                  function o() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((o.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var t = e % this.chunkSize,
                          i = (e / this.chunkSize) | 0;
                        return this.getter(i)[t];
                      }
                    }),
                    (o.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (o.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", i, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + i + ". Status: " + e.status
                        );
                      var t,
                        r = Number(e.getResponseHeader("Content-length")),
                        s =
                          (t = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === t,
                        o =
                          (t = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === t,
                        a = 1048576;
                      s || (a = r);
                      var n = this;
                      n.setDataGetter((e) => {
                        var t = e * a,
                          s = (e + 1) * a - 1;
                        if (
                          ((s = Math.min(s, r - 1)),
                          void 0 === n.chunks[e] &&
                            (n.chunks[e] = ((e, t) => {
                              if (e > t)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    t +
                                    ") or no bytes requested!"
                                );
                              if (t > r - 1)
                                throw new Error(
                                  "only " +
                                    r +
                                    " bytes available! programmer error!"
                                );
                              var s = new XMLHttpRequest();
                              if (
                                (s.open("GET", i, !1),
                                r !== a &&
                                  s.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + t
                                  ),
                                (s.responseType = "arraybuffer"),
                                s.overrideMimeType &&
                                  s.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                s.send(null),
                                !(
                                  (s.status >= 200 && s.status < 300) ||
                                  304 === s.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + i + ". Status: " + s.status
                                );
                              return void 0 !== s.response
                                ? new Uint8Array(s.response || [])
                                : ce(s.responseText || "", !0);
                            })(t, s)),
                          void 0 === n.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return n.chunks[e];
                      }),
                        (!o && r) ||
                          ((a = r = 1),
                          (r = this.getter(0).length),
                          (a = r),
                          f(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = r),
                        (this._chunkSize = a),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!p)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var a = new o();
                    Object.defineProperties(a, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var n = { isDevice: !1, contents: a };
                  } else n = { isDevice: !1, url: i };
                  var l = Pe.createFile(e, t, n, r, s);
                  n.contents
                    ? (l.contents = n.contents)
                    : n.url && ((l.contents = null), (l.url = n.url)),
                    Object.defineProperties(l, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var d = {};
                  function h(e, t, i, r, s) {
                    var o = e.node.contents;
                    if (s >= o.length) return 0;
                    var a = Math.min(o.length - s, r);
                    if (o.slice)
                      for (var n = 0; n < a; n++) t[i + n] = o[s + n];
                    else for (n = 0; n < a; n++) t[i + n] = o.get(s + n);
                    return a;
                  }
                  return (
                    Object.keys(l.stream_ops).forEach((e) => {
                      var t = l.stream_ops[e];
                      d[e] = function () {
                        return Pe.forceLoadFile(l), t.apply(null, arguments);
                      };
                    }),
                    (d.read = (e, t, i, r, s) => (
                      Pe.forceLoadFile(l), h(e, t, i, r, s)
                    )),
                    (d.mmap = (e, t, i, r, s) => {
                      Pe.forceLoadFile(l);
                      var o = fe();
                      if (!o) throw new Pe.ErrnoError(48);
                      return h(e, C, o, t, i), { ptr: o, allocated: !0 };
                    }),
                    (l.stream_ops = d),
                    l
                  );
                },
              };
              function Ce(e, t) {
                return e ? ge(x, e, t) : "";
              }
              var xe = {
                  DEFAULT_POLLMASK: 5,
                  calculateAt: function (e, t, i) {
                    if (ne.isAbs(t)) return t;
                    var r;
                    if (
                      ((r = -100 === e ? Pe.cwd() : xe.getStreamFromFD(e).path),
                      0 == t.length)
                    ) {
                      if (!i) throw new Pe.ErrnoError(44);
                      return r;
                    }
                    return ne.join2(r, t);
                  },
                  doStat: function (e, t, i) {
                    try {
                      var r = e(t);
                    } catch (e) {
                      if (
                        e &&
                        e.node &&
                        ne.normalize(t) !== ne.normalize(Pe.getPath(e.node))
                      )
                        return -54;
                      throw e;
                    }
                    (T[i >> 2] = r.dev),
                      (T[(i + 8) >> 2] = r.ino),
                      (T[(i + 12) >> 2] = r.mode),
                      (E[(i + 16) >> 2] = r.nlink),
                      (T[(i + 20) >> 2] = r.uid),
                      (T[(i + 24) >> 2] = r.gid),
                      (T[(i + 28) >> 2] = r.rdev),
                      (q = [
                        r.size >>> 0,
                        (($ = r.size),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 40) >> 2] = q[0]),
                      (T[(i + 44) >> 2] = q[1]),
                      (T[(i + 48) >> 2] = 4096),
                      (T[(i + 52) >> 2] = r.blocks);
                    var s = r.atime.getTime(),
                      o = r.mtime.getTime(),
                      a = r.ctime.getTime();
                    return (
                      (q = [
                        Math.floor(s / 1e3) >>> 0,
                        (($ = Math.floor(s / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 56) >> 2] = q[0]),
                      (T[(i + 60) >> 2] = q[1]),
                      (E[(i + 64) >> 2] = (s % 1e3) * 1e3),
                      (q = [
                        Math.floor(o / 1e3) >>> 0,
                        (($ = Math.floor(o / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 72) >> 2] = q[0]),
                      (T[(i + 76) >> 2] = q[1]),
                      (E[(i + 80) >> 2] = (o % 1e3) * 1e3),
                      (q = [
                        Math.floor(a / 1e3) >>> 0,
                        (($ = Math.floor(a / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 88) >> 2] = q[0]),
                      (T[(i + 92) >> 2] = q[1]),
                      (E[(i + 96) >> 2] = (a % 1e3) * 1e3),
                      (q = [
                        r.ino >>> 0,
                        (($ = r.ino),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 104) >> 2] = q[0]),
                      (T[(i + 108) >> 2] = q[1]),
                      0
                    );
                  },
                  doMsync: function (e, t, i, r, s) {
                    if (!Pe.isFile(t.node.mode)) throw new Pe.ErrnoError(43);
                    if (2 & r) return 0;
                    var o = x.slice(e, e + i);
                    Pe.msync(t, o, s, i, r);
                  },
                  varargs: void 0,
                  get: function () {
                    return (xe.varargs += 4), T[(xe.varargs - 4) >> 2];
                  },
                  getStr: function (e) {
                    return Ce(e);
                  },
                  getStreamFromFD: function (e) {
                    var t = Pe.getStream(e);
                    if (!t) throw new Pe.ErrnoError(8);
                    return t;
                  },
                },
                be = 48,
                Ae = 57;
              function Te(e) {
                if (void 0 === e) return "_unknown";
                var t = (e = e.replace(/[^a-zA-Z0-9_]/g, "$")).charCodeAt(0);
                return t >= be && t <= Ae ? `_${e}` : e;
              }
              function Ee(e, t) {
                return {
                  [(e = Te(e))]: function () {
                    return t.apply(this, arguments);
                  },
                }[e];
              }
              function Re() {
                (this.allocated = [void 0]),
                  (this.freelist = []),
                  (this.get = function (e) {
                    return this.allocated[e];
                  }),
                  (this.has = function (e) {
                    return void 0 !== this.allocated[e];
                  }),
                  (this.allocate = function (e) {
                    var t = this.freelist.pop() || this.allocated.length;
                    return (this.allocated[t] = e), t;
                  }),
                  (this.free = function (e) {
                    (this.allocated[e] = void 0), this.freelist.push(e);
                  });
              }
              var we = new Re();
              function De(e, t) {
                var i = Ee(t, function (e) {
                  (this.name = t), (this.message = e);
                  var i = new Error(e).stack;
                  void 0 !== i &&
                    (this.stack =
                      this.toString() +
                      "\n" +
                      i.replace(/^Error(:[^\n]*)?\n/, ""));
                });
                return (
                  (i.prototype = Object.create(e.prototype)),
                  (i.prototype.constructor = i),
                  (i.prototype.toString = function () {
                    return void 0 === this.message
                      ? this.name
                      : `${this.name}: ${this.message}`;
                  }),
                  i
                );
              }
              var Le = void 0;
              function Me(e) {
                throw new Le(e);
              }
              var Ie = {
                  toValue: (e) => (
                    e || Me("Cannot use deleted val. handle = " + e),
                    we.get(e).value
                  ),
                  toHandle: (e) => {
                    switch (e) {
                      case void 0:
                        return 1;
                      case null:
                        return 2;
                      case !0:
                        return 3;
                      case !1:
                        return 4;
                      default:
                        return we.allocate({ refcount: 1, value: e });
                    }
                  },
                },
                Oe = void 0,
                ke = void 0;
              function _e(e) {
                for (var t = "", i = e; x[i]; ) t += ke[x[i++]];
                return t;
              }
              var Ve = [];
              function Ne() {
                for (; Ve.length; ) {
                  var e = Ve.pop();
                  (e.$$.deleteScheduled = !1), e.delete();
                }
              }
              var Fe = void 0;
              var Be = {};
              function He(e, t) {
                for (
                  void 0 === t && Me("ptr should not be undefined");
                  e.baseClass;

                )
                  (t = e.upcast(t)), (e = e.baseClass);
                return t;
              }
              var ze = {};
              function Ye(e) {
                var t = Ea(e),
                  i = _e(t);
                return ba(t), i;
              }
              function Ge(e, t) {
                var i = ze[e];
                return void 0 === i && Me(t + " has unknown type " + Ye(e)), i;
              }
              function Xe(e) {}
              var je = !1;
              function We(e) {
                (e.count.value -= 1),
                  0 === e.count.value &&
                    (function (e) {
                      e.smartPtr
                        ? e.smartPtrType.rawDestructor(e.smartPtr)
                        : e.ptrType.registeredClass.rawDestructor(e.ptr);
                    })(e);
              }
              function Ue(e, t, i) {
                if (t === i) return e;
                if (void 0 === i.baseClass) return null;
                var r = Ue(e, t, i.baseClass);
                return null === r ? null : i.downcast(r);
              }
              var $e = {},
                qe = void 0;
              function Ke(e) {
                throw new qe(e);
              }
              function Ze(e, t) {
                return (
                  (t.ptrType && t.ptr) ||
                    Ke("makeClassHandle requires ptr and ptrType"),
                  !!t.smartPtrType != !!t.smartPtr &&
                    Ke("Both smartPtrType and smartPtr must be specified"),
                  (t.count = { value: 1 }),
                  Je(Object.create(e, { $$: { value: t } }))
                );
              }
              function Je(e) {
                return "undefined" == typeof FinalizationRegistry
                  ? ((Je = (e) => e), e)
                  : ((je = new FinalizationRegistry((e) => {
                      We(e.$$);
                    })),
                    (Je = (e) => {
                      var t = e.$$;
                      if (t.smartPtr) {
                        var i = { $$: t };
                        je.register(e, i, e);
                      }
                      return e;
                    }),
                    (Xe = (e) => je.unregister(e)),
                    Je(e));
              }
              function Qe(e) {
                switch (e) {
                  case 1:
                    return 0;
                  case 2:
                    return 1;
                  case 4:
                    return 2;
                  case 8:
                    return 3;
                  default:
                    throw new TypeError(`Unknown type size: ${e}`);
                }
              }
              var et = {},
                tt = {};
              function it(e, t, i) {
                function r(t) {
                  var r = i(t);
                  r.length !== e.length &&
                    Ke("Mismatched type converter count");
                  for (var s = 0; s < e.length; ++s) rt(e[s], r[s]);
                }
                e.forEach(function (e) {
                  tt[e] = t;
                });
                var s = new Array(t.length),
                  o = [],
                  a = 0;
                t.forEach((e, t) => {
                  ze.hasOwnProperty(e)
                    ? (s[t] = ze[e])
                    : (o.push(e),
                      et.hasOwnProperty(e) || (et[e] = []),
                      et[e].push(() => {
                        (s[t] = ze[e]), ++a === o.length && r(s);
                      }));
                }),
                  0 === o.length && r(s);
              }
              function rt(e, t, i = {}) {
                if (!("argPackAdvance" in t))
                  throw new TypeError(
                    "registerType registeredInstance requires argPackAdvance"
                  );
                var r = t.name;
                if (
                  (e ||
                    Me(
                      `type "${r}" must have a positive integer typeid pointer`
                    ),
                  ze.hasOwnProperty(e))
                ) {
                  if (i.ignoreDuplicateRegistrations) return;
                  Me(`Cannot register type '${r}' twice`);
                }
                if (((ze[e] = t), delete tt[e], et.hasOwnProperty(e))) {
                  var s = et[e];
                  delete et[e], s.forEach((e) => e());
                }
              }
              function st(e) {
                Me(
                  e.$$.ptrType.registeredClass.name +
                    " instance already deleted"
                );
              }
              function ot() {}
              function at(e, t, i) {
                if (void 0 === e[t].overloadTable) {
                  var r = e[t];
                  (e[t] = function () {
                    return (
                      e[t].overloadTable.hasOwnProperty(arguments.length) ||
                        Me(
                          `Function '${i}' called with an invalid number of arguments (${arguments.length}) - expects one of (${e[t].overloadTable})!`
                        ),
                      e[t].overloadTable[arguments.length].apply(
                        this,
                        arguments
                      )
                    );
                  }),
                    (e[t].overloadTable = []),
                    (e[t].overloadTable[r.argCount] = r);
                }
              }
              function nt(t, i, r) {
                e.hasOwnProperty(t)
                  ? ((void 0 === r ||
                      (void 0 !== e[t].overloadTable &&
                        void 0 !== e[t].overloadTable[r])) &&
                      Me(`Cannot register public name '${t}' twice`),
                    at(e, t, t),
                    e.hasOwnProperty(r) &&
                      Me(
                        `Cannot register multiple overloads of a function with the same number of arguments (${r})!`
                      ),
                    (e[t].overloadTable[r] = i))
                  : ((e[t] = i), void 0 !== r && (e[t].numArguments = r));
              }
              function lt(e, t, i, r, s, o, a, n) {
                (this.name = e),
                  (this.constructor = t),
                  (this.instancePrototype = i),
                  (this.rawDestructor = r),
                  (this.baseClass = s),
                  (this.getActualType = o),
                  (this.upcast = a),
                  (this.downcast = n),
                  (this.pureVirtualFunctions = []);
              }
              function dt(e, t, i) {
                for (; t !== i; )
                  t.upcast ||
                    Me(
                      `Expected null or instance of ${i.name}, got an instance of ${t.name}`
                    ),
                    (e = t.upcast(e)),
                    (t = t.baseClass);
                return e;
              }
              function ht(e, t) {
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    );
                var i = t.$$.ptrType.registeredClass;
                return dt(t.$$.ptr, i, this.registeredClass);
              }
              function ut(e, t) {
                var i;
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    this.isSmartPointer
                      ? ((i = this.rawConstructor()),
                        null !== e && e.push(this.rawDestructor, i),
                        i)
                      : 0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    ),
                  !this.isConst &&
                    t.$$.ptrType.isConst &&
                    Me(
                      `Cannot convert argument of type ${
                        t.$$.smartPtrType
                          ? t.$$.smartPtrType.name
                          : t.$$.ptrType.name
                      } to parameter type ${this.name}`
                    );
                var r = t.$$.ptrType.registeredClass;
                if (
                  ((i = dt(t.$$.ptr, r, this.registeredClass)),
                  this.isSmartPointer)
                )
                  switch (
                    (void 0 === t.$$.smartPtr &&
                      Me("Passing raw pointer to smart pointer is illegal"),
                    this.sharingPolicy)
                  ) {
                    case 0:
                      t.$$.smartPtrType === this
                        ? (i = t.$$.smartPtr)
                        : Me(
                            `Cannot convert argument of type ${
                              t.$$.smartPtrType
                                ? t.$$.smartPtrType.name
                                : t.$$.ptrType.name
                            } to parameter type ${this.name}`
                          );
                      break;
                    case 1:
                      i = t.$$.smartPtr;
                      break;
                    case 2:
                      if (t.$$.smartPtrType === this) i = t.$$.smartPtr;
                      else {
                        var s = t.clone();
                        (i = this.rawShare(
                          i,
                          Ie.toHandle(function () {
                            s.delete();
                          })
                        )),
                          null !== e && e.push(this.rawDestructor, i);
                      }
                      break;
                    default:
                      Me("Unsupporting sharing policy");
                  }
                return i;
              }
              function ct(e, t) {
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    ),
                  t.$$.ptrType.isConst &&
                    Me(
                      `Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`
                    );
                var i = t.$$.ptrType.registeredClass;
                return dt(t.$$.ptr, i, this.registeredClass);
              }
              function pt(e) {
                return this.fromWireType(T[e >> 2]);
              }
              function gt(e, t, i, r, s, o, a, n, l, d, h) {
                (this.name = e),
                  (this.registeredClass = t),
                  (this.isReference = i),
                  (this.isConst = r),
                  (this.isSmartPointer = s),
                  (this.pointeeType = o),
                  (this.sharingPolicy = a),
                  (this.rawGetPointee = n),
                  (this.rawConstructor = l),
                  (this.rawShare = d),
                  (this.rawDestructor = h),
                  s || void 0 !== t.baseClass
                    ? (this.toWireType = ut)
                    : r
                    ? ((this.toWireType = ht), (this.destructorFunction = null))
                    : ((this.toWireType = ct),
                      (this.destructorFunction = null));
              }
              function yt(t, i, r) {
                e.hasOwnProperty(t) ||
                  Ke("Replacing nonexistant public symbol"),
                  void 0 !== e[t].overloadTable && void 0 !== r
                    ? (e[t].overloadTable[r] = i)
                    : ((e[t] = i), (e[t].argCount = r));
              }
              function ft(e, t) {
                var i,
                  r,
                  s,
                  o = (e = _e(e)).includes("j")
                    ? ((i = e),
                      (r = t),
                      (s = []),
                      function () {
                        return (
                          (s.length = 0),
                          Object.assign(s, arguments),
                          se(i, r, s)
                        );
                      })
                    : re(t);
                return (
                  "function" != typeof o &&
                    Me(`unknown function pointer with signature ${e}: ${t}`),
                  o
                );
              }
              var vt = void 0;
              function mt(e, t) {
                var i = [],
                  r = {};
                throw (
                  (t.forEach(function e(t) {
                    r[t] ||
                      ze[t] ||
                      (tt[t] ? tt[t].forEach(e) : (i.push(t), (r[t] = !0)));
                  }),
                  new vt(`${e}: ` + i.map(Ye).join([", "])))
                );
              }
              function St(e) {
                for (; e.length; ) {
                  var t = e.pop();
                  e.pop()(t);
                }
              }
              function Pt(e, t, i, r, s, o) {
                var a = t.length;
                a < 2 &&
                  Me(
                    "argTypes array size mismatch! Must at least get return value and 'this' types!"
                  );
                for (
                  var n = null !== t[1] && null !== i, l = !1, d = 1;
                  d < t.length;
                  ++d
                )
                  if (null !== t[d] && void 0 === t[d].destructorFunction) {
                    l = !0;
                    break;
                  }
                var h = "void" !== t[0].name,
                  u = a - 2,
                  c = new Array(u),
                  p = [],
                  g = [];
                return function () {
                  var i;
                  arguments.length !== u &&
                    Me(
                      `function ${e} called with ${arguments.length} arguments, expected ${u} args!`
                    ),
                    (g.length = 0),
                    (p.length = n ? 2 : 1),
                    (p[0] = s),
                    n && ((i = t[1].toWireType(g, this)), (p[1] = i));
                  for (var o = 0; o < u; ++o)
                    (c[o] = t[o + 2].toWireType(g, arguments[o])), p.push(c[o]);
                  return (function (e) {
                    if (l) St(g);
                    else
                      for (var r = n ? 1 : 2; r < t.length; r++) {
                        var s = 1 === r ? i : c[r - 2];
                        null !== t[r].destructorFunction &&
                          t[r].destructorFunction(s);
                      }
                    if (h) return t[0].fromWireType(e);
                  })(r.apply(null, p));
                };
              }
              function Ct(e, t) {
                for (var i = [], r = 0; r < e; r++) i.push(E[(t + 4 * r) >> 2]);
                return i;
              }
              function xt(e, t, i) {
                return (
                  e instanceof Object || Me(`${i} with invalid "this": ${e}`),
                  e instanceof t.registeredClass.constructor ||
                    Me(
                      `${i} incompatible with "this" of type ${e.constructor.name}`
                    ),
                  e.$$.ptr ||
                    Me(
                      `cannot call emscripten binding method ${i} on deleted object`
                    ),
                  dt(e.$$.ptr, e.$$.ptrType.registeredClass, t.registeredClass)
                );
              }
              function bt(e) {
                e >= we.reserved && 0 == --we.get(e).refcount && we.free(e);
              }
              function At(e, t, i) {
                switch (t) {
                  case 0:
                    return function (e) {
                      var t = i ? C : x;
                      return this.fromWireType(t[e]);
                    };
                  case 1:
                    return function (e) {
                      var t = i ? b : A;
                      return this.fromWireType(t[e >> 1]);
                    };
                  case 2:
                    return function (e) {
                      var t = i ? T : E;
                      return this.fromWireType(t[e >> 2]);
                    };
                  default:
                    throw new TypeError("Unknown integer type: " + e);
                }
              }
              function Tt(e) {
                if (null === e) return "null";
                var t = typeof e;
                return "object" === t || "array" === t || "function" === t
                  ? e.toString()
                  : "" + e;
              }
              function Et(e, t) {
                switch (t) {
                  case 2:
                    return function (e) {
                      return this.fromWireType(R[e >> 2]);
                    };
                  case 3:
                    return function (e) {
                      return this.fromWireType(w[e >> 3]);
                    };
                  default:
                    throw new TypeError("Unknown float type: " + e);
                }
              }
              function Rt(e, t, i) {
                switch (t) {
                  case 0:
                    return i
                      ? function (e) {
                          return C[e];
                        }
                      : function (e) {
                          return x[e];
                        };
                  case 1:
                    return i
                      ? function (e) {
                          return b[e >> 1];
                        }
                      : function (e) {
                          return A[e >> 1];
                        };
                  case 2:
                    return i
                      ? function (e) {
                          return T[e >> 2];
                        }
                      : function (e) {
                          return E[e >> 2];
                        };
                  default:
                    throw new TypeError("Unknown integer type: " + e);
                }
              }
              function wt(e, t, i) {
                return ue(e, x, t, i);
              }
              var Dt =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf-16le")
                  : void 0;
              function Lt(e, t) {
                for (var i = e, r = i >> 1, s = r + t / 2; !(r >= s) && A[r]; )
                  ++r;
                if ((i = r << 1) - e > 32 && Dt)
                  return Dt.decode(x.subarray(e, i));
                for (var o = "", a = 0; !(a >= t / 2); ++a) {
                  var n = b[(e + 2 * a) >> 1];
                  if (0 == n) break;
                  o += String.fromCharCode(n);
                }
                return o;
              }
              function Mt(e, t, i) {
                if ((void 0 === i && (i = 2147483647), i < 2)) return 0;
                for (
                  var r = t,
                    s = (i -= 2) < 2 * e.length ? i / 2 : e.length,
                    o = 0;
                  o < s;
                  ++o
                ) {
                  var a = e.charCodeAt(o);
                  (b[t >> 1] = a), (t += 2);
                }
                return (b[t >> 1] = 0), t - r;
              }
              function It(e) {
                return 2 * e.length;
              }
              function Ot(e, t) {
                for (var i = 0, r = ""; !(i >= t / 4); ) {
                  var s = T[(e + 4 * i) >> 2];
                  if (0 == s) break;
                  if ((++i, s >= 65536)) {
                    var o = s - 65536;
                    r += String.fromCharCode(
                      55296 | (o >> 10),
                      56320 | (1023 & o)
                    );
                  } else r += String.fromCharCode(s);
                }
                return r;
              }
              function kt(e, t, i) {
                if ((void 0 === i && (i = 2147483647), i < 4)) return 0;
                for (var r = t, s = r + i - 4, o = 0; o < e.length; ++o) {
                  var a = e.charCodeAt(o);
                  if (
                    (a >= 55296 &&
                      a <= 57343 &&
                      (a =
                        (65536 + ((1023 & a) << 10)) |
                        (1023 & e.charCodeAt(++o))),
                    (T[t >> 2] = a),
                    (t += 4) + 4 > s)
                  )
                    break;
                }
                return (T[t >> 2] = 0), t - r;
              }
              function _t(e) {
                for (var t = 0, i = 0; i < e.length; ++i) {
                  var r = e.charCodeAt(i);
                  r >= 55296 && r <= 57343 && ++i, (t += 4);
                }
                return t;
              }
              var Vt = {};
              function Nt(e) {
                var t = Vt[e];
                return void 0 === t ? _e(e) : t;
              }
              var Ft = [],
                Bt = [];
              function Ht(e) {
                return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
              }
              var zt,
                Yt = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],
                Gt = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
              function Xt(e) {
                var t = he(e) + 1,
                  i = xa(t);
                return i && wt(e, i, t), i;
              }
              function jt(t, i) {
                if (
                  ((Jt.mainLoop.timingMode = t),
                  (Jt.mainLoop.timingValue = i),
                  !Jt.mainLoop.func)
                )
                  return 1;
                if ((Jt.mainLoop.running || (Jt.mainLoop.running = !0), 0 == t))
                  (Jt.mainLoop.scheduler = function () {
                    var e =
                      0 | Math.max(0, Jt.mainLoop.tickStartTime + i - zt());
                    setTimeout(Jt.mainLoop.runner, e);
                  }),
                    (Jt.mainLoop.method = "timeout");
                else if (1 == t)
                  (Jt.mainLoop.scheduler = function () {
                    Jt.requestAnimationFrame(Jt.mainLoop.runner);
                  }),
                    (Jt.mainLoop.method = "rAF");
                else if (2 == t) {
                  if ("undefined" == typeof setImmediate) {
                    var r = [],
                      s = "setimmediate";
                    addEventListener(
                      "message",
                      (e) => {
                        (e.data !== s && e.data.target !== s) ||
                          (e.stopPropagation(), r.shift()());
                      },
                      !0
                    ),
                      (setImmediate = function (t) {
                        r.push(t),
                          p
                            ? (void 0 === e.setImmediates &&
                                (e.setImmediates = []),
                              e.setImmediates.push(t),
                              postMessage({ target: s }))
                            : postMessage(s, "*");
                      });
                  }
                  (Jt.mainLoop.scheduler = function () {
                    setImmediate(Jt.mainLoop.runner);
                  }),
                    (Jt.mainLoop.method = "immediate");
                }
                return 0;
              }
              function Wt(e, t, i, r, s) {
                M(
                  !Jt.mainLoop.func,
                  "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."
                ),
                  (Jt.mainLoop.func = e),
                  (Jt.mainLoop.arg = r);
                var o = Jt.mainLoop.currentlyRunningMainloop;
                function a() {
                  return !(o < Jt.mainLoop.currentlyRunningMainloop);
                }
                if (
                  ((Jt.mainLoop.running = !1),
                  (Jt.mainLoop.runner = function () {
                    if (!L)
                      if (Jt.mainLoop.queue.length > 0) {
                        var t = Date.now(),
                          i = Jt.mainLoop.queue.shift();
                        if ((i.func(i.arg), Jt.mainLoop.remainingBlockers)) {
                          var r = Jt.mainLoop.remainingBlockers,
                            s = r % 1 == 0 ? r - 1 : Math.floor(r);
                          i.counted
                            ? (Jt.mainLoop.remainingBlockers = s)
                            : ((s += 0.5),
                              (Jt.mainLoop.remainingBlockers =
                                (8 * r + s) / 9));
                        }
                        if (
                          (f(
                            'main loop blocker "' +
                              i.name +
                              '" took ' +
                              (Date.now() - t) +
                              " ms"
                          ),
                          Jt.mainLoop.updateStatus(),
                          !a())
                        )
                          return;
                        setTimeout(Jt.mainLoop.runner, 0);
                      } else
                        a() &&
                          ((Jt.mainLoop.currentFrameNumber =
                            (Jt.mainLoop.currentFrameNumber + 1) | 0),
                          1 == Jt.mainLoop.timingMode &&
                          Jt.mainLoop.timingValue > 1 &&
                          Jt.mainLoop.currentFrameNumber %
                            Jt.mainLoop.timingValue !=
                            0
                            ? Jt.mainLoop.scheduler()
                            : (0 == Jt.mainLoop.timingMode &&
                                (Jt.mainLoop.tickStartTime = zt()),
                              Jt.mainLoop.runIter(e),
                              a() &&
                                ("object" == typeof SDL &&
                                  SDL.audio &&
                                  SDL.audio.queueNewAudioData &&
                                  SDL.audio.queueNewAudioData(),
                                Jt.mainLoop.scheduler())));
                  }),
                  s ||
                    (t && t > 0 ? jt(0, 1e3 / t) : jt(1, 1),
                    Jt.mainLoop.scheduler()),
                  i)
                )
                  throw "unwind";
              }
              function Ut(e) {
                if (e instanceof te || "unwind" == e) return P;
                u(1, e);
              }
              function $t(t, i) {
                var r;
                (P = t),
                  (P = r = t),
                  B() || (e.onExit && e.onExit(r), (L = !0)),
                  u(r, new te(r));
              }
              zt = () => performance.now();
              var qt = $t;
              function Kt(e) {
                if (!L)
                  try {
                    e(),
                      (function () {
                        if (!B())
                          try {
                            qt(P);
                          } catch (e) {
                            Ut(e);
                          }
                      })();
                  } catch (e) {
                    Ut(e);
                  }
              }
              function Zt(e, t) {
                return setTimeout(() => {
                  Kt(e);
                }, t);
              }
              var Jt = {
                  mainLoop: {
                    running: !1,
                    scheduler: null,
                    method: "",
                    currentlyRunningMainloop: 0,
                    func: null,
                    arg: 0,
                    timingMode: 0,
                    timingValue: 0,
                    currentFrameNumber: 0,
                    queue: [],
                    pause: function () {
                      (Jt.mainLoop.scheduler = null),
                        Jt.mainLoop.currentlyRunningMainloop++;
                    },
                    resume: function () {
                      Jt.mainLoop.currentlyRunningMainloop++;
                      var e = Jt.mainLoop.timingMode,
                        t = Jt.mainLoop.timingValue,
                        i = Jt.mainLoop.func;
                      (Jt.mainLoop.func = null),
                        Wt(i, 0, !1, Jt.mainLoop.arg, !0),
                        jt(e, t),
                        Jt.mainLoop.scheduler();
                    },
                    updateStatus: function () {
                      if (e.setStatus) {
                        var t = e.statusMessage || "Please wait...",
                          i = Jt.mainLoop.remainingBlockers,
                          r = Jt.mainLoop.expectedBlockers;
                        i
                          ? i < r
                            ? e.setStatus(t + " (" + (r - i) + "/" + r + ")")
                            : e.setStatus(t)
                          : e.setStatus("");
                      }
                    },
                    runIter: function (t) {
                      if (!L) {
                        if (e.preMainLoop && !1 === e.preMainLoop()) return;
                        Kt(t), e.postMainLoop && e.postMainLoop();
                      }
                    },
                  },
                  isFullscreen: !1,
                  pointerLock: !1,
                  moduleContextCreatedCallbacks: [],
                  workers: [],
                  init: function () {
                    if (!Jt.initted) {
                      Jt.initted = !0;
                      var t = {
                        canHandle: function (t) {
                          return (
                            !e.noImageDecoding &&
                            /\.(jpg|jpeg|png|bmp)$/i.test(t)
                          );
                        },
                        handle: function (e, t, i, r) {
                          var s = new Blob([e], { type: Jt.getMimetype(t) });
                          s.size !== e.length &&
                            (s = new Blob([new Uint8Array(e).buffer], {
                              type: Jt.getMimetype(t),
                            }));
                          var o = URL.createObjectURL(s),
                            a = new Image();
                          (a.onload = () => {
                            M(
                              a.complete,
                              "Image " + t + " could not be decoded"
                            );
                            var r = document.createElement("canvas");
                            (r.width = a.width),
                              (r.height = a.height),
                              r.getContext("2d").drawImage(a, 0, 0),
                              (ya[t] = r),
                              URL.revokeObjectURL(o),
                              i && i(e);
                          }),
                            (a.onerror = (e) => {
                              f("Image " + o + " could not be decoded"),
                                r && r();
                            }),
                            (a.src = o);
                        },
                      };
                      me.push(t);
                      var i = {
                        canHandle: function (t) {
                          return (
                            !e.noAudioDecoding &&
                            t.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 }
                          );
                        },
                        handle: function (e, t, i, r) {
                          var s = !1;
                          function o(r) {
                            s || ((s = !0), (fa[t] = r), i && i(e));
                          }
                          var a = new Blob([e], { type: Jt.getMimetype(t) }),
                            n = URL.createObjectURL(a),
                            l = new Audio();
                          l.addEventListener("canplaythrough", () => o(l), !1),
                            (l.onerror = function (i) {
                              s ||
                                (v(
                                  "warning: browser could not fully decode audio " +
                                    t +
                                    ", trying slower base64 approach"
                                ),
                                (l.src =
                                  "data:audio/x-" +
                                  t.substr(-3) +
                                  ";base64," +
                                  (function (e) {
                                    for (
                                      var t =
                                          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                                        i = "",
                                        r = 0,
                                        s = 0,
                                        o = 0;
                                      o < e.length;
                                      o++
                                    )
                                      for (
                                        r = (r << 8) | e[o], s += 8;
                                        s >= 6;

                                      ) {
                                        var a = (r >> (s - 6)) & 63;
                                        (s -= 6), (i += t[a]);
                                      }
                                    return (
                                      2 == s
                                        ? ((i += t[(3 & r) << 4]), (i += "=="))
                                        : 4 == s &&
                                          ((i += t[(15 & r) << 2]), (i += "=")),
                                      i
                                    );
                                  })(e)),
                                o(l));
                            }),
                            (l.src = n),
                            Zt(() => {
                              o(l);
                            }, 1e4);
                        },
                      };
                      me.push(i);
                      var r = e.canvas;
                      r &&
                        ((r.requestPointerLock =
                          r.requestPointerLock ||
                          r.mozRequestPointerLock ||
                          r.webkitRequestPointerLock ||
                          r.msRequestPointerLock ||
                          (() => {})),
                        (r.exitPointerLock =
                          document.exitPointerLock ||
                          document.mozExitPointerLock ||
                          document.webkitExitPointerLock ||
                          document.msExitPointerLock ||
                          (() => {})),
                        (r.exitPointerLock = r.exitPointerLock.bind(document)),
                        document.addEventListener("pointerlockchange", s, !1),
                        document.addEventListener(
                          "mozpointerlockchange",
                          s,
                          !1
                        ),
                        document.addEventListener(
                          "webkitpointerlockchange",
                          s,
                          !1
                        ),
                        document.addEventListener("mspointerlockchange", s, !1),
                        e.elementPointerLock &&
                          r.addEventListener(
                            "click",
                            (t) => {
                              !Jt.pointerLock &&
                                e.canvas.requestPointerLock &&
                                (e.canvas.requestPointerLock(),
                                t.preventDefault());
                            },
                            !1
                          ));
                    }
                    function s() {
                      Jt.pointerLock =
                        document.pointerLockElement === e.canvas ||
                        document.mozPointerLockElement === e.canvas ||
                        document.webkitPointerLockElement === e.canvas ||
                        document.msPointerLockElement === e.canvas;
                    }
                  },
                  createContext: function (t, i, r, s) {
                    if (i && e.ctx && t == e.canvas) return e.ctx;
                    var o, a;
                    if (i) {
                      var n = {
                        antialias: !1,
                        alpha: !1,
                        majorVersion:
                          "undefined" != typeof WebGL2RenderingContext ? 2 : 1,
                      };
                      if (s) for (var l in s) n[l] = s[l];
                      void 0 !== ei &&
                        (a = ei.createContext(t, n)) &&
                        (o = ei.getContext(a).GLctx);
                    } else o = t.getContext("2d");
                    return o
                      ? (r &&
                          (i ||
                            M(
                              void 0 === ga,
                              "cannot set in module if GLctx is used, but we are a non-GL context that would replace it"
                            ),
                          (e.ctx = o),
                          i && ei.makeContextCurrent(a),
                          (e.useWebGL = i),
                          Jt.moduleContextCreatedCallbacks.forEach((e) => e()),
                          Jt.init()),
                        o)
                      : null;
                  },
                  destroyContext: function (e, t, i) {},
                  fullscreenHandlersInstalled: !1,
                  lockPointer: void 0,
                  resizeCanvas: void 0,
                  requestFullscreen: function (t, i) {
                    (Jt.lockPointer = t),
                      (Jt.resizeCanvas = i),
                      void 0 === Jt.lockPointer && (Jt.lockPointer = !0),
                      void 0 === Jt.resizeCanvas && (Jt.resizeCanvas = !1);
                    var r = e.canvas;
                    function s() {
                      Jt.isFullscreen = !1;
                      var t = r.parentNode;
                      (document.fullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.webkitCurrentFullScreenElement) === t
                        ? ((r.exitFullscreen = Jt.exitFullscreen),
                          Jt.lockPointer && r.requestPointerLock(),
                          (Jt.isFullscreen = !0),
                          Jt.resizeCanvas
                            ? Jt.setFullscreenCanvasSize()
                            : Jt.updateCanvasDimensions(r))
                        : (t.parentNode.insertBefore(r, t),
                          t.parentNode.removeChild(t),
                          Jt.resizeCanvas
                            ? Jt.setWindowedCanvasSize()
                            : Jt.updateCanvasDimensions(r)),
                        e.onFullScreen && e.onFullScreen(Jt.isFullscreen),
                        e.onFullscreen && e.onFullscreen(Jt.isFullscreen);
                    }
                    Jt.fullscreenHandlersInstalled ||
                      ((Jt.fullscreenHandlersInstalled = !0),
                      document.addEventListener("fullscreenchange", s, !1),
                      document.addEventListener("mozfullscreenchange", s, !1),
                      document.addEventListener(
                        "webkitfullscreenchange",
                        s,
                        !1
                      ),
                      document.addEventListener("MSFullscreenChange", s, !1));
                    var o = document.createElement("div");
                    r.parentNode.insertBefore(o, r),
                      o.appendChild(r),
                      (o.requestFullscreen =
                        o.requestFullscreen ||
                        o.mozRequestFullScreen ||
                        o.msRequestFullscreen ||
                        (o.webkitRequestFullscreen
                          ? () =>
                              o.webkitRequestFullscreen(
                                Element.ALLOW_KEYBOARD_INPUT
                              )
                          : null) ||
                        (o.webkitRequestFullScreen
                          ? () =>
                              o.webkitRequestFullScreen(
                                Element.ALLOW_KEYBOARD_INPUT
                              )
                          : null)),
                      o.requestFullscreen();
                  },
                  exitFullscreen: function () {
                    return (
                      !!Jt.isFullscreen &&
                      ((
                        document.exitFullscreen ||
                        document.cancelFullScreen ||
                        document.mozCancelFullScreen ||
                        document.msExitFullscreen ||
                        document.webkitCancelFullScreen ||
                        (() => {})
                      ).apply(document, []),
                      !0)
                    );
                  },
                  nextRAF: 0,
                  fakeRequestAnimationFrame: function (e) {
                    var t = Date.now();
                    if (0 === Jt.nextRAF) Jt.nextRAF = t + 1e3 / 60;
                    else for (; t + 2 >= Jt.nextRAF; ) Jt.nextRAF += 1e3 / 60;
                    var i = Math.max(Jt.nextRAF - t, 0);
                    setTimeout(e, i);
                  },
                  requestAnimationFrame: function (e) {
                    "function" != typeof requestAnimationFrame
                      ? (0, Jt.fakeRequestAnimationFrame)(e)
                      : requestAnimationFrame(e);
                  },
                  safeSetTimeout: function (e, t) {
                    return Zt(e, t);
                  },
                  safeRequestAnimationFrame: function (e) {
                    return Jt.requestAnimationFrame(() => {
                      Kt(e);
                    });
                  },
                  getMimetype: function (e) {
                    return {
                      jpg: "image/jpeg",
                      jpeg: "image/jpeg",
                      png: "image/png",
                      bmp: "image/bmp",
                      ogg: "audio/ogg",
                      wav: "audio/wav",
                      mp3: "audio/mpeg",
                    }[e.substr(e.lastIndexOf(".") + 1)];
                  },
                  getUserMedia: function (e) {
                    window.getUserMedia ||
                      (window.getUserMedia =
                        navigator.getUserMedia || navigator.mozGetUserMedia),
                      window.getUserMedia(e);
                  },
                  getMovementX: function (e) {
                    return (
                      e.movementX || e.mozMovementX || e.webkitMovementX || 0
                    );
                  },
                  getMovementY: function (e) {
                    return (
                      e.movementY || e.mozMovementY || e.webkitMovementY || 0
                    );
                  },
                  getMouseWheelDelta: function (e) {
                    var t = 0;
                    switch (e.type) {
                      case "DOMMouseScroll":
                        t = e.detail / 3;
                        break;
                      case "mousewheel":
                        t = e.wheelDelta / 120;
                        break;
                      case "wheel":
                        switch (((t = e.deltaY), e.deltaMode)) {
                          case 0:
                            t /= 100;
                            break;
                          case 1:
                            t /= 3;
                            break;
                          case 2:
                            t *= 80;
                            break;
                          default:
                            throw (
                              "unrecognized mouse wheel delta mode: " +
                              e.deltaMode
                            );
                        }
                        break;
                      default:
                        throw "unrecognized mouse wheel event: " + e.type;
                    }
                    return t;
                  },
                  mouseX: 0,
                  mouseY: 0,
                  mouseMovementX: 0,
                  mouseMovementY: 0,
                  touches: {},
                  lastTouches: {},
                  calculateMouseEvent: function (t) {
                    if (Jt.pointerLock)
                      "mousemove" != t.type && "mozMovementX" in t
                        ? (Jt.mouseMovementX = Jt.mouseMovementY = 0)
                        : ((Jt.mouseMovementX = Jt.getMovementX(t)),
                          (Jt.mouseMovementY = Jt.getMovementY(t))),
                        "undefined" != typeof SDL
                          ? ((Jt.mouseX = SDL.mouseX + Jt.mouseMovementX),
                            (Jt.mouseY = SDL.mouseY + Jt.mouseMovementY))
                          : ((Jt.mouseX += Jt.mouseMovementX),
                            (Jt.mouseY += Jt.mouseMovementY));
                    else {
                      var i = e.canvas.getBoundingClientRect(),
                        r = e.canvas.width,
                        s = e.canvas.height,
                        o =
                          void 0 !== window.scrollX
                            ? window.scrollX
                            : window.pageXOffset,
                        a =
                          void 0 !== window.scrollY
                            ? window.scrollY
                            : window.pageYOffset;
                      if (
                        "touchstart" === t.type ||
                        "touchend" === t.type ||
                        "touchmove" === t.type
                      ) {
                        var n = t.touch;
                        if (void 0 === n) return;
                        var l = n.pageX - (o + i.left),
                          d = n.pageY - (a + i.top),
                          h = { x: (l *= r / i.width), y: (d *= s / i.height) };
                        if ("touchstart" === t.type)
                          (Jt.lastTouches[n.identifier] = h),
                            (Jt.touches[n.identifier] = h);
                        else if (
                          "touchend" === t.type ||
                          "touchmove" === t.type
                        ) {
                          var u = Jt.touches[n.identifier];
                          u || (u = h),
                            (Jt.lastTouches[n.identifier] = u),
                            (Jt.touches[n.identifier] = h);
                        }
                        return;
                      }
                      var c = t.pageX - (o + i.left),
                        p = t.pageY - (a + i.top);
                      (c *= r / i.width),
                        (p *= s / i.height),
                        (Jt.mouseMovementX = c - Jt.mouseX),
                        (Jt.mouseMovementY = p - Jt.mouseY),
                        (Jt.mouseX = c),
                        (Jt.mouseY = p);
                    }
                  },
                  resizeListeners: [],
                  updateResizeListeners: function () {
                    var t = e.canvas;
                    Jt.resizeListeners.forEach((e) => e(t.width, t.height));
                  },
                  setCanvasSize: function (t, i, r) {
                    var s = e.canvas;
                    Jt.updateCanvasDimensions(s, t, i),
                      r || Jt.updateResizeListeners();
                  },
                  windowedWidth: 0,
                  windowedHeight: 0,
                  setFullscreenCanvasSize: function () {
                    if ("undefined" != typeof SDL) {
                      var t = E[SDL.screen >> 2];
                      (t |= 8388608), (T[SDL.screen >> 2] = t);
                    }
                    Jt.updateCanvasDimensions(e.canvas),
                      Jt.updateResizeListeners();
                  },
                  setWindowedCanvasSize: function () {
                    if ("undefined" != typeof SDL) {
                      var t = E[SDL.screen >> 2];
                      (t &= -8388609), (T[SDL.screen >> 2] = t);
                    }
                    Jt.updateCanvasDimensions(e.canvas),
                      Jt.updateResizeListeners();
                  },
                  updateCanvasDimensions: function (t, i, r) {
                    i && r
                      ? ((t.widthNative = i), (t.heightNative = r))
                      : ((i = t.widthNative), (r = t.heightNative));
                    var s = i,
                      o = r;
                    if (
                      (e.forcedAspectRatio &&
                        e.forcedAspectRatio > 0 &&
                        (s / o < e.forcedAspectRatio
                          ? (s = Math.round(o * e.forcedAspectRatio))
                          : (o = Math.round(s / e.forcedAspectRatio))),
                      (document.fullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.webkitCurrentFullScreenElement) ===
                        t.parentNode && "undefined" != typeof screen)
                    ) {
                      var a = Math.min(screen.width / s, screen.height / o);
                      (s = Math.round(s * a)), (o = Math.round(o * a));
                    }
                    Jt.resizeCanvas
                      ? (t.width != s && (t.width = s),
                        t.height != o && (t.height = o),
                        void 0 !== t.style &&
                          (t.style.removeProperty("width"),
                          t.style.removeProperty("height")))
                      : (t.width != i && (t.width = i),
                        t.height != r && (t.height = r),
                        void 0 !== t.style &&
                          (s != i || o != r
                            ? (t.style.setProperty(
                                "width",
                                s + "px",
                                "important"
                              ),
                              t.style.setProperty(
                                "height",
                                o + "px",
                                "important"
                              ))
                            : (t.style.removeProperty("width"),
                              t.style.removeProperty("height"))));
                  },
                },
                Qt = {
                  errorCode: 12288,
                  defaultDisplayInitialized: !1,
                  currentContext: 0,
                  currentReadSurface: 0,
                  currentDrawSurface: 0,
                  contextAttributes: {
                    alpha: !1,
                    depth: !1,
                    stencil: !1,
                    antialias: !1,
                  },
                  stringCache: {},
                  setErrorCode: function (e) {
                    Qt.errorCode = e;
                  },
                  chooseConfig: function (e, t, i, r, s) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if (t)
                      for (;;) {
                        var o = T[t >> 2];
                        if (12321 == o) {
                          var a = T[(t + 4) >> 2];
                          Qt.contextAttributes.alpha = a > 0;
                        } else if (12325 == o) {
                          var n = T[(t + 4) >> 2];
                          Qt.contextAttributes.depth = n > 0;
                        } else if (12326 == o) {
                          var l = T[(t + 4) >> 2];
                          Qt.contextAttributes.stencil = l > 0;
                        } else if (12337 == o) {
                          var d = T[(t + 4) >> 2];
                          Qt.contextAttributes.antialias = d > 0;
                        } else if (12338 == o)
                          (d = T[(t + 4) >> 2]),
                            (Qt.contextAttributes.antialias = 1 == d);
                        else if (12544 == o) {
                          var h = T[(t + 4) >> 2];
                          Qt.contextAttributes.lowLatency = 12547 != h;
                        } else if (12344 == o) break;
                        t += 8;
                      }
                    return (i && r) || s
                      ? (s && (T[s >> 2] = 1),
                        i && r > 0 && (T[i >> 2] = 62002),
                        Qt.setErrorCode(12288),
                        1)
                      : (Qt.setErrorCode(12300), 0);
                  },
                },
                ei = {
                  counter: 1,
                  buffers: [],
                  programs: [],
                  framebuffers: [],
                  renderbuffers: [],
                  textures: [],
                  shaders: [],
                  vaos: [],
                  contexts: [],
                  offscreenCanvases: {},
                  queries: [],
                  samplers: [],
                  transformFeedbacks: [],
                  syncs: [],
                  stringCache: {},
                  stringiCache: {},
                  unpackAlignment: 4,
                  recordError: function (e) {
                    ei.lastError || (ei.lastError = e);
                  },
                  getNewId: function (e) {
                    for (var t = ei.counter++, i = e.length; i < t; i++)
                      e[i] = null;
                    return t;
                  },
                  getSource: function (e, t, i, r) {
                    for (var s = "", o = 0; o < t; ++o) {
                      var a = r ? T[(r + 4 * o) >> 2] : -1;
                      s += Ce(T[(i + 4 * o) >> 2], a < 0 ? void 0 : a);
                    }
                    return s;
                  },
                  createContext: function (e, t) {
                    var i =
                      t.majorVersion > 1
                        ? e.getContext("webgl2", t)
                        : e.getContext("webgl", t);
                    return i ? ei.registerContext(i, t) : 0;
                  },
                  registerContext: function (e, t) {
                    var i = ei.getNewId(ei.contexts),
                      r = {
                        handle: i,
                        attributes: t,
                        version: t.majorVersion,
                        GLctx: e,
                      };
                    return (
                      e.canvas && (e.canvas.GLctxObject = r),
                      (ei.contexts[i] = r),
                      (void 0 === t.enableExtensionsByDefault ||
                        t.enableExtensionsByDefault) &&
                        ei.initExtensions(r),
                      i
                    );
                  },
                  makeContextCurrent: function (t) {
                    return (
                      (ei.currentContext = ei.contexts[t]),
                      (e.ctx = ga =
                        ei.currentContext && ei.currentContext.GLctx),
                      !(t && !ga)
                    );
                  },
                  getContext: function (e) {
                    return ei.contexts[e];
                  },
                  deleteContext: function (e) {
                    ei.currentContext === ei.contexts[e] &&
                      (ei.currentContext = null),
                      "object" == typeof si &&
                        si.removeAllHandlersOnTarget(
                          ei.contexts[e].GLctx.canvas
                        ),
                      ei.contexts[e] &&
                        ei.contexts[e].GLctx.canvas &&
                        (ei.contexts[e].GLctx.canvas.GLctxObject = void 0),
                      (ei.contexts[e] = null);
                  },
                  initExtensions: function (e) {
                    if ((e || (e = ei.currentContext), !e.initExtensionsDone)) {
                      e.initExtensionsDone = !0;
                      var t,
                        i = e.GLctx;
                      !(function (e) {
                        var t = e.getExtension("ANGLE_instanced_arrays");
                        t &&
                          ((e.vertexAttribDivisor = function (e, i) {
                            t.vertexAttribDivisorANGLE(e, i);
                          }),
                          (e.drawArraysInstanced = function (e, i, r, s) {
                            t.drawArraysInstancedANGLE(e, i, r, s);
                          }),
                          (e.drawElementsInstanced = function (e, i, r, s, o) {
                            t.drawElementsInstancedANGLE(e, i, r, s, o);
                          }));
                      })(i),
                        (function (e) {
                          var t = e.getExtension("OES_vertex_array_object");
                          t &&
                            ((e.createVertexArray = function () {
                              return t.createVertexArrayOES();
                            }),
                            (e.deleteVertexArray = function (e) {
                              t.deleteVertexArrayOES(e);
                            }),
                            (e.bindVertexArray = function (e) {
                              t.bindVertexArrayOES(e);
                            }),
                            (e.isVertexArray = function (e) {
                              return t.isVertexArrayOES(e);
                            }));
                        })(i),
                        (function (e) {
                          var t = e.getExtension("WEBGL_draw_buffers");
                          t &&
                            (e.drawBuffers = function (e, i) {
                              t.drawBuffersWEBGL(e, i);
                            });
                        })(i),
                        ((t = i).dibvbi = t.getExtension(
                          "WEBGL_draw_instanced_base_vertex_base_instance"
                        )),
                        (function (e) {
                          e.mdibvbi = e.getExtension(
                            "WEBGL_multi_draw_instanced_base_vertex_base_instance"
                          );
                        })(i),
                        e.version >= 2 &&
                          (i.disjointTimerQueryExt = i.getExtension(
                            "EXT_disjoint_timer_query_webgl2"
                          )),
                        (e.version < 2 || !i.disjointTimerQueryExt) &&
                          (i.disjointTimerQueryExt = i.getExtension(
                            "EXT_disjoint_timer_query"
                          )),
                        (function (e) {
                          e.multiDrawWebgl = e.getExtension("WEBGL_multi_draw");
                        })(i),
                        (i.getSupportedExtensions() || []).forEach(function (
                          e
                        ) {
                          e.includes("lose_context") ||
                            e.includes("debug") ||
                            i.getExtension(e);
                        });
                    }
                  },
                },
                ti = [];
              function ii(e, t) {
                var i;
                for (ti.length = 0, t >>= 2; (i = x[e++]); )
                  (t += (105 != i) & t),
                    ti.push(105 == i ? T[t] : w[t++ >> 1]),
                    ++t;
                return ti;
              }
              function ri(e) {
                var t = wa(),
                  i = e();
                return Da(t), i;
              }
              var si = {
                  inEventHandler: 0,
                  removeAllEventListeners: function () {
                    for (var e = si.eventHandlers.length - 1; e >= 0; --e)
                      si._removeHandler(e);
                    (si.eventHandlers = []), (si.deferredCalls = []);
                  },
                  registerRemoveEventListeners: function () {
                    si.removeEventListenersRegistered ||
                      (V.push(si.removeAllEventListeners),
                      (si.removeEventListenersRegistered = !0));
                  },
                  deferredCalls: [],
                  deferCall: function (e, t, i) {
                    function r(e, t) {
                      if (e.length != t.length) return !1;
                      for (var i in e) if (e[i] != t[i]) return !1;
                      return !0;
                    }
                    for (var s in si.deferredCalls) {
                      var o = si.deferredCalls[s];
                      if (o.targetFunction == e && r(o.argsList, i)) return;
                    }
                    si.deferredCalls.push({
                      targetFunction: e,
                      precedence: t,
                      argsList: i,
                    }),
                      si.deferredCalls.sort(function (e, t) {
                        return e.precedence < t.precedence;
                      });
                  },
                  removeDeferredCalls: function (e) {
                    for (var t = 0; t < si.deferredCalls.length; ++t)
                      si.deferredCalls[t].targetFunction == e &&
                        (si.deferredCalls.splice(t, 1), --t);
                  },
                  canPerformEventHandlerRequests: function () {
                    return (
                      si.inEventHandler &&
                      si.currentEventHandler.allowsDeferredCalls
                    );
                  },
                  runDeferredCalls: function () {
                    if (si.canPerformEventHandlerRequests())
                      for (var e = 0; e < si.deferredCalls.length; ++e) {
                        var t = si.deferredCalls[e];
                        si.deferredCalls.splice(e, 1),
                          --e,
                          t.targetFunction.apply(null, t.argsList);
                      }
                  },
                  eventHandlers: [],
                  removeAllHandlersOnTarget: function (e, t) {
                    for (var i = 0; i < si.eventHandlers.length; ++i)
                      si.eventHandlers[i].target != e ||
                        (t && t != si.eventHandlers[i].eventTypeString) ||
                        si._removeHandler(i--);
                  },
                  _removeHandler: function (e) {
                    var t = si.eventHandlers[e];
                    t.target.removeEventListener(
                      t.eventTypeString,
                      t.eventListenerFunc,
                      t.useCapture
                    ),
                      si.eventHandlers.splice(e, 1);
                  },
                  registerOrRemoveHandler: function (e) {
                    if (!e.target) return -4;
                    var t = function (t) {
                      ++si.inEventHandler,
                        (si.currentEventHandler = e),
                        si.runDeferredCalls(),
                        e.handlerFunc(t),
                        si.runDeferredCalls(),
                        --si.inEventHandler;
                    };
                    if (e.callbackfunc)
                      (e.eventListenerFunc = t),
                        e.target.addEventListener(
                          e.eventTypeString,
                          t,
                          e.useCapture
                        ),
                        si.eventHandlers.push(e),
                        si.registerRemoveEventListeners();
                    else
                      for (var i = 0; i < si.eventHandlers.length; ++i)
                        si.eventHandlers[i].target == e.target &&
                          si.eventHandlers[i].eventTypeString ==
                            e.eventTypeString &&
                          si._removeHandler(i--);
                    return 0;
                  },
                  getNodeNameForTarget: function (e) {
                    return e
                      ? e == window
                        ? "#window"
                        : e == screen
                        ? "#screen"
                        : e && e.nodeName
                        ? e.nodeName
                        : ""
                      : "";
                  },
                  fullscreenEnabled: function () {
                    return (
                      document.fullscreenEnabled ||
                      document.webkitFullscreenEnabled
                    );
                  },
                },
                oi = {};
              function ai(e) {
                return e > 2 ? Ce(e) : e;
              }
              var ni = [0, document, window];
              function li(e) {
                return (e = ai(e)), ni[e] || document.querySelector(e);
              }
              function di(e) {
                return li(e);
              }
              function hi(e) {
                var t = he(e) + 1,
                  i = La(t);
                return wt(e, i, t), i;
              }
              function ui(e) {
                return ri(function () {
                  var t = La(8),
                    i = t + 4;
                  return (
                    (function (e, t, i) {
                      var r = di(e);
                      if (!r) return -4;
                      (T[t >> 2] = r.width), (T[i >> 2] = r.height);
                    })(hi(e.id), t, i),
                    [T[t >> 2], T[i >> 2]]
                  );
                });
              }
              function ci(e, t, i) {
                var r = di(e);
                return r ? ((r.width = t), (r.height = i), 0) : -4;
              }
              function pi(e, t, i) {
                e.controlTransferredOffscreen
                  ? ri(function () {
                      ci(hi(e.id), t, i);
                    })
                  : ((e.width = t), (e.height = i));
              }
              function gi(e, t, i) {
                (e.style.paddingLeft = e.style.paddingRight = i + "px"),
                  (e.style.paddingTop = e.style.paddingBottom = t + "px");
              }
              function yi(e) {
                return ni.indexOf(e) < 0
                  ? e.getBoundingClientRect()
                  : { left: 0, top: 0 };
              }
              function fi(e, t) {
                if (
                  ((0 == t.scaleMode && 0 == t.canvasResolutionScaleMode) ||
                    (function (e, t) {
                      var i = (function (e) {
                          var t = ui(e),
                            i = t[0],
                            r = t[1],
                            s = e.style.width,
                            o = e.style.height,
                            a = e.style.backgroundColor,
                            n = document.body.style.backgroundColor,
                            l = e.style.paddingLeft,
                            d = e.style.paddingRight,
                            h = e.style.paddingTop,
                            u = e.style.paddingBottom,
                            c = e.style.marginLeft,
                            p = e.style.marginRight,
                            g = e.style.marginTop,
                            y = e.style.marginBottom,
                            f = document.body.style.margin,
                            v = document.documentElement.style.overflow,
                            m = document.body.scroll,
                            S = e.style.imageRendering;
                          function P() {
                            document.fullscreenElement ||
                              document.webkitFullscreenElement ||
                              (document.removeEventListener(
                                "fullscreenchange",
                                P
                              ),
                              document.removeEventListener(
                                "webkitfullscreenchange",
                                P
                              ),
                              pi(e, i, r),
                              (e.style.width = s),
                              (e.style.height = o),
                              (e.style.backgroundColor = a),
                              n ||
                                (document.body.style.backgroundColor = "white"),
                              (document.body.style.backgroundColor = n),
                              (e.style.paddingLeft = l),
                              (e.style.paddingRight = d),
                              (e.style.paddingTop = h),
                              (e.style.paddingBottom = u),
                              (e.style.marginLeft = c),
                              (e.style.marginRight = p),
                              (e.style.marginTop = g),
                              (e.style.marginBottom = y),
                              (document.body.style.margin = f),
                              (document.documentElement.style.overflow = v),
                              (document.body.scroll = m),
                              (e.style.imageRendering = S),
                              e.GLctxObject &&
                                e.GLctxObject.GLctx.viewport(0, 0, i, r),
                              oi.canvasResizedCallback &&
                                re(oi.canvasResizedCallback)(
                                  37,
                                  0,
                                  oi.canvasResizedCallbackUserData
                                ));
                          }
                          return (
                            document.addEventListener("fullscreenchange", P),
                            document.addEventListener(
                              "webkitfullscreenchange",
                              P
                            ),
                            P
                          );
                        })(e),
                        r = t.softFullscreen ? innerWidth : screen.width,
                        s = t.softFullscreen ? innerHeight : screen.height,
                        o = yi(e),
                        a = o.width,
                        n = o.height,
                        l = ui(e),
                        d = l[0],
                        h = l[1];
                      if (3 == t.scaleMode)
                        gi(e, (s - n) / 2, (r - a) / 2), (r = a), (s = n);
                      else if (2 == t.scaleMode)
                        if (r * h < d * s) {
                          var u = (h * r) / d;
                          gi(e, (s - u) / 2, 0), (s = u);
                        } else {
                          var c = (d * s) / h;
                          gi(e, 0, (r - c) / 2), (r = c);
                        }
                      e.style.backgroundColor ||
                        (e.style.backgroundColor = "black"),
                        document.body.style.backgroundColor ||
                          (document.body.style.backgroundColor = "black"),
                        (e.style.width = r + "px"),
                        (e.style.height = s + "px"),
                        1 == t.filteringMode &&
                          ((e.style.imageRendering = "optimizeSpeed"),
                          (e.style.imageRendering = "-moz-crisp-edges"),
                          (e.style.imageRendering = "-o-crisp-edges"),
                          (e.style.imageRendering =
                            "-webkit-optimize-contrast"),
                          (e.style.imageRendering = "optimize-contrast"),
                          (e.style.imageRendering = "crisp-edges"),
                          (e.style.imageRendering = "pixelated"));
                      var p =
                        2 == t.canvasResolutionScaleMode ? devicePixelRatio : 1;
                      if (0 != t.canvasResolutionScaleMode) {
                        var g = (r * p) | 0,
                          y = (s * p) | 0;
                        pi(e, g, y),
                          e.GLctxObject &&
                            e.GLctxObject.GLctx.viewport(0, 0, g, y);
                      }
                    })(e, t),
                  e.requestFullscreen)
                )
                  e.requestFullscreen();
                else {
                  if (!e.webkitRequestFullscreen)
                    return si.fullscreenEnabled() ? -3 : -1;
                  e.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
                return (
                  (oi = t),
                  t.canvasResizedCallback &&
                    re(t.canvasResizedCallback)(
                      37,
                      0,
                      t.canvasResizedCallbackUserData
                    ),
                  0
                );
              }
              function vi(e) {
                return e.requestPointerLock
                  ? (e.requestPointerLock(), 0)
                  : document.body.requestPointerLock
                  ? -3
                  : -1;
              }
              function mi(e, t) {
                w[e >> 3] = t.timestamp;
                for (var i = 0; i < t.axes.length; ++i)
                  w[(e + 8 * i + 16) >> 3] = t.axes[i];
                for (i = 0; i < t.buttons.length; ++i)
                  "object" == typeof t.buttons[i]
                    ? (w[(e + 8 * i + 528) >> 3] = t.buttons[i].value)
                    : (w[(e + 8 * i + 528) >> 3] = t.buttons[i]);
                for (i = 0; i < t.buttons.length; ++i)
                  "object" == typeof t.buttons[i]
                    ? (T[(e + 4 * i + 1040) >> 2] = t.buttons[i].pressed)
                    : (T[(e + 4 * i + 1040) >> 2] = 1 == t.buttons[i]);
                (T[(e + 1296) >> 2] = t.connected),
                  (T[(e + 1300) >> 2] = t.index),
                  (T[(e + 8) >> 2] = t.axes.length),
                  (T[(e + 12) >> 2] = t.buttons.length),
                  wt(t.id, e + 1304, 64),
                  wt(t.mapping, e + 1368, 64);
              }
              function Si(e) {
                ga.activeTexture(e);
              }
              var Pi = Si;
              function Ci(e, t) {
                ga.attachShader(ei.programs[e], ei.shaders[t]);
              }
              var xi = Ci;
              function bi(e, t, i) {
                ga.bindAttribLocation(ei.programs[e], t, Ce(i));
              }
              var Ai = bi;
              function Ti(e, t) {
                35051 == e
                  ? (ga.currentPixelPackBufferBinding = t)
                  : 35052 == e && (ga.currentPixelUnpackBufferBinding = t),
                  ga.bindBuffer(e, ei.buffers[t]);
              }
              var Ei = Ti;
              function Ri(e, t) {
                ga.bindFramebuffer(e, ei.framebuffers[t]);
              }
              var wi = Ri;
              function Di(e, t) {
                ga.bindTexture(e, ei.textures[t]);
              }
              var Li = Di;
              function Mi(e) {
                ga.bindVertexArray(ei.vaos[e]);
              }
              var Ii = Mi,
                Oi = Mi;
              function ki(e, t, i, r) {
                ga.blendColor(e, t, i, r);
              }
              var _i = ki;
              function Vi(e) {
                ga.blendEquation(e);
              }
              var Ni = Vi;
              function Fi(e, t, i, r) {
                ga.blendFuncSeparate(e, t, i, r);
              }
              var Bi = Fi;
              function Hi(e, t, i, r) {
                ei.currentContext.version >= 2
                  ? i && t
                    ? ga.bufferData(e, x, r, i, t)
                    : ga.bufferData(e, t, r)
                  : ga.bufferData(e, i ? x.subarray(i, i + t) : t, r);
              }
              var zi = Hi;
              function Yi(e) {
                return ga.checkFramebufferStatus(e);
              }
              var Gi = Yi;
              function Xi(e) {
                ga.clear(e);
              }
              var ji = Xi;
              function Wi(e, t, i, r) {
                ga.clearColor(e, t, i, r);
              }
              var Ui = Wi;
              function $i(e, t) {
                return (e >>> 0) + 4294967296 * t;
              }
              function qi(e, t, i, r) {
                ga.colorMask(!!e, !!t, !!i, !!r);
              }
              var Ki = qi;
              function Zi(e) {
                ga.compileShader(ei.shaders[e]);
              }
              var Ji = Zi;
              function Qi(e, t, i, r, s, o, a, n) {
                ei.currentContext.version >= 2
                  ? ga.currentPixelUnpackBufferBinding || !a
                    ? ga.compressedTexImage2D(e, t, i, r, s, o, a, n)
                    : ga.compressedTexImage2D(e, t, i, r, s, o, x, n, a)
                  : ga.compressedTexImage2D(
                      e,
                      t,
                      i,
                      r,
                      s,
                      o,
                      n ? x.subarray(n, n + a) : null
                    );
              }
              var er = Qi;
              function tr() {
                var e = ei.getNewId(ei.programs),
                  t = ga.createProgram();
                return (
                  (t.name = e),
                  (t.maxUniformLength =
                    t.maxAttributeLength =
                    t.maxUniformBlockNameLength =
                      0),
                  (t.uniformIdCounter = 1),
                  (ei.programs[e] = t),
                  e
                );
              }
              var ir = tr;
              function rr(e) {
                var t = ei.getNewId(ei.shaders);
                return (ei.shaders[t] = ga.createShader(e)), t;
              }
              var sr = rr;
              function or(e) {
                ga.cullFace(e);
              }
              var ar = or;
              function nr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.buffers[r];
                  s &&
                    (ga.deleteBuffer(s),
                    (s.name = 0),
                    (ei.buffers[r] = null),
                    r == ga.currentPixelPackBufferBinding &&
                      (ga.currentPixelPackBufferBinding = 0),
                    r == ga.currentPixelUnpackBufferBinding &&
                      (ga.currentPixelUnpackBufferBinding = 0));
                }
              }
              var lr = nr;
              function dr(e, t) {
                for (var i = 0; i < e; ++i) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.framebuffers[r];
                  s &&
                    (ga.deleteFramebuffer(s),
                    (s.name = 0),
                    (ei.framebuffers[r] = null));
                }
              }
              var hr = dr;
              function ur(e) {
                if (e) {
                  var t = ei.programs[e];
                  t
                    ? (ga.deleteProgram(t),
                      (t.name = 0),
                      (ei.programs[e] = null))
                    : ei.recordError(1281);
                }
              }
              var cr = ur;
              function pr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.renderbuffers[r];
                  s &&
                    (ga.deleteRenderbuffer(s),
                    (s.name = 0),
                    (ei.renderbuffers[r] = null));
                }
              }
              var gr = pr;
              function yr(e) {
                if (e) {
                  var t = ei.shaders[e];
                  t
                    ? (ga.deleteShader(t), (ei.shaders[e] = null))
                    : ei.recordError(1281);
                }
              }
              var fr = yr;
              function vr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.textures[r];
                  s &&
                    (ga.deleteTexture(s),
                    (s.name = 0),
                    (ei.textures[r] = null));
                }
              }
              var mr = vr;
              function Sr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2];
                  ga.deleteVertexArray(ei.vaos[r]), (ei.vaos[r] = null);
                }
              }
              var Pr = Sr,
                Cr = Sr;
              function xr(e) {
                ga.depthFunc(e);
              }
              var br = xr;
              function Ar(e) {
                ga.depthMask(!!e);
              }
              var Tr = Ar;
              function Er(e, t) {
                ga.detachShader(ei.programs[e], ei.shaders[t]);
              }
              var Rr = Er;
              function wr(e) {
                ga.disable(e);
              }
              var Dr = wr;
              function Lr(e, t, i) {
                ga.drawArrays(e, t, i);
              }
              var Mr = Lr;
              function Ir(e, t, i, r) {
                ga.drawArraysInstanced(e, t, i, r);
              }
              var Or = Ir,
                kr = Ir,
                _r = Ir,
                Vr = Ir,
                Nr = Ir,
                Fr = [];
              function Br(e, t) {
                for (var i = Fr[e], r = 0; r < e; r++)
                  i[r] = T[(t + 4 * r) >> 2];
                ga.drawBuffers(i);
              }
              var Hr = Br,
                zr = Br,
                Yr = Br;
              function Gr(e, t, i, r) {
                ga.drawElements(e, t, i, r);
              }
              var Xr = Gr;
              function jr(e, t, i, r, s) {
                ga.drawElementsInstanced(e, t, i, r, s);
              }
              var Wr = jr,
                Ur = jr,
                $r = jr,
                qr = jr,
                Kr = jr;
              function Zr(e) {
                ga.enable(e);
              }
              var Jr = Zr;
              function Qr(e) {
                ga.enableVertexAttribArray(e);
              }
              var es = Qr;
              function ts(e, t, i, r, s) {
                ga.framebufferTexture2D(e, t, i, ei.textures[r], s);
              }
              var is = ts;
              function rs(e) {
                ga.frontFace(e);
              }
              var ss = rs;
              function os(e, t, i, r) {
                for (var s = 0; s < e; s++) {
                  var o = ga[i](),
                    a = o && ei.getNewId(r);
                  o ? ((o.name = a), (r[a] = o)) : ei.recordError(1282),
                    (T[(t + 4 * s) >> 2] = a);
                }
              }
              function as(e, t) {
                os(e, t, "createBuffer", ei.buffers);
              }
              var ns = as;
              function ls(e, t) {
                os(e, t, "createFramebuffer", ei.framebuffers);
              }
              var ds = ls;
              function hs(e, t) {
                os(e, t, "createTexture", ei.textures);
              }
              var us = hs;
              function cs(e, t) {
                os(e, t, "createVertexArray", ei.vaos);
              }
              var ps = cs,
                gs = cs;
              function ys(e) {
                ga.generateMipmap(e);
              }
              var fs = ys;
              function vs(e, t, i, r, s, o, a, n) {
                t = ei.programs[t];
                var l = ga[e](t, i);
                if (l) {
                  var d = n && wt(l.name, n, r);
                  s && (T[s >> 2] = d),
                    o && (T[o >> 2] = l.size),
                    a && (T[a >> 2] = l.type);
                }
              }
              function ms(e, t, i, r, s, o, a) {
                vs("getActiveAttrib", e, t, i, r, s, o, a);
              }
              var Ss = ms;
              function Ps(e, t, i, r, s, o, a) {
                vs("getActiveUniform", e, t, i, r, s, o, a);
              }
              var Cs = Ps;
              function xs(e, t) {
                (E[e >> 2] = t),
                  (E[(e + 4) >> 2] = (t - E[e >> 2]) / 4294967296);
              }
              function bs(e, t, i) {
                if (t) {
                  var r = void 0;
                  switch (e) {
                    case 36346:
                      r = 1;
                      break;
                    case 36344:
                      return void (0 != i && 1 != i && ei.recordError(1280));
                    case 34814:
                    case 36345:
                      r = 0;
                      break;
                    case 34466:
                      var s = ga.getParameter(34467);
                      r = s ? s.length : 0;
                      break;
                    case 33309:
                      if (ei.currentContext.version < 2)
                        return void ei.recordError(1282);
                      r = 2 * (ga.getSupportedExtensions() || []).length;
                      break;
                    case 33307:
                    case 33308:
                      if (ei.currentContext.version < 2)
                        return void ei.recordError(1280);
                      r = 33307 == e ? 3 : 0;
                  }
                  if (void 0 === r) {
                    var o = ga.getParameter(e);
                    switch (typeof o) {
                      case "number":
                        r = o;
                        break;
                      case "boolean":
                        r = o ? 1 : 0;
                        break;
                      case "string":
                        return void ei.recordError(1280);
                      case "object":
                        if (null === o)
                          switch (e) {
                            case 34964:
                            case 35725:
                            case 34965:
                            case 36006:
                            case 36007:
                            case 32873:
                            case 34229:
                            case 36662:
                            case 36663:
                            case 35053:
                            case 35055:
                            case 36010:
                            case 35097:
                            case 35869:
                            case 32874:
                            case 36389:
                            case 35983:
                            case 35368:
                            case 34068:
                              r = 0;
                              break;
                            default:
                              return void ei.recordError(1280);
                          }
                        else {
                          if (
                            o instanceof Float32Array ||
                            o instanceof Uint32Array ||
                            o instanceof Int32Array ||
                            o instanceof Array
                          ) {
                            for (var a = 0; a < o.length; ++a)
                              switch (i) {
                                case 0:
                                  T[(t + 4 * a) >> 2] = o[a];
                                  break;
                                case 2:
                                  R[(t + 4 * a) >> 2] = o[a];
                                  break;
                                case 4:
                                  C[(t + a) >> 0] = o[a] ? 1 : 0;
                              }
                            return;
                          }
                          try {
                            r = 0 | o.name;
                          } catch (t) {
                            return (
                              ei.recordError(1280),
                              void v(
                                "GL_INVALID_ENUM in glGet" +
                                  i +
                                  "v: Unknown object returned from WebGL getParameter(" +
                                  e +
                                  ")! (error: " +
                                  t +
                                  ")"
                              )
                            );
                          }
                        }
                        break;
                      default:
                        return (
                          ei.recordError(1280),
                          void v(
                            "GL_INVALID_ENUM in glGet" +
                              i +
                              "v: Native code calling glGet" +
                              i +
                              "v(" +
                              e +
                              ") and it returns " +
                              o +
                              " of type " +
                              typeof o +
                              "!"
                          )
                        );
                    }
                  }
                  switch (i) {
                    case 1:
                      xs(t, r);
                      break;
                    case 0:
                      T[t >> 2] = r;
                      break;
                    case 2:
                      R[t >> 2] = r;
                      break;
                    case 4:
                      C[t >> 0] = r ? 1 : 0;
                  }
                } else ei.recordError(1281);
              }
              function As(e, t, i, r) {
                if (i) {
                  var s,
                    o = ga.getIndexedParameter(e, t);
                  switch (typeof o) {
                    case "boolean":
                      s = o ? 1 : 0;
                      break;
                    case "number":
                      s = o;
                      break;
                    case "object":
                      if (null === o)
                        switch (e) {
                          case 35983:
                          case 35368:
                            s = 0;
                            break;
                          default:
                            return void ei.recordError(1280);
                        }
                      else {
                        if (!(o instanceof WebGLBuffer))
                          return void ei.recordError(1280);
                        s = 0 | o.name;
                      }
                      break;
                    default:
                      return void ei.recordError(1280);
                  }
                  switch (r) {
                    case 1:
                      xs(i, s);
                      break;
                    case 0:
                      T[i >> 2] = s;
                      break;
                    case 2:
                      R[i >> 2] = s;
                      break;
                    case 4:
                      C[i >> 0] = s ? 1 : 0;
                      break;
                    default:
                      throw (
                        "internal emscriptenWebGLGetIndexed() error, bad type: " +
                        r
                      );
                  }
                } else ei.recordError(1281);
              }
              function Ts(e, t) {
                bs(e, t, 0);
              }
              var Es = Ts;
              function Rs(e, t, i, r) {
                var s = ga.getProgramInfoLog(ei.programs[e]);
                null === s && (s = "(unknown error)");
                var o = t > 0 && r ? wt(s, r, t) : 0;
                i && (T[i >> 2] = o);
              }
              var ws = Rs;
              function Ds(e, t, i) {
                if (i)
                  if (e >= ei.counter) ei.recordError(1281);
                  else if (((e = ei.programs[e]), 35716 == t)) {
                    var r = ga.getProgramInfoLog(e);
                    null === r && (r = "(unknown error)"),
                      (T[i >> 2] = r.length + 1);
                  } else if (35719 == t) {
                    if (!e.maxUniformLength)
                      for (var s = 0; s < ga.getProgramParameter(e, 35718); ++s)
                        e.maxUniformLength = Math.max(
                          e.maxUniformLength,
                          ga.getActiveUniform(e, s).name.length + 1
                        );
                    T[i >> 2] = e.maxUniformLength;
                  } else if (35722 == t) {
                    if (!e.maxAttributeLength)
                      for (s = 0; s < ga.getProgramParameter(e, 35721); ++s)
                        e.maxAttributeLength = Math.max(
                          e.maxAttributeLength,
                          ga.getActiveAttrib(e, s).name.length + 1
                        );
                    T[i >> 2] = e.maxAttributeLength;
                  } else if (35381 == t) {
                    if (!e.maxUniformBlockNameLength)
                      for (s = 0; s < ga.getProgramParameter(e, 35382); ++s)
                        e.maxUniformBlockNameLength = Math.max(
                          e.maxUniformBlockNameLength,
                          ga.getActiveUniformBlockName(e, s).length + 1
                        );
                    T[i >> 2] = e.maxUniformBlockNameLength;
                  } else T[i >> 2] = ga.getProgramParameter(e, t);
                else ei.recordError(1281);
              }
              var Ls = Ds;
              function Ms(e, t, i) {
                if (i) {
                  var r,
                    s = ei.queries[e];
                  xs(
                    i,
                    "boolean" ==
                      typeof (r =
                        ei.currentContext.version < 2
                          ? ga.disjointTimerQueryExt.getQueryObjectEXT(s, t)
                          : ga.getQueryParameter(s, t))
                      ? r
                        ? 1
                        : 0
                      : r
                  );
                } else ei.recordError(1281);
              }
              var Is = Ms;
              function Os(e, t, i) {
                if (i) {
                  var r,
                    s = ei.queries[e],
                    o = ga.disjointTimerQueryExt.getQueryObjectEXT(s, t);
                  (r = "boolean" == typeof o ? (o ? 1 : 0) : o),
                    (T[i >> 2] = r);
                } else ei.recordError(1281);
              }
              var ks = Os,
                _s = Ms,
                Vs = Os;
              function Ns(e, t, i, r) {
                var s = ga.getShaderInfoLog(ei.shaders[e]);
                null === s && (s = "(unknown error)");
                var o = t > 0 && r ? wt(s, r, t) : 0;
                i && (T[i >> 2] = o);
              }
              var Fs = Ns;
              function Bs(e, t, i) {
                if (i)
                  if (35716 == t) {
                    var r = ga.getShaderInfoLog(ei.shaders[e]);
                    null === r && (r = "(unknown error)");
                    var s = r ? r.length + 1 : 0;
                    T[i >> 2] = s;
                  } else if (35720 == t) {
                    var o = ga.getShaderSource(ei.shaders[e]),
                      a = o ? o.length + 1 : 0;
                    T[i >> 2] = a;
                  } else T[i >> 2] = ga.getShaderParameter(ei.shaders[e], t);
                else ei.recordError(1281);
              }
              var Hs = Bs;
              function zs(e) {
                var t = ei.stringCache[e];
                if (!t) {
                  switch (e) {
                    case 7939:
                      var i = ga.getSupportedExtensions() || [];
                      t = Xt(
                        (i = i.concat(
                          i.map(function (e) {
                            return "GL_" + e;
                          })
                        )).join(" ")
                      );
                      break;
                    case 7936:
                    case 7937:
                    case 37445:
                    case 37446:
                      var r = ga.getParameter(e);
                      r || ei.recordError(1280), (t = r && Xt(r));
                      break;
                    case 7938:
                      var s = ga.getParameter(7938);
                      t = Xt(
                        (s =
                          ei.currentContext.version >= 2
                            ? "OpenGL ES 3.0 (" + s + ")"
                            : "OpenGL ES 2.0 (" + s + ")")
                      );
                      break;
                    case 35724:
                      var o = ga.getParameter(35724),
                        a = o.match(
                          /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/
                        );
                      null !== a &&
                        (3 == a[1].length && (a[1] = a[1] + "0"),
                        (o = "OpenGL ES GLSL ES " + a[1] + " (" + o + ")")),
                        (t = Xt(o));
                      break;
                    default:
                      ei.recordError(1280);
                  }
                  ei.stringCache[e] = t;
                }
                return t;
              }
              var Ys = zs;
              function Gs(e) {
                return "]" == e.slice(-1) && e.lastIndexOf("[");
              }
              function Xs(e) {
                var t,
                  i,
                  r = e.uniformLocsById,
                  s = e.uniformSizeAndIdsByName;
                if (!r)
                  for (
                    e.uniformLocsById = r = {},
                      e.uniformArrayNamesById = {},
                      t = 0;
                    t < ga.getProgramParameter(e, 35718);
                    ++t
                  ) {
                    var o = ga.getActiveUniform(e, t),
                      a = o.name,
                      n = o.size,
                      l = Gs(a),
                      d = l > 0 ? a.slice(0, l) : a,
                      h = e.uniformIdCounter;
                    for (
                      e.uniformIdCounter += n, s[d] = [n, h], i = 0;
                      i < n;
                      ++i
                    )
                      (r[h] = i), (e.uniformArrayNamesById[h++] = d);
                  }
              }
              function js(e, t) {
                if (((t = Ce(t)), (e = ei.programs[e]))) {
                  Xs(e);
                  var i = e.uniformLocsById,
                    r = 0,
                    s = t,
                    o = Gs(t);
                  o > 0 &&
                    ((n = t.slice(o + 1)),
                    (r = parseInt(n) >>> 0),
                    (s = t.slice(0, o)));
                  var a = e.uniformSizeAndIdsByName[s];
                  if (
                    a &&
                    r < a[0] &&
                    (i[(r += a[1])] = i[r] || ga.getUniformLocation(e, t))
                  )
                    return r;
                } else ei.recordError(1281);
                var n;
                return -1;
              }
              var Ws = js;
              function Us(e) {
                var t = ga.currentProgram;
                if (t) {
                  var i = t.uniformLocsById[e];
                  return (
                    "number" == typeof i &&
                      (t.uniformLocsById[e] = i =
                        ga.getUniformLocation(
                          t,
                          t.uniformArrayNamesById[e] +
                            (i > 0 ? "[" + i + "]" : "")
                        )),
                    i
                  );
                }
                ei.recordError(1282);
              }
              function $s(e, t, i, r) {
                if (i) {
                  Xs((e = ei.programs[e]));
                  var s = ga.getUniform(e, Us(t));
                  if ("number" == typeof s || "boolean" == typeof s)
                    switch (r) {
                      case 0:
                        T[i >> 2] = s;
                        break;
                      case 2:
                        R[i >> 2] = s;
                    }
                  else
                    for (var o = 0; o < s.length; o++)
                      switch (r) {
                        case 0:
                          T[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 2:
                          R[(i + 4 * o) >> 2] = s[o];
                      }
                } else ei.recordError(1281);
              }
              function qs(e, t, i, r) {
                if (i) {
                  var s = ga.getVertexAttrib(e, t);
                  if (34975 == t) T[i >> 2] = s && s.name;
                  else if ("number" == typeof s || "boolean" == typeof s)
                    switch (r) {
                      case 0:
                        T[i >> 2] = s;
                        break;
                      case 2:
                        R[i >> 2] = s;
                        break;
                      case 5:
                        T[i >> 2] = Math.fround(s);
                    }
                  else
                    for (var o = 0; o < s.length; o++)
                      switch (r) {
                        case 0:
                          T[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 2:
                          R[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 5:
                          T[(i + 4 * o) >> 2] = Math.fround(s[o]);
                      }
                } else ei.recordError(1281);
              }
              function Ks(e, t, i) {
                qs(e, t, i, 0);
              }
              var Zs = Ks,
                Js = Ks;
              function Qs(e) {
                var t = ei.vaos[e];
                return t ? ga.isVertexArray(t) : 0;
              }
              var eo = Qs,
                to = Qs;
              function io(e) {
                ga.lineWidth(e);
              }
              var ro = io;
              function so(e) {
                (e = ei.programs[e]),
                  ga.linkProgram(e),
                  (e.uniformLocsById = 0),
                  (e.uniformSizeAndIdsByName = {});
              }
              var oo = so;
              function ao(e, t) {
                3317 == e && (ei.unpackAlignment = t), ga.pixelStorei(e, t);
              }
              var no = ao;
              function lo(e) {
                return 0 == (e -= 5120)
                  ? C
                  : 1 == e
                  ? x
                  : 2 == e
                  ? b
                  : 4 == e
                  ? T
                  : 6 == e
                  ? R
                  : 5 == e ||
                    28922 == e ||
                    28520 == e ||
                    30779 == e ||
                    30782 == e
                  ? E
                  : A;
              }
              function ho(e) {
                return 31 - Math.clz32(e.BYTES_PER_ELEMENT);
              }
              function uo(e, t, i, r, s, o) {
                var a = lo(e),
                  n = ho(a),
                  l = 1 << n,
                  d =
                    (function (e) {
                      return (
                        {
                          5: 3,
                          6: 4,
                          8: 2,
                          29502: 3,
                          29504: 4,
                          26917: 2,
                          26918: 2,
                          29846: 3,
                          29847: 4,
                        }[e - 6402] || 1
                      );
                    })(t) * l,
                  h = (function (e, t, i, r) {
                    var s;
                    return t * ((e * i + (s = r) - 1) & -s);
                  })(i, r, d, ei.unpackAlignment);
                return a.subarray(s >> n, (s + h) >> n);
              }
              function co(e, t, i, r, s, o, a) {
                if (ei.currentContext.version >= 2)
                  if (ga.currentPixelPackBufferBinding)
                    ga.readPixels(e, t, i, r, s, o, a);
                  else {
                    var n = lo(o);
                    ga.readPixels(e, t, i, r, s, o, n, a >> ho(n));
                  }
                else {
                  var l = uo(o, s, i, r, a);
                  l ? ga.readPixels(e, t, i, r, s, o, l) : ei.recordError(1280);
                }
              }
              var po = co;
              function go(e, t, i, r) {
                ga.scissor(e, t, i, r);
              }
              var yo = go;
              function fo(e, t, i, r) {
                var s = ei.getSource(e, t, i, r);
                ga.shaderSource(ei.shaders[e], s);
              }
              var vo = fo;
              function mo(e, t, i, r, s, o, a, n, l) {
                if (ei.currentContext.version >= 2)
                  if (ga.currentPixelUnpackBufferBinding)
                    ga.texImage2D(e, t, i, r, s, o, a, n, l);
                  else if (l) {
                    var d = lo(n);
                    ga.texImage2D(e, t, i, r, s, o, a, n, d, l >> ho(d));
                  } else ga.texImage2D(e, t, i, r, s, o, a, n, null);
                else
                  ga.texImage2D(
                    e,
                    t,
                    i,
                    r,
                    s,
                    o,
                    a,
                    n,
                    l ? uo(n, a, r, s, l) : null
                  );
              }
              var So = mo;
              function Po(e, t, i) {
                ga.texParameteri(e, t, i);
              }
              var Co = Po,
                xo = [];
              function bo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform1fv(Us(e), R, i >> 2, t);
                else {
                  if (t <= 288)
                    for (var r = xo[t - 1], s = 0; s < t; ++s)
                      r[s] = R[(i + 4 * s) >> 2];
                  else r = R.subarray(i >> 2, (i + 4 * t) >> 2);
                  ga.uniform1fv(Us(e), r);
                }
              }
              var Ao = bo;
              function To(e, t) {
                ga.uniform1i(Us(e), t);
              }
              var Eo = To,
                Ro = [];
              function wo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform2fv(Us(e), R, i >> 2, 2 * t);
                else {
                  if (t <= 144)
                    for (var r = xo[2 * t - 1], s = 0; s < 2 * t; s += 2)
                      (r[s] = R[(i + 4 * s) >> 2]),
                        (r[s + 1] = R[(i + (4 * s + 4)) >> 2]);
                  else r = R.subarray(i >> 2, (i + 8 * t) >> 2);
                  ga.uniform2fv(Us(e), r);
                }
              }
              var Do = wo;
              function Lo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform3fv(Us(e), R, i >> 2, 3 * t);
                else {
                  if (t <= 96)
                    for (var r = xo[3 * t - 1], s = 0; s < 3 * t; s += 3)
                      (r[s] = R[(i + 4 * s) >> 2]),
                        (r[s + 1] = R[(i + (4 * s + 4)) >> 2]),
                        (r[s + 2] = R[(i + (4 * s + 8)) >> 2]);
                  else r = R.subarray(i >> 2, (i + 12 * t) >> 2);
                  ga.uniform3fv(Us(e), r);
                }
              }
              var Mo = Lo;
              function Io(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform4fv(Us(e), R, i >> 2, 4 * t);
                else {
                  if (t <= 72) {
                    var r = xo[4 * t - 1],
                      s = R;
                    i >>= 2;
                    for (var o = 0; o < 4 * t; o += 4) {
                      var a = i + o;
                      (r[o] = s[a]),
                        (r[o + 1] = s[a + 1]),
                        (r[o + 2] = s[a + 2]),
                        (r[o + 3] = s[a + 3]);
                    }
                  } else r = R.subarray(i >> 2, (i + 16 * t) >> 2);
                  ga.uniform4fv(Us(e), r);
                }
              }
              var Oo = Io;
              function ko(e, t, i, r) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniformMatrix4fv(Us(e), !!i, R, r >> 2, 16 * t);
                else {
                  if (t <= 18) {
                    var s = xo[16 * t - 1],
                      o = R;
                    r >>= 2;
                    for (var a = 0; a < 16 * t; a += 16) {
                      var n = r + a;
                      (s[a] = o[n]),
                        (s[a + 1] = o[n + 1]),
                        (s[a + 2] = o[n + 2]),
                        (s[a + 3] = o[n + 3]),
                        (s[a + 4] = o[n + 4]),
                        (s[a + 5] = o[n + 5]),
                        (s[a + 6] = o[n + 6]),
                        (s[a + 7] = o[n + 7]),
                        (s[a + 8] = o[n + 8]),
                        (s[a + 9] = o[n + 9]),
                        (s[a + 10] = o[n + 10]),
                        (s[a + 11] = o[n + 11]),
                        (s[a + 12] = o[n + 12]),
                        (s[a + 13] = o[n + 13]),
                        (s[a + 14] = o[n + 14]),
                        (s[a + 15] = o[n + 15]);
                    }
                  } else s = R.subarray(r >> 2, (r + 64 * t) >> 2);
                  ga.uniformMatrix4fv(Us(e), !!i, s);
                }
              }
              var _o = ko;
              function Vo(e) {
                (e = ei.programs[e]), ga.useProgram(e), (ga.currentProgram = e);
              }
              var No = Vo;
              function Fo(e, t) {
                ga.vertexAttribDivisor(e, t);
              }
              var Bo = Fo,
                Ho = Fo,
                zo = Fo,
                Yo = Fo,
                Go = Fo;
              function Xo(e, t, i, r, s, o) {
                ga.vertexAttribPointer(e, t, i, !!r, s, o);
              }
              var jo = Xo;
              function Wo(e, t, i, r) {
                ga.viewport(e, t, i, r);
              }
              var Uo = Wo;
              function $o(e) {
                var t = m.buffer;
                try {
                  return m.grow((e - t.byteLength + 65535) >>> 16), I(), 1;
                } catch (e) {}
              }
              function qo(e, t, i, r, s, o, a) {
                si.focusEvent || (si.focusEvent = xa(256));
                var n = {
                  target: li(e),
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.getNodeNameForTarget(e.target),
                      o = e.target.id ? e.target.id : "",
                      a = si.focusEvent;
                    wt(i, a + 0, 128),
                      wt(o, a + 128, 128),
                      re(r)(s, a, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Ko(e, t, i, r, s, o, a) {
                si.fullscreenChangeEvent ||
                  (si.fullscreenChangeEvent = xa(280));
                var n = {
                  target: e,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.fullscreenChangeEvent;
                    !(function (e) {
                      var t =
                          document.fullscreenElement ||
                          document.mozFullScreenElement ||
                          document.webkitFullscreenElement ||
                          document.msFullscreenElement,
                        i = !!t;
                      (T[e >> 2] = i),
                        (T[(e + 4) >> 2] = si.fullscreenEnabled());
                      var r = i ? t : si.previousFullscreenElement,
                        s = si.getNodeNameForTarget(r),
                        o = r && r.id ? r.id : "";
                      wt(s, e + 8, 128),
                        wt(o, e + 136, 128),
                        (T[(e + 264) >> 2] = r ? r.clientWidth : 0),
                        (T[(e + 268) >> 2] = r ? r.clientHeight : 0),
                        (T[(e + 272) >> 2] = screen.width),
                        (T[(e + 276) >> 2] = screen.height),
                        i && (si.previousFullscreenElement = t);
                    })(i),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Zo(e, t, i, r, s, o, a) {
                si.gamepadEvent || (si.gamepadEvent = xa(1432));
                var n = {
                  target: li(e),
                  allowsDeferredCalls: !0,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.gamepadEvent;
                    mi(i, e.gamepad), re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Jo(e, t, i, r, s, o, a) {
                si.keyEvent || (si.keyEvent = xa(176));
                var n = {
                  target: li(e),
                  allowsDeferredCalls: !0,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e) {
                    var i = si.keyEvent;
                    w[i >> 3] = e.timeStamp;
                    var o = i >> 2;
                    (T[o + 2] = e.location),
                      (T[o + 3] = e.ctrlKey),
                      (T[o + 4] = e.shiftKey),
                      (T[o + 5] = e.altKey),
                      (T[o + 6] = e.metaKey),
                      (T[o + 7] = e.repeat),
                      (T[o + 8] = e.charCode),
                      (T[o + 9] = e.keyCode),
                      (T[o + 10] = e.which),
                      wt(e.key || "", i + 44, 32),
                      wt(e.code || "", i + 76, 32),
                      wt(e.char || "", i + 108, 32),
                      wt(e.locale || "", i + 140, 32),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Qo(e, t, i) {
                w[e >> 3] = t.timeStamp;
                var r = e >> 2;
                (T[r + 2] = t.screenX),
                  (T[r + 3] = t.screenY),
                  (T[r + 4] = t.clientX),
                  (T[r + 5] = t.clientY),
                  (T[r + 6] = t.ctrlKey),
                  (T[r + 7] = t.shiftKey),
                  (T[r + 8] = t.altKey),
                  (T[r + 9] = t.metaKey),
                  (b[2 * r + 20] = t.button),
                  (b[2 * r + 21] = t.buttons),
                  (T[r + 11] = t.movementX),
                  (T[r + 12] = t.movementY);
                var s = yi(i);
                (T[r + 13] = t.clientX - s.left),
                  (T[r + 14] = t.clientY - s.top);
              }
              function ea(e, t, i, r, s, o, a) {
                si.mouseEvent || (si.mouseEvent = xa(72));
                var n = {
                  target: (e = li(e)),
                  allowsDeferredCalls:
                    "mousemove" != o && "mouseenter" != o && "mouseleave" != o,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (i = event) {
                    Qo(si.mouseEvent, i, e),
                      re(r)(s, si.mouseEvent, t) && i.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function ta(e, t, i, r, s, o, a) {
                si.pointerlockChangeEvent ||
                  (si.pointerlockChangeEvent = xa(260));
                var n = {
                  target: e,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.pointerlockChangeEvent;
                    !(function (e) {
                      var t =
                          document.pointerLockElement ||
                          document.mozPointerLockElement ||
                          document.webkitPointerLockElement ||
                          document.msPointerLockElement,
                        i = !!t;
                      T[e >> 2] = i;
                      var r = si.getNodeNameForTarget(t),
                        s = t && t.id ? t.id : "";
                      wt(r, e + 4, 128), wt(s, e + 132, 128);
                    })(i),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function ia(e, t, i, r, s, o, a) {
                si.touchEvent || (si.touchEvent = xa(1696));
                var n = {
                  target: (e = li(e)),
                  allowsDeferredCalls: "touchstart" == o || "touchend" == o,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (i) {
                    for (var o, a = {}, n = i.touches, l = 0; l < n.length; ++l)
                      ((o = n[l]).isChanged = o.onTarget = 0),
                        (a[o.identifier] = o);
                    for (l = 0; l < i.changedTouches.length; ++l)
                      ((o = i.changedTouches[l]).isChanged = 1),
                        (a[o.identifier] = o);
                    for (l = 0; l < i.targetTouches.length; ++l)
                      a[i.targetTouches[l].identifier].onTarget = 1;
                    var d = si.touchEvent;
                    w[d >> 3] = i.timeStamp;
                    var h = d >> 2;
                    (T[h + 3] = i.ctrlKey),
                      (T[h + 4] = i.shiftKey),
                      (T[h + 5] = i.altKey),
                      (T[h + 6] = i.metaKey),
                      (h += 7);
                    var u = yi(e),
                      c = 0;
                    for (var l in a)
                      if (
                        ((o = a[l]),
                        (T[h + 0] = o.identifier),
                        (T[h + 1] = o.screenX),
                        (T[h + 2] = o.screenY),
                        (T[h + 3] = o.clientX),
                        (T[h + 4] = o.clientY),
                        (T[h + 5] = o.pageX),
                        (T[h + 6] = o.pageY),
                        (T[h + 7] = o.isChanged),
                        (T[h + 8] = o.onTarget),
                        (T[h + 9] = o.clientX - u.left),
                        (T[h + 10] = o.clientY - u.top),
                        (h += 13),
                        ++c > 31)
                      )
                        break;
                    (T[(d + 8) >> 2] = c), re(r)(s, d, t) && i.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              var ra = {
                openDatabase: function (e, t, i, r) {
                  try {
                    var s = indexedDB.open(e, t);
                  } catch (e) {
                    return r(e);
                  }
                  (s.onupgradeneeded = (e) => {
                    var t = e.target.result;
                    t.objectStoreNames.contains("FILES") &&
                      t.deleteObjectStore("FILES"),
                      t.createObjectStore("FILES");
                  }),
                    (s.onsuccess = (e) => i(e.target.result)),
                    (s.onerror = (e) => r(e));
                },
                init: function () {
                  (ra.xhrs = new Re()),
                    G(),
                    ra.openDatabase(
                      "emscripten_filesystem",
                      1,
                      (e) => {
                        (ra.dbInstance = e), X();
                      },
                      () => {
                        (ra.dbInstance = !1), X();
                      }
                    );
                },
              };
              function sa(e, t, i, r, s) {
                var o = E[(e + 8) >> 2];
                if (o) {
                  var a = Ce(o),
                    n = e + 112,
                    l = Ce(n + 0);
                  l || (l = "GET");
                  var d = E[(n + 56) >> 2],
                    h = E[(n + 68) >> 2],
                    u = E[(n + 72) >> 2],
                    c = E[(n + 76) >> 2],
                    p = E[(n + 80) >> 2],
                    g = E[(n + 84) >> 2],
                    y = E[(n + 88) >> 2],
                    f = E[(n + 52) >> 2],
                    v = !!(1 & f),
                    m = !!(2 & f),
                    S = !!(64 & f),
                    P = h ? Ce(h) : void 0,
                    C = u ? Ce(u) : void 0,
                    b = new XMLHttpRequest();
                  if (
                    ((b.withCredentials = !!x[(n + 60) >> 0]),
                    b.open(l, a, !S, P, C),
                    S || (b.timeout = d),
                    (b.url_ = a),
                    (b.responseType = "arraybuffer"),
                    p)
                  ) {
                    var T = Ce(p);
                    b.overrideMimeType(T);
                  }
                  if (c)
                    for (;;) {
                      var R = E[c >> 2];
                      if (!R) break;
                      var w = E[(c + 4) >> 2];
                      if (!w) break;
                      c += 8;
                      var D = Ce(R),
                        L = Ce(w);
                      b.setRequestHeader(D, L);
                    }
                  var M = ra.xhrs.allocate(b);
                  E[e >> 2] = M;
                  var I = g && y ? x.slice(g, g + y) : null;
                  (b.onload = (r) => {
                    ra.xhrs.has(M) &&
                      (O(),
                      b.status >= 200 && b.status < 300
                        ? t && t(e, b, r)
                        : i && i(e, b, r));
                  }),
                    (b.onerror = (t) => {
                      ra.xhrs.has(M) && (O(), i && i(e, b, t));
                    }),
                    (b.ontimeout = (t) => {
                      ra.xhrs.has(M) && i && i(e, b, t);
                    }),
                    (b.onprogress = (t) => {
                      if (ra.xhrs.has(M)) {
                        var i =
                            v && m && b.response ? b.response.byteLength : 0,
                          s = 0;
                        i > 0 &&
                          v &&
                          m &&
                          ((s = xa(i)), x.set(new Uint8Array(b.response), s)),
                          (E[(e + 12) >> 2] = s),
                          xs(e + 16, i),
                          xs(e + 24, t.loaded - i),
                          xs(e + 32, t.total),
                          (A[(e + 40) >> 1] = b.readyState),
                          b.readyState >= 3 &&
                            0 === b.status &&
                            t.loaded > 0 &&
                            (b.status = 200),
                          (A[(e + 42) >> 1] = b.status),
                          b.statusText && wt(b.statusText, e + 44, 64),
                          r && r(e, b, t),
                          s && ba(s);
                      }
                    }),
                    (b.onreadystatechange = (t) => {
                      ra.xhrs.has(M) &&
                        ((A[(e + 40) >> 1] = b.readyState),
                        b.readyState >= 2 && (A[(e + 42) >> 1] = b.status),
                        s && s(e, b, t));
                    });
                  try {
                    b.send(I);
                  } catch (t) {
                    i && i(e, b, t);
                  }
                } else i(e, 0, "no url specified!");
                function O() {
                  var t = 0,
                    i = 0;
                  b.response &&
                    v &&
                    0 === E[(e + 12) >> 2] &&
                    (i = b.response.byteLength),
                    i > 0 &&
                      ((t = xa(i)), x.set(new Uint8Array(b.response), t)),
                    (E[(e + 12) >> 2] = t),
                    xs(e + 16, i),
                    xs(e + 24, 0);
                  var r = b.response ? b.response.byteLength : 0;
                  r && xs(e + 32, r),
                    (A[(e + 40) >> 1] = b.readyState),
                    (A[(e + 42) >> 1] = b.status),
                    b.statusText && wt(b.statusText, e + 44, 64);
                }
              }
              function oa(e, t, i, r, s) {
                if (e) {
                  var o = E[(t + 112 + 64) >> 2];
                  o || (o = E[(t + 8) >> 2]);
                  var a = Ce(o);
                  try {
                    var n = e
                      .transaction(["FILES"], "readwrite")
                      .objectStore("FILES")
                      .put(i, a);
                    (n.onsuccess = (e) => {
                      (A[(t + 40) >> 1] = 4),
                        (A[(t + 42) >> 1] = 200),
                        wt("OK", t + 44, 64),
                        r(t, 0, a);
                    }),
                      (n.onerror = (e) => {
                        (A[(t + 40) >> 1] = 4),
                          (A[(t + 42) >> 1] = 413),
                          wt("Payload Too Large", t + 44, 64),
                          s(t, 0, e);
                      });
                  } catch (e) {
                    s(t, 0, e);
                  }
                } else s(t, 0, "IndexedDB not available!");
              }
              var aa = {};
              function na() {
                if (!na.strings) {
                  var e = {
                    USER: "web_user",
                    LOGNAME: "web_user",
                    PATH: "/",
                    PWD: "/",
                    HOME: "/home/web_user",
                    LANG:
                      (
                        ("object" == typeof navigator &&
                          navigator.languages &&
                          navigator.languages[0]) ||
                        "C"
                      ).replace("-", "_") + ".UTF-8",
                    _: h || "./this.program",
                  };
                  for (var t in aa)
                    void 0 === aa[t] ? delete e[t] : (e[t] = aa[t]);
                  var i = [];
                  for (var t in e) i.push(`${t}=${e[t]}`);
                  na.strings = i;
                }
                return na.strings;
              }
              var la = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
                da = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
              function ha(e, t) {
                C.set(e, t);
              }
              function ua(t) {
                return e["_" + t];
              }
              function ca(e, t, i, r, s) {
                var o = {
                    string: (e) => {
                      var t = 0;
                      return null != e && 0 !== e && (t = hi(e)), t;
                    },
                    array: (e) => {
                      var t = La(e.length);
                      return ha(e, t), t;
                    },
                  },
                  a = ua(e),
                  n = [],
                  l = 0;
                if (r)
                  for (var d = 0; d < r.length; d++) {
                    var h = o[i[d]];
                    h
                      ? (0 === l && (l = wa()), (n[d] = h(r[d])))
                      : (n[d] = r[d]);
                  }
                var u = a.apply(null, n);
                return (function (e) {
                  return (
                    0 !== l && Da(l),
                    (function (e) {
                      return "string" === t
                        ? Ce(e)
                        : "boolean" === t
                        ? Boolean(e)
                        : e;
                    })(e)
                  );
                })(u);
              }
              var pa = function (e, t, i, r) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = Pe.nextInode++),
                  (this.name = t),
                  (this.mode = i),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = r);
              };
              Object.defineProperties(pa.prototype, {
                read: {
                  get: function () {
                    return 365 == (365 & this.mode);
                  },
                  set: function (e) {
                    e ? (this.mode |= 365) : (this.mode &= -366);
                  },
                },
                write: {
                  get: function () {
                    return 146 == (146 & this.mode);
                  },
                  set: function (e) {
                    e ? (this.mode |= 146) : (this.mode &= -147);
                  },
                },
                isFolder: {
                  get: function () {
                    return Pe.isDir(this.mode);
                  },
                },
                isDevice: {
                  get: function () {
                    return Pe.isChrdev(this.mode);
                  },
                },
              }),
                (Pe.FSNode = pa),
                (Pe.createPreloadedFile = function (
                  e,
                  t,
                  i,
                  r,
                  s,
                  a,
                  n,
                  l,
                  d,
                  h
                ) {
                  var u = t ? de.resolve(ne.join2(e, t)) : e;
                  function c(i) {
                    function o(i) {
                      h && h(),
                        l || Pe.createDataFile(e, t, i, r, s, d),
                        a && a(),
                        X();
                    }
                    (function (e, t, i, r) {
                      void 0 !== Jt && Jt.init();
                      var s = !1;
                      return (
                        me.forEach(function (o) {
                          s ||
                            (o.canHandle(t) &&
                              (o.handle(e, t, i, r), (s = !0)));
                        }),
                        s
                      );
                    })(i, u, o, () => {
                      n && n(), X();
                    }) || o(i);
                  }
                  G(),
                    "string" == typeof i
                      ? (function (e, t, i, r) {
                          var s = `al ${e}`;
                          o(
                            e,
                            (t) => {
                              M(
                                t,
                                `Loading data file "${e}" failed (no arrayBuffer).`
                              ),
                                c(new Uint8Array(t)),
                                s && X();
                            },
                            (t) => {
                              if (!i) throw `Loading data file "${e}" failed.`;
                              i();
                            }
                          ),
                            s && G();
                        })(i, 0, n)
                      : c(i);
                }),
                Pe.staticInit(),
                (e.FS_createPath = Pe.createPath),
                (e.FS_createDataFile = Pe.createDataFile),
                (e.FS_createPreloadedFile = Pe.createPreloadedFile),
                (e.FS_unlink = Pe.unlink),
                (e.FS_createLazyFile = Pe.createLazyFile),
                (e.FS_createDevice = Pe.createDevice),
                (Le = e.BindingError = De(Error, "BindingError")),
                we.allocated.push(
                  { value: void 0 },
                  { value: null },
                  { value: !0 },
                  { value: !1 }
                ),
                (we.reserved = we.allocated.length),
                (e.count_emval_handles = function () {
                  for (var e = 0, t = we.reserved; t < we.allocated.length; ++t)
                    void 0 !== we.allocated[t] && ++e;
                  return e;
                }),
                (Oe = e.PureVirtualError = De(Error, "PureVirtualError")),
                (function () {
                  for (var e = new Array(256), t = 0; t < 256; ++t)
                    e[t] = String.fromCharCode(t);
                  ke = e;
                })(),
                (e.getInheritedInstanceCount = function () {
                  return Object.keys(Be).length;
                }),
                (e.getLiveInheritedInstances = function () {
                  var e = [];
                  for (var t in Be) Be.hasOwnProperty(t) && e.push(Be[t]);
                  return e;
                }),
                (e.flushPendingDeletes = Ne),
                (e.setDelayFunction = function (e) {
                  (Fe = e), Ve.length && Fe && Fe(Ne);
                }),
                (qe = e.InternalError = De(Error, "InternalError")),
                (ot.prototype.isAliasOf = function (e) {
                  if (!(this instanceof ot)) return !1;
                  if (!(e instanceof ot)) return !1;
                  for (
                    var t = this.$$.ptrType.registeredClass,
                      i = this.$$.ptr,
                      r = e.$$.ptrType.registeredClass,
                      s = e.$$.ptr;
                    t.baseClass;

                  )
                    (i = t.upcast(i)), (t = t.baseClass);
                  for (; r.baseClass; ) (s = r.upcast(s)), (r = r.baseClass);
                  return t === r && i === s;
                }),
                (ot.prototype.clone = function () {
                  if (
                    (this.$$.ptr || st(this), this.$$.preservePointerOnDelete)
                  )
                    return (this.$$.count.value += 1), this;
                  var e,
                    t = Je(
                      Object.create(Object.getPrototypeOf(this), {
                        $$: {
                          value:
                            ((e = this.$$),
                            {
                              count: e.count,
                              deleteScheduled: e.deleteScheduled,
                              preservePointerOnDelete:
                                e.preservePointerOnDelete,
                              ptr: e.ptr,
                              ptrType: e.ptrType,
                              smartPtr: e.smartPtr,
                              smartPtrType: e.smartPtrType,
                            }),
                        },
                      })
                    );
                  return (
                    (t.$$.count.value += 1), (t.$$.deleteScheduled = !1), t
                  );
                }),
                (ot.prototype.delete = function () {
                  this.$$.ptr || st(this),
                    this.$$.deleteScheduled &&
                      !this.$$.preservePointerOnDelete &&
                      Me("Object already scheduled for deletion"),
                    Xe(this),
                    We(this.$$),
                    this.$$.preservePointerOnDelete ||
                      ((this.$$.smartPtr = void 0), (this.$$.ptr = void 0));
                }),
                (ot.prototype.isDeleted = function () {
                  return !this.$$.ptr;
                }),
                (ot.prototype.deleteLater = function () {
                  return (
                    this.$$.ptr || st(this),
                    this.$$.deleteScheduled &&
                      !this.$$.preservePointerOnDelete &&
                      Me("Object already scheduled for deletion"),
                    Ve.push(this),
                    1 === Ve.length && Fe && Fe(Ne),
                    (this.$$.deleteScheduled = !0),
                    this
                  );
                }),
                (gt.prototype.getPointee = function (e) {
                  return this.rawGetPointee && (e = this.rawGetPointee(e)), e;
                }),
                (gt.prototype.destructor = function (e) {
                  this.rawDestructor && this.rawDestructor(e);
                }),
                (gt.prototype.argPackAdvance = 8),
                (gt.prototype.readValueFromPointer = pt),
                (gt.prototype.deleteObject = function (e) {
                  null !== e && e.delete();
                }),
                (gt.prototype.fromWireType = function (e) {
                  var t = this.getPointee(e);
                  if (!t) return this.destructor(e), null;
                  var i = (function (e, t) {
                    return (t = He(e, t)), Be[t];
                  })(this.registeredClass, t);
                  if (void 0 !== i) {
                    if (0 === i.$$.count.value)
                      return (i.$$.ptr = t), (i.$$.smartPtr = e), i.clone();
                    var r = i.clone();
                    return this.destructor(e), r;
                  }
                  function s() {
                    return this.isSmartPointer
                      ? Ze(this.registeredClass.instancePrototype, {
                          ptrType: this.pointeeType,
                          ptr: t,
                          smartPtrType: this,
                          smartPtr: e,
                        })
                      : Ze(this.registeredClass.instancePrototype, {
                          ptrType: this,
                          ptr: e,
                        });
                  }
                  var o,
                    a = this.registeredClass.getActualType(t),
                    n = $e[a];
                  if (!n) return s.call(this);
                  o = this.isConst ? n.constPointerType : n.pointerType;
                  var l = Ue(t, this.registeredClass, o.registeredClass);
                  return null === l
                    ? s.call(this)
                    : this.isSmartPointer
                    ? Ze(o.registeredClass.instancePrototype, {
                        ptrType: o,
                        ptr: l,
                        smartPtrType: this,
                        smartPtr: e,
                      })
                    : Ze(o.registeredClass.instancePrototype, {
                        ptrType: o,
                        ptr: l,
                      });
                }),
                (vt = e.UnboundTypeError = De(Error, "UnboundTypeError")),
                (e.requestFullscreen = function (e, t) {
                  Jt.requestFullscreen(e, t);
                }),
                (e.requestAnimationFrame = function (e) {
                  Jt.requestAnimationFrame(e);
                }),
                (e.setCanvasSize = function (e, t, i) {
                  Jt.setCanvasSize(e, t, i);
                }),
                (e.pauseMainLoop = function () {
                  Jt.mainLoop.pause();
                }),
                (e.resumeMainLoop = function () {
                  Jt.mainLoop.resume();
                }),
                (e.getUserMedia = function () {
                  Jt.getUserMedia();
                }),
                (e.createContext = function (e, t, i, r) {
                  return Jt.createContext(e, t, i, r);
                });
              for (var ga, ya = {}, fa = {}, va = 0; va < 32; ++va)
                Fr.push(new Array(va));
              var ma = new Float32Array(288);
              for (va = 0; va < 288; ++va) xo[va] = ma.subarray(0, va + 1);
              var Sa = new Int32Array(288);
              for (va = 0; va < 288; ++va) Ro[va] = Sa.subarray(0, va + 1);
              ra.init();
              var Pa,
                Ca = {
                  g: function (e, t, i) {
                    throw (new ae(e).init(t, i), e);
                  },
                  ga: function (e, t, i) {
                    xe.varargs = i;
                    try {
                      var r = xe.getStreamFromFD(e);
                      switch (t) {
                        case 0:
                          return (s = xe.get()) < 0
                            ? -28
                            : Pe.createStream(r, s).fd;
                        case 1:
                        case 2:
                        case 6:
                        case 7:
                          return 0;
                        case 3:
                          return r.flags;
                        case 4:
                          var s = xe.get();
                          return (r.flags |= s), 0;
                        case 5:
                          return (s = xe.get()), (b[(s + 0) >> 1] = 2), 0;
                        case 16:
                        case 8:
                        default:
                          return -28;
                        case 9:
                          return 28, (T[Aa() >> 2] = 28), -1;
                      }
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  rb: function (e, t, i) {
                    xe.varargs = i;
                    try {
                      var r = xe.getStreamFromFD(e);
                      switch (t) {
                        case 21509:
                        case 21505:
                        case 21510:
                        case 21511:
                        case 21512:
                        case 21506:
                        case 21507:
                        case 21508:
                        case 21523:
                        case 21524:
                          return r.tty ? 0 : -59;
                        case 21519:
                          if (!r.tty) return -59;
                          var s = xe.get();
                          return (T[s >> 2] = 0), 0;
                        case 21520:
                          return r.tty ? -28 : -59;
                        case 21531:
                          return (s = xe.get()), Pe.ioctl(r, t, s);
                        default:
                          return -28;
                      }
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  sb: function (e, t, i, r) {
                    xe.varargs = r;
                    try {
                      (t = xe.getStr(t)), (t = xe.calculateAt(e, t));
                      var s = r ? xe.get() : 0;
                      return Pe.open(t, i, s).fd;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  pb: function (e, t) {
                    try {
                      return (e = xe.getStr(e)), xe.doStat(Pe.stat, e, t);
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  Na: function (e, t, i) {
                    (e = _e(e)), (t = Ge(t, "wrapper")), (i = Ie.toValue(i));
                    var r = [].slice,
                      s = t.registeredClass,
                      o = s.instancePrototype,
                      a = s.baseClass.instancePrototype,
                      n = s.baseClass.constructor,
                      l = Ee(e, function () {
                        s.baseClass.pureVirtualFunctions.forEach(
                          function (e) {
                            if (this[e] === a[e])
                              throw new Oe(
                                `Pure virtual function ${e} must be implemented in JavaScript`
                              );
                          }.bind(this)
                        ),
                          Object.defineProperty(this, "__parent", { value: o }),
                          this.__construct.apply(this, r.call(arguments));
                      });
                    for (var d in ((o.__construct = function () {
                      this === o && Me("Pass correct 'this' to __construct");
                      var e = n.implement.apply(
                        void 0,
                        [this].concat(r.call(arguments))
                      );
                      Xe(e);
                      var t,
                        i = e.$$;
                      e.notifyOnDestruction(),
                        (i.preservePointerOnDelete = !0),
                        Object.defineProperties(this, { $$: { value: i } }),
                        Je(this),
                        (t = He(s, (t = i.ptr))),
                        Be.hasOwnProperty(t)
                          ? Me(`Tried to register registered instance: ${t}`)
                          : (Be[t] = this);
                    }),
                    (o.__destruct = function () {
                      var e;
                      this === o && Me("Pass correct 'this' to __destruct"),
                        Xe(this),
                        (e = He(s, (e = this.$$.ptr))),
                        Be.hasOwnProperty(e)
                          ? delete Be[e]
                          : Me(
                              `Tried to unregister unregistered instance: ${e}`
                            );
                    }),
                    (l.prototype = Object.create(o)),
                    i))
                      l.prototype[d] = i[d];
                    return Ie.toHandle(l);
                  },
                  gb: function (e, t, i, r, s) {},
                  Pg: function (e, t, i, r, s) {
                    var o = Qe(i);
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        return !!e;
                      },
                      toWireType: function (e, t) {
                        return t ? r : s;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: function (e) {
                        var r;
                        if (1 === i) r = C;
                        else if (2 === i) r = b;
                        else {
                          if (4 !== i)
                            throw new TypeError(
                              "Unknown boolean type size: " + t
                            );
                          r = T;
                        }
                        return this.fromWireType(r[e >> o]);
                      },
                      destructorFunction: null,
                    });
                  },
                  c: function (e, t, i, r, s, o, a, n, l, d, h, u, c) {
                    (h = _e(h)),
                      (o = ft(s, o)),
                      n && (n = ft(a, n)),
                      d && (d = ft(l, d)),
                      (c = ft(u, c));
                    var p = Te(h);
                    nt(p, function () {
                      mt(`Cannot construct ${h} due to unbound types`, [r]);
                    }),
                      it([e, t, i], r ? [r] : [], function (t) {
                        var i, s;
                        (t = t[0]),
                          (s = r
                            ? (i = t.registeredClass).instancePrototype
                            : ot.prototype);
                        var a = Ee(p, function () {
                            if (Object.getPrototypeOf(this) !== l)
                              throw new Le("Use 'new' to construct " + h);
                            if (void 0 === u.constructor_body)
                              throw new Le(
                                h + " has no accessible constructor"
                              );
                            var e = u.constructor_body[arguments.length];
                            if (void 0 === e)
                              throw new Le(
                                `Tried to invoke ctor of ${h} with invalid number of parameters (${
                                  arguments.length
                                }) - expected (${Object.keys(
                                  u.constructor_body
                                ).toString()}) parameters instead!`
                              );
                            return e.apply(this, arguments);
                          }),
                          l = Object.create(s, { constructor: { value: a } });
                        a.prototype = l;
                        var u = new lt(h, a, l, c, i, o, n, d);
                        u.baseClass &&
                          (void 0 === u.baseClass.__derivedClasses &&
                            (u.baseClass.__derivedClasses = []),
                          u.baseClass.__derivedClasses.push(u));
                        var g = new gt(h, u, !0, !1, !1),
                          y = new gt(h + "*", u, !1, !1, !1),
                          f = new gt(h + " const*", u, !1, !0, !1);
                        return (
                          ($e[e] = { pointerType: y, constPointerType: f }),
                          yt(p, a),
                          [g, y, f]
                        );
                      });
                  },
                  f: function (e, t, i, r, s, o, a, n) {
                    var l = Ct(i, r);
                    (t = _e(t)),
                      (o = ft(s, o)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`;
                        function s() {
                          mt(`Cannot call ${r} due to unbound types`, l);
                        }
                        t.startsWith("@@") && (t = Symbol[t.substring(2)]);
                        var n = e.registeredClass.constructor;
                        return (
                          void 0 === n[t]
                            ? ((s.argCount = i - 1), (n[t] = s))
                            : (at(n, t, r), (n[t].overloadTable[i - 1] = s)),
                          it([], l, function (s) {
                            var l = [s[0], null].concat(s.slice(1)),
                              d = Pt(r, l, null, o, a);
                            if (
                              (void 0 === n[t].overloadTable
                                ? ((d.argCount = i - 1), (n[t] = d))
                                : (n[t].overloadTable[i - 1] = d),
                              e.registeredClass.__derivedClasses)
                            )
                              for (const i of e.registeredClass
                                .__derivedClasses)
                                i.constructor.hasOwnProperty(t) ||
                                  (i.constructor[t] = d);
                            return [];
                          }),
                          []
                        );
                      });
                  },
                  e: function (e, t, i, r, s, o) {
                    M(t > 0);
                    var a = Ct(t, i);
                    (s = ft(r, s)),
                      it([], [e], function (e) {
                        var i = `constructor ${(e = e[0]).name}`;
                        if (
                          (void 0 === e.registeredClass.constructor_body &&
                            (e.registeredClass.constructor_body = []),
                          void 0 !== e.registeredClass.constructor_body[t - 1])
                        )
                          throw new Le(
                            `Cannot register multiple constructors with identical number of parameters (${
                              t - 1
                            }) for class '${
                              e.name
                            }'! Overload resolution is currently only performed using the parameter count, not actual type info!`
                          );
                        return (
                          (e.registeredClass.constructor_body[t - 1] = () => {
                            mt(
                              `Cannot construct ${e.name} due to unbound types`,
                              a
                            );
                          }),
                          it([], a, function (r) {
                            return (
                              r.splice(1, 0, null),
                              (e.registeredClass.constructor_body[t - 1] = Pt(
                                i,
                                r,
                                null,
                                s,
                                o
                              )),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  a: function (e, t, i, r, s, o, a, n, l) {
                    var d = Ct(i, r);
                    (t = _e(t)),
                      (o = ft(s, o)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`;
                        function s() {
                          mt(`Cannot call ${r} due to unbound types`, d);
                        }
                        t.startsWith("@@") && (t = Symbol[t.substring(2)]),
                          n && e.registeredClass.pureVirtualFunctions.push(t);
                        var l = e.registeredClass.instancePrototype,
                          h = l[t];
                        return (
                          void 0 === h ||
                          (void 0 === h.overloadTable &&
                            h.className !== e.name &&
                            h.argCount === i - 2)
                            ? ((s.argCount = i - 2),
                              (s.className = e.name),
                              (l[t] = s))
                            : (at(l, t, r), (l[t].overloadTable[i - 2] = s)),
                          it([], d, function (s) {
                            var n = Pt(r, s, e, o, a);
                            return (
                              void 0 === l[t].overloadTable
                                ? ((n.argCount = i - 2), (l[t] = n))
                                : (l[t].overloadTable[i - 2] = n),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  b: function (e, t, i, r, s, o, a, n, l, d) {
                    (t = _e(t)),
                      (s = ft(r, s)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`,
                          h = {
                            get: function () {
                              mt(`Cannot access ${r} due to unbound types`, [
                                i,
                                a,
                              ]);
                            },
                            enumerable: !0,
                            configurable: !0,
                          };
                        return (
                          (h.set = l
                            ? () => {
                                mt(`Cannot access ${r} due to unbound types`, [
                                  i,
                                  a,
                                ]);
                              }
                            : (e) => {
                                Me(r + " is a read-only property");
                              }),
                          Object.defineProperty(
                            e.registeredClass.instancePrototype,
                            t,
                            h
                          ),
                          it([], l ? [i, a] : [i], function (i) {
                            var a = i[0],
                              h = {
                                get: function () {
                                  var t = xt(this, e, r + " getter");
                                  return a.fromWireType(s(o, t));
                                },
                                enumerable: !0,
                              };
                            if (l) {
                              l = ft(n, l);
                              var u = i[1];
                              h.set = function (t) {
                                var i = xt(this, e, r + " setter"),
                                  s = [];
                                l(d, i, u.toWireType(s, t)), St(s);
                              };
                            }
                            return (
                              Object.defineProperty(
                                e.registeredClass.instancePrototype,
                                t,
                                h
                              ),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  Og: function (e, t) {
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        var t = Ie.toValue(e);
                        return bt(e), t;
                      },
                      toWireType: function (e, t) {
                        return Ie.toHandle(t);
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: pt,
                      destructorFunction: null,
                    });
                  },
                  k: function (e, t, i, r) {
                    var s = Qe(i);
                    function o() {}
                    (t = _e(t)),
                      (o.values = {}),
                      rt(e, {
                        name: t,
                        constructor: o,
                        fromWireType: function (e) {
                          return this.constructor.values[e];
                        },
                        toWireType: function (e, t) {
                          return t.value;
                        },
                        argPackAdvance: 8,
                        readValueFromPointer: At(t, s, r),
                        destructorFunction: null,
                      }),
                      nt(t, o);
                  },
                  d: function (e, t, i) {
                    var r = Ge(e, "enum");
                    t = _e(t);
                    var s = r.constructor,
                      o = Object.create(r.constructor.prototype, {
                        value: { value: i },
                        constructor: {
                          value: Ee(`${r.name}_${t}`, function () {}),
                        },
                      });
                    (s.values[i] = o), (s[t] = o);
                  },
                  oa: function (e, t, i) {
                    var r = Qe(i);
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        return e;
                      },
                      toWireType: function (e, t) {
                        return t;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: Et(t, r),
                      destructorFunction: null,
                    });
                  },
                  i: function (e, t, i, r, s, o, a) {
                    var n = Ct(t, i);
                    (e = _e(e)),
                      (s = ft(r, s)),
                      nt(
                        e,
                        function () {
                          mt(`Cannot call ${e} due to unbound types`, n);
                        },
                        t - 1
                      ),
                      it([], n, function (i) {
                        var r = [i[0], null].concat(i.slice(1));
                        return yt(e, Pt(e, r, null, s, o), t - 1), [];
                      });
                  },
                  r: function (e, t, i, r, s) {
                    (t = _e(t)), -1 === s && (s = 4294967295);
                    var o = Qe(i),
                      a = (e) => e;
                    if (0 === r) {
                      var n = 32 - 8 * i;
                      a = (e) => (e << n) >>> n;
                    }
                    var l = t.includes("unsigned");
                    rt(e, {
                      name: t,
                      fromWireType: a,
                      toWireType: l
                        ? function (e, t) {
                            return this.name, t >>> 0;
                          }
                        : function (e, t) {
                            return this.name, t;
                          },
                      argPackAdvance: 8,
                      readValueFromPointer: Rt(t, o, 0 !== r),
                      destructorFunction: null,
                    });
                  },
                  j: function (e, t, i) {
                    var r = [
                      Int8Array,
                      Uint8Array,
                      Int16Array,
                      Uint16Array,
                      Int32Array,
                      Uint32Array,
                      Float32Array,
                      Float64Array,
                    ][t];
                    function s(e) {
                      var t = E,
                        i = t[(e >>= 2)],
                        s = t[e + 1];
                      return new r(t.buffer, s, i);
                    }
                    rt(
                      e,
                      {
                        name: (i = _e(i)),
                        fromWireType: s,
                        argPackAdvance: 8,
                        readValueFromPointer: s,
                      },
                      { ignoreDuplicateRegistrations: !0 }
                    );
                  },
                  na: function (e, t) {
                    var i = "std::string" === (t = _e(t));
                    rt(e, {
                      name: t,
                      fromWireType: function (e) {
                        var t,
                          r = E[e >> 2],
                          s = e + 4;
                        if (i)
                          for (var o = s, a = 0; a <= r; ++a) {
                            var n = s + a;
                            if (a == r || 0 == x[n]) {
                              var l = Ce(o, n - o);
                              void 0 === t
                                ? (t = l)
                                : ((t += String.fromCharCode(0)), (t += l)),
                                (o = n + 1);
                            }
                          }
                        else {
                          var d = new Array(r);
                          for (a = 0; a < r; ++a)
                            d[a] = String.fromCharCode(x[s + a]);
                          t = d.join("");
                        }
                        return ba(e), t;
                      },
                      toWireType: function (e, t) {
                        var r;
                        t instanceof ArrayBuffer && (t = new Uint8Array(t));
                        var s = "string" == typeof t;
                        s ||
                          t instanceof Uint8Array ||
                          t instanceof Uint8ClampedArray ||
                          t instanceof Int8Array ||
                          Me("Cannot pass non-string to std::string"),
                          (r = i && s ? he(t) : t.length);
                        var o = xa(4 + r + 1),
                          a = o + 4;
                        if (((E[o >> 2] = r), i && s)) wt(t, a, r + 1);
                        else if (s)
                          for (var n = 0; n < r; ++n) {
                            var l = t.charCodeAt(n);
                            l > 255 &&
                              (ba(a),
                              Me(
                                "String has UTF-16 code units that do not fit in 8 bits"
                              )),
                              (x[a + n] = l);
                          }
                        else for (n = 0; n < r; ++n) x[a + n] = t[n];
                        return null !== e && e.push(ba, o), o;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: pt,
                      destructorFunction: function (e) {
                        ba(e);
                      },
                    });
                  },
                  R: function (e, t, i) {
                    var r, s, o, a, n;
                    (i = _e(i)),
                      2 === t
                        ? ((r = Lt), (s = Mt), (a = It), (o = () => A), (n = 1))
                        : 4 === t &&
                          ((r = Ot),
                          (s = kt),
                          (a = _t),
                          (o = () => E),
                          (n = 2)),
                      rt(e, {
                        name: i,
                        fromWireType: function (e) {
                          for (
                            var i, s = E[e >> 2], a = o(), l = e + 4, d = 0;
                            d <= s;
                            ++d
                          ) {
                            var h = e + 4 + d * t;
                            if (d == s || 0 == a[h >> n]) {
                              var u = r(l, h - l);
                              void 0 === i
                                ? (i = u)
                                : ((i += String.fromCharCode(0)), (i += u)),
                                (l = h + t);
                            }
                          }
                          return ba(e), i;
                        },
                        toWireType: function (e, r) {
                          "string" != typeof r &&
                            Me(
                              `Cannot pass non-string to C++ string type ${i}`
                            );
                          var o = a(r),
                            l = xa(4 + o + t);
                          return (
                            (E[l >> 2] = o >> n),
                            s(r, l + 4, o + t),
                            null !== e && e.push(ba, l),
                            l
                          );
                        },
                        argPackAdvance: 8,
                        readValueFromPointer: pt,
                        destructorFunction: function (e) {
                          ba(e);
                        },
                      });
                  },
                  Qg: function (e, t) {
                    rt(e, {
                      isVoid: !0,
                      name: (t = _e(t)),
                      argPackAdvance: 0,
                      fromWireType: function () {},
                      toWireType: function (e, t) {},
                    });
                  },
                  Rg: function (e) {
                    if (ra.xhrs.has(e)) {
                      var t = ra.xhrs.get(e);
                      ra.xhrs.free(e),
                        t.readyState > 0 && t.readyState < 4 && t.abort();
                    }
                  },
                  tb: function () {
                    return true;
                  },
                  ib: function () {
                    throw 1 / 0;
                  },
                  Y: function (e, t, i, r, s) {
                    return (e = Ft[e])(
                      (t = Ie.toValue(t)),
                      (i = Nt(i)),
                      (function (e) {
                        var t = [];
                        return (E[e >> 2] = Ie.toHandle(t)), t;
                      })(r),
                      s
                    );
                  },
                  C: function (e, t, i, r) {
                    (e = Ft[e])((t = Ie.toValue(t)), (i = Nt(i)), null, r);
                  },
                  x: bt,
                  v: function (e, t) {
                    var i = (function (e, t) {
                        for (var i = new Array(e), r = 0; r < e; ++r)
                          i[r] = Ge(E[(t + 4 * r) >> 2], "parameter " + r);
                        return i;
                      })(e, t),
                      r = i[0],
                      s =
                        r.name +
                        "_$" +
                        i
                          .slice(1)
                          .map(function (e) {
                            return e.name;
                          })
                          .join("_") +
                        "$",
                      o = Bt[s];
                    if (void 0 !== o) return o;
                    var a,
                      n,
                      l = new Array(e - 1);
                    return (
                      (a = (t, s, o, a) => {
                        for (var n = 0, d = 0; d < e - 1; ++d)
                          (l[d] = i[d + 1].readValueFromPointer(a + n)),
                            (n += i[d + 1].argPackAdvance);
                        var h = t[s].apply(t, l);
                        for (d = 0; d < e - 1; ++d)
                          i[d + 1].deleteObject && i[d + 1].deleteObject(l[d]);
                        if (!r.isVoid) return r.toWireType(o, h);
                      }),
                      (n = Ft.length),
                      Ft.push(a),
                      (o = n),
                      (Bt[s] = o),
                      o
                    );
                  },
                  Z: function (e) {
                    e > 4 && (we.get(e).refcount += 1);
                  },
                  X: function (e) {
                    St(Ie.toValue(e)), bt(e);
                  },
                  s: function (e, t) {
                    var i = (e = Ge(
                      e,
                      "_emval_take_value"
                    )).readValueFromPointer(t);
                    return Ie.toHandle(i);
                  },
                  lb: function (e, t) {
                    var i,
                      r = new Date(
                        1e3 * (E[(i = e) >> 2] + 4294967296 * T[(i + 4) >> 2])
                      );
                    (T[t >> 2] = r.getSeconds()),
                      (T[(t + 4) >> 2] = r.getMinutes()),
                      (T[(t + 8) >> 2] = r.getHours()),
                      (T[(t + 12) >> 2] = r.getDate()),
                      (T[(t + 16) >> 2] = r.getMonth()),
                      (T[(t + 20) >> 2] = r.getFullYear() - 1900),
                      (T[(t + 24) >> 2] = r.getDay());
                    var s =
                      0 |
                      (function (e) {
                        return (
                          (Ht(e.getFullYear()) ? Yt : Gt)[e.getMonth()] +
                          e.getDate() -
                          1
                        );
                      })(r);
                    (T[(t + 28) >> 2] = s),
                      (T[(t + 36) >> 2] = -60 * r.getTimezoneOffset());
                    var o = new Date(r.getFullYear(), 0, 1),
                      a = new Date(r.getFullYear(), 6, 1).getTimezoneOffset(),
                      n = o.getTimezoneOffset(),
                      l =
                        0 | (a != n && r.getTimezoneOffset() == Math.min(n, a));
                    T[(t + 32) >> 2] = l;
                  },
                  kb: function (e, t, i) {
                    var r = new Date().getFullYear(),
                      s = new Date(r, 0, 1),
                      o = new Date(r, 6, 1),
                      a = s.getTimezoneOffset(),
                      n = o.getTimezoneOffset(),
                      l = Math.max(a, n);
                    function d(e) {
                      var t = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                      return t ? t[1] : "GMT";
                    }
                    (E[e >> 2] = 60 * l), (T[t >> 2] = Number(a != n));
                    var h = d(s),
                      u = d(o),
                      c = Xt(h),
                      p = Xt(u);
                    n < a
                      ? ((E[i >> 2] = c), (E[(i + 4) >> 2] = p))
                      : ((E[i >> 2] = p), (E[(i + 4) >> 2] = c));
                  },
                  y: function () {
                    j("");
                  },
                  kh: function (e) {
                    return 12448 == e
                      ? (Qt.setErrorCode(12288), 1)
                      : (Qt.setErrorCode(12300), 0);
                  },
                  nh: function (e, t, i, r, s) {
                    return Qt.chooseConfig(e, t, i, r, s);
                  },
                  bh: function (t, i, r, s) {
                    if (62e3 != t) return Qt.setErrorCode(12296), 0;
                    for (var o = 1; ; ) {
                      var a = T[s >> 2];
                      if (12440 != a) {
                        if (12344 == a) break;
                        return Qt.setErrorCode(12292), 0;
                      }
                      (o = T[(s + 4) >> 2]), (s += 8);
                    }
                    return o < 2 || o > 3
                      ? (Qt.setErrorCode(12293), 0)
                      : ((Qt.contextAttributes.majorVersion = o - 1),
                        (Qt.contextAttributes.minorVersion = 0),
                        (Qt.context = ei.createContext(
                          e.canvas,
                          Qt.contextAttributes
                        )),
                        0 != Qt.context
                          ? (Qt.setErrorCode(12288),
                            ei.makeContextCurrent(Qt.context),
                            (e.useWebGL = !0),
                            Jt.moduleContextCreatedCallbacks.forEach(function (
                              e
                            ) {
                              e();
                            }),
                            ei.makeContextCurrent(null),
                            62004)
                          : (Qt.setErrorCode(12297), 0));
                  },
                  dh: function (e, t, i, r) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62002 != t
                      ? (Qt.setErrorCode(12293), 0)
                      : (Qt.setErrorCode(12288), 62006);
                  },
                  ch: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62004 != t
                      ? (Qt.setErrorCode(12294), 0)
                      : (ei.deleteContext(Qt.context),
                        Qt.setErrorCode(12288),
                        Qt.currentContext == t && (Qt.currentContext = 0),
                        1);
                  },
                  eh: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62006 != t
                      ? (Qt.setErrorCode(12301), 1)
                      : (Qt.currentReadSurface == t &&
                          (Qt.currentReadSurface = 0),
                        Qt.currentDrawSurface == t &&
                          (Qt.currentDrawSurface = 0),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  oh: function (e, t, i, r) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if (62002 != t) return Qt.setErrorCode(12293), 0;
                    if (!r) return Qt.setErrorCode(12300), 0;
                    switch ((Qt.setErrorCode(12288), i)) {
                      case 12320:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.alpha ? 32 : 24), 1
                        );
                      case 12321:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.alpha ? 8 : 0), 1
                        );
                      case 12322:
                      case 12323:
                      case 12324:
                        return (T[r >> 2] = 8), 1;
                      case 12325:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.depth ? 24 : 0), 1
                        );
                      case 12326:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.stencil ? 8 : 0), 1
                        );
                      case 12327:
                      case 12335:
                      case 12340:
                        return (T[r >> 2] = 12344), 1;
                      case 12328:
                        return (T[r >> 2] = 62002), 1;
                      case 12329:
                      case 12333:
                      case 12334:
                      case 12345:
                      case 12346:
                      case 12347:
                      case 12349:
                      case 12350:
                      case 12354:
                        return (T[r >> 2] = 0), 1;
                      case 12330:
                      case 12332:
                        return (T[r >> 2] = 4096), 1;
                      case 12331:
                        return (T[r >> 2] = 16777216), 1;
                      case 12337:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.antialias ? 4 : 0),
                          1
                        );
                      case 12338:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.antialias ? 1 : 0),
                          1
                        );
                      case 12339:
                      case 12352:
                        return (T[r >> 2] = 4), 1;
                      case 12341:
                      case 12342:
                      case 12343:
                        return (T[r >> 2] = -1), 1;
                      case 12348:
                        return (T[r >> 2] = 1), 1;
                      case 12351:
                        return (T[r >> 2] = 12430), 1;
                      default:
                        return Qt.setErrorCode(12292), 0;
                    }
                  },
                  La: function (e) {
                    return Qt.setErrorCode(12288), 62e3;
                  },
                  ah: function () {
                    return Qt.errorCode;
                  },
                  lh: function (e, t, i) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : (t && (T[t >> 2] = 1),
                        i && (T[i >> 2] = 4),
                        (Qt.defaultDisplayInitialized = !0),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  fh: function (e, t, i, r) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 0 != r && 62004 != r
                      ? (Qt.setErrorCode(12294), 0)
                      : (0 != i && 62006 != i) || (0 != t && 62006 != t)
                      ? (Qt.setErrorCode(12301), 0)
                      : (ei.makeContextCurrent(r ? Qt.context : null),
                        (Qt.currentContext = r),
                        (Qt.currentDrawSurface = t),
                        (Qt.currentReadSurface = i),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  $g: function (e, t) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if ((Qt.setErrorCode(12288), Qt.stringCache[t]))
                      return Qt.stringCache[t];
                    var i;
                    switch (t) {
                      case 12371:
                        i = Xt("Emscripten");
                        break;
                      case 12372:
                        i = Xt("1.4 Emscripten EGL");
                        break;
                      case 12373:
                        i = Xt("");
                        break;
                      case 12429:
                        i = Xt("OpenGL_ES");
                        break;
                      default:
                        return Qt.setErrorCode(12300), 0;
                    }
                    return (Qt.stringCache[t] = i), i;
                  },
                  gh: function (t, i) {
                    if (Qt.defaultDisplayInitialized)
                      if (e.ctx) {
                        if (!e.ctx.isContextLost())
                          return Qt.setErrorCode(12288), 1;
                        Qt.setErrorCode(12302);
                      } else Qt.setErrorCode(12290);
                    else Qt.setErrorCode(12289);
                    return 0;
                  },
                  hh: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : (0 == t ? jt(0, 0) : jt(1, t),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  mh: function (e) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : ((Qt.currentContext = 0),
                        (Qt.currentReadSurface = 0),
                        (Qt.currentDrawSurface = 0),
                        (Qt.defaultDisplayInitialized = !1),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  jh: function () {
                    return Qt.setErrorCode(12288), 1;
                  },
                  ih: function (e) {
                    return Qt.setErrorCode(12288), 1;
                  },
                  z: function (e, t, i) {
                    return (function (e, t, i) {
                      var r = ii(t, i);
                      return ee[e].apply(null, r);
                    })(e, t, i);
                  },
                  m: function (e, t, i) {
                    return (function (e, t, i, r) {
                      var s = ii(t, i);
                      return ee[e].apply(null, s);
                    })(e, t, i);
                  },
                  ab: function () {
                    Jt.mainLoop.pause(), (Jt.mainLoop.func = null);
                  },
                  ha: function () {
                    return Date.now();
                  },
                  Ug: function () {
                    if (!si.fullscreenEnabled()) return -1;
                    si.removeDeferredCalls(fi);
                    var e = ni[1];
                    if (e.exitFullscreen)
                      e.fullscreenElement && e.exitFullscreen();
                    else {
                      if (!e.webkitExitFullscreen) return -1;
                      e.webkitFullscreenElement && e.webkitExitFullscreen();
                    }
                    return 0;
                  },
                  Zg: function () {
                    return (
                      si.removeDeferredCalls(vi),
                      document.exitPointerLock
                        ? (document.exitPointerLock(), 0)
                        : -1
                    );
                  },
                  B: function () {
                    return devicePixelRatio;
                  },
                  u: function (e, t, i) {
                    if (!(e = li(e))) return -4;
                    var r = yi(e);
                    return (w[t >> 3] = r.width), (w[i >> 3] = r.height), 0;
                  },
                  V: function (e, t) {
                    return e < 0 || e >= si.lastGamepadState.length
                      ? -5
                      : si.lastGamepadState[e]
                      ? (mi(t, si.lastGamepadState[e]), 0)
                      : -7;
                  },
                  Q: zt,
                  Ma: function () {
                    return si.lastGamepadState.length;
                  },
                  _g: function (e, t) {
                    (T[e >> 2] = screen.width), (T[t >> 2] = screen.height);
                  },
                  tg: Pi,
                  sg: xi,
                  ld: function (e, t) {
                    ga.beginQuery(e, ei.queries[t]);
                  },
                  Kg: function (e, t) {
                    ga.disjointTimerQueryExt.beginQueryEXT(e, ei.queries[t]);
                  },
                  Uc: function (e) {
                    ga.beginTransformFeedback(e);
                  },
                  rg: Ai,
                  pg: Ei,
                  Rc: function (e, t, i) {
                    ga.bindBufferBase(e, t, ei.buffers[i]);
                  },
                  Sc: function (e, t, i, r, s) {
                    ga.bindBufferRange(e, t, ei.buffers[i], r, s);
                  },
                  og: wi,
                  ng: function (e, t) {
                    ga.bindRenderbuffer(e, ei.renderbuffers[t]);
                  },
                  Xb: function (e, t) {
                    ga.bindSampler(e, ei.samplers[t]);
                  },
                  mg: Li,
                  Pb: function (e, t) {
                    ga.bindTransformFeedback(e, ei.transformFeedbacks[t]);
                  },
                  Zc: Ii,
                  Cg: Oi,
                  lg: _i,
                  kg: Ni,
                  jg: function (e, t) {
                    ga.blendEquationSeparate(e, t);
                  },
                  ig: function (e, t) {
                    ga.blendFunc(e, t);
                  },
                  hg: Bi,
                  ad: function (e, t, i, r, s, o, a, n, l, d) {
                    ga.blitFramebuffer(e, t, i, r, s, o, a, n, l, d);
                  },
                  gg: zi,
                  fg: function (e, t, i, r) {
                    ei.currentContext.version >= 2
                      ? i && ga.bufferSubData(e, t, x, r, i)
                      : ga.bufferSubData(e, t, x.subarray(r, r + i));
                  },
                  eg: Gi,
                  dg: ji,
                  tc: function (e, t, i, r) {
                    ga.clearBufferfi(e, t, i, r);
                  },
                  uc: function (e, t, i) {
                    ga.clearBufferfv(e, t, R, i >> 2);
                  },
                  wc: function (e, t, i) {
                    ga.clearBufferiv(e, t, T, i >> 2);
                  },
                  vc: function (e, t, i) {
                    ga.clearBufferuiv(e, t, E, i >> 2);
                  },
                  cg: Ui,
                  bg: function (e) {
                    ga.clearDepth(e);
                  },
                  ag: function (e) {
                    ga.clearStencil(e);
                  },
                  fc: function (e, t, i, r) {
                    var s = $i(i, r);
                    return ga.clientWaitSync(ei.syncs[e], t, s);
                  },
                  $f: Ki,
                  _f: Ji,
                  Zf: er,
                  rd: function (e, t, i, r, s, o, a, n, l) {
                    ga.currentPixelUnpackBufferBinding
                      ? ga.compressedTexImage3D(e, t, i, r, s, o, a, n, l)
                      : ga.compressedTexImage3D(e, t, i, r, s, o, a, x, l, n);
                  },
                  Yf: function (e, t, i, r, s, o, a, n, l) {
                    ei.currentContext.version >= 2
                      ? ga.currentPixelUnpackBufferBinding || !n
                        ? ga.compressedTexSubImage2D(e, t, i, r, s, o, a, n, l)
                        : ga.compressedTexSubImage2D(
                            e,
                            t,
                            i,
                            r,
                            s,
                            o,
                            a,
                            x,
                            l,
                            n
                          )
                      : ga.compressedTexSubImage2D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          l ? x.subarray(l, l + n) : null
                        );
                  },
                  qd: function (e, t, i, r, s, o, a, n, l, d, h) {
                    ga.currentPixelUnpackBufferBinding
                      ? ga.compressedTexSubImage3D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          n,
                          l,
                          d,
                          h
                        )
                      : ga.compressedTexSubImage3D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          n,
                          l,
                          x,
                          h,
                          d
                        );
                  },
                  rc: function (e, t, i, r, s) {
                    ga.copyBufferSubData(e, t, i, r, s);
                  },
                  Wf: function (e, t, i, r, s, o, a, n) {
                    ga.copyTexImage2D(e, t, i, r, s, o, a, n);
                  },
                  Vf: function (e, t, i, r, s, o, a, n) {
                    ga.copyTexSubImage2D(e, t, i, r, s, o, a, n);
                  },
                  sd: function (e, t, i, r, s, o, a, n, l) {
                    ga.copyTexSubImage3D(e, t, i, r, s, o, a, n, l);
                  },
                  Uf: ir,
                  Tf: sr,
                  Sf: ar,
                  Rf: lr,
                  Qf: hr,
                  Pf: cr,
                  nd: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.queries[r];
                      s && (ga.deleteQuery(s), (ei.queries[r] = null));
                    }
                  },
                  Mg: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.queries[r];
                      s &&
                        (ga.disjointTimerQueryExt.deleteQueryEXT(s),
                        (ei.queries[r] = null));
                    }
                  },
                  Of: gr,
                  _b: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.samplers[r];
                      s &&
                        (ga.deleteSampler(s),
                        (s.name = 0),
                        (ei.samplers[r] = null));
                    }
                  },
                  Nf: fr,
                  gc: function (e) {
                    if (e) {
                      var t = ei.syncs[e];
                      t
                        ? (ga.deleteSync(t), (t.name = 0), (ei.syncs[e] = null))
                        : ei.recordError(1281);
                    }
                  },
                  Mf: mr,
                  Ob: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.transformFeedbacks[r];
                      s &&
                        (ga.deleteTransformFeedback(s),
                        (s.name = 0),
                        (ei.transformFeedbacks[r] = null));
                    }
                  },
                  Yc: Pr,
                  Ag: Cr,
                  Lf: br,
                  Kf: Tr,
                  Jf: function (e, t) {
                    ga.depthRange(e, t);
                  },
                  If: Rr,
                  Hf: Dr,
                  Gf: function (e) {
                    ga.disableVertexAttribArray(e);
                  },
                  Ff: Mr,
                  kc: Or,
                  wg: kr,
                  xb: _r,
                  zd: Vr,
                  yb: Nr,
                  hd: Hr,
                  xd: zr,
                  xg: Yr,
                  Ef: Xr,
                  jc: Wr,
                  vg: Ur,
                  vb: $r,
                  wb: qr,
                  yd: Kr,
                  vd: function (e, t, i, r, s, o) {
                    Gr(e, r, s, o);
                  },
                  Df: Jr,
                  Cf: es,
                  kd: function (e) {
                    ga.endQuery(e);
                  },
                  Jg: function (e) {
                    ga.disjointTimerQueryExt.endQueryEXT(e);
                  },
                  Tc: function () {
                    ga.endTransformFeedback();
                  },
                  ic: function (e, t) {
                    var i = ga.fenceSync(e, t);
                    if (i) {
                      var r = ei.getNewId(ei.syncs);
                      return (i.name = r), (ei.syncs[r] = i), r;
                    }
                    return 0;
                  },
                  Bf: function () {
                    ga.finish();
                  },
                  Af: function () {
                    ga.flush();
                  },
                  zf: function (e, t, i, r) {
                    ga.framebufferRenderbuffer(e, t, i, ei.renderbuffers[r]);
                  },
                  yf: is,
                  _c: function (e, t, i, r, s) {
                    ga.framebufferTextureLayer(e, t, ei.textures[i], r, s);
                  },
                  xf: ss,
                  wf: ns,
                  uf: ds,
                  od: function (e, t) {
                    os(e, t, "createQuery", ei.queries);
                  },
                  Ng: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = ga.disjointTimerQueryExt.createQueryEXT();
                      if (!r) {
                        for (ei.recordError(1282); i < e; )
                          T[(t + 4 * i++) >> 2] = 0;
                        return;
                      }
                      var s = ei.getNewId(ei.queries);
                      (r.name = s),
                        (ei.queries[s] = r),
                        (T[(t + 4 * i) >> 2] = s);
                    }
                  },
                  tf: function (e, t) {
                    os(e, t, "createRenderbuffer", ei.renderbuffers);
                  },
                  $b: function (e, t) {
                    os(e, t, "createSampler", ei.samplers);
                  },
                  rf: us,
                  Nb: function (e, t) {
                    os(e, t, "createTransformFeedback", ei.transformFeedbacks);
                  },
                  Xc: ps,
                  zg: gs,
                  vf: fs,
                  qf: Ss,
                  pf: Cs,
                  mc: function (e, t, i, r, s) {
                    e = ei.programs[e];
                    var o = ga.getActiveUniformBlockName(e, t);
                    if (o)
                      if (s && i > 0) {
                        var a = wt(o, s, i);
                        r && (T[r >> 2] = a);
                      } else r && (T[r >> 2] = 0);
                  },
                  nc: function (e, t, i, r) {
                    if (r)
                      if (((e = ei.programs[e]), 35393 != i)) {
                        var s = ga.getActiveUniformBlockParameter(e, t, i);
                        if (null !== s)
                          if (35395 == i)
                            for (var o = 0; o < s.length; o++)
                              T[(r + 4 * o) >> 2] = s[o];
                          else T[r >> 2] = s;
                      } else {
                        var a = ga.getActiveUniformBlockName(e, t);
                        T[r >> 2] = a.length + 1;
                      }
                    else ei.recordError(1281);
                  },
                  pc: function (e, t, i, r, s) {
                    if (s)
                      if (t > 0 && 0 == i) ei.recordError(1281);
                      else {
                        e = ei.programs[e];
                        for (var o = [], a = 0; a < t; a++)
                          o.push(T[(i + 4 * a) >> 2]);
                        var n = ga.getActiveUniforms(e, o, r);
                        if (n) {
                          var l = n.length;
                          for (a = 0; a < l; a++) T[(s + 4 * a) >> 2] = n[a];
                        }
                      }
                    else ei.recordError(1281);
                  },
                  of: function (e, t, i, r) {
                    var s = ga.getAttachedShaders(ei.programs[e]),
                      o = s.length;
                    o > t && (o = t), (T[i >> 2] = o);
                    for (var a = 0; a < o; ++a) {
                      var n = ei.shaders.indexOf(s[a]);
                      T[(r + 4 * a) >> 2] = n;
                    }
                  },
                  nf: function (e, t) {
                    return ga.getAttribLocation(ei.programs[e], Ce(t));
                  },
                  mf: function (e, t) {
                    bs(e, t, 4);
                  },
                  ac: function (e, t, i) {
                    i
                      ? xs(i, ga.getBufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  lf: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getBufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  kf: function () {
                    var e = ga.getError() || ei.lastError;
                    return (ei.lastError = 0), e;
                  },
                  jf: function (e, t) {
                    bs(e, t, 2);
                  },
                  Gc: function (e, t) {
                    return ga.getFragDataLocation(ei.programs[e], Ce(t));
                  },
                  hf: function (e, t, i, r) {
                    var s = ga.getFramebufferAttachmentParameter(e, t, i);
                    (s instanceof WebGLRenderbuffer ||
                      s instanceof WebGLTexture) &&
                      (s = 0 | s.name),
                      (T[r >> 2] = s);
                  },
                  bc: function (e, t, i) {
                    As(e, t, i, 1);
                  },
                  dc: function (e, t) {
                    bs(e, t, 1);
                  },
                  Vc: function (e, t, i) {
                    As(e, t, i, 0);
                  },
                  ff: Es,
                  Bb: function (e, t, i, r, s) {
                    if (r < 0) ei.recordError(1281);
                    else if (s) {
                      var o = ga.getInternalformatParameter(e, t, i);
                      if (null !== o)
                        for (var a = 0; a < o.length && a < r; ++a)
                          T[(s + 4 * a) >> 2] = o[a];
                    } else ei.recordError(1281);
                  },
                  Jb: function (e, t, i, r, s) {
                    ei.recordError(1282);
                  },
                  df: ws,
                  ef: Ls,
                  Eg: Is,
                  Gg: ks,
                  Dg: _s,
                  id: function (e, t, i) {
                    if (i) {
                      var r,
                        s = ei.queries[e],
                        o = ga.getQueryParameter(s, t);
                      (r = "boolean" == typeof o ? (o ? 1 : 0) : o),
                        (T[i >> 2] = r);
                    } else ei.recordError(1281);
                  },
                  Fg: Vs,
                  jd: function (e, t, i) {
                    i ? (T[i >> 2] = ga.getQuery(e, t)) : ei.recordError(1281);
                  },
                  Hg: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.disjointTimerQueryExt.getQueryEXT(e, t))
                      : ei.recordError(1281);
                  },
                  cf: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getRenderbufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  Rb: function (e, t, i) {
                    i
                      ? (R[i >> 2] = ga.getSamplerParameter(ei.samplers[e], t))
                      : ei.recordError(1281);
                  },
                  Sb: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getSamplerParameter(ei.samplers[e], t))
                      : ei.recordError(1281);
                  },
                  af: Fs,
                  $e: function (e, t, i, r) {
                    var s = ga.getShaderPrecisionFormat(e, t);
                    (T[i >> 2] = s.rangeMin),
                      (T[(i + 4) >> 2] = s.rangeMax),
                      (T[r >> 2] = s.precision);
                  },
                  _e: function (e, t, i, r) {
                    var s = ga.getShaderSource(ei.shaders[e]);
                    if (s) {
                      var o = t > 0 && r ? wt(s, r, t) : 0;
                      i && (T[i >> 2] = o);
                    }
                  },
                  bf: Hs,
                  Ze: Ys,
                  sc: function (e, t) {
                    if (ei.currentContext.version < 2)
                      return ei.recordError(1282), 0;
                    var i = ei.stringiCache[e];
                    if (i)
                      return t < 0 || t >= i.length
                        ? (ei.recordError(1281), 0)
                        : i[t];
                    if (7939 === e) {
                      var r = ga.getSupportedExtensions() || [];
                      return (
                        (r = (r = r.concat(
                          r.map(function (e) {
                            return "GL_" + e;
                          })
                        )).map(function (e) {
                          return Xt(e);
                        })),
                        (i = ei.stringiCache[e] = r),
                        t < 0 || t >= i.length
                          ? (ei.recordError(1281), 0)
                          : i[t]
                      );
                    }
                    return ei.recordError(1280), 0;
                  },
                  cc: function (e, t, i, r, s) {
                    if (i < 0) ei.recordError(1281);
                    else if (s) {
                      var o = ga.getSyncParameter(ei.syncs[e], t);
                      null !== o && ((T[s >> 2] = o), r && (T[r >> 2] = 1));
                    } else ei.recordError(1281);
                  },
                  Ye: function (e, t, i) {
                    i
                      ? (R[i >> 2] = ga.getTexParameter(e, t))
                      : ei.recordError(1281);
                  },
                  We: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getTexParameter(e, t))
                      : ei.recordError(1281);
                  },
                  Pc: function (e, t, i, r, s, o, a) {
                    e = ei.programs[e];
                    var n = ga.getTransformFeedbackVarying(e, t);
                    if (n) {
                      if (a && i > 0) {
                        var l = wt(n.name, a, i);
                        r && (T[r >> 2] = l);
                      } else r && (T[r >> 2] = 0);
                      s && (T[s >> 2] = n.size), o && (T[o >> 2] = n.type);
                    }
                  },
                  oc: function (e, t) {
                    return ga.getUniformBlockIndex(ei.programs[e], Ce(t));
                  },
                  qc: function (e, t, i, r) {
                    if (r)
                      if (t > 0 && (0 == i || 0 == r)) ei.recordError(1281);
                      else {
                        e = ei.programs[e];
                        for (var s = [], o = 0; o < t; o++)
                          s.push(Ce(T[(i + 4 * o) >> 2]));
                        var a = ga.getUniformIndices(e, s);
                        if (a) {
                          var n = a.length;
                          for (o = 0; o < n; o++) T[(r + 4 * o) >> 2] = a[o];
                        }
                      }
                    else ei.recordError(1281);
                  },
                  Te: Ws,
                  Ve: function (e, t, i) {
                    $s(e, t, i, 2);
                  },
                  Ue: function (e, t, i) {
                    $s(e, t, i, 0);
                  },
                  Hc: function (e, t, i) {
                    $s(e, t, i, 0);
                  },
                  Nc: Zs,
                  Mc: Js,
                  Qe: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getVertexAttribOffset(e, t))
                      : ei.recordError(1281);
                  },
                  Se: function (e, t, i) {
                    qs(e, t, i, 2);
                  },
                  Re: function (e, t, i) {
                    qs(e, t, i, 5);
                  },
                  Pe: function (e, t) {
                    ga.hint(e, t);
                  },
                  Gb: function (e, t, i) {
                    for (var r = Fr[t], s = 0; s < t; s++)
                      r[s] = T[(i + 4 * s) >> 2];
                    ga.invalidateFramebuffer(e, r);
                  },
                  Fb: function (e, t, i, r, s, o, a) {
                    for (var n = Fr[t], l = 0; l < t; l++)
                      n[l] = T[(i + 4 * l) >> 2];
                    ga.invalidateSubFramebuffer(e, n, r, s, o, a);
                  },
                  Oe: function (e) {
                    var t = ei.buffers[e];
                    return t ? ga.isBuffer(t) : 0;
                  },
                  Ne: function (e) {
                    return ga.isEnabled(e);
                  },
                  Le: function (e) {
                    var t = ei.framebuffers[e];
                    return t ? ga.isFramebuffer(t) : 0;
                  },
                  Ke: function (e) {
                    return (e = ei.programs[e]) ? ga.isProgram(e) : 0;
                  },
                  md: function (e) {
                    var t = ei.queries[e];
                    return t ? ga.isQuery(t) : 0;
                  },
                  Lg: function (e) {
                    var t = ei.queries[e];
                    return t ? ga.disjointTimerQueryExt.isQueryEXT(t) : 0;
                  },
                  Je: function (e) {
                    var t = ei.renderbuffers[e];
                    return t ? ga.isRenderbuffer(t) : 0;
                  },
                  Yb: function (e) {
                    var t = ei.samplers[e];
                    return t ? ga.isSampler(t) : 0;
                  },
                  Ie: function (e) {
                    var t = ei.shaders[e];
                    return t ? ga.isShader(t) : 0;
                  },
                  hc: function (e) {
                    return ga.isSync(ei.syncs[e]);
                  },
                  He: function (e) {
                    var t = ei.textures[e];
                    return t ? ga.isTexture(t) : 0;
                  },
                  Mb: function (e) {
                    return ga.isTransformFeedback(ei.transformFeedbacks[e]);
                  },
                  Wc: eo,
                  yg: to,
                  Ge: ro,
                  Fe: oo,
                  Lb: function () {
                    ga.pauseTransformFeedback();
                  },
                  Ee: no,
                  De: function (e, t) {
                    ga.polygonOffset(e, t);
                  },
                  Ib: function (e, t, i, r) {
                    ei.recordError(1280);
                  },
                  Hb: function (e, t, i) {
                    ei.recordError(1280);
                  },
                  Ig: function (e, t) {
                    ga.disjointTimerQueryExt.queryCounterEXT(ei.queries[e], t);
                  },
                  wd: function (e) {
                    ga.readBuffer(e);
                  },
                  Ce: po,
                  Ae: function () {},
                  ze: function (e, t, i, r) {
                    ga.renderbufferStorage(e, t, i, r);
                  },
                  $c: function (e, t, i, r, s) {
                    ga.renderbufferStorageMultisample(e, t, i, r, s);
                  },
                  Kb: function () {
                    ga.resumeTransformFeedback();
                  },
                  ye: function (e, t) {
                    ga.sampleCoverage(e, !!t);
                  },
                  Ub: function (e, t, i) {
                    ga.samplerParameterf(ei.samplers[e], t, i);
                  },
                  Tb: function (e, t, i) {
                    var r = R[i >> 2];
                    ga.samplerParameterf(ei.samplers[e], t, r);
                  },
                  Wb: function (e, t, i) {
                    ga.samplerParameteri(ei.samplers[e], t, i);
                  },
                  Vb: function (e, t, i) {
                    var r = T[i >> 2];
                    ga.samplerParameteri(ei.samplers[e], t, r);
                  },
                  xe: yo,
                  we: function (e, t, i, r, s) {
                    ei.recordError(1280);
                  },
                  ve: vo,
                  ue: function (e, t, i) {
                    ga.stencilFunc(e, t, i);
                  },
                  te: function (e, t, i, r) {
                    ga.stencilFuncSeparate(e, t, i, r);
                  },
                  se: function (e) {
                    ga.stencilMask(e);
                  },
                  re: function (e, t) {
                    ga.stencilMaskSeparate(e, t);
                  },
                  pe: function (e, t, i) {
                    ga.stencilOp(e, t, i);
                  },
                  oe: function (e, t, i, r) {
                    ga.stencilOpSeparate(e, t, i, r);
                  },
                  ne: So,
                  ud: function (e, t, i, r, s, o, a, n, l, d) {
                    if (ga.currentPixelUnpackBufferBinding)
                      ga.texImage3D(e, t, i, r, s, o, a, n, l, d);
                    else if (d) {
                      var h = lo(l);
                      ga.texImage3D(e, t, i, r, s, o, a, n, l, h, d >> ho(h));
                    } else ga.texImage3D(e, t, i, r, s, o, a, n, l, null);
                  },
                  me: function (e, t, i) {
                    ga.texParameterf(e, t, i);
                  },
                  le: function (e, t, i) {
                    var r = R[i >> 2];
                    ga.texParameterf(e, t, r);
                  },
                  ke: Co,
                  je: function (e, t, i) {
                    var r = T[i >> 2];
                    ga.texParameteri(e, t, r);
                  },
                  Db: function (e, t, i, r, s) {
                    ga.texStorage2D(e, t, i, r, s);
                  },
                  Cb: function (e, t, i, r, s, o) {
                    ga.texStorage3D(e, t, i, r, s, o);
                  },
                  ie: function (e, t, i, r, s, o, a, n, l) {
                    if (ei.currentContext.version >= 2)
                      if (ga.currentPixelUnpackBufferBinding)
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, l);
                      else if (l) {
                        var d = lo(n);
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, d, l >> ho(d));
                      } else ga.texSubImage2D(e, t, i, r, s, o, a, n, null);
                    else {
                      var h = null;
                      l && (h = uo(n, a, s, o, l)),
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, h);
                    }
                  },
                  td: function (e, t, i, r, s, o, a, n, l, d, h) {
                    if (ga.currentPixelUnpackBufferBinding)
                      ga.texSubImage3D(e, t, i, r, s, o, a, n, l, d, h);
                    else if (h) {
                      var u = lo(d);
                      ga.texSubImage3D(
                        e,
                        t,
                        i,
                        r,
                        s,
                        o,
                        a,
                        n,
                        l,
                        d,
                        u,
                        h >> ho(u)
                      );
                    } else ga.texSubImage3D(e, t, i, r, s, o, a, n, l, d, null);
                  },
                  Qc: function (e, t, i, r) {
                    e = ei.programs[e];
                    for (var s = [], o = 0; o < t; o++)
                      s.push(Ce(T[(i + 4 * o) >> 2]));
                    ga.transformFeedbackVaryings(e, s, r);
                  },
                  he: function (e, t) {
                    ga.uniform1f(Us(e), t);
                  },
                  ge: Ao,
                  ee: Eo,
                  de: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform1iv(Us(e), T, i >> 2, t);
                    else {
                      if (t <= 288)
                        for (var r = Ro[t - 1], s = 0; s < t; ++s)
                          r[s] = T[(i + 4 * s) >> 2];
                      else r = T.subarray(i >> 2, (i + 4 * t) >> 2);
                      ga.uniform1iv(Us(e), r);
                    }
                  },
                  Fc: function (e, t) {
                    ga.uniform1ui(Us(e), t);
                  },
                  Ac: function (e, t, i) {
                    t && ga.uniform1uiv(Us(e), E, i >> 2, t);
                  },
                  ce: function (e, t, i) {
                    ga.uniform2f(Us(e), t, i);
                  },
                  be: Do,
                  ae: function (e, t, i) {
                    ga.uniform2i(Us(e), t, i);
                  },
                  $d: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform2iv(Us(e), T, i >> 2, 2 * t);
                    else {
                      if (t <= 144)
                        for (var r = Ro[2 * t - 1], s = 0; s < 2 * t; s += 2)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 8 * t) >> 2);
                      ga.uniform2iv(Us(e), r);
                    }
                  },
                  Ec: function (e, t, i) {
                    ga.uniform2ui(Us(e), t, i);
                  },
                  zc: function (e, t, i) {
                    t && ga.uniform2uiv(Us(e), E, i >> 2, 2 * t);
                  },
                  _d: function (e, t, i, r) {
                    ga.uniform3f(Us(e), t, i, r);
                  },
                  Zd: Mo,
                  Yd: function (e, t, i, r) {
                    ga.uniform3i(Us(e), t, i, r);
                  },
                  Xd: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform3iv(Us(e), T, i >> 2, 3 * t);
                    else {
                      if (t <= 96)
                        for (var r = Ro[3 * t - 1], s = 0; s < 3 * t; s += 3)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]),
                            (r[s + 2] = T[(i + (4 * s + 8)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 12 * t) >> 2);
                      ga.uniform3iv(Us(e), r);
                    }
                  },
                  Dc: function (e, t, i, r) {
                    ga.uniform3ui(Us(e), t, i, r);
                  },
                  yc: function (e, t, i) {
                    t && ga.uniform3uiv(Us(e), E, i >> 2, 3 * t);
                  },
                  Vd: function (e, t, i, r, s) {
                    ga.uniform4f(Us(e), t, i, r, s);
                  },
                  Ud: Oo,
                  Td: function (e, t, i, r, s) {
                    ga.uniform4i(Us(e), t, i, r, s);
                  },
                  Sd: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform4iv(Us(e), T, i >> 2, 4 * t);
                    else {
                      if (t <= 72)
                        for (var r = Ro[4 * t - 1], s = 0; s < 4 * t; s += 4)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]),
                            (r[s + 2] = T[(i + (4 * s + 8)) >> 2]),
                            (r[s + 3] = T[(i + (4 * s + 12)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 16 * t) >> 2);
                      ga.uniform4iv(Us(e), r);
                    }
                  },
                  Bc: function (e, t, i, r, s) {
                    ga.uniform4ui(Us(e), t, i, r, s);
                  },
                  xc: function (e, t, i) {
                    t && ga.uniform4uiv(Us(e), E, i >> 2, 4 * t);
                  },
                  lc: function (e, t, i) {
                    (e = ei.programs[e]), ga.uniformBlockBinding(e, t, i);
                  },
                  Rd: function (e, t, i, r) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniformMatrix2fv(Us(e), !!i, R, r >> 2, 4 * t);
                    else {
                      if (t <= 72)
                        for (var s = xo[4 * t - 1], o = 0; o < 4 * t; o += 4)
                          (s[o] = R[(r + 4 * o) >> 2]),
                            (s[o + 1] = R[(r + (4 * o + 4)) >> 2]),
                            (s[o + 2] = R[(r + (4 * o + 8)) >> 2]),
                            (s[o + 3] = R[(r + (4 * o + 12)) >> 2]);
                      else s = R.subarray(r >> 2, (r + 16 * t) >> 2);
                      ga.uniformMatrix2fv(Us(e), !!i, s);
                    }
                  },
                  gd: function (e, t, i, r) {
                    t && ga.uniformMatrix2x3fv(Us(e), !!i, R, r >> 2, 6 * t);
                  },
                  ed: function (e, t, i, r) {
                    t && ga.uniformMatrix2x4fv(Us(e), !!i, R, r >> 2, 8 * t);
                  },
                  Qd: function (e, t, i, r) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniformMatrix3fv(Us(e), !!i, R, r >> 2, 9 * t);
                    else {
                      if (t <= 32)
                        for (var s = xo[9 * t - 1], o = 0; o < 9 * t; o += 9)
                          (s[o] = R[(r + 4 * o) >> 2]),
                            (s[o + 1] = R[(r + (4 * o + 4)) >> 2]),
                            (s[o + 2] = R[(r + (4 * o + 8)) >> 2]),
                            (s[o + 3] = R[(r + (4 * o + 12)) >> 2]),
                            (s[o + 4] = R[(r + (4 * o + 16)) >> 2]),
                            (s[o + 5] = R[(r + (4 * o + 20)) >> 2]),
                            (s[o + 6] = R[(r + (4 * o + 24)) >> 2]),
                            (s[o + 7] = R[(r + (4 * o + 28)) >> 2]),
                            (s[o + 8] = R[(r + (4 * o + 32)) >> 2]);
                      else s = R.subarray(r >> 2, (r + 36 * t) >> 2);
                      ga.uniformMatrix3fv(Us(e), !!i, s);
                    }
                  },
                  fd: function (e, t, i, r) {
                    t && ga.uniformMatrix3x2fv(Us(e), !!i, R, r >> 2, 6 * t);
                  },
                  cd: function (e, t, i, r) {
                    t && ga.uniformMatrix3x4fv(Us(e), !!i, R, r >> 2, 12 * t);
                  },
                  Pd: _o,
                  dd: function (e, t, i, r) {
                    t && ga.uniformMatrix4x2fv(Us(e), !!i, R, r >> 2, 8 * t);
                  },
                  bd: function (e, t, i, r) {
                    t && ga.uniformMatrix4x3fv(Us(e), !!i, R, r >> 2, 12 * t);
                  },
                  Od: No,
                  Nd: function (e) {
                    ga.validateProgram(ei.programs[e]);
                  },
                  Md: function (e, t) {
                    ga.vertexAttrib1f(e, t);
                  },
                  Kd: function (e, t) {
                    ga.vertexAttrib1f(e, R[t >> 2]);
                  },
                  Jd: function (e, t, i) {
                    ga.vertexAttrib2f(e, t, i);
                  },
                  Id: function (e, t) {
                    ga.vertexAttrib2f(e, R[t >> 2], R[(t + 4) >> 2]);
                  },
                  Hd: function (e, t, i, r) {
                    ga.vertexAttrib3f(e, t, i, r);
                  },
                  Gd: function (e, t) {
                    ga.vertexAttrib3f(
                      e,
                      R[t >> 2],
                      R[(t + 4) >> 2],
                      R[(t + 8) >> 2]
                    );
                  },
                  Fd: function (e, t, i, r, s) {
                    ga.vertexAttrib4f(e, t, i, r, s);
                  },
                  Ed: function (e, t) {
                    ga.vertexAttrib4f(
                      e,
                      R[t >> 2],
                      R[(t + 4) >> 2],
                      R[(t + 8) >> 2],
                      R[(t + 12) >> 2]
                    );
                  },
                  Qb: Bo,
                  ug: Ho,
                  zb: zo,
                  Bd: Yo,
                  Ab: Go,
                  Lc: function (e, t, i, r, s) {
                    ga.vertexAttribI4i(e, t, i, r, s);
                  },
                  Jc: function (e, t) {
                    ga.vertexAttribI4i(
                      e,
                      T[t >> 2],
                      T[(t + 4) >> 2],
                      T[(t + 8) >> 2],
                      T[(t + 12) >> 2]
                    );
                  },
                  Kc: function (e, t, i, r, s) {
                    ga.vertexAttribI4ui(e, t, i, r, s);
                  },
                  Ic: function (e, t) {
                    ga.vertexAttribI4ui(
                      e,
                      E[t >> 2],
                      E[(t + 4) >> 2],
                      E[(t + 8) >> 2],
                      E[(t + 12) >> 2]
                    );
                  },
                  Oc: function (e, t, i, r, s) {
                    ga.vertexAttribIPointer(e, t, i, r, s);
                  },
                  Dd: jo,
                  Cd: Uo,
                  ec: function (e, t, i, r) {
                    var s = $i(i, r);
                    ga.waitSync(ei.syncs[e], t, s);
                  },
                  L: function () {
                    return 0;
                  },
                  Tg: function () {
                    return !p;
                  },
                  Vg: function (e, t, i) {
                    return (function (e, t) {
                      return si.fullscreenEnabled()
                        ? (e = li(e))
                          ? e.requestFullscreen || e.webkitRequestFullscreen
                            ? si.canPerformEventHandlerRequests()
                              ? fi(e, t)
                              : t.deferUntilInEventHandler
                              ? (si.deferCall(fi, 1, [e, t]), 1)
                              : -2
                            : -3
                          : -4
                        : -1;
                    })(e, {
                      scaleMode: T[i >> 2],
                      canvasResolutionScaleMode: T[(i + 4) >> 2],
                      filteringMode: T[(i + 8) >> 2],
                      deferUntilInEventHandler: t,
                      canvasResizedCallback: T[(i + 12) >> 2],
                      canvasResizedCallbackUserData: T[(i + 16) >> 2],
                    });
                  },
                  Ka: function (e, t) {
                    return (e = li(e))
                      ? e.requestPointerLock
                        ? si.canPerformEventHandlerRequests()
                          ? vi(e)
                          : t
                          ? (si.deferCall(vi, 2, [e]), 1)
                          : -2
                        : -1
                      : -4;
                  },
                  jb: function (e) {
                    var t = x.length,
                      i = 2147483648;
                    if ((e >>>= 0) > i) return !1;
                    for (var r, s = 1; s <= 4; s *= 2) {
                      var o = t * (1 + 0.2 / s);
                      if (
                        ((o = Math.min(o, e + 100663296)),
                        $o(
                          Math.min(
                            i,
                            (r = Math.max(e, o)) +
                              ((65536 - (r % 65536)) % 65536)
                          )
                        ))
                      )
                        return !0;
                    }
                    return !1;
                  },
                  W: function () {
                    return (si.lastGamepadState = navigator.getGamepads
                      ? navigator.getGamepads()
                      : navigator.webkitGetGamepads
                      ? navigator.webkitGetGamepads()
                      : null)
                      ? 0
                      : -1;
                  },
                  qa: function (e, t, i) {
                    return "undefined" == typeof onbeforeunload
                      ? -1
                      : 1 !== i
                      ? -5
                      : (function (e, t, i, r, s, o) {
                          var a = {
                            target: li(2),
                            eventTypeString: "beforeunload",
                            callbackfunc: r,
                            handlerFunc: function (e = event) {
                              var i = re(r)(28, 0, t);
                              if ((i && (i = Ce(i)), i))
                                return (
                                  e.preventDefault(), (e.returnValue = i), i
                                );
                            },
                            useCapture: !0,
                          };
                          return si.registerOrRemoveHandler(a);
                        })(0, e, 0, t);
                  },
                  Ca: function (e, t, i, r, s) {
                    return qo(e, t, i, r, 12, "blur");
                  },
                  A: ci,
                  S: function (e, t, i) {
                    return (e = li(e))
                      ? ((e.style.width = t + "px"),
                        (e.style.height = i + "px"),
                        0)
                      : -4;
                  },
                  Da: function (e, t, i, r, s) {
                    return qo(e, t, i, r, 13, "focus");
                  },
                  ta: function (e, t, i, r, s) {
                    return si.fullscreenEnabled()
                      ? (e = li(e))
                        ? (Ko(e, t, i, r, 19, "webkitfullscreenchange"),
                          Ko(e, t, i, r, 19, "fullscreenchange"))
                        : -4
                      : -1;
                  },
                  U: function (e, t, i, r) {
                    return navigator.getGamepads || navigator.webkitGetGamepads
                      ? Zo(2, e, t, i, 26, "gamepadconnected")
                      : -1;
                  },
                  T: function (e, t, i, r) {
                    return navigator.getGamepads || navigator.webkitGetGamepads
                      ? Zo(2, e, t, i, 27, "gamepaddisconnected")
                      : -1;
                  },
                  wa: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 2, "keydown");
                  },
                  ua: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 1, "keypress");
                  },
                  va: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 3, "keyup");
                  },
                  Ua: function (e, t, i) {
                    Wt(re(e), t, i);
                  },
                  Ia: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 5, "mousedown");
                  },
                  Ga: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 33, "mouseenter");
                  },
                  Fa: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 34, "mouseleave");
                  },
                  Ja: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 8, "mousemove");
                  },
                  Ha: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 6, "mouseup");
                  },
                  xa: function (e, t, i, r, s) {
                    return document &&
                      document.body &&
                      (document.body.requestPointerLock ||
                        document.body.mozRequestPointerLock ||
                        document.body.webkitRequestPointerLock ||
                        document.body.msRequestPointerLock)
                      ? (e = li(e))
                        ? (ta(e, t, i, r, 20, "mozpointerlockchange"),
                          ta(e, t, i, r, 20, "webkitpointerlockchange"),
                          ta(e, t, i, r, 20, "mspointerlockchange"),
                          ta(e, t, i, r, 20, "pointerlockchange"))
                        : -4
                      : -1;
                  },
                  sa: function (e, t, i, r, s) {
                    return (function (e, t, i, r, s, o, a) {
                      si.uiEvent || (si.uiEvent = xa(36));
                      var n = {
                        target: (e = li(e)),
                        eventTypeString: "resize",
                        callbackfunc: r,
                        handlerFunc: function (i = event) {
                          if (i.target == e) {
                            var s = document.body;
                            if (s) {
                              var o = si.uiEvent;
                              (T[o >> 2] = i.detail),
                                (T[(o + 4) >> 2] = s.clientWidth),
                                (T[(o + 8) >> 2] = s.clientHeight),
                                (T[(o + 12) >> 2] = innerWidth),
                                (T[(o + 16) >> 2] = innerHeight),
                                (T[(o + 20) >> 2] = outerWidth),
                                (T[(o + 24) >> 2] = outerHeight),
                                (T[(o + 28) >> 2] = pageXOffset),
                                (T[(o + 32) >> 2] = pageYOffset),
                                re(r)(10, o, t) && i.preventDefault();
                            }
                          }
                        },
                        useCapture: i,
                      };
                      return si.registerOrRemoveHandler(n);
                    })(e, t, i, r);
                  },
                  ya: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 25, "touchcancel");
                  },
                  Aa: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 23, "touchend");
                  },
                  za: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 24, "touchmove");
                  },
                  Ba: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 22, "touchstart");
                  },
                  ra: function (e, t, i, r) {
                    return (function (e, t, i, r, s, o, a) {
                      si.visibilityChangeEvent ||
                        (si.visibilityChangeEvent = xa(8));
                      var n = {
                        target: e,
                        eventTypeString: o,
                        callbackfunc: r,
                        handlerFunc: function (e = event) {
                          var i,
                            o,
                            a = si.visibilityChangeEvent;
                          (i = a),
                            (o = [
                              "hidden",
                              "visible",
                              "prerender",
                              "unloaded",
                            ].indexOf(document.visibilityState)),
                            (T[i >> 2] = document.hidden),
                            (T[(i + 4) >> 2] = o),
                            re(r)(s, a, t) && e.preventDefault();
                        },
                        useCapture: i,
                      };
                      return si.registerOrRemoveHandler(n);
                    })(ni[1], e, t, i, 21, "visibilitychange");
                  },
                  Ea: function (e, t, i, r, s) {
                    return (e = li(e))
                      ? void 0 !== e.onwheel
                        ? (function (e, t, i, r, s, o, a) {
                            si.wheelEvent || (si.wheelEvent = xa(104));
                            var n = {
                              target: e,
                              allowsDeferredCalls: !0,
                              eventTypeString: "wheel",
                              callbackfunc: r,
                              handlerFunc: function (i = event) {
                                var s = si.wheelEvent;
                                Qo(s, i, e),
                                  (w[(s + 72) >> 3] = i.deltaX),
                                  (w[(s + 80) >> 3] = i.deltaY),
                                  (w[(s + 88) >> 3] = i.deltaZ),
                                  (T[(s + 96) >> 2] = i.deltaMode),
                                  re(r)(9, s, t) && i.preventDefault();
                              },
                              useCapture: i,
                            };
                            return si.registerOrRemoveHandler(n);
                          })(e, t, i, r)
                        : -1
                      : -4;
                  },
                  Wg: function (e) {
                    n(Ce(e));
                  },
                  K: function () {
                    throw "Please compile your program with async support in order to use asynchronous operations like emscripten_sleep";
                  },
                  Sg: function (e, t, i, r, s) {
                    var o = e + 112,
                      a = E[(o + 36) >> 2],
                      n = E[(o + 40) >> 2],
                      l = E[(o + 44) >> 2],
                      d = E[(o + 48) >> 2],
                      h = E[(o + 52) >> 2],
                      u = !!(64 & h);
                    function c(e) {
                      u ? e() : Kt(e);
                    }
                    var p = (e, i, r) => {
                        c(() => {
                          a ? re(a)(e) : t && t(e);
                        });
                      },
                      g = (e, t, i) => {
                        c(() => {
                          l ? re(l)(e) : r && r(e);
                        });
                      },
                      y = (e, t, r) => {
                        c(() => {
                          n ? re(n)(e) : i && i(e);
                        });
                      },
                      f = (e, t, i) => {
                        c(() => {
                          d ? re(d)(e) : s && s(e);
                        });
                      },
                      v = (e, i, r) => {
                        oa(
                          ra.dbInstance,
                          e,
                          i.response,
                          (e, i, r) => {
                            c(() => {
                              a ? re(a)(e) : t && t(e);
                            });
                          },
                          (e, i, r) => {
                            c(() => {
                              a ? re(a)(e) : t && t(e);
                            });
                          }
                        );
                      },
                      m = Ce(o + 0),
                      S = !!(16 & h),
                      P = !!(4 & h),
                      C = !!(32 & h);
                    if ("EM_IDB_STORE" === m) {
                      var b = E[(o + 84) >> 2],
                        T = E[(o + 88) >> 2];
                      oa(ra.dbInstance, e, x.slice(b, b + T), p, y);
                    } else if ("EM_IDB_DELETE" === m)
                      !(function (e, t, i, r) {
                        if (e) {
                          var s = E[(t + 112 + 64) >> 2];
                          s || (s = E[(t + 8) >> 2]);
                          var o = Ce(s);
                          try {
                            var a = e
                              .transaction(["FILES"], "readwrite")
                              .objectStore("FILES")
                              .delete(o);
                            (a.onsuccess = (e) => {
                              var r = e.target.result;
                              (E[(t + 12) >> 2] = 0),
                                xs(t + 16, 0),
                                xs(t + 24, 0),
                                xs(t + 32, 0),
                                (A[(t + 40) >> 1] = 4),
                                (A[(t + 42) >> 1] = 200),
                                wt("OK", t + 44, 64),
                                i(t, 0, r);
                            }),
                              (a.onerror = (e) => {
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, e);
                              });
                          } catch (e) {
                            r(t, 0, e);
                          }
                        } else r(t, 0, "IndexedDB not available!");
                      })(ra.dbInstance, e, p, y);
                    else if (S) {
                      if (C) return 0;
                      sa(e, P ? v : p, y, g, f);
                    } else
                      !(function (e, t, i, r) {
                        if (e) {
                          var s = E[(t + 112 + 64) >> 2];
                          s || (s = E[(t + 8) >> 2]);
                          var o = Ce(s);
                          try {
                            var a = e
                              .transaction(["FILES"], "readonly")
                              .objectStore("FILES")
                              .get(o);
                            (a.onsuccess = (e) => {
                              if (e.target.result) {
                                var s = e.target.result,
                                  o = s.byteLength || s.length,
                                  a = xa(o);
                                x.set(new Uint8Array(s), a),
                                  (E[(t + 12) >> 2] = a),
                                  xs(t + 16, o),
                                  xs(t + 24, 0),
                                  xs(t + 32, o),
                                  (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 200),
                                  wt("OK", t + 44, 64),
                                  i(t, 0, s);
                              } else
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, "no data");
                            }),
                              (a.onerror = (e) => {
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, e);
                              });
                          } catch (e) {
                            r(t, 0, e);
                          }
                        } else r(t, 0, "IndexedDB not available!");
                      })(
                        ra.dbInstance,
                        e,
                        p,
                        C
                          ? y
                          : P
                          ? (e, t, i) => {
                              sa(e, v, y, g, f);
                            }
                          : (e, t, i) => {
                              sa(e, p, y, g, f);
                            }
                      );
                    return e;
                  },
                  mb: function (e, t) {
                    var i = 0;
                    return (
                      na().forEach(function (r, s) {
                        var o = t + i;
                        (E[(e + 4 * s) >> 2] = o),
                          (function (e, t) {
                            for (var i = 0; i < e.length; ++i)
                              C[t++ >> 0] = e.charCodeAt(i);
                            C[t >> 0] = 0;
                          })(r, o),
                          (i += r.length + 1);
                      }),
                      0
                    );
                  },
                  ob: function (e, t) {
                    var i = na();
                    E[e >> 2] = i.length;
                    var r = 0;
                    return (
                      i.forEach(function (e) {
                        r += e.length + 1;
                      }),
                      (E[t >> 2] = r),
                      0
                    );
                  },
                  ia: function (e) {
                    try {
                      var t = xe.getStreamFromFD(e);
                      return Pe.close(t), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  qb: function (e, t, i, r) {
                    try {
                      var s = (function (e, t, i, r) {
                        for (var s = 0, o = 0; o < i; o++) {
                          var a = E[t >> 2],
                            n = E[(t + 4) >> 2];
                          t += 8;
                          var l = Pe.read(e, C, a, n, r);
                          if (l < 0) return -1;
                          if (((s += l), l < n)) break;
                          void 0 !== r && (r += l);
                        }
                        return s;
                      })(xe.getStreamFromFD(e), t, i);
                      return (E[r >> 2] = s), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  fb: function (e, t, i, r, s) {
                    try {
                      var o =
                        ((l = i) + 2097152) >>> 0 < 4194305 - !!(n = t)
                          ? (n >>> 0) + 4294967296 * l
                          : NaN;
                      if (isNaN(o)) return 61;
                      var a = xe.getStreamFromFD(e);
                      return (
                        Pe.llseek(a, o, r),
                        (q = [
                          a.position >>> 0,
                          (($ = a.position),
                          +Math.abs($) >= 1
                            ? $ > 0
                              ? +Math.floor($ / 4294967296) >>> 0
                              : ~~+Math.ceil(
                                  ($ - +(~~$ >>> 0)) / 4294967296
                                ) >>> 0
                            : 0),
                        ]),
                        (T[s >> 2] = q[0]),
                        (T[(s + 4) >> 2] = q[1]),
                        a.getdents && 0 === o && 0 === r && (a.getdents = null),
                        0
                      );
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                    var n, l;
                  },
                  fa: function (e, t, i, r) {
                    try {
                      var s = (function (e, t, i, r) {
                        for (var s = 0, o = 0; o < i; o++) {
                          var a = E[t >> 2],
                            n = E[(t + 4) >> 2];
                          t += 8;
                          var l = Pe.write(e, C, a, n, r);
                          if (l < 0) return -1;
                          (s += l), void 0 !== r && (r += l);
                        }
                        return s;
                      })(xe.getStreamFromFD(e), t, i);
                      return (E[r >> 2] = s), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  Oa: function () {
                    var e = "";
                    "undefined" != typeof window
                      ? (e = window.location.hostname)
                      : "undefined" != typeof process && (e = "node");
                    var t = he(e) + 1,
                      i = xa(t);
                    return wt(e, i, t), i;
                  },
                  _a: Si,
                  ja: Ci,
                  l: bi,
                  n: Ti,
                  t: Ri,
                  p: Di,
                  fe: ki,
                  Wd: Vi,
                  qe: Fi,
                  N: Hi,
                  $: Yi,
                  qg: Xi,
                  Bg: Wi,
                  pd: qi,
                  Xa: Zi,
                  J: Qi,
                  Cc: tr,
                  Za: rr,
                  sf: or,
                  E: nr,
                  Xg: dr,
                  la: ur,
                  pa: pr,
                  ca: yr,
                  Va: vr,
                  Be: xr,
                  Me: Ar,
                  ma: Er,
                  H: wr,
                  _: Lr,
                  M: Gr,
                  Pa: jr,
                  G: Zr,
                  Sa: Qr,
                  P: ts,
                  gf: rs,
                  O: as,
                  aa: ls,
                  D: hs,
                  Yg: ys,
                  eb: ms,
                  ub: Ps,
                  q: Ts,
                  Eb: Rs,
                  F: Ds,
                  Wa: Ns,
                  ba: Bs,
                  w: zs,
                  nb: js,
                  Xe: io,
                  Zb: so,
                  Ta: ao,
                  Ld: co,
                  Ad: go,
                  Ya: fo,
                  o: mo,
                  h: Po,
                  db: bo,
                  $a: To,
                  cb: wo,
                  bb: Lo,
                  ea: Io,
                  da: ko,
                  ka: Vo,
                  Qa: Fo,
                  Ra: Xo,
                  I: Wo,
                  ph: function (e, t, i) {
                    var r = wa();
                    try {
                      return re(e)(t, i);
                    } catch (e) {
                      if ((Da(r), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  qh: function (e, t, i, r) {
                    var s = wa();
                    try {
                      return re(e)(t, i, r);
                    } catch (e) {
                      if ((Da(s), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  Xf: function (e, t, i, r, s) {
                    var o = wa();
                    try {
                      return re(e)(t, i, r, s);
                    } catch (e) {
                      if ((Da(o), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  hb: function (e, t, i, r, s) {
                    return (function (e, t, i, r) {
                      var s = T[(r + 40) >> 2],
                        o = {
                          tm_sec: T[r >> 2],
                          tm_min: T[(r + 4) >> 2],
                          tm_hour: T[(r + 8) >> 2],
                          tm_mday: T[(r + 12) >> 2],
                          tm_mon: T[(r + 16) >> 2],
                          tm_year: T[(r + 20) >> 2],
                          tm_wday: T[(r + 24) >> 2],
                          tm_yday: T[(r + 28) >> 2],
                          tm_isdst: T[(r + 32) >> 2],
                          tm_gmtoff: T[(r + 36) >> 2],
                          tm_zone: s ? Ce(s) : "",
                        },
                        a = Ce(i),
                        n = {
                          "%c": "%a %b %d %H:%M:%S %Y",
                          "%D": "%m/%d/%y",
                          "%F": "%Y-%m-%d",
                          "%h": "%b",
                          "%r": "%I:%M:%S %p",
                          "%R": "%H:%M",
                          "%T": "%H:%M:%S",
                          "%x": "%m/%d/%y",
                          "%X": "%H:%M:%S",
                          "%Ec": "%c",
                          "%EC": "%C",
                          "%Ex": "%m/%d/%y",
                          "%EX": "%H:%M:%S",
                          "%Ey": "%y",
                          "%EY": "%Y",
                          "%Od": "%d",
                          "%Oe": "%e",
                          "%OH": "%H",
                          "%OI": "%I",
                          "%Om": "%m",
                          "%OM": "%M",
                          "%OS": "%S",
                          "%Ou": "%u",
                          "%OU": "%U",
                          "%OV": "%V",
                          "%Ow": "%w",
                          "%OW": "%W",
                          "%Oy": "%y",
                        };
                      for (var l in n) a = a.replace(new RegExp(l, "g"), n[l]);
                      var d = [
                          "Sunday",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                        ],
                        h = [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December",
                        ];
                      function u(e, t, i) {
                        for (
                          var r = "number" == typeof e ? e.toString() : e || "";
                          r.length < t;

                        )
                          r = i[0] + r;
                        return r;
                      }
                      function c(e, t) {
                        return u(e, t, "0");
                      }
                      function p(e, t) {
                        function i(e) {
                          return e < 0 ? -1 : e > 0 ? 1 : 0;
                        }
                        var r;
                        return (
                          0 === (r = i(e.getFullYear() - t.getFullYear())) &&
                            0 === (r = i(e.getMonth() - t.getMonth())) &&
                            (r = i(e.getDate() - t.getDate())),
                          r
                        );
                      }
                      function g(e) {
                        switch (e.getDay()) {
                          case 0:
                            return new Date(e.getFullYear() - 1, 11, 29);
                          case 1:
                            return e;
                          case 2:
                            return new Date(e.getFullYear(), 0, 3);
                          case 3:
                            return new Date(e.getFullYear(), 0, 2);
                          case 4:
                            return new Date(e.getFullYear(), 0, 1);
                          case 5:
                            return new Date(e.getFullYear() - 1, 11, 31);
                          case 6:
                            return new Date(e.getFullYear() - 1, 11, 30);
                        }
                      }
                      function y(e) {
                        var t = (function (e, t) {
                            for (var i = new Date(e.getTime()); t > 0; ) {
                              var r = Ht(i.getFullYear()),
                                s = i.getMonth(),
                                o = (r ? la : da)[s];
                              if (!(t > o - i.getDate()))
                                return i.setDate(i.getDate() + t), i;
                              (t -= o - i.getDate() + 1),
                                i.setDate(1),
                                s < 11
                                  ? i.setMonth(s + 1)
                                  : (i.setMonth(0),
                                    i.setFullYear(i.getFullYear() + 1));
                            }
                            return i;
                          })(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                          i = new Date(t.getFullYear(), 0, 4),
                          r = new Date(t.getFullYear() + 1, 0, 4),
                          s = g(i),
                          o = g(r);
                        return p(s, t) <= 0
                          ? p(o, t) <= 0
                            ? t.getFullYear() + 1
                            : t.getFullYear()
                          : t.getFullYear() - 1;
                      }
                      var f = {
                        "%a": function (e) {
                          return d[e.tm_wday].substring(0, 3);
                        },
                        "%A": function (e) {
                          return d[e.tm_wday];
                        },
                        "%b": function (e) {
                          return h[e.tm_mon].substring(0, 3);
                        },
                        "%B": function (e) {
                          return h[e.tm_mon];
                        },
                        "%C": function (e) {
                          return c(((e.tm_year + 1900) / 100) | 0, 2);
                        },
                        "%d": function (e) {
                          return c(e.tm_mday, 2);
                        },
                        "%e": function (e) {
                          return u(e.tm_mday, 2, " ");
                        },
                        "%g": function (e) {
                          return y(e).toString().substring(2);
                        },
                        "%G": function (e) {
                          return y(e);
                        },
                        "%H": function (e) {
                          return c(e.tm_hour, 2);
                        },
                        "%I": function (e) {
                          var t = e.tm_hour;
                          return (
                            0 == t ? (t = 12) : t > 12 && (t -= 12), c(t, 2)
                          );
                        },
                        "%j": function (e) {
                          return c(
                            e.tm_mday +
                              (function (e, t) {
                                for (var i = 0, r = 0; r <= t; i += e[r++]);
                                return i;
                              })(Ht(e.tm_year + 1900) ? la : da, e.tm_mon - 1),
                            3
                          );
                        },
                        "%m": function (e) {
                          return c(e.tm_mon + 1, 2);
                        },
                        "%M": function (e) {
                          return c(e.tm_min, 2);
                        },
                        "%n": function () {
                          return "\n";
                        },
                        "%p": function (e) {
                          return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                        },
                        "%S": function (e) {
                          return c(e.tm_sec, 2);
                        },
                        "%t": function () {
                          return "\t";
                        },
                        "%u": function (e) {
                          return e.tm_wday || 7;
                        },
                        "%U": function (e) {
                          var t = e.tm_yday + 7 - e.tm_wday;
                          return c(Math.floor(t / 7), 2);
                        },
                        "%V": function (e) {
                          var t = Math.floor(
                            (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                          );
                          if (
                            ((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && t++,
                            t)
                          ) {
                            if (53 == t) {
                              var i = (e.tm_wday + 371 - e.tm_yday) % 7;
                              4 == i || (3 == i && Ht(e.tm_year)) || (t = 1);
                            }
                          } else {
                            t = 52;
                            var r = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                            (4 == r || (5 == r && Ht((e.tm_year % 400) - 1))) &&
                              t++;
                          }
                          return c(t, 2);
                        },
                        "%w": function (e) {
                          return e.tm_wday;
                        },
                        "%W": function (e) {
                          var t = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                          return c(Math.floor(t / 7), 2);
                        },
                        "%y": function (e) {
                          return (e.tm_year + 1900).toString().substring(2);
                        },
                        "%Y": function (e) {
                          return e.tm_year + 1900;
                        },
                        "%z": function (e) {
                          var t = e.tm_gmtoff,
                            i = t >= 0;
                          return (
                            (t =
                              ((t = Math.abs(t) / 60) / 60) * 100 + (t % 60)),
                            (i ? "+" : "-") + String("0000" + t).slice(-4)
                          );
                        },
                        "%Z": function (e) {
                          return e.tm_zone;
                        },
                        "%%": function () {
                          return "%";
                        },
                      };
                      for (var l in ((a = a.replace(/%%/g, "\0\0")), f))
                        a.includes(l) &&
                          (a = a.replace(new RegExp(l, "g"), f[l](o)));
                      var v = ce((a = a.replace(/\0\0/g, "%")), !1);
                      return v.length > t ? 0 : (ha(v, e), v.length - 1);
                    })(e, t, i, r);
                  },
                },
                xa =
                  ((function () {
                    var t,
                      i,
                      s,
                      o,
                      a = { a: Ca };
                    function n(t, i) {
                      var r,
                        s = t.exports;
                      return (
                        (e.asm = s),
                        (m = e.asm.rh),
                        I(),
                        (D = e.asm.wh),
                        (r = e.asm.sh),
                        k.unshift(r),
                        X(),
                        s
                      );
                    }
                    if ((G(), e.instantiateWasm))
                      try {
                        return e.instantiateWasm(a, n);
                      } catch (e) {
                        v(
                          "Module.instantiateWasm callback failed with error: " +
                            e
                        ),
                          r(e);
                      }
                    ((t = y),
                    (i = W),
                    (s = a),
                    (o = function (e) {
                      n(e.instance);
                    }),
                    t ||
                    "function" != typeof WebAssembly.instantiateStreaming ||
                    Z(i) ||
                    "function" != typeof fetch
                      ? Q(i, s, o)
                      : fetch(i, { credentials: "same-origin" }).then((e) =>
                          WebAssembly.instantiateStreaming(e, s).then(
                            o,
                            function (e) {
                              return (
                                v("wasm streaming compile failed: " + e),
                                v("falling back to ArrayBuffer instantiation"),
                                Q(i, s, o)
                              );
                            }
                          )
                        )).catch(r);
                  })(),
                  (e._malloc = function () {
                    return (xa = e._malloc = e.asm.th).apply(null, arguments);
                  })),
                ba = (e._free = function () {
                  return (ba = e._free = e.asm.uh).apply(null, arguments);
                }),
                Aa = function () {
                  return (Aa = e.asm.vh).apply(null, arguments);
                },
                Ta =
                  ((e._SCRTFillActiveTextureCharArray = function () {
                    return (e._SCRTFillActiveTextureCharArray = e.asm.xh).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._SCRTFillActiveTextureFloat = function () {
                    return (e._SCRTFillActiveTextureFloat = e.asm.yh).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._SCRTFillActiveDoubleVector = function () {
                    return (e._SCRTFillActiveDoubleVector = e.asm.zh).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._main = function () {
                    return (Ta = e._main = e.asm.Ah).apply(null, arguments);
                  })),
                Ea = function () {
                  return (Ea = e.asm.Bh).apply(null, arguments);
                },
                Ra =
                  ((e.__embind_initialize_bindings = function () {
                    return (e.__embind_initialize_bindings = e.asm.Ch).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._setThrew = function () {
                    return (Ra = e._setThrew = e.asm.Dh).apply(null, arguments);
                  })),
                wa = function () {
                  return (wa = e.asm.Eh).apply(null, arguments);
                },
                Da = function () {
                  return (Da = e.asm.Fh).apply(null, arguments);
                },
                La = function () {
                  return (La = e.asm.Gh).apply(null, arguments);
                },
                Ma = function () {
                  return (Ma = e.asm.Hh).apply(null, arguments);
                };
              function Ia(e = []) {
                var t = Ta;
                e.unshift(h);
                var i = e.length,
                  r = La(4 * (i + 1)),
                  s = r >> 2;
                e.forEach((e) => {
                  T[s++] = hi(e);
                }),
                  (T[s] = 0);
                try {
                  var o = t(i, r);
                  return $t(o), o;
                } catch (e) {
                  return Ut(e);
                }
              }
              function Oa(t = d) {
                function r() {
                  Pa ||
                    ((Pa = !0),
                    (e.calledRun = !0),
                    L ||
                      (e.noFSInit || Pe.init.initialized || Pe.init(),
                      (Pe.ignorePermissions = !1),
                      ye.init(),
                      ie(k),
                      ie(_),
                      i(e),
                      e.onRuntimeInitialized && e.onRuntimeInitialized(),
                      ka && Ia(t),
                      (function () {
                        if (e.postRun)
                          for (
                            "function" == typeof e.postRun &&
                            (e.postRun = [e.postRun]);
                            e.postRun.length;

                          )
                            (t = e.postRun.shift()), N.unshift(t);
                        var t;
                        ie(N);
                      })()));
                }
                H > 0 ||
                  ((function () {
                    if (e.preRun)
                      for (
                        "function" == typeof e.preRun &&
                        (e.preRun = [e.preRun]);
                        e.preRun.length;

                      )
                        (t = e.preRun.shift()), O.unshift(t);
                    var t;
                    ie(O);
                  })(),
                  H > 0 ||
                    (e.setStatus
                      ? (e.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            e.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
              }
              if (
                ((e.dynCall_iiiji = function () {
                  return (e.dynCall_iiiji = e.asm.Ih).apply(null, arguments);
                }),
                (e.dynCall_iiij = function () {
                  return (e.dynCall_iiij = e.asm.Jh).apply(null, arguments);
                }),
                (e.dynCall_iijii = function () {
                  return (e.dynCall_iijii = e.asm.Kh).apply(null, arguments);
                }),
                (e.dynCall_iiijiji = function () {
                  return (e.dynCall_iiijiji = e.asm.Lh).apply(null, arguments);
                }),
                (e.dynCall_jiji = function () {
                  return (e.dynCall_jiji = e.asm.Mh).apply(null, arguments);
                }),
                (e.dynCall_ji = function () {
                  return (e.dynCall_ji = e.asm.Nh).apply(null, arguments);
                }),
                (e.dynCall_viijii = function () {
                  return (e.dynCall_viijii = e.asm.Oh).apply(null, arguments);
                }),
                (e.dynCall_iiiiij = function () {
                  return (e.dynCall_iiiiij = e.asm.Ph).apply(null, arguments);
                }),
                (e.dynCall_iiiiijj = function () {
                  return (e.dynCall_iiiiijj = e.asm.Qh).apply(null, arguments);
                }),
                (e.dynCall_iiiiiijj = function () {
                  return (e.dynCall_iiiiiijj = e.asm.Rh).apply(null, arguments);
                }),
                (e.___start_em_js = 395965),
                (e.___stop_em_js = 396533),
                (e.addRunDependency = G),
                (e.removeRunDependency = X),
                (e.FS_createPath = Pe.createPath),
                (e.FS_createDataFile = Pe.createDataFile),
                (e.FS_createLazyFile = Pe.createLazyFile),
                (e.FS_createDevice = Pe.createDevice),
                (e.FS_unlink = Pe.unlink),
                (e.callMain = Ia),
                (e.ccall = ca),
                (e.cwrap = function (e, t, i, r) {
                  var s =
                    !i || i.every((e) => "number" === e || "boolean" === e);
                  return "string" !== t && s && !r
                    ? ua(e)
                    : function () {
                        return ca(e, t, i, arguments);
                      };
                }),
                (e.UTF8ToString = Ce),
                (e.stringToUTF8 = wt),
                (e.lengthBytesUTF8 = he),
                (e.FS_createPreloadedFile = Pe.createPreloadedFile),
                (Y = function e() {
                  Pa || Oa(), Pa || (Y = e);
                }),
                e.preInit)
              )
                for (
                  "function" == typeof e.preInit && (e.preInit = [e.preInit]);
                  e.preInit.length > 0;

                )
                  e.preInit.pop()();
              var ka = !0;
              return (
                e.noInitialRun && (ka = !1),
                Oa(),
                ei &&
                  (ei.getNewId = function (e) {
                    ei.counter++;
                    var t = e.length;
                    if (0 === t) return 1;
                    for (var i = 1; i < t; ++i) if (null === e[i]) return i;
                    return t;
                  }),
                e.ready
              );
            });
        e.exports = i;
      },
      5877: (e) => {
        var t,
          i =
            ((t =
              "undefined" != typeof document && document.currentScript
                ? document.currentScript.src
                : void 0),
            function (e = {}) {
              var i, r;
              ((e = void 0 !== e ? e : {}).ready = new Promise((e, t) => {
                (i = e), (r = t);
              })),
                e.expectedDataFileDownloads ||
                  (e.expectedDataFileDownloads = 0),
                e.expectedDataFileDownloads++,
                e.ENVIRONMENT_IS_PTHREAD ||
                  e.$ww ||
                  (function (t) {
                    "object" == typeof window
                      ? window.encodeURIComponent(
                          window.location.pathname
                            .toString()
                            .substring(
                              0,
                              window.location.pathname
                                .toString()
                                .lastIndexOf("/")
                            ) + "/"
                        )
                      : "undefined" == typeof process &&
                        "undefined" != typeof location &&
                        encodeURIComponent(
                          location.pathname
                            .toString()
                            .substring(
                              0,
                              location.pathname.toString().lastIndexOf("/")
                            ) + "/"
                        );
                    var i = "scichart3d.data",
                      r = "scichart3d.data";
                    "function" != typeof e.locateFilePackage ||
                      e.locateFile ||
                      ((e.locateFile = e.locateFilePackage),
                      v(
                        "warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)"
                      ));
                    var s,
                      o,
                      a,
                      n,
                      l = e.locateFile ? e.locateFile(r, "") : r,
                      d = t.remote_package_size,
                      h = null,
                      u = e.getPreloadedPackage
                        ? e.getPreloadedPackage(l, d)
                        : null;
                    function c() {
                      function r(e, t) {
                        if (!e) throw t + new Error().stack;
                      }
                      function s(e, t, i) {
                        (this.start = e), (this.end = t), (this.audio = i);
                      }
                      e.FS_createPath("/", "assets", !0, !0),
                        (s.prototype = {
                          requests: {},
                          open: function (t, i) {
                            (this.name = i),
                              (this.requests[i] = this),
                              e.addRunDependency(`fp ${this.name}`);
                          },
                          send: function () {},
                          onload: function () {
                            var e = this.byteArray.subarray(
                              this.start,
                              this.end
                            );
                            this.finish(e);
                          },
                          finish: function (t) {
                            e.FS_createDataFile(this.name, null, t, !0, !0, !0),
                              e.removeRunDependency(`fp ${this.name}`),
                              (this.requests[this.name] = null);
                          },
                        });
                      for (var o = t.files, a = 0; a < o.length; ++a)
                        new s(o[a].start, o[a].end, o[a].audio || 0).open(
                          "GET",
                          o[a].filename
                        );
                      function n(i) {
                        r(i, "Loading data file failed."),
                          r(
                            i.constructor.name === ArrayBuffer.name,
                            "bad input to processPackageData"
                          );
                        var o = new Uint8Array(i);
                        s.prototype.byteArray = o;
                        for (var a = t.files, n = 0; n < a.length; ++n)
                          s.prototype.requests[a[n].filename].onload();
                        e.removeRunDependency("datafile_scichart3d.data");
                      }
                      e.addRunDependency("datafile_scichart3d.data"),
                        e.preloadResults || (e.preloadResults = {}),
                        (e.preloadResults[i] = { fromCache: !1 }),
                        u ? (n(u), (u = null)) : (h = n);
                    }
                    u ||
                      ((s = l),
                      (o = d),
                      (a = function (e) {
                        h ? (h(e), (h = null)) : (u = e);
                      }),
                      (n = new XMLHttpRequest()).open("GET", s, !0),
                      (n.responseType = "arraybuffer"),
                      (n.onprogress = function (t) {
                        var i = s,
                          r = o;
                        if ((t.total && (r = t.total), t.loaded)) {
                          n.addedTotal
                            ? (e.dataFileDownloads[i].loaded = t.loaded)
                            : ((n.addedTotal = !0),
                              e.dataFileDownloads || (e.dataFileDownloads = {}),
                              (e.dataFileDownloads[i] = {
                                loaded: t.loaded,
                                total: r,
                              }));
                          var a = 0,
                            l = 0,
                            d = 0;
                          for (var h in e.dataFileDownloads) {
                            var u = e.dataFileDownloads[h];
                            (a += u.total), (l += u.loaded), d++;
                          }
                          (a = Math.ceil(
                            (a * e.expectedDataFileDownloads) / d
                          )),
                            e.setStatus &&
                              e.setStatus(`Downloading data... (${l}/${a})`);
                        } else
                          e.dataFileDownloads ||
                            (e.setStatus && e.setStatus("Downloading data..."));
                      }),
                      (n.onerror = function (e) {
                        throw new Error("NetworkError for: " + s);
                      }),
                      (n.onload = function (e) {
                        if (
                          !(
                            200 == n.status ||
                            304 == n.status ||
                            206 == n.status ||
                            (0 == n.status && n.response)
                          )
                        )
                          throw new Error(n.statusText + " : " + n.responseURL);
                        var t = n.response;
                        a(t);
                      }),
                      n.send(null)),
                      e.calledRun
                        ? c()
                        : (e.preRun || (e.preRun = []), e.preRun.push(c));
                  })({
                    files: [
                      {
                        filename: "/assets/SCRTAssets.web.pkg",
                        start: 0,
                        end: 507809,
                      },
                      {
                        filename: "/assets/TSRAssets.web.pkg",
                        start: 507809,
                        end: 1123273,
                      },
                    ],
                    remote_package_size: 1123273,
                  }),
                li &&
                  (li = function (t) {
                    t = ai(t);
                    var i = ni[t] || document.querySelector(t);
                    return "#canvas" === t && (i = i || e.canvas), i;
                  });
              var s,
                o,
                a,
                n,
                l = Object.assign({}, e),
                d = [],
                h = "./this.program",
                u = (e, t) => {
                  throw t;
                },
                c = !0,
                p = !1,
                g = "";
              (c || p) &&
                (p
                  ? (g = self.location.href)
                  : "undefined" != typeof document &&
                    document.currentScript &&
                    (g = document.currentScript.src),
                t && (g = t),
                (g =
                  0 !== g.indexOf("blob:")
                    ? g.substr(0, g.replace(/[?#].*/, "").lastIndexOf("/") + 1)
                    : ""),
                (s = (e) => {
                  var t = new XMLHttpRequest();
                  return t.open("GET", e, !1), t.send(null), t.responseText;
                }),
                p &&
                  (a = (e) => {
                    var t = new XMLHttpRequest();
                    return (
                      t.open("GET", e, !1),
                      (t.responseType = "arraybuffer"),
                      t.send(null),
                      new Uint8Array(t.response)
                    );
                  }),
                (o = (e, t, i) => {
                  var r = new XMLHttpRequest();
                  r.open("GET", e, !0),
                    (r.responseType = "arraybuffer"),
                    (r.onload = () => {
                      200 == r.status || (0 == r.status && r.response)
                        ? t(r.response)
                        : i();
                    }),
                    (r.onerror = i),
                    r.send(null);
                }),
                (n = (e) => (document.title = e)));
              var y,
                f = e.print || console.log.bind(console),
                v = e.printErr || console.error.bind(console);
              Object.assign(e, l),
                (l = null),
                e.arguments && (d = e.arguments),
                e.thisProgram && (h = e.thisProgram),
                e.quit && (u = e.quit),
                e.wasmBinary && (y = e.wasmBinary);
              var m,
                S = e.noExitRuntime || !0;
              "object" != typeof WebAssembly &&
                j("no native wasm support detected");
              var P,
                C,
                x,
                b,
                A,
                T,
                E,
                R,
                w,
                D,
                L = !1;
              function M(e, t) {
                e || j(t);
              }
              function I() {
                var t = m.buffer;
                (e.HEAP8 = C = new Int8Array(t)),
                  (e.HEAP16 = b = new Int16Array(t)),
                  (e.HEAP32 = T = new Int32Array(t)),
                  (e.HEAPU8 = x = new Uint8Array(t)),
                  (e.HEAPU16 = A = new Uint16Array(t)),
                  (e.HEAPU32 = E = new Uint32Array(t)),
                  (e.HEAPF32 = R = new Float32Array(t)),
                  (e.HEAPF64 = w = new Float64Array(t));
              }
              var O = [],
                k = [],
                _ = [],
                V = [],
                N = [],
                F = 0;
              function B() {
                return S || F > 0;
              }
              var H = 0,
                z = null,
                Y = null;
              function G(t) {
                H++, e.monitorRunDependencies && e.monitorRunDependencies(H);
              }
              function X(t) {
                if (
                  (H--,
                  e.monitorRunDependencies && e.monitorRunDependencies(H),
                  0 == H && (null !== z && (clearInterval(z), (z = null)), Y))
                ) {
                  var i = Y;
                  (Y = null), i();
                }
              }
              function j(t) {
                e.onAbort && e.onAbort(t),
                  v((t = "Aborted(" + t + ")")),
                  (L = !0),
                  (P = 1),
                  (t += ". Build with -sASSERTIONS for more info.");
                var i = new WebAssembly.RuntimeError(t);
                throw (r(i), i);
              }
              var W,
                U,
                $,
                q,
                K = "data:application/octet-stream;base64,";
              function Z(e) {
                return e.startsWith(K);
              }
              function J(e) {
                try {
                  if (e == W && y) return new Uint8Array(y);
                  if (a) return a(e);
                  throw "both async and sync fetching of the wasm failed";
                } catch (e) {
                  j(e);
                }
              }
              function Q(e, t, i) {
                return (function (e) {
                  return y || (!c && !p) || "function" != typeof fetch
                    ? Promise.resolve().then(() => J(e))
                    : fetch(e, { credentials: "same-origin" })
                        .then((t) => {
                          if (!t.ok)
                            throw (
                              "failed to load wasm binary file at '" + e + "'"
                            );
                          return t.arrayBuffer();
                        })
                        .catch(() => J(e));
                })(e)
                  .then((e) => WebAssembly.instantiate(e, t))
                  .then((e) => e)
                  .then(i, (e) => {
                    v("failed to asynchronously prepare wasm: " + e), j(e);
                  });
              }
              Z((W = "scichart3d.wasm")) ||
                ((U = W), (W = e.locateFile ? e.locateFile(U, g) : g + U));
              var ee = {
                357032: () => {
                  var e =
                    navigator.userAgent || navigator.vendor || window.opera;
                  return /windows phone/i.test(e)
                    ? 0
                    : /Android/i.test(e)
                    ? 1
                    : /iPad|iPhone|iPod/.test(e) && !window.MSStream
                    ? 2
                    : 0;
                },
                357302: () => e.getRandomValue(),
                357338: () => {
                  if (void 0 === e.getRandomValue)
                    try {
                      var t = "object" == typeof window ? window : self,
                        i = void 0 !== t.crypto ? t.crypto : t.msCrypto,
                        r = function () {
                          var e = new Uint32Array(1);
                          return i.getRandomValues(e), e[0] >>> 0;
                        };
                      r(), (e.getRandomValue = r);
                    } catch (t) {
                      try {
                        var s = Math.pow(2, 32),
                          o = function () {
                            return (
                              Math.floor(Math.random() * Math.floor(s)) >>> 0
                            );
                          };
                        o(), (e.getRandomValue = o);
                      } catch (e) {
                        throw "No secure random number generator found";
                      }
                    }
                },
                358020: (e) => {
                  var t =
                      Ce(e) + "\n\nAbort/Retry/Ignore/AlwaysIgnore? [ariA] :",
                    i = window.prompt(t, "i");
                  return (
                    null === i && (i = "i"), allocate(ce(i), "i8", ALLOC_NORMAL)
                  );
                },
                358245: () =>
                  "undefined" != typeof AudioContext ||
                  "undefined" != typeof webkitAudioContext,
                358392: () =>
                  (void 0 !== navigator.mediaDevices &&
                    void 0 !== navigator.mediaDevices.getUserMedia) ||
                  void 0 !== navigator.webkitGetUserMedia,
                358626: (t) => {
                  void 0 === e.SDL2 && (e.SDL2 = {});
                  var i,
                    r,
                    s = e.SDL2;
                  return (
                    t ? (s.capture = {}) : (s.audio = {}),
                    s.audioContext ||
                      ("undefined" != typeof AudioContext
                        ? (s.audioContext = new AudioContext())
                        : "undefined" != typeof webkitAudioContext &&
                          (s.audioContext = new webkitAudioContext()),
                      s.audioContext &&
                        ((i = s.audioContext),
                        r ||
                          (r = [document, document.getElementById("canvas")]),
                        ["keydown", "mousedown", "touchstart"].forEach((e) => {
                          r.forEach((t) => {
                            t &&
                              (function (e, t, r) {
                                e.addEventListener(
                                  t,
                                  () => {
                                    "suspended" === i.state && i.resume();
                                  },
                                  { once: !0 }
                                );
                              })(t, e);
                          });
                        }))),
                    void 0 === s.audioContext ? -1 : 0
                  );
                },
                359119: () => e.SDL2.audioContext.sampleRate,
                359187: (t, i, r, s) => {
                  var o = e.SDL2,
                    a = function (e) {
                      void 0 !== o.capture.silenceTimer &&
                        (clearTimeout(o.capture.silenceTimer),
                        (o.capture.silenceTimer = void 0)),
                        (o.capture.mediaStreamNode =
                          o.audioContext.createMediaStreamSource(e)),
                        (o.capture.scriptProcessorNode =
                          o.audioContext.createScriptProcessor(i, t, 1)),
                        (o.capture.scriptProcessorNode.onaudioprocess =
                          function (e) {
                            void 0 !== o &&
                              void 0 !== o.capture &&
                              (e.outputBuffer.getChannelData(0).fill(0),
                              (o.capture.currentCaptureBuffer = e.inputBuffer),
                              se("vi", r, [s]));
                          }),
                        o.capture.mediaStreamNode.connect(
                          o.capture.scriptProcessorNode
                        ),
                        o.capture.scriptProcessorNode.connect(
                          o.audioContext.destination
                        ),
                        (o.capture.stream = e);
                    },
                    n = function (e) {};
                  (o.capture.silenceBuffer = o.audioContext.createBuffer(
                    t,
                    i,
                    o.audioContext.sampleRate
                  )),
                    o.capture.silenceBuffer.getChannelData(0).fill(0),
                    (o.capture.silenceTimer = setTimeout(function () {
                      (o.capture.currentCaptureBuffer =
                        o.capture.silenceBuffer),
                        se("vi", r, [s]);
                    }, (i / o.audioContext.sampleRate) * 1e3)),
                    void 0 !== navigator.mediaDevices &&
                    void 0 !== navigator.mediaDevices.getUserMedia
                      ? navigator.mediaDevices
                          .getUserMedia({ audio: !0, video: !1 })
                          .then(a)
                          .catch(n)
                      : void 0 !== navigator.webkitGetUserMedia &&
                        navigator.webkitGetUserMedia(
                          { audio: !0, video: !1 },
                          a,
                          n
                        );
                },
                360839: (t, i, r, s) => {
                  var o = e.SDL2;
                  (o.audio.scriptProcessorNode =
                    o.audioContext.createScriptProcessor(i, 0, t)),
                    (o.audio.scriptProcessorNode.onaudioprocess = function (e) {
                      void 0 !== o &&
                        void 0 !== o.audio &&
                        ((o.audio.currentOutputBuffer = e.outputBuffer),
                        se("vi", r, [s]));
                    }),
                    o.audio.scriptProcessorNode.connect(
                      o.audioContext.destination
                    );
                },
                361249: (t, i) => {
                  for (
                    var r = e.SDL2,
                      s = r.capture.currentCaptureBuffer.numberOfChannels,
                      o = 0;
                    o < s;
                    ++o
                  ) {
                    var a = r.capture.currentCaptureBuffer.getChannelData(o);
                    if (a.length != i)
                      throw (
                        "Web Audio capture buffer length mismatch! Destination size: " +
                        a.length +
                        " samples vs expected " +
                        i +
                        " samples!"
                      );
                    if (1 == s)
                      for (var n = 0; n < i; ++n) oe(t + 4 * n, a[n], "float");
                    else
                      for (n = 0; n < i; ++n)
                        oe(t + 4 * (n * s + o), a[n], "float");
                  }
                },
                361854: (t, i) => {
                  for (
                    var r = e.SDL2,
                      s = r.audio.currentOutputBuffer.numberOfChannels,
                      o = 0;
                    o < s;
                    ++o
                  ) {
                    var a = r.audio.currentOutputBuffer.getChannelData(o);
                    if (a.length != i)
                      throw (
                        "Web Audio output buffer length mismatch! Destination size: " +
                        a.length +
                        " samples vs expected " +
                        i +
                        " samples!"
                      );
                    for (var n = 0; n < i; ++n)
                      a[n] = R[(t + ((n * s + o) << 2)) >> 2];
                  }
                },
                362334: (t) => {
                  var i = e.SDL2;
                  if (t) {
                    if (
                      (void 0 !== i.capture.silenceTimer &&
                        clearTimeout(i.capture.silenceTimer),
                      void 0 !== i.capture.stream)
                    ) {
                      for (
                        var r = i.capture.stream.getAudioTracks(), s = 0;
                        s < r.length;
                        s++
                      )
                        i.capture.stream.removeTrack(r[s]);
                      i.capture.stream = void 0;
                    }
                    void 0 !== i.capture.scriptProcessorNode &&
                      ((i.capture.scriptProcessorNode.onaudioprocess =
                        function (e) {}),
                      i.capture.scriptProcessorNode.disconnect(),
                      (i.capture.scriptProcessorNode = void 0)),
                      void 0 !== i.capture.mediaStreamNode &&
                        (i.capture.mediaStreamNode.disconnect(),
                        (i.capture.mediaStreamNode = void 0)),
                      void 0 !== i.capture.silenceBuffer &&
                        (i.capture.silenceBuffer = void 0),
                      (i.capture = void 0);
                  } else
                    null != i.audio.scriptProcessorNode &&
                      (i.audio.scriptProcessorNode.disconnect(),
                      (i.audio.scriptProcessorNode = void 0)),
                      (i.audio = void 0);
                  void 0 !== i.audioContext &&
                    void 0 === i.audio &&
                    void 0 === i.capture &&
                    (i.audioContext.close(), (i.audioContext = void 0));
                },
                363506: (t, i, r) => {
                  var s = t,
                    o = i,
                    a = r;
                  e.SDL2 || (e.SDL2 = {});
                  var n = e.SDL2;
                  n.ctxCanvas !== e.canvas &&
                    ((n.ctx = e.createContext(e.canvas, !1, !0)),
                    (n.ctxCanvas = e.canvas)),
                    (n.w === s && n.h === o && n.imageCtx === n.ctx) ||
                      ((n.image = n.ctx.createImageData(s, o)),
                      (n.w = s),
                      (n.h = o),
                      (n.imageCtx = n.ctx));
                  var l,
                    d = n.image.data,
                    h = a >> 2,
                    u = 0;
                  if (
                    "undefined" != typeof CanvasPixelArray &&
                    d instanceof CanvasPixelArray
                  )
                    for (l = d.length; u < l; ) {
                      var c = T[h];
                      (d[u] = 255 & c),
                        (d[u + 1] = (c >> 8) & 255),
                        (d[u + 2] = (c >> 16) & 255),
                        (d[u + 3] = 255),
                        h++,
                        (u += 4);
                    }
                  else {
                    n.data32Data !== d &&
                      ((n.data32 = new Int32Array(d.buffer)),
                      (n.data8 = new Uint8Array(d.buffer)),
                      (n.data32Data = d));
                    var p = n.data32;
                    (l = p.length), p.set(T.subarray(h, h + l));
                    var g = n.data8,
                      y = 3,
                      f = y + 4 * l;
                    if (l % 8 == 0)
                      for (; y < f; )
                        (g[y] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (g[(y = (y + 4) | 0)] = 255),
                          (y = (y + 4) | 0);
                    else for (; y < f; ) (g[y] = 255), (y = (y + 4) | 0);
                  }
                  n.ctx.putImageData(n.image, 0, 0);
                },
                364975: (e, t, i, r, s) => {
                  var o = e,
                    a = t,
                    n = i,
                    l = r,
                    d = s,
                    h = document.createElement("canvas");
                  (h.width = o), (h.height = a);
                  var u,
                    c = h.getContext("2d"),
                    p = c.createImageData(o, a),
                    g = p.data,
                    y = d >> 2,
                    f = 0;
                  if (
                    "undefined" != typeof CanvasPixelArray &&
                    g instanceof CanvasPixelArray
                  )
                    for (u = g.length; f < u; ) {
                      var v = T[y];
                      (g[f] = 255 & v),
                        (g[f + 1] = (v >> 8) & 255),
                        (g[f + 2] = (v >> 16) & 255),
                        (g[f + 3] = (v >> 24) & 255),
                        y++,
                        (f += 4);
                    }
                  else {
                    var m = new Int32Array(g.buffer);
                    (u = m.length), m.set(T.subarray(y, y + u));
                  }
                  c.putImageData(p, 0, 0);
                  var S =
                      0 === n && 0 === l
                        ? "url(" + h.toDataURL() + "), auto"
                        : "url(" +
                          h.toDataURL() +
                          ") " +
                          n +
                          " " +
                          l +
                          ", auto",
                    P = xa(S.length + 1);
                  return wt(S, P, S.length + 1), P;
                },
                365964: (t) => {
                  e.canvas && (e.canvas.style.cursor = Ce(t));
                },
                366047: () => {
                  e.canvas && (e.canvas.style.cursor = "none");
                },
                366116: () => window.innerWidth,
                366146: () => window.innerHeight,
              };
              function te(e) {
                (this.name = "ExitStatus"),
                  (this.message = `Program terminated with exit(${e})`),
                  (this.status = e);
              }
              function ie(t) {
                for (; t.length > 0; ) t.shift()(e);
              }
              function re(e) {
                return D.get(e);
              }
              function se(t, i, r) {
                return t.includes("j")
                  ? (function (t, i, r) {
                      var s = e["dynCall_" + t];
                      return r && r.length
                        ? s.apply(null, [i].concat(r))
                        : s.call(null, i);
                    })(t, i, r)
                  : re(i).apply(null, r);
              }
              function oe(e, t, i = "i8") {
                switch ((i.endsWith("*") && (i = "*"), i)) {
                  case "i1":
                  case "i8":
                    C[e >> 0] = t;
                    break;
                  case "i16":
                    b[e >> 1] = t;
                    break;
                  case "i32":
                    T[e >> 2] = t;
                    break;
                  case "i64":
                    (q = [
                      t >>> 0,
                      (($ = t),
                      +Math.abs($) >= 1
                        ? $ > 0
                          ? +Math.floor($ / 4294967296) >>> 0
                          : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>> 0
                        : 0),
                    ]),
                      (T[e >> 2] = q[0]),
                      (T[(e + 4) >> 2] = q[1]);
                    break;
                  case "float":
                    R[e >> 2] = t;
                    break;
                  case "double":
                    w[e >> 3] = t;
                    break;
                  case "*":
                    E[e >> 2] = t;
                    break;
                  default:
                    j(`invalid type for setValue: ${i}`);
                }
              }
              function ae(e) {
                (this.excPtr = e),
                  (this.ptr = e - 24),
                  (this.set_type = function (e) {
                    E[(this.ptr + 4) >> 2] = e;
                  }),
                  (this.get_type = function () {
                    return E[(this.ptr + 4) >> 2];
                  }),
                  (this.set_destructor = function (e) {
                    E[(this.ptr + 8) >> 2] = e;
                  }),
                  (this.get_destructor = function () {
                    return E[(this.ptr + 8) >> 2];
                  }),
                  (this.set_caught = function (e) {
                    (e = e ? 1 : 0), (C[(this.ptr + 12) >> 0] = e);
                  }),
                  (this.get_caught = function () {
                    return 0 != C[(this.ptr + 12) >> 0];
                  }),
                  (this.set_rethrown = function (e) {
                    (e = e ? 1 : 0), (C[(this.ptr + 13) >> 0] = e);
                  }),
                  (this.get_rethrown = function () {
                    return 0 != C[(this.ptr + 13) >> 0];
                  }),
                  (this.init = function (e, t) {
                    this.set_adjusted_ptr(0),
                      this.set_type(e),
                      this.set_destructor(t);
                  }),
                  (this.set_adjusted_ptr = function (e) {
                    E[(this.ptr + 16) >> 2] = e;
                  }),
                  (this.get_adjusted_ptr = function () {
                    return E[(this.ptr + 16) >> 2];
                  }),
                  (this.get_exception_ptr = function () {
                    if (Ma(this.get_type())) return E[this.excPtr >> 2];
                    var e = this.get_adjusted_ptr();
                    return 0 !== e ? e : this.excPtr;
                  });
              }
              var ne = {
                isAbs: (e) => "/" === e.charAt(0),
                splitPath: (e) =>
                  /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/
                    .exec(e)
                    .slice(1),
                normalizeArray: (e, t) => {
                  for (var i = 0, r = e.length - 1; r >= 0; r--) {
                    var s = e[r];
                    "." === s
                      ? e.splice(r, 1)
                      : ".." === s
                      ? (e.splice(r, 1), i++)
                      : i && (e.splice(r, 1), i--);
                  }
                  if (t) for (; i; i--) e.unshift("..");
                  return e;
                },
                normalize: (e) => {
                  var t = ne.isAbs(e),
                    i = "/" === e.substr(-1);
                  return (
                    (e = ne
                      .normalizeArray(
                        e.split("/").filter((e) => !!e),
                        !t
                      )
                      .join("/")) ||
                      t ||
                      (e = "."),
                    e && i && (e += "/"),
                    (t ? "/" : "") + e
                  );
                },
                dirname: (e) => {
                  var t = ne.splitPath(e),
                    i = t[0],
                    r = t[1];
                  return i || r
                    ? (r && (r = r.substr(0, r.length - 1)), i + r)
                    : ".";
                },
                basename: (e) => {
                  if ("/" === e) return "/";
                  var t = (e = (e = ne.normalize(e)).replace(
                    /\/$/,
                    ""
                  )).lastIndexOf("/");
                  return -1 === t ? e : e.substr(t + 1);
                },
                join: function () {
                  var e = Array.prototype.slice.call(arguments);
                  return ne.normalize(e.join("/"));
                },
                join2: (e, t) => ne.normalize(e + "/" + t),
              };
              function le(e) {
                return (le = (function () {
                  if (
                    "object" == typeof crypto &&
                    "function" == typeof crypto.getRandomValues
                  )
                    return (e) => crypto.getRandomValues(e);
                  j("initRandomDevice");
                })())(e);
              }
              var de = {
                resolve: function () {
                  for (
                    var e = "", t = !1, i = arguments.length - 1;
                    i >= -1 && !t;
                    i--
                  ) {
                    var r = i >= 0 ? arguments[i] : Pe.cwd();
                    if ("string" != typeof r)
                      throw new TypeError(
                        "Arguments to path.resolve must be strings"
                      );
                    if (!r) return "";
                    (e = r + "/" + e), (t = ne.isAbs(r));
                  }
                  return (
                    (t ? "/" : "") +
                      (e = ne
                        .normalizeArray(
                          e.split("/").filter((e) => !!e),
                          !t
                        )
                        .join("/")) || "."
                  );
                },
                relative: (e, t) => {
                  function i(e) {
                    for (var t = 0; t < e.length && "" === e[t]; t++);
                    for (var i = e.length - 1; i >= 0 && "" === e[i]; i--);
                    return t > i ? [] : e.slice(t, i - t + 1);
                  }
                  (e = de.resolve(e).substr(1)), (t = de.resolve(t).substr(1));
                  for (
                    var r = i(e.split("/")),
                      s = i(t.split("/")),
                      o = Math.min(r.length, s.length),
                      a = o,
                      n = 0;
                    n < o;
                    n++
                  )
                    if (r[n] !== s[n]) {
                      a = n;
                      break;
                    }
                  var l = [];
                  for (n = a; n < r.length; n++) l.push("..");
                  return (l = l.concat(s.slice(a))).join("/");
                },
              };
              function he(e) {
                for (var t = 0, i = 0; i < e.length; ++i) {
                  var r = e.charCodeAt(i);
                  r <= 127
                    ? t++
                    : r <= 2047
                    ? (t += 2)
                    : r >= 55296 && r <= 57343
                    ? ((t += 4), ++i)
                    : (t += 3);
                }
                return t;
              }
              function ue(e, t, i, r) {
                if (!(r > 0)) return 0;
                for (var s = i, o = i + r - 1, a = 0; a < e.length; ++a) {
                  var n = e.charCodeAt(a);
                  if (
                    (n >= 55296 &&
                      n <= 57343 &&
                      (n =
                        (65536 + ((1023 & n) << 10)) |
                        (1023 & e.charCodeAt(++a))),
                    n <= 127)
                  ) {
                    if (i >= o) break;
                    t[i++] = n;
                  } else if (n <= 2047) {
                    if (i + 1 >= o) break;
                    (t[i++] = 192 | (n >> 6)), (t[i++] = 128 | (63 & n));
                  } else if (n <= 65535) {
                    if (i + 2 >= o) break;
                    (t[i++] = 224 | (n >> 12)),
                      (t[i++] = 128 | ((n >> 6) & 63)),
                      (t[i++] = 128 | (63 & n));
                  } else {
                    if (i + 3 >= o) break;
                    (t[i++] = 240 | (n >> 18)),
                      (t[i++] = 128 | ((n >> 12) & 63)),
                      (t[i++] = 128 | ((n >> 6) & 63)),
                      (t[i++] = 128 | (63 & n));
                  }
                }
                return (t[i] = 0), i - s;
              }
              function ce(e, t, i) {
                var r = i > 0 ? i : he(e) + 1,
                  s = new Array(r),
                  o = ue(e, s, 0, s.length);
                return t && (s.length = o), s;
              }
              var pe =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf8")
                  : void 0;
              function ge(e, t, i) {
                for (var r = t + i, s = t; e[s] && !(s >= r); ) ++s;
                if (s - t > 16 && e.buffer && pe)
                  return pe.decode(e.subarray(t, s));
                for (var o = ""; t < s; ) {
                  var a = e[t++];
                  if (128 & a) {
                    var n = 63 & e[t++];
                    if (192 != (224 & a)) {
                      var l = 63 & e[t++];
                      if (
                        (a =
                          224 == (240 & a)
                            ? ((15 & a) << 12) | (n << 6) | l
                            : ((7 & a) << 18) |
                              (n << 12) |
                              (l << 6) |
                              (63 & e[t++])) < 65536
                      )
                        o += String.fromCharCode(a);
                      else {
                        var d = a - 65536;
                        o += String.fromCharCode(
                          55296 | (d >> 10),
                          56320 | (1023 & d)
                        );
                      }
                    } else o += String.fromCharCode(((31 & a) << 6) | n);
                  } else o += String.fromCharCode(a);
                }
                return o;
              }
              var ye = {
                ttys: [],
                init: function () {},
                shutdown: function () {},
                register: function (e, t) {
                  (ye.ttys[e] = { input: [], output: [], ops: t }),
                    Pe.registerDevice(e, ye.stream_ops);
                },
                stream_ops: {
                  open: function (e) {
                    var t = ye.ttys[e.node.rdev];
                    if (!t) throw new Pe.ErrnoError(43);
                    (e.tty = t), (e.seekable = !1);
                  },
                  close: function (e) {
                    e.tty.ops.fsync(e.tty);
                  },
                  fsync: function (e) {
                    e.tty.ops.fsync(e.tty);
                  },
                  read: function (e, t, i, r, s) {
                    if (!e.tty || !e.tty.ops.get_char)
                      throw new Pe.ErrnoError(60);
                    for (var o = 0, a = 0; a < r; a++) {
                      var n;
                      try {
                        n = e.tty.ops.get_char(e.tty);
                      } catch (e) {
                        throw new Pe.ErrnoError(29);
                      }
                      if (void 0 === n && 0 === o) throw new Pe.ErrnoError(6);
                      if (null == n) break;
                      o++, (t[i + a] = n);
                    }
                    return o && (e.node.timestamp = Date.now()), o;
                  },
                  write: function (e, t, i, r, s) {
                    if (!e.tty || !e.tty.ops.put_char)
                      throw new Pe.ErrnoError(60);
                    try {
                      for (var o = 0; o < r; o++)
                        e.tty.ops.put_char(e.tty, t[i + o]);
                    } catch (e) {
                      throw new Pe.ErrnoError(29);
                    }
                    return r && (e.node.timestamp = Date.now()), o;
                  },
                },
                default_tty_ops: {
                  get_char: function (e) {
                    if (!e.input.length) {
                      var t = null;
                      if (
                        ("undefined" != typeof window &&
                        "function" == typeof window.prompt
                          ? null !== (t = window.prompt("Input: ")) &&
                            (t += "\n")
                          : "function" == typeof readline &&
                            null !== (t = readline()) &&
                            (t += "\n"),
                        !t)
                      )
                        return null;
                      e.input = ce(t, !0);
                    }
                    return e.input.shift();
                  },
                  put_char: function (e, t) {
                    null === t || 10 === t
                      ? (f(ge(e.output, 0)), (e.output = []))
                      : 0 != t && e.output.push(t);
                  },
                  fsync: function (e) {
                    e.output &&
                      e.output.length > 0 &&
                      (f(ge(e.output, 0)), (e.output = []));
                  },
                },
                default_tty1_ops: {
                  put_char: function (e, t) {
                    null === t || 10 === t
                      ? (v(ge(e.output, 0)), (e.output = []))
                      : 0 != t && e.output.push(t);
                  },
                  fsync: function (e) {
                    e.output &&
                      e.output.length > 0 &&
                      (v(ge(e.output, 0)), (e.output = []));
                  },
                },
              };
              function fe(e) {
                j();
              }
              var ve = {
                  ops_table: null,
                  mount: function (e) {
                    return ve.createNode(null, "/", 16895, 0);
                  },
                  createNode: function (e, t, i, r) {
                    if (Pe.isBlkdev(i) || Pe.isFIFO(i))
                      throw new Pe.ErrnoError(63);
                    ve.ops_table ||
                      (ve.ops_table = {
                        dir: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                            lookup: ve.node_ops.lookup,
                            mknod: ve.node_ops.mknod,
                            rename: ve.node_ops.rename,
                            unlink: ve.node_ops.unlink,
                            rmdir: ve.node_ops.rmdir,
                            readdir: ve.node_ops.readdir,
                            symlink: ve.node_ops.symlink,
                          },
                          stream: { llseek: ve.stream_ops.llseek },
                        },
                        file: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                          },
                          stream: {
                            llseek: ve.stream_ops.llseek,
                            read: ve.stream_ops.read,
                            write: ve.stream_ops.write,
                            allocate: ve.stream_ops.allocate,
                            mmap: ve.stream_ops.mmap,
                            msync: ve.stream_ops.msync,
                          },
                        },
                        link: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                            readlink: ve.node_ops.readlink,
                          },
                          stream: {},
                        },
                        chrdev: {
                          node: {
                            getattr: ve.node_ops.getattr,
                            setattr: ve.node_ops.setattr,
                          },
                          stream: Pe.chrdev_stream_ops,
                        },
                      });
                    var s = Pe.createNode(e, t, i, r);
                    return (
                      Pe.isDir(s.mode)
                        ? ((s.node_ops = ve.ops_table.dir.node),
                          (s.stream_ops = ve.ops_table.dir.stream),
                          (s.contents = {}))
                        : Pe.isFile(s.mode)
                        ? ((s.node_ops = ve.ops_table.file.node),
                          (s.stream_ops = ve.ops_table.file.stream),
                          (s.usedBytes = 0),
                          (s.contents = null))
                        : Pe.isLink(s.mode)
                        ? ((s.node_ops = ve.ops_table.link.node),
                          (s.stream_ops = ve.ops_table.link.stream))
                        : Pe.isChrdev(s.mode) &&
                          ((s.node_ops = ve.ops_table.chrdev.node),
                          (s.stream_ops = ve.ops_table.chrdev.stream)),
                      (s.timestamp = Date.now()),
                      e && ((e.contents[t] = s), (e.timestamp = s.timestamp)),
                      s
                    );
                  },
                  getFileDataAsTypedArray: function (e) {
                    return e.contents
                      ? e.contents.subarray
                        ? e.contents.subarray(0, e.usedBytes)
                        : new Uint8Array(e.contents)
                      : new Uint8Array(0);
                  },
                  expandFileStorage: function (e, t) {
                    var i = e.contents ? e.contents.length : 0;
                    if (!(i >= t)) {
                      (t = Math.max(t, (i * (i < 1048576 ? 2 : 1.125)) >>> 0)),
                        0 != i && (t = Math.max(t, 256));
                      var r = e.contents;
                      (e.contents = new Uint8Array(t)),
                        e.usedBytes > 0 &&
                          e.contents.set(r.subarray(0, e.usedBytes), 0);
                    }
                  },
                  resizeFileStorage: function (e, t) {
                    if (e.usedBytes != t)
                      if (0 == t) (e.contents = null), (e.usedBytes = 0);
                      else {
                        var i = e.contents;
                        (e.contents = new Uint8Array(t)),
                          i &&
                            e.contents.set(
                              i.subarray(0, Math.min(t, e.usedBytes))
                            ),
                          (e.usedBytes = t);
                      }
                  },
                  node_ops: {
                    getattr: function (e) {
                      var t = {};
                      return (
                        (t.dev = Pe.isChrdev(e.mode) ? e.id : 1),
                        (t.ino = e.id),
                        (t.mode = e.mode),
                        (t.nlink = 1),
                        (t.uid = 0),
                        (t.gid = 0),
                        (t.rdev = e.rdev),
                        Pe.isDir(e.mode)
                          ? (t.size = 4096)
                          : Pe.isFile(e.mode)
                          ? (t.size = e.usedBytes)
                          : Pe.isLink(e.mode)
                          ? (t.size = e.link.length)
                          : (t.size = 0),
                        (t.atime = new Date(e.timestamp)),
                        (t.mtime = new Date(e.timestamp)),
                        (t.ctime = new Date(e.timestamp)),
                        (t.blksize = 4096),
                        (t.blocks = Math.ceil(t.size / t.blksize)),
                        t
                      );
                    },
                    setattr: function (e, t) {
                      void 0 !== t.mode && (e.mode = t.mode),
                        void 0 !== t.timestamp && (e.timestamp = t.timestamp),
                        void 0 !== t.size && ve.resizeFileStorage(e, t.size);
                    },
                    lookup: function (e, t) {
                      throw Pe.genericErrors[44];
                    },
                    mknod: function (e, t, i, r) {
                      return ve.createNode(e, t, i, r);
                    },
                    rename: function (e, t, i) {
                      if (Pe.isDir(e.mode)) {
                        var r;
                        try {
                          r = Pe.lookupNode(t, i);
                        } catch (e) {}
                        if (r)
                          for (var s in r.contents) throw new Pe.ErrnoError(55);
                      }
                      delete e.parent.contents[e.name],
                        (e.parent.timestamp = Date.now()),
                        (e.name = i),
                        (t.contents[i] = e),
                        (t.timestamp = e.parent.timestamp),
                        (e.parent = t);
                    },
                    unlink: function (e, t) {
                      delete e.contents[t], (e.timestamp = Date.now());
                    },
                    rmdir: function (e, t) {
                      var i = Pe.lookupNode(e, t);
                      for (var r in i.contents) throw new Pe.ErrnoError(55);
                      delete e.contents[t], (e.timestamp = Date.now());
                    },
                    readdir: function (e) {
                      var t = [".", ".."];
                      for (var i in e.contents)
                        e.contents.hasOwnProperty(i) && t.push(i);
                      return t;
                    },
                    symlink: function (e, t, i) {
                      var r = ve.createNode(e, t, 41471, 0);
                      return (r.link = i), r;
                    },
                    readlink: function (e) {
                      if (!Pe.isLink(e.mode)) throw new Pe.ErrnoError(28);
                      return e.link;
                    },
                  },
                  stream_ops: {
                    read: function (e, t, i, r, s) {
                      var o = e.node.contents;
                      if (s >= e.node.usedBytes) return 0;
                      var a = Math.min(e.node.usedBytes - s, r);
                      if (a > 8 && o.subarray) t.set(o.subarray(s, s + a), i);
                      else for (var n = 0; n < a; n++) t[i + n] = o[s + n];
                      return a;
                    },
                    write: function (e, t, i, r, s, o) {
                      if ((t.buffer === C.buffer && (o = !1), !r)) return 0;
                      var a = e.node;
                      if (
                        ((a.timestamp = Date.now()),
                        t.subarray && (!a.contents || a.contents.subarray))
                      ) {
                        if (o)
                          return (
                            (a.contents = t.subarray(i, i + r)),
                            (a.usedBytes = r),
                            r
                          );
                        if (0 === a.usedBytes && 0 === s)
                          return (
                            (a.contents = t.slice(i, i + r)),
                            (a.usedBytes = r),
                            r
                          );
                        if (s + r <= a.usedBytes)
                          return a.contents.set(t.subarray(i, i + r), s), r;
                      }
                      if (
                        (ve.expandFileStorage(a, s + r),
                        a.contents.subarray && t.subarray)
                      )
                        a.contents.set(t.subarray(i, i + r), s);
                      else
                        for (var n = 0; n < r; n++)
                          a.contents[s + n] = t[i + n];
                      return (a.usedBytes = Math.max(a.usedBytes, s + r)), r;
                    },
                    llseek: function (e, t, i) {
                      var r = t;
                      if (
                        (1 === i
                          ? (r += e.position)
                          : 2 === i &&
                            Pe.isFile(e.node.mode) &&
                            (r += e.node.usedBytes),
                        r < 0)
                      )
                        throw new Pe.ErrnoError(28);
                      return r;
                    },
                    allocate: function (e, t, i) {
                      ve.expandFileStorage(e.node, t + i),
                        (e.node.usedBytes = Math.max(e.node.usedBytes, t + i));
                    },
                    mmap: function (e, t, i, r, s) {
                      if (!Pe.isFile(e.node.mode)) throw new Pe.ErrnoError(43);
                      var o,
                        a,
                        n = e.node.contents;
                      if (2 & s || n.buffer !== C.buffer) {
                        if (
                          ((i > 0 || i + t < n.length) &&
                            (n = n.subarray
                              ? n.subarray(i, i + t)
                              : Array.prototype.slice.call(n, i, i + t)),
                          (a = !0),
                          !(o = fe()))
                        )
                          throw new Pe.ErrnoError(48);
                        C.set(n, o);
                      } else (a = !1), (o = n.byteOffset);
                      return { ptr: o, allocated: a };
                    },
                    msync: function (e, t, i, r, s) {
                      return ve.stream_ops.write(e, t, 0, r, i, !1), 0;
                    },
                  },
                },
                me = e.preloadPlugins || [];
              function Se(e, t) {
                var i = 0;
                return e && (i |= 365), t && (i |= 146), i;
              }
              var Pe = {
                root: null,
                mounts: [],
                devices: {},
                streams: [],
                nextInode: 1,
                nameTable: null,
                currentPath: "/",
                initialized: !1,
                ignorePermissions: !0,
                ErrnoError: null,
                genericErrors: {},
                filesystems: null,
                syncFSRequests: 0,
                lookupPath: (e, t = {}) => {
                  if (!(e = de.resolve(e))) return { path: "", node: null };
                  if (
                    (t = Object.assign(
                      { follow_mount: !0, recurse_count: 0 },
                      t
                    )).recurse_count > 8
                  )
                    throw new Pe.ErrnoError(32);
                  for (
                    var i = e.split("/").filter((e) => !!e),
                      r = Pe.root,
                      s = "/",
                      o = 0;
                    o < i.length;
                    o++
                  ) {
                    var a = o === i.length - 1;
                    if (a && t.parent) break;
                    if (
                      ((r = Pe.lookupNode(r, i[o])),
                      (s = ne.join2(s, i[o])),
                      Pe.isMountpoint(r) &&
                        (!a || (a && t.follow_mount)) &&
                        (r = r.mounted.root),
                      !a || t.follow)
                    )
                      for (var n = 0; Pe.isLink(r.mode); ) {
                        var l = Pe.readlink(s);
                        if (
                          ((s = de.resolve(ne.dirname(s), l)),
                          (r = Pe.lookupPath(s, {
                            recurse_count: t.recurse_count + 1,
                          }).node),
                          n++ > 40)
                        )
                          throw new Pe.ErrnoError(32);
                      }
                  }
                  return { path: s, node: r };
                },
                getPath: (e) => {
                  for (var t; ; ) {
                    if (Pe.isRoot(e)) {
                      var i = e.mount.mountpoint;
                      return t
                        ? "/" !== i[i.length - 1]
                          ? `${i}/${t}`
                          : i + t
                        : i;
                    }
                    (t = t ? `${e.name}/${t}` : e.name), (e = e.parent);
                  }
                },
                hashName: (e, t) => {
                  for (var i = 0, r = 0; r < t.length; r++)
                    i = ((i << 5) - i + t.charCodeAt(r)) | 0;
                  return ((e + i) >>> 0) % Pe.nameTable.length;
                },
                hashAddNode: (e) => {
                  var t = Pe.hashName(e.parent.id, e.name);
                  (e.name_next = Pe.nameTable[t]), (Pe.nameTable[t] = e);
                },
                hashRemoveNode: (e) => {
                  var t = Pe.hashName(e.parent.id, e.name);
                  if (Pe.nameTable[t] === e) Pe.nameTable[t] = e.name_next;
                  else
                    for (var i = Pe.nameTable[t]; i; ) {
                      if (i.name_next === e) {
                        i.name_next = e.name_next;
                        break;
                      }
                      i = i.name_next;
                    }
                },
                lookupNode: (e, t) => {
                  var i = Pe.mayLookup(e);
                  if (i) throw new Pe.ErrnoError(i, e);
                  for (
                    var r = Pe.hashName(e.id, t), s = Pe.nameTable[r];
                    s;
                    s = s.name_next
                  ) {
                    var o = s.name;
                    if (s.parent.id === e.id && o === t) return s;
                  }
                  return Pe.lookup(e, t);
                },
                createNode: (e, t, i, r) => {
                  var s = new Pe.FSNode(e, t, i, r);
                  return Pe.hashAddNode(s), s;
                },
                destroyNode: (e) => {
                  Pe.hashRemoveNode(e);
                },
                isRoot: (e) => e === e.parent,
                isMountpoint: (e) => !!e.mounted,
                isFile: (e) => 32768 == (61440 & e),
                isDir: (e) => 16384 == (61440 & e),
                isLink: (e) => 40960 == (61440 & e),
                isChrdev: (e) => 8192 == (61440 & e),
                isBlkdev: (e) => 24576 == (61440 & e),
                isFIFO: (e) => 4096 == (61440 & e),
                isSocket: (e) => 49152 == (49152 & e),
                flagsToPermissionString: (e) => {
                  var t = ["r", "w", "rw"][3 & e];
                  return 512 & e && (t += "w"), t;
                },
                nodePermissions: (e, t) =>
                  Pe.ignorePermissions ||
                  ((!t.includes("r") || 292 & e.mode) &&
                    (!t.includes("w") || 146 & e.mode) &&
                    (!t.includes("x") || 73 & e.mode))
                    ? 0
                    : 2,
                mayLookup: (e) =>
                  Pe.nodePermissions(e, "x") || (e.node_ops.lookup ? 0 : 2),
                mayCreate: (e, t) => {
                  try {
                    return Pe.lookupNode(e, t), 20;
                  } catch (e) {}
                  return Pe.nodePermissions(e, "wx");
                },
                mayDelete: (e, t, i) => {
                  var r;
                  try {
                    r = Pe.lookupNode(e, t);
                  } catch (e) {
                    return e.errno;
                  }
                  var s = Pe.nodePermissions(e, "wx");
                  if (s) return s;
                  if (i) {
                    if (!Pe.isDir(r.mode)) return 54;
                    if (Pe.isRoot(r) || Pe.getPath(r) === Pe.cwd()) return 10;
                  } else if (Pe.isDir(r.mode)) return 31;
                  return 0;
                },
                mayOpen: (e, t) =>
                  e
                    ? Pe.isLink(e.mode)
                      ? 32
                      : Pe.isDir(e.mode) &&
                        ("r" !== Pe.flagsToPermissionString(t) || 512 & t)
                      ? 31
                      : Pe.nodePermissions(e, Pe.flagsToPermissionString(t))
                    : 44,
                MAX_OPEN_FDS: 4096,
                nextfd: () => {
                  for (var e = 0; e <= Pe.MAX_OPEN_FDS; e++)
                    if (!Pe.streams[e]) return e;
                  throw new Pe.ErrnoError(33);
                },
                getStream: (e) => Pe.streams[e],
                createStream: (e, t = -1) => (
                  Pe.FSStream ||
                    ((Pe.FSStream = function () {
                      this.shared = {};
                    }),
                    (Pe.FSStream.prototype = {}),
                    Object.defineProperties(Pe.FSStream.prototype, {
                      object: {
                        get: function () {
                          return this.node;
                        },
                        set: function (e) {
                          this.node = e;
                        },
                      },
                      isRead: {
                        get: function () {
                          return 1 != (2097155 & this.flags);
                        },
                      },
                      isWrite: {
                        get: function () {
                          return 0 != (2097155 & this.flags);
                        },
                      },
                      isAppend: {
                        get: function () {
                          return 1024 & this.flags;
                        },
                      },
                      flags: {
                        get: function () {
                          return this.shared.flags;
                        },
                        set: function (e) {
                          this.shared.flags = e;
                        },
                      },
                      position: {
                        get: function () {
                          return this.shared.position;
                        },
                        set: function (e) {
                          this.shared.position = e;
                        },
                      },
                    })),
                  (e = Object.assign(new Pe.FSStream(), e)),
                  -1 == t && (t = Pe.nextfd()),
                  (e.fd = t),
                  (Pe.streams[t] = e),
                  e
                ),
                closeStream: (e) => {
                  Pe.streams[e] = null;
                },
                chrdev_stream_ops: {
                  open: (e) => {
                    var t = Pe.getDevice(e.node.rdev);
                    (e.stream_ops = t.stream_ops),
                      e.stream_ops.open && e.stream_ops.open(e);
                  },
                  llseek: () => {
                    throw new Pe.ErrnoError(70);
                  },
                },
                major: (e) => e >> 8,
                minor: (e) => 255 & e,
                makedev: (e, t) => (e << 8) | t,
                registerDevice: (e, t) => {
                  Pe.devices[e] = { stream_ops: t };
                },
                getDevice: (e) => Pe.devices[e],
                getMounts: (e) => {
                  for (var t = [], i = [e]; i.length; ) {
                    var r = i.pop();
                    t.push(r), i.push.apply(i, r.mounts);
                  }
                  return t;
                },
                syncfs: (e, t) => {
                  "function" == typeof e && ((t = e), (e = !1)),
                    Pe.syncFSRequests++,
                    Pe.syncFSRequests > 1 &&
                      v(
                        `warning: ${Pe.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`
                      );
                  var i = Pe.getMounts(Pe.root.mount),
                    r = 0;
                  function s(e) {
                    return Pe.syncFSRequests--, t(e);
                  }
                  function o(e) {
                    if (e) return o.errored ? void 0 : ((o.errored = !0), s(e));
                    ++r >= i.length && s(null);
                  }
                  i.forEach((t) => {
                    if (!t.type.syncfs) return o(null);
                    t.type.syncfs(t, e, o);
                  });
                },
                mount: (e, t, i) => {
                  var r,
                    s = "/" === i,
                    o = !i;
                  if (s && Pe.root) throw new Pe.ErrnoError(10);
                  if (!s && !o) {
                    var a = Pe.lookupPath(i, { follow_mount: !1 });
                    if (((i = a.path), (r = a.node), Pe.isMountpoint(r)))
                      throw new Pe.ErrnoError(10);
                    if (!Pe.isDir(r.mode)) throw new Pe.ErrnoError(54);
                  }
                  var n = { type: e, opts: t, mountpoint: i, mounts: [] },
                    l = e.mount(n);
                  return (
                    (l.mount = n),
                    (n.root = l),
                    s
                      ? (Pe.root = l)
                      : r &&
                        ((r.mounted = n), r.mount && r.mount.mounts.push(n)),
                    l
                  );
                },
                unmount: (e) => {
                  var t = Pe.lookupPath(e, { follow_mount: !1 });
                  if (!Pe.isMountpoint(t.node)) throw new Pe.ErrnoError(28);
                  var i = t.node,
                    r = i.mounted,
                    s = Pe.getMounts(r);
                  Object.keys(Pe.nameTable).forEach((e) => {
                    for (var t = Pe.nameTable[e]; t; ) {
                      var i = t.name_next;
                      s.includes(t.mount) && Pe.destroyNode(t), (t = i);
                    }
                  }),
                    (i.mounted = null);
                  var o = i.mount.mounts.indexOf(r);
                  i.mount.mounts.splice(o, 1);
                },
                lookup: (e, t) => e.node_ops.lookup(e, t),
                mknod: (e, t, i) => {
                  var r = Pe.lookupPath(e, { parent: !0 }).node,
                    s = ne.basename(e);
                  if (!s || "." === s || ".." === s)
                    throw new Pe.ErrnoError(28);
                  var o = Pe.mayCreate(r, s);
                  if (o) throw new Pe.ErrnoError(o);
                  if (!r.node_ops.mknod) throw new Pe.ErrnoError(63);
                  return r.node_ops.mknod(r, s, t, i);
                },
                create: (e, t) => (
                  (t = void 0 !== t ? t : 438),
                  (t &= 4095),
                  (t |= 32768),
                  Pe.mknod(e, t, 0)
                ),
                mkdir: (e, t) => (
                  (t = void 0 !== t ? t : 511),
                  (t &= 1023),
                  (t |= 16384),
                  Pe.mknod(e, t, 0)
                ),
                mkdirTree: (e, t) => {
                  for (var i = e.split("/"), r = "", s = 0; s < i.length; ++s)
                    if (i[s]) {
                      r += "/" + i[s];
                      try {
                        Pe.mkdir(r, t);
                      } catch (e) {
                        if (20 != e.errno) throw e;
                      }
                    }
                },
                mkdev: (e, t, i) => (
                  void 0 === i && ((i = t), (t = 438)),
                  (t |= 8192),
                  Pe.mknod(e, t, i)
                ),
                symlink: (e, t) => {
                  if (!de.resolve(e)) throw new Pe.ErrnoError(44);
                  var i = Pe.lookupPath(t, { parent: !0 }).node;
                  if (!i) throw new Pe.ErrnoError(44);
                  var r = ne.basename(t),
                    s = Pe.mayCreate(i, r);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!i.node_ops.symlink) throw new Pe.ErrnoError(63);
                  return i.node_ops.symlink(i, r, e);
                },
                rename: (e, t) => {
                  var i,
                    r,
                    s = ne.dirname(e),
                    o = ne.dirname(t),
                    a = ne.basename(e),
                    n = ne.basename(t);
                  if (
                    ((i = Pe.lookupPath(e, { parent: !0 }).node),
                    (r = Pe.lookupPath(t, { parent: !0 }).node),
                    !i || !r)
                  )
                    throw new Pe.ErrnoError(44);
                  if (i.mount !== r.mount) throw new Pe.ErrnoError(75);
                  var l,
                    d = Pe.lookupNode(i, a),
                    h = de.relative(e, o);
                  if ("." !== h.charAt(0)) throw new Pe.ErrnoError(28);
                  if ("." !== (h = de.relative(t, s)).charAt(0))
                    throw new Pe.ErrnoError(55);
                  try {
                    l = Pe.lookupNode(r, n);
                  } catch (e) {}
                  if (d !== l) {
                    var u = Pe.isDir(d.mode),
                      c = Pe.mayDelete(i, a, u);
                    if (c) throw new Pe.ErrnoError(c);
                    if ((c = l ? Pe.mayDelete(r, n, u) : Pe.mayCreate(r, n)))
                      throw new Pe.ErrnoError(c);
                    if (!i.node_ops.rename) throw new Pe.ErrnoError(63);
                    if (Pe.isMountpoint(d) || (l && Pe.isMountpoint(l)))
                      throw new Pe.ErrnoError(10);
                    if (r !== i && (c = Pe.nodePermissions(i, "w")))
                      throw new Pe.ErrnoError(c);
                    Pe.hashRemoveNode(d);
                    try {
                      i.node_ops.rename(d, r, n);
                    } catch (e) {
                      throw e;
                    } finally {
                      Pe.hashAddNode(d);
                    }
                  }
                },
                rmdir: (e) => {
                  var t = Pe.lookupPath(e, { parent: !0 }).node,
                    i = ne.basename(e),
                    r = Pe.lookupNode(t, i),
                    s = Pe.mayDelete(t, i, !0);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!t.node_ops.rmdir) throw new Pe.ErrnoError(63);
                  if (Pe.isMountpoint(r)) throw new Pe.ErrnoError(10);
                  t.node_ops.rmdir(t, i), Pe.destroyNode(r);
                },
                readdir: (e) => {
                  var t = Pe.lookupPath(e, { follow: !0 }).node;
                  if (!t.node_ops.readdir) throw new Pe.ErrnoError(54);
                  return t.node_ops.readdir(t);
                },
                unlink: (e) => {
                  var t = Pe.lookupPath(e, { parent: !0 }).node;
                  if (!t) throw new Pe.ErrnoError(44);
                  var i = ne.basename(e),
                    r = Pe.lookupNode(t, i),
                    s = Pe.mayDelete(t, i, !1);
                  if (s) throw new Pe.ErrnoError(s);
                  if (!t.node_ops.unlink) throw new Pe.ErrnoError(63);
                  if (Pe.isMountpoint(r)) throw new Pe.ErrnoError(10);
                  t.node_ops.unlink(t, i), Pe.destroyNode(r);
                },
                readlink: (e) => {
                  var t = Pe.lookupPath(e).node;
                  if (!t) throw new Pe.ErrnoError(44);
                  if (!t.node_ops.readlink) throw new Pe.ErrnoError(28);
                  return de.resolve(
                    Pe.getPath(t.parent),
                    t.node_ops.readlink(t)
                  );
                },
                stat: (e, t) => {
                  var i = Pe.lookupPath(e, { follow: !t }).node;
                  if (!i) throw new Pe.ErrnoError(44);
                  if (!i.node_ops.getattr) throw new Pe.ErrnoError(63);
                  return i.node_ops.getattr(i);
                },
                lstat: (e) => Pe.stat(e, !0),
                chmod: (e, t, i) => {
                  var r;
                  if (
                    !(r =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !i }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  r.node_ops.setattr(r, {
                    mode: (4095 & t) | (-4096 & r.mode),
                    timestamp: Date.now(),
                  });
                },
                lchmod: (e, t) => {
                  Pe.chmod(e, t, !0);
                },
                fchmod: (e, t) => {
                  var i = Pe.getStream(e);
                  if (!i) throw new Pe.ErrnoError(8);
                  Pe.chmod(i.node, t);
                },
                chown: (e, t, i, r) => {
                  var s;
                  if (
                    !(s =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !r }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  s.node_ops.setattr(s, { timestamp: Date.now() });
                },
                lchown: (e, t, i) => {
                  Pe.chown(e, t, i, !0);
                },
                fchown: (e, t, i) => {
                  var r = Pe.getStream(e);
                  if (!r) throw new Pe.ErrnoError(8);
                  Pe.chown(r.node, t, i);
                },
                truncate: (e, t) => {
                  if (t < 0) throw new Pe.ErrnoError(28);
                  var i;
                  if (
                    !(i =
                      "string" == typeof e
                        ? Pe.lookupPath(e, { follow: !0 }).node
                        : e).node_ops.setattr
                  )
                    throw new Pe.ErrnoError(63);
                  if (Pe.isDir(i.mode)) throw new Pe.ErrnoError(31);
                  if (!Pe.isFile(i.mode)) throw new Pe.ErrnoError(28);
                  var r = Pe.nodePermissions(i, "w");
                  if (r) throw new Pe.ErrnoError(r);
                  i.node_ops.setattr(i, { size: t, timestamp: Date.now() });
                },
                ftruncate: (e, t) => {
                  var i = Pe.getStream(e);
                  if (!i) throw new Pe.ErrnoError(8);
                  if (0 == (2097155 & i.flags)) throw new Pe.ErrnoError(28);
                  Pe.truncate(i.node, t);
                },
                utime: (e, t, i) => {
                  var r = Pe.lookupPath(e, { follow: !0 }).node;
                  r.node_ops.setattr(r, { timestamp: Math.max(t, i) });
                },
                open: (t, i, r) => {
                  if ("" === t) throw new Pe.ErrnoError(44);
                  var s;
                  if (
                    ((r = void 0 === r ? 438 : r),
                    (r =
                      64 &
                      (i =
                        "string" == typeof i
                          ? (function (e) {
                              var t = {
                                r: 0,
                                "r+": 2,
                                w: 577,
                                "w+": 578,
                                a: 1089,
                                "a+": 1090,
                              }[e];
                              if (void 0 === t)
                                throw new Error(`Unknown file open mode: ${e}`);
                              return t;
                            })(i)
                          : i)
                        ? (4095 & r) | 32768
                        : 0),
                    "object" == typeof t)
                  )
                    s = t;
                  else {
                    t = ne.normalize(t);
                    try {
                      s = Pe.lookupPath(t, { follow: !(131072 & i) }).node;
                    } catch (e) {}
                  }
                  var o = !1;
                  if (64 & i)
                    if (s) {
                      if (128 & i) throw new Pe.ErrnoError(20);
                    } else (s = Pe.mknod(t, r, 0)), (o = !0);
                  if (!s) throw new Pe.ErrnoError(44);
                  if (
                    (Pe.isChrdev(s.mode) && (i &= -513),
                    65536 & i && !Pe.isDir(s.mode))
                  )
                    throw new Pe.ErrnoError(54);
                  if (!o) {
                    var a = Pe.mayOpen(s, i);
                    if (a) throw new Pe.ErrnoError(a);
                  }
                  512 & i && !o && Pe.truncate(s, 0), (i &= -131713);
                  var n = Pe.createStream({
                    node: s,
                    path: Pe.getPath(s),
                    flags: i,
                    seekable: !0,
                    position: 0,
                    stream_ops: s.stream_ops,
                    ungotten: [],
                    error: !1,
                  });
                  return (
                    n.stream_ops.open && n.stream_ops.open(n),
                    !e.logReadFiles ||
                      1 & i ||
                      (Pe.readFiles || (Pe.readFiles = {}),
                      t in Pe.readFiles || (Pe.readFiles[t] = 1)),
                    n
                  );
                },
                close: (e) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  e.getdents && (e.getdents = null);
                  try {
                    e.stream_ops.close && e.stream_ops.close(e);
                  } catch (e) {
                    throw e;
                  } finally {
                    Pe.closeStream(e.fd);
                  }
                  e.fd = null;
                },
                isClosed: (e) => null === e.fd,
                llseek: (e, t, i) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (!e.seekable || !e.stream_ops.llseek)
                    throw new Pe.ErrnoError(70);
                  if (0 != i && 1 != i && 2 != i) throw new Pe.ErrnoError(28);
                  return (
                    (e.position = e.stream_ops.llseek(e, t, i)),
                    (e.ungotten = []),
                    e.position
                  );
                },
                read: (e, t, i, r, s) => {
                  if (r < 0 || s < 0) throw new Pe.ErrnoError(28);
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (1 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (Pe.isDir(e.node.mode)) throw new Pe.ErrnoError(31);
                  if (!e.stream_ops.read) throw new Pe.ErrnoError(28);
                  var o = void 0 !== s;
                  if (o) {
                    if (!e.seekable) throw new Pe.ErrnoError(70);
                  } else s = e.position;
                  var a = e.stream_ops.read(e, t, i, r, s);
                  return o || (e.position += a), a;
                },
                write: (e, t, i, r, s, o) => {
                  if (r < 0 || s < 0) throw new Pe.ErrnoError(28);
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (0 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (Pe.isDir(e.node.mode)) throw new Pe.ErrnoError(31);
                  if (!e.stream_ops.write) throw new Pe.ErrnoError(28);
                  e.seekable && 1024 & e.flags && Pe.llseek(e, 0, 2);
                  var a = void 0 !== s;
                  if (a) {
                    if (!e.seekable) throw new Pe.ErrnoError(70);
                  } else s = e.position;
                  var n = e.stream_ops.write(e, t, i, r, s, o);
                  return a || (e.position += n), n;
                },
                allocate: (e, t, i) => {
                  if (Pe.isClosed(e)) throw new Pe.ErrnoError(8);
                  if (t < 0 || i <= 0) throw new Pe.ErrnoError(28);
                  if (0 == (2097155 & e.flags)) throw new Pe.ErrnoError(8);
                  if (!Pe.isFile(e.node.mode) && !Pe.isDir(e.node.mode))
                    throw new Pe.ErrnoError(43);
                  if (!e.stream_ops.allocate) throw new Pe.ErrnoError(138);
                  e.stream_ops.allocate(e, t, i);
                },
                mmap: (e, t, i, r, s) => {
                  if (0 != (2 & r) && 0 == (2 & s) && 2 != (2097155 & e.flags))
                    throw new Pe.ErrnoError(2);
                  if (1 == (2097155 & e.flags)) throw new Pe.ErrnoError(2);
                  if (!e.stream_ops.mmap) throw new Pe.ErrnoError(43);
                  return e.stream_ops.mmap(e, t, i, r, s);
                },
                msync: (e, t, i, r, s) =>
                  e.stream_ops.msync ? e.stream_ops.msync(e, t, i, r, s) : 0,
                munmap: (e) => 0,
                ioctl: (e, t, i) => {
                  if (!e.stream_ops.ioctl) throw new Pe.ErrnoError(59);
                  return e.stream_ops.ioctl(e, t, i);
                },
                readFile: (e, t = {}) => {
                  if (
                    ((t.flags = t.flags || 0),
                    (t.encoding = t.encoding || "binary"),
                    "utf8" !== t.encoding && "binary" !== t.encoding)
                  )
                    throw new Error(`Invalid encoding type "${t.encoding}"`);
                  var i,
                    r = Pe.open(e, t.flags),
                    s = Pe.stat(e).size,
                    o = new Uint8Array(s);
                  return (
                    Pe.read(r, o, 0, s, 0),
                    "utf8" === t.encoding
                      ? (i = ge(o, 0))
                      : "binary" === t.encoding && (i = o),
                    Pe.close(r),
                    i
                  );
                },
                writeFile: (e, t, i = {}) => {
                  i.flags = i.flags || 577;
                  var r = Pe.open(e, i.flags, i.mode);
                  if ("string" == typeof t) {
                    var s = new Uint8Array(he(t) + 1),
                      o = ue(t, s, 0, s.length);
                    Pe.write(r, s, 0, o, void 0, i.canOwn);
                  } else {
                    if (!ArrayBuffer.isView(t))
                      throw new Error("Unsupported data type");
                    Pe.write(r, t, 0, t.byteLength, void 0, i.canOwn);
                  }
                  Pe.close(r);
                },
                cwd: () => Pe.currentPath,
                chdir: (e) => {
                  var t = Pe.lookupPath(e, { follow: !0 });
                  if (null === t.node) throw new Pe.ErrnoError(44);
                  if (!Pe.isDir(t.node.mode)) throw new Pe.ErrnoError(54);
                  var i = Pe.nodePermissions(t.node, "x");
                  if (i) throw new Pe.ErrnoError(i);
                  Pe.currentPath = t.path;
                },
                createDefaultDirectories: () => {
                  Pe.mkdir("/tmp"),
                    Pe.mkdir("/home"),
                    Pe.mkdir("/home/web_user");
                },
                createDefaultDevices: () => {
                  Pe.mkdir("/dev"),
                    Pe.registerDevice(Pe.makedev(1, 3), {
                      read: () => 0,
                      write: (e, t, i, r, s) => r,
                    }),
                    Pe.mkdev("/dev/null", Pe.makedev(1, 3)),
                    ye.register(Pe.makedev(5, 0), ye.default_tty_ops),
                    ye.register(Pe.makedev(6, 0), ye.default_tty1_ops),
                    Pe.mkdev("/dev/tty", Pe.makedev(5, 0)),
                    Pe.mkdev("/dev/tty1", Pe.makedev(6, 0));
                  var e = new Uint8Array(1024),
                    t = 0,
                    i = () => (0 === t && (t = le(e).byteLength), e[--t]);
                  Pe.createDevice("/dev", "random", i),
                    Pe.createDevice("/dev", "urandom", i),
                    Pe.mkdir("/dev/shm"),
                    Pe.mkdir("/dev/shm/tmp");
                },
                createSpecialDirectories: () => {
                  Pe.mkdir("/proc");
                  var e = Pe.mkdir("/proc/self");
                  Pe.mkdir("/proc/self/fd"),
                    Pe.mount(
                      {
                        mount: () => {
                          var t = Pe.createNode(e, "fd", 16895, 73);
                          return (
                            (t.node_ops = {
                              lookup: (e, t) => {
                                var i = +t,
                                  r = Pe.getStream(i);
                                if (!r) throw new Pe.ErrnoError(8);
                                var s = {
                                  parent: null,
                                  mount: { mountpoint: "fake" },
                                  node_ops: { readlink: () => r.path },
                                };
                                return (s.parent = s), s;
                              },
                            }),
                            t
                          );
                        },
                      },
                      {},
                      "/proc/self/fd"
                    );
                },
                createStandardStreams: () => {
                  e.stdin
                    ? Pe.createDevice("/dev", "stdin", e.stdin)
                    : Pe.symlink("/dev/tty", "/dev/stdin"),
                    e.stdout
                      ? Pe.createDevice("/dev", "stdout", null, e.stdout)
                      : Pe.symlink("/dev/tty", "/dev/stdout"),
                    e.stderr
                      ? Pe.createDevice("/dev", "stderr", null, e.stderr)
                      : Pe.symlink("/dev/tty1", "/dev/stderr"),
                    Pe.open("/dev/stdin", 0),
                    Pe.open("/dev/stdout", 1),
                    Pe.open("/dev/stderr", 1);
                },
                ensureErrnoError: () => {
                  Pe.ErrnoError ||
                    ((Pe.ErrnoError = function (e, t) {
                      (this.name = "ErrnoError"),
                        (this.node = t),
                        (this.setErrno = function (e) {
                          this.errno = e;
                        }),
                        this.setErrno(e),
                        (this.message = "FS error");
                    }),
                    (Pe.ErrnoError.prototype = new Error()),
                    (Pe.ErrnoError.prototype.constructor = Pe.ErrnoError),
                    [44].forEach((e) => {
                      (Pe.genericErrors[e] = new Pe.ErrnoError(e)),
                        (Pe.genericErrors[e].stack =
                          "<generic error, no stack>");
                    }));
                },
                staticInit: () => {
                  Pe.ensureErrnoError(),
                    (Pe.nameTable = new Array(4096)),
                    Pe.mount(ve, {}, "/"),
                    Pe.createDefaultDirectories(),
                    Pe.createDefaultDevices(),
                    Pe.createSpecialDirectories(),
                    (Pe.filesystems = { MEMFS: ve });
                },
                init: (t, i, r) => {
                  (Pe.init.initialized = !0),
                    Pe.ensureErrnoError(),
                    (e.stdin = t || e.stdin),
                    (e.stdout = i || e.stdout),
                    (e.stderr = r || e.stderr),
                    Pe.createStandardStreams();
                },
                quit: () => {
                  Pe.init.initialized = !1;
                  for (var e = 0; e < Pe.streams.length; e++) {
                    var t = Pe.streams[e];
                    t && Pe.close(t);
                  }
                },
                findObject: (e, t) => {
                  var i = Pe.analyzePath(e, t);
                  return i.exists ? i.object : null;
                },
                analyzePath: (e, t) => {
                  try {
                    e = (r = Pe.lookupPath(e, { follow: !t })).path;
                  } catch (e) {}
                  var i = {
                    isRoot: !1,
                    exists: !1,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: !1,
                    parentPath: null,
                    parentObject: null,
                  };
                  try {
                    var r = Pe.lookupPath(e, { parent: !0 });
                    (i.parentExists = !0),
                      (i.parentPath = r.path),
                      (i.parentObject = r.node),
                      (i.name = ne.basename(e)),
                      (r = Pe.lookupPath(e, { follow: !t })),
                      (i.exists = !0),
                      (i.path = r.path),
                      (i.object = r.node),
                      (i.name = r.node.name),
                      (i.isRoot = "/" === r.path);
                  } catch (e) {
                    i.error = e.errno;
                  }
                  return i;
                },
                createPath: (e, t, i, r) => {
                  e = "string" == typeof e ? e : Pe.getPath(e);
                  for (var s = t.split("/").reverse(); s.length; ) {
                    var o = s.pop();
                    if (o) {
                      var a = ne.join2(e, o);
                      try {
                        Pe.mkdir(a);
                      } catch (e) {}
                      e = a;
                    }
                  }
                  return a;
                },
                createFile: (e, t, i, r, s) => {
                  var o = ne.join2("string" == typeof e ? e : Pe.getPath(e), t),
                    a = Se(r, s);
                  return Pe.create(o, a);
                },
                createDataFile: (e, t, i, r, s, o) => {
                  var a = t;
                  e &&
                    ((e = "string" == typeof e ? e : Pe.getPath(e)),
                    (a = t ? ne.join2(e, t) : e));
                  var n = Se(r, s),
                    l = Pe.create(a, n);
                  if (i) {
                    if ("string" == typeof i) {
                      for (
                        var d = new Array(i.length), h = 0, u = i.length;
                        h < u;
                        ++h
                      )
                        d[h] = i.charCodeAt(h);
                      i = d;
                    }
                    Pe.chmod(l, 146 | n);
                    var c = Pe.open(l, 577);
                    Pe.write(c, i, 0, i.length, 0, o),
                      Pe.close(c),
                      Pe.chmod(l, n);
                  }
                  return l;
                },
                createDevice: (e, t, i, r) => {
                  var s = ne.join2("string" == typeof e ? e : Pe.getPath(e), t),
                    o = Se(!!i, !!r);
                  Pe.createDevice.major || (Pe.createDevice.major = 64);
                  var a = Pe.makedev(Pe.createDevice.major++, 0);
                  return (
                    Pe.registerDevice(a, {
                      open: (e) => {
                        e.seekable = !1;
                      },
                      close: (e) => {
                        r && r.buffer && r.buffer.length && r(10);
                      },
                      read: (e, t, r, s, o) => {
                        for (var a = 0, n = 0; n < s; n++) {
                          var l;
                          try {
                            l = i();
                          } catch (e) {
                            throw new Pe.ErrnoError(29);
                          }
                          if (void 0 === l && 0 === a)
                            throw new Pe.ErrnoError(6);
                          if (null == l) break;
                          a++, (t[r + n] = l);
                        }
                        return a && (e.node.timestamp = Date.now()), a;
                      },
                      write: (e, t, i, s, o) => {
                        for (var a = 0; a < s; a++)
                          try {
                            r(t[i + a]);
                          } catch (e) {
                            throw new Pe.ErrnoError(29);
                          }
                        return s && (e.node.timestamp = Date.now()), a;
                      },
                    }),
                    Pe.mkdev(s, o, a)
                  );
                },
                forceLoadFile: (e) => {
                  if (e.isDevice || e.isFolder || e.link || e.contents)
                    return !0;
                  if ("undefined" != typeof XMLHttpRequest)
                    throw new Error(
                      "Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread."
                    );
                  if (!s)
                    throw new Error(
                      "Cannot load without read() or XMLHttpRequest."
                    );
                  try {
                    (e.contents = ce(s(e.url), !0)),
                      (e.usedBytes = e.contents.length);
                  } catch (e) {
                    throw new Pe.ErrnoError(29);
                  }
                },
                createLazyFile: (e, t, i, r, s) => {
                  function o() {
                    (this.lengthKnown = !1), (this.chunks = []);
                  }
                  if (
                    ((o.prototype.get = function (e) {
                      if (!(e > this.length - 1 || e < 0)) {
                        var t = e % this.chunkSize,
                          i = (e / this.chunkSize) | 0;
                        return this.getter(i)[t];
                      }
                    }),
                    (o.prototype.setDataGetter = function (e) {
                      this.getter = e;
                    }),
                    (o.prototype.cacheLength = function () {
                      var e = new XMLHttpRequest();
                      if (
                        (e.open("HEAD", i, !1),
                        e.send(null),
                        !(
                          (e.status >= 200 && e.status < 300) ||
                          304 === e.status
                        ))
                      )
                        throw new Error(
                          "Couldn't load " + i + ". Status: " + e.status
                        );
                      var t,
                        r = Number(e.getResponseHeader("Content-length")),
                        s =
                          (t = e.getResponseHeader("Accept-Ranges")) &&
                          "bytes" === t,
                        o =
                          (t = e.getResponseHeader("Content-Encoding")) &&
                          "gzip" === t,
                        a = 1048576;
                      s || (a = r);
                      var n = this;
                      n.setDataGetter((e) => {
                        var t = e * a,
                          s = (e + 1) * a - 1;
                        if (
                          ((s = Math.min(s, r - 1)),
                          void 0 === n.chunks[e] &&
                            (n.chunks[e] = ((e, t) => {
                              if (e > t)
                                throw new Error(
                                  "invalid range (" +
                                    e +
                                    ", " +
                                    t +
                                    ") or no bytes requested!"
                                );
                              if (t > r - 1)
                                throw new Error(
                                  "only " +
                                    r +
                                    " bytes available! programmer error!"
                                );
                              var s = new XMLHttpRequest();
                              if (
                                (s.open("GET", i, !1),
                                r !== a &&
                                  s.setRequestHeader(
                                    "Range",
                                    "bytes=" + e + "-" + t
                                  ),
                                (s.responseType = "arraybuffer"),
                                s.overrideMimeType &&
                                  s.overrideMimeType(
                                    "text/plain; charset=x-user-defined"
                                  ),
                                s.send(null),
                                !(
                                  (s.status >= 200 && s.status < 300) ||
                                  304 === s.status
                                ))
                              )
                                throw new Error(
                                  "Couldn't load " + i + ". Status: " + s.status
                                );
                              return void 0 !== s.response
                                ? new Uint8Array(s.response || [])
                                : ce(s.responseText || "", !0);
                            })(t, s)),
                          void 0 === n.chunks[e])
                        )
                          throw new Error("doXHR failed!");
                        return n.chunks[e];
                      }),
                        (!o && r) ||
                          ((a = r = 1),
                          (r = this.getter(0).length),
                          (a = r),
                          f(
                            "LazyFiles on gzip forces download of the whole file when length is accessed"
                          )),
                        (this._length = r),
                        (this._chunkSize = a),
                        (this.lengthKnown = !0);
                    }),
                    "undefined" != typeof XMLHttpRequest)
                  ) {
                    if (!p)
                      throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var a = new o();
                    Object.defineProperties(a, {
                      length: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(), this._length
                          );
                        },
                      },
                      chunkSize: {
                        get: function () {
                          return (
                            this.lengthKnown || this.cacheLength(),
                            this._chunkSize
                          );
                        },
                      },
                    });
                    var n = { isDevice: !1, contents: a };
                  } else n = { isDevice: !1, url: i };
                  var l = Pe.createFile(e, t, n, r, s);
                  n.contents
                    ? (l.contents = n.contents)
                    : n.url && ((l.contents = null), (l.url = n.url)),
                    Object.defineProperties(l, {
                      usedBytes: {
                        get: function () {
                          return this.contents.length;
                        },
                      },
                    });
                  var d = {};
                  function h(e, t, i, r, s) {
                    var o = e.node.contents;
                    if (s >= o.length) return 0;
                    var a = Math.min(o.length - s, r);
                    if (o.slice)
                      for (var n = 0; n < a; n++) t[i + n] = o[s + n];
                    else for (n = 0; n < a; n++) t[i + n] = o.get(s + n);
                    return a;
                  }
                  return (
                    Object.keys(l.stream_ops).forEach((e) => {
                      var t = l.stream_ops[e];
                      d[e] = function () {
                        return Pe.forceLoadFile(l), t.apply(null, arguments);
                      };
                    }),
                    (d.read = (e, t, i, r, s) => (
                      Pe.forceLoadFile(l), h(e, t, i, r, s)
                    )),
                    (d.mmap = (e, t, i, r, s) => {
                      Pe.forceLoadFile(l);
                      var o = fe();
                      if (!o) throw new Pe.ErrnoError(48);
                      return h(e, C, o, t, i), { ptr: o, allocated: !0 };
                    }),
                    (l.stream_ops = d),
                    l
                  );
                },
              };
              function Ce(e, t) {
                return e ? ge(x, e, t) : "";
              }
              var xe = {
                  DEFAULT_POLLMASK: 5,
                  calculateAt: function (e, t, i) {
                    if (ne.isAbs(t)) return t;
                    var r;
                    if (
                      ((r = -100 === e ? Pe.cwd() : xe.getStreamFromFD(e).path),
                      0 == t.length)
                    ) {
                      if (!i) throw new Pe.ErrnoError(44);
                      return r;
                    }
                    return ne.join2(r, t);
                  },
                  doStat: function (e, t, i) {
                    try {
                      var r = e(t);
                    } catch (e) {
                      if (
                        e &&
                        e.node &&
                        ne.normalize(t) !== ne.normalize(Pe.getPath(e.node))
                      )
                        return -54;
                      throw e;
                    }
                    (T[i >> 2] = r.dev),
                      (T[(i + 8) >> 2] = r.ino),
                      (T[(i + 12) >> 2] = r.mode),
                      (E[(i + 16) >> 2] = r.nlink),
                      (T[(i + 20) >> 2] = r.uid),
                      (T[(i + 24) >> 2] = r.gid),
                      (T[(i + 28) >> 2] = r.rdev),
                      (q = [
                        r.size >>> 0,
                        (($ = r.size),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 40) >> 2] = q[0]),
                      (T[(i + 44) >> 2] = q[1]),
                      (T[(i + 48) >> 2] = 4096),
                      (T[(i + 52) >> 2] = r.blocks);
                    var s = r.atime.getTime(),
                      o = r.mtime.getTime(),
                      a = r.ctime.getTime();
                    return (
                      (q = [
                        Math.floor(s / 1e3) >>> 0,
                        (($ = Math.floor(s / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 56) >> 2] = q[0]),
                      (T[(i + 60) >> 2] = q[1]),
                      (E[(i + 64) >> 2] = (s % 1e3) * 1e3),
                      (q = [
                        Math.floor(o / 1e3) >>> 0,
                        (($ = Math.floor(o / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 72) >> 2] = q[0]),
                      (T[(i + 76) >> 2] = q[1]),
                      (E[(i + 80) >> 2] = (o % 1e3) * 1e3),
                      (q = [
                        Math.floor(a / 1e3) >>> 0,
                        (($ = Math.floor(a / 1e3)),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 88) >> 2] = q[0]),
                      (T[(i + 92) >> 2] = q[1]),
                      (E[(i + 96) >> 2] = (a % 1e3) * 1e3),
                      (q = [
                        r.ino >>> 0,
                        (($ = r.ino),
                        +Math.abs($) >= 1
                          ? $ > 0
                            ? +Math.floor($ / 4294967296) >>> 0
                            : ~~+Math.ceil(($ - +(~~$ >>> 0)) / 4294967296) >>>
                              0
                          : 0),
                      ]),
                      (T[(i + 104) >> 2] = q[0]),
                      (T[(i + 108) >> 2] = q[1]),
                      0
                    );
                  },
                  doMsync: function (e, t, i, r, s) {
                    if (!Pe.isFile(t.node.mode)) throw new Pe.ErrnoError(43);
                    if (2 & r) return 0;
                    var o = x.slice(e, e + i);
                    Pe.msync(t, o, s, i, r);
                  },
                  varargs: void 0,
                  get: function () {
                    return (xe.varargs += 4), T[(xe.varargs - 4) >> 2];
                  },
                  getStr: function (e) {
                    return Ce(e);
                  },
                  getStreamFromFD: function (e) {
                    var t = Pe.getStream(e);
                    if (!t) throw new Pe.ErrnoError(8);
                    return t;
                  },
                },
                be = 48,
                Ae = 57;
              function Te(e) {
                if (void 0 === e) return "_unknown";
                var t = (e = e.replace(/[^a-zA-Z0-9_]/g, "$")).charCodeAt(0);
                return t >= be && t <= Ae ? `_${e}` : e;
              }
              function Ee(e, t) {
                return {
                  [(e = Te(e))]: function () {
                    return t.apply(this, arguments);
                  },
                }[e];
              }
              function Re() {
                (this.allocated = [void 0]),
                  (this.freelist = []),
                  (this.get = function (e) {
                    return this.allocated[e];
                  }),
                  (this.has = function (e) {
                    return void 0 !== this.allocated[e];
                  }),
                  (this.allocate = function (e) {
                    var t = this.freelist.pop() || this.allocated.length;
                    return (this.allocated[t] = e), t;
                  }),
                  (this.free = function (e) {
                    (this.allocated[e] = void 0), this.freelist.push(e);
                  });
              }
              var we = new Re();
              function De(e, t) {
                var i = Ee(t, function (e) {
                  (this.name = t), (this.message = e);
                  var i = new Error(e).stack;
                  void 0 !== i &&
                    (this.stack =
                      this.toString() +
                      "\n" +
                      i.replace(/^Error(:[^\n]*)?\n/, ""));
                });
                return (
                  (i.prototype = Object.create(e.prototype)),
                  (i.prototype.constructor = i),
                  (i.prototype.toString = function () {
                    return void 0 === this.message
                      ? this.name
                      : `${this.name}: ${this.message}`;
                  }),
                  i
                );
              }
              var Le = void 0;
              function Me(e) {
                throw new Le(e);
              }
              var Ie = {
                  toValue: (e) => (
                    e || Me("Cannot use deleted val. handle = " + e),
                    we.get(e).value
                  ),
                  toHandle: (e) => {
                    switch (e) {
                      case void 0:
                        return 1;
                      case null:
                        return 2;
                      case !0:
                        return 3;
                      case !1:
                        return 4;
                      default:
                        return we.allocate({ refcount: 1, value: e });
                    }
                  },
                },
                Oe = void 0,
                ke = void 0;
              function _e(e) {
                for (var t = "", i = e; x[i]; ) t += ke[x[i++]];
                return t;
              }
              var Ve = [];
              function Ne() {
                for (; Ve.length; ) {
                  var e = Ve.pop();
                  (e.$$.deleteScheduled = !1), e.delete();
                }
              }
              var Fe = void 0;
              var Be = {};
              function He(e, t) {
                for (
                  void 0 === t && Me("ptr should not be undefined");
                  e.baseClass;

                )
                  (t = e.upcast(t)), (e = e.baseClass);
                return t;
              }
              var ze = {};
              function Ye(e) {
                var t = Ea(e),
                  i = _e(t);
                return ba(t), i;
              }
              function Ge(e, t) {
                var i = ze[e];
                return void 0 === i && Me(t + " has unknown type " + Ye(e)), i;
              }
              function Xe(e) {}
              var je = !1;
              function We(e) {
                (e.count.value -= 1),
                  0 === e.count.value &&
                    (function (e) {
                      e.smartPtr
                        ? e.smartPtrType.rawDestructor(e.smartPtr)
                        : e.ptrType.registeredClass.rawDestructor(e.ptr);
                    })(e);
              }
              function Ue(e, t, i) {
                if (t === i) return e;
                if (void 0 === i.baseClass) return null;
                var r = Ue(e, t, i.baseClass);
                return null === r ? null : i.downcast(r);
              }
              var $e = {},
                qe = void 0;
              function Ke(e) {
                throw new qe(e);
              }
              function Ze(e, t) {
                return (
                  (t.ptrType && t.ptr) ||
                    Ke("makeClassHandle requires ptr and ptrType"),
                  !!t.smartPtrType != !!t.smartPtr &&
                    Ke("Both smartPtrType and smartPtr must be specified"),
                  (t.count = { value: 1 }),
                  Je(Object.create(e, { $$: { value: t } }))
                );
              }
              function Je(e) {
                return "undefined" == typeof FinalizationRegistry
                  ? ((Je = (e) => e), e)
                  : ((je = new FinalizationRegistry((e) => {
                      We(e.$$);
                    })),
                    (Je = (e) => {
                      var t = e.$$;
                      if (t.smartPtr) {
                        var i = { $$: t };
                        je.register(e, i, e);
                      }
                      return e;
                    }),
                    (Xe = (e) => je.unregister(e)),
                    Je(e));
              }
              function Qe(e) {
                switch (e) {
                  case 1:
                    return 0;
                  case 2:
                    return 1;
                  case 4:
                    return 2;
                  case 8:
                    return 3;
                  default:
                    throw new TypeError(`Unknown type size: ${e}`);
                }
              }
              var et = {},
                tt = {};
              function it(e, t, i) {
                function r(t) {
                  var r = i(t);
                  r.length !== e.length &&
                    Ke("Mismatched type converter count");
                  for (var s = 0; s < e.length; ++s) rt(e[s], r[s]);
                }
                e.forEach(function (e) {
                  tt[e] = t;
                });
                var s = new Array(t.length),
                  o = [],
                  a = 0;
                t.forEach((e, t) => {
                  ze.hasOwnProperty(e)
                    ? (s[t] = ze[e])
                    : (o.push(e),
                      et.hasOwnProperty(e) || (et[e] = []),
                      et[e].push(() => {
                        (s[t] = ze[e]), ++a === o.length && r(s);
                      }));
                }),
                  0 === o.length && r(s);
              }
              function rt(e, t, i = {}) {
                if (!("argPackAdvance" in t))
                  throw new TypeError(
                    "registerType registeredInstance requires argPackAdvance"
                  );
                var r = t.name;
                if (
                  (e ||
                    Me(
                      `type "${r}" must have a positive integer typeid pointer`
                    ),
                  ze.hasOwnProperty(e))
                ) {
                  if (i.ignoreDuplicateRegistrations) return;
                  Me(`Cannot register type '${r}' twice`);
                }
                if (((ze[e] = t), delete tt[e], et.hasOwnProperty(e))) {
                  var s = et[e];
                  delete et[e], s.forEach((e) => e());
                }
              }
              function st(e) {
                Me(
                  e.$$.ptrType.registeredClass.name +
                    " instance already deleted"
                );
              }
              function ot() {}
              function at(e, t, i) {
                if (void 0 === e[t].overloadTable) {
                  var r = e[t];
                  (e[t] = function () {
                    return (
                      e[t].overloadTable.hasOwnProperty(arguments.length) ||
                        Me(
                          `Function '${i}' called with an invalid number of arguments (${arguments.length}) - expects one of (${e[t].overloadTable})!`
                        ),
                      e[t].overloadTable[arguments.length].apply(
                        this,
                        arguments
                      )
                    );
                  }),
                    (e[t].overloadTable = []),
                    (e[t].overloadTable[r.argCount] = r);
                }
              }
              function nt(t, i, r) {
                e.hasOwnProperty(t)
                  ? ((void 0 === r ||
                      (void 0 !== e[t].overloadTable &&
                        void 0 !== e[t].overloadTable[r])) &&
                      Me(`Cannot register public name '${t}' twice`),
                    at(e, t, t),
                    e.hasOwnProperty(r) &&
                      Me(
                        `Cannot register multiple overloads of a function with the same number of arguments (${r})!`
                      ),
                    (e[t].overloadTable[r] = i))
                  : ((e[t] = i), void 0 !== r && (e[t].numArguments = r));
              }
              function lt(e, t, i, r, s, o, a, n) {
                (this.name = e),
                  (this.constructor = t),
                  (this.instancePrototype = i),
                  (this.rawDestructor = r),
                  (this.baseClass = s),
                  (this.getActualType = o),
                  (this.upcast = a),
                  (this.downcast = n),
                  (this.pureVirtualFunctions = []);
              }
              function dt(e, t, i) {
                for (; t !== i; )
                  t.upcast ||
                    Me(
                      `Expected null or instance of ${i.name}, got an instance of ${t.name}`
                    ),
                    (e = t.upcast(e)),
                    (t = t.baseClass);
                return e;
              }
              function ht(e, t) {
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    );
                var i = t.$$.ptrType.registeredClass;
                return dt(t.$$.ptr, i, this.registeredClass);
              }
              function ut(e, t) {
                var i;
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    this.isSmartPointer
                      ? ((i = this.rawConstructor()),
                        null !== e && e.push(this.rawDestructor, i),
                        i)
                      : 0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    ),
                  !this.isConst &&
                    t.$$.ptrType.isConst &&
                    Me(
                      `Cannot convert argument of type ${
                        t.$$.smartPtrType
                          ? t.$$.smartPtrType.name
                          : t.$$.ptrType.name
                      } to parameter type ${this.name}`
                    );
                var r = t.$$.ptrType.registeredClass;
                if (
                  ((i = dt(t.$$.ptr, r, this.registeredClass)),
                  this.isSmartPointer)
                )
                  switch (
                    (void 0 === t.$$.smartPtr &&
                      Me("Passing raw pointer to smart pointer is illegal"),
                    this.sharingPolicy)
                  ) {
                    case 0:
                      t.$$.smartPtrType === this
                        ? (i = t.$$.smartPtr)
                        : Me(
                            `Cannot convert argument of type ${
                              t.$$.smartPtrType
                                ? t.$$.smartPtrType.name
                                : t.$$.ptrType.name
                            } to parameter type ${this.name}`
                          );
                      break;
                    case 1:
                      i = t.$$.smartPtr;
                      break;
                    case 2:
                      if (t.$$.smartPtrType === this) i = t.$$.smartPtr;
                      else {
                        var s = t.clone();
                        (i = this.rawShare(
                          i,
                          Ie.toHandle(function () {
                            s.delete();
                          })
                        )),
                          null !== e && e.push(this.rawDestructor, i);
                      }
                      break;
                    default:
                      Me("Unsupporting sharing policy");
                  }
                return i;
              }
              function ct(e, t) {
                if (null === t)
                  return (
                    this.isReference && Me(`null is not a valid ${this.name}`),
                    0
                  );
                t.$$ || Me(`Cannot pass "${Tt(t)}" as a ${this.name}`),
                  t.$$.ptr ||
                    Me(
                      `Cannot pass deleted object as a pointer of type ${this.name}`
                    ),
                  t.$$.ptrType.isConst &&
                    Me(
                      `Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`
                    );
                var i = t.$$.ptrType.registeredClass;
                return dt(t.$$.ptr, i, this.registeredClass);
              }
              function pt(e) {
                return this.fromWireType(T[e >> 2]);
              }
              function gt(e, t, i, r, s, o, a, n, l, d, h) {
                (this.name = e),
                  (this.registeredClass = t),
                  (this.isReference = i),
                  (this.isConst = r),
                  (this.isSmartPointer = s),
                  (this.pointeeType = o),
                  (this.sharingPolicy = a),
                  (this.rawGetPointee = n),
                  (this.rawConstructor = l),
                  (this.rawShare = d),
                  (this.rawDestructor = h),
                  s || void 0 !== t.baseClass
                    ? (this.toWireType = ut)
                    : r
                    ? ((this.toWireType = ht), (this.destructorFunction = null))
                    : ((this.toWireType = ct),
                      (this.destructorFunction = null));
              }
              function yt(t, i, r) {
                e.hasOwnProperty(t) ||
                  Ke("Replacing nonexistant public symbol"),
                  void 0 !== e[t].overloadTable && void 0 !== r
                    ? (e[t].overloadTable[r] = i)
                    : ((e[t] = i), (e[t].argCount = r));
              }
              function ft(e, t) {
                var i,
                  r,
                  s,
                  o = (e = _e(e)).includes("j")
                    ? ((i = e),
                      (r = t),
                      (s = []),
                      function () {
                        return (
                          (s.length = 0),
                          Object.assign(s, arguments),
                          se(i, r, s)
                        );
                      })
                    : re(t);
                return (
                  "function" != typeof o &&
                    Me(`unknown function pointer with signature ${e}: ${t}`),
                  o
                );
              }
              var vt = void 0;
              function mt(e, t) {
                var i = [],
                  r = {};
                throw (
                  (t.forEach(function e(t) {
                    r[t] ||
                      ze[t] ||
                      (tt[t] ? tt[t].forEach(e) : (i.push(t), (r[t] = !0)));
                  }),
                  new vt(`${e}: ` + i.map(Ye).join([", "])))
                );
              }
              function St(e) {
                for (; e.length; ) {
                  var t = e.pop();
                  e.pop()(t);
                }
              }
              function Pt(e, t, i, r, s, o) {
                var a = t.length;
                a < 2 &&
                  Me(
                    "argTypes array size mismatch! Must at least get return value and 'this' types!"
                  );
                for (
                  var n = null !== t[1] && null !== i, l = !1, d = 1;
                  d < t.length;
                  ++d
                )
                  if (null !== t[d] && void 0 === t[d].destructorFunction) {
                    l = !0;
                    break;
                  }
                var h = "void" !== t[0].name,
                  u = a - 2,
                  c = new Array(u),
                  p = [],
                  g = [];
                return function () {
                  var i;
                  arguments.length !== u &&
                    Me(
                      `function ${e} called with ${arguments.length} arguments, expected ${u} args!`
                    ),
                    (g.length = 0),
                    (p.length = n ? 2 : 1),
                    (p[0] = s),
                    n && ((i = t[1].toWireType(g, this)), (p[1] = i));
                  for (var o = 0; o < u; ++o)
                    (c[o] = t[o + 2].toWireType(g, arguments[o])), p.push(c[o]);
                  return (function (e) {
                    if (l) St(g);
                    else
                      for (var r = n ? 1 : 2; r < t.length; r++) {
                        var s = 1 === r ? i : c[r - 2];
                        null !== t[r].destructorFunction &&
                          t[r].destructorFunction(s);
                      }
                    if (h) return t[0].fromWireType(e);
                  })(r.apply(null, p));
                };
              }
              function Ct(e, t) {
                for (var i = [], r = 0; r < e; r++) i.push(E[(t + 4 * r) >> 2]);
                return i;
              }
              function xt(e, t, i) {
                return (
                  e instanceof Object || Me(`${i} with invalid "this": ${e}`),
                  e instanceof t.registeredClass.constructor ||
                    Me(
                      `${i} incompatible with "this" of type ${e.constructor.name}`
                    ),
                  e.$$.ptr ||
                    Me(
                      `cannot call emscripten binding method ${i} on deleted object`
                    ),
                  dt(e.$$.ptr, e.$$.ptrType.registeredClass, t.registeredClass)
                );
              }
              function bt(e) {
                e >= we.reserved && 0 == --we.get(e).refcount && we.free(e);
              }
              function At(e, t, i) {
                switch (t) {
                  case 0:
                    return function (e) {
                      var t = i ? C : x;
                      return this.fromWireType(t[e]);
                    };
                  case 1:
                    return function (e) {
                      var t = i ? b : A;
                      return this.fromWireType(t[e >> 1]);
                    };
                  case 2:
                    return function (e) {
                      var t = i ? T : E;
                      return this.fromWireType(t[e >> 2]);
                    };
                  default:
                    throw new TypeError("Unknown integer type: " + e);
                }
              }
              function Tt(e) {
                if (null === e) return "null";
                var t = typeof e;
                return "object" === t || "array" === t || "function" === t
                  ? e.toString()
                  : "" + e;
              }
              function Et(e, t) {
                switch (t) {
                  case 2:
                    return function (e) {
                      return this.fromWireType(R[e >> 2]);
                    };
                  case 3:
                    return function (e) {
                      return this.fromWireType(w[e >> 3]);
                    };
                  default:
                    throw new TypeError("Unknown float type: " + e);
                }
              }
              function Rt(e, t, i) {
                switch (t) {
                  case 0:
                    return i
                      ? function (e) {
                          return C[e];
                        }
                      : function (e) {
                          return x[e];
                        };
                  case 1:
                    return i
                      ? function (e) {
                          return b[e >> 1];
                        }
                      : function (e) {
                          return A[e >> 1];
                        };
                  case 2:
                    return i
                      ? function (e) {
                          return T[e >> 2];
                        }
                      : function (e) {
                          return E[e >> 2];
                        };
                  default:
                    throw new TypeError("Unknown integer type: " + e);
                }
              }
              function wt(e, t, i) {
                return ue(e, x, t, i);
              }
              var Dt =
                "undefined" != typeof TextDecoder
                  ? new TextDecoder("utf-16le")
                  : void 0;
              function Lt(e, t) {
                for (var i = e, r = i >> 1, s = r + t / 2; !(r >= s) && A[r]; )
                  ++r;
                if ((i = r << 1) - e > 32 && Dt)
                  return Dt.decode(x.subarray(e, i));
                for (var o = "", a = 0; !(a >= t / 2); ++a) {
                  var n = b[(e + 2 * a) >> 1];
                  if (0 == n) break;
                  o += String.fromCharCode(n);
                }
                return o;
              }
              function Mt(e, t, i) {
                if ((void 0 === i && (i = 2147483647), i < 2)) return 0;
                for (
                  var r = t,
                    s = (i -= 2) < 2 * e.length ? i / 2 : e.length,
                    o = 0;
                  o < s;
                  ++o
                ) {
                  var a = e.charCodeAt(o);
                  (b[t >> 1] = a), (t += 2);
                }
                return (b[t >> 1] = 0), t - r;
              }
              function It(e) {
                return 2 * e.length;
              }
              function Ot(e, t) {
                for (var i = 0, r = ""; !(i >= t / 4); ) {
                  var s = T[(e + 4 * i) >> 2];
                  if (0 == s) break;
                  if ((++i, s >= 65536)) {
                    var o = s - 65536;
                    r += String.fromCharCode(
                      55296 | (o >> 10),
                      56320 | (1023 & o)
                    );
                  } else r += String.fromCharCode(s);
                }
                return r;
              }
              function kt(e, t, i) {
                if ((void 0 === i && (i = 2147483647), i < 4)) return 0;
                for (var r = t, s = r + i - 4, o = 0; o < e.length; ++o) {
                  var a = e.charCodeAt(o);
                  if (
                    (a >= 55296 &&
                      a <= 57343 &&
                      (a =
                        (65536 + ((1023 & a) << 10)) |
                        (1023 & e.charCodeAt(++o))),
                    (T[t >> 2] = a),
                    (t += 4) + 4 > s)
                  )
                    break;
                }
                return (T[t >> 2] = 0), t - r;
              }
              function _t(e) {
                for (var t = 0, i = 0; i < e.length; ++i) {
                  var r = e.charCodeAt(i);
                  r >= 55296 && r <= 57343 && ++i, (t += 4);
                }
                return t;
              }
              var Vt = {};
              function Nt(e) {
                var t = Vt[e];
                return void 0 === t ? _e(e) : t;
              }
              var Ft = [],
                Bt = [];
              function Ht(e) {
                return e % 4 == 0 && (e % 100 != 0 || e % 400 == 0);
              }
              var zt,
                Yt = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335],
                Gt = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
              function Xt(e) {
                var t = he(e) + 1,
                  i = xa(t);
                return i && wt(e, i, t), i;
              }
              function jt(t, i) {
                if (
                  ((Jt.mainLoop.timingMode = t),
                  (Jt.mainLoop.timingValue = i),
                  !Jt.mainLoop.func)
                )
                  return 1;
                if ((Jt.mainLoop.running || (Jt.mainLoop.running = !0), 0 == t))
                  (Jt.mainLoop.scheduler = function () {
                    var e =
                      0 | Math.max(0, Jt.mainLoop.tickStartTime + i - zt());
                    setTimeout(Jt.mainLoop.runner, e);
                  }),
                    (Jt.mainLoop.method = "timeout");
                else if (1 == t)
                  (Jt.mainLoop.scheduler = function () {
                    Jt.requestAnimationFrame(Jt.mainLoop.runner);
                  }),
                    (Jt.mainLoop.method = "rAF");
                else if (2 == t) {
                  if ("undefined" == typeof setImmediate) {
                    var r = [],
                      s = "setimmediate";
                    addEventListener(
                      "message",
                      (e) => {
                        (e.data !== s && e.data.target !== s) ||
                          (e.stopPropagation(), r.shift()());
                      },
                      !0
                    ),
                      (setImmediate = function (t) {
                        r.push(t),
                          p
                            ? (void 0 === e.setImmediates &&
                                (e.setImmediates = []),
                              e.setImmediates.push(t),
                              postMessage({ target: s }))
                            : postMessage(s, "*");
                      });
                  }
                  (Jt.mainLoop.scheduler = function () {
                    setImmediate(Jt.mainLoop.runner);
                  }),
                    (Jt.mainLoop.method = "immediate");
                }
                return 0;
              }
              function Wt(e, t, i, r, s) {
                M(
                  !Jt.mainLoop.func,
                  "emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters."
                ),
                  (Jt.mainLoop.func = e),
                  (Jt.mainLoop.arg = r);
                var o = Jt.mainLoop.currentlyRunningMainloop;
                function a() {
                  return !(o < Jt.mainLoop.currentlyRunningMainloop);
                }
                if (
                  ((Jt.mainLoop.running = !1),
                  (Jt.mainLoop.runner = function () {
                    if (!L)
                      if (Jt.mainLoop.queue.length > 0) {
                        var t = Date.now(),
                          i = Jt.mainLoop.queue.shift();
                        if ((i.func(i.arg), Jt.mainLoop.remainingBlockers)) {
                          var r = Jt.mainLoop.remainingBlockers,
                            s = r % 1 == 0 ? r - 1 : Math.floor(r);
                          i.counted
                            ? (Jt.mainLoop.remainingBlockers = s)
                            : ((s += 0.5),
                              (Jt.mainLoop.remainingBlockers =
                                (8 * r + s) / 9));
                        }
                        if (
                          (f(
                            'main loop blocker "' +
                              i.name +
                              '" took ' +
                              (Date.now() - t) +
                              " ms"
                          ),
                          Jt.mainLoop.updateStatus(),
                          !a())
                        )
                          return;
                        setTimeout(Jt.mainLoop.runner, 0);
                      } else
                        a() &&
                          ((Jt.mainLoop.currentFrameNumber =
                            (Jt.mainLoop.currentFrameNumber + 1) | 0),
                          1 == Jt.mainLoop.timingMode &&
                          Jt.mainLoop.timingValue > 1 &&
                          Jt.mainLoop.currentFrameNumber %
                            Jt.mainLoop.timingValue !=
                            0
                            ? Jt.mainLoop.scheduler()
                            : (0 == Jt.mainLoop.timingMode &&
                                (Jt.mainLoop.tickStartTime = zt()),
                              Jt.mainLoop.runIter(e),
                              a() &&
                                ("object" == typeof SDL &&
                                  SDL.audio &&
                                  SDL.audio.queueNewAudioData &&
                                  SDL.audio.queueNewAudioData(),
                                Jt.mainLoop.scheduler())));
                  }),
                  s ||
                    (t && t > 0 ? jt(0, 1e3 / t) : jt(1, 1),
                    Jt.mainLoop.scheduler()),
                  i)
                )
                  throw "unwind";
              }
              function Ut(e) {
                if (e instanceof te || "unwind" == e) return P;
                u(1, e);
              }
              function $t(t, i) {
                var r;
                (P = t),
                  (P = r = t),
                  B() || (e.onExit && e.onExit(r), (L = !0)),
                  u(r, new te(r));
              }
              zt = () => performance.now();
              var qt = $t;
              function Kt(e) {
                if (!L)
                  try {
                    e(),
                      (function () {
                        if (!B())
                          try {
                            qt(P);
                          } catch (e) {
                            Ut(e);
                          }
                      })();
                  } catch (e) {
                    Ut(e);
                  }
              }
              function Zt(e, t) {
                return setTimeout(() => {
                  Kt(e);
                }, t);
              }
              var Jt = {
                  mainLoop: {
                    running: !1,
                    scheduler: null,
                    method: "",
                    currentlyRunningMainloop: 0,
                    func: null,
                    arg: 0,
                    timingMode: 0,
                    timingValue: 0,
                    currentFrameNumber: 0,
                    queue: [],
                    pause: function () {
                      (Jt.mainLoop.scheduler = null),
                        Jt.mainLoop.currentlyRunningMainloop++;
                    },
                    resume: function () {
                      Jt.mainLoop.currentlyRunningMainloop++;
                      var e = Jt.mainLoop.timingMode,
                        t = Jt.mainLoop.timingValue,
                        i = Jt.mainLoop.func;
                      (Jt.mainLoop.func = null),
                        Wt(i, 0, !1, Jt.mainLoop.arg, !0),
                        jt(e, t),
                        Jt.mainLoop.scheduler();
                    },
                    updateStatus: function () {
                      if (e.setStatus) {
                        var t = e.statusMessage || "Please wait...",
                          i = Jt.mainLoop.remainingBlockers,
                          r = Jt.mainLoop.expectedBlockers;
                        i
                          ? i < r
                            ? e.setStatus(t + " (" + (r - i) + "/" + r + ")")
                            : e.setStatus(t)
                          : e.setStatus("");
                      }
                    },
                    runIter: function (t) {
                      if (!L) {
                        if (e.preMainLoop && !1 === e.preMainLoop()) return;
                        Kt(t), e.postMainLoop && e.postMainLoop();
                      }
                    },
                  },
                  isFullscreen: !1,
                  pointerLock: !1,
                  moduleContextCreatedCallbacks: [],
                  workers: [],
                  init: function () {
                    if (!Jt.initted) {
                      Jt.initted = !0;
                      var t = {
                        canHandle: function (t) {
                          return (
                            !e.noImageDecoding &&
                            /\.(jpg|jpeg|png|bmp)$/i.test(t)
                          );
                        },
                        handle: function (e, t, i, r) {
                          var s = new Blob([e], { type: Jt.getMimetype(t) });
                          s.size !== e.length &&
                            (s = new Blob([new Uint8Array(e).buffer], {
                              type: Jt.getMimetype(t),
                            }));
                          var o = URL.createObjectURL(s),
                            a = new Image();
                          (a.onload = () => {
                            M(
                              a.complete,
                              "Image " + t + " could not be decoded"
                            );
                            var r = document.createElement("canvas");
                            (r.width = a.width),
                              (r.height = a.height),
                              r.getContext("2d").drawImage(a, 0, 0),
                              (ya[t] = r),
                              URL.revokeObjectURL(o),
                              i && i(e);
                          }),
                            (a.onerror = (e) => {
                              f("Image " + o + " could not be decoded"),
                                r && r();
                            }),
                            (a.src = o);
                        },
                      };
                      me.push(t);
                      var i = {
                        canHandle: function (t) {
                          return (
                            !e.noAudioDecoding &&
                            t.substr(-4) in { ".ogg": 1, ".wav": 1, ".mp3": 1 }
                          );
                        },
                        handle: function (e, t, i, r) {
                          var s = !1;
                          function o(r) {
                            s || ((s = !0), (fa[t] = r), i && i(e));
                          }
                          var a = new Blob([e], { type: Jt.getMimetype(t) }),
                            n = URL.createObjectURL(a),
                            l = new Audio();
                          l.addEventListener("canplaythrough", () => o(l), !1),
                            (l.onerror = function (i) {
                              s ||
                                (v(
                                  "warning: browser could not fully decode audio " +
                                    t +
                                    ", trying slower base64 approach"
                                ),
                                (l.src =
                                  "data:audio/x-" +
                                  t.substr(-3) +
                                  ";base64," +
                                  (function (e) {
                                    for (
                                      var t =
                                          "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
                                        i = "",
                                        r = 0,
                                        s = 0,
                                        o = 0;
                                      o < e.length;
                                      o++
                                    )
                                      for (
                                        r = (r << 8) | e[o], s += 8;
                                        s >= 6;

                                      ) {
                                        var a = (r >> (s - 6)) & 63;
                                        (s -= 6), (i += t[a]);
                                      }
                                    return (
                                      2 == s
                                        ? ((i += t[(3 & r) << 4]), (i += "=="))
                                        : 4 == s &&
                                          ((i += t[(15 & r) << 2]), (i += "=")),
                                      i
                                    );
                                  })(e)),
                                o(l));
                            }),
                            (l.src = n),
                            Zt(() => {
                              o(l);
                            }, 1e4);
                        },
                      };
                      me.push(i);
                      var r = e.canvas;
                      r &&
                        ((r.requestPointerLock =
                          r.requestPointerLock ||
                          r.mozRequestPointerLock ||
                          r.webkitRequestPointerLock ||
                          r.msRequestPointerLock ||
                          (() => {})),
                        (r.exitPointerLock =
                          document.exitPointerLock ||
                          document.mozExitPointerLock ||
                          document.webkitExitPointerLock ||
                          document.msExitPointerLock ||
                          (() => {})),
                        (r.exitPointerLock = r.exitPointerLock.bind(document)),
                        document.addEventListener("pointerlockchange", s, !1),
                        document.addEventListener(
                          "mozpointerlockchange",
                          s,
                          !1
                        ),
                        document.addEventListener(
                          "webkitpointerlockchange",
                          s,
                          !1
                        ),
                        document.addEventListener("mspointerlockchange", s, !1),
                        e.elementPointerLock &&
                          r.addEventListener(
                            "click",
                            (t) => {
                              !Jt.pointerLock &&
                                e.canvas.requestPointerLock &&
                                (e.canvas.requestPointerLock(),
                                t.preventDefault());
                            },
                            !1
                          ));
                    }
                    function s() {
                      Jt.pointerLock =
                        document.pointerLockElement === e.canvas ||
                        document.mozPointerLockElement === e.canvas ||
                        document.webkitPointerLockElement === e.canvas ||
                        document.msPointerLockElement === e.canvas;
                    }
                  },
                  createContext: function (t, i, r, s) {
                    if (i && e.ctx && t == e.canvas) return e.ctx;
                    var o, a;
                    if (i) {
                      var n = {
                        antialias: !1,
                        alpha: !1,
                        majorVersion:
                          "undefined" != typeof WebGL2RenderingContext ? 2 : 1,
                      };
                      if (s) for (var l in s) n[l] = s[l];
                      void 0 !== ei &&
                        (a = ei.createContext(t, n)) &&
                        (o = ei.getContext(a).GLctx);
                    } else o = t.getContext("2d");
                    return o
                      ? (r &&
                          (i ||
                            M(
                              void 0 === ga,
                              "cannot set in module if GLctx is used, but we are a non-GL context that would replace it"
                            ),
                          (e.ctx = o),
                          i && ei.makeContextCurrent(a),
                          (e.useWebGL = i),
                          Jt.moduleContextCreatedCallbacks.forEach((e) => e()),
                          Jt.init()),
                        o)
                      : null;
                  },
                  destroyContext: function (e, t, i) {},
                  fullscreenHandlersInstalled: !1,
                  lockPointer: void 0,
                  resizeCanvas: void 0,
                  requestFullscreen: function (t, i) {
                    (Jt.lockPointer = t),
                      (Jt.resizeCanvas = i),
                      void 0 === Jt.lockPointer && (Jt.lockPointer = !0),
                      void 0 === Jt.resizeCanvas && (Jt.resizeCanvas = !1);
                    var r = e.canvas;
                    function s() {
                      Jt.isFullscreen = !1;
                      var t = r.parentNode;
                      (document.fullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.webkitCurrentFullScreenElement) === t
                        ? ((r.exitFullscreen = Jt.exitFullscreen),
                          Jt.lockPointer && r.requestPointerLock(),
                          (Jt.isFullscreen = !0),
                          Jt.resizeCanvas
                            ? Jt.setFullscreenCanvasSize()
                            : Jt.updateCanvasDimensions(r))
                        : (t.parentNode.insertBefore(r, t),
                          t.parentNode.removeChild(t),
                          Jt.resizeCanvas
                            ? Jt.setWindowedCanvasSize()
                            : Jt.updateCanvasDimensions(r)),
                        e.onFullScreen && e.onFullScreen(Jt.isFullscreen),
                        e.onFullscreen && e.onFullscreen(Jt.isFullscreen);
                    }
                    Jt.fullscreenHandlersInstalled ||
                      ((Jt.fullscreenHandlersInstalled = !0),
                      document.addEventListener("fullscreenchange", s, !1),
                      document.addEventListener("mozfullscreenchange", s, !1),
                      document.addEventListener(
                        "webkitfullscreenchange",
                        s,
                        !1
                      ),
                      document.addEventListener("MSFullscreenChange", s, !1));
                    var o = document.createElement("div");
                    r.parentNode.insertBefore(o, r),
                      o.appendChild(r),
                      (o.requestFullscreen =
                        o.requestFullscreen ||
                        o.mozRequestFullScreen ||
                        o.msRequestFullscreen ||
                        (o.webkitRequestFullscreen
                          ? () =>
                              o.webkitRequestFullscreen(
                                Element.ALLOW_KEYBOARD_INPUT
                              )
                          : null) ||
                        (o.webkitRequestFullScreen
                          ? () =>
                              o.webkitRequestFullScreen(
                                Element.ALLOW_KEYBOARD_INPUT
                              )
                          : null)),
                      o.requestFullscreen();
                  },
                  exitFullscreen: function () {
                    return (
                      !!Jt.isFullscreen &&
                      ((
                        document.exitFullscreen ||
                        document.cancelFullScreen ||
                        document.mozCancelFullScreen ||
                        document.msExitFullscreen ||
                        document.webkitCancelFullScreen ||
                        (() => {})
                      ).apply(document, []),
                      !0)
                    );
                  },
                  nextRAF: 0,
                  fakeRequestAnimationFrame: function (e) {
                    var t = Date.now();
                    if (0 === Jt.nextRAF) Jt.nextRAF = t + 1e3 / 60;
                    else for (; t + 2 >= Jt.nextRAF; ) Jt.nextRAF += 1e3 / 60;
                    var i = Math.max(Jt.nextRAF - t, 0);
                    setTimeout(e, i);
                  },
                  requestAnimationFrame: function (e) {
                    "function" != typeof requestAnimationFrame
                      ? (0, Jt.fakeRequestAnimationFrame)(e)
                      : requestAnimationFrame(e);
                  },
                  safeSetTimeout: function (e, t) {
                    return Zt(e, t);
                  },
                  safeRequestAnimationFrame: function (e) {
                    return Jt.requestAnimationFrame(() => {
                      Kt(e);
                    });
                  },
                  getMimetype: function (e) {
                    return {
                      jpg: "image/jpeg",
                      jpeg: "image/jpeg",
                      png: "image/png",
                      bmp: "image/bmp",
                      ogg: "audio/ogg",
                      wav: "audio/wav",
                      mp3: "audio/mpeg",
                    }[e.substr(e.lastIndexOf(".") + 1)];
                  },
                  getUserMedia: function (e) {
                    window.getUserMedia ||
                      (window.getUserMedia =
                        navigator.getUserMedia || navigator.mozGetUserMedia),
                      window.getUserMedia(e);
                  },
                  getMovementX: function (e) {
                    return (
                      e.movementX || e.mozMovementX || e.webkitMovementX || 0
                    );
                  },
                  getMovementY: function (e) {
                    return (
                      e.movementY || e.mozMovementY || e.webkitMovementY || 0
                    );
                  },
                  getMouseWheelDelta: function (e) {
                    var t = 0;
                    switch (e.type) {
                      case "DOMMouseScroll":
                        t = e.detail / 3;
                        break;
                      case "mousewheel":
                        t = e.wheelDelta / 120;
                        break;
                      case "wheel":
                        switch (((t = e.deltaY), e.deltaMode)) {
                          case 0:
                            t /= 100;
                            break;
                          case 1:
                            t /= 3;
                            break;
                          case 2:
                            t *= 80;
                            break;
                          default:
                            throw (
                              "unrecognized mouse wheel delta mode: " +
                              e.deltaMode
                            );
                        }
                        break;
                      default:
                        throw "unrecognized mouse wheel event: " + e.type;
                    }
                    return t;
                  },
                  mouseX: 0,
                  mouseY: 0,
                  mouseMovementX: 0,
                  mouseMovementY: 0,
                  touches: {},
                  lastTouches: {},
                  calculateMouseEvent: function (t) {
                    if (Jt.pointerLock)
                      "mousemove" != t.type && "mozMovementX" in t
                        ? (Jt.mouseMovementX = Jt.mouseMovementY = 0)
                        : ((Jt.mouseMovementX = Jt.getMovementX(t)),
                          (Jt.mouseMovementY = Jt.getMovementY(t))),
                        "undefined" != typeof SDL
                          ? ((Jt.mouseX = SDL.mouseX + Jt.mouseMovementX),
                            (Jt.mouseY = SDL.mouseY + Jt.mouseMovementY))
                          : ((Jt.mouseX += Jt.mouseMovementX),
                            (Jt.mouseY += Jt.mouseMovementY));
                    else {
                      var i = e.canvas.getBoundingClientRect(),
                        r = e.canvas.width,
                        s = e.canvas.height,
                        o =
                          void 0 !== window.scrollX
                            ? window.scrollX
                            : window.pageXOffset,
                        a =
                          void 0 !== window.scrollY
                            ? window.scrollY
                            : window.pageYOffset;
                      if (
                        "touchstart" === t.type ||
                        "touchend" === t.type ||
                        "touchmove" === t.type
                      ) {
                        var n = t.touch;
                        if (void 0 === n) return;
                        var l = n.pageX - (o + i.left),
                          d = n.pageY - (a + i.top),
                          h = { x: (l *= r / i.width), y: (d *= s / i.height) };
                        if ("touchstart" === t.type)
                          (Jt.lastTouches[n.identifier] = h),
                            (Jt.touches[n.identifier] = h);
                        else if (
                          "touchend" === t.type ||
                          "touchmove" === t.type
                        ) {
                          var u = Jt.touches[n.identifier];
                          u || (u = h),
                            (Jt.lastTouches[n.identifier] = u),
                            (Jt.touches[n.identifier] = h);
                        }
                        return;
                      }
                      var c = t.pageX - (o + i.left),
                        p = t.pageY - (a + i.top);
                      (c *= r / i.width),
                        (p *= s / i.height),
                        (Jt.mouseMovementX = c - Jt.mouseX),
                        (Jt.mouseMovementY = p - Jt.mouseY),
                        (Jt.mouseX = c),
                        (Jt.mouseY = p);
                    }
                  },
                  resizeListeners: [],
                  updateResizeListeners: function () {
                    var t = e.canvas;
                    Jt.resizeListeners.forEach((e) => e(t.width, t.height));
                  },
                  setCanvasSize: function (t, i, r) {
                    var s = e.canvas;
                    Jt.updateCanvasDimensions(s, t, i),
                      r || Jt.updateResizeListeners();
                  },
                  windowedWidth: 0,
                  windowedHeight: 0,
                  setFullscreenCanvasSize: function () {
                    if ("undefined" != typeof SDL) {
                      var t = E[SDL.screen >> 2];
                      (t |= 8388608), (T[SDL.screen >> 2] = t);
                    }
                    Jt.updateCanvasDimensions(e.canvas),
                      Jt.updateResizeListeners();
                  },
                  setWindowedCanvasSize: function () {
                    if ("undefined" != typeof SDL) {
                      var t = E[SDL.screen >> 2];
                      (t &= -8388609), (T[SDL.screen >> 2] = t);
                    }
                    Jt.updateCanvasDimensions(e.canvas),
                      Jt.updateResizeListeners();
                  },
                  updateCanvasDimensions: function (t, i, r) {
                    i && r
                      ? ((t.widthNative = i), (t.heightNative = r))
                      : ((i = t.widthNative), (r = t.heightNative));
                    var s = i,
                      o = r;
                    if (
                      (e.forcedAspectRatio &&
                        e.forcedAspectRatio > 0 &&
                        (s / o < e.forcedAspectRatio
                          ? (s = Math.round(o * e.forcedAspectRatio))
                          : (o = Math.round(s / e.forcedAspectRatio))),
                      (document.fullscreenElement ||
                        document.mozFullScreenElement ||
                        document.msFullscreenElement ||
                        document.webkitFullscreenElement ||
                        document.webkitCurrentFullScreenElement) ===
                        t.parentNode && "undefined" != typeof screen)
                    ) {
                      var a = Math.min(screen.width / s, screen.height / o);
                      (s = Math.round(s * a)), (o = Math.round(o * a));
                    }
                    Jt.resizeCanvas
                      ? (t.width != s && (t.width = s),
                        t.height != o && (t.height = o),
                        void 0 !== t.style &&
                          (t.style.removeProperty("width"),
                          t.style.removeProperty("height")))
                      : (t.width != i && (t.width = i),
                        t.height != r && (t.height = r),
                        void 0 !== t.style &&
                          (s != i || o != r
                            ? (t.style.setProperty(
                                "width",
                                s + "px",
                                "important"
                              ),
                              t.style.setProperty(
                                "height",
                                o + "px",
                                "important"
                              ))
                            : (t.style.removeProperty("width"),
                              t.style.removeProperty("height"))));
                  },
                },
                Qt = {
                  errorCode: 12288,
                  defaultDisplayInitialized: !1,
                  currentContext: 0,
                  currentReadSurface: 0,
                  currentDrawSurface: 0,
                  contextAttributes: {
                    alpha: !1,
                    depth: !1,
                    stencil: !1,
                    antialias: !1,
                  },
                  stringCache: {},
                  setErrorCode: function (e) {
                    Qt.errorCode = e;
                  },
                  chooseConfig: function (e, t, i, r, s) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if (t)
                      for (;;) {
                        var o = T[t >> 2];
                        if (12321 == o) {
                          var a = T[(t + 4) >> 2];
                          Qt.contextAttributes.alpha = a > 0;
                        } else if (12325 == o) {
                          var n = T[(t + 4) >> 2];
                          Qt.contextAttributes.depth = n > 0;
                        } else if (12326 == o) {
                          var l = T[(t + 4) >> 2];
                          Qt.contextAttributes.stencil = l > 0;
                        } else if (12337 == o) {
                          var d = T[(t + 4) >> 2];
                          Qt.contextAttributes.antialias = d > 0;
                        } else if (12338 == o)
                          (d = T[(t + 4) >> 2]),
                            (Qt.contextAttributes.antialias = 1 == d);
                        else if (12544 == o) {
                          var h = T[(t + 4) >> 2];
                          Qt.contextAttributes.lowLatency = 12547 != h;
                        } else if (12344 == o) break;
                        t += 8;
                      }
                    return (i && r) || s
                      ? (s && (T[s >> 2] = 1),
                        i && r > 0 && (T[i >> 2] = 62002),
                        Qt.setErrorCode(12288),
                        1)
                      : (Qt.setErrorCode(12300), 0);
                  },
                },
                ei = {
                  counter: 1,
                  buffers: [],
                  programs: [],
                  framebuffers: [],
                  renderbuffers: [],
                  textures: [],
                  shaders: [],
                  vaos: [],
                  contexts: [],
                  offscreenCanvases: {},
                  queries: [],
                  samplers: [],
                  transformFeedbacks: [],
                  syncs: [],
                  stringCache: {},
                  stringiCache: {},
                  unpackAlignment: 4,
                  recordError: function (e) {
                    ei.lastError || (ei.lastError = e);
                  },
                  getNewId: function (e) {
                    for (var t = ei.counter++, i = e.length; i < t; i++)
                      e[i] = null;
                    return t;
                  },
                  getSource: function (e, t, i, r) {
                    for (var s = "", o = 0; o < t; ++o) {
                      var a = r ? T[(r + 4 * o) >> 2] : -1;
                      s += Ce(T[(i + 4 * o) >> 2], a < 0 ? void 0 : a);
                    }
                    return s;
                  },
                  createContext: function (e, t) {
                    var i =
                      t.majorVersion > 1
                        ? e.getContext("webgl2", t)
                        : e.getContext("webgl", t);
                    return i ? ei.registerContext(i, t) : 0;
                  },
                  registerContext: function (e, t) {
                    var i = ei.getNewId(ei.contexts),
                      r = {
                        handle: i,
                        attributes: t,
                        version: t.majorVersion,
                        GLctx: e,
                      };
                    return (
                      e.canvas && (e.canvas.GLctxObject = r),
                      (ei.contexts[i] = r),
                      (void 0 === t.enableExtensionsByDefault ||
                        t.enableExtensionsByDefault) &&
                        ei.initExtensions(r),
                      i
                    );
                  },
                  makeContextCurrent: function (t) {
                    return (
                      (ei.currentContext = ei.contexts[t]),
                      (e.ctx = ga =
                        ei.currentContext && ei.currentContext.GLctx),
                      !(t && !ga)
                    );
                  },
                  getContext: function (e) {
                    return ei.contexts[e];
                  },
                  deleteContext: function (e) {
                    ei.currentContext === ei.contexts[e] &&
                      (ei.currentContext = null),
                      "object" == typeof si &&
                        si.removeAllHandlersOnTarget(
                          ei.contexts[e].GLctx.canvas
                        ),
                      ei.contexts[e] &&
                        ei.contexts[e].GLctx.canvas &&
                        (ei.contexts[e].GLctx.canvas.GLctxObject = void 0),
                      (ei.contexts[e] = null);
                  },
                  initExtensions: function (e) {
                    if ((e || (e = ei.currentContext), !e.initExtensionsDone)) {
                      e.initExtensionsDone = !0;
                      var t,
                        i = e.GLctx;
                      !(function (e) {
                        var t = e.getExtension("ANGLE_instanced_arrays");
                        t &&
                          ((e.vertexAttribDivisor = function (e, i) {
                            t.vertexAttribDivisorANGLE(e, i);
                          }),
                          (e.drawArraysInstanced = function (e, i, r, s) {
                            t.drawArraysInstancedANGLE(e, i, r, s);
                          }),
                          (e.drawElementsInstanced = function (e, i, r, s, o) {
                            t.drawElementsInstancedANGLE(e, i, r, s, o);
                          }));
                      })(i),
                        (function (e) {
                          var t = e.getExtension("OES_vertex_array_object");
                          t &&
                            ((e.createVertexArray = function () {
                              return t.createVertexArrayOES();
                            }),
                            (e.deleteVertexArray = function (e) {
                              t.deleteVertexArrayOES(e);
                            }),
                            (e.bindVertexArray = function (e) {
                              t.bindVertexArrayOES(e);
                            }),
                            (e.isVertexArray = function (e) {
                              return t.isVertexArrayOES(e);
                            }));
                        })(i),
                        (function (e) {
                          var t = e.getExtension("WEBGL_draw_buffers");
                          t &&
                            (e.drawBuffers = function (e, i) {
                              t.drawBuffersWEBGL(e, i);
                            });
                        })(i),
                        ((t = i).dibvbi = t.getExtension(
                          "WEBGL_draw_instanced_base_vertex_base_instance"
                        )),
                        (function (e) {
                          e.mdibvbi = e.getExtension(
                            "WEBGL_multi_draw_instanced_base_vertex_base_instance"
                          );
                        })(i),
                        e.version >= 2 &&
                          (i.disjointTimerQueryExt = i.getExtension(
                            "EXT_disjoint_timer_query_webgl2"
                          )),
                        (e.version < 2 || !i.disjointTimerQueryExt) &&
                          (i.disjointTimerQueryExt = i.getExtension(
                            "EXT_disjoint_timer_query"
                          )),
                        (function (e) {
                          e.multiDrawWebgl = e.getExtension("WEBGL_multi_draw");
                        })(i),
                        (i.getSupportedExtensions() || []).forEach(function (
                          e
                        ) {
                          e.includes("lose_context") ||
                            e.includes("debug") ||
                            i.getExtension(e);
                        });
                    }
                  },
                },
                ti = [];
              function ii(e, t) {
                var i;
                for (ti.length = 0, t >>= 2; (i = x[e++]); )
                  (t += (105 != i) & t),
                    ti.push(105 == i ? T[t] : w[t++ >> 1]),
                    ++t;
                return ti;
              }
              function ri(e) {
                var t = wa(),
                  i = e();
                return Da(t), i;
              }
              var si = {
                  inEventHandler: 0,
                  removeAllEventListeners: function () {
                    for (var e = si.eventHandlers.length - 1; e >= 0; --e)
                      si._removeHandler(e);
                    (si.eventHandlers = []), (si.deferredCalls = []);
                  },
                  registerRemoveEventListeners: function () {
                    si.removeEventListenersRegistered ||
                      (V.push(si.removeAllEventListeners),
                      (si.removeEventListenersRegistered = !0));
                  },
                  deferredCalls: [],
                  deferCall: function (e, t, i) {
                    function r(e, t) {
                      if (e.length != t.length) return !1;
                      for (var i in e) if (e[i] != t[i]) return !1;
                      return !0;
                    }
                    for (var s in si.deferredCalls) {
                      var o = si.deferredCalls[s];
                      if (o.targetFunction == e && r(o.argsList, i)) return;
                    }
                    si.deferredCalls.push({
                      targetFunction: e,
                      precedence: t,
                      argsList: i,
                    }),
                      si.deferredCalls.sort(function (e, t) {
                        return e.precedence < t.precedence;
                      });
                  },
                  removeDeferredCalls: function (e) {
                    for (var t = 0; t < si.deferredCalls.length; ++t)
                      si.deferredCalls[t].targetFunction == e &&
                        (si.deferredCalls.splice(t, 1), --t);
                  },
                  canPerformEventHandlerRequests: function () {
                    return (
                      si.inEventHandler &&
                      si.currentEventHandler.allowsDeferredCalls
                    );
                  },
                  runDeferredCalls: function () {
                    if (si.canPerformEventHandlerRequests())
                      for (var e = 0; e < si.deferredCalls.length; ++e) {
                        var t = si.deferredCalls[e];
                        si.deferredCalls.splice(e, 1),
                          --e,
                          t.targetFunction.apply(null, t.argsList);
                      }
                  },
                  eventHandlers: [],
                  removeAllHandlersOnTarget: function (e, t) {
                    for (var i = 0; i < si.eventHandlers.length; ++i)
                      si.eventHandlers[i].target != e ||
                        (t && t != si.eventHandlers[i].eventTypeString) ||
                        si._removeHandler(i--);
                  },
                  _removeHandler: function (e) {
                    var t = si.eventHandlers[e];
                    t.target.removeEventListener(
                      t.eventTypeString,
                      t.eventListenerFunc,
                      t.useCapture
                    ),
                      si.eventHandlers.splice(e, 1);
                  },
                  registerOrRemoveHandler: function (e) {
                    if (!e.target) return -4;
                    var t = function (t) {
                      ++si.inEventHandler,
                        (si.currentEventHandler = e),
                        si.runDeferredCalls(),
                        e.handlerFunc(t),
                        si.runDeferredCalls(),
                        --si.inEventHandler;
                    };
                    if (e.callbackfunc)
                      (e.eventListenerFunc = t),
                        e.target.addEventListener(
                          e.eventTypeString,
                          t,
                          e.useCapture
                        ),
                        si.eventHandlers.push(e),
                        si.registerRemoveEventListeners();
                    else
                      for (var i = 0; i < si.eventHandlers.length; ++i)
                        si.eventHandlers[i].target == e.target &&
                          si.eventHandlers[i].eventTypeString ==
                            e.eventTypeString &&
                          si._removeHandler(i--);
                    return 0;
                  },
                  getNodeNameForTarget: function (e) {
                    return e
                      ? e == window
                        ? "#window"
                        : e == screen
                        ? "#screen"
                        : e && e.nodeName
                        ? e.nodeName
                        : ""
                      : "";
                  },
                  fullscreenEnabled: function () {
                    return (
                      document.fullscreenEnabled ||
                      document.webkitFullscreenEnabled
                    );
                  },
                },
                oi = {};
              function ai(e) {
                return e > 2 ? Ce(e) : e;
              }
              var ni = [0, document, window];
              function li(e) {
                return (e = ai(e)), ni[e] || document.querySelector(e);
              }
              function di(e) {
                return li(e);
              }
              function hi(e) {
                var t = he(e) + 1,
                  i = La(t);
                return wt(e, i, t), i;
              }
              function ui(e) {
                return ri(function () {
                  var t = La(8),
                    i = t + 4;
                  return (
                    (function (e, t, i) {
                      var r = di(e);
                      if (!r) return -4;
                      (T[t >> 2] = r.width), (T[i >> 2] = r.height);
                    })(hi(e.id), t, i),
                    [T[t >> 2], T[i >> 2]]
                  );
                });
              }
              function ci(e, t, i) {
                var r = di(e);
                return r ? ((r.width = t), (r.height = i), 0) : -4;
              }
              function pi(e, t, i) {
                e.controlTransferredOffscreen
                  ? ri(function () {
                      ci(hi(e.id), t, i);
                    })
                  : ((e.width = t), (e.height = i));
              }
              function gi(e, t, i) {
                (e.style.paddingLeft = e.style.paddingRight = i + "px"),
                  (e.style.paddingTop = e.style.paddingBottom = t + "px");
              }
              function yi(e) {
                return ni.indexOf(e) < 0
                  ? e.getBoundingClientRect()
                  : { left: 0, top: 0 };
              }
              function fi(e, t) {
                if (
                  ((0 == t.scaleMode && 0 == t.canvasResolutionScaleMode) ||
                    (function (e, t) {
                      var i = (function (e) {
                          var t = ui(e),
                            i = t[0],
                            r = t[1],
                            s = e.style.width,
                            o = e.style.height,
                            a = e.style.backgroundColor,
                            n = document.body.style.backgroundColor,
                            l = e.style.paddingLeft,
                            d = e.style.paddingRight,
                            h = e.style.paddingTop,
                            u = e.style.paddingBottom,
                            c = e.style.marginLeft,
                            p = e.style.marginRight,
                            g = e.style.marginTop,
                            y = e.style.marginBottom,
                            f = document.body.style.margin,
                            v = document.documentElement.style.overflow,
                            m = document.body.scroll,
                            S = e.style.imageRendering;
                          function P() {
                            document.fullscreenElement ||
                              document.webkitFullscreenElement ||
                              (document.removeEventListener(
                                "fullscreenchange",
                                P
                              ),
                              document.removeEventListener(
                                "webkitfullscreenchange",
                                P
                              ),
                              pi(e, i, r),
                              (e.style.width = s),
                              (e.style.height = o),
                              (e.style.backgroundColor = a),
                              n ||
                                (document.body.style.backgroundColor = "white"),
                              (document.body.style.backgroundColor = n),
                              (e.style.paddingLeft = l),
                              (e.style.paddingRight = d),
                              (e.style.paddingTop = h),
                              (e.style.paddingBottom = u),
                              (e.style.marginLeft = c),
                              (e.style.marginRight = p),
                              (e.style.marginTop = g),
                              (e.style.marginBottom = y),
                              (document.body.style.margin = f),
                              (document.documentElement.style.overflow = v),
                              (document.body.scroll = m),
                              (e.style.imageRendering = S),
                              e.GLctxObject &&
                                e.GLctxObject.GLctx.viewport(0, 0, i, r),
                              oi.canvasResizedCallback &&
                                re(oi.canvasResizedCallback)(
                                  37,
                                  0,
                                  oi.canvasResizedCallbackUserData
                                ));
                          }
                          return (
                            document.addEventListener("fullscreenchange", P),
                            document.addEventListener(
                              "webkitfullscreenchange",
                              P
                            ),
                            P
                          );
                        })(e),
                        r = t.softFullscreen ? innerWidth : screen.width,
                        s = t.softFullscreen ? innerHeight : screen.height,
                        o = yi(e),
                        a = o.width,
                        n = o.height,
                        l = ui(e),
                        d = l[0],
                        h = l[1];
                      if (3 == t.scaleMode)
                        gi(e, (s - n) / 2, (r - a) / 2), (r = a), (s = n);
                      else if (2 == t.scaleMode)
                        if (r * h < d * s) {
                          var u = (h * r) / d;
                          gi(e, (s - u) / 2, 0), (s = u);
                        } else {
                          var c = (d * s) / h;
                          gi(e, 0, (r - c) / 2), (r = c);
                        }
                      e.style.backgroundColor ||
                        (e.style.backgroundColor = "black"),
                        document.body.style.backgroundColor ||
                          (document.body.style.backgroundColor = "black"),
                        (e.style.width = r + "px"),
                        (e.style.height = s + "px"),
                        1 == t.filteringMode &&
                          ((e.style.imageRendering = "optimizeSpeed"),
                          (e.style.imageRendering = "-moz-crisp-edges"),
                          (e.style.imageRendering = "-o-crisp-edges"),
                          (e.style.imageRendering =
                            "-webkit-optimize-contrast"),
                          (e.style.imageRendering = "optimize-contrast"),
                          (e.style.imageRendering = "crisp-edges"),
                          (e.style.imageRendering = "pixelated"));
                      var p =
                        2 == t.canvasResolutionScaleMode ? devicePixelRatio : 1;
                      if (0 != t.canvasResolutionScaleMode) {
                        var g = (r * p) | 0,
                          y = (s * p) | 0;
                        pi(e, g, y),
                          e.GLctxObject &&
                            e.GLctxObject.GLctx.viewport(0, 0, g, y);
                      }
                    })(e, t),
                  e.requestFullscreen)
                )
                  e.requestFullscreen();
                else {
                  if (!e.webkitRequestFullscreen)
                    return si.fullscreenEnabled() ? -3 : -1;
                  e.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
                }
                return (
                  (oi = t),
                  t.canvasResizedCallback &&
                    re(t.canvasResizedCallback)(
                      37,
                      0,
                      t.canvasResizedCallbackUserData
                    ),
                  0
                );
              }
              function vi(e) {
                return e.requestPointerLock
                  ? (e.requestPointerLock(), 0)
                  : document.body.requestPointerLock
                  ? -3
                  : -1;
              }
              function mi(e, t) {
                w[e >> 3] = t.timestamp;
                for (var i = 0; i < t.axes.length; ++i)
                  w[(e + 8 * i + 16) >> 3] = t.axes[i];
                for (i = 0; i < t.buttons.length; ++i)
                  "object" == typeof t.buttons[i]
                    ? (w[(e + 8 * i + 528) >> 3] = t.buttons[i].value)
                    : (w[(e + 8 * i + 528) >> 3] = t.buttons[i]);
                for (i = 0; i < t.buttons.length; ++i)
                  "object" == typeof t.buttons[i]
                    ? (T[(e + 4 * i + 1040) >> 2] = t.buttons[i].pressed)
                    : (T[(e + 4 * i + 1040) >> 2] = 1 == t.buttons[i]);
                (T[(e + 1296) >> 2] = t.connected),
                  (T[(e + 1300) >> 2] = t.index),
                  (T[(e + 8) >> 2] = t.axes.length),
                  (T[(e + 12) >> 2] = t.buttons.length),
                  wt(t.id, e + 1304, 64),
                  wt(t.mapping, e + 1368, 64);
              }
              function Si(e) {
                ga.activeTexture(e);
              }
              var Pi = Si;
              function Ci(e, t) {
                ga.attachShader(ei.programs[e], ei.shaders[t]);
              }
              var xi = Ci;
              function bi(e, t, i) {
                ga.bindAttribLocation(ei.programs[e], t, Ce(i));
              }
              var Ai = bi;
              function Ti(e, t) {
                35051 == e
                  ? (ga.currentPixelPackBufferBinding = t)
                  : 35052 == e && (ga.currentPixelUnpackBufferBinding = t),
                  ga.bindBuffer(e, ei.buffers[t]);
              }
              var Ei = Ti;
              function Ri(e, t) {
                ga.bindFramebuffer(e, ei.framebuffers[t]);
              }
              var wi = Ri;
              function Di(e, t) {
                ga.bindTexture(e, ei.textures[t]);
              }
              var Li = Di;
              function Mi(e) {
                ga.bindVertexArray(ei.vaos[e]);
              }
              var Ii = Mi,
                Oi = Mi;
              function ki(e, t, i, r) {
                ga.blendColor(e, t, i, r);
              }
              var _i = ki;
              function Vi(e) {
                ga.blendEquation(e);
              }
              var Ni = Vi;
              function Fi(e, t, i, r) {
                ga.blendFuncSeparate(e, t, i, r);
              }
              var Bi = Fi;
              function Hi(e, t, i, r) {
                ei.currentContext.version >= 2
                  ? i && t
                    ? ga.bufferData(e, x, r, i, t)
                    : ga.bufferData(e, t, r)
                  : ga.bufferData(e, i ? x.subarray(i, i + t) : t, r);
              }
              var zi = Hi;
              function Yi(e) {
                return ga.checkFramebufferStatus(e);
              }
              var Gi = Yi;
              function Xi(e) {
                ga.clear(e);
              }
              var ji = Xi;
              function Wi(e, t, i, r) {
                ga.clearColor(e, t, i, r);
              }
              var Ui = Wi;
              function $i(e, t) {
                return (e >>> 0) + 4294967296 * t;
              }
              function qi(e, t, i, r) {
                ga.colorMask(!!e, !!t, !!i, !!r);
              }
              var Ki = qi;
              function Zi(e) {
                ga.compileShader(ei.shaders[e]);
              }
              var Ji = Zi;
              function Qi(e, t, i, r, s, o, a, n) {
                ei.currentContext.version >= 2
                  ? ga.currentPixelUnpackBufferBinding || !a
                    ? ga.compressedTexImage2D(e, t, i, r, s, o, a, n)
                    : ga.compressedTexImage2D(e, t, i, r, s, o, x, n, a)
                  : ga.compressedTexImage2D(
                      e,
                      t,
                      i,
                      r,
                      s,
                      o,
                      n ? x.subarray(n, n + a) : null
                    );
              }
              var er = Qi;
              function tr() {
                var e = ei.getNewId(ei.programs),
                  t = ga.createProgram();
                return (
                  (t.name = e),
                  (t.maxUniformLength =
                    t.maxAttributeLength =
                    t.maxUniformBlockNameLength =
                      0),
                  (t.uniformIdCounter = 1),
                  (ei.programs[e] = t),
                  e
                );
              }
              var ir = tr;
              function rr(e) {
                var t = ei.getNewId(ei.shaders);
                return (ei.shaders[t] = ga.createShader(e)), t;
              }
              var sr = rr;
              function or(e) {
                ga.cullFace(e);
              }
              var ar = or;
              function nr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.buffers[r];
                  s &&
                    (ga.deleteBuffer(s),
                    (s.name = 0),
                    (ei.buffers[r] = null),
                    r == ga.currentPixelPackBufferBinding &&
                      (ga.currentPixelPackBufferBinding = 0),
                    r == ga.currentPixelUnpackBufferBinding &&
                      (ga.currentPixelUnpackBufferBinding = 0));
                }
              }
              var lr = nr;
              function dr(e, t) {
                for (var i = 0; i < e; ++i) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.framebuffers[r];
                  s &&
                    (ga.deleteFramebuffer(s),
                    (s.name = 0),
                    (ei.framebuffers[r] = null));
                }
              }
              var hr = dr;
              function ur(e) {
                if (e) {
                  var t = ei.programs[e];
                  t
                    ? (ga.deleteProgram(t),
                      (t.name = 0),
                      (ei.programs[e] = null))
                    : ei.recordError(1281);
                }
              }
              var cr = ur;
              function pr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.renderbuffers[r];
                  s &&
                    (ga.deleteRenderbuffer(s),
                    (s.name = 0),
                    (ei.renderbuffers[r] = null));
                }
              }
              var gr = pr;
              function yr(e) {
                if (e) {
                  var t = ei.shaders[e];
                  t
                    ? (ga.deleteShader(t), (ei.shaders[e] = null))
                    : ei.recordError(1281);
                }
              }
              var fr = yr;
              function vr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2],
                    s = ei.textures[r];
                  s &&
                    (ga.deleteTexture(s),
                    (s.name = 0),
                    (ei.textures[r] = null));
                }
              }
              var mr = vr;
              function Sr(e, t) {
                for (var i = 0; i < e; i++) {
                  var r = T[(t + 4 * i) >> 2];
                  ga.deleteVertexArray(ei.vaos[r]), (ei.vaos[r] = null);
                }
              }
              var Pr = Sr,
                Cr = Sr;
              function xr(e) {
                ga.depthFunc(e);
              }
              var br = xr;
              function Ar(e) {
                ga.depthMask(!!e);
              }
              var Tr = Ar;
              function Er(e, t) {
                ga.detachShader(ei.programs[e], ei.shaders[t]);
              }
              var Rr = Er;
              function wr(e) {
                ga.disable(e);
              }
              var Dr = wr;
              function Lr(e, t, i) {
                ga.drawArrays(e, t, i);
              }
              var Mr = Lr;
              function Ir(e, t, i, r) {
                ga.drawArraysInstanced(e, t, i, r);
              }
              var Or = Ir,
                kr = Ir,
                _r = Ir,
                Vr = Ir,
                Nr = Ir,
                Fr = [];
              function Br(e, t) {
                for (var i = Fr[e], r = 0; r < e; r++)
                  i[r] = T[(t + 4 * r) >> 2];
                ga.drawBuffers(i);
              }
              var Hr = Br,
                zr = Br,
                Yr = Br;
              function Gr(e, t, i, r) {
                ga.drawElements(e, t, i, r);
              }
              var Xr = Gr;
              function jr(e, t, i, r, s) {
                ga.drawElementsInstanced(e, t, i, r, s);
              }
              var Wr = jr,
                Ur = jr,
                $r = jr,
                qr = jr,
                Kr = jr;
              function Zr(e) {
                ga.enable(e);
              }
              var Jr = Zr;
              function Qr(e) {
                ga.enableVertexAttribArray(e);
              }
              var es = Qr;
              function ts(e, t, i, r, s) {
                ga.framebufferTexture2D(e, t, i, ei.textures[r], s);
              }
              var is = ts;
              function rs(e) {
                ga.frontFace(e);
              }
              var ss = rs;
              function os(e, t, i, r) {
                for (var s = 0; s < e; s++) {
                  var o = ga[i](),
                    a = o && ei.getNewId(r);
                  o ? ((o.name = a), (r[a] = o)) : ei.recordError(1282),
                    (T[(t + 4 * s) >> 2] = a);
                }
              }
              function as(e, t) {
                os(e, t, "createBuffer", ei.buffers);
              }
              var ns = as;
              function ls(e, t) {
                os(e, t, "createFramebuffer", ei.framebuffers);
              }
              var ds = ls;
              function hs(e, t) {
                os(e, t, "createTexture", ei.textures);
              }
              var us = hs;
              function cs(e, t) {
                os(e, t, "createVertexArray", ei.vaos);
              }
              var ps = cs,
                gs = cs;
              function ys(e) {
                ga.generateMipmap(e);
              }
              var fs = ys;
              function vs(e, t, i, r, s, o, a, n) {
                t = ei.programs[t];
                var l = ga[e](t, i);
                if (l) {
                  var d = n && wt(l.name, n, r);
                  s && (T[s >> 2] = d),
                    o && (T[o >> 2] = l.size),
                    a && (T[a >> 2] = l.type);
                }
              }
              function ms(e, t, i, r, s, o, a) {
                vs("getActiveAttrib", e, t, i, r, s, o, a);
              }
              var Ss = ms;
              function Ps(e, t, i, r, s, o, a) {
                vs("getActiveUniform", e, t, i, r, s, o, a);
              }
              var Cs = Ps;
              function xs(e, t) {
                (E[e >> 2] = t),
                  (E[(e + 4) >> 2] = (t - E[e >> 2]) / 4294967296);
              }
              function bs(e, t, i) {
                if (t) {
                  var r = void 0;
                  switch (e) {
                    case 36346:
                      r = 1;
                      break;
                    case 36344:
                      return void (0 != i && 1 != i && ei.recordError(1280));
                    case 34814:
                    case 36345:
                      r = 0;
                      break;
                    case 34466:
                      var s = ga.getParameter(34467);
                      r = s ? s.length : 0;
                      break;
                    case 33309:
                      if (ei.currentContext.version < 2)
                        return void ei.recordError(1282);
                      r = 2 * (ga.getSupportedExtensions() || []).length;
                      break;
                    case 33307:
                    case 33308:
                      if (ei.currentContext.version < 2)
                        return void ei.recordError(1280);
                      r = 33307 == e ? 3 : 0;
                  }
                  if (void 0 === r) {
                    var o = ga.getParameter(e);
                    switch (typeof o) {
                      case "number":
                        r = o;
                        break;
                      case "boolean":
                        r = o ? 1 : 0;
                        break;
                      case "string":
                        return void ei.recordError(1280);
                      case "object":
                        if (null === o)
                          switch (e) {
                            case 34964:
                            case 35725:
                            case 34965:
                            case 36006:
                            case 36007:
                            case 32873:
                            case 34229:
                            case 36662:
                            case 36663:
                            case 35053:
                            case 35055:
                            case 36010:
                            case 35097:
                            case 35869:
                            case 32874:
                            case 36389:
                            case 35983:
                            case 35368:
                            case 34068:
                              r = 0;
                              break;
                            default:
                              return void ei.recordError(1280);
                          }
                        else {
                          if (
                            o instanceof Float32Array ||
                            o instanceof Uint32Array ||
                            o instanceof Int32Array ||
                            o instanceof Array
                          ) {
                            for (var a = 0; a < o.length; ++a)
                              switch (i) {
                                case 0:
                                  T[(t + 4 * a) >> 2] = o[a];
                                  break;
                                case 2:
                                  R[(t + 4 * a) >> 2] = o[a];
                                  break;
                                case 4:
                                  C[(t + a) >> 0] = o[a] ? 1 : 0;
                              }
                            return;
                          }
                          try {
                            r = 0 | o.name;
                          } catch (t) {
                            return (
                              ei.recordError(1280),
                              void v(
                                "GL_INVALID_ENUM in glGet" +
                                  i +
                                  "v: Unknown object returned from WebGL getParameter(" +
                                  e +
                                  ")! (error: " +
                                  t +
                                  ")"
                              )
                            );
                          }
                        }
                        break;
                      default:
                        return (
                          ei.recordError(1280),
                          void v(
                            "GL_INVALID_ENUM in glGet" +
                              i +
                              "v: Native code calling glGet" +
                              i +
                              "v(" +
                              e +
                              ") and it returns " +
                              o +
                              " of type " +
                              typeof o +
                              "!"
                          )
                        );
                    }
                  }
                  switch (i) {
                    case 1:
                      xs(t, r);
                      break;
                    case 0:
                      T[t >> 2] = r;
                      break;
                    case 2:
                      R[t >> 2] = r;
                      break;
                    case 4:
                      C[t >> 0] = r ? 1 : 0;
                  }
                } else ei.recordError(1281);
              }
              function As(e, t, i, r) {
                if (i) {
                  var s,
                    o = ga.getIndexedParameter(e, t);
                  switch (typeof o) {
                    case "boolean":
                      s = o ? 1 : 0;
                      break;
                    case "number":
                      s = o;
                      break;
                    case "object":
                      if (null === o)
                        switch (e) {
                          case 35983:
                          case 35368:
                            s = 0;
                            break;
                          default:
                            return void ei.recordError(1280);
                        }
                      else {
                        if (!(o instanceof WebGLBuffer))
                          return void ei.recordError(1280);
                        s = 0 | o.name;
                      }
                      break;
                    default:
                      return void ei.recordError(1280);
                  }
                  switch (r) {
                    case 1:
                      xs(i, s);
                      break;
                    case 0:
                      T[i >> 2] = s;
                      break;
                    case 2:
                      R[i >> 2] = s;
                      break;
                    case 4:
                      C[i >> 0] = s ? 1 : 0;
                      break;
                    default:
                      throw (
                        "internal emscriptenWebGLGetIndexed() error, bad type: " +
                        r
                      );
                  }
                } else ei.recordError(1281);
              }
              function Ts(e, t) {
                bs(e, t, 0);
              }
              var Es = Ts;
              function Rs(e, t, i, r) {
                var s = ga.getProgramInfoLog(ei.programs[e]);
                null === s && (s = "(unknown error)");
                var o = t > 0 && r ? wt(s, r, t) : 0;
                i && (T[i >> 2] = o);
              }
              var ws = Rs;
              function Ds(e, t, i) {
                if (i)
                  if (e >= ei.counter) ei.recordError(1281);
                  else if (((e = ei.programs[e]), 35716 == t)) {
                    var r = ga.getProgramInfoLog(e);
                    null === r && (r = "(unknown error)"),
                      (T[i >> 2] = r.length + 1);
                  } else if (35719 == t) {
                    if (!e.maxUniformLength)
                      for (var s = 0; s < ga.getProgramParameter(e, 35718); ++s)
                        e.maxUniformLength = Math.max(
                          e.maxUniformLength,
                          ga.getActiveUniform(e, s).name.length + 1
                        );
                    T[i >> 2] = e.maxUniformLength;
                  } else if (35722 == t) {
                    if (!e.maxAttributeLength)
                      for (s = 0; s < ga.getProgramParameter(e, 35721); ++s)
                        e.maxAttributeLength = Math.max(
                          e.maxAttributeLength,
                          ga.getActiveAttrib(e, s).name.length + 1
                        );
                    T[i >> 2] = e.maxAttributeLength;
                  } else if (35381 == t) {
                    if (!e.maxUniformBlockNameLength)
                      for (s = 0; s < ga.getProgramParameter(e, 35382); ++s)
                        e.maxUniformBlockNameLength = Math.max(
                          e.maxUniformBlockNameLength,
                          ga.getActiveUniformBlockName(e, s).length + 1
                        );
                    T[i >> 2] = e.maxUniformBlockNameLength;
                  } else T[i >> 2] = ga.getProgramParameter(e, t);
                else ei.recordError(1281);
              }
              var Ls = Ds;
              function Ms(e, t, i) {
                if (i) {
                  var r,
                    s = ei.queries[e];
                  xs(
                    i,
                    "boolean" ==
                      typeof (r =
                        ei.currentContext.version < 2
                          ? ga.disjointTimerQueryExt.getQueryObjectEXT(s, t)
                          : ga.getQueryParameter(s, t))
                      ? r
                        ? 1
                        : 0
                      : r
                  );
                } else ei.recordError(1281);
              }
              var Is = Ms;
              function Os(e, t, i) {
                if (i) {
                  var r,
                    s = ei.queries[e],
                    o = ga.disjointTimerQueryExt.getQueryObjectEXT(s, t);
                  (r = "boolean" == typeof o ? (o ? 1 : 0) : o),
                    (T[i >> 2] = r);
                } else ei.recordError(1281);
              }
              var ks = Os,
                _s = Ms,
                Vs = Os;
              function Ns(e, t, i, r) {
                var s = ga.getShaderInfoLog(ei.shaders[e]);
                null === s && (s = "(unknown error)");
                var o = t > 0 && r ? wt(s, r, t) : 0;
                i && (T[i >> 2] = o);
              }
              var Fs = Ns;
              function Bs(e, t, i) {
                if (i)
                  if (35716 == t) {
                    var r = ga.getShaderInfoLog(ei.shaders[e]);
                    null === r && (r = "(unknown error)");
                    var s = r ? r.length + 1 : 0;
                    T[i >> 2] = s;
                  } else if (35720 == t) {
                    var o = ga.getShaderSource(ei.shaders[e]),
                      a = o ? o.length + 1 : 0;
                    T[i >> 2] = a;
                  } else T[i >> 2] = ga.getShaderParameter(ei.shaders[e], t);
                else ei.recordError(1281);
              }
              var Hs = Bs;
              function zs(e) {
                var t = ei.stringCache[e];
                if (!t) {
                  switch (e) {
                    case 7939:
                      var i = ga.getSupportedExtensions() || [];
                      t = Xt(
                        (i = i.concat(
                          i.map(function (e) {
                            return "GL_" + e;
                          })
                        )).join(" ")
                      );
                      break;
                    case 7936:
                    case 7937:
                    case 37445:
                    case 37446:
                      var r = ga.getParameter(e);
                      r || ei.recordError(1280), (t = r && Xt(r));
                      break;
                    case 7938:
                      var s = ga.getParameter(7938);
                      t = Xt(
                        (s =
                          ei.currentContext.version >= 2
                            ? "OpenGL ES 3.0 (" + s + ")"
                            : "OpenGL ES 2.0 (" + s + ")")
                      );
                      break;
                    case 35724:
                      var o = ga.getParameter(35724),
                        a = o.match(
                          /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/
                        );
                      null !== a &&
                        (3 == a[1].length && (a[1] = a[1] + "0"),
                        (o = "OpenGL ES GLSL ES " + a[1] + " (" + o + ")")),
                        (t = Xt(o));
                      break;
                    default:
                      ei.recordError(1280);
                  }
                  ei.stringCache[e] = t;
                }
                return t;
              }
              var Ys = zs;
              function Gs(e) {
                return "]" == e.slice(-1) && e.lastIndexOf("[");
              }
              function Xs(e) {
                var t,
                  i,
                  r = e.uniformLocsById,
                  s = e.uniformSizeAndIdsByName;
                if (!r)
                  for (
                    e.uniformLocsById = r = {},
                      e.uniformArrayNamesById = {},
                      t = 0;
                    t < ga.getProgramParameter(e, 35718);
                    ++t
                  ) {
                    var o = ga.getActiveUniform(e, t),
                      a = o.name,
                      n = o.size,
                      l = Gs(a),
                      d = l > 0 ? a.slice(0, l) : a,
                      h = e.uniformIdCounter;
                    for (
                      e.uniformIdCounter += n, s[d] = [n, h], i = 0;
                      i < n;
                      ++i
                    )
                      (r[h] = i), (e.uniformArrayNamesById[h++] = d);
                  }
              }
              function js(e, t) {
                if (((t = Ce(t)), (e = ei.programs[e]))) {
                  Xs(e);
                  var i = e.uniformLocsById,
                    r = 0,
                    s = t,
                    o = Gs(t);
                  o > 0 &&
                    ((n = t.slice(o + 1)),
                    (r = parseInt(n) >>> 0),
                    (s = t.slice(0, o)));
                  var a = e.uniformSizeAndIdsByName[s];
                  if (
                    a &&
                    r < a[0] &&
                    (i[(r += a[1])] = i[r] || ga.getUniformLocation(e, t))
                  )
                    return r;
                } else ei.recordError(1281);
                var n;
                return -1;
              }
              var Ws = js;
              function Us(e) {
                var t = ga.currentProgram;
                if (t) {
                  var i = t.uniformLocsById[e];
                  return (
                    "number" == typeof i &&
                      (t.uniformLocsById[e] = i =
                        ga.getUniformLocation(
                          t,
                          t.uniformArrayNamesById[e] +
                            (i > 0 ? "[" + i + "]" : "")
                        )),
                    i
                  );
                }
                ei.recordError(1282);
              }
              function $s(e, t, i, r) {
                if (i) {
                  Xs((e = ei.programs[e]));
                  var s = ga.getUniform(e, Us(t));
                  if ("number" == typeof s || "boolean" == typeof s)
                    switch (r) {
                      case 0:
                        T[i >> 2] = s;
                        break;
                      case 2:
                        R[i >> 2] = s;
                    }
                  else
                    for (var o = 0; o < s.length; o++)
                      switch (r) {
                        case 0:
                          T[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 2:
                          R[(i + 4 * o) >> 2] = s[o];
                      }
                } else ei.recordError(1281);
              }
              function qs(e, t, i, r) {
                if (i) {
                  var s = ga.getVertexAttrib(e, t);
                  if (34975 == t) T[i >> 2] = s && s.name;
                  else if ("number" == typeof s || "boolean" == typeof s)
                    switch (r) {
                      case 0:
                        T[i >> 2] = s;
                        break;
                      case 2:
                        R[i >> 2] = s;
                        break;
                      case 5:
                        T[i >> 2] = Math.fround(s);
                    }
                  else
                    for (var o = 0; o < s.length; o++)
                      switch (r) {
                        case 0:
                          T[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 2:
                          R[(i + 4 * o) >> 2] = s[o];
                          break;
                        case 5:
                          T[(i + 4 * o) >> 2] = Math.fround(s[o]);
                      }
                } else ei.recordError(1281);
              }
              function Ks(e, t, i) {
                qs(e, t, i, 0);
              }
              var Zs = Ks,
                Js = Ks;
              function Qs(e) {
                var t = ei.vaos[e];
                return t ? ga.isVertexArray(t) : 0;
              }
              var eo = Qs,
                to = Qs;
              function io(e) {
                ga.lineWidth(e);
              }
              var ro = io;
              function so(e) {
                (e = ei.programs[e]),
                  ga.linkProgram(e),
                  (e.uniformLocsById = 0),
                  (e.uniformSizeAndIdsByName = {});
              }
              var oo = so;
              function ao(e, t) {
                3317 == e && (ei.unpackAlignment = t), ga.pixelStorei(e, t);
              }
              var no = ao;
              function lo(e) {
                return 0 == (e -= 5120)
                  ? C
                  : 1 == e
                  ? x
                  : 2 == e
                  ? b
                  : 4 == e
                  ? T
                  : 6 == e
                  ? R
                  : 5 == e ||
                    28922 == e ||
                    28520 == e ||
                    30779 == e ||
                    30782 == e
                  ? E
                  : A;
              }
              function ho(e) {
                return 31 - Math.clz32(e.BYTES_PER_ELEMENT);
              }
              function uo(e, t, i, r, s, o) {
                var a = lo(e),
                  n = ho(a),
                  l = 1 << n,
                  d =
                    (function (e) {
                      return (
                        {
                          5: 3,
                          6: 4,
                          8: 2,
                          29502: 3,
                          29504: 4,
                          26917: 2,
                          26918: 2,
                          29846: 3,
                          29847: 4,
                        }[e - 6402] || 1
                      );
                    })(t) * l,
                  h = (function (e, t, i, r) {
                    var s;
                    return t * ((e * i + (s = r) - 1) & -s);
                  })(i, r, d, ei.unpackAlignment);
                return a.subarray(s >> n, (s + h) >> n);
              }
              function co(e, t, i, r, s, o, a) {
                if (ei.currentContext.version >= 2)
                  if (ga.currentPixelPackBufferBinding)
                    ga.readPixels(e, t, i, r, s, o, a);
                  else {
                    var n = lo(o);
                    ga.readPixels(e, t, i, r, s, o, n, a >> ho(n));
                  }
                else {
                  var l = uo(o, s, i, r, a);
                  l ? ga.readPixels(e, t, i, r, s, o, l) : ei.recordError(1280);
                }
              }
              var po = co;
              function go(e, t, i, r) {
                ga.scissor(e, t, i, r);
              }
              var yo = go;
              function fo(e, t, i, r) {
                var s = ei.getSource(e, t, i, r);
                ga.shaderSource(ei.shaders[e], s);
              }
              var vo = fo;
              function mo(e, t, i, r, s, o, a, n, l) {
                if (ei.currentContext.version >= 2)
                  if (ga.currentPixelUnpackBufferBinding)
                    ga.texImage2D(e, t, i, r, s, o, a, n, l);
                  else if (l) {
                    var d = lo(n);
                    ga.texImage2D(e, t, i, r, s, o, a, n, d, l >> ho(d));
                  } else ga.texImage2D(e, t, i, r, s, o, a, n, null);
                else
                  ga.texImage2D(
                    e,
                    t,
                    i,
                    r,
                    s,
                    o,
                    a,
                    n,
                    l ? uo(n, a, r, s, l) : null
                  );
              }
              var So = mo;
              function Po(e, t, i) {
                ga.texParameteri(e, t, i);
              }
              var Co = Po,
                xo = [];
              function bo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform1fv(Us(e), R, i >> 2, t);
                else {
                  if (t <= 288)
                    for (var r = xo[t - 1], s = 0; s < t; ++s)
                      r[s] = R[(i + 4 * s) >> 2];
                  else r = R.subarray(i >> 2, (i + 4 * t) >> 2);
                  ga.uniform1fv(Us(e), r);
                }
              }
              var Ao = bo;
              function To(e, t) {
                ga.uniform1i(Us(e), t);
              }
              var Eo = To,
                Ro = [];
              function wo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform2fv(Us(e), R, i >> 2, 2 * t);
                else {
                  if (t <= 144)
                    for (var r = xo[2 * t - 1], s = 0; s < 2 * t; s += 2)
                      (r[s] = R[(i + 4 * s) >> 2]),
                        (r[s + 1] = R[(i + (4 * s + 4)) >> 2]);
                  else r = R.subarray(i >> 2, (i + 8 * t) >> 2);
                  ga.uniform2fv(Us(e), r);
                }
              }
              var Do = wo;
              function Lo(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform3fv(Us(e), R, i >> 2, 3 * t);
                else {
                  if (t <= 96)
                    for (var r = xo[3 * t - 1], s = 0; s < 3 * t; s += 3)
                      (r[s] = R[(i + 4 * s) >> 2]),
                        (r[s + 1] = R[(i + (4 * s + 4)) >> 2]),
                        (r[s + 2] = R[(i + (4 * s + 8)) >> 2]);
                  else r = R.subarray(i >> 2, (i + 12 * t) >> 2);
                  ga.uniform3fv(Us(e), r);
                }
              }
              var Mo = Lo;
              function Io(e, t, i) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniform4fv(Us(e), R, i >> 2, 4 * t);
                else {
                  if (t <= 72) {
                    var r = xo[4 * t - 1],
                      s = R;
                    i >>= 2;
                    for (var o = 0; o < 4 * t; o += 4) {
                      var a = i + o;
                      (r[o] = s[a]),
                        (r[o + 1] = s[a + 1]),
                        (r[o + 2] = s[a + 2]),
                        (r[o + 3] = s[a + 3]);
                    }
                  } else r = R.subarray(i >> 2, (i + 16 * t) >> 2);
                  ga.uniform4fv(Us(e), r);
                }
              }
              var Oo = Io;
              function ko(e, t, i, r) {
                if (ei.currentContext.version >= 2)
                  t && ga.uniformMatrix4fv(Us(e), !!i, R, r >> 2, 16 * t);
                else {
                  if (t <= 18) {
                    var s = xo[16 * t - 1],
                      o = R;
                    r >>= 2;
                    for (var a = 0; a < 16 * t; a += 16) {
                      var n = r + a;
                      (s[a] = o[n]),
                        (s[a + 1] = o[n + 1]),
                        (s[a + 2] = o[n + 2]),
                        (s[a + 3] = o[n + 3]),
                        (s[a + 4] = o[n + 4]),
                        (s[a + 5] = o[n + 5]),
                        (s[a + 6] = o[n + 6]),
                        (s[a + 7] = o[n + 7]),
                        (s[a + 8] = o[n + 8]),
                        (s[a + 9] = o[n + 9]),
                        (s[a + 10] = o[n + 10]),
                        (s[a + 11] = o[n + 11]),
                        (s[a + 12] = o[n + 12]),
                        (s[a + 13] = o[n + 13]),
                        (s[a + 14] = o[n + 14]),
                        (s[a + 15] = o[n + 15]);
                    }
                  } else s = R.subarray(r >> 2, (r + 64 * t) >> 2);
                  ga.uniformMatrix4fv(Us(e), !!i, s);
                }
              }
              var _o = ko;
              function Vo(e) {
                (e = ei.programs[e]), ga.useProgram(e), (ga.currentProgram = e);
              }
              var No = Vo;
              function Fo(e, t) {
                ga.vertexAttribDivisor(e, t);
              }
              var Bo = Fo,
                Ho = Fo,
                zo = Fo,
                Yo = Fo,
                Go = Fo;
              function Xo(e, t, i, r, s, o) {
                ga.vertexAttribPointer(e, t, i, !!r, s, o);
              }
              var jo = Xo;
              function Wo(e, t, i, r) {
                ga.viewport(e, t, i, r);
              }
              var Uo = Wo;
              function $o(e) {
                var t = m.buffer;
                try {
                  return m.grow((e - t.byteLength + 65535) >>> 16), I(), 1;
                } catch (e) {}
              }
              function qo(e, t, i, r, s, o, a) {
                si.focusEvent || (si.focusEvent = xa(256));
                var n = {
                  target: li(e),
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.getNodeNameForTarget(e.target),
                      o = e.target.id ? e.target.id : "",
                      a = si.focusEvent;
                    wt(i, a + 0, 128),
                      wt(o, a + 128, 128),
                      re(r)(s, a, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Ko(e, t, i, r, s, o, a) {
                si.fullscreenChangeEvent ||
                  (si.fullscreenChangeEvent = xa(280));
                var n = {
                  target: e,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.fullscreenChangeEvent;
                    !(function (e) {
                      var t =
                          document.fullscreenElement ||
                          document.mozFullScreenElement ||
                          document.webkitFullscreenElement ||
                          document.msFullscreenElement,
                        i = !!t;
                      (T[e >> 2] = i),
                        (T[(e + 4) >> 2] = si.fullscreenEnabled());
                      var r = i ? t : si.previousFullscreenElement,
                        s = si.getNodeNameForTarget(r),
                        o = r && r.id ? r.id : "";
                      wt(s, e + 8, 128),
                        wt(o, e + 136, 128),
                        (T[(e + 264) >> 2] = r ? r.clientWidth : 0),
                        (T[(e + 268) >> 2] = r ? r.clientHeight : 0),
                        (T[(e + 272) >> 2] = screen.width),
                        (T[(e + 276) >> 2] = screen.height),
                        i && (si.previousFullscreenElement = t);
                    })(i),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Zo(e, t, i, r, s, o, a) {
                si.gamepadEvent || (si.gamepadEvent = xa(1432));
                var n = {
                  target: li(e),
                  allowsDeferredCalls: !0,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.gamepadEvent;
                    mi(i, e.gamepad), re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Jo(e, t, i, r, s, o, a) {
                si.keyEvent || (si.keyEvent = xa(176));
                var n = {
                  target: li(e),
                  allowsDeferredCalls: !0,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e) {
                    var i = si.keyEvent;
                    w[i >> 3] = e.timeStamp;
                    var o = i >> 2;
                    (T[o + 2] = e.location),
                      (T[o + 3] = e.ctrlKey),
                      (T[o + 4] = e.shiftKey),
                      (T[o + 5] = e.altKey),
                      (T[o + 6] = e.metaKey),
                      (T[o + 7] = e.repeat),
                      (T[o + 8] = e.charCode),
                      (T[o + 9] = e.keyCode),
                      (T[o + 10] = e.which),
                      wt(e.key || "", i + 44, 32),
                      wt(e.code || "", i + 76, 32),
                      wt(e.char || "", i + 108, 32),
                      wt(e.locale || "", i + 140, 32),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function Qo(e, t, i) {
                w[e >> 3] = t.timeStamp;
                var r = e >> 2;
                (T[r + 2] = t.screenX),
                  (T[r + 3] = t.screenY),
                  (T[r + 4] = t.clientX),
                  (T[r + 5] = t.clientY),
                  (T[r + 6] = t.ctrlKey),
                  (T[r + 7] = t.shiftKey),
                  (T[r + 8] = t.altKey),
                  (T[r + 9] = t.metaKey),
                  (b[2 * r + 20] = t.button),
                  (b[2 * r + 21] = t.buttons),
                  (T[r + 11] = t.movementX),
                  (T[r + 12] = t.movementY);
                var s = yi(i);
                (T[r + 13] = t.clientX - s.left),
                  (T[r + 14] = t.clientY - s.top);
              }
              function ea(e, t, i, r, s, o, a) {
                si.mouseEvent || (si.mouseEvent = xa(72));
                var n = {
                  target: (e = li(e)),
                  allowsDeferredCalls:
                    "mousemove" != o && "mouseenter" != o && "mouseleave" != o,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (i = event) {
                    Qo(si.mouseEvent, i, e),
                      re(r)(s, si.mouseEvent, t) && i.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function ta(e, t, i, r, s, o, a) {
                si.pointerlockChangeEvent ||
                  (si.pointerlockChangeEvent = xa(260));
                var n = {
                  target: e,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (e = event) {
                    var i = si.pointerlockChangeEvent;
                    !(function (e) {
                      var t =
                          document.pointerLockElement ||
                          document.mozPointerLockElement ||
                          document.webkitPointerLockElement ||
                          document.msPointerLockElement,
                        i = !!t;
                      T[e >> 2] = i;
                      var r = si.getNodeNameForTarget(t),
                        s = t && t.id ? t.id : "";
                      wt(r, e + 4, 128), wt(s, e + 132, 128);
                    })(i),
                      re(r)(s, i, t) && e.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              function ia(e, t, i, r, s, o, a) {
                si.touchEvent || (si.touchEvent = xa(1696));
                var n = {
                  target: (e = li(e)),
                  allowsDeferredCalls: "touchstart" == o || "touchend" == o,
                  eventTypeString: o,
                  callbackfunc: r,
                  handlerFunc: function (i) {
                    for (var o, a = {}, n = i.touches, l = 0; l < n.length; ++l)
                      ((o = n[l]).isChanged = o.onTarget = 0),
                        (a[o.identifier] = o);
                    for (l = 0; l < i.changedTouches.length; ++l)
                      ((o = i.changedTouches[l]).isChanged = 1),
                        (a[o.identifier] = o);
                    for (l = 0; l < i.targetTouches.length; ++l)
                      a[i.targetTouches[l].identifier].onTarget = 1;
                    var d = si.touchEvent;
                    w[d >> 3] = i.timeStamp;
                    var h = d >> 2;
                    (T[h + 3] = i.ctrlKey),
                      (T[h + 4] = i.shiftKey),
                      (T[h + 5] = i.altKey),
                      (T[h + 6] = i.metaKey),
                      (h += 7);
                    var u = yi(e),
                      c = 0;
                    for (var l in a)
                      if (
                        ((o = a[l]),
                        (T[h + 0] = o.identifier),
                        (T[h + 1] = o.screenX),
                        (T[h + 2] = o.screenY),
                        (T[h + 3] = o.clientX),
                        (T[h + 4] = o.clientY),
                        (T[h + 5] = o.pageX),
                        (T[h + 6] = o.pageY),
                        (T[h + 7] = o.isChanged),
                        (T[h + 8] = o.onTarget),
                        (T[h + 9] = o.clientX - u.left),
                        (T[h + 10] = o.clientY - u.top),
                        (h += 13),
                        ++c > 31)
                      )
                        break;
                    (T[(d + 8) >> 2] = c), re(r)(s, d, t) && i.preventDefault();
                  },
                  useCapture: i,
                };
                return si.registerOrRemoveHandler(n);
              }
              var ra = {
                openDatabase: function (e, t, i, r) {
                  try {
                    var s = indexedDB.open(e, t);
                  } catch (e) {
                    return r(e);
                  }
                  (s.onupgradeneeded = (e) => {
                    var t = e.target.result;
                    t.objectStoreNames.contains("FILES") &&
                      t.deleteObjectStore("FILES"),
                      t.createObjectStore("FILES");
                  }),
                    (s.onsuccess = (e) => i(e.target.result)),
                    (s.onerror = (e) => r(e));
                },
                init: function () {
                  (ra.xhrs = new Re()),
                    G(),
                    ra.openDatabase(
                      "emscripten_filesystem",
                      1,
                      (e) => {
                        (ra.dbInstance = e), X();
                      },
                      () => {
                        (ra.dbInstance = !1), X();
                      }
                    );
                },
              };
              function sa(e, t, i, r, s) {
                var o = E[(e + 8) >> 2];
                if (o) {
                  var a = Ce(o),
                    n = e + 112,
                    l = Ce(n + 0);
                  l || (l = "GET");
                  var d = E[(n + 56) >> 2],
                    h = E[(n + 68) >> 2],
                    u = E[(n + 72) >> 2],
                    c = E[(n + 76) >> 2],
                    p = E[(n + 80) >> 2],
                    g = E[(n + 84) >> 2],
                    y = E[(n + 88) >> 2],
                    f = E[(n + 52) >> 2],
                    v = !!(1 & f),
                    m = !!(2 & f),
                    S = !!(64 & f),
                    P = h ? Ce(h) : void 0,
                    C = u ? Ce(u) : void 0,
                    b = new XMLHttpRequest();
                  if (
                    ((b.withCredentials = !!x[(n + 60) >> 0]),
                    b.open(l, a, !S, P, C),
                    S || (b.timeout = d),
                    (b.url_ = a),
                    (b.responseType = "arraybuffer"),
                    p)
                  ) {
                    var T = Ce(p);
                    b.overrideMimeType(T);
                  }
                  if (c)
                    for (;;) {
                      var R = E[c >> 2];
                      if (!R) break;
                      var w = E[(c + 4) >> 2];
                      if (!w) break;
                      c += 8;
                      var D = Ce(R),
                        L = Ce(w);
                      b.setRequestHeader(D, L);
                    }
                  var M = ra.xhrs.allocate(b);
                  E[e >> 2] = M;
                  var I = g && y ? x.slice(g, g + y) : null;
                  (b.onload = (r) => {
                    ra.xhrs.has(M) &&
                      (O(),
                      b.status >= 200 && b.status < 300
                        ? t && t(e, b, r)
                        : i && i(e, b, r));
                  }),
                    (b.onerror = (t) => {
                      ra.xhrs.has(M) && (O(), i && i(e, b, t));
                    }),
                    (b.ontimeout = (t) => {
                      ra.xhrs.has(M) && i && i(e, b, t);
                    }),
                    (b.onprogress = (t) => {
                      if (ra.xhrs.has(M)) {
                        var i =
                            v && m && b.response ? b.response.byteLength : 0,
                          s = 0;
                        i > 0 &&
                          v &&
                          m &&
                          ((s = xa(i)), x.set(new Uint8Array(b.response), s)),
                          (E[(e + 12) >> 2] = s),
                          xs(e + 16, i),
                          xs(e + 24, t.loaded - i),
                          xs(e + 32, t.total),
                          (A[(e + 40) >> 1] = b.readyState),
                          b.readyState >= 3 &&
                            0 === b.status &&
                            t.loaded > 0 &&
                            (b.status = 200),
                          (A[(e + 42) >> 1] = b.status),
                          b.statusText && wt(b.statusText, e + 44, 64),
                          r && r(e, b, t),
                          s && ba(s);
                      }
                    }),
                    (b.onreadystatechange = (t) => {
                      ra.xhrs.has(M) &&
                        ((A[(e + 40) >> 1] = b.readyState),
                        b.readyState >= 2 && (A[(e + 42) >> 1] = b.status),
                        s && s(e, b, t));
                    });
                  try {
                    b.send(I);
                  } catch (t) {
                    i && i(e, b, t);
                  }
                } else i(e, 0, "no url specified!");
                function O() {
                  var t = 0,
                    i = 0;
                  b.response &&
                    v &&
                    0 === E[(e + 12) >> 2] &&
                    (i = b.response.byteLength),
                    i > 0 &&
                      ((t = xa(i)), x.set(new Uint8Array(b.response), t)),
                    (E[(e + 12) >> 2] = t),
                    xs(e + 16, i),
                    xs(e + 24, 0);
                  var r = b.response ? b.response.byteLength : 0;
                  r && xs(e + 32, r),
                    (A[(e + 40) >> 1] = b.readyState),
                    (A[(e + 42) >> 1] = b.status),
                    b.statusText && wt(b.statusText, e + 44, 64);
                }
              }
              function oa(e, t, i, r, s) {
                if (e) {
                  var o = E[(t + 112 + 64) >> 2];
                  o || (o = E[(t + 8) >> 2]);
                  var a = Ce(o);
                  try {
                    var n = e
                      .transaction(["FILES"], "readwrite")
                      .objectStore("FILES")
                      .put(i, a);
                    (n.onsuccess = (e) => {
                      (A[(t + 40) >> 1] = 4),
                        (A[(t + 42) >> 1] = 200),
                        wt("OK", t + 44, 64),
                        r(t, 0, a);
                    }),
                      (n.onerror = (e) => {
                        (A[(t + 40) >> 1] = 4),
                          (A[(t + 42) >> 1] = 413),
                          wt("Payload Too Large", t + 44, 64),
                          s(t, 0, e);
                      });
                  } catch (e) {
                    s(t, 0, e);
                  }
                } else s(t, 0, "IndexedDB not available!");
              }
              var aa = {};
              function na() {
                if (!na.strings) {
                  var e = {
                    USER: "web_user",
                    LOGNAME: "web_user",
                    PATH: "/",
                    PWD: "/",
                    HOME: "/home/web_user",
                    LANG:
                      (
                        ("object" == typeof navigator &&
                          navigator.languages &&
                          navigator.languages[0]) ||
                        "C"
                      ).replace("-", "_") + ".UTF-8",
                    _: h || "./this.program",
                  };
                  for (var t in aa)
                    void 0 === aa[t] ? delete e[t] : (e[t] = aa[t]);
                  var i = [];
                  for (var t in e) i.push(`${t}=${e[t]}`);
                  na.strings = i;
                }
                return na.strings;
              }
              var la = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
                da = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
              function ha(e, t) {
                C.set(e, t);
              }
              function ua(t) {
                return e["_" + t];
              }
              function ca(e, t, i, r, s) {
                var o = {
                    string: (e) => {
                      var t = 0;
                      return null != e && 0 !== e && (t = hi(e)), t;
                    },
                    array: (e) => {
                      var t = La(e.length);
                      return ha(e, t), t;
                    },
                  },
                  a = ua(e),
                  n = [],
                  l = 0;
                if (r)
                  for (var d = 0; d < r.length; d++) {
                    var h = o[i[d]];
                    h
                      ? (0 === l && (l = wa()), (n[d] = h(r[d])))
                      : (n[d] = r[d]);
                  }
                var u = a.apply(null, n);
                return (function (e) {
                  return (
                    0 !== l && Da(l),
                    (function (e) {
                      return "string" === t
                        ? Ce(e)
                        : "boolean" === t
                        ? Boolean(e)
                        : e;
                    })(e)
                  );
                })(u);
              }
              var pa = function (e, t, i, r) {
                e || (e = this),
                  (this.parent = e),
                  (this.mount = e.mount),
                  (this.mounted = null),
                  (this.id = Pe.nextInode++),
                  (this.name = t),
                  (this.mode = i),
                  (this.node_ops = {}),
                  (this.stream_ops = {}),
                  (this.rdev = r);
              };
              Object.defineProperties(pa.prototype, {
                read: {
                  get: function () {
                    return 365 == (365 & this.mode);
                  },
                  set: function (e) {
                    e ? (this.mode |= 365) : (this.mode &= -366);
                  },
                },
                write: {
                  get: function () {
                    return 146 == (146 & this.mode);
                  },
                  set: function (e) {
                    e ? (this.mode |= 146) : (this.mode &= -147);
                  },
                },
                isFolder: {
                  get: function () {
                    return Pe.isDir(this.mode);
                  },
                },
                isDevice: {
                  get: function () {
                    return Pe.isChrdev(this.mode);
                  },
                },
              }),
                (Pe.FSNode = pa),
                (Pe.createPreloadedFile = function (
                  e,
                  t,
                  i,
                  r,
                  s,
                  a,
                  n,
                  l,
                  d,
                  h
                ) {
                  var u = t ? de.resolve(ne.join2(e, t)) : e;
                  function c(i) {
                    function o(i) {
                      h && h(),
                        l || Pe.createDataFile(e, t, i, r, s, d),
                        a && a(),
                        X();
                    }
                    (function (e, t, i, r) {
                      void 0 !== Jt && Jt.init();
                      var s = !1;
                      return (
                        me.forEach(function (o) {
                          s ||
                            (o.canHandle(t) &&
                              (o.handle(e, t, i, r), (s = !0)));
                        }),
                        s
                      );
                    })(i, u, o, () => {
                      n && n(), X();
                    }) || o(i);
                  }
                  G(),
                    "string" == typeof i
                      ? (function (e, t, i, r) {
                          var s = `al ${e}`;
                          o(
                            e,
                            (t) => {
                              M(
                                t,
                                `Loading data file "${e}" failed (no arrayBuffer).`
                              ),
                                c(new Uint8Array(t)),
                                s && X();
                            },
                            (t) => {
                              if (!i) throw `Loading data file "${e}" failed.`;
                              i();
                            }
                          ),
                            s && G();
                        })(i, 0, n)
                      : c(i);
                }),
                Pe.staticInit(),
                (e.FS_createPath = Pe.createPath),
                (e.FS_createDataFile = Pe.createDataFile),
                (e.FS_createPreloadedFile = Pe.createPreloadedFile),
                (e.FS_unlink = Pe.unlink),
                (e.FS_createLazyFile = Pe.createLazyFile),
                (e.FS_createDevice = Pe.createDevice),
                (Le = e.BindingError = De(Error, "BindingError")),
                we.allocated.push(
                  { value: void 0 },
                  { value: null },
                  { value: !0 },
                  { value: !1 }
                ),
                (we.reserved = we.allocated.length),
                (e.count_emval_handles = function () {
                  for (var e = 0, t = we.reserved; t < we.allocated.length; ++t)
                    void 0 !== we.allocated[t] && ++e;
                  return e;
                }),
                (Oe = e.PureVirtualError = De(Error, "PureVirtualError")),
                (function () {
                  for (var e = new Array(256), t = 0; t < 256; ++t)
                    e[t] = String.fromCharCode(t);
                  ke = e;
                })(),
                (e.getInheritedInstanceCount = function () {
                  return Object.keys(Be).length;
                }),
                (e.getLiveInheritedInstances = function () {
                  var e = [];
                  for (var t in Be) Be.hasOwnProperty(t) && e.push(Be[t]);
                  return e;
                }),
                (e.flushPendingDeletes = Ne),
                (e.setDelayFunction = function (e) {
                  (Fe = e), Ve.length && Fe && Fe(Ne);
                }),
                (qe = e.InternalError = De(Error, "InternalError")),
                (ot.prototype.isAliasOf = function (e) {
                  if (!(this instanceof ot)) return !1;
                  if (!(e instanceof ot)) return !1;
                  for (
                    var t = this.$$.ptrType.registeredClass,
                      i = this.$$.ptr,
                      r = e.$$.ptrType.registeredClass,
                      s = e.$$.ptr;
                    t.baseClass;

                  )
                    (i = t.upcast(i)), (t = t.baseClass);
                  for (; r.baseClass; ) (s = r.upcast(s)), (r = r.baseClass);
                  return t === r && i === s;
                }),
                (ot.prototype.clone = function () {
                  if (
                    (this.$$.ptr || st(this), this.$$.preservePointerOnDelete)
                  )
                    return (this.$$.count.value += 1), this;
                  var e,
                    t = Je(
                      Object.create(Object.getPrototypeOf(this), {
                        $$: {
                          value:
                            ((e = this.$$),
                            {
                              count: e.count,
                              deleteScheduled: e.deleteScheduled,
                              preservePointerOnDelete:
                                e.preservePointerOnDelete,
                              ptr: e.ptr,
                              ptrType: e.ptrType,
                              smartPtr: e.smartPtr,
                              smartPtrType: e.smartPtrType,
                            }),
                        },
                      })
                    );
                  return (
                    (t.$$.count.value += 1), (t.$$.deleteScheduled = !1), t
                  );
                }),
                (ot.prototype.delete = function () {
                  this.$$.ptr || st(this),
                    this.$$.deleteScheduled &&
                      !this.$$.preservePointerOnDelete &&
                      Me("Object already scheduled for deletion"),
                    Xe(this),
                    We(this.$$),
                    this.$$.preservePointerOnDelete ||
                      ((this.$$.smartPtr = void 0), (this.$$.ptr = void 0));
                }),
                (ot.prototype.isDeleted = function () {
                  return !this.$$.ptr;
                }),
                (ot.prototype.deleteLater = function () {
                  return (
                    this.$$.ptr || st(this),
                    this.$$.deleteScheduled &&
                      !this.$$.preservePointerOnDelete &&
                      Me("Object already scheduled for deletion"),
                    Ve.push(this),
                    1 === Ve.length && Fe && Fe(Ne),
                    (this.$$.deleteScheduled = !0),
                    this
                  );
                }),
                (gt.prototype.getPointee = function (e) {
                  return this.rawGetPointee && (e = this.rawGetPointee(e)), e;
                }),
                (gt.prototype.destructor = function (e) {
                  this.rawDestructor && this.rawDestructor(e);
                }),
                (gt.prototype.argPackAdvance = 8),
                (gt.prototype.readValueFromPointer = pt),
                (gt.prototype.deleteObject = function (e) {
                  null !== e && e.delete();
                }),
                (gt.prototype.fromWireType = function (e) {
                  var t = this.getPointee(e);
                  if (!t) return this.destructor(e), null;
                  var i = (function (e, t) {
                    return (t = He(e, t)), Be[t];
                  })(this.registeredClass, t);
                  if (void 0 !== i) {
                    if (0 === i.$$.count.value)
                      return (i.$$.ptr = t), (i.$$.smartPtr = e), i.clone();
                    var r = i.clone();
                    return this.destructor(e), r;
                  }
                  function s() {
                    return this.isSmartPointer
                      ? Ze(this.registeredClass.instancePrototype, {
                          ptrType: this.pointeeType,
                          ptr: t,
                          smartPtrType: this,
                          smartPtr: e,
                        })
                      : Ze(this.registeredClass.instancePrototype, {
                          ptrType: this,
                          ptr: e,
                        });
                  }
                  var o,
                    a = this.registeredClass.getActualType(t),
                    n = $e[a];
                  if (!n) return s.call(this);
                  o = this.isConst ? n.constPointerType : n.pointerType;
                  var l = Ue(t, this.registeredClass, o.registeredClass);
                  return null === l
                    ? s.call(this)
                    : this.isSmartPointer
                    ? Ze(o.registeredClass.instancePrototype, {
                        ptrType: o,
                        ptr: l,
                        smartPtrType: this,
                        smartPtr: e,
                      })
                    : Ze(o.registeredClass.instancePrototype, {
                        ptrType: o,
                        ptr: l,
                      });
                }),
                (vt = e.UnboundTypeError = De(Error, "UnboundTypeError")),
                (e.requestFullscreen = function (e, t) {
                  Jt.requestFullscreen(e, t);
                }),
                (e.requestAnimationFrame = function (e) {
                  Jt.requestAnimationFrame(e);
                }),
                (e.setCanvasSize = function (e, t, i) {
                  Jt.setCanvasSize(e, t, i);
                }),
                (e.pauseMainLoop = function () {
                  Jt.mainLoop.pause();
                }),
                (e.resumeMainLoop = function () {
                  Jt.mainLoop.resume();
                }),
                (e.getUserMedia = function () {
                  Jt.getUserMedia();
                }),
                (e.createContext = function (e, t, i, r) {
                  return Jt.createContext(e, t, i, r);
                });
              for (var ga, ya = {}, fa = {}, va = 0; va < 32; ++va)
                Fr.push(new Array(va));
              var ma = new Float32Array(288);
              for (va = 0; va < 288; ++va) xo[va] = ma.subarray(0, va + 1);
              var Sa = new Int32Array(288);
              for (va = 0; va < 288; ++va) Ro[va] = Sa.subarray(0, va + 1);
              ra.init();
              var Pa,
                Ca = {
                  f: function (e, t, i) {
                    throw (new ae(e).init(t, i), e);
                  },
                  ha: function (e, t, i) {
                    xe.varargs = i;
                    try {
                      var r = xe.getStreamFromFD(e);
                      switch (t) {
                        case 0:
                          return (s = xe.get()) < 0
                            ? -28
                            : Pe.createStream(r, s).fd;
                        case 1:
                        case 2:
                        case 6:
                        case 7:
                          return 0;
                        case 3:
                          return r.flags;
                        case 4:
                          var s = xe.get();
                          return (r.flags |= s), 0;
                        case 5:
                          return (s = xe.get()), (b[(s + 0) >> 1] = 2), 0;
                        case 16:
                        case 8:
                        default:
                          return -28;
                        case 9:
                          return 28, (T[Aa() >> 2] = 28), -1;
                      }
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  rb: function (e, t, i) {
                    xe.varargs = i;
                    try {
                      var r = xe.getStreamFromFD(e);
                      switch (t) {
                        case 21509:
                        case 21505:
                        case 21510:
                        case 21511:
                        case 21512:
                        case 21506:
                        case 21507:
                        case 21508:
                        case 21523:
                        case 21524:
                          return r.tty ? 0 : -59;
                        case 21519:
                          if (!r.tty) return -59;
                          var s = xe.get();
                          return (T[s >> 2] = 0), 0;
                        case 21520:
                          return r.tty ? -28 : -59;
                        case 21531:
                          return (s = xe.get()), Pe.ioctl(r, t, s);
                        default:
                          return -28;
                      }
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  sb: function (e, t, i, r) {
                    xe.varargs = r;
                    try {
                      (t = xe.getStr(t)), (t = xe.calculateAt(e, t));
                      var s = r ? xe.get() : 0;
                      return Pe.open(t, i, s).fd;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  pb: function (e, t) {
                    try {
                      return (e = xe.getStr(e)), xe.doStat(Pe.stat, e, t);
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return -e.errno;
                    }
                  },
                  Na: function (e, t, i) {
                    (e = _e(e)), (t = Ge(t, "wrapper")), (i = Ie.toValue(i));
                    var r = [].slice,
                      s = t.registeredClass,
                      o = s.instancePrototype,
                      a = s.baseClass.instancePrototype,
                      n = s.baseClass.constructor,
                      l = Ee(e, function () {
                        s.baseClass.pureVirtualFunctions.forEach(
                          function (e) {
                            if (this[e] === a[e])
                              throw new Oe(
                                `Pure virtual function ${e} must be implemented in JavaScript`
                              );
                          }.bind(this)
                        ),
                          Object.defineProperty(this, "__parent", { value: o }),
                          this.__construct.apply(this, r.call(arguments));
                      });
                    for (var d in ((o.__construct = function () {
                      this === o && Me("Pass correct 'this' to __construct");
                      var e = n.implement.apply(
                        void 0,
                        [this].concat(r.call(arguments))
                      );
                      Xe(e);
                      var t,
                        i = e.$$;
                      e.notifyOnDestruction(),
                        (i.preservePointerOnDelete = !0),
                        Object.defineProperties(this, { $$: { value: i } }),
                        Je(this),
                        (t = He(s, (t = i.ptr))),
                        Be.hasOwnProperty(t)
                          ? Me(`Tried to register registered instance: ${t}`)
                          : (Be[t] = this);
                    }),
                    (o.__destruct = function () {
                      var e;
                      this === o && Me("Pass correct 'this' to __destruct"),
                        Xe(this),
                        (e = He(s, (e = this.$$.ptr))),
                        Be.hasOwnProperty(e)
                          ? delete Be[e]
                          : Me(
                              `Tried to unregister unregistered instance: ${e}`
                            );
                    }),
                    (l.prototype = Object.create(o)),
                    i))
                      l.prototype[d] = i[d];
                    return Ie.toHandle(l);
                  },
                  gb: function (e, t, i, r, s) {},
                  Pg: function (e, t, i, r, s) {
                    var o = Qe(i);
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        return !!e;
                      },
                      toWireType: function (e, t) {
                        return t ? r : s;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: function (e) {
                        var r;
                        if (1 === i) r = C;
                        else if (2 === i) r = b;
                        else {
                          if (4 !== i)
                            throw new TypeError(
                              "Unknown boolean type size: " + t
                            );
                          r = T;
                        }
                        return this.fromWireType(r[e >> o]);
                      },
                      destructorFunction: null,
                    });
                  },
                  d: function (e, t, i, r, s, o, a, n, l, d, h, u, c) {
                    (h = _e(h)),
                      (o = ft(s, o)),
                      n && (n = ft(a, n)),
                      d && (d = ft(l, d)),
                      (c = ft(u, c));
                    var p = Te(h);
                    nt(p, function () {
                      mt(`Cannot construct ${h} due to unbound types`, [r]);
                    }),
                      it([e, t, i], r ? [r] : [], function (t) {
                        var i, s;
                        (t = t[0]),
                          (s = r
                            ? (i = t.registeredClass).instancePrototype
                            : ot.prototype);
                        var a = Ee(p, function () {
                            if (Object.getPrototypeOf(this) !== l)
                              throw new Le("Use 'new' to construct " + h);
                            if (void 0 === u.constructor_body)
                              throw new Le(
                                h + " has no accessible constructor"
                              );
                            var e = u.constructor_body[arguments.length];
                            if (void 0 === e)
                              throw new Le(
                                `Tried to invoke ctor of ${h} with invalid number of parameters (${
                                  arguments.length
                                }) - expected (${Object.keys(
                                  u.constructor_body
                                ).toString()}) parameters instead!`
                              );
                            return e.apply(this, arguments);
                          }),
                          l = Object.create(s, { constructor: { value: a } });
                        a.prototype = l;
                        var u = new lt(h, a, l, c, i, o, n, d);
                        u.baseClass &&
                          (void 0 === u.baseClass.__derivedClasses &&
                            (u.baseClass.__derivedClasses = []),
                          u.baseClass.__derivedClasses.push(u));
                        var g = new gt(h, u, !0, !1, !1),
                          y = new gt(h + "*", u, !1, !1, !1),
                          f = new gt(h + " const*", u, !1, !0, !1);
                        return (
                          ($e[e] = { pointerType: y, constPointerType: f }),
                          yt(p, a),
                          [g, y, f]
                        );
                      });
                  },
                  e: function (e, t, i, r, s, o, a, n) {
                    var l = Ct(i, r);
                    (t = _e(t)),
                      (o = ft(s, o)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`;
                        function s() {
                          mt(`Cannot call ${r} due to unbound types`, l);
                        }
                        t.startsWith("@@") && (t = Symbol[t.substring(2)]);
                        var n = e.registeredClass.constructor;
                        return (
                          void 0 === n[t]
                            ? ((s.argCount = i - 1), (n[t] = s))
                            : (at(n, t, r), (n[t].overloadTable[i - 1] = s)),
                          it([], l, function (s) {
                            var l = [s[0], null].concat(s.slice(1)),
                              d = Pt(r, l, null, o, a);
                            if (
                              (void 0 === n[t].overloadTable
                                ? ((d.argCount = i - 1), (n[t] = d))
                                : (n[t].overloadTable[i - 1] = d),
                              e.registeredClass.__derivedClasses)
                            )
                              for (const i of e.registeredClass
                                .__derivedClasses)
                                i.constructor.hasOwnProperty(t) ||
                                  (i.constructor[t] = d);
                            return [];
                          }),
                          []
                        );
                      });
                  },
                  g: function (e, t, i, r, s, o) {
                    M(t > 0);
                    var a = Ct(t, i);
                    (s = ft(r, s)),
                      it([], [e], function (e) {
                        var i = `constructor ${(e = e[0]).name}`;
                        if (
                          (void 0 === e.registeredClass.constructor_body &&
                            (e.registeredClass.constructor_body = []),
                          void 0 !== e.registeredClass.constructor_body[t - 1])
                        )
                          throw new Le(
                            `Cannot register multiple constructors with identical number of parameters (${
                              t - 1
                            }) for class '${
                              e.name
                            }'! Overload resolution is currently only performed using the parameter count, not actual type info!`
                          );
                        return (
                          (e.registeredClass.constructor_body[t - 1] = () => {
                            mt(
                              `Cannot construct ${e.name} due to unbound types`,
                              a
                            );
                          }),
                          it([], a, function (r) {
                            return (
                              r.splice(1, 0, null),
                              (e.registeredClass.constructor_body[t - 1] = Pt(
                                i,
                                r,
                                null,
                                s,
                                o
                              )),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  a: function (e, t, i, r, s, o, a, n, l) {
                    var d = Ct(i, r);
                    (t = _e(t)),
                      (o = ft(s, o)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`;
                        function s() {
                          mt(`Cannot call ${r} due to unbound types`, d);
                        }
                        t.startsWith("@@") && (t = Symbol[t.substring(2)]),
                          n && e.registeredClass.pureVirtualFunctions.push(t);
                        var l = e.registeredClass.instancePrototype,
                          h = l[t];
                        return (
                          void 0 === h ||
                          (void 0 === h.overloadTable &&
                            h.className !== e.name &&
                            h.argCount === i - 2)
                            ? ((s.argCount = i - 2),
                              (s.className = e.name),
                              (l[t] = s))
                            : (at(l, t, r), (l[t].overloadTable[i - 2] = s)),
                          it([], d, function (s) {
                            var n = Pt(r, s, e, o, a);
                            return (
                              void 0 === l[t].overloadTable
                                ? ((n.argCount = i - 2), (l[t] = n))
                                : (l[t].overloadTable[i - 2] = n),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  c: function (e, t, i, r, s, o, a, n, l, d) {
                    (t = _e(t)),
                      (s = ft(r, s)),
                      it([], [e], function (e) {
                        var r = `${(e = e[0]).name}.${t}`,
                          h = {
                            get: function () {
                              mt(`Cannot access ${r} due to unbound types`, [
                                i,
                                a,
                              ]);
                            },
                            enumerable: !0,
                            configurable: !0,
                          };
                        return (
                          (h.set = l
                            ? () => {
                                mt(`Cannot access ${r} due to unbound types`, [
                                  i,
                                  a,
                                ]);
                              }
                            : (e) => {
                                Me(r + " is a read-only property");
                              }),
                          Object.defineProperty(
                            e.registeredClass.instancePrototype,
                            t,
                            h
                          ),
                          it([], l ? [i, a] : [i], function (i) {
                            var a = i[0],
                              h = {
                                get: function () {
                                  var t = xt(this, e, r + " getter");
                                  return a.fromWireType(s(o, t));
                                },
                                enumerable: !0,
                              };
                            if (l) {
                              l = ft(n, l);
                              var u = i[1];
                              h.set = function (t) {
                                var i = xt(this, e, r + " setter"),
                                  s = [];
                                l(d, i, u.toWireType(s, t)), St(s);
                              };
                            }
                            return (
                              Object.defineProperty(
                                e.registeredClass.instancePrototype,
                                t,
                                h
                              ),
                              []
                            );
                          }),
                          []
                        );
                      });
                  },
                  Og: function (e, t) {
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        var t = Ie.toValue(e);
                        return bt(e), t;
                      },
                      toWireType: function (e, t) {
                        return Ie.toHandle(t);
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: pt,
                      destructorFunction: null,
                    });
                  },
                  i: function (e, t, i, r) {
                    var s = Qe(i);
                    function o() {}
                    (t = _e(t)),
                      (o.values = {}),
                      rt(e, {
                        name: t,
                        constructor: o,
                        fromWireType: function (e) {
                          return this.constructor.values[e];
                        },
                        toWireType: function (e, t) {
                          return t.value;
                        },
                        argPackAdvance: 8,
                        readValueFromPointer: At(t, s, r),
                        destructorFunction: null,
                      }),
                      nt(t, o);
                  },
                  b: function (e, t, i) {
                    var r = Ge(e, "enum");
                    t = _e(t);
                    var s = r.constructor,
                      o = Object.create(r.constructor.prototype, {
                        value: { value: i },
                        constructor: {
                          value: Ee(`${r.name}_${t}`, function () {}),
                        },
                      });
                    (s.values[i] = o), (s[t] = o);
                  },
                  oa: function (e, t, i) {
                    var r = Qe(i);
                    rt(e, {
                      name: (t = _e(t)),
                      fromWireType: function (e) {
                        return e;
                      },
                      toWireType: function (e, t) {
                        return t;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: Et(t, r),
                      destructorFunction: null,
                    });
                  },
                  j: function (e, t, i, r, s, o, a) {
                    var n = Ct(t, i);
                    (e = _e(e)),
                      (s = ft(r, s)),
                      nt(
                        e,
                        function () {
                          mt(`Cannot call ${e} due to unbound types`, n);
                        },
                        t - 1
                      ),
                      it([], n, function (i) {
                        var r = [i[0], null].concat(i.slice(1));
                        return yt(e, Pt(e, r, null, s, o), t - 1), [];
                      });
                  },
                  r: function (e, t, i, r, s) {
                    (t = _e(t)), -1 === s && (s = 4294967295);
                    var o = Qe(i),
                      a = (e) => e;
                    if (0 === r) {
                      var n = 32 - 8 * i;
                      a = (e) => (e << n) >>> n;
                    }
                    var l = t.includes("unsigned");
                    rt(e, {
                      name: t,
                      fromWireType: a,
                      toWireType: l
                        ? function (e, t) {
                            return this.name, t >>> 0;
                          }
                        : function (e, t) {
                            return this.name, t;
                          },
                      argPackAdvance: 8,
                      readValueFromPointer: Rt(t, o, 0 !== r),
                      destructorFunction: null,
                    });
                  },
                  k: function (e, t, i) {
                    var r = [
                      Int8Array,
                      Uint8Array,
                      Int16Array,
                      Uint16Array,
                      Int32Array,
                      Uint32Array,
                      Float32Array,
                      Float64Array,
                    ][t];
                    function s(e) {
                      var t = E,
                        i = t[(e >>= 2)],
                        s = t[e + 1];
                      return new r(t.buffer, s, i);
                    }
                    rt(
                      e,
                      {
                        name: (i = _e(i)),
                        fromWireType: s,
                        argPackAdvance: 8,
                        readValueFromPointer: s,
                      },
                      { ignoreDuplicateRegistrations: !0 }
                    );
                  },
                  na: function (e, t) {
                    var i = "std::string" === (t = _e(t));
                    rt(e, {
                      name: t,
                      fromWireType: function (e) {
                        var t,
                          r = E[e >> 2],
                          s = e + 4;
                        if (i)
                          for (var o = s, a = 0; a <= r; ++a) {
                            var n = s + a;
                            if (a == r || 0 == x[n]) {
                              var l = Ce(o, n - o);
                              void 0 === t
                                ? (t = l)
                                : ((t += String.fromCharCode(0)), (t += l)),
                                (o = n + 1);
                            }
                          }
                        else {
                          var d = new Array(r);
                          for (a = 0; a < r; ++a)
                            d[a] = String.fromCharCode(x[s + a]);
                          t = d.join("");
                        }
                        return ba(e), t;
                      },
                      toWireType: function (e, t) {
                        var r;
                        t instanceof ArrayBuffer && (t = new Uint8Array(t));
                        var s = "string" == typeof t;
                        s ||
                          t instanceof Uint8Array ||
                          t instanceof Uint8ClampedArray ||
                          t instanceof Int8Array ||
                          Me("Cannot pass non-string to std::string"),
                          (r = i && s ? he(t) : t.length);
                        var o = xa(4 + r + 1),
                          a = o + 4;
                        if (((E[o >> 2] = r), i && s)) wt(t, a, r + 1);
                        else if (s)
                          for (var n = 0; n < r; ++n) {
                            var l = t.charCodeAt(n);
                            l > 255 &&
                              (ba(a),
                              Me(
                                "String has UTF-16 code units that do not fit in 8 bits"
                              )),
                              (x[a + n] = l);
                          }
                        else for (n = 0; n < r; ++n) x[a + n] = t[n];
                        return null !== e && e.push(ba, o), o;
                      },
                      argPackAdvance: 8,
                      readValueFromPointer: pt,
                      destructorFunction: function (e) {
                        ba(e);
                      },
                    });
                  },
                  S: function (e, t, i) {
                    var r, s, o, a, n;
                    (i = _e(i)),
                      2 === t
                        ? ((r = Lt), (s = Mt), (a = It), (o = () => A), (n = 1))
                        : 4 === t &&
                          ((r = Ot),
                          (s = kt),
                          (a = _t),
                          (o = () => E),
                          (n = 2)),
                      rt(e, {
                        name: i,
                        fromWireType: function (e) {
                          for (
                            var i, s = E[e >> 2], a = o(), l = e + 4, d = 0;
                            d <= s;
                            ++d
                          ) {
                            var h = e + 4 + d * t;
                            if (d == s || 0 == a[h >> n]) {
                              var u = r(l, h - l);
                              void 0 === i
                                ? (i = u)
                                : ((i += String.fromCharCode(0)), (i += u)),
                                (l = h + t);
                            }
                          }
                          return ba(e), i;
                        },
                        toWireType: function (e, r) {
                          "string" != typeof r &&
                            Me(
                              `Cannot pass non-string to C++ string type ${i}`
                            );
                          var o = a(r),
                            l = xa(4 + o + t);
                          return (
                            (E[l >> 2] = o >> n),
                            s(r, l + 4, o + t),
                            null !== e && e.push(ba, l),
                            l
                          );
                        },
                        argPackAdvance: 8,
                        readValueFromPointer: pt,
                        destructorFunction: function (e) {
                          ba(e);
                        },
                      });
                  },
                  Qg: function (e, t) {
                    rt(e, {
                      isVoid: !0,
                      name: (t = _e(t)),
                      argPackAdvance: 0,
                      fromWireType: function () {},
                      toWireType: function (e, t) {},
                    });
                  },
                  Rg: function (e) {
                    if (ra.xhrs.has(e)) {
                      var t = ra.xhrs.get(e);
                      ra.xhrs.free(e),
                        t.readyState > 0 && t.readyState < 4 && t.abort();
                    }
                  },
                  tb: function () {
                    return true;
                  },
                  ib: function () {
                    throw 1 / 0;
                  },
                  Z: function (e, t, i, r, s) {
                    return (e = Ft[e])(
                      (t = Ie.toValue(t)),
                      (i = Nt(i)),
                      (function (e) {
                        var t = [];
                        return (E[e >> 2] = Ie.toHandle(t)), t;
                      })(r),
                      s
                    );
                  },
                  C: function (e, t, i, r) {
                    (e = Ft[e])((t = Ie.toValue(t)), (i = Nt(i)), null, r);
                  },
                  x: bt,
                  u: function (e, t) {
                    var i = (function (e, t) {
                        for (var i = new Array(e), r = 0; r < e; ++r)
                          i[r] = Ge(E[(t + 4 * r) >> 2], "parameter " + r);
                        return i;
                      })(e, t),
                      r = i[0],
                      s =
                        r.name +
                        "_$" +
                        i
                          .slice(1)
                          .map(function (e) {
                            return e.name;
                          })
                          .join("_") +
                        "$",
                      o = Bt[s];
                    if (void 0 !== o) return o;
                    var a,
                      n,
                      l = new Array(e - 1);
                    return (
                      (a = (t, s, o, a) => {
                        for (var n = 0, d = 0; d < e - 1; ++d)
                          (l[d] = i[d + 1].readValueFromPointer(a + n)),
                            (n += i[d + 1].argPackAdvance);
                        var h = t[s].apply(t, l);
                        for (d = 0; d < e - 1; ++d)
                          i[d + 1].deleteObject && i[d + 1].deleteObject(l[d]);
                        if (!r.isVoid) return r.toWireType(o, h);
                      }),
                      (n = Ft.length),
                      Ft.push(a),
                      (o = n),
                      (Bt[s] = o),
                      o
                    );
                  },
                  _: function (e) {
                    e > 4 && (we.get(e).refcount += 1);
                  },
                  Y: function (e) {
                    St(Ie.toValue(e)), bt(e);
                  },
                  w: function (e, t) {
                    var i = (e = Ge(
                      e,
                      "_emval_take_value"
                    )).readValueFromPointer(t);
                    return Ie.toHandle(i);
                  },
                  lb: function (e, t) {
                    var i,
                      r = new Date(
                        1e3 * (E[(i = e) >> 2] + 4294967296 * T[(i + 4) >> 2])
                      );
                    (T[t >> 2] = r.getSeconds()),
                      (T[(t + 4) >> 2] = r.getMinutes()),
                      (T[(t + 8) >> 2] = r.getHours()),
                      (T[(t + 12) >> 2] = r.getDate()),
                      (T[(t + 16) >> 2] = r.getMonth()),
                      (T[(t + 20) >> 2] = r.getFullYear() - 1900),
                      (T[(t + 24) >> 2] = r.getDay());
                    var s =
                      0 |
                      (function (e) {
                        return (
                          (Ht(e.getFullYear()) ? Yt : Gt)[e.getMonth()] +
                          e.getDate() -
                          1
                        );
                      })(r);
                    (T[(t + 28) >> 2] = s),
                      (T[(t + 36) >> 2] = -60 * r.getTimezoneOffset());
                    var o = new Date(r.getFullYear(), 0, 1),
                      a = new Date(r.getFullYear(), 6, 1).getTimezoneOffset(),
                      n = o.getTimezoneOffset(),
                      l =
                        0 | (a != n && r.getTimezoneOffset() == Math.min(n, a));
                    T[(t + 32) >> 2] = l;
                  },
                  kb: function (e, t, i) {
                    var r = new Date().getFullYear(),
                      s = new Date(r, 0, 1),
                      o = new Date(r, 6, 1),
                      a = s.getTimezoneOffset(),
                      n = o.getTimezoneOffset(),
                      l = Math.max(a, n);
                    function d(e) {
                      var t = e.toTimeString().match(/\(([A-Za-z ]+)\)$/);
                      return t ? t[1] : "GMT";
                    }
                    (E[e >> 2] = 60 * l), (T[t >> 2] = Number(a != n));
                    var h = d(s),
                      u = d(o),
                      c = Xt(h),
                      p = Xt(u);
                    n < a
                      ? ((E[i >> 2] = c), (E[(i + 4) >> 2] = p))
                      : ((E[i >> 2] = p), (E[(i + 4) >> 2] = c));
                  },
                  y: function () {
                    j("");
                  },
                  kh: function (e) {
                    return 12448 == e
                      ? (Qt.setErrorCode(12288), 1)
                      : (Qt.setErrorCode(12300), 0);
                  },
                  nh: function (e, t, i, r, s) {
                    return Qt.chooseConfig(e, t, i, r, s);
                  },
                  bh: function (t, i, r, s) {
                    if (62e3 != t) return Qt.setErrorCode(12296), 0;
                    for (var o = 1; ; ) {
                      var a = T[s >> 2];
                      if (12440 != a) {
                        if (12344 == a) break;
                        return Qt.setErrorCode(12292), 0;
                      }
                      (o = T[(s + 4) >> 2]), (s += 8);
                    }
                    return o < 2 || o > 3
                      ? (Qt.setErrorCode(12293), 0)
                      : ((Qt.contextAttributes.majorVersion = o - 1),
                        (Qt.contextAttributes.minorVersion = 0),
                        (Qt.context = ei.createContext(
                          e.canvas,
                          Qt.contextAttributes
                        )),
                        0 != Qt.context
                          ? (Qt.setErrorCode(12288),
                            ei.makeContextCurrent(Qt.context),
                            (e.useWebGL = !0),
                            Jt.moduleContextCreatedCallbacks.forEach(function (
                              e
                            ) {
                              e();
                            }),
                            ei.makeContextCurrent(null),
                            62004)
                          : (Qt.setErrorCode(12297), 0));
                  },
                  dh: function (e, t, i, r) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62002 != t
                      ? (Qt.setErrorCode(12293), 0)
                      : (Qt.setErrorCode(12288), 62006);
                  },
                  ch: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62004 != t
                      ? (Qt.setErrorCode(12294), 0)
                      : (ei.deleteContext(Qt.context),
                        Qt.setErrorCode(12288),
                        Qt.currentContext == t && (Qt.currentContext = 0),
                        1);
                  },
                  eh: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 62006 != t
                      ? (Qt.setErrorCode(12301), 1)
                      : (Qt.currentReadSurface == t &&
                          (Qt.currentReadSurface = 0),
                        Qt.currentDrawSurface == t &&
                          (Qt.currentDrawSurface = 0),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  oh: function (e, t, i, r) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if (62002 != t) return Qt.setErrorCode(12293), 0;
                    if (!r) return Qt.setErrorCode(12300), 0;
                    switch ((Qt.setErrorCode(12288), i)) {
                      case 12320:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.alpha ? 32 : 24), 1
                        );
                      case 12321:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.alpha ? 8 : 0), 1
                        );
                      case 12322:
                      case 12323:
                      case 12324:
                        return (T[r >> 2] = 8), 1;
                      case 12325:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.depth ? 24 : 0), 1
                        );
                      case 12326:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.stencil ? 8 : 0), 1
                        );
                      case 12327:
                      case 12335:
                      case 12340:
                        return (T[r >> 2] = 12344), 1;
                      case 12328:
                        return (T[r >> 2] = 62002), 1;
                      case 12329:
                      case 12333:
                      case 12334:
                      case 12345:
                      case 12346:
                      case 12347:
                      case 12349:
                      case 12350:
                      case 12354:
                        return (T[r >> 2] = 0), 1;
                      case 12330:
                      case 12332:
                        return (T[r >> 2] = 4096), 1;
                      case 12331:
                        return (T[r >> 2] = 16777216), 1;
                      case 12337:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.antialias ? 4 : 0),
                          1
                        );
                      case 12338:
                        return (
                          (T[r >> 2] = Qt.contextAttributes.antialias ? 1 : 0),
                          1
                        );
                      case 12339:
                      case 12352:
                        return (T[r >> 2] = 4), 1;
                      case 12341:
                      case 12342:
                      case 12343:
                        return (T[r >> 2] = -1), 1;
                      case 12348:
                        return (T[r >> 2] = 1), 1;
                      case 12351:
                        return (T[r >> 2] = 12430), 1;
                      default:
                        return Qt.setErrorCode(12292), 0;
                    }
                  },
                  La: function (e) {
                    return Qt.setErrorCode(12288), 62e3;
                  },
                  ah: function () {
                    return Qt.errorCode;
                  },
                  lh: function (e, t, i) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : (t && (T[t >> 2] = 1),
                        i && (T[i >> 2] = 4),
                        (Qt.defaultDisplayInitialized = !0),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  fh: function (e, t, i, r) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : 0 != r && 62004 != r
                      ? (Qt.setErrorCode(12294), 0)
                      : (0 != i && 62006 != i) || (0 != t && 62006 != t)
                      ? (Qt.setErrorCode(12301), 0)
                      : (ei.makeContextCurrent(r ? Qt.context : null),
                        (Qt.currentContext = r),
                        (Qt.currentDrawSurface = t),
                        (Qt.currentReadSurface = i),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  $g: function (e, t) {
                    if (62e3 != e) return Qt.setErrorCode(12296), 0;
                    if ((Qt.setErrorCode(12288), Qt.stringCache[t]))
                      return Qt.stringCache[t];
                    var i;
                    switch (t) {
                      case 12371:
                        i = Xt("Emscripten");
                        break;
                      case 12372:
                        i = Xt("1.4 Emscripten EGL");
                        break;
                      case 12373:
                        i = Xt("");
                        break;
                      case 12429:
                        i = Xt("OpenGL_ES");
                        break;
                      default:
                        return Qt.setErrorCode(12300), 0;
                    }
                    return (Qt.stringCache[t] = i), i;
                  },
                  gh: function (t, i) {
                    if (Qt.defaultDisplayInitialized)
                      if (e.ctx) {
                        if (!e.ctx.isContextLost())
                          return Qt.setErrorCode(12288), 1;
                        Qt.setErrorCode(12302);
                      } else Qt.setErrorCode(12290);
                    else Qt.setErrorCode(12289);
                    return 0;
                  },
                  hh: function (e, t) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : (0 == t ? jt(0, 0) : jt(1, t),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  mh: function (e) {
                    return 62e3 != e
                      ? (Qt.setErrorCode(12296), 0)
                      : ((Qt.currentContext = 0),
                        (Qt.currentReadSurface = 0),
                        (Qt.currentDrawSurface = 0),
                        (Qt.defaultDisplayInitialized = !1),
                        Qt.setErrorCode(12288),
                        1);
                  },
                  jh: function () {
                    return Qt.setErrorCode(12288), 1;
                  },
                  ih: function (e) {
                    return Qt.setErrorCode(12288), 1;
                  },
                  z: function (e, t, i) {
                    return (function (e, t, i) {
                      var r = ii(t, i);
                      return ee[e].apply(null, r);
                    })(e, t, i);
                  },
                  m: function (e, t, i) {
                    return (function (e, t, i, r) {
                      var s = ii(t, i);
                      return ee[e].apply(null, s);
                    })(e, t, i);
                  },
                  ab: function () {
                    Jt.mainLoop.pause(), (Jt.mainLoop.func = null);
                  },
                  R: function () {
                    return Date.now();
                  },
                  Ug: function () {
                    if (!si.fullscreenEnabled()) return -1;
                    si.removeDeferredCalls(fi);
                    var e = ni[1];
                    if (e.exitFullscreen)
                      e.fullscreenElement && e.exitFullscreen();
                    else {
                      if (!e.webkitExitFullscreen) return -1;
                      e.webkitFullscreenElement && e.webkitExitFullscreen();
                    }
                    return 0;
                  },
                  Zg: function () {
                    return (
                      si.removeDeferredCalls(vi),
                      document.exitPointerLock
                        ? (document.exitPointerLock(), 0)
                        : -1
                    );
                  },
                  B: function () {
                    return devicePixelRatio;
                  },
                  t: function (e, t, i) {
                    if (!(e = li(e))) return -4;
                    var r = yi(e);
                    return (w[t >> 3] = r.width), (w[i >> 3] = r.height), 0;
                  },
                  W: function (e, t) {
                    return e < 0 || e >= si.lastGamepadState.length
                      ? -5
                      : si.lastGamepadState[e]
                      ? (mi(t, si.lastGamepadState[e]), 0)
                      : -7;
                  },
                  Q: zt,
                  Ma: function () {
                    return si.lastGamepadState.length;
                  },
                  _g: function (e, t) {
                    (T[e >> 2] = screen.width), (T[t >> 2] = screen.height);
                  },
                  tg: Pi,
                  sg: xi,
                  ld: function (e, t) {
                    ga.beginQuery(e, ei.queries[t]);
                  },
                  Kg: function (e, t) {
                    ga.disjointTimerQueryExt.beginQueryEXT(e, ei.queries[t]);
                  },
                  Uc: function (e) {
                    ga.beginTransformFeedback(e);
                  },
                  rg: Ai,
                  pg: Ei,
                  Rc: function (e, t, i) {
                    ga.bindBufferBase(e, t, ei.buffers[i]);
                  },
                  Sc: function (e, t, i, r, s) {
                    ga.bindBufferRange(e, t, ei.buffers[i], r, s);
                  },
                  og: wi,
                  ng: function (e, t) {
                    ga.bindRenderbuffer(e, ei.renderbuffers[t]);
                  },
                  Xb: function (e, t) {
                    ga.bindSampler(e, ei.samplers[t]);
                  },
                  mg: Li,
                  Pb: function (e, t) {
                    ga.bindTransformFeedback(e, ei.transformFeedbacks[t]);
                  },
                  Zc: Ii,
                  Cg: Oi,
                  lg: _i,
                  kg: Ni,
                  jg: function (e, t) {
                    ga.blendEquationSeparate(e, t);
                  },
                  ig: function (e, t) {
                    ga.blendFunc(e, t);
                  },
                  hg: Bi,
                  ad: function (e, t, i, r, s, o, a, n, l, d) {
                    ga.blitFramebuffer(e, t, i, r, s, o, a, n, l, d);
                  },
                  gg: zi,
                  fg: function (e, t, i, r) {
                    ei.currentContext.version >= 2
                      ? i && ga.bufferSubData(e, t, x, r, i)
                      : ga.bufferSubData(e, t, x.subarray(r, r + i));
                  },
                  eg: Gi,
                  dg: ji,
                  tc: function (e, t, i, r) {
                    ga.clearBufferfi(e, t, i, r);
                  },
                  uc: function (e, t, i) {
                    ga.clearBufferfv(e, t, R, i >> 2);
                  },
                  wc: function (e, t, i) {
                    ga.clearBufferiv(e, t, T, i >> 2);
                  },
                  vc: function (e, t, i) {
                    ga.clearBufferuiv(e, t, E, i >> 2);
                  },
                  cg: Ui,
                  bg: function (e) {
                    ga.clearDepth(e);
                  },
                  ag: function (e) {
                    ga.clearStencil(e);
                  },
                  fc: function (e, t, i, r) {
                    var s = $i(i, r);
                    return ga.clientWaitSync(ei.syncs[e], t, s);
                  },
                  $f: Ki,
                  _f: Ji,
                  Zf: er,
                  rd: function (e, t, i, r, s, o, a, n, l) {
                    ga.currentPixelUnpackBufferBinding
                      ? ga.compressedTexImage3D(e, t, i, r, s, o, a, n, l)
                      : ga.compressedTexImage3D(e, t, i, r, s, o, a, x, l, n);
                  },
                  Yf: function (e, t, i, r, s, o, a, n, l) {
                    ei.currentContext.version >= 2
                      ? ga.currentPixelUnpackBufferBinding || !n
                        ? ga.compressedTexSubImage2D(e, t, i, r, s, o, a, n, l)
                        : ga.compressedTexSubImage2D(
                            e,
                            t,
                            i,
                            r,
                            s,
                            o,
                            a,
                            x,
                            l,
                            n
                          )
                      : ga.compressedTexSubImage2D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          l ? x.subarray(l, l + n) : null
                        );
                  },
                  qd: function (e, t, i, r, s, o, a, n, l, d, h) {
                    ga.currentPixelUnpackBufferBinding
                      ? ga.compressedTexSubImage3D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          n,
                          l,
                          d,
                          h
                        )
                      : ga.compressedTexSubImage3D(
                          e,
                          t,
                          i,
                          r,
                          s,
                          o,
                          a,
                          n,
                          l,
                          x,
                          h,
                          d
                        );
                  },
                  rc: function (e, t, i, r, s) {
                    ga.copyBufferSubData(e, t, i, r, s);
                  },
                  Wf: function (e, t, i, r, s, o, a, n) {
                    ga.copyTexImage2D(e, t, i, r, s, o, a, n);
                  },
                  Vf: function (e, t, i, r, s, o, a, n) {
                    ga.copyTexSubImage2D(e, t, i, r, s, o, a, n);
                  },
                  sd: function (e, t, i, r, s, o, a, n, l) {
                    ga.copyTexSubImage3D(e, t, i, r, s, o, a, n, l);
                  },
                  Uf: ir,
                  Tf: sr,
                  Sf: ar,
                  Rf: lr,
                  Qf: hr,
                  Pf: cr,
                  nd: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.queries[r];
                      s && (ga.deleteQuery(s), (ei.queries[r] = null));
                    }
                  },
                  Mg: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.queries[r];
                      s &&
                        (ga.disjointTimerQueryExt.deleteQueryEXT(s),
                        (ei.queries[r] = null));
                    }
                  },
                  Of: gr,
                  _b: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.samplers[r];
                      s &&
                        (ga.deleteSampler(s),
                        (s.name = 0),
                        (ei.samplers[r] = null));
                    }
                  },
                  Nf: fr,
                  gc: function (e) {
                    if (e) {
                      var t = ei.syncs[e];
                      t
                        ? (ga.deleteSync(t), (t.name = 0), (ei.syncs[e] = null))
                        : ei.recordError(1281);
                    }
                  },
                  Mf: mr,
                  Ob: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = T[(t + 4 * i) >> 2],
                        s = ei.transformFeedbacks[r];
                      s &&
                        (ga.deleteTransformFeedback(s),
                        (s.name = 0),
                        (ei.transformFeedbacks[r] = null));
                    }
                  },
                  Yc: Pr,
                  Ag: Cr,
                  Lf: br,
                  Kf: Tr,
                  Jf: function (e, t) {
                    ga.depthRange(e, t);
                  },
                  If: Rr,
                  Hf: Dr,
                  Gf: function (e) {
                    ga.disableVertexAttribArray(e);
                  },
                  Ff: Mr,
                  kc: Or,
                  wg: kr,
                  xb: _r,
                  zd: Vr,
                  yb: Nr,
                  hd: Hr,
                  xd: zr,
                  xg: Yr,
                  Ef: Xr,
                  jc: Wr,
                  vg: Ur,
                  vb: $r,
                  wb: qr,
                  yd: Kr,
                  vd: function (e, t, i, r, s, o) {
                    Gr(e, r, s, o);
                  },
                  Df: Jr,
                  Cf: es,
                  kd: function (e) {
                    ga.endQuery(e);
                  },
                  Jg: function (e) {
                    ga.disjointTimerQueryExt.endQueryEXT(e);
                  },
                  Tc: function () {
                    ga.endTransformFeedback();
                  },
                  ic: function (e, t) {
                    var i = ga.fenceSync(e, t);
                    if (i) {
                      var r = ei.getNewId(ei.syncs);
                      return (i.name = r), (ei.syncs[r] = i), r;
                    }
                    return 0;
                  },
                  Bf: function () {
                    ga.finish();
                  },
                  Af: function () {
                    ga.flush();
                  },
                  zf: function (e, t, i, r) {
                    ga.framebufferRenderbuffer(e, t, i, ei.renderbuffers[r]);
                  },
                  yf: is,
                  _c: function (e, t, i, r, s) {
                    ga.framebufferTextureLayer(e, t, ei.textures[i], r, s);
                  },
                  xf: ss,
                  wf: ns,
                  uf: ds,
                  od: function (e, t) {
                    os(e, t, "createQuery", ei.queries);
                  },
                  Ng: function (e, t) {
                    for (var i = 0; i < e; i++) {
                      var r = ga.disjointTimerQueryExt.createQueryEXT();
                      if (!r) {
                        for (ei.recordError(1282); i < e; )
                          T[(t + 4 * i++) >> 2] = 0;
                        return;
                      }
                      var s = ei.getNewId(ei.queries);
                      (r.name = s),
                        (ei.queries[s] = r),
                        (T[(t + 4 * i) >> 2] = s);
                    }
                  },
                  tf: function (e, t) {
                    os(e, t, "createRenderbuffer", ei.renderbuffers);
                  },
                  $b: function (e, t) {
                    os(e, t, "createSampler", ei.samplers);
                  },
                  rf: us,
                  Nb: function (e, t) {
                    os(e, t, "createTransformFeedback", ei.transformFeedbacks);
                  },
                  Xc: ps,
                  zg: gs,
                  vf: fs,
                  qf: Ss,
                  pf: Cs,
                  mc: function (e, t, i, r, s) {
                    e = ei.programs[e];
                    var o = ga.getActiveUniformBlockName(e, t);
                    if (o)
                      if (s && i > 0) {
                        var a = wt(o, s, i);
                        r && (T[r >> 2] = a);
                      } else r && (T[r >> 2] = 0);
                  },
                  nc: function (e, t, i, r) {
                    if (r)
                      if (((e = ei.programs[e]), 35393 != i)) {
                        var s = ga.getActiveUniformBlockParameter(e, t, i);
                        if (null !== s)
                          if (35395 == i)
                            for (var o = 0; o < s.length; o++)
                              T[(r + 4 * o) >> 2] = s[o];
                          else T[r >> 2] = s;
                      } else {
                        var a = ga.getActiveUniformBlockName(e, t);
                        T[r >> 2] = a.length + 1;
                      }
                    else ei.recordError(1281);
                  },
                  pc: function (e, t, i, r, s) {
                    if (s)
                      if (t > 0 && 0 == i) ei.recordError(1281);
                      else {
                        e = ei.programs[e];
                        for (var o = [], a = 0; a < t; a++)
                          o.push(T[(i + 4 * a) >> 2]);
                        var n = ga.getActiveUniforms(e, o, r);
                        if (n) {
                          var l = n.length;
                          for (a = 0; a < l; a++) T[(s + 4 * a) >> 2] = n[a];
                        }
                      }
                    else ei.recordError(1281);
                  },
                  of: function (e, t, i, r) {
                    var s = ga.getAttachedShaders(ei.programs[e]),
                      o = s.length;
                    o > t && (o = t), (T[i >> 2] = o);
                    for (var a = 0; a < o; ++a) {
                      var n = ei.shaders.indexOf(s[a]);
                      T[(r + 4 * a) >> 2] = n;
                    }
                  },
                  nf: function (e, t) {
                    return ga.getAttribLocation(ei.programs[e], Ce(t));
                  },
                  mf: function (e, t) {
                    bs(e, t, 4);
                  },
                  ac: function (e, t, i) {
                    i
                      ? xs(i, ga.getBufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  lf: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getBufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  kf: function () {
                    var e = ga.getError() || ei.lastError;
                    return (ei.lastError = 0), e;
                  },
                  jf: function (e, t) {
                    bs(e, t, 2);
                  },
                  Gc: function (e, t) {
                    return ga.getFragDataLocation(ei.programs[e], Ce(t));
                  },
                  hf: function (e, t, i, r) {
                    var s = ga.getFramebufferAttachmentParameter(e, t, i);
                    (s instanceof WebGLRenderbuffer ||
                      s instanceof WebGLTexture) &&
                      (s = 0 | s.name),
                      (T[r >> 2] = s);
                  },
                  bc: function (e, t, i) {
                    As(e, t, i, 1);
                  },
                  dc: function (e, t) {
                    bs(e, t, 1);
                  },
                  Vc: function (e, t, i) {
                    As(e, t, i, 0);
                  },
                  ff: Es,
                  Bb: function (e, t, i, r, s) {
                    if (r < 0) ei.recordError(1281);
                    else if (s) {
                      var o = ga.getInternalformatParameter(e, t, i);
                      if (null !== o)
                        for (var a = 0; a < o.length && a < r; ++a)
                          T[(s + 4 * a) >> 2] = o[a];
                    } else ei.recordError(1281);
                  },
                  Jb: function (e, t, i, r, s) {
                    ei.recordError(1282);
                  },
                  df: ws,
                  ef: Ls,
                  Eg: Is,
                  Gg: ks,
                  Dg: _s,
                  id: function (e, t, i) {
                    if (i) {
                      var r,
                        s = ei.queries[e],
                        o = ga.getQueryParameter(s, t);
                      (r = "boolean" == typeof o ? (o ? 1 : 0) : o),
                        (T[i >> 2] = r);
                    } else ei.recordError(1281);
                  },
                  Fg: Vs,
                  jd: function (e, t, i) {
                    i ? (T[i >> 2] = ga.getQuery(e, t)) : ei.recordError(1281);
                  },
                  Hg: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.disjointTimerQueryExt.getQueryEXT(e, t))
                      : ei.recordError(1281);
                  },
                  cf: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getRenderbufferParameter(e, t))
                      : ei.recordError(1281);
                  },
                  Rb: function (e, t, i) {
                    i
                      ? (R[i >> 2] = ga.getSamplerParameter(ei.samplers[e], t))
                      : ei.recordError(1281);
                  },
                  Sb: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getSamplerParameter(ei.samplers[e], t))
                      : ei.recordError(1281);
                  },
                  af: Fs,
                  $e: function (e, t, i, r) {
                    var s = ga.getShaderPrecisionFormat(e, t);
                    (T[i >> 2] = s.rangeMin),
                      (T[(i + 4) >> 2] = s.rangeMax),
                      (T[r >> 2] = s.precision);
                  },
                  _e: function (e, t, i, r) {
                    var s = ga.getShaderSource(ei.shaders[e]);
                    if (s) {
                      var o = t > 0 && r ? wt(s, r, t) : 0;
                      i && (T[i >> 2] = o);
                    }
                  },
                  bf: Hs,
                  Ze: Ys,
                  sc: function (e, t) {
                    if (ei.currentContext.version < 2)
                      return ei.recordError(1282), 0;
                    var i = ei.stringiCache[e];
                    if (i)
                      return t < 0 || t >= i.length
                        ? (ei.recordError(1281), 0)
                        : i[t];
                    if (7939 === e) {
                      var r = ga.getSupportedExtensions() || [];
                      return (
                        (r = (r = r.concat(
                          r.map(function (e) {
                            return "GL_" + e;
                          })
                        )).map(function (e) {
                          return Xt(e);
                        })),
                        (i = ei.stringiCache[e] = r),
                        t < 0 || t >= i.length
                          ? (ei.recordError(1281), 0)
                          : i[t]
                      );
                    }
                    return ei.recordError(1280), 0;
                  },
                  cc: function (e, t, i, r, s) {
                    if (i < 0) ei.recordError(1281);
                    else if (s) {
                      var o = ga.getSyncParameter(ei.syncs[e], t);
                      null !== o && ((T[s >> 2] = o), r && (T[r >> 2] = 1));
                    } else ei.recordError(1281);
                  },
                  Ye: function (e, t, i) {
                    i
                      ? (R[i >> 2] = ga.getTexParameter(e, t))
                      : ei.recordError(1281);
                  },
                  We: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getTexParameter(e, t))
                      : ei.recordError(1281);
                  },
                  Pc: function (e, t, i, r, s, o, a) {
                    e = ei.programs[e];
                    var n = ga.getTransformFeedbackVarying(e, t);
                    if (n) {
                      if (a && i > 0) {
                        var l = wt(n.name, a, i);
                        r && (T[r >> 2] = l);
                      } else r && (T[r >> 2] = 0);
                      s && (T[s >> 2] = n.size), o && (T[o >> 2] = n.type);
                    }
                  },
                  oc: function (e, t) {
                    return ga.getUniformBlockIndex(ei.programs[e], Ce(t));
                  },
                  qc: function (e, t, i, r) {
                    if (r)
                      if (t > 0 && (0 == i || 0 == r)) ei.recordError(1281);
                      else {
                        e = ei.programs[e];
                        for (var s = [], o = 0; o < t; o++)
                          s.push(Ce(T[(i + 4 * o) >> 2]));
                        var a = ga.getUniformIndices(e, s);
                        if (a) {
                          var n = a.length;
                          for (o = 0; o < n; o++) T[(r + 4 * o) >> 2] = a[o];
                        }
                      }
                    else ei.recordError(1281);
                  },
                  Te: Ws,
                  Ve: function (e, t, i) {
                    $s(e, t, i, 2);
                  },
                  Ue: function (e, t, i) {
                    $s(e, t, i, 0);
                  },
                  Hc: function (e, t, i) {
                    $s(e, t, i, 0);
                  },
                  Nc: Zs,
                  Mc: Js,
                  Qe: function (e, t, i) {
                    i
                      ? (T[i >> 2] = ga.getVertexAttribOffset(e, t))
                      : ei.recordError(1281);
                  },
                  Se: function (e, t, i) {
                    qs(e, t, i, 2);
                  },
                  Re: function (e, t, i) {
                    qs(e, t, i, 5);
                  },
                  Pe: function (e, t) {
                    ga.hint(e, t);
                  },
                  Gb: function (e, t, i) {
                    for (var r = Fr[t], s = 0; s < t; s++)
                      r[s] = T[(i + 4 * s) >> 2];
                    ga.invalidateFramebuffer(e, r);
                  },
                  Fb: function (e, t, i, r, s, o, a) {
                    for (var n = Fr[t], l = 0; l < t; l++)
                      n[l] = T[(i + 4 * l) >> 2];
                    ga.invalidateSubFramebuffer(e, n, r, s, o, a);
                  },
                  Oe: function (e) {
                    var t = ei.buffers[e];
                    return t ? ga.isBuffer(t) : 0;
                  },
                  Ne: function (e) {
                    return ga.isEnabled(e);
                  },
                  Le: function (e) {
                    var t = ei.framebuffers[e];
                    return t ? ga.isFramebuffer(t) : 0;
                  },
                  Ke: function (e) {
                    return (e = ei.programs[e]) ? ga.isProgram(e) : 0;
                  },
                  md: function (e) {
                    var t = ei.queries[e];
                    return t ? ga.isQuery(t) : 0;
                  },
                  Lg: function (e) {
                    var t = ei.queries[e];
                    return t ? ga.disjointTimerQueryExt.isQueryEXT(t) : 0;
                  },
                  Je: function (e) {
                    var t = ei.renderbuffers[e];
                    return t ? ga.isRenderbuffer(t) : 0;
                  },
                  Yb: function (e) {
                    var t = ei.samplers[e];
                    return t ? ga.isSampler(t) : 0;
                  },
                  Ie: function (e) {
                    var t = ei.shaders[e];
                    return t ? ga.isShader(t) : 0;
                  },
                  hc: function (e) {
                    return ga.isSync(ei.syncs[e]);
                  },
                  He: function (e) {
                    var t = ei.textures[e];
                    return t ? ga.isTexture(t) : 0;
                  },
                  Mb: function (e) {
                    return ga.isTransformFeedback(ei.transformFeedbacks[e]);
                  },
                  Wc: eo,
                  yg: to,
                  Ge: ro,
                  Fe: oo,
                  Lb: function () {
                    ga.pauseTransformFeedback();
                  },
                  Ee: no,
                  De: function (e, t) {
                    ga.polygonOffset(e, t);
                  },
                  Ib: function (e, t, i, r) {
                    ei.recordError(1280);
                  },
                  Hb: function (e, t, i) {
                    ei.recordError(1280);
                  },
                  Ig: function (e, t) {
                    ga.disjointTimerQueryExt.queryCounterEXT(ei.queries[e], t);
                  },
                  wd: function (e) {
                    ga.readBuffer(e);
                  },
                  Ce: po,
                  Ae: function () {},
                  ze: function (e, t, i, r) {
                    ga.renderbufferStorage(e, t, i, r);
                  },
                  $c: function (e, t, i, r, s) {
                    ga.renderbufferStorageMultisample(e, t, i, r, s);
                  },
                  Kb: function () {
                    ga.resumeTransformFeedback();
                  },
                  ye: function (e, t) {
                    ga.sampleCoverage(e, !!t);
                  },
                  Ub: function (e, t, i) {
                    ga.samplerParameterf(ei.samplers[e], t, i);
                  },
                  Tb: function (e, t, i) {
                    var r = R[i >> 2];
                    ga.samplerParameterf(ei.samplers[e], t, r);
                  },
                  Wb: function (e, t, i) {
                    ga.samplerParameteri(ei.samplers[e], t, i);
                  },
                  Vb: function (e, t, i) {
                    var r = T[i >> 2];
                    ga.samplerParameteri(ei.samplers[e], t, r);
                  },
                  xe: yo,
                  we: function (e, t, i, r, s) {
                    ei.recordError(1280);
                  },
                  ve: vo,
                  ue: function (e, t, i) {
                    ga.stencilFunc(e, t, i);
                  },
                  te: function (e, t, i, r) {
                    ga.stencilFuncSeparate(e, t, i, r);
                  },
                  se: function (e) {
                    ga.stencilMask(e);
                  },
                  re: function (e, t) {
                    ga.stencilMaskSeparate(e, t);
                  },
                  pe: function (e, t, i) {
                    ga.stencilOp(e, t, i);
                  },
                  oe: function (e, t, i, r) {
                    ga.stencilOpSeparate(e, t, i, r);
                  },
                  ne: So,
                  ud: function (e, t, i, r, s, o, a, n, l, d) {
                    if (ga.currentPixelUnpackBufferBinding)
                      ga.texImage3D(e, t, i, r, s, o, a, n, l, d);
                    else if (d) {
                      var h = lo(l);
                      ga.texImage3D(e, t, i, r, s, o, a, n, l, h, d >> ho(h));
                    } else ga.texImage3D(e, t, i, r, s, o, a, n, l, null);
                  },
                  me: function (e, t, i) {
                    ga.texParameterf(e, t, i);
                  },
                  le: function (e, t, i) {
                    var r = R[i >> 2];
                    ga.texParameterf(e, t, r);
                  },
                  ke: Co,
                  je: function (e, t, i) {
                    var r = T[i >> 2];
                    ga.texParameteri(e, t, r);
                  },
                  Db: function (e, t, i, r, s) {
                    ga.texStorage2D(e, t, i, r, s);
                  },
                  Cb: function (e, t, i, r, s, o) {
                    ga.texStorage3D(e, t, i, r, s, o);
                  },
                  ie: function (e, t, i, r, s, o, a, n, l) {
                    if (ei.currentContext.version >= 2)
                      if (ga.currentPixelUnpackBufferBinding)
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, l);
                      else if (l) {
                        var d = lo(n);
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, d, l >> ho(d));
                      } else ga.texSubImage2D(e, t, i, r, s, o, a, n, null);
                    else {
                      var h = null;
                      l && (h = uo(n, a, s, o, l)),
                        ga.texSubImage2D(e, t, i, r, s, o, a, n, h);
                    }
                  },
                  td: function (e, t, i, r, s, o, a, n, l, d, h) {
                    if (ga.currentPixelUnpackBufferBinding)
                      ga.texSubImage3D(e, t, i, r, s, o, a, n, l, d, h);
                    else if (h) {
                      var u = lo(d);
                      ga.texSubImage3D(
                        e,
                        t,
                        i,
                        r,
                        s,
                        o,
                        a,
                        n,
                        l,
                        d,
                        u,
                        h >> ho(u)
                      );
                    } else ga.texSubImage3D(e, t, i, r, s, o, a, n, l, d, null);
                  },
                  Qc: function (e, t, i, r) {
                    e = ei.programs[e];
                    for (var s = [], o = 0; o < t; o++)
                      s.push(Ce(T[(i + 4 * o) >> 2]));
                    ga.transformFeedbackVaryings(e, s, r);
                  },
                  he: function (e, t) {
                    ga.uniform1f(Us(e), t);
                  },
                  ge: Ao,
                  ee: Eo,
                  de: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform1iv(Us(e), T, i >> 2, t);
                    else {
                      if (t <= 288)
                        for (var r = Ro[t - 1], s = 0; s < t; ++s)
                          r[s] = T[(i + 4 * s) >> 2];
                      else r = T.subarray(i >> 2, (i + 4 * t) >> 2);
                      ga.uniform1iv(Us(e), r);
                    }
                  },
                  Fc: function (e, t) {
                    ga.uniform1ui(Us(e), t);
                  },
                  Ac: function (e, t, i) {
                    t && ga.uniform1uiv(Us(e), E, i >> 2, t);
                  },
                  ce: function (e, t, i) {
                    ga.uniform2f(Us(e), t, i);
                  },
                  be: Do,
                  ae: function (e, t, i) {
                    ga.uniform2i(Us(e), t, i);
                  },
                  $d: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform2iv(Us(e), T, i >> 2, 2 * t);
                    else {
                      if (t <= 144)
                        for (var r = Ro[2 * t - 1], s = 0; s < 2 * t; s += 2)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 8 * t) >> 2);
                      ga.uniform2iv(Us(e), r);
                    }
                  },
                  Ec: function (e, t, i) {
                    ga.uniform2ui(Us(e), t, i);
                  },
                  zc: function (e, t, i) {
                    t && ga.uniform2uiv(Us(e), E, i >> 2, 2 * t);
                  },
                  _d: function (e, t, i, r) {
                    ga.uniform3f(Us(e), t, i, r);
                  },
                  Zd: Mo,
                  Yd: function (e, t, i, r) {
                    ga.uniform3i(Us(e), t, i, r);
                  },
                  Xd: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform3iv(Us(e), T, i >> 2, 3 * t);
                    else {
                      if (t <= 96)
                        for (var r = Ro[3 * t - 1], s = 0; s < 3 * t; s += 3)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]),
                            (r[s + 2] = T[(i + (4 * s + 8)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 12 * t) >> 2);
                      ga.uniform3iv(Us(e), r);
                    }
                  },
                  Dc: function (e, t, i, r) {
                    ga.uniform3ui(Us(e), t, i, r);
                  },
                  yc: function (e, t, i) {
                    t && ga.uniform3uiv(Us(e), E, i >> 2, 3 * t);
                  },
                  Vd: function (e, t, i, r, s) {
                    ga.uniform4f(Us(e), t, i, r, s);
                  },
                  Ud: Oo,
                  Td: function (e, t, i, r, s) {
                    ga.uniform4i(Us(e), t, i, r, s);
                  },
                  Sd: function (e, t, i) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniform4iv(Us(e), T, i >> 2, 4 * t);
                    else {
                      if (t <= 72)
                        for (var r = Ro[4 * t - 1], s = 0; s < 4 * t; s += 4)
                          (r[s] = T[(i + 4 * s) >> 2]),
                            (r[s + 1] = T[(i + (4 * s + 4)) >> 2]),
                            (r[s + 2] = T[(i + (4 * s + 8)) >> 2]),
                            (r[s + 3] = T[(i + (4 * s + 12)) >> 2]);
                      else r = T.subarray(i >> 2, (i + 16 * t) >> 2);
                      ga.uniform4iv(Us(e), r);
                    }
                  },
                  Bc: function (e, t, i, r, s) {
                    ga.uniform4ui(Us(e), t, i, r, s);
                  },
                  xc: function (e, t, i) {
                    t && ga.uniform4uiv(Us(e), E, i >> 2, 4 * t);
                  },
                  lc: function (e, t, i) {
                    (e = ei.programs[e]), ga.uniformBlockBinding(e, t, i);
                  },
                  Rd: function (e, t, i, r) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniformMatrix2fv(Us(e), !!i, R, r >> 2, 4 * t);
                    else {
                      if (t <= 72)
                        for (var s = xo[4 * t - 1], o = 0; o < 4 * t; o += 4)
                          (s[o] = R[(r + 4 * o) >> 2]),
                            (s[o + 1] = R[(r + (4 * o + 4)) >> 2]),
                            (s[o + 2] = R[(r + (4 * o + 8)) >> 2]),
                            (s[o + 3] = R[(r + (4 * o + 12)) >> 2]);
                      else s = R.subarray(r >> 2, (r + 16 * t) >> 2);
                      ga.uniformMatrix2fv(Us(e), !!i, s);
                    }
                  },
                  gd: function (e, t, i, r) {
                    t && ga.uniformMatrix2x3fv(Us(e), !!i, R, r >> 2, 6 * t);
                  },
                  ed: function (e, t, i, r) {
                    t && ga.uniformMatrix2x4fv(Us(e), !!i, R, r >> 2, 8 * t);
                  },
                  Qd: function (e, t, i, r) {
                    if (ei.currentContext.version >= 2)
                      t && ga.uniformMatrix3fv(Us(e), !!i, R, r >> 2, 9 * t);
                    else {
                      if (t <= 32)
                        for (var s = xo[9 * t - 1], o = 0; o < 9 * t; o += 9)
                          (s[o] = R[(r + 4 * o) >> 2]),
                            (s[o + 1] = R[(r + (4 * o + 4)) >> 2]),
                            (s[o + 2] = R[(r + (4 * o + 8)) >> 2]),
                            (s[o + 3] = R[(r + (4 * o + 12)) >> 2]),
                            (s[o + 4] = R[(r + (4 * o + 16)) >> 2]),
                            (s[o + 5] = R[(r + (4 * o + 20)) >> 2]),
                            (s[o + 6] = R[(r + (4 * o + 24)) >> 2]),
                            (s[o + 7] = R[(r + (4 * o + 28)) >> 2]),
                            (s[o + 8] = R[(r + (4 * o + 32)) >> 2]);
                      else s = R.subarray(r >> 2, (r + 36 * t) >> 2);
                      ga.uniformMatrix3fv(Us(e), !!i, s);
                    }
                  },
                  fd: function (e, t, i, r) {
                    t && ga.uniformMatrix3x2fv(Us(e), !!i, R, r >> 2, 6 * t);
                  },
                  cd: function (e, t, i, r) {
                    t && ga.uniformMatrix3x4fv(Us(e), !!i, R, r >> 2, 12 * t);
                  },
                  Pd: _o,
                  dd: function (e, t, i, r) {
                    t && ga.uniformMatrix4x2fv(Us(e), !!i, R, r >> 2, 8 * t);
                  },
                  bd: function (e, t, i, r) {
                    t && ga.uniformMatrix4x3fv(Us(e), !!i, R, r >> 2, 12 * t);
                  },
                  Od: No,
                  Nd: function (e) {
                    ga.validateProgram(ei.programs[e]);
                  },
                  Md: function (e, t) {
                    ga.vertexAttrib1f(e, t);
                  },
                  Kd: function (e, t) {
                    ga.vertexAttrib1f(e, R[t >> 2]);
                  },
                  Jd: function (e, t, i) {
                    ga.vertexAttrib2f(e, t, i);
                  },
                  Id: function (e, t) {
                    ga.vertexAttrib2f(e, R[t >> 2], R[(t + 4) >> 2]);
                  },
                  Hd: function (e, t, i, r) {
                    ga.vertexAttrib3f(e, t, i, r);
                  },
                  Gd: function (e, t) {
                    ga.vertexAttrib3f(
                      e,
                      R[t >> 2],
                      R[(t + 4) >> 2],
                      R[(t + 8) >> 2]
                    );
                  },
                  Fd: function (e, t, i, r, s) {
                    ga.vertexAttrib4f(e, t, i, r, s);
                  },
                  Ed: function (e, t) {
                    ga.vertexAttrib4f(
                      e,
                      R[t >> 2],
                      R[(t + 4) >> 2],
                      R[(t + 8) >> 2],
                      R[(t + 12) >> 2]
                    );
                  },
                  Qb: Bo,
                  ug: Ho,
                  zb: zo,
                  Bd: Yo,
                  Ab: Go,
                  Lc: function (e, t, i, r, s) {
                    ga.vertexAttribI4i(e, t, i, r, s);
                  },
                  Jc: function (e, t) {
                    ga.vertexAttribI4i(
                      e,
                      T[t >> 2],
                      T[(t + 4) >> 2],
                      T[(t + 8) >> 2],
                      T[(t + 12) >> 2]
                    );
                  },
                  Kc: function (e, t, i, r, s) {
                    ga.vertexAttribI4ui(e, t, i, r, s);
                  },
                  Ic: function (e, t) {
                    ga.vertexAttribI4ui(
                      e,
                      E[t >> 2],
                      E[(t + 4) >> 2],
                      E[(t + 8) >> 2],
                      E[(t + 12) >> 2]
                    );
                  },
                  Oc: function (e, t, i, r, s) {
                    ga.vertexAttribIPointer(e, t, i, r, s);
                  },
                  Dd: jo,
                  Cd: Uo,
                  ec: function (e, t, i, r) {
                    var s = $i(i, r);
                    ga.waitSync(ei.syncs[e], t, s);
                  },
                  L: function () {
                    return 0;
                  },
                  Tg: function () {
                    return !p;
                  },
                  Vg: function (e, t, i) {
                    return (function (e, t) {
                      return si.fullscreenEnabled()
                        ? (e = li(e))
                          ? e.requestFullscreen || e.webkitRequestFullscreen
                            ? si.canPerformEventHandlerRequests()
                              ? fi(e, t)
                              : t.deferUntilInEventHandler
                              ? (si.deferCall(fi, 1, [e, t]), 1)
                              : -2
                            : -3
                          : -4
                        : -1;
                    })(e, {
                      scaleMode: T[i >> 2],
                      canvasResolutionScaleMode: T[(i + 4) >> 2],
                      filteringMode: T[(i + 8) >> 2],
                      deferUntilInEventHandler: t,
                      canvasResizedCallback: T[(i + 12) >> 2],
                      canvasResizedCallbackUserData: T[(i + 16) >> 2],
                    });
                  },
                  Ka: function (e, t) {
                    return (e = li(e))
                      ? e.requestPointerLock
                        ? si.canPerformEventHandlerRequests()
                          ? vi(e)
                          : t
                          ? (si.deferCall(vi, 2, [e]), 1)
                          : -2
                        : -1
                      : -4;
                  },
                  jb: function (e) {
                    var t = x.length,
                      i = 2147483648;
                    if ((e >>>= 0) > i) return !1;
                    for (var r, s = 1; s <= 4; s *= 2) {
                      var o = t * (1 + 0.2 / s);
                      if (
                        ((o = Math.min(o, e + 100663296)),
                        $o(
                          Math.min(
                            i,
                            (r = Math.max(e, o)) +
                              ((65536 - (r % 65536)) % 65536)
                          )
                        ))
                      )
                        return !0;
                    }
                    return !1;
                  },
                  X: function () {
                    return (si.lastGamepadState = navigator.getGamepads
                      ? navigator.getGamepads()
                      : navigator.webkitGetGamepads
                      ? navigator.webkitGetGamepads()
                      : null)
                      ? 0
                      : -1;
                  },
                  qa: function (e, t, i) {
                    return "undefined" == typeof onbeforeunload
                      ? -1
                      : 1 !== i
                      ? -5
                      : (function (e, t, i, r, s, o) {
                          var a = {
                            target: li(2),
                            eventTypeString: "beforeunload",
                            callbackfunc: r,
                            handlerFunc: function (e = event) {
                              var i = re(r)(28, 0, t);
                              if ((i && (i = Ce(i)), i))
                                return (
                                  e.preventDefault(), (e.returnValue = i), i
                                );
                            },
                            useCapture: !0,
                          };
                          return si.registerOrRemoveHandler(a);
                        })(0, e, 0, t);
                  },
                  Ca: function (e, t, i, r, s) {
                    return qo(e, t, i, r, 12, "blur");
                  },
                  A: ci,
                  T: function (e, t, i) {
                    return (e = li(e))
                      ? ((e.style.width = t + "px"),
                        (e.style.height = i + "px"),
                        0)
                      : -4;
                  },
                  Da: function (e, t, i, r, s) {
                    return qo(e, t, i, r, 13, "focus");
                  },
                  ta: function (e, t, i, r, s) {
                    return si.fullscreenEnabled()
                      ? (e = li(e))
                        ? (Ko(e, t, i, r, 19, "webkitfullscreenchange"),
                          Ko(e, t, i, r, 19, "fullscreenchange"))
                        : -4
                      : -1;
                  },
                  V: function (e, t, i, r) {
                    return navigator.getGamepads || navigator.webkitGetGamepads
                      ? Zo(2, e, t, i, 26, "gamepadconnected")
                      : -1;
                  },
                  U: function (e, t, i, r) {
                    return navigator.getGamepads || navigator.webkitGetGamepads
                      ? Zo(2, e, t, i, 27, "gamepaddisconnected")
                      : -1;
                  },
                  wa: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 2, "keydown");
                  },
                  ua: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 1, "keypress");
                  },
                  va: function (e, t, i, r, s) {
                    return Jo(e, t, i, r, 3, "keyup");
                  },
                  Ua: function (e, t, i) {
                    Wt(re(e), t, i);
                  },
                  Ia: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 5, "mousedown");
                  },
                  Ga: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 33, "mouseenter");
                  },
                  Fa: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 34, "mouseleave");
                  },
                  Ja: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 8, "mousemove");
                  },
                  Ha: function (e, t, i, r, s) {
                    return ea(e, t, i, r, 6, "mouseup");
                  },
                  xa: function (e, t, i, r, s) {
                    return document &&
                      document.body &&
                      (document.body.requestPointerLock ||
                        document.body.mozRequestPointerLock ||
                        document.body.webkitRequestPointerLock ||
                        document.body.msRequestPointerLock)
                      ? (e = li(e))
                        ? (ta(e, t, i, r, 20, "mozpointerlockchange"),
                          ta(e, t, i, r, 20, "webkitpointerlockchange"),
                          ta(e, t, i, r, 20, "mspointerlockchange"),
                          ta(e, t, i, r, 20, "pointerlockchange"))
                        : -4
                      : -1;
                  },
                  sa: function (e, t, i, r, s) {
                    return (function (e, t, i, r, s, o, a) {
                      si.uiEvent || (si.uiEvent = xa(36));
                      var n = {
                        target: (e = li(e)),
                        eventTypeString: "resize",
                        callbackfunc: r,
                        handlerFunc: function (i = event) {
                          if (i.target == e) {
                            var s = document.body;
                            if (s) {
                              var o = si.uiEvent;
                              (T[o >> 2] = i.detail),
                                (T[(o + 4) >> 2] = s.clientWidth),
                                (T[(o + 8) >> 2] = s.clientHeight),
                                (T[(o + 12) >> 2] = innerWidth),
                                (T[(o + 16) >> 2] = innerHeight),
                                (T[(o + 20) >> 2] = outerWidth),
                                (T[(o + 24) >> 2] = outerHeight),
                                (T[(o + 28) >> 2] = pageXOffset),
                                (T[(o + 32) >> 2] = pageYOffset),
                                re(r)(10, o, t) && i.preventDefault();
                            }
                          }
                        },
                        useCapture: i,
                      };
                      return si.registerOrRemoveHandler(n);
                    })(e, t, i, r);
                  },
                  ya: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 25, "touchcancel");
                  },
                  Aa: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 23, "touchend");
                  },
                  za: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 24, "touchmove");
                  },
                  Ba: function (e, t, i, r, s) {
                    return ia(e, t, i, r, 22, "touchstart");
                  },
                  ra: function (e, t, i, r) {
                    return (function (e, t, i, r, s, o, a) {
                      si.visibilityChangeEvent ||
                        (si.visibilityChangeEvent = xa(8));
                      var n = {
                        target: e,
                        eventTypeString: o,
                        callbackfunc: r,
                        handlerFunc: function (e = event) {
                          var i,
                            o,
                            a = si.visibilityChangeEvent;
                          (i = a),
                            (o = [
                              "hidden",
                              "visible",
                              "prerender",
                              "unloaded",
                            ].indexOf(document.visibilityState)),
                            (T[i >> 2] = document.hidden),
                            (T[(i + 4) >> 2] = o),
                            re(r)(s, a, t) && e.preventDefault();
                        },
                        useCapture: i,
                      };
                      return si.registerOrRemoveHandler(n);
                    })(ni[1], e, t, i, 21, "visibilitychange");
                  },
                  Ea: function (e, t, i, r, s) {
                    return (e = li(e))
                      ? void 0 !== e.onwheel
                        ? (function (e, t, i, r, s, o, a) {
                            si.wheelEvent || (si.wheelEvent = xa(104));
                            var n = {
                              target: e,
                              allowsDeferredCalls: !0,
                              eventTypeString: "wheel",
                              callbackfunc: r,
                              handlerFunc: function (i = event) {
                                var s = si.wheelEvent;
                                Qo(s, i, e),
                                  (w[(s + 72) >> 3] = i.deltaX),
                                  (w[(s + 80) >> 3] = i.deltaY),
                                  (w[(s + 88) >> 3] = i.deltaZ),
                                  (T[(s + 96) >> 2] = i.deltaMode),
                                  re(r)(9, s, t) && i.preventDefault();
                              },
                              useCapture: i,
                            };
                            return si.registerOrRemoveHandler(n);
                          })(e, t, i, r)
                        : -1
                      : -4;
                  },
                  Wg: function (e) {
                    n(Ce(e));
                  },
                  K: function () {
                    throw "Please compile your program with async support in order to use asynchronous operations like emscripten_sleep";
                  },
                  Sg: function (e, t, i, r, s) {
                    var o = e + 112,
                      a = E[(o + 36) >> 2],
                      n = E[(o + 40) >> 2],
                      l = E[(o + 44) >> 2],
                      d = E[(o + 48) >> 2],
                      h = E[(o + 52) >> 2],
                      u = !!(64 & h);
                    function c(e) {
                      u ? e() : Kt(e);
                    }
                    var p = (e, i, r) => {
                        c(() => {
                          a ? re(a)(e) : t && t(e);
                        });
                      },
                      g = (e, t, i) => {
                        c(() => {
                          l ? re(l)(e) : r && r(e);
                        });
                      },
                      y = (e, t, r) => {
                        c(() => {
                          n ? re(n)(e) : i && i(e);
                        });
                      },
                      f = (e, t, i) => {
                        c(() => {
                          d ? re(d)(e) : s && s(e);
                        });
                      },
                      v = (e, i, r) => {
                        oa(
                          ra.dbInstance,
                          e,
                          i.response,
                          (e, i, r) => {
                            c(() => {
                              a ? re(a)(e) : t && t(e);
                            });
                          },
                          (e, i, r) => {
                            c(() => {
                              a ? re(a)(e) : t && t(e);
                            });
                          }
                        );
                      },
                      m = Ce(o + 0),
                      S = !!(16 & h),
                      P = !!(4 & h),
                      C = !!(32 & h);
                    if ("EM_IDB_STORE" === m) {
                      var b = E[(o + 84) >> 2],
                        T = E[(o + 88) >> 2];
                      oa(ra.dbInstance, e, x.slice(b, b + T), p, y);
                    } else if ("EM_IDB_DELETE" === m)
                      !(function (e, t, i, r) {
                        if (e) {
                          var s = E[(t + 112 + 64) >> 2];
                          s || (s = E[(t + 8) >> 2]);
                          var o = Ce(s);
                          try {
                            var a = e
                              .transaction(["FILES"], "readwrite")
                              .objectStore("FILES")
                              .delete(o);
                            (a.onsuccess = (e) => {
                              var r = e.target.result;
                              (E[(t + 12) >> 2] = 0),
                                xs(t + 16, 0),
                                xs(t + 24, 0),
                                xs(t + 32, 0),
                                (A[(t + 40) >> 1] = 4),
                                (A[(t + 42) >> 1] = 200),
                                wt("OK", t + 44, 64),
                                i(t, 0, r);
                            }),
                              (a.onerror = (e) => {
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, e);
                              });
                          } catch (e) {
                            r(t, 0, e);
                          }
                        } else r(t, 0, "IndexedDB not available!");
                      })(ra.dbInstance, e, p, y);
                    else if (S) {
                      if (C) return 0;
                      sa(e, P ? v : p, y, g, f);
                    } else
                      !(function (e, t, i, r) {
                        if (e) {
                          var s = E[(t + 112 + 64) >> 2];
                          s || (s = E[(t + 8) >> 2]);
                          var o = Ce(s);
                          try {
                            var a = e
                              .transaction(["FILES"], "readonly")
                              .objectStore("FILES")
                              .get(o);
                            (a.onsuccess = (e) => {
                              if (e.target.result) {
                                var s = e.target.result,
                                  o = s.byteLength || s.length,
                                  a = xa(o);
                                x.set(new Uint8Array(s), a),
                                  (E[(t + 12) >> 2] = a),
                                  xs(t + 16, o),
                                  xs(t + 24, 0),
                                  xs(t + 32, o),
                                  (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 200),
                                  wt("OK", t + 44, 64),
                                  i(t, 0, s);
                              } else
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, "no data");
                            }),
                              (a.onerror = (e) => {
                                (A[(t + 40) >> 1] = 4),
                                  (A[(t + 42) >> 1] = 404),
                                  wt("Not Found", t + 44, 64),
                                  r(t, 0, e);
                              });
                          } catch (e) {
                            r(t, 0, e);
                          }
                        } else r(t, 0, "IndexedDB not available!");
                      })(
                        ra.dbInstance,
                        e,
                        p,
                        C
                          ? y
                          : P
                          ? (e, t, i) => {
                              sa(e, v, y, g, f);
                            }
                          : (e, t, i) => {
                              sa(e, p, y, g, f);
                            }
                      );
                    return e;
                  },
                  mb: function (e, t) {
                    var i = 0;
                    return (
                      na().forEach(function (r, s) {
                        var o = t + i;
                        (E[(e + 4 * s) >> 2] = o),
                          (function (e, t) {
                            for (var i = 0; i < e.length; ++i)
                              C[t++ >> 0] = e.charCodeAt(i);
                            C[t >> 0] = 0;
                          })(r, o),
                          (i += r.length + 1);
                      }),
                      0
                    );
                  },
                  ob: function (e, t) {
                    var i = na();
                    E[e >> 2] = i.length;
                    var r = 0;
                    return (
                      i.forEach(function (e) {
                        r += e.length + 1;
                      }),
                      (E[t >> 2] = r),
                      0
                    );
                  },
                  ia: function (e) {
                    try {
                      var t = xe.getStreamFromFD(e);
                      return Pe.close(t), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  qb: function (e, t, i, r) {
                    try {
                      var s = (function (e, t, i, r) {
                        for (var s = 0, o = 0; o < i; o++) {
                          var a = E[t >> 2],
                            n = E[(t + 4) >> 2];
                          t += 8;
                          var l = Pe.read(e, C, a, n, r);
                          if (l < 0) return -1;
                          if (((s += l), l < n)) break;
                          void 0 !== r && (r += l);
                        }
                        return s;
                      })(xe.getStreamFromFD(e), t, i);
                      return (E[r >> 2] = s), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  fb: function (e, t, i, r, s) {
                    try {
                      var o =
                        ((l = i) + 2097152) >>> 0 < 4194305 - !!(n = t)
                          ? (n >>> 0) + 4294967296 * l
                          : NaN;
                      if (isNaN(o)) return 61;
                      var a = xe.getStreamFromFD(e);
                      return (
                        Pe.llseek(a, o, r),
                        (q = [
                          a.position >>> 0,
                          (($ = a.position),
                          +Math.abs($) >= 1
                            ? $ > 0
                              ? +Math.floor($ / 4294967296) >>> 0
                              : ~~+Math.ceil(
                                  ($ - +(~~$ >>> 0)) / 4294967296
                                ) >>> 0
                            : 0),
                        ]),
                        (T[s >> 2] = q[0]),
                        (T[(s + 4) >> 2] = q[1]),
                        a.getdents && 0 === o && 0 === r && (a.getdents = null),
                        0
                      );
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                    var n, l;
                  },
                  ga: function (e, t, i, r) {
                    try {
                      var s = (function (e, t, i, r) {
                        for (var s = 0, o = 0; o < i; o++) {
                          var a = E[t >> 2],
                            n = E[(t + 4) >> 2];
                          t += 8;
                          var l = Pe.write(e, C, a, n, r);
                          if (l < 0) return -1;
                          (s += l), void 0 !== r && (r += l);
                        }
                        return s;
                      })(xe.getStreamFromFD(e), t, i);
                      return (E[r >> 2] = s), 0;
                    } catch (e) {
                      if (void 0 === Pe || "ErrnoError" !== e.name) throw e;
                      return e.errno;
                    }
                  },
                  Oa: function () {
                    var e = "";
                    "undefined" != typeof window
                      ? (e = window.location.hostname)
                      : "undefined" != typeof process && (e = "node");
                    var t = he(e) + 1,
                      i = xa(t);
                    return wt(e, i, t), i;
                  },
                  _a: Si,
                  ja: Ci,
                  l: bi,
                  n: Ti,
                  s: Ri,
                  p: Di,
                  fe: ki,
                  Wd: Vi,
                  qe: Fi,
                  N: Hi,
                  aa: Yi,
                  qg: Xi,
                  Bg: Wi,
                  pd: qi,
                  Xa: Zi,
                  J: Qi,
                  Cc: tr,
                  Za: rr,
                  sf: or,
                  E: nr,
                  Xg: dr,
                  la: ur,
                  pa: pr,
                  da: yr,
                  Va: vr,
                  Be: xr,
                  Me: Ar,
                  ma: Er,
                  H: wr,
                  $: Lr,
                  M: Gr,
                  Pa: jr,
                  G: Zr,
                  Sa: Qr,
                  P: ts,
                  gf: rs,
                  O: as,
                  ba: ls,
                  D: hs,
                  Yg: ys,
                  eb: ms,
                  ub: Ps,
                  q: Ts,
                  Eb: Rs,
                  F: Ds,
                  Wa: Ns,
                  ca: Bs,
                  v: zs,
                  nb: js,
                  Xe: io,
                  Zb: so,
                  Ta: ao,
                  Ld: co,
                  Ad: go,
                  Ya: fo,
                  o: mo,
                  h: Po,
                  db: bo,
                  $a: To,
                  cb: wo,
                  bb: Lo,
                  fa: Io,
                  ea: ko,
                  ka: Vo,
                  Qa: Fo,
                  Ra: Xo,
                  I: Wo,
                  ph: function (e, t, i) {
                    var r = wa();
                    try {
                      return re(e)(t, i);
                    } catch (e) {
                      if ((Da(r), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  qh: function (e, t, i, r) {
                    var s = wa();
                    try {
                      return re(e)(t, i, r);
                    } catch (e) {
                      if ((Da(s), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  Xf: function (e, t, i, r, s) {
                    var o = wa();
                    try {
                      return re(e)(t, i, r, s);
                    } catch (e) {
                      if ((Da(o), e !== e + 0)) throw e;
                      Ra(1, 0);
                    }
                  },
                  hb: function (e, t, i, r, s) {
                    return (function (e, t, i, r) {
                      var s = T[(r + 40) >> 2],
                        o = {
                          tm_sec: T[r >> 2],
                          tm_min: T[(r + 4) >> 2],
                          tm_hour: T[(r + 8) >> 2],
                          tm_mday: T[(r + 12) >> 2],
                          tm_mon: T[(r + 16) >> 2],
                          tm_year: T[(r + 20) >> 2],
                          tm_wday: T[(r + 24) >> 2],
                          tm_yday: T[(r + 28) >> 2],
                          tm_isdst: T[(r + 32) >> 2],
                          tm_gmtoff: T[(r + 36) >> 2],
                          tm_zone: s ? Ce(s) : "",
                        },
                        a = Ce(i),
                        n = {
                          "%c": "%a %b %d %H:%M:%S %Y",
                          "%D": "%m/%d/%y",
                          "%F": "%Y-%m-%d",
                          "%h": "%b",
                          "%r": "%I:%M:%S %p",
                          "%R": "%H:%M",
                          "%T": "%H:%M:%S",
                          "%x": "%m/%d/%y",
                          "%X": "%H:%M:%S",
                          "%Ec": "%c",
                          "%EC": "%C",
                          "%Ex": "%m/%d/%y",
                          "%EX": "%H:%M:%S",
                          "%Ey": "%y",
                          "%EY": "%Y",
                          "%Od": "%d",
                          "%Oe": "%e",
                          "%OH": "%H",
                          "%OI": "%I",
                          "%Om": "%m",
                          "%OM": "%M",
                          "%OS": "%S",
                          "%Ou": "%u",
                          "%OU": "%U",
                          "%OV": "%V",
                          "%Ow": "%w",
                          "%OW": "%W",
                          "%Oy": "%y",
                        };
                      for (var l in n) a = a.replace(new RegExp(l, "g"), n[l]);
                      var d = [
                          "Sunday",
                          "Monday",
                          "Tuesday",
                          "Wednesday",
                          "Thursday",
                          "Friday",
                          "Saturday",
                        ],
                        h = [
                          "January",
                          "February",
                          "March",
                          "April",
                          "May",
                          "June",
                          "July",
                          "August",
                          "September",
                          "October",
                          "November",
                          "December",
                        ];
                      function u(e, t, i) {
                        for (
                          var r = "number" == typeof e ? e.toString() : e || "";
                          r.length < t;

                        )
                          r = i[0] + r;
                        return r;
                      }
                      function c(e, t) {
                        return u(e, t, "0");
                      }
                      function p(e, t) {
                        function i(e) {
                          return e < 0 ? -1 : e > 0 ? 1 : 0;
                        }
                        var r;
                        return (
                          0 === (r = i(e.getFullYear() - t.getFullYear())) &&
                            0 === (r = i(e.getMonth() - t.getMonth())) &&
                            (r = i(e.getDate() - t.getDate())),
                          r
                        );
                      }
                      function g(e) {
                        switch (e.getDay()) {
                          case 0:
                            return new Date(e.getFullYear() - 1, 11, 29);
                          case 1:
                            return e;
                          case 2:
                            return new Date(e.getFullYear(), 0, 3);
                          case 3:
                            return new Date(e.getFullYear(), 0, 2);
                          case 4:
                            return new Date(e.getFullYear(), 0, 1);
                          case 5:
                            return new Date(e.getFullYear() - 1, 11, 31);
                          case 6:
                            return new Date(e.getFullYear() - 1, 11, 30);
                        }
                      }
                      function y(e) {
                        var t = (function (e, t) {
                            for (var i = new Date(e.getTime()); t > 0; ) {
                              var r = Ht(i.getFullYear()),
                                s = i.getMonth(),
                                o = (r ? la : da)[s];
                              if (!(t > o - i.getDate()))
                                return i.setDate(i.getDate() + t), i;
                              (t -= o - i.getDate() + 1),
                                i.setDate(1),
                                s < 11
                                  ? i.setMonth(s + 1)
                                  : (i.setMonth(0),
                                    i.setFullYear(i.getFullYear() + 1));
                            }
                            return i;
                          })(new Date(e.tm_year + 1900, 0, 1), e.tm_yday),
                          i = new Date(t.getFullYear(), 0, 4),
                          r = new Date(t.getFullYear() + 1, 0, 4),
                          s = g(i),
                          o = g(r);
                        return p(s, t) <= 0
                          ? p(o, t) <= 0
                            ? t.getFullYear() + 1
                            : t.getFullYear()
                          : t.getFullYear() - 1;
                      }
                      var f = {
                        "%a": function (e) {
                          return d[e.tm_wday].substring(0, 3);
                        },
                        "%A": function (e) {
                          return d[e.tm_wday];
                        },
                        "%b": function (e) {
                          return h[e.tm_mon].substring(0, 3);
                        },
                        "%B": function (e) {
                          return h[e.tm_mon];
                        },
                        "%C": function (e) {
                          return c(((e.tm_year + 1900) / 100) | 0, 2);
                        },
                        "%d": function (e) {
                          return c(e.tm_mday, 2);
                        },
                        "%e": function (e) {
                          return u(e.tm_mday, 2, " ");
                        },
                        "%g": function (e) {
                          return y(e).toString().substring(2);
                        },
                        "%G": function (e) {
                          return y(e);
                        },
                        "%H": function (e) {
                          return c(e.tm_hour, 2);
                        },
                        "%I": function (e) {
                          var t = e.tm_hour;
                          return (
                            0 == t ? (t = 12) : t > 12 && (t -= 12), c(t, 2)
                          );
                        },
                        "%j": function (e) {
                          return c(
                            e.tm_mday +
                              (function (e, t) {
                                for (var i = 0, r = 0; r <= t; i += e[r++]);
                                return i;
                              })(Ht(e.tm_year + 1900) ? la : da, e.tm_mon - 1),
                            3
                          );
                        },
                        "%m": function (e) {
                          return c(e.tm_mon + 1, 2);
                        },
                        "%M": function (e) {
                          return c(e.tm_min, 2);
                        },
                        "%n": function () {
                          return "\n";
                        },
                        "%p": function (e) {
                          return e.tm_hour >= 0 && e.tm_hour < 12 ? "AM" : "PM";
                        },
                        "%S": function (e) {
                          return c(e.tm_sec, 2);
                        },
                        "%t": function () {
                          return "\t";
                        },
                        "%u": function (e) {
                          return e.tm_wday || 7;
                        },
                        "%U": function (e) {
                          var t = e.tm_yday + 7 - e.tm_wday;
                          return c(Math.floor(t / 7), 2);
                        },
                        "%V": function (e) {
                          var t = Math.floor(
                            (e.tm_yday + 7 - ((e.tm_wday + 6) % 7)) / 7
                          );
                          if (
                            ((e.tm_wday + 371 - e.tm_yday - 2) % 7 <= 2 && t++,
                            t)
                          ) {
                            if (53 == t) {
                              var i = (e.tm_wday + 371 - e.tm_yday) % 7;
                              4 == i || (3 == i && Ht(e.tm_year)) || (t = 1);
                            }
                          } else {
                            t = 52;
                            var r = (e.tm_wday + 7 - e.tm_yday - 1) % 7;
                            (4 == r || (5 == r && Ht((e.tm_year % 400) - 1))) &&
                              t++;
                          }
                          return c(t, 2);
                        },
                        "%w": function (e) {
                          return e.tm_wday;
                        },
                        "%W": function (e) {
                          var t = e.tm_yday + 7 - ((e.tm_wday + 6) % 7);
                          return c(Math.floor(t / 7), 2);
                        },
                        "%y": function (e) {
                          return (e.tm_year + 1900).toString().substring(2);
                        },
                        "%Y": function (e) {
                          return e.tm_year + 1900;
                        },
                        "%z": function (e) {
                          var t = e.tm_gmtoff,
                            i = t >= 0;
                          return (
                            (t =
                              ((t = Math.abs(t) / 60) / 60) * 100 + (t % 60)),
                            (i ? "+" : "-") + String("0000" + t).slice(-4)
                          );
                        },
                        "%Z": function (e) {
                          return e.tm_zone;
                        },
                        "%%": function () {
                          return "%";
                        },
                      };
                      for (var l in ((a = a.replace(/%%/g, "\0\0")), f))
                        a.includes(l) &&
                          (a = a.replace(new RegExp(l, "g"), f[l](o)));
                      var v = ce((a = a.replace(/\0\0/g, "%")), !1);
                      return v.length > t ? 0 : (ha(v, e), v.length - 1);
                    })(e, t, i, r);
                  },
                },
                xa =
                  ((function () {
                    var t,
                      i,
                      s,
                      o,
                      a = { a: Ca };
                    function n(t, i) {
                      var r,
                        s = t.exports;
                      return (
                        (e.asm = s),
                        (m = e.asm.rh),
                        I(),
                        (D = e.asm.wh),
                        (r = e.asm.sh),
                        k.unshift(r),
                        X(),
                        s
                      );
                    }
                    if ((G(), e.instantiateWasm))
                      try {
                        return e.instantiateWasm(a, n);
                      } catch (e) {
                        v(
                          "Module.instantiateWasm callback failed with error: " +
                            e
                        ),
                          r(e);
                      }
                    ((t = y),
                    (i = W),
                    (s = a),
                    (o = function (e) {
                      n(e.instance);
                    }),
                    t ||
                    "function" != typeof WebAssembly.instantiateStreaming ||
                    Z(i) ||
                    "function" != typeof fetch
                      ? Q(i, s, o)
                      : fetch(i, { credentials: "same-origin" }).then((e) =>
                          WebAssembly.instantiateStreaming(e, s).then(
                            o,
                            function (e) {
                              return (
                                v("wasm streaming compile failed: " + e),
                                v("falling back to ArrayBuffer instantiation"),
                                Q(i, s, o)
                              );
                            }
                          )
                        )).catch(r);
                  })(),
                  (e._malloc = function () {
                    return (xa = e._malloc = e.asm.th).apply(null, arguments);
                  })),
                ba = (e._free = function () {
                  return (ba = e._free = e.asm.uh).apply(null, arguments);
                }),
                Aa = function () {
                  return (Aa = e.asm.vh).apply(null, arguments);
                },
                Ta =
                  ((e._SCRTFillActiveTextureCharArray = function () {
                    return (e._SCRTFillActiveTextureCharArray = e.asm.xh).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._main = function () {
                    return (Ta = e._main = e.asm.yh).apply(null, arguments);
                  })),
                Ea = function () {
                  return (Ea = e.asm.zh).apply(null, arguments);
                },
                Ra =
                  ((e.__embind_initialize_bindings = function () {
                    return (e.__embind_initialize_bindings = e.asm.Ah).apply(
                      null,
                      arguments
                    );
                  }),
                  (e._setThrew = function () {
                    return (Ra = e._setThrew = e.asm.Bh).apply(null, arguments);
                  })),
                wa = function () {
                  return (wa = e.asm.Ch).apply(null, arguments);
                },
                Da = function () {
                  return (Da = e.asm.Dh).apply(null, arguments);
                },
                La = function () {
                  return (La = e.asm.Eh).apply(null, arguments);
                },
                Ma = function () {
                  return (Ma = e.asm.Fh).apply(null, arguments);
                };
              function Ia(e = []) {
                var t = Ta;
                e.unshift(h);
                var i = e.length,
                  r = La(4 * (i + 1)),
                  s = r >> 2;
                e.forEach((e) => {
                  T[s++] = hi(e);
                }),
                  (T[s] = 0);
                try {
                  var o = t(i, r);
                  return $t(o), o;
                } catch (e) {
                  return Ut(e);
                }
              }
              function Oa(t = d) {
                function r() {
                  Pa ||
                    ((Pa = !0),
                    (e.calledRun = !0),
                    L ||
                      (e.noFSInit || Pe.init.initialized || Pe.init(),
                      (Pe.ignorePermissions = !1),
                      ye.init(),
                      ie(k),
                      ie(_),
                      i(e),
                      e.onRuntimeInitialized && e.onRuntimeInitialized(),
                      ka && Ia(t),
                      (function () {
                        if (e.postRun)
                          for (
                            "function" == typeof e.postRun &&
                            (e.postRun = [e.postRun]);
                            e.postRun.length;

                          )
                            (t = e.postRun.shift()), N.unshift(t);
                        var t;
                        ie(N);
                      })()));
                }
                H > 0 ||
                  ((function () {
                    if (e.preRun)
                      for (
                        "function" == typeof e.preRun &&
                        (e.preRun = [e.preRun]);
                        e.preRun.length;

                      )
                        (t = e.preRun.shift()), O.unshift(t);
                    var t;
                    ie(O);
                  })(),
                  H > 0 ||
                    (e.setStatus
                      ? (e.setStatus("Running..."),
                        setTimeout(function () {
                          setTimeout(function () {
                            e.setStatus("");
                          }, 1),
                            r();
                        }, 1))
                      : r()));
              }
              if (
                ((e.dynCall_iiiji = function () {
                  return (e.dynCall_iiiji = e.asm.Gh).apply(null, arguments);
                }),
                (e.dynCall_iiij = function () {
                  return (e.dynCall_iiij = e.asm.Hh).apply(null, arguments);
                }),
                (e.dynCall_iijii = function () {
                  return (e.dynCall_iijii = e.asm.Ih).apply(null, arguments);
                }),
                (e.dynCall_iiijiji = function () {
                  return (e.dynCall_iiijiji = e.asm.Jh).apply(null, arguments);
                }),
                (e.dynCall_vij = function () {
                  return (e.dynCall_vij = e.asm.Kh).apply(null, arguments);
                }),
                (e.dynCall_jiji = function () {
                  return (e.dynCall_jiji = e.asm.Lh).apply(null, arguments);
                }),
                (e.dynCall_ji = function () {
                  return (e.dynCall_ji = e.asm.Mh).apply(null, arguments);
                }),
                (e.dynCall_viijii = function () {
                  return (e.dynCall_viijii = e.asm.Nh).apply(null, arguments);
                }),
                (e.dynCall_iiiiij = function () {
                  return (e.dynCall_iiiiij = e.asm.Oh).apply(null, arguments);
                }),
                (e.dynCall_iiiiijj = function () {
                  return (e.dynCall_iiiiijj = e.asm.Ph).apply(null, arguments);
                }),
                (e.dynCall_iiiiiijj = function () {
                  return (e.dynCall_iiiiiijj = e.asm.Qh).apply(null, arguments);
                }),
                (e.___start_em_js = 366177),
                (e.___stop_em_js = 366745),
                (e.addRunDependency = G),
                (e.removeRunDependency = X),
                (e.FS_createPath = Pe.createPath),
                (e.FS_createDataFile = Pe.createDataFile),
                (e.FS_createLazyFile = Pe.createLazyFile),
                (e.FS_createDevice = Pe.createDevice),
                (e.FS_unlink = Pe.unlink),
                (e.callMain = Ia),
                (e.ccall = ca),
                (e.cwrap = function (e, t, i, r) {
                  var s =
                    !i || i.every((e) => "number" === e || "boolean" === e);
                  return "string" !== t && s && !r
                    ? ua(e)
                    : function () {
                        return ca(e, t, i, arguments);
                      };
                }),
                (e.UTF8ToString = Ce),
                (e.stringToUTF8 = wt),
                (e.lengthBytesUTF8 = he),
                (e.FS_createPreloadedFile = Pe.createPreloadedFile),
                (Y = function e() {
                  Pa || Oa(), Pa || (Y = e);
                }),
                e.preInit)
              )
                for (
                  "function" == typeof e.preInit && (e.preInit = [e.preInit]);
                  e.preInit.length > 0;

                )
                  e.preInit.pop()();
              var ka = !0;
              return (
                e.noInitialRun && (ka = !1),
                Oa(),
                ei &&
                  (ei.getNewId = function (e) {
                    ei.counter++;
                    var t = e.length;
                    if (0 === t) return 1;
                    for (var i = 1; i < t; ++i) if (null === e[i]) return i;
                    return t;
                  }),
                e.ready
              );
            });
        e.exports = i;
      },
    },
    t = {};
  function i(r) {
    var s = t[r];
    if (void 0 !== s) return s.exports;
    var o = (t[r] = { exports: {} });
    return e[r].call(o.exports, o, o.exports, i), o.exports;
  }
  var r = {};
  (() => {
    "use strict";
    var e = r;
    const t = i(71993),
      s = i(25924),
      o = i(44544),
      a = i(96841),
      n = i(12193),
      l = i(64931),
      d = i(64931),
      h = i(64931),
      u = i(58996),
      c = i(58996),
      p = i(58996),
      g = i(58996),
      y = i(58996),
      f = i(45921),
      v = i(45921),
      m = i(45921),
      S = i(45921),
      P = i(45921),
      C = i(45921),
      x = i(49975),
      b = i(13063),
      A = i(89046),
      T = i(89046),
      E = i(89046),
      R = i(62773),
      w = i(62773),
      D = i(62773),
      L = i(42639),
      M = i(36534),
      I = i(897),
      O = i(71575),
      k = i(71575),
      _ = i(9656),
      V = i(14290),
      N = i(39299),
      F = i(56985),
      B = i(56985),
      H = i(55526),
      z = i(21562),
      Y = i(63903),
      G = i(18809),
      X = i(18809),
      j = i(32545),
      W = i(96408),
      U = i(9809),
      $ = i(3397),
      q = i(63407),
      K = i(64171),
      Z = i(93113),
      J = i(51269),
      Q = i(51269),
      ee = i(51269),
      te = i(21915),
      ie = i(21915),
      re = i(21915),
      se = i(53831),
      oe = i(33512),
      ae = i(55444),
      ne = i(16185),
      le = i(16185),
      de = i(16185),
      he = i(5100),
      ue = i(5100),
      ce = i(5100),
      pe = i(5100),
      ge = i(5100),
      ye = i(5100),
      fe = i(5100),
      ve = i(5100),
      me = i(5100),
      Se = i(5100),
      Pe = i(5100),
      Ce = i(5100),
      xe = i(5100),
      be = i(60872),
      Ae = i(53521),
      Te = i(57384),
      Ee = i(70397),
      Re = i(41344),
      we = i(45481),
      De = i(83638),
      Le = i(6153),
      Me = i(55173),
      Ie = i(24478),
      Oe = i(27282),
      ke = i(12119),
      _e = i(66086),
      Ve = i(78499),
      Ne = i(8959),
      Fe = i(27194),
      Be = i(73145),
      He = i(55696),
      ze = i(24933),
      Ye = i(75619),
      Ge = i(84366),
      Xe = i(84366),
      je = i(22382),
      We = i(51885),
      Ue = i(51885),
      $e = i(51885),
      qe = i(32747),
      Ke = i(32747),
      Ze = i(32747),
      Je = i(33906),
      Qe = i(43427),
      et = i(35471),
      tt = i(52881),
      it = i(15799),
      rt = i(9682),
      st = i(29803),
      ot = i(75650),
      at = i(35508),
      nt = i(14883),
      lt = i(84754),
      dt = i(97041),
      ht = i(32025),
      ut = i(75662),
      ct = i(50874),
      pt = i(21780),
      gt = i(19581),
      yt = i(33435),
      ft = i(37947),
      vt = i(58465),
      mt = i(12954),
      St = i(73165),
      Pt = i(65936),
      Ct = i(95079),
      xt = i(95079),
      bt = i(26974),
      At = i(95632),
      Tt = i(55007),
      Et = i(39892),
      Rt = i(42790),
      wt = i(91154),
      Dt = i(86241),
      Lt = i(92475),
      Mt = i(33070),
      It = i(89236),
      Ot = i(65052),
      kt = i(6328),
      _t = i(58564),
      Vt = i(88915),
      Nt = i(14023),
      Ft = i(2354),
      Bt = i(62507),
      Ht = i(48804),
      zt = i(25762),
      Yt = i(33166),
      Gt = i(46650),
      Xt = i(40194),
      jt = i(78644),
      Wt = i(33240),
      Ut = i(97742),
      $t = i(65707),
      qt = i(22019),
      Kt = i(98172),
      Zt = i(98172),
      Jt = i(98172),
      Qt = i(3346),
      ei = i(3434),
      ti = i(48570),
      ii = i(648),
      ri = i(17611),
      si = i(23059),
      oi = i(24156),
      ai = i(24156),
      ni = i(84392),
      li = i(84392),
      di = i(99016),
      hi = i(2705),
      ui = i(60819),
      ci = i(66010),
      pi = i(23447),
      gi = i(23447),
      yi = i(31858),
      fi = i(2056),
      vi = i(66570),
      mi = i(85479),
      Si = i(36544),
      Pi = i(84626),
      Ci = i(84626),
      xi = i(84626),
      bi = i(14184),
      Ai = i(14184),
      Ti = i(14184),
      Ei = i(83823),
      Ri = i(5102),
      wi = i(31306),
      Di = i(31306),
      Li = i(28792),
      Mi = i(78895),
      Ii = i(92415),
      Oi = i(49641),
      ki = i(29371),
      _i = i(89171),
      Vi = i(64584),
      Ni = i(48882),
      Fi = i(96696),
      Bi = i(84736),
      Hi = i(84736),
      zi = i(28677),
      Yi = i(74370),
      Gi = i(74370),
      Xi = i(12021),
      ji = i(69302),
      Wi = i(66443),
      Ui = i(60915),
      $i = i(49617),
      qi = i(98409),
      Ki = i(57397),
      Zi = i(87673),
      Ji = i(74736),
      Qi = i(14790),
      er = i(59516),
      tr = i(2296),
      ir = i(74734),
      rr = i(74734),
      sr = i(51392),
      or = i(51392),
      ar = i(54948),
      nr = i(83989),
      lr = i(4220),
      dr = i(7899),
      hr = i(19643),
      ur = i(40059),
      cr = i(78471),
      pr = i(16155),
      gr = i(19833),
      yr = i(48767),
      fr = i(39920),
      vr = i(92596),
      mr = i(68695),
      Sr = i(68695),
      Pr = i(18184),
      Cr = i(18184),
      xr = i(63458),
      br = i(47376),
      Ar = i(33841),
      Tr = i(94389),
      Er = i(3441),
      Rr = i(3441),
      wr = i(3441),
      Dr = i(3441),
      Lr = i(98353),
      Mr = i(98353),
      Ir = i(98353),
      Or = i(98353),
      kr = i(98353),
      _r = i(98353),
      Vr = i(98353),
      Nr = i(98353),
      Fr = i(98353),
      Br = i(98353),
      Hr = i(98353),
      zr = i(97703),
      Yr = i(96260),
      Gr = i(88266),
      Xr = i(88266),
      jr = i(88266),
      Wr = i(88266),
      Ur = i(88266),
      $r = i(28243),
      qr = i(22745),
      Kr = i(10749),
      Zr = i(21033),
      Jr = i(77057),
      Qr = i(58229),
      es = i(61704),
      ts = i(20782),
      is = i(98550),
      rs = i(11555),
      ss = i(12641),
      os = i(20667),
      as = i(20667),
      ns = i(43852),
      ls = i(93522),
      ds = i(65297),
      hs = i(72362),
      us = i(95179),
      cs = i(89078),
      ps = i(21037),
      gs = i(60981),
      ys = i(69570),
      fs = i(50085),
      vs = i(9150),
      ms = i(57318),
      Ss = i(29593),
      Ps = i(72469),
      Cs = i(68264),
      xs = i(56664),
      bs = i(78146),
      As = i(32471),
      Ts = i(86109),
      Es = i(1406),
      Rs = i(83262),
      ws = i(71719),
      Ds = i(1391),
      Ls = i(88189),
      Ms = i(88189),
      Is = i(70033),
      Os = i(52954),
      ks = i(54580),
      _s = i(27501),
      Vs = i(25923),
      Ns = i(63642),
      Fs = i(88227),
      Bs = i(61690),
      Hs = i(86551),
      zs = i(50951),
      Ys = i(9687),
      Gs = i(37886),
      Xs = i(386),
      js = i(62314),
      Ws = i(98499),
      Us = i(65122),
      $s = i(3911),
      qs = i(86717),
      Ks = i(54938),
      Zs = i(49987),
      Js = i(56705),
      Qs = i(16911),
      eo = i(592),
      to = i(56498),
      io = i(81856),
      ro = i(15273),
      so = i(1367),
      oo = i(1367),
      ao = i(9488),
      no = i(96852),
      lo = i(55172),
      ho = i(75933),
      uo = i(33802),
      co = i(31544),
      po = i(93752),
      go = i(74026),
      yo = i(1126),
      fo = i(7807),
      vo = i(9297),
      mo = i(50836),
      So = i(71788),
      Po = i(24315),
      Co = i(24315),
      xo = i(24315),
      bo = i(24315),
      Ao = i(24315),
      To = i(24315),
      Eo = i(36898),
      Ro = i(36877),
      wo = i(37182),
      Do = i(88302),
      Lo = i(88302),
      Mo = i(94707),
      Io = i(9184),
      Oo = i(76566),
      ko = i(72704),
      _o = i(89748),
      Vo = i(18314),
      No = i(99828),
      Fo = i(85414),
      Bo = i(35013),
      Ho = i(30995),
      zo = i(28628),
      Yo = i(47453),
      Go = i(80456),
      Xo = i(8535),
      jo = i(64485),
      Wo = i(51825),
      Uo = i(99846),
      $o = i(92231),
      qo = i(3798),
      Ko = i(4450),
      Zo = i(4450),
      Jo = i(4450),
      Qo = i(89136),
      ea = i(89136),
      ta = i(89136),
      ia = i(89136),
      ra = i(95103),
      sa = i(69133),
      oa = i(54962),
      aa = i(90182),
      na = i(79548),
      la = i(79548),
      da = i(79548),
      ha = i(79548),
      ua = i(57419),
      ca = i(35992),
      pa = i(86127),
      ga = i(76829),
      ya = i(76829),
      fa = i(76829),
      va = i(3810),
      ma = i(3810),
      Sa = i(16110),
      Pa = i(89577),
      Ca = i(47737),
      xa = i(17707),
      ba = i(73792),
      Aa = i(68491),
      Ta = i(66477),
      Ea = i(66477),
      Ra = i(23291),
      wa = i(75869),
      Da = i(98102),
      La = i(86753),
      Ma = i(36561),
      Ia = i(1989),
      Oa = i(228),
      ka = i(20254),
      _a = i(52361),
      Va = i(52361),
      Na = i(58042),
      Fa = i(79135),
      Ba = i(50513),
      Ha = i(22054),
      za = i(99441),
      Ya = i(69412),
      Ga = i(77103),
      Xa = i(77103),
      ja = i(77103),
      Wa = i(77103),
      Ua = i(77103),
      $a = i(48936),
      qa = i(71906),
      Ka = i(37622),
      Za = i(37622),
      Ja = i(37622),
      Qa = i(37622),
      en = i(37622),
      tn = i(37622),
      rn = i(37622),
      sn = i(37622),
      on = i(33517),
      an = i(26079),
      nn = i(21240),
      ln = i(54005),
      dn = i(75816),
      hn = i(72476),
      un = i(77162),
      cn = i(41859),
      pn = i(98694),
      gn = i(98694),
      yn = i(45265),
      fn = i(56172),
      vn = i(39927),
      mn = i(72954),
      Sn = i(94574),
      Pn = i(80995),
      Cn = i(19221),
      xn = i(28009),
      bn = i(25889),
      An = i(10435),
      Tn = i(10435),
      En = i(10435),
      Rn = i(10435),
      wn = i(66549),
      Dn = i(34238),
      Ln = i(34238),
      Mn = i(56744),
      In = i(21079),
      On = i(3214),
      kn = i(58599),
      _n = i(23866),
      Vn = i(98869),
      Nn = i(98140),
      Fn = i(64645),
      Bn = i(37796),
      Hn = i(37796),
      zn = i(71664),
      Yn = i(71664),
      Gn = i(63508),
      Xn = i(75772),
      jn = i(50605),
      Wn = i(87459),
      Un = i(33519),
      $n = i(33519),
      qn = i(33519),
      Kn = i(87108),
      Zn = i(62049),
      Jn = i(62049),
      Qn = i(82229),
      el = i(82229),
      tl = i(82229),
      il = i(82229),
      rl = i(90995),
      sl = i(33485),
      ol = i(10276),
      al = i(10276),
      nl = i(70162),
      ll = i(31194),
      dl = i(85258),
      hl = i(31601),
      ul = i(60986),
      cl = i(60986),
      pl = i(10763),
      gl = i(39922),
      yl = i(12785),
      fl = i(38215),
      vl = i(38215),
      ml = i(38215),
      Sl = i(38215),
      Pl = i(2192),
      Cl = i(11043),
      xl = i(89955),
      bl = i(89955),
      Al = i(72072),
      Tl = i(14278),
      El = i(51097),
      Rl = i(2963),
      wl = i(62993),
      Dl = i(27970),
      Ll = i(3777),
      Ml = i(7980),
      Il = i(79226),
      Ol = i(32287),
      kl = i(59481),
      _l = i(10581),
      Vl = i(63415),
      Nl = i(11805),
      Fl = i(11805),
      Bl = i(11805),
      Hl = i(40359),
      zl = i(28709),
      Yl = i(73785),
      Gl = i(57935),
      Xl = i(65885),
      jl = i(65885),
      Wl = i(65885),
      Ul = i(96528),
      $l = i(28436),
      ql = i(30323),
      Kl = i(32406),
      Zl = i(34116),
      Jl = i(91465),
      Ql = i(26361),
      ed = i(26361),
      td = i(5337),
      id = i(75323),
      rd = i(22022),
      sd = i(77809),
      od = i(36420),
      ad = i(36420),
      nd = i(36420),
      ld = i(36420),
      dd = i(71238),
      hd = i(71238),
      ud = i(62916),
      cd = i(62186),
      pd = i(24149),
      gd = i(86699),
      yd = i(9073),
      fd = i(14379),
      vd = i(45215),
      md = i(45215),
      Sd = i(45215),
      Pd = i(45215),
      Cd = i(45215),
      xd = i(45215),
      bd = i(45215),
      Ad = i(19387),
      Td = i(19387),
      Ed = i(22950),
      Rd = i(22950),
      wd = i(22950),
      Dd = i(22950),
      Ld = i(22950),
      Md = i(22950),
      Id = i(22950),
      Od = i(22950),
      kd = i(85505),
      _d = i(85505),
      Vd = i(76630),
      Nd = i(46544),
      Fd = i(72633),
      Bd = i(72633),
      Hd = i(72633),
      zd = i(72633),
      Yd = i(72633),
      Gd = i(72633),
      Xd = i(72633),
      jd = i(72633),
      Wd = i(72633),
      Ud = i(72633),
      $d = i(72633),
      qd = i(71497),
      Kd = i(52578),
      Zd = i(73538),
      Jd = i(73538),
      Qd = i(54535),
      eh = i(17575),
      th = i(99064),
      ih = i(99064),
      rh = i(34483),
      sh = i(34483),
      oh = i(74617),
      ah = i(74617),
      nh = i(72934),
      lh = i(9254),
      dh = i(67492),
      hh = i(67492),
      uh = i(67492),
      ch = i(4748),
      ph = i(27307),
      gh = i(27307),
      yh = i(8591),
      fh = i(8591),
      vh = i(8591),
      mh = i(8591),
      Sh = i(8591),
      Ph = i(8591),
      Ch = i(8591),
      xh = i(48008),
      bh = i(48008),
      Ah = i(48008),
      Th = i(48008),
      Eh = i(48008),
      Rh = i(48008),
      wh = i(48008),
      Dh = i(68021),
      Lh = i(68021),
      Mh = i(21670),
      Ih = i(21670),
      Oh = i(21670),
      kh = i(21670),
      _h = i(21670),
      Vh = i(21670),
      Nh = i(21670),
      Fh = i(21670),
      Bh = i(21670),
      Hh = i(20346),
      zh = i(61090),
      Yh = i(61090),
      Gh = i(94532),
      Xh = i(87092),
      jh = i(87092),
      Wh = i(58345),
      Uh = i(58345),
      $h = i(58345),
      qh = i(32873),
      Kh = i(32873),
      Zh = i(32873),
      Jh = i(32873),
      Qh = i(32873),
      eu = i(32873),
      tu = i(32873),
      iu = i(32873),
      ru = i(32873),
      su = i(32873),
      ou = i(32873),
      au = i(32873),
      nu = i(11727),
      lu = i(11727),
      du = i(14936),
      hu = {
        buildAnnotations: t.buildAnnotations,
        buildAxes: s.buildAxes,
        buildDataSeries: o.buildDataSeries,
        buildModifiers: a.buildModifiers,
        buildSeries: n.buildSeries,
        build2DChart: l.build2DChart,
        buildPieChart: d.buildPieChart,
        configure2DSurface: h.configure2DSurface,
        chartReviver: u.chartReviver,
        buildChart: c.buildChart,
        configureChart: p.configureChart,
        ensureRegistrations: g.ensureRegistrations,
        chartBuilder: y.chartBuilder,
        registerType: f.registerType,
        registerWasmType: v.registerWasmType,
        registerFunction: m.registerFunction,
        getFunction: S.getFunction,
        createType: P.createType,
        getSubTypes: C.getSubTypes,
        AnnotationHoverModifier: x.AnnotationHoverModifier,
        EModifierType: b.EModifierType,
        testIsOverAxes: A.testIsOverAxes,
        getActiveAxes: T.getActiveAxes,
        scaleAxes: E.scaleAxes,
        CursorModifier: R.CursorModifier,
        calcTooltipSize: w.calcTooltipSize,
        adjustTooltipPosition: D.adjustTooltipPosition,
        CustomChartModifier2D: L.CustomChartModifier2D,
        DataPointInfo: M.DataPointInfo,
        DataPointSelectionChangedArgs: I.DataPointSelectionChangedArgs,
        ESelectionMode: O.ESelectionMode,
        DataPointSelectionModifier: k.DataPointSelectionModifier,
        LegendModifier: _.LegendModifier,
        ModifierArgsBase: V.ModifierArgsBase,
        ModifierMouseArgs: N.ModifierMouseArgs,
        EActionType: F.EActionType,
        MouseWheelZoomModifier: B.MouseWheelZoomModifier,
        OverviewRangeSelectionModifier: H.OverviewRangeSelectionModifier,
        PinchZoomModifier: z.PinchZoomModifier,
        RolloverModifier: Y.RolloverModifier,
        RubberBandXyZoomModifier: G.RubberBandXyZoomModifier,
        getRubberBandRect: X.getRubberBandRect,
        SeriesSelectionModifier: j.SeriesSelectionModifier,
        VerticalSliceModifier: W.VerticalSliceModifier,
        XAxisDragModifier: U.XAxisDragModifier,
        YAxisDragModifier: $.YAxisDragModifier,
        ZoomExtentsModifier: q.ZoomExtentsModifier,
        ZoomPanModifier: K.ZoomPanModifier,
        BatchRenderContext: Z.BatchRenderContext,
        getWebGlBrushFromCache: J.getWebGlBrushFromCache,
        getScrtBrushFromCache: Q.getScrtBrushFromCache,
        createBrushInCache: ee.createBrushInCache,
        getWebGlPenFromCache: te.getWebGlPenFromCache,
        getScrtPenFromCache: ie.getScrtPenFromCache,
        createPenInCache: re.createPenInCache,
        RenderContext2D: se.RenderContext2D,
        WebGlBrush: oe.WebGlBrush,
        WebGlPen: ae.WebGlPen,
        calculateAbsoluteRenderLayer: ne.calculateAbsoluteRenderLayer,
        ELineDrawMode: le.ELineDrawMode,
        WebGlRenderContext2D: de.WebGlRenderContext2D,
        updateAxisLayoutState: he.updateAxisLayoutState,
        layoutAxisParts: ue.layoutAxisParts,
        layoutAxisPartsLeftStrategy: ce.layoutAxisPartsLeftStrategy,
        layoutAxisPartsRightStrategy: pe.layoutAxisPartsRightStrategy,
        layoutAxisPartsTopStrategy: ge.layoutAxisPartsTopStrategy,
        layoutAxisPartsBottomStrategy: ye.layoutAxisPartsBottomStrategy,
        getHorizontalAxisRequiredSize: fe.getHorizontalAxisRequiredSize,
        getVerticalAxisRequiredSize: ve.getVerticalAxisRequiredSize,
        updateLeftAndRightChartLayoutState:
          me.updateLeftAndRightChartLayoutState,
        updateTopAndBottomChartLayoutState:
          Se.updateTopAndBottomChartLayoutState,
        getValueWithCoordinateMode: Pe.getValueWithCoordinateMode,
        getCoordinateWithCoordinateMode: Ce.getCoordinateWithCoordinateMode,
        testLayoutManager: xe.testLayoutManager,
        BottomAlignedInnerAxisLayoutStrategy:
          be.BottomAlignedInnerAxisLayoutStrategy,
        BottomAlignedOuterAxisLayoutStrategy:
          Ae.BottomAlignedOuterAxisLayoutStrategy,
        BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy:
          Te.BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy,
        CentralAxesLayoutManager: Ee.CentralAxesLayoutManager,
        EInnerAxisPlacementCoordinateMode: Re.EInnerAxisPlacementCoordinateMode,
        LayoutManager: we.LayoutManager,
        LeftAlignedInnerAxisLayoutStrategy:
          De.LeftAlignedInnerAxisLayoutStrategy,
        LeftAlignedOuterAxisLayoutStrategy:
          Le.LeftAlignedOuterAxisLayoutStrategy,
        LeftAlignedOuterVerticallyStackedAxisLayoutStrategy:
          Me.LeftAlignedOuterVerticallyStackedAxisLayoutStrategy,
        RightAlignedInnerAxisLayoutStrategy:
          Ie.RightAlignedInnerAxisLayoutStrategy,
        RightAlignedOuterAxisLayoutStrategy:
          Oe.RightAlignedOuterAxisLayoutStrategy,
        RightAlignedOuterVerticallyStackedAxisLayoutStrategy:
          ke.RightAlignedOuterVerticallyStackedAxisLayoutStrategy,
        SciChartHorizontalGroup: _e.SciChartHorizontalGroup,
        SciChartVerticalGroup: Ve.SciChartVerticalGroup,
        SynchronizedLayoutManager: Ne.SynchronizedLayoutManager,
        TopAlignedInnerAxisLayoutStrategy: Fe.TopAlignedInnerAxisLayoutStrategy,
        TopAlignedOuterAxisLayoutStrategy: Be.TopAlignedOuterAxisLayoutStrategy,
        TopAlignedOuterHorizontallyStackedAxisLayoutStrategy:
          He.TopAlignedOuterHorizontallyStackedAxisLayoutStrategy,
        getWindowedYRange: ze.getWindowedYRange,
        DataPointSelectionPaletteProvider: Ye.DataPointSelectionPaletteProvider,
        DoubleVectorProvider: Ge.DoubleVectorProvider,
        FIFOVectorProvider: Xe.FIFOVectorProvider,
        HlcDataSeries: je.HlcDataSeries,
        EDataSeriesType: We.EDataSeriesType,
        EDataChangeType: Ue.EDataChangeType,
        EDataSeriesValueType: $e.EDataSeriesValueType,
        EStrokePaletteMode: qe.EStrokePaletteMode,
        EFillPaletteMode: Ke.EFillPaletteMode,
        DefaultPaletteProvider: Ze.DefaultPaletteProvider,
        TemplateMetadataGenerator: Je.TemplateMetadataGenerator,
        NonUniformHeatmapDataSeries: Qe.NonUniformHeatmapDataSeries,
        OhlcDataSeries: et.OhlcDataSeries,
        PaletteFactory: tt.PaletteFactory,
        UniformHeatmapDataSeries: it.UniformHeatmapDataSeries,
        XyDataSeries: rt.XyDataSeries,
        XyTextDataSeries: st.XyTextDataSeries,
        XyyDataSeries: ot.XyyDataSeries,
        XyzDataSeries: at.XyzDataSeries,
        HeatmapSeriesInfo: nt.HeatmapSeriesInfo,
        HlcSeriesInfo: lt.HlcSeriesInfo,
        OhlcSeriesInfo: dt.OhlcSeriesInfo,
        SeriesInfo: ht.SeriesInfo,
        StackedXySeriesInfo: ut.StackedXySeriesInfo,
        XySeriesInfo: ct.XySeriesInfo,
        XyySeriesInfo: pt.XyySeriesInfo,
        XyzSeriesInfo: gt.XyzSeriesInfo,
        DataDistributionCalculator: yt.DataDistributionCalculator,
        HlcCustomFilter: ft.HlcCustomFilter,
        HlcScaleOffsetFilter: vt.HlcScaleOffsetFilter,
        OhlcCustomFilter: mt.OhlcCustomFilter,
        OhlcScaleOffsetFilter: St.OhlcScaleOffsetFilter,
        XyCustomFilter: Pt.XyCustomFilter,
        EDataSeriesField: Ct.EDataSeriesField,
        switchData: xt.switchData,
        XyLinearTrendFilter: bt.XyLinearTrendFilter,
        XyMovingAverageFilter: At.XyMovingAverageFilter,
        XyRatioFilter: Tt.XyRatioFilter,
        XyScaleOffsetFilter: Et.XyScaleOffsetFilter,
        XyyCustomFilter: Rt.XyyCustomFilter,
        XyyScaleOffsetFilter: wt.XyyScaleOffsetFilter,
        XyzCustomFilter: Dt.XyzCustomFilter,
        XyzScaleOffsetFilter: Lt.XyzScaleOffsetFilter,
        BasePointSeriesWrapped: Mt.BasePointSeriesWrapped,
        HlcPointSeriesWrapped: It.HlcPointSeriesWrapped,
        OhlcPointSeriesResampled: Ot.OhlcPointSeriesResampled,
        OhlcPointSeriesWrapped: kt.OhlcPointSeriesWrapped,
        XyPointSeriesResampled: _t.XyPointSeriesResampled,
        XyPointSeriesWrapped: Vt.XyPointSeriesWrapped,
        XyyPointSeriesResampled: Nt.XyyPointSeriesResampled,
        XyyPointSeriesWrapped: Ft.XyyPointSeriesWrapped,
        XyzPointSeriesWrapped: Bt.XyzPointSeriesWrapped,
        CategoryCoordinateCalculator: Ht.CategoryCoordinateCalculator,
        FlippedCategoryCoordinateCalculator:
          zt.FlippedCategoryCoordinateCalculator,
        FlippedNumericCoordinateCalculator:
          Yt.FlippedNumericCoordinateCalculator,
        LogarithmicCoordinateCalculator: Gt.LogarithmicCoordinateCalculator,
        NumericCoordinateCalculator: Xt.NumericCoordinateCalculator,
        ExtremeResamplerHelper: jt.ExtremeResamplerHelper,
        EResamplingMode: Wt.EResamplingMode,
        ResamplingParams: Ut.ResamplingParams,
        DefaultTickCoordinatesProvider: $t.DefaultTickCoordinatesProvider,
        StaticTickCoordinatesProvider: qt.StaticTickCoordinatesProvider,
        ELogarithmicMinorTickMode: Kt.ELogarithmicMinorTickMode,
        ELogarithmicMajorTickMode: Zt.ELogarithmicMajorTickMode,
        LogarithmicTickProvider: Jt.LogarithmicTickProvider,
        NumericTickProvider: Qt.NumericTickProvider,
        ChartTitleRenderer: ei.ChartTitleRenderer,
        RenderPassData: ti.RenderPassData,
        RenderPassDataCollection: ii.RenderPassDataCollection,
        RenderPassInfo: ri.RenderPassInfo,
        SciChartRenderer: si.SciChartRenderer,
        TitleRendererBase: oi.TitleRendererBase,
        getAdjustedRotation: ai.getAdjustedRotation,
        AUTO_COLOR: ni.AUTO_COLOR,
        stripAutoColor: li.stripAutoColor,
        SciChartJSDarkTheme: di.SciChartJSDarkTheme,
        SciChartJSDarkv2Theme: hi.SciChartJSDarkv2Theme,
        SciChartJSLightTheme: ui.SciChartJSLightTheme,
        SciChartJsNavyTheme: ci.SciChartJsNavyTheme,
        getSharedWasmContext: pi.getSharedWasmContext,
        initializeChartEngine2D: gi.initializeChartEngine2D,
        HeatmapLegend: yi.HeatmapLegend,
        licenseManager2dState: fi.licenseManager2dState,
        DefaultSciChartLoader: vi.DefaultSciChartLoader,
        SciChartDefaults: mi.SciChartDefaults,
        SciChartOverview: Si.SciChartOverview,
        sciChartConfig: Pi.sciChartConfig,
        SciChartSurface: Ci.SciChartSurface,
        SciChartSubSurface: xi.SciChartSubSurface,
        DebugForDpi: bi.DebugForDpi,
        ESurfaceType: Ai.ESurfaceType,
        createChartDestination: Ti.createChartDestination,
        UpdateSuspender: Ei.UpdateSuspender,
        AdornerLayer: Ri.AdornerLayer,
        EDraggingGripPoint: wi.EDraggingGripPoint,
        ECoordinateMode: Di.ECoordinateMode,
        AnnotationClickEventArgs: Li.AnnotationClickEventArgs,
        AnnotationDragDeltaEventArgs: Mi.AnnotationDragDeltaEventArgs,
        annotationHelpers: Ii.annotationHelpers,
        AnnotationHoverEventArgs: Oi.AnnotationHoverEventArgs,
        AxisMarkerAnnotation: ki.AxisMarkerAnnotation,
        BoxAnnotation: _i.BoxAnnotation,
        CursorTooltipSvgAnnotation: Vi.CursorTooltipSvgAnnotation,
        CustomAnnotation: Ni.CustomAnnotation,
        HorizontalLineAnnotation: Fi.HorizontalLineAnnotation,
        EAnnotationLayer: Bi.EAnnotationLayer,
        EAnnotationType: Hi.EAnnotationType,
        LineAnnotation: zi.LineAnnotation,
        EWrapTo: Yi.EWrapTo,
        NativeTextAnnotation: Gi.NativeTextAnnotation,
        OverviewCustomResizableAnnotation: Xi.OverviewCustomResizableAnnotation,
        RolloverLegendSvgAnnotation: ji.RolloverLegendSvgAnnotation,
        RolloverMarkerSvgAnnotation: Wi.RolloverMarkerSvgAnnotation,
        RolloverTooltipSvgAnnotation: Ui.RolloverTooltipSvgAnnotation,
        TextAnnotation: $i.TextAnnotation,
        VerticalLineAnnotation: qi.VerticalLineAnnotation,
        EClipMode: Ki.EClipMode,
        AxisLayoutState: Zi.AxisLayoutState,
        AxisRenderer: Ji.AxisRenderer,
        AxisTitleRenderer: Qi.AxisTitleRenderer,
        CategoryAxis: er.CategoryAxis,
        DateTimeNumericAxis: tr.DateTimeNumericAxis,
        getAxisById: ir.getAxisById,
        getAxis3dById: rr.getAxis3dById,
        MIN_LOG_AXIS_VALUE: sr.MIN_LOG_AXIS_VALUE,
        LogarithmicAxis: or.LogarithmicAxis,
        NumericAxis: ar.NumericAxis,
        VisibleRangeChangedArgs: nr.VisibleRangeChangedArgs,
        CategoryDeltaCalculator: lr.CategoryDeltaCalculator,
        DateTimeDeltaCalculator: dr.DateTimeDeltaCalculator,
        LogarithmicDeltaCalculator: hr.LogarithmicDeltaCalculator,
        NumericDeltaCalculator: ur.NumericDeltaCalculator,
        DateLabelProvider: cr.DateLabelProvider,
        labelCache: pr.labelCache,
        LabelInfo: gr.LabelInfo,
        LogarithmicLabelProvider: yr.LogarithmicLabelProvider,
        NumericLabelProvider: fr.NumericLabelProvider,
        PieLabelProvider: vr.PieLabelProvider,
        ETradeChartLabelFormat: mr.ETradeChartLabelFormat,
        SmartDateLabelProvider: Sr.SmartDateLabelProvider,
        TextLabelProvider: Pr.TextLabelProvider,
        wrapText: Cr.wrapText,
        createNativeRect: xr.createNativeRect,
        createSCRTPen: br.createSCRTPen,
        createSolidBrush: Ar.createSolidBrush,
        drawBorder: Tr.drawBorder,
        drawModifiersAxisLabel: Er.drawModifiersAxisLabel,
        drawLineAnnotation: Rr.drawLineAnnotation,
        drawAxisMarkerAnnotation: wr.drawAxisMarkerAnnotation,
        getLabelCoordinates: Dr.getLabelCoordinates,
        FontKey: Lr.FontKey,
        deleteCache: Mr.deleteCache,
        freeCache: Ir.freeCache,
        getVectorRectVertex: Or.getVectorRectVertex,
        getVectorColorVertex: kr.getVectorColorVertex,
        getVertex: _r.getVertex,
        getTextBounds: Vr.getTextBounds,
        getNativeRect: Nr.getNativeRect,
        getVector4: Fr.getVector4,
        getFontKey: Br.getFontKey,
        getAllFontKeys: Hr.getAllFontKeys,
        ManualLegend: zr.ManualLegend,
        SciChartLegend: Yr.SciChartLegend,
        ELegendOrientation: Gr.ELegendOrientation,
        ELegendPlacement: Xr.ELegendPlacement,
        ELegendType: jr.ELegendType,
        getLegendItemHtml: Wr.getLegendItemHtml,
        getLegendContainerHtml: Ur.getLegendContainerHtml,
        SciChartPieLegend: $r.SciChartPieLegend,
        CrossPointMarker: qr.CrossPointMarker,
        EllipsePointMarker: Kr.EllipsePointMarker,
        SpritePointMarker: Zr.SpritePointMarker,
        SquarePointMarker: Jr.SquarePointMarker,
        TrianglePointMarker: Qr.TrianglePointMarker,
        XPointMarker: es.XPointMarker,
        ELineType: ts.ELineType,
        FastBandRenderableSeries: is.FastBandRenderableSeries,
        FastBubbleRenderableSeries: rs.FastBubbleRenderableSeries,
        FastCandlestickRenderableSeries: ss.FastCandlestickRenderableSeries,
        FastColumnRenderableSeries: os.FastColumnRenderableSeries,
        getXRange: as.getXRange,
        FastErrorBarsRenderableSeries: ns.FastErrorBarsRenderableSeries,
        FastImpulseRenderableSeries: ls.FastImpulseRenderableSeries,
        FastLineRenderableSeries: ds.FastLineRenderableSeries,
        FastMountainRenderableSeries: hs.FastMountainRenderableSeries,
        FastOhlcRenderableSeries: us.FastOhlcRenderableSeries,
        FastTextRenderableSeries: cs.FastTextRenderableSeries,
        GlowEffect: ps.GlowEffect,
        HeatmapColorMap: gs.HeatmapColorMap,
        HoveredChangedArgs: ys.HoveredChangedArgs,
        NonUniformHeatmapRenderableSeries: fs.NonUniformHeatmapRenderableSeries,
        SelectionChangedArgs: vs.SelectionChangedArgs,
        SeriesHoveredArgs: ms.SeriesHoveredArgs,
        SeriesSelectedArgs: Ss.SeriesSelectedArgs,
        SeriesVisibleChangedArgs: Ps.SeriesVisibleChangedArgs,
        ShadowEffect: Cs.ShadowEffect,
        SmoothStackedMountainRenderableSeries:
          xs.SmoothStackedMountainRenderableSeries,
        SplineBandRenderableSeries: bs.SplineBandRenderableSeries,
        SplineLineRenderableSeries: As.SplineLineRenderableSeries,
        SplineMountainRenderableSeries: Ts.SplineMountainRenderableSeries,
        StackedColumnCollection: Es.StackedColumnCollection,
        StackedColumnRenderableSeries: Rs.StackedColumnRenderableSeries,
        StackedMountainCollection: ws.StackedMountainCollection,
        StackedMountainRenderableSeries: Ds.StackedMountainRenderableSeries,
        EContourColorMapMode: Ls.EContourColorMapMode,
        UniformContoursRenderableSeries: Ms.UniformContoursRenderableSeries,
        UniformHeatmapRenderableSeries: Is.UniformHeatmapRenderableSeries,
        XyScatterRenderableSeries: Os.XyScatterRenderableSeries,
        animationHelpers: ks.animationHelpers,
        BandAnimation: _s.BandAnimation,
        BandAnimationStyle: Vs.BandAnimationStyle,
        BaseAnimationStyle: Ns.BaseAnimationStyle,
        BasePointMarkerStyle: Fs.BasePointMarkerStyle,
        BubbleAnimation: Bs.BubbleAnimation,
        CandlestickAnimation: Hs.CandlestickAnimation,
        CandlestickAnimationStyle: zs.CandlestickAnimationStyle,
        ColumnAnimation: Ys.ColumnAnimation,
        ColumnAnimationStyle: Gs.ColumnAnimationStyle,
        CustomPointMarkerStyle: Xs.CustomPointMarkerStyle,
        FadeAnimation: js.FadeAnimation,
        LineAnimation: Ws.LineAnimation,
        MountainAnimation: Us.MountainAnimation,
        MountainAnimationStyle: $s.MountainAnimationStyle,
        OhlcAnimation: qs.OhlcAnimation,
        OhlcAnimationStyle: Ks.OhlcAnimationStyle,
        PointMarkerStyle: Zs.PointMarkerStyle,
        ScaleAnimation: Js.ScaleAnimation,
        ScatterAnimation: Qs.ScatterAnimation,
        SweepAnimation: eo.SweepAnimation,
        WaveAnimation: to.WaveAnimation,
        BandSeriesDataLabelProvider: io.BandSeriesDataLabelProvider,
        BubbleSeriesDataLabelProvider: ro.BubbleSeriesDataLabelProvider,
        EColumnDataLabelPosition: so.EColumnDataLabelPosition,
        ColumnSeriesDataLabelProvider: oo.ColumnSeriesDataLabelProvider,
        ContoursDataLabelProvider: ao.ContoursDataLabelProvider,
        DataLabelProvider: no.DataLabelProvider,
        DataLabelState: lo.DataLabelState,
        HeatMapDataLabelProvider: ho.HeatMapDataLabelProvider,
        LineSeriesDataLabelProvider: uo.LineSeriesDataLabelProvider,
        NonUniformHeatMapDataLabelProvider:
          co.NonUniformHeatMapDataLabelProvider,
        StackedCollectionDataLabelProvider:
          po.StackedCollectionDataLabelProvider,
        StackedColumnSeriesDataLabelProvider:
          go.StackedColumnSeriesDataLabelProvider,
        TextDataLabelProvider: yo.TextDataLabelProvider,
        BandSeriesDrawingProvider: fo.BandSeriesDrawingProvider,
        BubbleSeriesDrawingProvider: vo.BubbleSeriesDrawingProvider,
        ColumnSeriesDrawingProvider: mo.ColumnSeriesDrawingProvider,
        ErrorSeriesDrawingProvider: So.ErrorSeriesDrawingProvider,
        getColorDataForTexture: Po.getColorDataForTexture,
        getColor: Co.getColor,
        createColorMap: xo.createColorMap,
        calculateOffsets: bo.calculateOffsets,
        calculateCellCoordinates: Ao.calculateCellCoordinates,
        calculateHeatmapTexture: To.calculateHeatmapTexture,
        LineSeriesDrawingProvider: Eo.LineSeriesDrawingProvider,
        MountainSeriesDrawingProvider: Ro.MountainSeriesDrawingProvider,
        NonUniformHeatmapDrawingProvider: wo.NonUniformHeatmapDrawingProvider,
        EOhlcDrawingMode: Do.EOhlcDrawingMode,
        OhlcSeriesDrawingProvider: Lo.OhlcSeriesDrawingProvider,
        PointMarkerDrawingProvider: Mo.PointMarkerDrawingProvider,
        UniformContoursDrawingProvider: Io.UniformContoursDrawingProvider,
        UniformHeatmapDrawingProvider: Oo.UniformHeatmapDrawingProvider,
        BandSeriesHitTestProvider: ko.BandSeriesHitTestProvider,
        BubbleSeriesHitTestProvider: _o.BubbleSeriesHitTestProvider,
        ColumnSeriesHitTestProvider: Vo.ColumnSeriesHitTestProvider,
        ErrorSeriesHitTestProvider: No.ErrorSeriesHitTestProvider,
        hitTestHelpers: Fo.hitTestHelpers,
        HitTestInfo: Bo.HitTestInfo,
        ImpulseSeriesHitTestProvider: Ho.ImpulseSeriesHitTestProvider,
        LineSeriesHitTestProvider: zo.LineSeriesHitTestProvider,
        MountainSeriesHitTestProvider: Yo.MountainSeriesHitTestProvider,
        NonUniformHeatmapHitTestProvider: Go.NonUniformHeatmapHitTestProvider,
        OhlcSeriesHitTestProvider: Xo.OhlcSeriesHitTestProvider,
        ScatterSeriesHitTestProvider: jo.ScatterSeriesHitTestProvider,
        StackedColumnSeriesHitTestProvider:
          Wo.StackedColumnSeriesHitTestProvider,
        StackedMountainSeriesHitTestProvider:
          Uo.StackedMountainSeriesHitTestProvider,
        TextSeriesHitTestProvider: $o.TextSeriesHitTestProvider,
        UniformHeatmapHitTestProvider: qo.UniformHeatmapHitTestProvider,
        XyBaseRenderDataTransform: Ko.XyBaseRenderDataTransform,
        XyyBaseRenderDataTransform: Zo.XyyBaseRenderDataTransform,
        OhlcBaseRenderDataTransform: Jo.OhlcBaseRenderDataTransform,
        bezierTransform: Qo.bezierTransform,
        BezierRenderDataTransform: ea.BezierRenderDataTransform,
        XyyBezierRenderDataTransform: ta.XyyBezierRenderDataTransform,
        SmoothStackedRenderDataTransform: ia.SmoothStackedRenderDataTransform,
        SplineRenderDataTransform: ra.SplineRenderDataTransform,
        XyySplineRenderDataTransform: sa.XyySplineRenderDataTransform,
        RolloverModifierRenderableSeriesProps:
          oa.RolloverModifierRenderableSeriesProps,
        RubberBandSvgRect: aa.RubberBandSvgRect,
        ESizingMode: na.ESizingMode,
        EPieType: la.EPieType,
        EPieValueMode: da.EPieValueMode,
        SciChartPieSurface: ha.SciChartPieSurface,
        PieSegment: ua.PieSegment,
        CanvasTexture: ca.CanvasTexture,
        DpiHelper: pa.DpiHelper,
        TextureManager: ga.TextureManager,
        measureTextHeight: ya.measureTextHeight,
        measureTextWidth: fa.measureTextWidth,
        ECameraProjectionMode: va.ECameraProjectionMode,
        CameraController: ma.CameraController,
        Vector3: Sa.Vector3,
        CustomChartModifier3D: Pa.CustomChartModifier3D,
        MouseWheelZoomModifier3D: Ca.MouseWheelZoomModifier3D,
        OrbitModifier3D: xa.OrbitModifier3D,
        PinchZoomModifier3D: ba.PinchZoomModifier3D,
        ResetCamera3DModifier: Aa.ResetCamera3DModifier,
        TooltipModifier3D: Ta.TooltipModifier3D,
        adjustTooltipPosition3D: Ea.adjustTooltipPosition3D,
        EDataSeriesType3D: Ra.EDataSeriesType3D,
        UniformGridDataSeries3D: wa.UniformGridDataSeries3D,
        XyzDataSeries3D: Da.XyzDataSeries3D,
        createSingle3dInternal: La.createSingle3dInternal,
        DefaultViewportManager3D: Ma.DefaultViewportManager3D,
        GizmoEntity: Ia.GizmoEntity,
        RootSceneEntity: Oa.RootSceneEntity,
        SciChart3DRenderer: ka.SciChart3DRenderer,
        sciChartConfig3D: _a.sciChartConfig3D,
        SciChart3DSurface: Va.SciChart3DSurface,
        TooltipSvgAnnotation3D: Na.TooltipSvgAnnotation3D,
        EWhichAxis: Fa.EWhichAxis,
        AxisBase3DLabelStyle: Ba.AxisBase3DLabelStyle,
        AxisCubeEntity: Ha.AxisCubeEntity,
        EAxisSideClipping: za.EAxisSideClipping,
        ETextAlignment3D: Ya.ETextAlignment3D,
        getDescriptorsEqual: Ga.getDescriptorsEqual,
        getLineStylesEqual: Xa.getLineStylesEqual,
        getTArgbEqual: ja.getTArgbEqual,
        getTextStylesEqual: Wa.getTextStylesEqual,
        getArraysEqual: Ua.getArraysEqual,
        NumericAxis3D: $a.NumericAxis3D,
        EMarkerType: qa.EMarkerType,
        SpherePointMarker3D: Ka.SpherePointMarker3D,
        CubePointMarker3D: Za.CubePointMarker3D,
        PyramidPointMarker3D: Ja.PyramidPointMarker3D,
        CylinderPointMarker3D: Qa.CylinderPointMarker3D,
        PixelPointMarker3D: en.PixelPointMarker3D,
        QuadPointMarker: tn.QuadPointMarker,
        EllipsePointMarker3D: rn.EllipsePointMarker3D,
        TrianglePointMarker3D: sn.TrianglePointMarker3D,
        AxisCubeDescriptor: on.AxisCubeDescriptor,
        CrosshairLinesSceneEntity: an.CrosshairLinesSceneEntity,
        DefaultEntityIdProvider: nn.DefaultEntityIdProvider,
        PointLine3DSceneEntity: ln.PointLine3DSceneEntity,
        RenderableSeriesSceneEntityState: dn.RenderableSeriesSceneEntityState,
        RenderPassInfo3D: hn.RenderPassInfo3D,
        ScatterPointsSceneEntity: un.ScatterPointsSceneEntity,
        SceneDescriptor: cn.SceneDescriptor,
        SurfaceMeshSceneEntityState: pn.SurfaceMeshSceneEntityState,
        SurfaceMeshSceneEntity: gn.SurfaceMeshSceneEntity,
        ESeriesType3D: yn.ESeriesType3D,
        HitTestInfo3D: fn.HitTestInfo3D,
        PointLineRenderableSeries3D: vn.PointLineRenderableSeries3D,
        ScatterRenderableSeries3D: mn.ScatterRenderableSeries3D,
        SeriesInfo3D: Sn.SeriesInfo3D,
        SurfaceMeshSeriesInfo3D: Pn.SurfaceMeshSeriesInfo3D,
        XyzSeriesInfo3D: Cn.XyzSeriesInfo3D,
        GradientColorPalette: xn.GradientColorPalette,
        SolidColorBrushPalette: bn.SolidColorBrushPalette,
        EDrawMeshAs: An.EDrawMeshAs,
        EMeshPaletteMode: Tn.EMeshPaletteMode,
        EMeshResolution: En.EMeshResolution,
        SurfaceMeshRenderableSeries3D: Rn.SurfaceMeshRenderableSeries3D,
        AnimationToken: wn.AnimationToken,
        libraryVersion: Dn.libraryVersion,
        checkBuildStamp: Ln.checkBuildStamp,
        deleteSafe: Mn.deleteSafe,
        Dictionary: In.Dictionary,
        EventHandler: On.EventHandler,
        GradientParams: kn.GradientParams,
        Guard: _n.Guard,
        List: Vn.List,
        NumberRange: Nn.NumberRange,
        NumberUtil: Fn.NumberUtil,
        ObservableArrayBase: Bn.ObservableArrayBase,
        ObservableArray: Hn.ObservableArray,
        EObservableArrayChangedAction: zn.EObservableArrayChangedAction,
        ObservableArrayChangedArgs: Yn.ObservableArrayChangedArgs,
        OneTimePerformanceWarning: Gn.OneTimePerformanceWarning,
        Point: Xn.Point,
        PropertyChangedEventArgs: jn.PropertyChangedEventArgs,
        Rect: Wn.Rect,
        getUserCookie: Un.getUserCookie,
        shouldSendTelemetry: $n.shouldSendTelemetry,
        sendTelemetry: qn.sendTelemetry,
        Thickness: Kn.Thickness,
        EWebGLSupport: Zn.EWebGLSupport,
        WebGlHelper: Jn.WebGlHelper,
        EAnimationState: Qn.EAnimationState,
        EAnimationStateTransition: el.EAnimationStateTransition,
        AnimationFiniteStateMachine: tl.AnimationFiniteStateMachine,
        SeriesAnimationFiniteStateMachine: il.SeriesAnimationFiniteStateMachine,
        animateAny: rl.animateAny,
        DoubleAnimator: sl.DoubleAnimator,
        easing: ol.easing,
        autoReverseEasing: al.autoReverseEasing,
        GenericAnimation: nl.GenericAnimation,
        NumberRangeAnimator: ll.NumberRangeAnimator,
        MouseManager: dl.MouseManager,
        localStorageApi: hl.localStorageApi,
        EHorizontalAnchorPoint: ul.EHorizontalAnchorPoint,
        EVerticalAnchorPoint: cl.EVerticalAnchorPoint,
        EAnimationType: pl.EAnimationType,
        EAutoColorMode: gl.EAutoColorMode,
        EAutoRange: yl.EAutoRange,
        EAxisAlignment: fl.EAxisAlignment,
        getIsHorizontal: vl.getIsHorizontal,
        getIsVertical: ml.getIsVertical,
        handleInvalidAxisAlignment: Sl.handleInvalidAxisAlignment,
        EAxisType: Pl.EAxisType,
        EBaseType: Cl.EBaseType,
        EChart2DModifierType: xl.EChart2DModifierType,
        EChart3DModifierType: bl.EChart3DModifierType,
        EColor: Al.EColor,
        ECursorStyle: Tl.ECursorStyle,
        EDataFilterType: El.EDataFilterType,
        EDataLabelProviderType: Rl.EDataLabelProviderType,
        EDataLabelSkipMode: wl.EDataLabelSkipMode,
        EDataPointWidthMode: Dl.EDataPointWidthMode,
        EDefaultRenderLayer: Ll.EDefaultRenderLayer,
        EDragMode: Ml.EDragMode,
        EErrorDirection: Il.EErrorDirection,
        EErrorMode: Ol.EErrorMode,
        EExecuteOn: kl.EExecuteOn,
        EHoverMode: _l.EHoverMode,
        ELabelAlignment: Vl.ELabelAlignment,
        ELabelPlacement: Nl.ELabelPlacement,
        EHorizontalAlignment: Fl.EHorizontalAlignment,
        EVerticalAlignment: Bl.EVerticalAlignment,
        ELabelProviderType: Hl.ELabelProviderType,
        ELayoutManagerType: zl.ELayoutManagerType,
        ELayoutStrategyType: Yl.ELayoutStrategyType,
        EMousePosition: Gl.EMousePosition,
        isTypedArray: Xl.isTypedArray,
        isNumberArray: jl.isNumberArray,
        subArray: Wl.subArray,
        ENumericFormat: Ul.ENumericFormat,
        EPaletteProviderType: $l.EPaletteProviderType,
        EPointMarkerType: ql.EPointMarkerType,
        ERenderLayer: Kl.ERenderLayer,
        ESceneEntityType: Zl.ESceneEntityType,
        ESciChartSurfaceType: Jl.ESciChartSurfaceType,
        ESearchMode: Ql.ESearchMode,
        convertSearchMode: ed.convertSearchMode,
        ESeriesType: td.ESeriesType,
        EShaderEffectType: id.EShaderEffectType,
        Size: rd.Size,
        ESvgClippingMode: sd.ESvgClippingMode,
        EHorizontalTextPosition: od.EHorizontalTextPosition,
        EVerticalTextPosition: ad.EVerticalTextPosition,
        EMultiLineAlignment: nd.EMultiLineAlignment,
        convertMultiLineAlignment: ld.convertMultiLineAlignment,
        ETextAlignment: dd.ETextAlignment,
        ETitlePosition: hd.ETitlePosition,
        EThemeProviderType: ud.EThemeProviderType,
        EColorMapMode: cd.EColorMapMode,
        EWatermarkPosition: pd.EWatermarkPosition,
        EXyDirection: gd.EXyDirection,
        EYRangeMode: yd.EYRangeMode,
        EZoomState: fd.EZoomState,
        getUniqueValues: vd.getUniqueValues,
        countUnique: md.countUnique,
        areArraysEqual: Sd.areArraysEqual,
        arrayRemove: Pd.arrayRemove,
        isArraySorted: Cd.isArraySorted,
        makeIncArray: xd.makeIncArray,
        appendRangeFifo: bd.appendRangeFifo,
        calcAverageForDoubleVector: Ad.calcAverageForDoubleVector,
        calcAverageForArray: Td.calcAverageForArray,
        uintArgbColorLerp24bit: Ed.uintArgbColorLerp24bit,
        uintArgbColorLerp: Rd.uintArgbColorLerp,
        linearColorMapLerp: wd.linearColorMapLerp,
        uintArgbColorToAbgr: Dd.uintArgbColorToAbgr,
        uintArgbColorMultiplyOpacity: Ld.uintArgbColorMultiplyOpacity,
        uintArgbColorOverrideOpacity: Md.uintArgbColorOverrideOpacity,
        uintArgbColorIsTransparent: Id.uintArgbColorIsTransparent,
        applyOpacityToHtmlColor: Od.applyOpacityToHtmlColor,
        convertColor: kd.convertColor,
        convertRgbToHexColor: _d.convertRgbToHexColor,
        convertToPixel: Vd.convertToPixel,
        copyDoubleVector: Nd.copyDoubleVector,
        formatUnixDateToHumanString: Fd.formatUnixDateToHumanString,
        formatUnixDateToHumanStringDDMMYY: Bd.formatUnixDateToHumanStringDDMMYY,
        formatUnixDateToHumanStringDDMMHHMM:
          Hd.formatUnixDateToHumanStringDDMMHHMM,
        formatUnixDateToHumanStringDDMM: zd.formatUnixDateToHumanStringDDMM,
        formatUnixDateToHumanStringHHMMSS: Yd.formatUnixDateToHumanStringHHMMSS,
        formatUnixDateToHumanStringSSms: Gd.formatUnixDateToHumanStringSSms,
        formatUnixDateToHumanStringHHMM: Xd.formatUnixDateToHumanStringHHMM,
        formatUnixDateToHumanStringMMMDD: jd.formatUnixDateToHumanStringMMMDD,
        formatUnixDateToHumanStringMMM: Wd.formatUnixDateToHumanStringMMM,
        formatUnixDateToHumanStringDD: Ud.formatUnixDateToHumanStringDD,
        formatUnixDateToHumanStringYYYY: $d.formatUnixDateToHumanStringYYYY,
        logDoubleVector: qd.logDoubleVector,
        getFontString: Kd.getFontString,
        generateGuid: Zd.generateGuid,
        base64Id: Jd.base64Id,
        hasAllProperties: Qd.hasAllProperties,
        hashUtils: eh.hashUtils,
        htmlToElement: th.htmlToElement,
        stringOccurrences: ih.stringOccurrences,
        createImageAsync: rh.createImageAsync,
        createImagesArrayAsync: sh.createImagesArrayAsync,
        getIncludedAxis: oh.getIncludedAxis,
        testHasExcluded: ah.testHasExcluded,
        isRealNumber: nh.isRealNumber,
        Logger: lh.Logger,
        getNoisySinewave: dh.getNoisySinewave,
        fillNoisySinewave: hh.fillNoisySinewave,
        logToBase: uh.logToBase,
        memoize: ch.memoize,
        ObjectRegistry: ph.ObjectRegistry,
        MemoryUsageHelper: gh.MemoryUsageHelper,
        formatNumber2Digits: yh.formatNumber2Digits,
        numericHashCode: fh.numericHashCode,
        formatNumber: vh.formatNumber,
        toSuperScript: mh.toSuperScript,
        toScientific: Sh.toScientific,
        toEngineering: Ph.toEngineering,
        checkIsNaN: Ch.checkIsNaN,
        parseColorToHexStringArgb: xh.parseColorToHexStringArgb,
        parseColorToHexStringAbgr: bh.parseColorToHexStringAbgr,
        parseColorToUIntArgb: Ah.parseColorToUIntArgb,
        toHex: Th.toHex,
        parseColorToTArgb: Eh.parseColorToTArgb,
        parseArgbToHtmlColor: Rh.parseArgbToHtmlColor,
        parseTArgbToHtmlColor: wh.parseTArgbToHtmlColor,
        EPerformanceMarkType: Dh.EPerformanceMarkType,
        PerformanceDebugHelper: Lh.PerformanceDebugHelper,
        calcDistanceFromLine: Mh.calcDistanceFromLine,
        calcCrossProduct: Ih.calcCrossProduct,
        calcDistance: Oh.calcDistance,
        testIsInBounds: kh.testIsInBounds,
        calcAnnotationBordersForAxisMarker:
          _h.calcAnnotationBordersForAxisMarker,
        testIsInXBounds: Vh.testIsInXBounds,
        testIsInInterval: Nh.testIsInInterval,
        calcDotProduct: Fh.calcDotProduct,
        calcDistanceFromLineSegment: Bh.calcDistanceFromLineSegment,
        getRandomInRange: Hh.getRandomInRange,
        getStocksDataFactory: zh.getStocksDataFactory,
        getNextRandomPriceBarFactory: Yh.getNextRandomPriceBarFactory,
        getAttributeFromString: Gh.getAttributeFromString,
        wrapNativeText: Xh.wrapNativeText,
        getNativeTextSize: jh.getNativeTextSize,
        ESize: Wh.ESize,
        ECoord: Uh.ECoord,
        EShift: $h.EShift,
        translateFromCanvasToSeriesViewRect:
          qh.translateFromCanvasToSeriesViewRect,
        translateFromSeriesViewRectToCanvas:
          Kh.translateFromSeriesViewRectToCanvas,
        translateFromCanvasToSeriesViewRectX:
          Zh.translateFromCanvasToSeriesViewRectX,
        translateFromCanvasToSeriesViewRectY:
          Jh.translateFromCanvasToSeriesViewRectY,
        translateFromSeriesViewRectToCanvasX:
          Qh.translateFromSeriesViewRectToCanvasX,
        translateFromSeriesViewRectToCanvasY:
          eu.translateFromSeriesViewRectToCanvasY,
        translateToNotScaled: tu.translateToNotScaled,
        translateDataValueRectToAbsolute: iu.translateDataValueRectToAbsolute,
        convertToHtmlPx: ru.convertToHtmlPx,
        convertToRelativeHtmlSize: su.convertToRelativeHtmlSize,
        fitElementToViewRect: ou.fitElementToViewRect,
        fitSvgToViewRect: au.fitSvgToViewRect,
        updateTsrVector4: nu.updateTsrVector4,
        fromTsrVector4: lu.fromTsrVector4,
        zeroArray2D: du.zeroArray2D,
      };
    (e.default = hu),
      Ci.SciChartSurface.useWasmFromCDN(),
      Va.SciChart3DSurface.useWasmFromCDN();
  })(),
    (self.SciChart = r.default);
})();
