<?xml version="1.0" encoding="utf-8"?>
<DocumentXProject Id="c94c9758-3b1d-470c-8461-0129a7e01e41" Version="2018.1">
  <Features>
    <Feature>Document! X</Feature>
  </Features>
  <SeparateFiles>false</SeparateFiles>
  <Flags>
    <Flag Id="{46CEF21D-3301-4517-A875-A0906828390E}" HighlightColor="#FFA1FFD0">Exclude from Online</Flag>
    <Flag Id="{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" HighlightColor="#FFFFFFA1">Exclude from Booklet</Flag>
  </Flags>
  <PropertyDefinitions>
    <PropertyDefinition Id="4762301e-2f7f-49ae-a6d9-51a79750d8b3" Name="DocumentationHome" Description="" PropertyType="Text" />
    <PropertyDefinition Id="31a70858-084a-43e7-a307-43e2cdae0808" Name="DocumentationRoot" Description="" PropertyType="Text" />
    <PropertyDefinition Id="c58acc35-6e43-42f0-bf51-b3afa633f0cc" Name="PlatformInfoHome" Description="" PropertyType="Text" />
    <PropertyDefinition Id="d50d68a0-b78a-435c-aa4a-79a1a79209c5" Name="PlatformName" Description="" PropertyType="Text" />
    <PropertyDefinition Id="dffa9b8e-bb62-4b2f-be87-ccd1375cf6b9" Name="PlatformVersion" Description="" PropertyType="Text" />
  </PropertyDefinitions>
  <PropertyDefinitionValues />
  <Title />
  <ContentFiles>
    <ContentFile FileName="SciChart.Core.dxc" Moniker="&lt;JavaProject ProjectName=&quot;SciChart.Core&quot; IncludePrivateTypes=&quot;false&quot; IncludePrivateMembers=&quot;false&quot;&gt;&#xD;&#xA;  &lt;PackageNames&gt;&#xD;&#xA;    &lt;PackageName IsRecursive=&quot;true&quot;&gt;com.scichart.core&lt;/PackageName&gt;&#xD;&#xA;  &lt;/PackageNames&gt;&#xD;&#xA;  &lt;SourcePaths&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\core\src\main\java&quot; /&gt;&#xD;&#xA;  &lt;/SourcePaths&gt;&#xD;&#xA;&lt;/JavaProject&gt;" DocType="DX.JAVA" />
    <ContentFile FileName="SciChart.Data.dxc" Moniker="&lt;JavaProject ProjectName=&quot;SciChart.Data&quot; IncludePrivateTypes=&quot;false&quot; IncludePrivateMembers=&quot;false&quot;&gt;&#xD;&#xA;  &lt;PackageNames&gt;&#xD;&#xA;    &lt;PackageName IsRecursive=&quot;true&quot;&gt;com.scichart.data&lt;/PackageName&gt;&#xD;&#xA;  &lt;/PackageNames&gt;&#xD;&#xA;  &lt;SourcePaths&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\data\src\main\java&quot; /&gt;&#xD;&#xA;  &lt;/SourcePaths&gt;&#xD;&#xA;&lt;/JavaProject&gt;" DocType="DX.JAVA" />
    <ContentFile FileName="SciChart.Drawing.dxc" Moniker="&lt;JavaProject ProjectName=&quot;SciChart.Drawing&quot; IncludePrivateTypes=&quot;false&quot; IncludePrivateMembers=&quot;false&quot;&gt;&#xD;&#xA;  &lt;PackageNames&gt;&#xD;&#xA;    &lt;PackageName IsRecursive=&quot;true&quot;&gt;com.scichart.drawing&lt;/PackageName&gt;&#xD;&#xA;  &lt;/PackageNames&gt;&#xD;&#xA;  &lt;SourcePaths&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\drawing\src\main\java&quot; /&gt;&#xD;&#xA;  &lt;/SourcePaths&gt;&#xD;&#xA;&lt;/JavaProject&gt;" DocType="DX.JAVA" />
    <ContentFile FileName="SciChart.Charting.dxc" Moniker="&lt;JavaProject ProjectName=&quot;SciChart.Charting&quot; JavaClassPath=&quot;C:\AndroidHome\platforms\android-29\android.jar;&quot; IncludePrivateTypes=&quot;false&quot; IncludePrivateMembers=&quot;false&quot;&gt;&#xD;&#xA;  &lt;PackageNames&gt;&#xD;&#xA;    &lt;PackageName IsRecursive=&quot;true&quot;&gt;com.scichart.charting&lt;/PackageName&gt;&#xD;&#xA;  &lt;/PackageNames&gt;&#xD;&#xA;  &lt;SourcePaths&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\core\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\drawing\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\data\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\charting\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;src\java&quot; /&gt;&#xD;&#xA;  &lt;/SourcePaths&gt;&#xD;&#xA;&lt;/JavaProject&gt;" DocType="DX.JAVA" />
    <ContentFile FileName="SciChart.Charting3D.dxc" Moniker="&lt;JavaProject ProjectName=&quot;SciChart.Charting3D&quot; JavaClassPath=&quot;C:\AndroidHome\platforms\android-27\android.jar;C:\AndroidHome\extras\android\m2repository\com\android\support\support-annotations\25.3.1\support-annotations-25.3.1.jar;&quot; IncludePrivateTypes=&quot;false&quot; IncludePrivateMembers=&quot;false&quot;&gt;&#xD;&#xA;  &lt;PackageNames&gt;&#xD;&#xA;    &lt;PackageName IsRecursive=&quot;true&quot;&gt;com.scichart.charting3d&lt;/PackageName&gt;&#xD;&#xA;  &lt;/PackageNames&gt;&#xD;&#xA;  &lt;SourcePaths&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\core\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\data\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\drawing\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\charting\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\charting3d\src\main\java&quot; /&gt;&#xD;&#xA;    &lt;SourcePath Directory=&quot;..\src\Examples\charting3d\src\main\swig\main\java&quot; /&gt;&#xD;&#xA;  &lt;/SourcePaths&gt;&#xD;&#xA;&lt;/JavaProject&gt;" DocType="DX.JAVA" />
  </ContentFiles>
  <AutoDocFiles />
  <ContentFromProjectPlugin />
  <Filters>
    <ExcludedItems>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing_namespace</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Credentials</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Decoder</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Decoder+LicenseType</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.ILicenseProvider</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+attr</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+dimen</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+drawable</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+id</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+layout</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+style</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+styleable</ExcludedItem>
    </ExcludedItems>
  </Filters>
  <JavascriptProjectPlugin />
  <ComProjectPlugin />
  <AjaxProjectPlugin />
  <JavaProjectPlugin>
    <JavaProject ProjectName="SciChart.Data" JavaClassPath="C:\AndroidHome\platforms\android-29\android.jar;" IncludePrivateTypes="false" IncludePrivateMembers="false">
      <PackageNames>
        <PackageName IsRecursive="true">com.scichart.data</PackageName>
      </PackageNames>
      <SourcePaths>
        <SourcePath Directory="..\src\Examples\core\src\main\java" />
        <SourcePath Directory="..\src\Examples\data\src\main\java" />
      </SourcePaths>
    </JavaProject>
    <JavaProject ProjectName="SciChart.Drawing" JavaClassPath="C:\AndroidHome\platforms\android-29\android.jar;" IncludePrivateTypes="false" IncludePrivateMembers="false">
      <PackageNames>
        <PackageName IsRecursive="true">com.scichart.drawing</PackageName>
      </PackageNames>
      <SourcePaths>
        <SourcePath Directory="..\src\Examples\core\src\main\java" />
        <SourcePath Directory="..\src\Examples\drawing\src\main\java" />
      </SourcePaths>
    </JavaProject>
    <JavaProject ProjectName="SciChart.Core" JavaClassPath="C:\AndroidHome\platforms\android-29\android.jar;" IncludePrivateTypes="false" IncludePrivateMembers="false">
      <PackageNames>
        <PackageName IsRecursive="true">com.scichart.core</PackageName>
      </PackageNames>
      <SourcePaths>
        <SourcePath Directory="..\src\Examples\core\src\main\java" />
      </SourcePaths>
    </JavaProject>
    <JavaProject ProjectName="SciChart.Charting" JavaClassPath="C:\AndroidHome\platforms\android-29\android.jar;" IncludePrivateTypes="false" IncludePrivateMembers="false">
      <PackageNames>
        <PackageName IsRecursive="true">com.scichart.charting</PackageName>
      </PackageNames>
      <SourcePaths>
        <SourcePath Directory="..\src\Examples\core\src\main\java" />
        <SourcePath Directory="..\src\Examples\drawing\src\main\java" />
        <SourcePath Directory="..\src\Examples\data\src\main\java" />
        <SourcePath Directory="..\src\Examples\charting\src\main\java" />
        <SourcePath Directory="src\java" />
      </SourcePaths>
    </JavaProject>
    <JavaProject ProjectName="SciChart.Charting3D" JavaClassPath="C:\AndroidHome\platforms\android-29\android.jar;" IncludePrivateTypes="false" IncludePrivateMembers="false">
      <PackageNames>
        <PackageName IsRecursive="true">com.scichart.charting3d</PackageName>
      </PackageNames>
      <SourcePaths>
        <SourcePath Directory="..\src\Examples\core\src\main\java" />
        <SourcePath Directory="..\src\Examples\data\src\main\java" />
        <SourcePath Directory="..\src\Examples\drawing\src\main\java" />
        <SourcePath Directory="..\src\Examples\charting\src\main\java" />
        <SourcePath Directory="..\src\Examples\charting3d\src\main\java" />
        <SourcePath Directory="..\src\Examples\charting3d\src\main\swig\main\java" />
      </SourcePaths>
    </JavaProject>
  </JavaProjectPlugin>
  <DotNetAssemblies />
  <DatabaseProjectPlugin>
    <Databases />
  </DatabaseProjectPlugin>
  <XsdProjectPlugin>
    <XsdSchemas />
  </XsdProjectPlugin>
  <GlossaryProjectPlugin>
    <IsGlossaryOutputEnabled>true</IsGlossaryOutputEnabled>
    <Glossary>
      <GlossaryItems />
      <Title />
    </Glossary>
  </GlossaryProjectPlugin>
  <WebServiceProjectPlugin>
    <WebServices />
  </WebServiceProjectPlugin>
  <HelpProjectPlugin ShowGettingStartedPage="true" />
  <OtherFilesProjectPlugin>
    <OtherFiles>
      <OtherFile Id="a68b76d0-866c-4231-86eb-3bfc330b85c2" FileName="stylesheets\customstyles.css" SourceData="" BuildFlags="" />
      <OtherFile Id="7c3a318c-7514-4705-b9a4-8068db65d972" FileName="images\RSS Feed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="278be4ba-f789-4f69-9d1f-195363a5491f" FileName="What_is_SciChart_Android-_files\image001.png" SourceData="" BuildFlags="" />
      <OtherFile Id="38350461-80a2-46a5-b70b-a148b2e76071" FileName="Installation_and_System_Requirements_files\image001.png" SourceData="" BuildFlags="" />
      <OtherFile Id="98095cf6-18f5-4da7-a8c0-8dc181ca1360" FileName="Installation_and_System_Requirements_files\image002.png" SourceData="" BuildFlags="" />
      <OtherFile Id="791cf638-c082-4f30-92aa-d8b3f91835c1" FileName="Installation_and_System_Requirements_files\image003.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4bd01aee-4850-49f9-a188-6e0a2426d656" FileName="Installation_and_System_Requirements_files\image004.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f3455a17-9ea3-4018-b289-19205de9145f" FileName="Installation_and_System_Requirements_files\image005.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ae2f79b7-6871-4e4a-a77d-4cc8c9c64710" FileName="Installation_and_System_Requirements_files\image006.png" SourceData="" BuildFlags="" />
      <OtherFile Id="152b3a62-94d0-4152-aca6-c3dfed86b506" FileName="Installation_and_System_Requirements_files\image007.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b8c71db4-3e49-46f8-b4ea-8d9f41f81356" FileName="Installation_and_System_Requirements_files\image008.png" SourceData="" BuildFlags="" />
      <OtherFile Id="db91955f-6d56-4ff6-ae2e-a8acf7808d65" FileName="Installation_and_System_Requirements_files\image009.png" SourceData="" BuildFlags="" />
      <OtherFile Id="37dc6d76-1830-4117-96aa-50de253d19a6" FileName="Installation_and_System_Requirements_files\image010.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0a009a72-f4bd-4242-8fbf-ba88921e432b" FileName="Installation_and_System_Requirements_files\image011.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c846bd05-e8d0-4a98-aa7e-578c37e5d655" FileName="Installation_and_System_Requirements_files\image012.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9dde9d81-7040-4b82-a791-24284709b705" FileName="Installation_and_System_Requirements_files\image013.png" SourceData="" BuildFlags="" />
      <OtherFile Id="21d11278-d371-4bf9-a748-3e1199d6330a" FileName="Installation_and_System_Requirements_files\image014.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0b495e7f-0f41-497a-aa94-ae1c2c5f10fd" FileName="Installation_and_System_Requirements_files\image015.png" SourceData="" BuildFlags="" />
      <OtherFile Id="57c36e06-eed0-4ecb-b316-4e06c6d646fb" FileName="Installation_and_System_Requirements_files\image016.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cd6afc74-bfa6-49b0-8279-a0e44d846ba7" FileName="Installation_and_System_Requirements_files\image017.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ad6da8d2-f7c3-4124-a5b3-5037ef0f136a" FileName="Installation_and_System_Requirements_files\image018.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f3480e9f-34b1-4a7d-afff-0461f20f7381" FileName="Installation_and_System_Requirements_files\image019.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="109a3063-7640-4b8b-a13f-e8c197b98e01" FileName="Installation_and_System_Requirements_files\image020.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="99de3df2-f7a6-45d4-8d39-9b44ecbb5592" FileName="Installation_and_System_Requirements_files\image021.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ec978c4d-ca9f-46e1-95ba-e41faca678be" FileName="Installation_and_System_Requirements_files\image022.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="6563bbc4-767e-4b48-8c48-e38e7616fce9" FileName="Installation_and_System_Requirements_files\image023.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d32cd272-2268-40a3-9f20-355bc27b8dcc" FileName="Installation_and_System_Requirements_files\image024.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="6fb4e6ef-81fa-4cb6-a1f8-2959afb903e9" FileName="Installation_and_System_Requirements_files\image025.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b9807ab5-9d3c-4bc3-a049-567598954a59" FileName="Installation_and_System_Requirements_files\image026.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7e8a44e9-57d1-4043-b100-02ebf936340f" FileName="Installation_and_System_Requirements_files\image027.png" SourceData="" BuildFlags="" />
      <OtherFile Id="674ab394-98ed-413f-bc48-e9e57a399001" FileName="The_SciChart_Android_Examples_Suite_files\image001.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5170cef9-fc16-4dad-930f-d032764e5e76" FileName="The_SciChart_Android_Examples_Suite_files\image002.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a8670c03-51d8-414a-a874-07001c6b79de" FileName="The_SciChart_Android_Examples_Suite_files\image003.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2420878e-2e3e-4e96-b686-df0f41de6d66" FileName="The_SciChart_Android_Examples_Suite_files\image004.png" SourceData="" BuildFlags="" />
      <OtherFile Id="251f97f6-a1a1-4c54-9486-0d0452de8abe" FileName="The_SciChart_Android_Examples_Suite_files\image005.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d7fa254f-cb4d-4689-9223-cabaa8d949b7" FileName="The_SciChart_Android_Examples_Suite_files\image006.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dfded09b-1270-4ffe-bede-2b0fe70b8259" FileName="The_SciChart_Android_Examples_Suite_files\image007.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0e775ab4-873b-4855-9df7-9a926cd82303" FileName="The_SciChart_Android_Examples_Suite_files\image008.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5ea73717-d6ef-481a-a501-40e42ccf83b4" FileName="The_SciChart_Android_Examples_Suite_files\image009.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d60edc73-e067-42dc-a13a-a79ab8a8104d" FileName="The_SciChart_Android_Examples_Suite_files\image010.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="6d7e8ba2-a6c0-4222-a788-275f587d5b64" FileName="The_SciChart_Android_Examples_Suite_files\image011.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4bd68d3c-8ecd-48b1-9b74-d1d65d845630" FileName="The_SciChart_Android_Examples_Suite_files\image012.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="182b025d-d8e1-4252-b86b-1c688675f329" FileName="The_SciChart_Android_Examples_Suite_files\image013.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="8542ed32-d4aa-4ac6-8caf-f0a43e24fca3" FileName="The_SciChart_Android_Examples_Suite_files\image014.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d376490b-dd1e-459b-806c-27dcdf7da277" FileName="The_SciChart_Android_Examples_Suite_files\image015.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7eddc51f-674f-498f-b8f0-0c8905578379" FileName="The_SciChart_Android_Examples_Suite_files\image016.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5e9c214c-3505-401c-8747-d51236ee9a86" FileName="The_SciChart_Android_Examples_Suite_files\image017.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="611515d8-fe38-4f06-994e-0dfe30b8bc1c" FileName="The_SciChart_Android_Examples_Suite_files\image018.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="13bdf128-3956-470e-8a74-96ee433bcc71" FileName="The_SciChart_Android_Examples_Suite_files\image019.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b993ff13-fe61-40f0-8694-1bca8ddcb353" FileName="The_SciChart_Android_Examples_Suite_files\image020.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e1be21e1-4470-45c3-87e0-ce4a852b4b26" FileName="The_SciChart_Android_Examples_Suite_files\image021.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="92f21144-53e2-404b-a459-c71cb0b25a87" FileName="The_SciChart_Android_Examples_Suite_files\image022.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7a89d402-d621-4b94-bf7f-cb826ea3e819" FileName="The_SciChart_Android_Examples_Suite_files\image023.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fa1cb9df-b28a-4f35-baf7-cede38d37615" FileName="The_SciChart_Android_Examples_Suite_files\image024.png" SourceData="" BuildFlags="" />
      <OtherFile Id="da6f75e4-66ac-4f13-a81d-a741298a95f4" FileName="The_SciChart_Android_Examples_Suite_files\image025.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8837d954-1806-4a18-8b76-f869b08dd984" FileName="The_SciChart_Android_Examples_Suite_files\image026.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1253b687-e41f-4500-9c96-ed96a950d3a8" FileName="The_SciChart_Android_Examples_Suite_files\image027.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bc94b514-2536-4561-90ee-375fd8620033" FileName="The_SciChart_Android_Examples_Suite_files\image028.png" SourceData="" BuildFlags="" />
      <OtherFile Id="38059feb-2682-4406-b59c-194be2a3209d" FileName="The_SciChart_Android_Examples_Suite_files\image029.png" SourceData="" BuildFlags="" />
      <OtherFile Id="25114615-ab00-4fa3-8de4-2dff9e92cf48" FileName="The_SciChart_Android_Examples_Suite_files\image030.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4a189ed5-0530-46a5-b3f9-8f545b5e7a3e" FileName="The_SciChart_Android_Examples_Suite_files\image031.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ae11d1b2-cc6e-456a-9f33-f15319cd2d03" FileName="The_SciChart_Android_Examples_Suite_files\image032.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0d52d6fb-cd12-4cb0-9298-74ff94eff73c" FileName="The_SciChart_Android_Examples_Suite_files\image033.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e4b751bc-fc46-4522-b7aa-c321dbd77020" FileName="The_SciChart_Android_Examples_Suite_files\image034.png" SourceData="" BuildFlags="" />
      <OtherFile Id="23c1e9c6-4a68-47bb-bd40-9eb1838474ef" FileName="The_SciChart_Android_Examples_Suite_files\image035.png" SourceData="" BuildFlags="" />
      <OtherFile Id="446432fb-6f85-46e1-b7e2-855587946258" FileName="The_SciChart_Android_Examples_Suite_files\image036.png" SourceData="" BuildFlags="" />
      <OtherFile Id="289d4d3c-102a-4ea6-b8ba-8e986949e785" FileName="The_SciChart_Android_Examples_Suite_files\image037.png" SourceData="" BuildFlags="" />
      <OtherFile Id="94122d22-88f5-4465-b876-c42e7cf903d1" FileName="The_SciChart_Android_Examples_Suite_files\image038.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f83a5c3a-034a-4d4e-b8d6-aa59fe56f5ea" FileName="The_SciChart_Android_Examples_Suite_files\image039.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2dd6cb56-2a9b-4762-a959-dc20db937d8e" FileName="The_SciChart_Android_Examples_Suite_files\image040.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6ef21b8e-9e61-49e9-9e0c-930af4b7e06f" FileName="The_SciChart_Android_Examples_Suite_files\image041.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7638495b-a54f-4511-b7ad-a32c24e6981f" FileName="The_SciChart_Android_Examples_Suite_files\image042.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a99e2959-c008-466c-855e-ab20d2e196fa" FileName="The_SciChart_Android_Examples_Suite_files\image043.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ab61bb93-5755-4b40-8ed6-18aef72c4f0d" FileName="The_SciChart_Android_Examples_Suite_files\image044.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="379fd58b-bf86-427a-b2cb-e46ad06a3fdb" FileName="The_SciChart_Android_Examples_Suite_files\image045.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b46433e0-92e3-4811-9b67-87ad77fc0caf" FileName="The_SciChart_Android_Examples_Suite_files\image046.png" SourceData="" BuildFlags="" />
      <OtherFile Id="40913a07-82a6-4d35-9ee8-19cb0c992576" FileName="The_SciChart_Android_Examples_Suite_files\image047.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b4f3f6cf-efc4-478f-916f-a50efc6bf8fe" FileName="The_SciChart_Android_Examples_Suite_files\image048.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3ff08e6f-d1a2-4e24-95f5-b2d20681f158" FileName="The_SciChart_Android_Examples_Suite_files\image049.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7e392026-b72f-4cc2-b6a6-432f88599687" FileName="The_SciChart_Android_Examples_Suite_files\image050.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4f10c92d-e6c1-4c4f-9806-d7abb70e878b" FileName="The_SciChart_Android_Examples_Suite_files\image051.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7987a258-933a-4a6d-9957-e07929f85625" FileName="The_SciChart_Android_Examples_Suite_files\image052.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="275dc768-1461-4bdc-9dca-71dff96c9cde" FileName="The_SciChart_Android_Examples_Suite_files\image053.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3611260f-9328-4e9e-8e57-27b610dbd910" FileName="The_SciChart_Android_Examples_Suite_files\image054.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a370e8c3-bd78-406d-82e9-692853c886c4" FileName="The_SciChart_Android_Examples_Suite_files\image055.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4f405e92-c878-4104-a04b-6aec921ace51" FileName="The_SciChart_Android_Examples_Suite_files\image056.png" SourceData="" BuildFlags="" />
      <OtherFile Id="39520c5a-3c72-465a-93f7-383cfa8f082f" FileName="The_SciChart_Android_Examples_Suite_files\image057.png" SourceData="" BuildFlags="" />
      <OtherFile Id="611b1e55-70a4-4cdb-b616-2bd8793c6976" FileName="The_SciChart_Android_Examples_Suite_files\image058.png" SourceData="" BuildFlags="" />
      <OtherFile Id="49148821-6e7f-41f1-b281-c36294489ba0" FileName="The_SciChart_Android_Examples_Suite_files\image059.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c4ac75f6-38e6-419b-a969-f6c943543f28" FileName="The_SciChart_Android_Examples_Suite_files\image060.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e5025b67-db62-45a0-a973-359babac08f2" FileName="The_SciChart_Android_Examples_Suite_files\image061.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ff473bdd-14be-40eb-ab34-8986cb5b7093" FileName="The_SciChart_Android_Examples_Suite_files\image062.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4ad77481-8d55-4abb-b5fc-9c8f7c14a8d5" FileName="The_SciChart_Android_Examples_Suite_files\image063.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5b2a49a4-7e87-4916-b19f-e9e96c3b5115" FileName="The_SciChart_Android_Examples_Suite_files\image064.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b8e4749a-b631-43b8-b734-d7d27a0c2eea" FileName="The_SciChart_Android_Examples_Suite_files\image065.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2a067ee5-d00a-4e0b-abaa-2e0065daf507" FileName="The_SciChart_Android_Examples_Suite_files\image066.png" SourceData="" BuildFlags="" />
      <OtherFile Id="67eca64e-7a09-461b-972d-61a08f1883ca" FileName="The_SciChart_Android_Examples_Suite_files\image067.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5b4d9011-bd9a-4f21-9495-72454a1dca79" FileName="The_SciChart_Android_Examples_Suite_files\image068.png" SourceData="" BuildFlags="" />
      <OtherFile Id="75e33c81-f0cf-424c-8eb9-aa00b37c0e96" FileName="The_SciChart_Android_Examples_Suite_files\image069.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3745beac-3a97-4771-b978-0ca01ba25b71" FileName="SciChart_Android_2D_files\image001.png" SourceData="" BuildFlags="" />
      <OtherFile Id="54c4f459-b5ea-4aba-837a-166aea31110a" FileName="SciChart_Android_2D_files\image002.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bca1e524-3e61-4f26-8702-0dfe308d9ae5" FileName="SciChart_Android_2D_files\image003.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a195ce56-9bb5-43f0-961f-3064d0ef2e13" FileName="SciChart_Android_2D_files\image004.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b808a1f7-2e6a-41ea-9c41-7f8f68dc5ff7" FileName="SciChart_Android_2D_files\image005.png" SourceData="" BuildFlags="" />
      <OtherFile Id="09fc102c-f521-4ffd-894d-7f2b1c7773a2" FileName="SciChart_Android_2D_files\image006.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4447600f-47c7-4944-8298-6266fc7abab1" FileName="SciChart_Android_2D_files\image007.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e16e5dfa-d2d5-4ab2-816c-aebe992161b3" FileName="SciChart_Android_2D_files\image008.png" SourceData="" BuildFlags="" />
      <OtherFile Id="436dfc51-27db-4f5c-9780-cb61003c973d" FileName="SciChart_Android_2D_files\image009.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e60a57f1-0ee2-41ef-b2ac-a1505c084b52" FileName="SciChart_Android_2D_files\image010.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ddf224d3-6d91-4f08-b622-8eb5aa84f93c" FileName="SciChart_Android_2D_files\image011.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bc15709e-b568-4838-bfbb-fd643512738a" FileName="SciChart_Android_2D_files\image012.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7592c89a-8b15-4c38-9554-3e7935d38255" FileName="SciChart_Android_2D_files\image013.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f7874210-8222-4e02-b288-50b3a4202075" FileName="SciChart_Android_2D_files\image014.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="53ab970a-874d-4930-b998-1b77d0596816" FileName="SciChart_Android_2D_files\image015.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="80b0f3c3-f62a-4e4d-8ec5-5eb14ac298c1" FileName="SciChart_Android_2D_files\image016.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="36b58c97-d8aa-4c77-980a-7eedc7fa4037" FileName="SciChart_Android_2D_files\image017.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="21f67c05-3a09-4301-b5c6-067d3472a618" FileName="SciChart_Android_2D_files\image018.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="485a6358-892c-4516-a249-01c98561bb11" FileName="SciChart_Android_2D_files\image019.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9c8fcda1-6b6e-4c0a-970f-c9f0bce3f0b4" FileName="SciChart_Android_2D_files\image020.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="126ea91a-b4bf-4aba-a3c9-2e87a49c27d9" FileName="SciChart_Android_2D_files\image021.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3969da39-901d-448c-9c2c-e6f443f17334" FileName="SciChart_Android_2D_files\image022.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1bb80aca-09e6-4361-a50e-08dbe447a192" FileName="SciChart_Android_2D_files\image023.png" SourceData="" BuildFlags="" />
      <OtherFile Id="336708be-1914-4a1e-a1b8-ba73e4f1ac5e" FileName="SciChart_Android_2D_files\image024.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="f993182d-c9ad-4519-8dc8-f13f9f5d88d5" FileName="SciChart_Android_2D_files\image025.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="849c98d4-2c22-4eac-9865-e68a27d5c21e" FileName="SciChart_Android_2D_files\image026.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e9107374-4820-4a8a-9aa9-ce33b640176e" FileName="SciChart_Android_2D_files\image027.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="8d3edfc6-e1a4-41e1-917a-d7a19cb32aee" FileName="SciChart_Android_2D_files\image028.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="bd6cf634-2463-4f70-8b8e-2e26c42f184d" FileName="SciChart_Android_2D_files\image029.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5e87c567-dce6-40e2-b9e2-4508541a772b" FileName="SciChart_Android_2D_files\image030.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="68413460-9b3c-48ff-8ce3-36656ed12eb1" FileName="SciChart_Android_2D_files\image031.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="13dfb01b-aa52-4211-9ce7-7e61aeae0259" FileName="SciChart_Android_2D_files\image032.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b84861b5-ee13-42af-bcc8-95d0bb4c7b45" FileName="SciChart_Android_2D_files\image033.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fcb4a586-1892-4a4c-8779-e3a5d300ded7" FileName="SciChart_Android_2D_files\image034.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4b6fac0f-31d2-4027-a679-4c1437b2b829" FileName="SciChart_Android_2D_files\image035.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c40f5923-39fa-4122-83dc-8a654e3f6900" FileName="SciChart_Android_2D_files\image036.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e3566c46-d76f-4739-b473-f38d85f9212e" FileName="SciChart_Android_2D_files\image037.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fae03a1b-d897-4646-9c91-953da615720a" FileName="SciChart_Android_2D_files\image038.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="0085fd3b-e7b7-412d-9101-7251522641f7" FileName="SciChart_Android_2D_files\image039.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d4af5651-a723-46a6-8344-bedfe2d02059" FileName="SciChart_Android_2D_files\image040.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7e6bf94f-68dd-4e16-9688-be39a9c27597" FileName="SciChart_Android_2D_files\image041.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ea0242b1-ed3e-4aba-b795-525a47d06d7d" FileName="SciChart_Android_2D_files\image042.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="98f99e4a-7abc-44cd-b98b-37b50afcf56e" FileName="SciChart_Android_2D_files\image043.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="29354da6-4491-4c47-b1de-2d9a0d8688c2" FileName="SciChart_Android_2D_files\image044.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="68650fe5-0aa9-4a44-9824-cc59783a643a" FileName="SciChart_Android_2D_files\image045.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ae3db4a3-6173-437c-9556-b5d0a37c0ba8" FileName="SciChart_Android_2D_files\image046.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b18da949-dfff-4364-ad52-4af341b3d361" FileName="SciChart_Android_2D_files\image047.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2e7cb8f0-62c3-4781-9524-6f75ca774dd6" FileName="SciChart_Android_2D_files\image048.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="232ed8be-55ad-40e5-a5e5-1d09aa9524ca" FileName="SciChart_Android_2D_files\image049.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d77cc95b-32f4-4b19-a7bd-9730199e3fbf" FileName="SciChart_Android_2D_files\image050.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="94683794-a386-4a45-97a0-2ef9e0e9a200" FileName="SciChart_Android_2D_files\image051.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="188e1539-07dd-435d-9396-3bc6e4de8c41" FileName="SciChart_Android_2D_files\image052.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3b771a25-226d-4d28-8e9b-06b1c8268831" FileName="SciChart_Android_2D_files\image053.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="58629cf2-e342-4d90-976f-f5e9c66ad28c" FileName="SciChart_Android_2D_files\image054.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="58c4dddb-9319-4ad6-b451-9ff1e6b9e6a7" FileName="SciChart_Android_2D_files\image055.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5ac57094-df5f-4995-83fe-5d6d591095c5" FileName="SciChart_Android_2D_files\image056.png" SourceData="" BuildFlags="" />
      <OtherFile Id="60b241db-6e53-45aa-bfed-57b436de081b" FileName="SciChart_Android_2D_files\image057.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1241a40c-7213-4361-a787-6c5020e2cd9d" FileName="SciChart_Android_2D_files\image058.png" SourceData="" BuildFlags="" />
      <OtherFile Id="da9dac0c-f76e-415e-b8b2-b5bf1d2fd393" FileName="SciChart_Android_2D_files\image059.png" SourceData="" BuildFlags="" />
      <OtherFile Id="44c39a98-02e6-49b4-b7d1-49f4f7dcdcaa" FileName="SciChart_Android_2D_files\image060.png" SourceData="" BuildFlags="" />
      <OtherFile Id="345de966-a2b8-4abe-b644-caa40958887f" FileName="SciChart_Android_2D_files\image061.png" SourceData="" BuildFlags="" />
      <OtherFile Id="684a78f4-6e57-4a80-89ac-65f405f46464" FileName="SciChart_Android_2D_files\image062.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8ae79cd3-95a3-44fe-a39e-bf8de5eb1266" FileName="SciChart_Android_2D_files\image063.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1a62c0b6-3e87-4a3a-84e5-ad32fa3432a3" FileName="SciChart_Android_2D_files\image064.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7ff8d2a2-a580-4ae7-82a3-1ebd08f09ba9" FileName="SciChart_Android_2D_files\image065.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="279e93f6-891d-4259-b3f8-ac59b0ab6da8" FileName="SciChart_Android_2D_files\image066.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="6e50cf19-b1d2-4a05-a1ef-5daf040d5271" FileName="SciChart_Android_2D_files\image067.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3968d425-fff4-4d3f-b8c7-b9fdcf148a7e" FileName="SciChart_Android_2D_files\image068.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2bcd046e-dc32-4b89-b88f-c896a0a9f5cf" FileName="SciChart_Android_2D_files\image069.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="37e02b31-3d68-4024-9187-778d60bd88b0" FileName="SciChart_Android_2D_files\image070.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="22c18dd1-2a65-4a65-adc2-a859cfc1830c" FileName="SciChart_Android_2D_files\image071.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2c77d2e7-55bf-4fa1-8ef6-2184a1677372" FileName="SciChart_Android_2D_files\image072.png" SourceData="" BuildFlags="" />
      <OtherFile Id="db2d4126-6e2f-46a1-8aa1-9231c13e2283" FileName="SciChart_Android_2D_files\image073.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5358971f-475d-4e6b-9df0-8fd574415d7d" FileName="SciChart_Android_2D_files\image074.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4109c180-422a-4efe-8679-a352eaf2a7dc" FileName="SciChart_Android_2D_files\image075.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b3d61962-f719-4470-9770-ac1732e8342d" FileName="SciChart_Android_2D_files\image076.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="da58700a-dd44-4460-ae68-6d00f4a08806" FileName="SciChart_Android_2D_files\image077.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2fdf79fc-3c8e-4067-842f-00376544a5ac" FileName="SciChart_Android_2D_files\image078.png" SourceData="" BuildFlags="" />
      <OtherFile Id="36d35ad6-2236-4c63-953a-b1e22a89b510" FileName="SciChart_Android_2D_files\image079.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c6ab376d-376a-45f2-ad4e-4b122c591b92" FileName="SciChart_Android_2D_files\image080.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1997ff62-6f86-4eed-b203-97ea2e86f9a8" FileName="SciChart_Android_2D_files\image081.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d90ae04d-1abf-413f-a185-ee6083855c61" FileName="SciChart_Android_2D_files\image082.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3e08cfc0-e9d1-46b3-adcd-944eaa8fda49" FileName="SciChart_Android_2D_files\image083.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eae9aa9c-ea1f-472a-94cd-c96a6dc68bc9" FileName="SciChart_Android_2D_files\image084.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="88522613-49de-4a37-8aff-2105de1a68f1" FileName="SciChart_Android_2D_files\image085.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0341946d-8325-46f8-982e-0590786a1ea5" FileName="SciChart_Android_2D_files\image086.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1e60d5f5-29b3-4c49-9e0c-02363867830c" FileName="SciChart_Android_2D_files\image087.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="21a06290-f963-4137-8b30-c85b0f1f7f8a" FileName="SciChart_Android_2D_files\image088.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2855af36-b07b-4f0d-96e8-8af97d30d79f" FileName="SciChart_Android_2D_files\image089.png" SourceData="" BuildFlags="" />
      <OtherFile Id="de4707a0-b8c0-4942-be80-f689058bb71f" FileName="SciChart_Android_2D_files\image090.png" SourceData="" BuildFlags="" />
      <OtherFile Id="39c03576-31c9-4560-a092-24841cd368fc" FileName="SciChart_Android_2D_files\image091.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e052139d-3cde-4640-acfa-18f346934666" FileName="SciChart_Android_2D_files\image092.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7f78d351-0d93-45b7-a99e-a9defbdf8e0a" FileName="SciChart_Android_2D_files\image093.png" SourceData="" BuildFlags="" />
      <OtherFile Id="22bbf1f0-aec6-4ab6-903d-3fc285986dd6" FileName="SciChart_Android_2D_files\image094.png" SourceData="" BuildFlags="" />
      <OtherFile Id="515cb181-6abf-48f1-94cb-ccf80ae2d040" FileName="SciChart_Android_2D_files\image095.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e2142c06-826c-4e29-a323-cbeec9f40ad3" FileName="SciChart_Android_2D_files\image096.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4cd453c7-b0e3-4894-b7d1-d43765dc9072" FileName="SciChart_Android_2D_files\image097.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2232b413-bd4e-401f-bcbd-1fb9951328b2" FileName="SciChart_Android_2D_files\image098.png" SourceData="" BuildFlags="" />
      <OtherFile Id="08c5ed4a-4363-40ed-90c2-296be6ef2042" FileName="SciChart_Android_2D_files\image099.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d162ba8b-e886-4709-a65e-1ef42410d08d" FileName="SciChart_Android_2D_files\image100.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9b24d211-74f7-471b-bfed-009fe2b567ac" FileName="SciChart_Android_2D_files\image101.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="6429d82a-80f2-4dc6-a592-b2a69a163ad0" FileName="SciChart_Android_2D_files\image102.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ca125928-5a27-41bb-9777-d2d4e45915c0" FileName="SciChart_Android_2D_files\image103.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f28abe50-cb96-4639-90c4-4c917fe6a9e0" FileName="SciChart_Android_2D_files\image104.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a69899c1-59d0-4f24-9d63-ec25b5b11166" FileName="SciChart_Android_2D_files\image105.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c78c8ea0-3221-458d-a95b-61e90f3fc230" FileName="SciChart_Android_2D_files\image106.png" SourceData="" BuildFlags="" />
      <OtherFile Id="08ae0f10-2c77-46db-8c82-998287b0ddde" FileName="SciChart_Android_2D_files\image107.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ca4f7ffb-eec8-453a-864d-96f3c5fc29b8" FileName="SciChart_Android_2D_files\image108.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="f9b0847e-b24d-4141-8df1-d4f9e795ffc3" FileName="SciChart_Android_2D_files\image109.png" SourceData="" BuildFlags="" />
      <OtherFile Id="128ae119-8e90-4788-a8b5-12e978794b88" FileName="SciChart_Android_2D_files\image110.png" SourceData="" BuildFlags="" />
      <OtherFile Id="090b0fe7-836a-4513-b95e-0402a83c1b95" FileName="SciChart_Android_2D_files\image111.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="8160b31d-e44e-4e77-978b-0b4ecdb068ca" FileName="SciChart_Android_2D_files\image112.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e96359f1-d0fd-46aa-90e7-8949de24f40e" FileName="SciChart_Android_2D_files\image113.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4e327fa4-df13-4c9a-a0bd-f8abda2807bc" FileName="SciChart_Android_2D_files\image114.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="cebb3e7c-1d16-400a-ae7a-180256b763da" FileName="SciChart_Android_2D_files\image115.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fad17fae-46a2-4102-88c5-b6d7031f41d8" FileName="SciChart_Android_2D_files\image116.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="46363eea-b0a1-4e8f-b227-5537921060b9" FileName="SciChart_Android_2D_files\image117.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7459ad67-d8c9-4a89-9984-9104cf794447" FileName="SciChart_Android_2D_files\image118.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="837728b8-c7c2-4f7e-ad38-bb46a2ad73fc" FileName="SciChart_Android_2D_files\image119.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41cec780-7af0-4b1f-b268-616bba9201a2" FileName="SciChart_Android_2D_files\image120.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="82ea55a7-4be9-4f9c-8022-f9340b09ab7c" FileName="SciChart_Android_2D_files\image121.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="725ee31b-8260-4e34-a22c-9eb4b6bd4350" FileName="SciChart_Android_2D_files\image122.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a470e272-29b6-4088-bc45-b489a1909613" FileName="SciChart_Android_2D_files\image123.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a03127d9-418a-4639-933c-7f5d049d7036" FileName="SciChart_Android_2D_files\image124.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b39fccfb-9b92-4567-8285-191b69041ae7" FileName="SciChart_Android_2D_files\image125.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ea11e514-589d-405b-8558-027e3eb65798" FileName="SciChart_Android_2D_files\image126.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a408479c-ed7f-4968-beaa-56409cb50b4d" FileName="SciChart_Android_2D_files\image127.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="637c8c8e-cc1b-4b79-a2ef-3e64e60e62a2" FileName="SciChart_Android_2D_files\image128.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="009f2cf3-5475-41f0-968a-4a94148f9206" FileName="SciChart_Android_2D_files\image129.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d75d12b2-32e0-4192-96dd-7d642220f7ac" FileName="SciChart_Android_2D_files\image130.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7ef853a0-2572-4366-950b-42907ceae178" FileName="SciChart_Android_2D_files\image131.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ab8ed169-35b6-40e1-9e7b-45196288f77a" FileName="SciChart_Android_2D_files\image132.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9a7cd774-f406-4b61-bf5b-362ec4ae8e58" FileName="SciChart_Android_2D_files\image133.png" SourceData="" BuildFlags="" />
      <OtherFile Id="710e714a-949f-4bb0-9f19-c4b5a2ef786d" FileName="SciChart_Android_2D_files\image134.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ff43c2a7-82f5-4fcd-9df4-f593393adad4" FileName="SciChart_Android_2D_files\image135.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2fed62c5-843a-42de-8fac-01da210516d4" FileName="SciChart_Android_2D_files\image136.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8ee3143c-fd3b-4ad4-9a05-1af0d7ae8b2d" FileName="SciChart_Android_2D_files\image137.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9c2c3e2a-da1c-45c3-b357-ce3c0d71eab3" FileName="SciChart_Android_2D_files\image138.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6ababcfa-732a-4974-9fa8-83415aa45f09" FileName="SciChart_Android_2D_files\image139.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="bbbeff2c-f625-4d85-9aef-abd68f86499c" FileName="SciChart_Android_2D_files\image140.png" SourceData="" BuildFlags="" />
      <OtherFile Id="93fb7774-282a-4581-9623-1d04e2645dd8" FileName="SciChart_Android_2D_files\image141.png" SourceData="" BuildFlags="" />
      <OtherFile Id="76352355-9395-491c-af95-7647b86945f1" FileName="SciChart_Android_2D_files\image142.png" SourceData="" BuildFlags="" />
      <OtherFile Id="182f2ebc-38d5-43b0-94c1-fc9ef091d64d" FileName="SciChart_Android_2D_files\image143.png" SourceData="" BuildFlags="" />
      <OtherFile Id="515f312b-951e-4f64-8fd7-523cfe4ac3d2" FileName="SciChart_Android_2D_files\image144.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fe8e18f5-eae2-4902-abce-79958c4392b0" FileName="SciChart_Android_2D_files\image145.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f8f24315-111f-424e-8936-8eac9874c719" FileName="SciChart_Android_2D_files\image146.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4aef2d60-461d-4159-936b-84bdbbcfbf8d" FileName="SciChart_Android_2D_files\image147.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ec54b801-5f74-453f-9854-6f2560a79f0e" FileName="SciChart_Android_2D_files\image148.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d223194b-c005-4ce5-96f1-25bde3d74ff8" FileName="SciChart_Android_2D_files\image149.png" SourceData="" BuildFlags="" />
      <OtherFile Id="10f0befb-82a9-4960-bb5d-c842f57ddab3" FileName="SciChart_Android_2D_files\image150.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="73c9db16-5850-4bbe-930a-467a51cb94dd" FileName="SciChart_Android_2D_files\image151.png" SourceData="" BuildFlags="" />
      <OtherFile Id="80eeae43-dac5-426f-a2b8-541fedffc853" FileName="SciChart_Android_2D_files\image152.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a60bf05e-5974-4249-832a-157675530608" FileName="SciChart_Android_2D_files\image153.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dece9918-3993-4e73-93a2-1df00d862403" FileName="SciChart_Android_2D_files\image154.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cfc894ea-ae69-406f-a999-765daee1c6d9" FileName="SciChart_Android_2D_files\image155.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="f51e4788-2ca8-4473-ab82-6a00d2b06777" FileName="SciChart_Android_2D_files\image156.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="bc39ace3-31e1-48c5-8bd7-5a0d13f98b93" FileName="SciChart_Android_2D_files\image157.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e8b0fcd9-e9ca-4008-966b-1f972db04350" FileName="SciChart_Android_2D_files\image158.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9562ab4f-6e1b-4df4-839b-3dad8d5d1837" FileName="SciChart_Android_2D_files\image159.png" SourceData="" BuildFlags="" />
      <OtherFile Id="35d620e7-3ea6-4fdf-948c-2b9c06518054" FileName="SciChart_Android_2D_files\image160.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="99265e85-1f7d-4321-8a22-0d14baab5329" FileName="SciChart_Android_2D_files\image161.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1a0a072d-9f51-4f87-b4e1-b53f5c695e05" FileName="What_is_SciChart_Android-_files\image001_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ac9d10e4-99f1-4700-85a4-046a81857361" FileName="Installation_and_System_Requirements_files\image001_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d06f18a7-92fe-44d0-9e46-49f9f8cc3933" FileName="Installation_and_System_Requirements_files\image002_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b5efd484-7a52-4fda-ae47-8b7a89330080" FileName="Installation_and_System_Requirements_files\image003_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4f84d92d-09db-4de7-b5a9-0efdb5f7ae08" FileName="Installation_and_System_Requirements_files\image004_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="97cfeef0-0446-46cf-88a6-5e55ec610f37" FileName="Installation_and_System_Requirements_files\image005_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3b9208e3-8233-45df-b045-e433973795c0" FileName="Installation_and_System_Requirements_files\image006_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="895bf83a-43cb-41aa-b61b-fe36cf99b181" FileName="Installation_and_System_Requirements_files\image007_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f87d0fe0-bf24-41d8-8744-02d4b16d7b6c" FileName="Installation_and_System_Requirements_files\image008_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8f293ad8-ec45-4d4d-a6b7-90659666d556" FileName="Installation_and_System_Requirements_files\image009_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c244038f-0cd2-48e4-87ca-52e9afb3ee33" FileName="Installation_and_System_Requirements_files\image010_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a7eebba0-f017-4712-a575-2b269310d0d6" FileName="Installation_and_System_Requirements_files\image012_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="81d573fc-d937-4664-ad12-078782c97804" FileName="Installation_and_System_Requirements_files\image016_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9326ff1b-3d37-4901-8591-d4b400510805" FileName="Installation_and_System_Requirements_files\img013.png" SourceData="" BuildFlags="" />
      <OtherFile Id="99db0633-8bda-4d5d-b510-fbf153499d2d" FileName="Installation_and_System_Requirements_files\img014.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dcf7d319-34d2-4c30-8d83-1406fdbb3103" FileName="Installation_and_System_Requirements_files\img16.png" SourceData="" BuildFlags="" />
      <OtherFile Id="47e0aeea-1e27-48a9-8e0c-946001ad1d30" FileName="SciChart_Android_2D_files\img_0001.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d4dbbc1a-175d-4d68-8701-4a325eca7365" FileName="The_SciChart_Android_Examples_Suite_files\img_0002.png" SourceData="" BuildFlags="" />
      <OtherFile Id="949439e8-5719-4c96-9a2c-f610d0ef4b9b" FileName="Installation_and_System_Requirements_files\img013_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8c922f38-9535-46e3-b2b7-4ed33e315d1b" FileName="Installation_and_System_Requirements_files\img014_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e4fe6b0f-ec1e-4fc9-8a5e-ee271860e135" FileName="Installation_and_System_Requirements_files\image015_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9bac647b-70ef-4594-ab09-b85b39500684" FileName="Installation_and_System_Requirements_files\img16_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="424be378-ce25-4ceb-a268-c89557110e83" FileName="Installation_and_System_Requirements_files\image017_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0c8d5950-4234-458e-9618-2e8ba4f4025c" FileName="Installation_and_System_Requirements_files\image018_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="82dbcfd8-feb8-4322-a780-491747191ebc" FileName="The_SciChart_Android_Examples_Suite_files\image002_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2feb6f03-006b-4e1d-be25-08e7f996250c" FileName="The_SciChart_Android_Examples_Suite_files\image003_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dd3a7d47-d761-4990-863f-fbedae90d649" FileName="The_SciChart_Android_Examples_Suite_files\image004_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1fbc441a-1c06-41e8-b05a-c5aa9a2b15db" FileName="Installation_and_System_Requirements_files\image011_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a8ae7f26-c7a9-4484-9014-ea8482794005" FileName="images\docX!1.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="62f6b030-f411-4937-95e5-5b850abdc543" FileName="images\docX!1_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e37c103b-b446-4c32-b7cc-cd580602bfe5" FileName="images\System Properties 2016-07-01 10.19.11.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c8f1fa08-c4f0-499b-a2f1-40d3f79a0836" FileName="images\System Properties 2016-07-01 10.19.11_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2217056f-d851-4a1a-8fb7-959d05abb6cb" FileName="images\Environment Variables 2016-07-01 10.23.05.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="70c0e8cd-c015-4936-b16d-ea371354d644" FileName="images\New System Variable 2016-07-01 10.43.51.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="0212b764-8c57-48ad-9322-fb2f0ae3f503" FileName="images\Environment Variables 2016-07-01 10.23.05_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="8fe41f19-728a-4bec-a3a5-3e40f529c596" FileName="images\New System Variable 2016-07-01 10.43.51_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fc919819-2085-4bf0-99a7-15177728154e" FileName="images\im013-015.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="07cee199-ecc1-43cb-bef4-ada210667eb4" FileName="images\img12.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="af79115f-cb91-4164-937f-2fb6f890ad10" FileName="images\img16.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d37d73e8-addf-4aa2-9b2b-209c2af57eba" FileName="images\img17.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3b1f717b-7cb5-48e4-9053-ea49bb9e0b55" FileName="images\img18.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a7c8bce6-f1ca-4bb6-87f4-a0203a42d04d" FileName="images\img19.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="85c2e9b3-6392-4d93-b215-e705d3222a9e" FileName="images\img19_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c68a1e43-1932-43c1-a869-8a28141542e1" FileName="images\img20.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="0759c513-d39f-4d94-b08c-9332a0160ce2" FileName="images\img21.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e5f5cd1f-7e0e-42f2-b874-4000e7c22b91" FileName="The_SciChart_Android_Examples_Suite_files\image001_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bbec7a51-399c-4508-9d1a-5174086189e5" FileName="images\image_2 - Windows Photo Viewer 2016-07-04 10.06.26.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7c762aae-6db1-43c3-96bd-e9156c77e64c" FileName="images\image_2 - Windows Photo Viewer 2016-07-04 10.06.26_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c0823ced-6d34-4446-adb1-079264698335" FileName="images\image_2(s).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7342032b-0705-4e52-ba3e-501be9fca4cd" FileName="images\image_2(s)_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9a2e6a83-6eb8-4087-b2dc-b1e4d335efe8" FileName="images\image3.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b1f8c040-c038-488b-abff-ac86b34203b2" FileName="images\image_1.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="74231212-6d37-4635-92c5-f1488dfa8bf9" FileName="images\image_4.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b5afb2f1-534d-4bab-82a3-81a8284dcf02" FileName="images\image_5.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="be5f352f-027a-43f7-b02d-343c4d0257ea" FileName="images\image_6.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="796476db-93e4-4a7f-af1d-b5ef0add0edd" FileName="images\image_7.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b8c3b6ad-7f85-47a8-9c37-6264446326e2" FileName="images\1.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="8ea6acbe-4e73-4804-b899-8c6414b6d9db" FileName="images\2.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9d8da920-bc3d-4e2c-85ad-d95f70cf5d90" FileName="images\2_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="25d49d48-b00f-4b5c-b837-0b459f8a9953" FileName="images\1_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="47ad16a8-761a-4d9c-83f9-a11c401f7883" FileName="images\3.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a5f29ef9-a6e7-4fe6-a4b9-47de24ae589f" FileName="images\4.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="ce4b30af-5890-44ac-a425-71a1be11db0b" FileName="images\5.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7d4a7c1c-9978-463f-8279-09d50ebd66bf" FileName="images\6.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4ce9e98a-038c-4944-be5c-4b26e6999e5a" FileName="images\7.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="80743d9a-f22b-406e-8911-cfc029df81d1" FileName="images\8.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="f3e1b6d9-4752-4ad6-b0a6-89e9abb601a3" FileName="images\9.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="90819d34-6ab4-4ea3-974f-3db46f29926d" FileName="images\10.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3c118c26-1a53-422b-98a1-67cc641a7f9b" FileName="images\11.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="0d9bf500-dfeb-49c7-a533-ad527dec7f12" FileName="images\12.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5e051a80-b736-4ec7-b638-d1d871fc6f77" FileName="images\13.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="90e19c10-626a-44a3-93c3-eaeca972334b" FileName="images\14.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c430d102-c933-4184-98cf-e07453f6942f" FileName="images\15.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="41f1e03c-3d2a-45cb-889b-9de24fb7c25a" FileName="images\16.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="92ed2505-a8cc-48be-9a8a-5c10fc8b9639" FileName="images\5(2).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3586d3ea-6329-4de2-9795-abc0be92dd28" FileName="images\2(1).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="e62409ec-7f7c-42c0-b23d-897d8aadb60c" FileName="images\2(2).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a7013264-639b-45ce-8d08-290d1aaab6d6" FileName="images\2(3).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4a71d77e-61c3-4f62-8120-96094c9584d7" FileName="images\2(4).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1ff21990-1638-425e-822a-32c69901a86e" FileName="images\2(5).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="57de8466-ce4a-46c6-899d-d86be65c64a8" FileName="images\2(6).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="06abf19d-a253-4c04-a5ad-0db131cac671" FileName="images\2(7).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="52795bca-5943-47c5-b47a-b11f14ba80a4" FileName="images\2(8).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1ea3831c-1699-44e7-a82a-cdad2c087375" FileName="images\2(9).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="96e09961-3e18-4795-b77e-ffbb2e64ca53" FileName="images\2(3)_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3186c999-4a1c-4991-bf47-ab4be6b016f1" FileName="images\3(1).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="243ccec1-7a8c-4f6a-9022-46b4a9b420f7" FileName="images\3(2).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9589334a-2440-4e41-9b8d-699252236966" FileName="images\3(3).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3833641f-4c97-407a-a1b1-aa928a68bb97" FileName="images\3(4).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="0749416b-daa0-4fb3-aeda-25394af2b05b" FileName="images\4(1).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="46b14ba8-a3e0-4421-91c2-1a4b3273a6de" FileName="images\4(2).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="15539410-9641-40df-86c9-20ffea1447cd" FileName="images\4(3).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="16137ac8-de25-4f9b-a421-929a7c2766ac" FileName="images\4(4).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="037f5e10-16e5-4dcf-a666-35fa5f10226f" FileName="images\4(5).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="108aab08-a01a-4e99-955c-84f4089ba9e6" FileName="images\4(6).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="44fb11a7-1372-4f3f-ab31-374ff154903e" FileName="images\4(7).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1701eaf8-b4d0-40b6-af8b-2ad04ed3ad7f" FileName="images\4(8).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c7edd4b9-8be3-4177-b4bd-95a454630bff" FileName="images\4(9).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="34e865e0-1194-46cb-bab8-e7bdfa3a7408" FileName="images\4(10).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="33edb105-1409-472b-b941-915d33eb68a1" FileName="images\4(11).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="9c8489ec-3781-46ea-a4bd-08fe9f5cd117" FileName="images\4(12).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="345c44ad-d0da-4ac7-b4bb-ec1f7fec0990" FileName="images\4(13).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1212caa4-d65d-4838-a7cf-4f99798166a3" FileName="images\4(14).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="deda2fab-facd-460d-bee2-0c709360750e" FileName="images\4(15).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a04a6367-06d1-49f5-90d1-ad0e9ac3c1bf" FileName="images\4(33).jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="5dccbb77-74dd-47cb-ace8-5b4d2b5ef6b0" FileName="images\licensing-scichart-android.png" SourceData="" BuildFlags="" />
      <OtherFile Id="785d80d2-a0d8-424f-9b7f-a837876577e0" FileName="images\licensing-scichart-android_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="22616529-b2c9-424e-9a9c-f89ce368744d" FileName="images\scichart-android-examples.png" SourceData="" BuildFlags="" />
      <OtherFile Id="49fc4189-d386-4a06-a991-0b710faa2276" FileName="images\scichart-android-examples_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="82697b0a-febb-4438-8f3f-9fa9c83e3a66" FileName="images\image_1_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="924010e7-398a-45de-9d21-58e4ce20905e" FileName="images\image3_thumb.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="00f9842e-3b1e-495f-899b-d0e3f6c0d16f" FileName="images\android-studio-open-project.png" SourceData="" BuildFlags="" />
      <OtherFile Id="db61c4c8-7e7a-4514-a659-1d894415171e" FileName="images\scichart-android-gradle-build.png" SourceData="" BuildFlags="" />
      <OtherFile Id="99defab2-b665-4440-b20a-c4443174cc8b" FileName="images\scichart-android-gradle-build_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6bc010dd-dcc5-4037-b7f9-c31b0e6be2f4" FileName="images\scichart-android-run-examples.png" SourceData="" BuildFlags="" />
      <OtherFile Id="19846a5b-a4df-4214-8f6b-c81924c31a1c" FileName="images\scichart-android-run-examples_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1f158db2-755c-49af-bd92-032a464c77ed" FileName="images\scichart-android-emulator-start.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d8708c27-03ba-4034-9252-995642069b38" FileName="images\scichart-android-emulator-start_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="46d9fdf5-ec08-4a5c-9235-40868301c749" FileName="images\scichart-android-apply-license-before.png" SourceData="" BuildFlags="" />
      <OtherFile Id="64609b50-b870-48c5-8699-5ebd26e185cb" FileName="images\scichart-android-apply-license-before_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e9ddf668-fa48-4a58-80ac-c200db77873a" FileName="images\scichart-android-apply-license-after.png" SourceData="" BuildFlags="" />
      <OtherFile Id="66756357-1415-47c6-b865-90b234b5f69d" FileName="images\scichart-android-apply-license-after_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="026f9521-174d-4757-884d-24da5440e852" FileName="images\scichart-android-examples-running.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41f263e9-2f02-49c7-8ee2-e4b928449c2a" FileName="images\scichart-android-examples-running_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bacd1ee6-55a4-41fb-ba5d-ffa32cb0606e" FileName="The_SciChart_Android_Examples_Suite_files\img_change_category.png" SourceData="" BuildFlags="" />
      <OtherFile Id="567c3eae-c055-402b-b141-ac1552605c22" FileName="The_SciChart_Android_Examples_Suite_files\examples-app-home.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3058e7e2-706a-400c-aefd-df9a3b9a4a75" FileName="The_SciChart_Android_Examples_Suite_files\examples-app-home_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c413822a-7480-4618-bb6e-f084e8ed23c1" FileName="The_SciChart_Android_Examples_Suite_files\search-examples-with-cursor.png" SourceData="" BuildFlags="" />
      <OtherFile Id="de3891a0-b22f-4bd1-b229-ae6de6549327" FileName="The_SciChart_Android_Examples_Suite_files\search-examples-with-cursor_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5e531a12-ec5f-4e95-99a2-aa4829e2490b" FileName="The_SciChart_Android_Examples_Suite_files\examples-touch-pan-drag.png" SourceData="" BuildFlags="" />
      <OtherFile Id="223db07f-2173-47ac-acf9-cea7e1ff3735" FileName="The_SciChart_Android_Examples_Suite_files\examples-touch-pan-drag_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f6f45699-0549-4922-a139-82222ed55212" FileName="The_SciChart_Android_Examples_Suite_files\examples-show-menu.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e31e1a71-2033-4752-8b77-66e40ea4ffc3" FileName="The_SciChart_Android_Examples_Suite_files\examples-show-menu_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8d8497b1-44f0-4cb6-9178-e36f5c01d510" FileName="The_SciChart_Android_Examples_Suite_files\android-examples-view-source.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c7c44ec8-98e6-4998-be91-d6e953dc67c6" FileName="The_SciChart_Android_Examples_Suite_files\android-examples-view-source_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2ca369eb-7a18-4097-8695-bd33f7bb33fb" FileName="The_SciChart_Android_Examples_Suite_files\scichart-examples-share.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c0ec830a-55c2-4112-8c4b-67b43cf9357a" FileName="The_SciChart_Android_Examples_Suite_files\scichart-examples-share_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4db85bc7-594e-4063-8cfc-2bc5f1ec87c2" FileName="The_SciChart_Android_Examples_Suite_files\scichart-android-export-share-to-dropbox.png" SourceData="" BuildFlags="" />
      <OtherFile Id="300f4212-7937-4e8d-afdc-63a1a313080e" FileName="The_SciChart_Android_Examples_Suite_files\scichart-android-export-share-to-dropbox_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="07e49ad9-517c-4cb5-9cff-054d86a4186a" FileName="The_SciChart_Android_Examples_Suite_files\The-exported-example-project.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e66f6b5a-c46c-418a-b46f-fbec0ef37644" FileName="The_SciChart_Android_Examples_Suite_files\The-exported-example-project_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d4a91bc0-7c0f-44b9-b94c-3f0c3ca55e35" FileName="The_SciChart_Android_Examples_Suite_files\export-open-in-android-studio.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e75e5885-9c4b-40ee-878b-a5a4606c63be" FileName="The_SciChart_Android_Examples_Suite_files\export-open-in-android-studio_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="752051d5-3d98-4537-ac78-6de30cc86d08" FileName="images\what-is-scichart-android.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5f6ea060-8238-4fa8-b51c-ae59b4d129c7" FileName="images\scichart-logo1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="96fde9e7-f147-4ecd-8c07-361547b637fe" FileName="images\MultiXAxes1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9a9aca16-551b-46e5-93b1-e87ca66e2bfe" FileName="images\MultiYAxes_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e7c8f55d-b96a-4c9a-8c22-2cdb33ef57fe" FileName="images\LineSeriesVRDr_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="31213648-d4dd-43f4-b978-164bae22e659" FileName="images\LineVR_DR_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3f772771-31bd-42f4-8f2c-13b01856dd4b" FileName="images\ScatterGrowBy_VR_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="774bed66-a393-4880-ae01-1ad74293ffa0" FileName="images\VerticalChartsMulti_framed (1).png" SourceData="" BuildFlags="" />
      <OtherFile Id="cf44f448-6b52-4c99-8bd0-8c22e9775cb6" FileName="images\innerAxis_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="df93c365-7d64-45a4-8acf-86b68de96469" FileName="images\CentralXAxis_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0a6e2a50-0a3d-48da-ba3a-effff0f68b7d" FileName="images\ShiftedAxes_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b4d01977-2bd0-46ab-b692-707b9de5dde4" FileName="images\ShiftedAxesPinned_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0204160e-ec77-4451-8fad-6e344176971f" FileName="images\VerticalChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="db9a80fb-ac9f-400b-9aa0-eb252793467f" FileName="images\VerticallyStacked_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="547c2e02-a885-4d21-93db-9f309a3f443a" FileName="images\ScatterConvertingCoords.png" SourceData="" BuildFlags="" />
      <OtherFile Id="76a01704-697c-4c0c-91ea-a47aeb503304" FileName="images\MultiYAxes.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a0bfc98b-410b-4fc8-b9a3-a0f588f1e27e" FileName="images\MultiAxesStyling_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="283bdd1e-c961-4e81-a107-ffcf2859e1db" FileName="images\MultiAxesWithTitles_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dc210083-15b0-4700-be93-0b539c103936" FileName="images\CursorTextFormatting_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1dc14df5-82ff-471e-a2e1-88ece4e34247" FileName="images\TextFormatting_framed (1).png" SourceData="" BuildFlags="" />
      <OtherFile Id="e028747f-da44-4635-9b31-0994aeda90a3" FileName="images\image003.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c57fdd2b-eec4-42e7-93fe-8386ef1bd41f" FileName="What_is_SciChart_Android-_files\SciChartSurfaceBasics_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="44508292-9c02-4b45-8ba3-7508e18418ba" FileName="images\PointMarkers_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="321386c4-536c-4ee9-85ce-dd182c9a638b" FileName="images\SpritePointMarker_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2a2fc83e-aa28-457d-87d8-8ca727aaeddc" FileName="images\UsePointMarkers_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="620d6b31-8cd8-43f8-b2e2-638f33b2187e" FileName="images\UsePaletteProvider_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="96a2e6af-eee2-4f7a-8643-0d400f5e3dcd" FileName="images\PaletteproviderThresholds_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="732d11f7-0c71-4dc8-a05b-b98c8e322601" FileName="2D_Chart_Types_files\BandChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b5cbc63c-0bf0-42e8-a5d8-fd6a0c7f1f2b" FileName="2D_Chart_Types_files\CandlestickChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="04cf8a7c-22d5-456d-9a8f-c396c415d708" FileName="2D_Chart_Types_files\ColumnChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="70359325-a9d4-48cc-a0ca-86c8c0f8605b" FileName="2D_Chart_Types_files\DigitalBandChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e34ed8fe-179c-4bc7-8261-a28ff5b10de5" FileName="2D_Chart_Types_files\DigitalLineChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="64f2fb06-377f-46f9-a386-a1727277e783" FileName="2D_Chart_Types_files\DigitalMountainChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0c0a6895-219a-453e-acf0-1a04e84d7f72" FileName="2D_Chart_Types_files\HeatmapChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2e6d7cfb-420d-4925-8e51-e8b2fa8ded15" FileName="2D_Chart_Types_files\HeatmapChartwithText_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5583b37a-f15e-4977-8555-6f55c7b6d3eb" FileName="2D_Chart_Types_files\ImpulseChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="229f00b1-a62e-4479-b6e5-d27a16495d5c" FileName="2D_Chart_Types_files\LineChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f51111cd-2ded-4b50-bc2c-34518d8d8104" FileName="2D_Chart_Types_files\MountainChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bb78acc8-cf56-4b21-87ae-b85088b21ca1" FileName="2D_Chart_Types_files\ScatterChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d6be103b-6435-4ace-a7a8-148d68264c68" FileName="2D_Chart_Types_files\UseHeatmapPaletteProvider_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9aed73f1-b211-47b7-a31d-392dca7b837f" FileName="2D_Chart_Types_files\ErrorBarsChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f4b72d57-b4a5-40bd-841d-4ae4b82f2f1c" FileName="2D_Chart_Types_files\OhlcChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="058bde54-e809-4382-94b0-86a8dde98cc4" FileName="2D_Chart_Types_files\PalettedLine_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8afbabbd-9cfe-43d9-aed2-d974071ea964" FileName="2D_Chart_Types_files\PalettedColumns_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e86d0de-6e41-4161-ad30-dd189dbf3f6d" FileName="2D_Chart_Types_files\PalettedCandlesticks_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1ed5b2cb-1b7d-4da3-b625-2e8eb1f52e62" FileName="2D_Chart_Types_files\GapsInCandlesticks_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9b704e22-b04a-4d21-8969-e82ae2dabe38" FileName="2D_Chart_Types_files\PalettedMountain_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="16a0e178-1bf6-4375-b91e-f1dec498a576" FileName="2D_Chart_Types_files\ImpulseChartBaseline.png" SourceData="" BuildFlags="" />
      <OtherFile Id="25431379-8ae6-432c-b641-0911f4d94c2a" FileName="2D_Chart_Types_files\ImpulseSeries_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="30c935f1-44b8-4da8-8aa9-6d32dbc57ebc" FileName="2D_Chart_Types_files\ErrorBarsChart_Features.png" SourceData="" BuildFlags="" />
      <OtherFile Id="57142d40-85da-42f1-a44a-ba716871cfc4" FileName="SciChart_Android_ChartModifiers\ChartLegendsAPI_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="51b4ab40-2e08-4a2d-8ea7-e0d72b1bd3d8" FileName="SciChart_Android_ChartModifiers\SeriesSelection_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="563cac88-a0f5-4d5e-98fa-612bba675445" FileName="SciChart_Android_ChartModifiers\TooltipModifierTooltips_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fba08bd9-987d-4ac0-9a81-576fef4a4810" FileName="SciChart_Android_ChartModifiers\UsingCursorModifierTooltips_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e127a3e5-fabb-4075-a0ee-2ce6834692d0" FileName="SciChart_Android_ChartModifiers\UsingRolloverModifierTooltips_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a740d494-38c9-4e57-99b2-a53843e0c623" FileName="SciChart_Android_ChartModifiers\Tooltips_NearEdge_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41f96af4-7781-4087-bcc2-c91dc37d000e" FileName="SciChart_Android_ChartModifiers\TooltipModifier_Components.png" SourceData="" BuildFlags="" />
      <OtherFile Id="250a2a94-5a4e-4873-bca3-74a78475bb37" FileName="SciChart_Android_ChartModifiers\Cursor_NearEdges_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1c149279-a074-4a03-83f3-92aa4aab762b" FileName="SciChart_Android_ChartModifiers\Cursor_Tooltips_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5adecade-b986-4890-93cd-95e39102b1ad" FileName="SciChart_Android_Annotations\Annotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ab9a3d1a-bae3-48f1-8415-52e87be8a165" FileName="SciChart_Android_Annotations\AnchorPoints.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1844ea06-01d2-4300-9cff-9b9917bba73d" FileName="SciChart_Android_Annotations\AxisMarkers_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eb333de9-cb78-414a-b89c-f7ee0f7b60ba" FileName="SciChart_Android_Annotations\BoxAnnotation_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d690ab29-f31c-4165-9545-4511efe8289d" FileName="SciChart_Android_Annotations\CustomAnnotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b2b52f4e-8bd9-485f-ac5c-4f6a87eccf2d" FileName="SciChart_Android_Annotations\HorizontalLineAnnotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a797c117-19ba-44c8-88ca-82b906afed8b" FileName="SciChart_Android_Annotations\LineAnnotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="83c05856-f417-45fa-81d0-bb6ab866d86a" FileName="SciChart_Android_Annotations\TextAnnotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="17495fe0-f21d-4245-8b71-040f111f6f4a" FileName="SciChart_Android_Annotations\VerticalLines_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b8b085b7-84b2-4cf8-9179-e2a509348ad9" FileName="SciChart_Android_Annotations\ArrowAnnotations_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="60f32201-0aee-4c43-8842-fe4205220782" FileName="images\LogAxisFormatting_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3a18caf5-2038-4f16-82be-1fd55512b138" FileName="images\LogAxisMajorTicks.png" SourceData="" BuildFlags="" />
      <OtherFile Id="afefa489-4857-4a7c-8421-ad35f5323936" FileName="images\LogAxisMinorTicks.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fc62045a-6aec-4d71-a3f2-d10c7a4bae45" FileName="SciChart_Tutorial_files\ConfiguringBuild1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="508c9063-eedd-4de3-91bb-8e2ee2f301a2" FileName="SciChart_Tutorial_files\ConfiguringBuild2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="04b60305-f074-49a6-b000-e6b8554b60d9" FileName="SciChart_Tutorial_files\CreateProject1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a9010f7b-843a-4e7c-816d-55ac6f1e42ee" FileName="SciChart_Tutorial_files\FirstChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eec35e16-4d5a-4297-b956-15bb06d5b322" FileName="SciChart_Tutorial_files\ChartWithSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6b69389c-c6b2-4cb3-985f-44c764f571ee" FileName="SciChart_Tutorial_files\InteractionModifiers.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="c9cb0c6d-f626-44b6-bbd8-1c6be1441c36" FileName="SciChart_Tutorial_files\CursorModifier.png" SourceData="" BuildFlags="" />
      <OtherFile Id="881a5426-75a7-4a7d-af75-d3af15e6677c" FileName="SciChart_Tutorial_files\UpdateDS.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="11135840-3dc1-4aac-9453-fd4a0b3eb344" FileName="SciChart_Tutorial_files\AppendData.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="ea34bc38-082f-41bd-8a5c-a155ccf2ac96" FileName="SciChart_Tutorial_files\ScrollingFifo.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="b78c52b1-d119-4dc7-a652-e168e633df4a" FileName="SciChart_Tutorial_files\Annotations.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="20961980-2fe9-4cfa-b8bc-86ca829bffdb" FileName="SciChart_Tutorial_files\TwoYAxes.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b8629287-6623-4efe-8f84-33b9c08c16d6" FileName="SciChart_Tutorial_files\SecondaryAxisWithSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="214519b5-5c51-4c52-b543-e92c3d08e128" FileName="SciChart_Tutorial_files\SecondaryAxisWithAnnotations.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="c10e077e-1130-45ad-a714-78d3cb35a563" FileName="SciChart_Tutorial_files\SyncTwoCharts.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a117979d-49bf-4ab4-b026-653c43a1c27f" FileName="SciChart_Tutorial_files\SyncChartsScrolling.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="9dfdf7a8-c857-4ed2-9c04-c38ff073eca4" FileName="SciChart_Tutorial_files\ChartWidthsDesynchronized.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cd8e57b9-9a9c-4825-95e3-65319575d6c8" FileName="SciChart_Tutorial_files\ChartWidthsSynchronized.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ddc13592-e3cd-4acf-835e-7973c7bca79e" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddReference.png" SourceData="" BuildFlags="" />
      <OtherFile Id="78c01ab4-ce34-4470-b09b-9972a2fc8594" FileName="SciChart_Xamarin_Tutorial_files\XamarinCreateChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d17102c2-818f-4123-b14f-fb32d78c51ac" FileName="SciChart_Xamarin_Tutorial_files\XamarinInstallFromNuget.png" SourceData="" BuildFlags="" />
      <OtherFile Id="73697df1-cc70-474b-9d0e-645889bb1c69" FileName="SciChart_Xamarin_Tutorial_files\XamarinNewProject.png" SourceData="" BuildFlags="" />
      <OtherFile Id="22646fdd-de84-4367-949d-b7a992417d88" FileName="SciChart_Xamarin_Tutorial_files\XamarinProjectFinishedConfiguration.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6687e8e1-b690-49ea-b118-5dfae7ba0ce3" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bb10d478-1e33-4014-b4ae-f816d6f6ab11" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddLegendAndTooltips.png" SourceData="" BuildFlags="" />
      <OtherFile Id="810ebd24-4c64-4371-98c6-9903e34ce9ba" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddDataSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="a025e5f8-2337-479e-9934-b0fc53ace93d" FileName="SciChart_Xamarin_Tutorial_files\XamarinFifoDataSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="5ff655b6-116a-46ce-8eee-8240f46ff48f" FileName="SciChart_Xamarin_Tutorial_files\XamarinUpdateDataSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="1d886e84-47d0-4b5e-a0e7-8411e9465942" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddZoomPanBehaviors.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="d27c8d7a-7c93-4d64-9bc3-b9064ac82890" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddAnnotations.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="3318c80b-b417-401c-8ca2-67159f3ca014" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddAnnotationForSecondaryYAxis.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="8ecf4d57-9838-4016-957a-b4d805507e4a" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddSecondaryYAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="85360489-272d-4b90-82f6-6b9faf8b2292" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddSeriesForSecondaryYAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6a45ae5f-aad6-4d98-8625-8670bb37ff7d" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddSeriesForSecondChart.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="50592861-5d5c-437a-8ca3-b99b0427efa7" FileName="SciChart_Xamarin_Tutorial_files\XamarinAddSharedModifiersForTwoCharts.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3e4584b7-1e92-4109-91f3-e3169e1b4602" FileName="SciChart_Xamarin_Tutorial_files\XamarinCreateSecondChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c2190a60-d877-475a-a1cd-6805524b3221" FileName="2D_Chart_Types_files\StackedColumnChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="606940e1-f5a1-4aed-9d2c-7eaf48c9003c" FileName="2D_Chart_Types_files\StackedMountainChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="722f166a-5ebc-4226-bf4c-536289d0218f" FileName="2D_Chart_Types_files\BubbleChart_framed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="27af937e-f41d-4690-a673-873959cb27ea" FileName="SciChart_Tutorial_files\SelectLibraryProperties.png" SourceData="" BuildFlags="" />
      <OtherFile Id="be61dcea-cf7e-4173-8d37-3b141199dace" FileName="SciChart_Tutorial_files\SwitchToProject.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c393e950-d38e-461b-ad4b-1f8363e81dd0" FileName="SciChart_Tutorial_files\WatchJavadocsInAndroidStudio.png" SourceData="" BuildFlags="" />
      <OtherFile Id="249ae9eb-bba0-48a7-a5eb-f60cd97d3044" FileName="SciChart_Tutorial_files\AddJavadoc.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b51b8694-4e5a-41d0-960b-a2cc563cf678" FileName="images\AndroidMultiAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5ff07d5a-3872-47c9-a95a-241d210cbd35" FileName="images\AndroidMultiAxis_thumb.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d6967f3d-8340-415f-bdbb-d8018fdd9a34" FileName="images\scichart-android-examples-page.png" SourceData="" BuildFlags="" />
      <OtherFile Id="72502178-591e-4369-8d8d-1b067fef79b6" FileName="images\xamarin-examples-list.png" SourceData="" BuildFlags="" />
      <OtherFile Id="520df8a5-4003-412c-9660-cd6d92733f00" FileName="images\visiblerangelimit1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dad22cc1-f568-4b9c-a6a4-ef6254730360" FileName="images\visiblerangelimit2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="64901758-98ae-4f05-8d57-6bf07331e7f4" FileName="images\Axis3DTickFrequency.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5a9714f6-a768-4b59-81b8-d7f3c45c112a" FileName="images\WorldCoordinates.png" SourceData="" BuildFlags="" />
      <OtherFile Id="50085378-812f-4a02-bbd2-07bf215e5985" FileName="images\StyleAxis3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b084f750-8d41-41fc-a680-aeebb3e987d3" FileName="images\AndroidScatter3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0d82b662-6748-4bd9-999c-2df942af958c" FileName="images\AndroidBubble3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6a64b368-96a3-456e-81b9-5f85058e847e" FileName="images\AndroidColumn3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="458db204-d418-4be8-b9eb-42d65983394f" FileName="images\AndroidImpulse3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3f77ff29-7e7e-4036-93d9-d4a4e653a985" FileName="images\AndroidPointLines3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="52527609-a922-4d94-b2a5-73fd4a0543f9" FileName="images\AndroidPointLine3DChartLineStrips.png" SourceData="" BuildFlags="" />
      <OtherFile Id="34e316f0-35f9-4733-8857-c36206a63383" FileName="images\SingleRowColumn3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bba6f1d6-7cbd-433c-9f7b-3f651d90e353" FileName="images\SingleRowImpulse3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c709d0b7-8a0a-4f31-a899-aebb7c5a6c3d" FileName="images\TexturedMeshPaletteMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5ee8ae21-a90d-479e-8ae8-176fdba7eda6" FileName="images\SteppedGradientColorPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a52eb4c9-1324-44ac-8355-3961d6570382" FileName="images\SolidColorBrushPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bc48e7e9-8ded-4feb-9df8-5ab1f9174b14" FileName="images\GradientColorPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="10963ca3-7103-4a14-9c5c-865482ee0e6e" FileName="images\UniformMeshWithWifreframe.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eddd6fa2-aac5-4d6d-b5f1-b12a7914bd83" FileName="images\UniformMeshWithCountours.png" SourceData="" BuildFlags="" />
      <OtherFile Id="25cc0b6a-df44-4e03-8b32-0184094c222b" FileName="images\MeshMetadataProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="253f9cba-bb26-4c88-a76f-8ab70c7e2e52" FileName="images\FlatUniformMesh.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b132942b-01db-49c1-9f9a-7dfd8023c6cf" FileName="images\UniformMeshWithHighlighting.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9d15e4ce-82a2-486a-996c-ce48f9fa5cf6" FileName="images\UniformMeshWithSolidCellColors.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f67d4bde-0ec2-4ccf-964a-f1a4f5443110" FileName="images\VolumetricWaterfall3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="aeec5739-37b0-4a4e-9d6b-5406ee2f9106" FileName="images\WaterfallWithPointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dba86ed2-3ae3-435f-b785-af79b857f69f" FileName="images\CylindroidFreeSurface3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6f9c28a7-c117-4595-9fca-b4e3e49c1082" FileName="images\PolarFreeSurface3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9f5e661d-4a6a-4f0f-8ff1-43eb81b2bff2" FileName="images\EllipsoidFreeSurface3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="99671b13-4847-4bce-ab20-efd967062d33" FileName="images\CustomFreeSurface3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="92630c2f-732a-451b-b138-381b8b65afef" FileName="images\FreeSurfacePaletteFormula.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bdc7f099-e9bb-4651-a117-bbe246d0e3bf" FileName="images\PolarPaletteExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1da688c0-c82c-4b03-b959-09c2f2746b72" FileName="images\PolarFormula.png" SourceData="" BuildFlags="" />
      <OtherFile Id="36e94570-d4ab-47f5-a995-af92b17ae0eb" FileName="images\AzimuthExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f35d2418-495c-477e-90eb-41d7008133ad" FileName="images\AzimuthPaletteFormula.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7e16e42a-4590-463d-8eab-9d3cfffc43fb" FileName="images\RadialPaletteExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1b8669b6-50e9-4200-8d7e-6490299be336" FileName="images\RadialPaletteFormula.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6b7bec76-f819-44bb-8198-cb3e7ab379ee" FileName="images\AxialPaletteFormula.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2b1cadb9-839b-466d-bf71-627f6ba40739" FileName="images\AxialPaletteExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41c892dc-10f5-4d88-be4d-f47e613e1a3b" FileName="images\CustomFreeSurfaceMesh.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e81c5512-4f45-4422-a19d-90f51173dbf2" FileName="images\EllipseFreeSurfaceMesh.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8c4f4aa2-44a6-400b-b8de-8de061c08f8f" FileName="images\CylindroidFreeSurfaceMesh.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1f13de68-e5ad-4707-96d5-3c55de10f0f0" FileName="images\EllipsoidWithPolarPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bf787f23-75aa-4c89-b42d-beb41c307fba" FileName="images\EllipsoidWithAzimuthalPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2dadbd4d-4b68-4dee-ae9f-bf654a4f6235" FileName="images\EllipsoidWithAxialPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="011b3551-f53f-4dcd-9ada-24b748f9aee3" FileName="images\EllipsoidWithRadialPalette.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4a5ae4e0-0985-40b1-b4ae-4500dbfc5c2c" FileName="images\UniformSurfaceMesh.png" SourceData="" BuildFlags="" />
      <OtherFile Id="68bdb572-6184-45ca-8a31-e26a4e12de22" FileName="images\Waterfall3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="27b5c4ff-503d-4f0c-b24b-d64f00717507" FileName="images\FreeSurface3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2cd1c2b2-5b01-483c-87c0-e906cefb6282" FileName="images\UniformMeshWithoutHighlighting.png" SourceData="" BuildFlags="" />
      <OtherFile Id="62042520-ff92-49b9-821f-631a94949a02" FileName="images\WaterfallSolidStroke.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2698a610-7598-4443-b048-9c5882332c23" FileName="images\WaterfallZStroke.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e6886cf-d547-4860-bf29-25c4ce8eadc1" FileName="images\WaterfallYStroke.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5a408a96-e63d-4aa2-a3eb-9def511d6312" FileName="images\WaterfallSolidFill.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2b8df278-4d53-497a-8cc0-6c2b88422c79" FileName="images\WaterfallZFill.png" SourceData="" BuildFlags="" />
      <OtherFile Id="631a07ac-814b-4697-8eff-a17d59aaeba2" FileName="images\WaterfallYFill.png" SourceData="" BuildFlags="" />
      <OtherFile Id="722a9f29-9880-44e7-ada4-8c3b2a743a4f" FileName="images\VertexSelectionModifier3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="d1a79154-1abb-4049-b146-123dd4b2ea08" FileName="images\ZoomExtentsModifier3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="3bd98358-eafa-4a6e-94c2-e2308ee06b0e" FileName="images\PinchZoomModifier3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="d239eebf-22f3-4674-8209-a8e6628a2078" FileName="images\FreeLookModifier3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="1d3ee6cc-8a0e-456a-82e9-26d9ba463dc5" FileName="images\OrbitModifier3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="0bb7b887-d045-4d31-8a0a-d76a66bbef65" FileName="images\ModifyCamera3DProperties.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="ea79e821-fec2-4072-8be8-11456a762154" FileName="images\Camera3DExplanation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5494e94e-c624-4cbc-adcd-864af05b53cc" FileName="images\DataVsWorldCoordinates.png" SourceData="" BuildFlags="" />
      <OtherFile Id="634606e5-7c5e-461b-b1cb-e3a6f6a7b58a" FileName="images\AxisCubeRelations.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b5424167-411a-447f-8351-2011771b3752" FileName="images\LeftHandedCoordinateSystem.png" SourceData="" BuildFlags="" />
      <OtherFile Id="15d1f06a-1fe0-4e89-b00e-fee2372bab1d" FileName="images\CoordinateSystem.png" SourceData="" BuildFlags="" />
      <OtherFile Id="31fccbe4-0885-46fc-811f-941c2eaadcc3" FileName="2D_Chart_Types_files\PieChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cfaee807-1d3e-41c1-b05a-f03d3bf8e5ba" FileName="2D_Chart_Types_files\PieChartWithColors.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9e449746-82e2-469e-bdd1-08354434764a" FileName="2D_Chart_Types_files\PieChartWithTitle.png" SourceData="" BuildFlags="" />
      <OtherFile Id="031caef3-5a78-483d-aeb2-5bacc014e079" FileName="2D_Chart_Types_files\DonutChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f72d4d4c-677a-44d5-8100-e9f2992dff9c" FileName="2D_Chart_Types_files\DonutChartWithColors.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7619ead8-3d87-4fff-8c83-26f1063daa03" FileName="2D_Chart_Types_files\DonutChartWithTitle.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7b2f56cb-0175-4585-97f2-1a4721c10fd6" FileName="2D_Chart_Types_files\DonutChartWithRelativeSizingMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3e4a66e5-bb69-4e8a-b6b6-327b126599dd" FileName="2D_Chart_Types_files\MultiPieDonutChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0f5b75da-2c4d-42cb-8404-6ca93320c192" FileName="2D_Chart_Types_files\FanChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5615fc01-1cdd-428d-931f-0ed2c593884b" FileName="images\WaveAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="200f07ab-0df7-4db1-92ce-15b4535c5189" FileName="images\TranslateAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="218791ed-db4c-4ac6-a1e7-4b128a075a3d" FileName="images\ScaleAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="123c6d8a-6744-47a2-ba13-10ef42e8689c" FileName="images\SweepAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="99e94454-8a00-46f5-aaa6-6a179db52b72" FileName="images\CustomAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="96267b28-a137-4e39-b042-92d95cdf984b" FileName="images\LegendOutsideChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5bb7f3e5-60db-4e56-b9c5-445ee9e4f8f8" FileName="2D_Chart_Types_files\Spline-Scatter-Line-Chart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="002b3e7d-abe9-4913-9efa-cd556c0b2739" FileName="images\BlackSteelTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f6503b31-290b-4b7b-be21-921f0caa2182" FileName="images\OscilloscopeTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d3edd7c7-0065-4433-b12b-1188230eebd7" FileName="images\ExpressionLightTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4f99be14-0e36-453a-98b6-22e5e3dc4c25" FileName="images\ExpressionDarkTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="12e831fd-488f-44e9-a38a-e81f691da951" FileName="images\ElectricTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a5f2fd77-2e40-4604-a8e2-b0fc3b234ddc" FileName="images\ChromeTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7e1c87de-4a99-44e2-a655-580a3194025f" FileName="images\BrightSparkTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e2504c7c-6092-44c8-9cd6-8a99957c2306" FileName="images\SciChartv4DarkTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="928c7660-8886-49e3-95af-949051365ae2" FileName="images\CategoryAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5756d9cc-1a71-4512-babf-9af78a210e59" FileName="images\ValueAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9bec3af4-079b-43f6-bfb6-5df2037408dd" FileName="images\cartesianPlane.png" SourceData="" BuildFlags="" />
      <OtherFile Id="192f5aa5-ad9f-484a-8926-edce265bf116" FileName="images\Android v3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4658f287-26a0-42d1-952e-5885d8760a88" FileName="images\yaw45min.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="40ef056e-a7f3-4169-b5ff-f02f7f622b92" FileName="images\yaw90min.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="72f453f0-1059-44d8-9c65-5ae4d707568e" FileName="images\leftHand1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b19cb5e1-698b-4b4e-958b-03b1e1c8014b" FileName="images\rightHandCoordinate.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="805ddcd7-42e6-4916-a5f3-59af474fe35a" FileName="images\gradle2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dd553cfd-fca6-4862-8ff2-c0ce8f09e89e" FileName="images\configureYourProject.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c5d6ce7f-e4ff-45f2-81fe-77ff565aac0c" FileName="images\tutorial1Scatter1.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="fae37b0e-d1dc-4bf7-a56a-34e7ce2b55f7" FileName="images\littleXPY.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="d4c0f198-bec1-4082-bb8a-943ea65bf079" FileName="images\flattenChart.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b730f3cd-ee29-48f5-9457-33e9ca811c8b" FileName="images\tutorial1Scatter.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1c8d85f0-03d9-4a93-9f00-4c8257aeab17" FileName="images\pitchDown.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b577f97c-f0b4-428c-8701-47f265d2375a" FileName="images\rotateLeft90xyz.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="59e07970-398e-4c9f-89fc-03f0543bcaaa" FileName="images\rotateLeft.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a765ea33-8e75-433f-b221-2257bd37fdb3" FileName="images\customtooltip.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="538b9ed4-72f7-4cd4-aaf0-41f28ee27256" FileName="images\RealtimeAndroid.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="913a7712-77b3-4f0e-8c86-97d8eee0bde1" FileName="images\Xamarin3DNuget.png" SourceData="" BuildFlags="" />
      <OtherFile Id="382badc8-8b28-4eed-9fa5-0618501a3b1f" FileName="images\XamarinAddReference.png" SourceData="" BuildFlags="" />
      <OtherFile Id="63c39e14-7d0f-43f6-bb38-771544140365" FileName="images\XamarinNewProject.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e162aef1-a5b0-4674-9c30-3436d45b924c" FileName="images\XamarinTutorial_3DPointCloud.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f694a4aa-75f2-41ff-bb29-f6946198ae2f" FileName="images\XamarinTutorial_Empty3DChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eac6ba19-f5c9-427d-8ada-1cdd93cc6079" FileName="images\XamarinTutorial_RealtimeUpdate3D.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="f042a308-4c6e-4e19-ba34-6e52826c357c" FileName="images\XamarinTutorial_TooltipModifier3D.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7618aa07-1e89-454a-b13e-4d8411510c50" FileName="SciChart_Tutorial_files\grade2-1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="17aa6fd1-b8f6-4907-a05d-66ff6b9793ac" FileName="2D_Chart_Types_files\Rounded-Columns.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9463f7a9-d2da-46df-95b3-bc954057eff8" FileName="2D_Chart_Types_files\Spline-Line-Point-Markers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cd49850f-201d-4c45-84e0-9ba127b02ee0" FileName="2D_Chart_Types_files\Spline-Line-Segmented-Colors.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c4ee0473-33fa-424a-b2e6-dbb79e938456" FileName="2D_Chart_Types_files\Spline-mountain.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cc4950cc-3575-4f6b-a08d-262552759bc7" FileName="2D_Chart_Types_files\Spline_band.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3c77ef1d-63f1-4022-9bb0-ca2019401a7a" FileName="2D_Chart_Types_files\Spline-Line.png" SourceData="" BuildFlags="" />
    </OtherFiles>
    <DefaultStylesheet>stylesheets\customstyles.css</DefaultStylesheet>
    <DefaultCaptureDirectory></DefaultCaptureDirectory>
  </OtherFilesProjectPlugin>
  <SourceControlProjectPlugin />
  <TasksProjectPlugin>
    <Tasks>
      <TaskItems />
    </Tasks>
  </TasksProjectPlugin>
  <BookletsProjectPlugin />
  <TableOfContents>
    <TocLayout Id="c7552482-a1ae-44a2-a9fc-c757d62b5073">
      <Name />
      <Description />
      <RootNodes>
        <TocNode Name="" Id="c80f244d-54f1-4d4e-88c3-93ad6d8b57a5" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2019-09-03T07:31:40.4717704Z">SciChart Android v3 SDK User Manual</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="edbfc7d5-4de2-4301-88ca-1be44601225b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>d9186051-eaa4-42af-847b-342df3b8df30</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="ffd735ea-2f4c-4acd-9921-4ae3e3858402" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>60884af8-1f9d-412c-8e37-b8372204d648</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="eda01886-17e6-4502-bea3-ad6c250bd32b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>2af91ecd-b2a9-4699-9b71-53204a53b31a</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="c4c6e02e-67b7-4968-9f5a-d8ed9e08ccd3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>01e391ef-8c89-482d-946d-78188f80e2ad</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="c3eed7b0-2f6f-4702-ad6d-a89df0b37ac9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>98cea9da-4223-489f-a237-8d42ba8e0371</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="d5f66b4d-0669-4319-8214-efd277447b79" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>09079101-6ba2-4cdb-9fe3-0fb603ff0486</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="89663887-5487-4431-89e9-dbf63700263b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2017-06-08T10:48:29.6281317Z">Quick Start Guide</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="ddc59b2e-b6a6-472b-8817-1efeefe0d5c4" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2017-06-08T10:47:28.2281557Z">Tutorials (Java Android)</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="868dd211-94c3-4f97-894e-fe4fae86e1c2" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2247b20c-4be1-42cb-ad24-125310703f67</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3013d964-2f69-4822-9bc7-580eea63bd2f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>30f7b8a6-e55b-49bb-909f-998d6d24112e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c3fc32de-6aaf-4190-a017-4544a35c849e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>fae1bf5c-55ce-464c-aea8-8ebc45a065e6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="74f84040-cbd0-46df-bff0-e4b2b89f2c14" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2c5fca53-4e1c-426d-826b-966b97ed42b0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d6d4b056-1451-41e7-a688-daa16b680592" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>103afbcf-5d52-4774-96f0-0af4e7d4823d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="e2a8ba7a-4d7d-4d5c-9691-f3f510eb80dc" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>86dd9073-5257-4f09-b47a-9e1e7ee6cec8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="67f49698-9a40-4213-beb6-a0be7d5bf66b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b295f570-3b57-4bf8-8467-71b41908c024</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="389abae6-6366-4ad9-85df-a0989506aaf1" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="dac167af-a106-40dc-89d3-c9909151b11e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5cdfe58-f742-4e91-8ee7-f39b850743d7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="5a685a79-105e-4bd5-984a-08ee4e3a272f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2017-06-08T10:47:48.1081462Z">Tutorials (Xamarin Android)</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="958d4906-7b43-41bd-8d90-23a23ebd7099" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b208d225-0b83-4e60-a832-4b4b2716a469</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d916e603-65c0-4b88-bef2-97cb4c24fb93" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b4336b38-3278-4c42-b9c0-664f4fa984aa</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="76c1cf90-5fe5-4471-928b-d93881a79918" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b86b2dfe-b728-4429-b88a-c11cf8b3b39c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="023a9eee-f05f-44b5-9e02-7e9a81681f9b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9f69d415-734f-47d5-aeed-4d365923d22a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="8bd25dbe-0c58-4227-833d-6cd292c6c28e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f5961004-3679-4c2a-aae7-76518d89673b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="164a6621-645e-4743-b36b-e581c6dd3e01" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>3fb01ffa-b24c-4b41-8008-aa619fab0599</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="992bad9f-d974-4719-9f99-0fe572564e03" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>91c10eb1-300f-4802-94f6-6f5c95a88337</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="ec4b7ac9-530c-4650-99f5-119e73ce0644" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>54f0c76f-fc83-4d4e-8cef-764a9579ce75</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a59762b0-6ab8-4007-af56-1e351e374e91" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>8503b094-4083-4ae8-8f8b-6ccf55da1847</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="aaa1309d-08d5-47ef-8be0-c3c9b91bff16" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-06-22T08:54:30.7729668Z">The SciChart Android Examples Suite</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6de95ecd-6cab-4880-acdc-c355548d7cda" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>481993d4-64bd-4388-bb27-dba9b5784df7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="12dcc3bc-e6da-41d2-9ea0-4b457b4ed4dc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>988bddb7-1551-4be7-a4b1-8724dfe10ee3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="38396c20-a393-4e6c-8fe0-ceeaf41d91b7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>fd0edae3-8a75-49cd-bfc7-927e8651d17f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="e69369ee-ed8f-46d1-8de2-00f3c45618eb" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2017-06-08T10:48:17.5561774Z">Your First App</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="e31decc9-0dde-4aab-88e5-077f7410f390" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>290456e2-48c4-43ed-87a1-bc6452a926b6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3360748e-0eec-479e-add7-33550871753a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>3cfc9b61-37eb-419f-b3bc-aa90aee60d99</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="75f2b054-c286-4e4e-9154-0bce91567126" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>50843f34-0ce8-4df7-96d2-227f7f9dd47b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="e819e659-005c-4c0f-9261-ddc75c9ab153" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7f994081-2172-43cf-9853-5d4404a6ee3e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="f4eeaa28-daa7-4b9b-b8d8-60c96fe82066" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2017-06-08T10:49:02.9641735Z">SciChart Android 2D Charts API</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="2101ee97-d565-492d-bb7f-6e4c7b1b8440" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-02T09:08:11.8334459Z">SciChart Android Basics</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6a594e10-98f7-4791-93cb-97adce24186e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>c66138c0-4f3e-48cb-9660-bb30cd6e2d13</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6da8fa3d-a90e-49d8-b6ae-1fe3e7ca790c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2142a982-921e-4adf-adfa-77c7cc635c5c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="dabb8344-43fc-4e63-a0e3-ba1bcd7830d5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4e3b9e99-8d41-4edc-ac35-368d459f8c81</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="0607610f-6611-4900-a626-869e53120459" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-02T09:08:48.9843746Z">Axis APIs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="0dcacfe7-92c7-42b9-afe1-b9facd147024" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e4489a79-987b-4a06-ac98-586190c47ec5</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d9c22388-0f05-430f-9106-79a352825951" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f43a75da-4a63-41a6-8db9-ff0ea13a5198</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="fe7d5f06-6df7-4bf1-bd96-66f1e1350609" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>494e52f8-99aa-417d-b80e-819c259dbb08</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="f5d5454a-0f35-4dfb-b0d1-5c94334ff161" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>dfe50e75-c34a-4d96-98c7-9ce9855956cd</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5e06a20c-9183-41c0-886c-8001be11ea0f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>75091468-bbf7-49ad-9841-c5d935660429</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="54977eb9-9c72-420e-b1da-f12161ff29b5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1af2411a-a194-4bbe-9a3b-efe4a4caf49a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b8910727-6ef2-4026-8d45-730ff8efbe8d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>905dc605-3914-4824-9eb6-2e5d969f8475</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="99fbad79-269f-4efd-9a35-fe2392190d78" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1325dcad-b236-42e7-8491-af7a8137d6e7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="ae5ab11a-3cf8-4354-b09e-fac4ba8d0e36" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>463d136b-fe1f-4960-85ac-9cb15ceb1d21</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0ab0e9b4-1a13-4440-9495-b04d221cac76" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>965db259-73ff-4df0-b49d-b539f7a304a2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5181d8a5-b949-4a72-876d-e182e47b1798" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4144928b-eab7-437b-a445-9b549ecb52b7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="afa6ab89-0d1f-41ce-9e56-89ed655503e1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2294a48f-459b-464f-9504-aed96c7fda2a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c64cfc48-eab9-4af1-bb1a-575f2fdc6e3c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e00ca150-579a-4496-98b9-70c83ca9a7bb</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d424263b-c2ad-4987-ac61-46169988a2ca" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>522bb84c-264c-4919-aa66-5f8272a72610</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="41b29f4b-972c-4511-a05e-62fcef3c5d12" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4a3049e2-a07f-4fb0-81b3-106f7803db42</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="7684f1a4-a860-4958-9411-58ed86d8af26" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>71de4b19-4e61-4f9d-be5e-9b90bb2587f3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="434a81b1-2432-4bb1-82c1-0949305d54df" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0ec125b0-0563-40b0-ba8c-0929f387c6b1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b433318a-87ab-4763-a852-024106029777" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b1f7b793-a230-44a5-ad59-66a2b8062d2b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="54d81eed-81f7-44d0-93da-c203a76c32e1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-28T13:42:29.5971947Z">2D Chart Types</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="53dd550c-5097-4a44-bd99-228d1181a8d2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-09-28T13:43:40.3091262Z">Renderable Series APIs</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="7ee92da5-492c-4186-8a84-b0f04d326531" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>172addbf-995e-4705-9f7d-535415ab322a</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="483e658d-e301-46cf-98dd-df0c2bf0ed65" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>6139d2e5-f098-4674-99e5-581141312bf5</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="545725ca-bef4-442e-8af8-dc14b3829506" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ee6093db-1eb7-4221-8866-6505a150083f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7c871794-695a-469e-960a-1be2f825240e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e867960c-d131-4a76-98bf-51583f4d5f59</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4212269d-38ee-4806-89d9-5165be78c166" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>c13e369f-7271-45b5-ae7f-6214bbb417c2</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8c5697ba-c607-4d8c-a009-83823bbcb8b4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2f6499c3-9dce-48e1-a312-1e82d53d8db7</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="4c741d33-9f9e-4aa6-a8fc-9c828c7b3b13" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e280ed77-6cc5-49cd-84be-ecd143139ca6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="9eed40a1-23a1-4511-8689-2b8d2f30d5fc" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2020-03-31T15:23:49.313532Z">The Spline Line Series Type </CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>983963f2-0fbf-4f48-aec8-d326824bf9b5</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c9ef4a06-4958-4d67-a88b-b67d4c05d638" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="02155eff-9b3f-41c7-ab09-87d104df93ed" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5693b2a-3d41-4603-b249-8594512d1604</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="639227b3-28d6-434d-91a5-499e5c0cb428" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2020-03-31T15:43:04.5271666Z">The Spline Mountain (Area) Series Type</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>68e6a595-a44e-4704-a164-8623f81c2976</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="51ef5192-92ee-4804-bea1-0e02e8bd2938" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>246d21d0-3b1b-4840-be7b-33bc0066e0e1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="ed6fd0f9-fa4b-4958-9540-6b3c9e80d597" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>24d13db2-562d-4d3a-a86e-583e70608a27</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="23ccee10-da03-47b0-b81f-59c0bd2c306f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d53b2f8b-665d-4804-bb72-9e19b3c84ed0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="594c179c-e7f8-47cb-a122-428be15ae70c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b2fc10ad-2614-414b-a173-bed16255aa6f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b14d5765-e2a9-44a4-aa1b-cd8275a9b374" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>37dc17e0-10de-47a3-b255-dd7d6ad1cb0d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="aa8163bd-78c2-4d6f-8fad-3ccadc7906b2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7cf91fa8-841d-4bb8-adbd-44a9dd73b238</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6eeb0d6f-a409-4c94-a0c3-1667ec0812a4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2020-03-31T15:55:17.4102353Z">The Spline Band Series Type</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>f8227f73-d97e-4aa4-a960-d709998c446e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4591dbac-9af9-425f-a700-a84a6e5ef094" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a53bef2b-820c-45a3-9903-ad426d572aae</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="eea0e188-c8d2-4334-933d-f7ffc5e66e0f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e627d5a1-bbcc-4265-bd91-fcf1d9a5bcf0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="11e5aa95-8479-4dbc-a86e-2651d4880e8f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>204332aa-96b3-40e5-972c-3078640db919</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c534359b-9418-4eff-96f6-9b97e0070300" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>121e373b-412a-4846-8fa8-862f0e716fa2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="cb89dde5-7c86-4563-83b9-e224b8f87591" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="2e8cd838-c766-4882-9b07-5baa69036b21" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2020-04-02T15:05:33.6460577Z">The Custom RenderableSeries API</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>6d291a82-3990-4a2e-9156-3c71562adc4a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="de406797-2bf6-41aa-be49-3df2a83957d1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d9007373-3f18-4bbd-be21-86a97872b4ee</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="58f9934f-6c31-4b5c-acf7-2d58d0de4a16" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9bbf7021-7ef1-49d7-9904-c28029ab9a48</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="98cbb925-313d-4f33-853e-f4a7be21d006" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e8eeff9d-0fd8-4e04-bd35-fdf5da243b57</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="e194d51f-4d0f-4678-9713-d2ea37f19452" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-08-16T13:28:48.5389368Z">DataSeries API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="1bb0e58d-e046-467d-8729-2569a8974c8a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>3425a202-cb28-4349-915f-ccf122d3a766</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="d090de84-5217-4c28-bee4-7065a3acaa9d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-28T13:43:49.5877252Z">Styling and Theming</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="8bc1233f-bc92-45a4-90bf-cc0425fa2483" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>5760011e-fce8-440b-bdb5-470621e85012</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="9a37d595-03a9-4d63-9acb-41bbfa36c2f3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>72c98c63-fe53-4c4b-8d96-3a09c48ce831</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="fdd6b38f-c2ce-46e4-929c-0618f670517f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-10-19T10:09:05.620921Z">ChartModifier API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="5154a036-7200-49b2-a50b-ad9be2ad0c68" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:11:14.0114083Z">ChartModifier APIs</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="5c8eb3a7-b841-462a-bd69-bfd43968d3de" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f1ace0de-c745-4610-a766-eb59af8cf33d</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="37fda729-e5e6-4e3e-b39e-09216910287d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>c7ddb5a2-5c58-4351-9336-bafd039a556f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2d2de382-f3f2-4f42-803d-2e84f4fc5b49" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e14c324d-a823-460b-8971-cb248d617e35</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="08cb4a90-7f14-4634-9e20-122890dc20da" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:11:32.2300756Z">Zooming and Panning</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="a0c5791b-a0b2-4226-9213-15094fd2a4e1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d9ced961-1155-435f-8aee-686b9f60de40</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="e7b09ca9-1a77-4ffb-8d2e-cec50c455751" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4a84d799-128d-4bb7-88b0-7ef14d5b5d0b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3404e05e-872c-4be6-ab19-52ddac8c4f94</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a463b1e0-0472-4d30-a69a-efdf4083cd28" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>4af28faf-3268-417a-8146-a3d25a8d9833</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7bd5f2a6-6dac-4bd1-a99c-9b9f0086d03f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8be89d95-1b3a-4ce3-8665-1f8f18d43b32</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="88123bcf-2fd0-445e-ade5-1fc2b7085a99" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3522c82b-989f-4d1b-bc80-be617b68af2f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="47832a57-8e22-4bce-b477-0a493d68c8f0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:11:52.5898134Z">Cursors and Tooltips</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="6882d8b2-613a-4112-93bb-2d2e18d2ba5e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>092285e6-c901-4a72-9af1-056057d0a22c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="214ea963-a9bb-4ec4-ae46-9c7bc204f6f2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>764104d5-6906-439e-a2d8-72cc35308eee</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="e0d03363-ed9f-4a4c-9bc3-f9be68b653b4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7f960da3-d741-4f1c-abd4-d7d1dda3f4ec" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>fac601dc-5435-4c51-abec-1c267f55f193</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="42aa1ac7-9222-49a4-81dd-7a7e4230454c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:13:28.4878884Z">Selection and Legends</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="f7304dd8-42fe-4cc7-a65d-91932d436083" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>18b07bb4-d65f-4417-a954-4fb58a308818</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="dcfa346e-ce96-4e9d-b8b2-efc1de295ec6" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f6e59c15-4337-410b-81e5-808989851e57</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="205cbd36-c313-4052-b772-3b70c44841fe" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-10-21T16:41:00.7107929Z">Annotations API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="d7774842-3ac8-4512-8725-7bbb537ca3f6" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>06b6036b-fbc1-41e4-905a-52ec73295788</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="02603e89-c2ba-448c-8b54-d70a0ac23302" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>867a28ee-2d60-436c-9f9f-c046f0a3a9b0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3df4ec97-79af-487f-90b8-4404d05affc6" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>463874a3-04b9-430b-be53-63863b12a39b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0c27c090-e1a1-47d2-ab81-972e8e8ef410" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>583becc5-a46d-4fdf-9b69-f6b2f973deb8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="290fe491-3bd9-453e-9202-5eb8c389bae2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>46e0aece-c112-40af-a0e8-46c69045fd50</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b5b2ca0f-b07f-45ef-9bd5-5d97c565863e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1150712d-1531-47f8-a9f7-c8fa6662edbe</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3cc34165-c631-4afc-b718-0eea8982832c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>963d03d5-c2f0-4143-9817-8b37186bfe69</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="52324235-c8da-4c07-beb2-6320de4a61c1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7b100b94-ef0c-4cc9-a73a-7ee728f7208d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a716221c-c91b-413c-bec4-18c167f56f93" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>72e4491f-8140-49cb-8bd3-85b381967f87</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="29a64070-bf36-435d-81e6-219ab801a3bc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>24a50b9d-0b8d-4124-b5e0-db75517608bc</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="5fb5db2e-48e9-4822-99fc-2dfb156fdd61" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-08-16T13:28:06.7240426Z">Advanced 2D Charting Topics</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="717026f4-0fa7-4673-b6be-b5b1bcc493a2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>67126749-e79c-4fd8-b0bc-2b394c114dd1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5691783a-67f4-4e64-8879-73bcf4a1b253" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d9d4e37d-15fa-4b3c-9bc8-91358e70ac48</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3754409e-49f7-4022-b22c-1ffcb39d5806" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2e02ad3c-378c-4512-9b05-49a6b0f0fa61</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c5be29ca-6c2b-462a-9805-ad5b10cc00a9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7ef3a430-fd62-49be-b736-22f81384115c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6cd1dd2c-4e81-4f00-9958-f7889d5a6185" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>498f88e2-6f84-4804-9da5-426e8d72ef00</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="dfdecf02-99ea-4548-aca1-b81304886af5" IconIndex="1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2019-07-22T12:04:18.67091Z">SciChart Android 3D Charts API</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="737db91a-518d-4688-9d1c-a9c69bcec393" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-09-02T10:11:06.9389103Z">Tutorials 3D</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="436322b3-13ab-4d04-89c6-57e053bdce20" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:29:24.27507Z">3D Tutorial 01 - Charting Concepts </CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>66c2a477-19b7-4c68-9aea-10c01c54774f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="37b9e65a-f492-42f7-9e59-2cf3e0b3c2fb" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:30:01.1013799Z">3D Tutorial 02 - Add SciChart Libraries to Android Studio</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>b6028fd1-9906-48ac-9d08-dd81e45997dd</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4e30556b-6862-4343-98ff-fe0d5c3b463e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:30:19.8776595Z">3D Tutorial 03 - Creating a Chart and Add a Data Series</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>699aad4b-9271-4f53-bcff-48cd49a70752</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="e99d5960-ce1f-4789-b1a6-c71a78c5090f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:32:43.0849295Z">3D Tutorials 04 - Changing the Axes Length and Chart Pitch and Yaw</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>d5f6befd-6b5b-4650-a207-d63f648a4f8e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b7c34040-b121-4cc5-b024-b3bb0b54a2fb" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T09:53:11.5938332Z">3D Tutorial 05 - Zooming and Rotating</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>b302958a-29d2-4089-9b36-8ff8acd30627</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1c6f59f7-fea5-4d68-a986-57e9fef03b54" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:33:33.3797725Z">3D Tutorial 06 - Cursors and Tooltips</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>57a08ab7-2fd2-4ee1-8268-30acf5c474c3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="bd5dec11-7bff-4194-817f-f5a7af85e9f4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-09-24T13:33:58.7412638Z">3D Tutorial 07 - Plotting Realtime Data </CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>5eb89f7b-2486-4a91-bb5d-2a567a4cdd16</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="ed82d4d3-5673-4296-a0ee-c35602469aad" IconIndex="1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-10-28T12:37:55.6327577Z">Xamarin 3D Tutorials </CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="865a2324-47dc-4d9e-9c9e-0ca9c4a46720" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T12:39:41.7997792Z">Xamarin 3D Tutorial 01 - Adding SciChart 3D libraries as dependencies</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>b0767532-561b-484f-af6f-090b862e3219</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b858f7ca-7051-469c-94f1-f7f08d5982d4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T12:40:06.5756678Z">Xamarin 3D Tutorial 02 - Creating a Chart and Add a Data Series</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>d18c9c69-51a2-4a0f-9844-87cb35916165</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="7b844473-a6b9-440a-b87c-3f874c87f470" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T12:40:39.6553362Z">Xamarin 3D Tutorial 03 - Zooming and Rotating</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>3ce03a34-72ea-473d-ba1a-7093d79729a2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5f0c23b3-1297-4403-8aa2-abb702c0c5ba" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T12:41:16.2884441Z">Xamarin 3D Tutorial 04 - Cursors and Tooltips</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>4b4c0f0f-f126-42cc-bff5-22024bafb1f5</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="db40a1b8-f3e1-44b3-8182-b8a197f8c60e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-10-28T12:41:40.3346531Z">Xamarin 3D Tutorial 05 - Plotting Realtime Data</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>f2b4d9d7-eb15-472e-8e72-ce251d0826d4</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="6a97f7dc-f8f6-45bc-9931-cae2cf470fae" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-08-05T12:25:53.424656Z">SciChart3D Basics</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="2bee0ea0-86a7-4e3d-a78b-69c65bc78fa3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>01b31f4f-bced-419a-a232-e11ae17a7255</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6678f472-85c5-4509-8e44-77ade9e98441" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0a96bb3a-89bf-4886-9ad9-e11ad6f32c4e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5c8aa210-1cf4-4380-800f-d5e8a26a6647" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e3c137ff-6d4e-44e5-9542-bbb00b65e3c1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="900eca10-1404-4915-829d-ff0e8ffb3bbd" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T12:07:53.3845788Z">Axis3D APIs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="a50c3f69-c85b-40d6-89a0-48b1c710532b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1f42648d-b868-4793-8ab7-b44504f33f99</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="022adc1a-0a2c-42ad-934a-aa9c2b427977" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1d18444a-b912-4bcc-ae02-96bde1620a21</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0c97d207-89fd-4c2f-8f66-f66afc6df9dd" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>6cc44150-883d-41f3-818c-0068615c6a34</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="dfc615bf-3f24-4ca2-aa8b-cb7048d0c2b9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>8c00716b-2379-46f2-8cd1-a26dd54a3115</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="26224512-7385-42d6-bc45-60c7c96c1899" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a0d12d84-660f-424a-87f4-4eb79b8031a4</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="5af8ded8-d5df-470f-a88d-6a7846e6e3f5" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T12:04:51.5850314Z">3D Chart Types</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="878970cb-5b88-4d05-a5b7-83ab0c924fe4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4390d675-fd3c-45d8-8357-09b747d5071c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0977f735-a08f-45e8-8004-b6c266cb5bd3" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>07c999cf-2895-4b49-ae5f-77d283a51741</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d1c53a6e-dada-4711-829e-8268eb53859f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0d1597ec-182f-4bee-afa9-03cec47f403e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a66ba314-39eb-4f10-b743-d73627dd5e44" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>44b29ec3-b3ab-4517-9990-8efa8c93f3e3</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5069d660-e7b0-4193-843d-ff222fdabf4c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>6d6181dc-3fed-4962-b0f4-a482bb51e1b2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="35f5e0fa-1c62-458b-98f4-191b8c19150b" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-07-22T12:08:58.3485202Z">The Waterfall 3D Chart Type</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="117bde79-ca7e-4aa2-bd2e-b2e5f61aab23" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>026b57fb-daf8-467e-902c-eafbb0e2c0fb</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="9d546dfe-3417-45b4-b727-050d2e122b42" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>75cb72e5-1e6c-42fd-949b-f453e5d39181</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>bfe08e9c-3594-4f09-a30e-86d8dbb4008c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="cfe4d4ad-e8d8-43a4-a1b1-9fa656a8220d" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-07-22T12:09:13.8854982Z">The Free Surface 3D Chart Type</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="39e87215-0434-4a0d-a17c-810cb9fd1fb4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>25b8cba1-1983-4c9b-a2dc-ab0ab25920f6</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="e5cf1a89-a3a1-4889-910b-41ab2cfd635f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f832628c-8f98-4054-bb30-a7c3f1a91411</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="9430d95b-7dfe-4cb3-9d29-a2388186626e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d1557183-e88e-4fe3-89e9-c363a4461bbc</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2070f5de-91fb-446a-b9f1-877d10133c3b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>7b845aa5-353a-4f1a-9b64-b16ab21eda97</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="b4bc861d-3fe8-4445-9eb4-bc3e02d08b72" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>83697561-bce5-4197-bdf9-e6f17b100e65</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>7150e909-ab59-480b-b72c-542359d51d91</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3826b76e-4673-47d6-aa9a-87e8856ee8b5" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2019-07-22T12:08:43.5316826Z">The SurfaceMesh 3D Chart Type</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="47b238cc-39b9-4e4a-9af4-409b14c0f394" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>18cded29-373d-4748-a964-9bcd4e931443</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="1c490d45-ec7b-4df9-af8b-c3eba42fa9fa" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>a0d12d84-660f-424a-87f4-4eb79b8031a4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7607318a-2606-4e1f-93c9-d57ccef314a9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>25011f80-a875-4a44-afee-b40e37c64bdf</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="cac7143b-7630-4d95-9843-f893bb55aa27" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3f9f08b1-fe1c-4ab5-a312-8c2b8e5a00d3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="62e9e714-e021-43fe-855f-ae37ba9f4748" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d4142937-b850-4b7c-81bf-52358f803349</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="07b979d4-a386-4674-ace5-15b4b0a32095" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0b5698bb-7ae4-45bd-94fe-6b76bf553ecd</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>e5fc78ef-475f-45ae-b38c-d42ba9e6ed50</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="2b840874-75eb-43b4-b6df-c8cb3b544f57" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T13:19:54.0935724Z">ChartModifier 3D API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="434349a7-aefe-4284-976d-234662dccec4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2019-07-22T13:20:10.1582387Z">Zooming and Panning</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="f7ebe0b7-33e9-4e50-be67-280214d900e5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>02e0ff0e-aa3f-4ed3-8227-4ca9e6217352</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8f78355d-7b70-4b2f-aea8-b52259175596" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0f6660f9-8d3a-4fa9-b228-36376c2d79d4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="15a9722f-342c-4772-9643-88134ecf3887" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0f31338f-c416-4129-8e9b-cc357faf1082</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="97762646-046f-4b00-aadf-c61a76886a85" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8cc4d206-bdd4-4d42-8ff4-4c09fddcb317</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="74cfc2e1-37c3-44b4-94e7-797bcfb11b37" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2019-07-22T13:20:27.967421Z">Cursors, Tooltips and Legends</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="49a20c78-1cdb-45e9-b9af-8b6fb43d3a6c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>7915ac64-f37b-4acd-a5c7-521a0259d63c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="e8e4ec01-6c6e-41a0-9832-a147a8fe20f2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2019-07-22T13:20:43.5764169Z">Selection</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="95ef6bca-ca18-4b90-b167-1a4557a07e23" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e70c80b0-c167-4aa8-8a0d-823752caa406</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="1c13e83a-a693-4031-94a0-df13003d6ee0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2016-06-21T08:22:54.2836035Z">API Documentation</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="e3d749b5-6807-4bfb-a83d-68cb3802264a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" DependsOnItemTypeName="" NodeType="ALLTEMPLATETOCS">
              <ChildNodes />
            </TocNode>
          </ChildNodes>
        </TocNode>
      </RootNodes>
    </TocLayout>
  </TableOfContents>
  <TopicsProjectPlugin>
    <TopicCategories>
      <TopicCategory Id="-" AutoIndex="false">
        <Caption m="2009-09-11T10:57:19.7639331Z">(Un-categorized)</Caption>
        <ChildTopicCategories />
        <Topics />
      </TopicCategory>
      <TopicCategory Id="CONTENTSNIPPETS" AutoIndex="false">
        <Caption m="2011-11-29T17:13:19.1489878Z">Content Snippets</Caption>
        <ChildTopicCategories />
        <Topics />
      </TopicCategory>
      <TopicCategory Id="0e0bdef4-9f15-4750-b5ff-6e8d9f518ad5" AutoIndex="false">
        <Caption m="2019-09-03T07:29:55.2956109Z">SciChart Android v3 SDK User Manual</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="d9186051-eaa4-42af-847b-342df3b8df30" Status="New Topic" CreatedOn="2016-06-20T20:37:35.1758693Z" ModifiedOn="2019-10-28T14:04:56.0365697Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChart_Android_v3_SDK_User_Manual" BuildFlags="">
            <Title m="2019-09-03T07:30:11.385653Z">SciChart Android v3 SDK User Manual</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BODYTEXT">
                <Content m="2019-10-28T14:04:56.0365697Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H1&gt;What is SciChart Android?&lt;/H1&gt;
&lt;P&gt;SciChart Android is a&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-features" target=_blank&gt;High-Performance Real-time 2D&amp;nbsp; and 3D Android Charting Library&lt;/A&gt;. Designed for use in scientific, financial, trading, engineering and medical apps where you require extreme speed, rich interactivity and depth of features and flexibility in a&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-features" target=_blank&gt;Android chart&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Android v3.png"&gt;&lt;/P&gt;
&lt;P&gt;Across Windows, Android and iOS, the SciChart Family is now in its sixth generation, and provides an extremely rich, fast and interactive charting experience with a wide array of chart types, and the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-features" target=_blank&gt;Android Charting Library&lt;/A&gt; is the newest edition to our portfolio, bringing high-performance, realtime charts to the Android platform.&lt;/P&gt;
&lt;P&gt;The SciChart family is used by thousands of customers in over&amp;nbsp;80 countries worldwide, in sectors ranging from Defence to Medical, Financial and Trading to Oil &amp;amp; Gas, Process Management to Formula 1. When you become a SciChart customer, you join a community of developers support by a world-class Android graphics &amp;amp; visualisation team. We want you to enjoy using our products as much as we enjoy making them, as well as to succeed, so if you have any feedback good or bad, please get in touch as &lt;STRONG&gt;we want to hear from you&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;The following document serves as a reference and an overview of the features in the SciChart Android v3 SDK. For a complete code reference, see the API Documentation and the Android Examples Suite, which contains many code samples you can run, export and modify for yourself.&lt;/P&gt;
&lt;H1&gt;Table of Contents&lt;/H1&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px "Segoe UI", Verdana, Arial; WIDOWS: 1; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Below you can find a table of Contents for the SciChart WPF SDK User Manual. Also you can use the&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;links on the left&lt;/STRONG&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;to navigate the user manual.&lt;/P&gt;
&lt;H3&gt;Intro to the SciChart Android SDK&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Mini Table of Contents"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;edbfc7d5-4de2-4301-88ca-1be44601225b&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H3&gt;The SciChart Android Examples Suite&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Mini Table of Contents"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;6de95ecd-6cab-4880-acdc-c355548d7cda&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H3&gt;SciChart Android 2D Charts Quickstart Guide&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Mini Table of Contents"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;e31decc9-0dde-4aab-88e5-077f7410f390&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H3&gt;Documentation Topics for SciChart Android&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Mini Table of Contents"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;e3d749b5-6807-4bfb-a83d-68cb3802264a&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="60884af8-1f9d-412c-8e37-b8372204d648" Status="New Topic" CreatedOn="2016-06-20T20:37:35.2680356Z" ModifiedOn="2019-10-28T14:43:11.9762193Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Installation_and_System_Requirements" BuildFlags="">
            <Title m="2016-06-20T20:37:35.272037Z">Installation and System Requirements</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BODYTEXT">
                <Content m="2019-10-28T14:43:11.9762193Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;System Requirements&lt;/H2&gt;
&lt;H3&gt;Q: What hardware is required to run SciChart Android?&lt;/H3&gt;
&lt;P&gt;SciChart Android is designed to run on any Android device capable of supporting Android v4.4 (KitKat) and up. Development of Android Applications with SciChart Android can be done on an OSX, Windows or Linux PC.&lt;/P&gt;
&lt;H3&gt;Q: What IDEs are recommended?&lt;/H3&gt;
&lt;P&gt;At SciChart we recommend&amp;nbsp; using &lt;A href="https://developer.android.com/studio/index.html"&gt;latest version of Android Studio&lt;/A&gt;, as it is faster, leaner and has better features than Eclipse or other IDEs. However, SciChart Android can be compiled and developed on Eclipse as well as third party IDEs that support Java Android.&lt;/P&gt;
&lt;H3&gt;Q: Do I need a Fast Android Device?&lt;/H3&gt;
&lt;P&gt;Not necessarily! You only need a device capable of supporting KitKat (v4.4) and a GPU capable of supporting OpenGL ES 2.0 (which is pretty much everything). SciChart for Android is very memory and CPU efficient, using fewer CPU, GPU and memory resources than competitors, resulting in longer battery life in like-for-like applications.&lt;/P&gt;
&lt;H3&gt;Q: But what hardware is recommended for Fastest Operation?&lt;/H3&gt;
&lt;P&gt;SciChart for Android favours faster CPU over faster GPU. For optimum performance it is recommended to run on a quad-core device with 1.3GHz (or better) CPU and a recent GPU capable of supporting OpenGL ES 2.0.&lt;/P&gt;
&lt;P&gt;For instance, in our testing, we notice large performance increases when running on faster hardware such as the Samsung Galaxy S6 Edge vs. slower hardware such as Samsung Galaxy Tab 3.&lt;/P&gt;
&lt;H3&gt;Q: How much RAM do I need to run SciChart?&lt;/H3&gt;
&lt;P&gt;SciChart is actually very memory efficient. SciChart Android uses not much more memory than required to hold the raw data, for instance, if you wish to display 1,000,000 points of XY data where X and Y types are double, you can expect to use just over 10M * 8 * 2 bytes = 16Mbytes, plus approx. 30Mbytes for the app to host the chart. So for 2D Charts, SciChart for Android can be run on just about any device so long as minimum operating system requirements are met.&lt;/P&gt;
&lt;H3&gt;&amp;nbsp;Q: Will SciChart for Android support Embedded Devices?&lt;/H3&gt;
&lt;P&gt;Yes! SciChart for Android was developed specifically to cope with the use-case of running on custom hardware, and has been optimised in the extreme. We have customers running SciChart for Android on custom hardware based on the&amp;nbsp;&lt;A href="http://www.wandboard.org" target=_blank&gt;Freescale I.MX-6 Dual core 800MHz device&lt;/A&gt; with acceptable performance for real-time monitoring equipment.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="2af91ecd-b2a9-4699-9b71-53204a53b31a" Status="New Topic" CreatedOn="2016-06-20T20:50:38.5400924Z" ModifiedOn="2019-10-28T14:41:56.5050615Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Online Resources and Help" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2019-10-28T14:41:56.5050615Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Online Resources &amp;amp; Help&lt;/H2&gt;
&lt;P&gt;There are several online reosurces to help you get the best out of SciChart Android. These can be found at the following locations:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Getting started guide at &lt;A href="http://www.scichart.com/getting-started-scichart-android" target=_blank&gt;www.scichart.com/getting-started-with-scichart-android&lt;/A&gt; 
&lt;LI&gt;Android Support forums at &lt;A href="http://www.scichart.com/questions-android" target=_blank&gt;www.scichart.com/questions-android&lt;/A&gt; 
&lt;LI&gt;API Documentation at &lt;A href="http://www.scichart.com/documentation/android/v3.x/webframe.html" target=_blank&gt;www.scichart.com/documentation/android/v3.x/webframe.html&lt;/A&gt; 
&lt;LI&gt;Support tickets (licensed customers only) at &lt;A href="http://support.scichart.com/" target=_blank&gt;http://support.scichart.com&lt;/A&gt;&lt;/A&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="01e391ef-8c89-482d-946d-78188f80e2ad" Status="New Topic" CreatedOn="2016-06-20T20:53:34.6912023Z" ModifiedOn="2019-10-28T14:43:21.2597298Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Setup an Android Development Environment on Windows" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2019-10-28T14:43:21.2597298Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;The following guide will help you setup a &lt;STRONG&gt;Development Environment for Android on Windows.&lt;/STRONG&gt; You can skip this if you already have Android Studio and the Android NDK setup!&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Installing the Java Development Kit&lt;/H2&gt;
&lt;P&gt;Java Development Kit is required to start development with Android Studio. First of all, you should go to &lt;A href="https://www.java.com/en/download/" target=_blank&gt;https://www.java.com/en/download/&lt;/A&gt; and download Java 8 for Windows (if you don’t have it already). Then, Java Platform JDK can be obtained for installation from &lt;A href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target=_blank&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;B&gt;&lt;I&gt;NOTE:&lt;/I&gt;&lt;/B&gt; &lt;I&gt;Make a note of your JDK Install path. For instance, C:\Program Files\Java\jdk1.8.0_91. This will be required later when setting environment variables.&lt;/I&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Installing Android Studio&lt;/H2&gt;
&lt;P&gt;Download Android Studio for Windows from&amp;nbsp;&lt;A href="https://developer.android.com/studio/index.html" target=_blank&gt;the official site&lt;/A&gt;. Follow the steps to install the application. We recommend that you choose Android SDK and Android Virtual Device to be installed together with Android Studio, as these are required components. However, they can be installed later via Android SDK Manager.&lt;/P&gt;
&lt;P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image001.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image002.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image003.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Once Android Studio got installed, you can run it:&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image004.png"&gt; 
&lt;H2&gt;Installing the Android SDK&lt;/H2&gt;
&lt;P&gt;Now you need to download some packages required for further work in Android Studio. This can be done via Android SDK Manager. Choose it from the “Configure” dropdown list to launch:&lt;/P&gt;
&lt;P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image004.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image005.png"&gt;&lt;/P&gt;
&lt;P&gt;Alternatively, within Android Studio, the SDK Manager can be accessed via the &lt;B&gt;Tools&amp;gt;Android -&amp;gt; SDK Manager&lt;/B&gt; option or a corresponding button from the menu at the top:&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image006.png"&gt; 
&lt;P&gt;In the SDK Manager, on the &lt;B&gt;SDK Platforms&lt;/B&gt; tab, choose platforms you want to develop for. For instance, we require v4.4&amp;nbsp;to vLatest for SciChart Android development:&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image007.png"&gt; 
&lt;P&gt;You can select or deselect particular components of a package checking the “Show Package Details” at the bottom right corner:&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image008.png"&gt; 
&lt;P&gt;Next, under &lt;B&gt;SDK Tools&lt;/B&gt; ensure ‘Android SDK Build Tools’ is up to date. If you are going to run the SciChart Example Suite or use source code of SciChart Android libraries, you need to download the Intel x86 Emulator Accelerator and Android NDK v14:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image009.png"&gt; 
&lt;P&gt;Ensure you selected the right build tools checking the “Show Package Details” at the bottom right corner:&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image010.png"&gt; 
&lt;H2&gt;Installing the Android NDK&lt;/H2&gt;
&lt;P&gt;Certain components in SciChart Android are dependent on the Android NDK (Native Development Kit). Installing this is required &lt;B&gt;if you are building our examples or SciChart Android library from source-code.&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;The Android NDK can be downloaded via the SDK Manager within Android Studio. Go to &lt;B&gt;Tools&amp;gt;Android&amp;gt;SDK Manager&lt;/B&gt; or press a corresponding button from the menu at the top:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image011.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;Under &lt;B&gt;SDK Tools&lt;/B&gt; ensure the Android NDK is checked and up to date:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image012.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Setting Environment Variables&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;B&gt;&lt;I&gt;NOTE:&lt;/I&gt;&lt;/B&gt;&lt;I&gt;This step is required if you are building our examples or SciChart Android library from source-code.&lt;/I&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The following environment variables must be set to allow development of SciChart Android in Android Studio on Windows:&lt;/P&gt;
&lt;P&gt;• JAVA_HOME: The location of the Java JDK&lt;/P&gt;
&lt;P&gt;• ANDROID_HOME: The location of the Android SDK on disk&lt;/P&gt;
&lt;P&gt;• ANDROID_NDK_HOME: The location of the Android NDK on disk&lt;/P&gt;
&lt;P&gt;To set environment variables so that they may be read by applications, you need to go to &lt;B&gt;ControlPanel-&amp;gt;System and Security-&amp;gt;System-&amp;gt;Advanced system settings&lt;/B&gt; :&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image013.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="images/docX!1.jpg"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;On the &lt;B&gt;“System Proprties”&lt;/B&gt; window press the &lt;B&gt;“Environment Variables…”&lt;/B&gt; button:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="Installation_and_System_Requirements_files/image015.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="images/System Properties 2016-07-01 10.19.11.jpg"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The &lt;B&gt;“Environment Variables”&lt;/B&gt; window will appear. Press the &lt;B&gt;“New…”&lt;/B&gt; button and enter the name and path for a new variable:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;IMG src="images/Environment Variables 2016-07-01 10.23.05.jpg"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;IMG src="images/New System Variable 2016-07-01 10.43.51.jpg"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="4be688bc-c421-4722-83d7-7a02f89bf8ee" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="98cea9da-4223-489f-a237-8d42ba8e0371" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="98cea9da-4223-489f-a237-8d42ba8e0371" Status="New Topic" CreatedOn="2016-06-20T21:06:21.1166557Z" ModifiedOn="2019-10-28T14:43:19.975766Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Setup an Android Development Environment on OSX" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2019-10-28T14:43:19.975766Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;EM&gt;The following guide will help you setup a &lt;STRONG&gt;Development Environment for Android on Mac OS.&lt;/STRONG&gt; You can skip this if you already have Android Studio and the Android NDK setup!&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H1&gt;Installing the Java Development Kit&lt;/H1&gt;
&lt;P&gt;1.&amp;nbsp;Using safari, navigate to &lt;A href="https://www.java.com/en/download/"&gt;https://www.java.com/en/download/&lt;/A&gt; and download Java 8 for mac.&lt;/P&gt;
&lt;P&gt;2.&amp;nbsp;You will also need to install the Java Platform JDK from &lt;A href="http://www.oracle.com/technetwork/java/javase/downloads/index.html"&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;B&gt;&lt;I&gt;NOTE&lt;/I&gt;&lt;/B&gt;&lt;I&gt;: Make a note of your JDK Install path. For instance, /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home. This will be required later when setting environment variables&lt;/I&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H1&gt;Installing Android Studio&lt;/H1&gt;
&lt;P&gt;Download Android Studio for MAC from the &lt;A href="https://developer.android.com/studio/index.html#downloads"&gt;https://developer.android.com/studio/index.html#downloads&lt;/A&gt;. Follow the steps to install the application in OSX.&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986178" border=0 name="Picture 482986178" src="Installation_and_System_Requirements_files/image019.jpg" width=602 height=340&gt;&lt;/P&gt;
&lt;P&gt;You can start the application from the Applications folder, or from Spotlight, by searching CMD+SPACE and typing ‘Android Studio’&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986179" border=0 name="Picture 482986179" src="Installation_and_System_Requirements_files/image020.jpg" width=601 height=353&gt;&lt;/P&gt;
&lt;P&gt;On first start, Android Studio will try to download the Android SDK. This may take a while. Make a note of where the Android SDK was installed to, this is very useful for certain operations in Android!&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986180" border=0 name="Picture 482986180" src="Installation_and_System_Requirements_files/image021.jpg" width=602 height=457&gt;&lt;/P&gt;
&lt;P&gt;Once that’s done, open Android Studio and go to Tools -&amp;gt; Android -&amp;gt; SDK Manager. Under SDK Platforms ensure you have selected the platform(s) you want to develop for. For instance, we require v4.4 – v6 for SciChart Android development.&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986183" border=0 name="Picture 482986183" src="Installation_and_System_Requirements_files/image022.jpg" width=602 height=406&gt;&lt;/P&gt;
&lt;P&gt;Next, under SDK Tools ensure ‘Android SDK Build Tools’ is up to date. Also download the Android NDK v12.&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986181" border=0 name="Picture 482986181" src="Installation_and_System_Requirements_files/image023.jpg" width=602 height=407&gt;&lt;/P&gt;
&lt;P&gt;Click OK to install all components.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Installing the Android NDK&lt;/H1&gt;
&lt;P&gt;Certain components in SciChart Android are dependent on the Android NDK (Native Development Kit). Installing this is &lt;B&gt;required if you are building our examples or SciChart Android library from source-code&lt;/B&gt;.&lt;/P&gt;
&lt;P&gt;The Android NDK can be downloaded via the SDK Manager within Android Studio. Go to Tools -&amp;gt; Android -&amp;gt; SDK Manager. Under Build tools ensure the Android NDK is checked and up to date.&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986182" border=0 name="Picture 482986182" src="Installation_and_System_Requirements_files/image023.jpg" width=602 height=407&gt;&lt;/P&gt;
&lt;H1&gt;Installing Gradle&lt;/H1&gt;
&lt;P&gt;Gradle is the command-line build tool for Java and Android applications. SciChart uses Gradle to build libraries (AARs, which contain JAR and resource files) which can be used in your own applications.&lt;/P&gt;
&lt;P&gt;If you are compiling SciChart Android from our source code, it is recommended you install Gradle. Following the instructions from StackOverflow at &lt;A href="http://stackoverflow.com/a/28928107/303612"&gt;http://stackoverflow.com/a/28928107/303612&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Install Homebrew (a package manager for OSX)&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /usr/bin/ruby -e "$(curl -fsSL &lt;A href="https://raw.githubusercontent.com/Homebrew/install/master/install"&gt;https://raw.githubusercontent.com/Homebrew/install/master/install&lt;/A&gt;)"&lt;BR&gt;
&lt;LI&gt;Install Gradle&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; brew install gradle &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Setting Mac OSX Environment Variables&lt;/P&gt;
&lt;P&gt;The following environment variables must be set to allow development of SciChart Android in Android Studio on OSX.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;JAVA_HOME: The location of the Java JDK 
&lt;LI&gt;ANDROID_HOME: The location of the Android SDK on disk 
&lt;LI&gt;ANDROID_NDK_HOME: The location of the Android NDK on disk &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;To set environment variables so that they may be read by OSX Applications, you will need to follow these steps.&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Press CMD+Space to open Spotlight and search for Apple Script Editor. 
&lt;LI&gt;Open Apple Script Editor 
&lt;LI&gt;Type into Apple Script the following commands to set environment variables: &lt;/LI&gt;&lt;/OL&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr&gt;&lt;STRONG&gt;do shell script&lt;/STRONG&gt; "launchctl setenv JAVA_HOME /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home"&lt;BR&gt;&lt;STRONG&gt;do shell script&lt;/STRONG&gt; "launchctl setenv ANDROID_HOME /users//$(whoami)/Library/Android/sdk"&lt;BR&gt;&lt;STRONG&gt;do shell script&lt;/STRONG&gt; "launchctl setenv ANDROID_NDK_HOME /users//$(whoami)/Library/Android/sdk/ndk-bundle" &lt;/BLOCKQUOTE&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 4. Save the file with &lt;B&gt;File&lt;/B&gt; &lt;B&gt;Format&lt;/B&gt; &lt;B&gt;Application&lt;/B&gt; in your Documents/ folder and name it EnvironmentVars.&lt;BR&gt;&lt;BR&gt;&lt;IMG id="Picture 482986192" border=0 name="Picture 482986192" src="Installation_and_System_Requirements_files/image024.jpg" width=601 height=446&gt;&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P style="MARGIN-RIGHT: 0px" dir=ltr&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 5.&amp;nbsp; Next, in Spotlight, search for System Preferences -&amp;gt; open Users and Groups.&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;IMG id="Picture 482986188" border=0 name="Picture 482986188" src="Installation_and_System_Requirements_files/image025.jpg" width=602 height=531&gt;&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 6.&amp;nbsp;Under your username, click Login Items.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 7.&amp;nbsp;Add the EnvironmentVars script to the login items, so that this script is opened every time you login.&lt;BR&gt;&lt;BR&gt;&lt;IMG id="Picture 482986193" border=0 name="Picture 482986193" src="Installation_and_System_Requirements_files/image026.jpg" width=602 height=444&gt;&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 8.&amp;nbsp;Finally, log out and log back in to your mac.&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 9.&amp;nbsp;After logging in, wait a moment for the script to run (it can take 10 seconds after startup). Then, you can verify that all environment variables have been set correctly by opening a new Terminal window and typing&lt;/P&gt;
&lt;BLOCKQUOTE style="MARGIN-RIGHT: 0px" dir=ltr&gt;
&lt;P&gt;a.&amp;nbsp;echo “$ANDROID_HOME”&lt;/P&gt;
&lt;P&gt;b.&amp;nbsp;echo “$ANDROID_NDK_HOME”&lt;/P&gt;
&lt;P&gt;c.&amp;nbsp;echo “$JAVA_HOME”&lt;BR&gt;&lt;/P&gt;&lt;/BLOCKQUOTE&gt;
&lt;P&gt;These should resolve to the correct directories where the Android SDK, NDK and JDK are installed respectively.&lt;BR&gt;&lt;BR&gt;&lt;IMG id="Picture 2" border=0 name="Picture 2" src="Installation_and_System_Requirements_files/image027.png" width=602 height=384&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="411d7155-5068-4a0b-88ba-2a8d3a9e5915" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="01e391ef-8c89-482d-946d-78188f80e2ad" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="09079101-6ba2-4cdb-9fe3-0fb603ff0486" Status="New Topic" CreatedOn="2016-06-20T21:10:43.7177795Z" ModifiedOn="2019-10-28T14:43:18.0483215Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Licensing SciChart Android" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2019-10-28T14:43:18.0483215Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H1&gt;SciChart Android Licensing&lt;/H1&gt;
&lt;P&gt;We have a walkthrough guide showing how to get started with a Trial License, or apply a purchased license for SciChart Android at&amp;nbsp;&lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;IMG src="images/licensing-scichart-android.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Trial License&lt;/H2&gt;
&lt;P&gt;SciChart Android comes with a fully-functional 30-day trial. The first time you run a SciChart Android application, you will need to set your trial license key, which can be found at &lt;A href="http://www.scichart.com/profile"&gt;www.scichart.com/profile&lt;/A&gt; after you sign up to the scichart website. &lt;B&gt;The trial is a fully featured 30-day trial with no limitation in functionality&lt;/B&gt;.&lt;/P&gt;
&lt;P&gt;The trial SciChart Android control displays a watermark “Powered by SciChart” but this is not shown in the full licensed version of SciChart.&lt;/P&gt;
&lt;P&gt;At the end of your 30-day trial, applications you have built with SciChart will cease to work and you will not be able to keep working on them.&lt;/P&gt;
&lt;P&gt;Once you purchase licenses, the license is perpetual with optional renewal to keep up to date (get support and get later builds).&lt;/P&gt;
&lt;H2&gt;Activating a Purchased License&lt;/H2&gt;
&lt;P&gt;If you have purchased licenses to SciChart, full instructions to license can be found on the web at &lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;If your license has been applied correctly, you should be able to run your application on devices and without seeing the "Powered by SciChart" watermark.&lt;/P&gt;
&lt;H2&gt;Troubleshooting Licensing &amp;amp; Activation&lt;/H2&gt;
&lt;P&gt;If you have trouble with licensing or activation, please contact&amp;nbsp;&lt;A href="http://support.scichart.com/index.php?/Tickets/Submit" target=_blank&gt;SciChart Android Support&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="9583097e-c7b0-4c58-a766-e8e2eb144cdf" AutoIndex="false">
        <Caption m="2019-02-11T15:57:38.5250057Z">Quick Start Guide</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="06d80915-b1f5-40f3-87e4-e7a43e9f77b3" AutoIndex="false">
            <Caption m="2017-03-09T09:41:54.1040043Z">Tutorials</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="2247b20c-4be1-42cb-ad24-125310703f67" Status="New Topic" CreatedOn="2017-03-09T09:48:40.4008937Z" ModifiedOn="2020-02-03T14:03:14.1847753Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 01 - Adding SciChart libraries as dependencies" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-02-03T14:03:14.1847753Z">&lt;H2&gt;Creating a New Android Project&lt;/H2&gt;
&lt;P&gt;In this tutorial we will create a simple line chart with SciChart Android. Let's start by creating a new Android project in AndroidStudio and adding SciChart libraries as dependencies to it.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;If you already know how to do set up library dependencies, you can safely skip to &lt;A href="30f7b8a6-e55b-49bb-909f-998d6d24112e"&gt;Tutorial 02 - Creating a Chart&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;First, in Android Studio create a project with a Basic activity. The &lt;STRONG&gt;minimum&lt;/STRONG&gt; &lt;STRONG&gt;SDK version must be&lt;/STRONG&gt; &lt;STRONG&gt;API 19 (Android 4.4 KitKat) or higher:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/configureYourProject.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The next step is to add SciChart libraries as dependencies to the project. We explain that below.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For a thorough instruction on how to create a project in Android studio, please see the&amp;nbsp;&lt;A href="290456e2-48c4-43ed-87a1-bc6452a926b6"&gt;Creating your First SciChart Android App - Part 1&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Setting Up the Build Configuration&lt;/H2&gt;
&lt;P&gt;To be able to use SciChart classes in your application, you need to add the SciChart Android libraries (AAR) as project dependencies. You can use Maven to download them from the web or download them directly.&lt;/P&gt;
&lt;H3&gt;Using Maven&lt;/H3&gt;
&lt;P&gt;The SciChart Android Maven repository URL is &lt;A href="https://www.myget.org/F/abtsoftware/maven"&gt;https://www.myget.org/F/abtsoftware/maven&lt;/A&gt;.Follow the steps below to configure your project to reference the SciChart Android libraries from Maven.&lt;/P&gt;
&lt;P&gt;1. Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" file &lt;STRONG&gt;for the project&lt;/STRONG&gt; and&amp;nbsp;declare a new Maven&amp;nbsp;repository in the "&lt;STRONG&gt;repositories&lt;/STRONG&gt;" node inside the "&lt;STRONG&gt;allprojects&lt;/STRONG&gt;" node. Use the URL from&amp;nbsp;above:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;allprojects&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;allprojects {&lt;BR&gt;repositories {&lt;BR&gt;jcenter()&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;// Declaring a new Maven repository&lt;BR&gt;maven { url 'https://www.myget.org/F/abtsoftware/maven' }&lt;BR&gt;}&lt;BR&gt;}&lt;BR&gt;}&lt;BR&gt;} 
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The&amp;nbsp;screenshot below shows&amp;nbsp;where the file can be found in the Project window in AndroidStudio:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/gradle1(1).png"&gt; &amp;nbsp;&lt;/P&gt;
&lt;P&gt;2. Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" file &lt;STRONG&gt;for a module&lt;/STRONG&gt; which SciChart is&amp;nbsp;intended to be&amp;nbsp;used within. Add SciChart Android libraries as module dependencies:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies {&lt;BR&gt;implementation fileTree(dir: 'libs', include: ['*.jar'])&lt;BR&gt;implementation 'androidx.appcompat:appcompat:1.0.2'&lt;BR&gt;implementation 'androidx.constraintlayout:constraintlayout:1.1.3'&lt;BR&gt;implementation 'com.google.android.material:material:1.0.0'&lt;BR&gt;testImplementation 'junit:junit:4.12'&lt;BR&gt;androidTestImplementation 'androidx.test:runner:1.2.0'&lt;BR&gt;androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'&lt;BR&gt;// Declare SciChart libraries as module dependencies&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'core', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'data', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'drawing', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'charting3d', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'charting', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'extensions', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;implementation (group: 'com.scichart.library', name: 'extensions3d', version: '3.0.0.4253', ext: 'aar')&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The&amp;nbsp;screenshot below shows&amp;nbsp;where the file can be found in the Project window in AndroidStudio:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/grade2-1.png"&gt;&lt;/P&gt;
&lt;H3&gt;Using Downloaded SciChart libs&lt;/H3&gt;
&lt;P&gt;In the example below we use the download approach.&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;First download SciChart Android v3 from &lt;A href="https://www.scichart.com/downloads/"&gt;https://www.scichart.com/downloads/&lt;/A&gt; and then unzip it. 
&lt;LI&gt;Copy the &lt;STRONG&gt;Lib&lt;/STRONG&gt; folder into the same folder where you save your Android projects. In other words put it in a folder such that &lt;STRONG&gt;../../Lib&lt;/STRONG&gt; will be found from &lt;STRONG&gt;app&lt;/STRONG&gt; folder of your Android app. 
&lt;LI&gt;Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" file &lt;STRONG&gt;for the project&lt;/STRONG&gt; and declare a new repository in the "&lt;STRONG&gt;repositories&lt;/STRONG&gt;" node inside the "&lt;STRONG&gt;allprojects&lt;/STRONG&gt;" node, pointing to the location of SciChart Android libraries: &lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;allprojects {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; repositories {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; jcenter()&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set up a repository which looks for dependencies in the "libs" folder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; flatDir{dirs 'libs'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;LI&gt;Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" file &lt;STRONG&gt;for a module&lt;/STRONG&gt; which SciChart is intended to be used within. Add SciChart Android libraries as module dependencies: &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies {&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;implementation fileTree(dir: 'libs', include: ['*.jar'])&lt;BR&gt;implementation 'androidx.appcompat:appcompat:1.0.2'&lt;BR&gt;implementation 'androidx.constraintlayout:constraintlayout:1.1.3'&lt;BR&gt;implementation 'com.google.android.material:material:1.0.0'&lt;BR&gt;testImplementation 'junit:junit:4.12'&lt;BR&gt;androidTestImplementation 'androidx.test:runner:1.2.0'&lt;BR&gt;androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'&lt;BR&gt;// Declare SciChart libraries as module dependencies&lt;BR&gt;implementation 'com.scichart:charting:+@aar'&lt;BR&gt;implementation 'com.scichart:charting3d:+@aar'&lt;BR&gt;implementation 'com.scichart:core:+@aar'&lt;BR&gt;implementation 'com.scichart:drawing:+@aar'&lt;BR&gt;implementation 'com.scichart:data:+@aar'&lt;BR&gt;implementation 'com.scichart:extensions:+@aar'&lt;BR&gt;implementation 'com.scichart:extensions3d:+@aar'&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;The screenshot below shows where the file can be found in the Project window in AndroidStudio:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/grade2-1.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;A detailed step-by-step instruction can be found in the &lt;STRONG&gt;Quickstart Guide&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="3cfc9b61-37eb-419f-b3bc-aa90aee60d99"&gt;Creating your First SciChart Android App - Part 2&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Building the Project&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;At this point the solution should build and run, however we now need to add functionality&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Referencing Javadocs in Project&lt;/H2&gt;
&lt;P&gt;Optionally. you can reference Javadocs in your project but you need to add them manually into your project. To do this you need to open Project tab and switch from Android to Project pane:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SwitchToProject.png"&gt;&lt;/P&gt;
&lt;P&gt;After you switch to Project pane you need to find &lt;STRONG&gt;core, data, drawing and charting&lt;/STRONG&gt; libraries in &lt;I&gt;External Libraries&lt;/I&gt;. After you find them you need to add for each appropriate javadoc file. To do this you need to find library in library, click right mouse button and select &lt;I&gt;Library Properties...&lt;/I&gt; in context menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SelectLibraryProperties.png"&gt;&lt;/P&gt;
&lt;P&gt;After that you need to locate and add appropriate javadoc file for this library. To do this you need to click on '+' sign. You can find javadoc files in \Libs\Docs folder:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/AddJavadoc.png"&gt;&lt;/P&gt;
&lt;P&gt;After javadocs were added click OK button to close the window. Then you need to repeat the steps above for other SciChart libraries(&lt;STRONG&gt;core, data, drawing and charting&lt;/STRONG&gt;). After that you should be able to see documentation for SciChart classes in your project:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/WatchJavadocsInAndroidStudio.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart Android control comes with an inbuilt fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e67785c9-5957-4a63-b1fa-41865d529aed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="30f7b8a6-e55b-49bb-909f-998d6d24112e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c9933f24-48ff-4f69-aa10-2ac38f6919af" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="290456e2-48c4-43ed-87a1-bc6452a926b6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="082ad458-9909-4138-ad71-af9c087f4be4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3cfc9b61-37eb-419f-b3bc-aa90aee60d99" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="30f7b8a6-e55b-49bb-909f-998d6d24112e" Status="New Topic" CreatedOn="2017-03-09T10:05:20.6789382Z" ModifiedOn="2019-09-03T17:17:25.4289578Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 02 - Creating a Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-03T17:17:25.4289578Z">&lt;P&gt;In this tutorial we explain how to create a basic chart. In the previous &lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Tutorial&lt;/A&gt; we explained how to add SciChart libraries as dependencies to an Android project.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;&lt;SPAN&gt;The SciChartSurface Type&lt;/SPAN&gt;&lt;/H2&gt;
&lt;P&gt;The root 2D chart Android control is called the &lt;A href="https://www.scichart.com/documentation/android/v3.x/SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;. This is the UI control you add to applications wherever you need a chart. You can add more than one SciChartSurface, can configure them independently, and link them together.&lt;/P&gt;
&lt;H2&gt;Creating SciChartSurface&lt;/H2&gt;
&lt;P&gt;Once SciChart libraries have been added as dependencies, you can access and use SciChart classes in your Android projects. SciChartSurface can be added to the activity layout either in the Android Studio designer or in code.&lt;/P&gt;
&lt;P&gt;In this tutorial, we are going to show how to do this in code.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For a detailed guide on how to add SciChartSurface in designer please see the Quickstart Guide: &lt;A href="https://www.scichart.com/documentation/android/v3.x/Creating%20your%20First%20SciChart%20Android%20App%20-%20Part%202.html"&gt;Creating your First SciChart Android App - Part 2&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;SciChartBuilder Helper Classes&lt;/H2&gt;
&lt;P&gt;In order to simplify the chart creation process and make code easier-to-read and concise, SciChart has helper classes. These follow the &lt;STRONG&gt;XXXBuilder&lt;/STRONG&gt; naming convention. They let the developer create and initialize objects with a set of methods. The topmost builder class is called &lt;STRONG&gt;SciChartBuilder&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;Create a Chart&lt;/H2&gt;
&lt;P&gt;First create a &lt;STRONG&gt;LinearLayout&lt;/STRONG&gt; by replacing the contents of &lt;STRONG&gt;activity_main.xml&lt;/STRONG&gt; with.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;xml&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&amp;nbsp;&lt;BR&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&amp;nbsp;&lt;BR&gt;xmlns:tools="&lt;A href="http://schemas.android.com/tools"&gt;http://schemas.android.com/tools&lt;/A&gt;"&amp;nbsp;&lt;BR&gt;android:layout_width="match_parent"&amp;nbsp;&lt;BR&gt;android:layout_height="match_parent"&amp;nbsp;&lt;BR&gt;android:id="@+id/chart_layout"&amp;nbsp;&lt;BR&gt;tools:context="com.scichart.gettingstarted.MainActivity"&amp;nbsp;&lt;BR&gt;android:orientation="vertical"&amp;gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then paste the code below into MainActivity.java.&lt;/P&gt;
&lt;P&gt;This will create a chart with two axes and the &lt;STRONG&gt;Hello World&lt;/STRONG&gt; annotation. You can pinch-zoom and pan this chart:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Create SciChartSurface using Builders&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onCreate(Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onCreate(savedInstanceState);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setContentView(R.layout.activity_main);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface surface = new SciChartSurface(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Get a layout declared in "activity_main.xml" by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; LinearLayout chartLayout = (LinearLayout) findViewById(R.id.chart_layout);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the SciChartSurface to the layout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chartLayout.addView(surface);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Initialize the SciChartBuilder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartBuilder.init(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain the SciChartBuilder instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChartBuilder sciChartBuilder = SciChartBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis xAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Y Axis Title").withVisibleRange(0, 100).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a TextAnnotation and specify the inscription and position for it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation textAnnotation = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(5.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(55.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Hello World!")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(20, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup chartModifiers = sciChartBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomPanModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the Y axis to the YAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the X axis to the XAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the annotation to the Annotations collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), chartModifiers);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;Congratulations! You have just created your first SciChartSurface!&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P align=left&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/FirstChart.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart Android control comes with an inbuilt fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ceadbd96-aa28-44b9-a3f7-2d8fbcb63399" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5f23a0c3-4914-4a3e-932e-733e1047a086" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3cfc9b61-37eb-419f-b3bc-aa90aee60d99" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="d3984899-263c-4eb7-b6ee-880b386cf41d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="50843f34-0ce8-4df7-96d2-227f7f9dd47b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2809494c-5cb6-41a1-8f18-6e53fe66ac6c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fae1bf5c-55ce-464c-aea8-8ebc45a065e6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2bb23f93-7e80-44ec-896d-cbf24062b72a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7f994081-2172-43cf-9853-5d4404a6ee3e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="fae1bf5c-55ce-464c-aea8-8ebc45a065e6" Status="New Topic" CreatedOn="2017-03-09T10:21:27.190523Z" ModifiedOn="2019-09-04T13:30:42.3661255Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 03 - Adding Series to a Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-04T13:30:42.3661255Z">&lt;P&gt;Following &lt;A href="https://www.scichart.com/documentation/android/v2.x/Tutorial%2002%20-%20Creating%20a%20Chart.html"&gt;Tutorial 02 - Creating a Chart&lt;/A&gt; where we created the SciChartSurface control, added an XAxis and a YAxis, we will now add a &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and plot some data.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial is &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v3.x/Tutorials/SciChartAndroid_Tutorial3"&gt;on Github&lt;/A&gt;. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Series to the Chart&lt;/H2&gt;
&lt;P&gt;In SciChart, there are special classes called &lt;A href="https://www.scichart.com/documentation/android/v3.x/What%20is%20a%20RenderableSeries.html"&gt;RenderableSeries&lt;/A&gt; that are responsible for drawing different chart types, such as lines (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Line%20Series%20Type.html"&gt;FastLineRenderableSeries&lt;/A&gt;), columns (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Column%20Series%20Type.html"&gt;FastColumnsRenderableSeries&lt;/A&gt;), candlestick series (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Candlestick%20Series%20type.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt;), filled area (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Mountain%20(Area)%20Series%20Type.html"&gt;FastMountainRenderableSeries&lt;/A&gt;), heat maps (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Uniform%20Heatmap%20Series%20Type.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;), error bars (&lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Error%20Bars%20Series%20Type.html"&gt;FastErrorBarsRenderableSeries&lt;/A&gt;), etc.&lt;/P&gt;
&lt;H3&gt;Adding a Line Plot to the Chart&lt;/H3&gt;
&lt;P&gt;In this tutorial, we are going to add a Line and a Scatter series onto the chart.&lt;/P&gt;
&lt;P&gt;First, we create some XY &lt;STRONG&gt;XyDataSeries&lt;/STRONG&gt; data for both the line and scatter plots:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;for (int i = 0; i &amp;lt; 1000; i++)&lt;BR&gt;{&lt;BR&gt;lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;scatterData.append(i, Math.cos(i * 0.1));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now add &lt;STRONG&gt;DataSeries lineData&lt;/STRONG&gt; to the &lt;STRONG&gt;RenderableSeries lineSeries&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IRenderableSeries lineSeries = sciChartBuilder.newLineSeries()&lt;BR&gt;.withDataSeries(lineData)&lt;BR&gt;.withStrokeStyle(ColorUtil.LightBlue, 2f, true)&lt;BR&gt;.build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then add it to the surface:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Surface surface.getRenderableSeries().add(lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Add a Scatter Plot&lt;/H3&gt;
&lt;P&gt;Similarly we can create a &lt;A href="https://www.scichart.com/documentation/android/v3.x/The%20Scatter%20Series%20Type.html"&gt;Scatter series&lt;/A&gt;. It requires a &lt;A href="https://www.scichart.com/documentation/android/v3.x/PointMarker%20API.html"&gt;PointMarker&lt;/A&gt; instance.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;EllipsePointMarker pointMarker = sciChartBuilder&lt;BR&gt;.newPointMarker(new EllipsePointMarker())&lt;BR&gt;.withFill(ColorUtil.LightBlue)&lt;BR&gt;.withStroke(ColorUtil.Green, 2f)&lt;BR&gt;.withSize(10)&lt;BR&gt;.build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now create the &lt;STRONG&gt;scatterSeries&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IRenderableSeries scatterSeries = sciChartBuilder.newScatterSeries()&lt;BR&gt;.withDataSeries(scatterData)&lt;BR&gt;.withPointMarker(pointMarker)&lt;BR&gt;.build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then add it to the surface:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;surface.getRenderableSeries().add(scatterSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Add Style&lt;/H3&gt;
&lt;P&gt;Use the class &lt;A href="https://www.scichart.com/documentation/android/v3.x/PenStyle,%20BrushStyle%20and%20FontStyle.html"&gt;PenStyle&lt;/A&gt; to hold style info. Its instance is created internally in the builder and passed to the &lt;STRONG&gt;lineSeries&lt;/STRONG&gt; to draw a stroke.&lt;/P&gt;
&lt;P&gt;You can pass a color value as an integer value, however, there are a constants for the most popular colors defined in the &lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Drawing~com.scichart.drawing.utility.ColorUtil.html"&gt;ColorUtil&lt;/A&gt; class.&lt;/P&gt;
&lt;H2&gt;Zooming the Chart to the Data Extents&lt;/H2&gt;
&lt;P&gt;At this point our &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; is ready to be rendered. Only one detail remains.&lt;/P&gt;
&lt;P&gt;We need to bring the RenderableSeries to the &lt;STRONG&gt;Viewport&lt;/STRONG&gt; of the SciChartSurface. To do this, you can either set &lt;STRONG&gt;VisibleRanges&lt;/STRONG&gt; on the axes manually or call the &lt;STRONG&gt;zoomExtents()&lt;/STRONG&gt; method on the &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;surface.zoomExtents();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that the &lt;STRONG&gt;zoomExtents()&lt;/STRONG&gt; method should always be called in the end of chart set up. This will prevent VisibleRanges on axes from being overridden after the call to &lt;STRONG&gt;zoomExtents()&lt;/STRONG&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Viewing Results&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;Build and run the application.&amp;nbsp;Both RenderableSeries should appear on the chart:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/ChartWithSeries.png"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="1f254239-c24c-4364-9ddf-fa7fe8c0c471" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="30f7b8a6-e55b-49bb-909f-998d6d24112e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="946a4c52-6ed5-4e3a-ac98-721df0371959" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2c5fca53-4e1c-426d-826b-966b97ed42b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="35058340-d215-4a0d-9556-529d0d27c182" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7f994081-2172-43cf-9853-5d4404a6ee3e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2c5fca53-4e1c-426d-826b-966b97ed42b0" Status="New Topic" CreatedOn="2017-03-09T10:22:13.9038861Z" ModifiedOn="2019-11-28T08:05:16.2890999Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 04 - Adding Zooming, Panning Behavior" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-11-28T08:05:16.2890999Z">&lt;P&gt;In this tutorials, following&lt;A href="fae1bf5c-55ce-464c-aea8-8ebc45a065e6"&gt;Tutorial 03 - Adding Series to a Chart&lt;/A&gt; where we created data series, we add the ability to zoom and pan to the chart.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The source code for this tutorial can be found at &amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/SciChart_v3_Release/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Zooming and Panning&lt;/H2&gt;
&lt;P&gt;So far in the tutorial series, we have created a new chart, added an &lt;STRONG&gt;XAxis&lt;/STRONG&gt; and &lt;STRONG&gt;YAxis&lt;/STRONG&gt;, added some data series, and simple zoom modifiers. Now are going to extend that and add more interaction behavior with other &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H3&gt;ChartModifiers&lt;/H3&gt;
&lt;P&gt;In SciChart, chart interactions are defined by &lt;A href="https://www.scichart.com/documentation/android/current/What%20is%20a%20ChartModifier.html"&gt;ChartModifiers&lt;/A&gt;. In addition to the SciChart modifiers you can write custom modifiers or extends existing ones.&lt;/P&gt;
&lt;P&gt;The provided modifiers include &lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;PinchZoomModifier&lt;/A&gt;&lt;SPAN href="RubberBandXyZoomModifier.html"&gt;RubberBandXyZoomModifier&lt;SPAN href="ZoomPanModifier.html"&gt;ZoomPanModifier&lt;SPAN href="ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;SPAN href="CursorModifier.html"&gt;CursorModifier&lt;SPAN href="RolloverModifier.html"&gt;RolloverModifier&lt;SPAN&gt;,&lt;/SPAN&gt; &lt;A href="18b07bb4-d65f-4417-a954-4fb58a308818"&gt;SeriesSelectionModifier&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;and others.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;Adding Chart Modifiers&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;Now we are going to create and configure a couple of new modifiers using SciChartBuilder and add them to the ChartModifiers collection of the SciChartSurface:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;ModifierGroup chartModifiers = sciChartBuilder.newModifierGroup()&lt;BR&gt;.withPinchZoomModifier().build()&lt;BR&gt;.withZoomPanModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;.withZoomExtentsModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;.withXAxisDragModifier().withReceiveHandledEvents(true).withDragMode(AxisDragModifierBase.AxisDragMode.Scale).withClipModeX(ClipMode.None).build()&lt;BR&gt;.withYAxisDragModifier().withReceiveHandledEvents(true).withDragMode(AxisDragModifierBase.AxisDragMode.Pan).build()&lt;BR&gt;.build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we add it to the collection:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Collections.addAll(surface.getChartModifiers(), chartModifiers);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;After re-building and running the application the chart should&amp;nbsp;behave like this:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/InteractionModifiers.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;To learn more about the zooming and panning&amp;nbsp;modifiers provided by SciChart out of the box please find&amp;nbsp;links to the corresponding documentation articles below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40" style="auto-update-caption: true"&gt;PinchZoomModifier&lt;/A&gt;&amp;nbsp;- allows zooming a chart with a pinch 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3" style="auto-update-caption: true"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;- allows pan&amp;nbsp;with finger drag 
&lt;LI&gt;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833" style="auto-update-caption: true"&gt;RubberBandXyZoomModifier&lt;/A&gt;&amp;nbsp;- allows zoom with finger drag 
&lt;LI&gt;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94" style="auto-update-caption: true"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;- allows zoom to fit on double tap 
&lt;LI&gt;&lt;A href="8be89d95-1b3a-4ce3-8665-1f8f18d43b32" style="auto-update-caption: true"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;- allows scale or pan on Y axis drag 
&lt;LI&gt;&lt;A href="3522c82b-989f-4d1b-bc80-be617b68af2f" style="auto-update-caption: true"&gt;XAxisDragModifier&lt;/A&gt;&amp;nbsp;- allows scale or pan on X axis drag &lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Also you can&amp;nbsp;find out about the ChartModifiers API and how to use it to create custom chart modifiers in the&amp;nbsp;&lt;A href="e14c324d-a823-460b-8971-cb248d617e35" style="auto-update-caption: true"&gt;Custom Modifiers - ChartModifierBase API&lt;/A&gt;&amp;nbsp;article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="87d542b1-45ad-414b-8f8b-1f9258c5955d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fae1bf5c-55ce-464c-aea8-8ebc45a065e6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e5e83ba5-026a-41f2-85e6-df71ed37fbef" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="103afbcf-5d52-4774-96f0-0af4e7d4823d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="9dbf6c0b-0523-473c-bca0-2972ef892e04" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7f994081-2172-43cf-9853-5d4404a6ee3e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="103afbcf-5d52-4774-96f0-0af4e7d4823d" Status="New Topic" CreatedOn="2017-03-09T10:22:57.2806666Z" ModifiedOn="2019-09-04T15:18:35.4130261Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 05 - Adding Tooltips and Legends" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-04T15:18:35.4130261Z">&lt;P&gt;This follows &lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0" style="auto-update-caption: true"&gt;Tutorial 04 - Adding Zooming, Panning Behavior&lt;/A&gt;.So far we have created a new chart, added both X axis and Y axis, plotted data series, and added zoom and pan. Now we will add a chart legend and tool tips.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add a Legend&lt;/H2&gt;
&lt;P&gt;In SciChart, a chart legend can be created and configured via the &lt;STRONG&gt;LegendModifier&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a LegendModifier and configure a chart legend&lt;BR&gt;ModifierGroup legendModifier = sciChartBuilder.newModifierGroup()&lt;BR&gt;.withLegendModifier()&lt;BR&gt;.withOrientation(Orientation.HORIZONTAL)&lt;BR&gt;.withPosition(Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM, 10)&lt;BR&gt;.build()&lt;BR&gt;.build();&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;// Add the LegendModifier to the SciChartSurface surface.getChartModifiers().add(legendModifier); 
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add a Cursor (Crosshair)&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;CursorModifier&lt;/STRONG&gt; adds a crosshair onto a SciChartSurface. When you put your finger on the screen or otherwise click it, it shows series values in tooltips and chart coordinates at that point point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create and configure a CursorModifier&lt;BR&gt;ModifierGroup cursorModifier = sciChartBuilder.newModifierGroup()&lt;/P&gt;
&lt;P&gt;.withCursorModifier().withShowTooltip(true).build()&lt;/P&gt;
&lt;P&gt;.build();&lt;/P&gt;
&lt;P&gt;// Add the CursorModifier to the SciChartSurface&lt;/P&gt;
&lt;P&gt;surface.getChartModifiers().add(cursorModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/CursorModifier.png"&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;To learn more about&amp;nbsp;cursors and legends&amp;nbsp;in SciChart please find&amp;nbsp;links to the corresponding documentation articles below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="764104d5-6906-439e-a2d8-72cc35308eee" style="auto-update-caption: true"&gt;Tooltip Modifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" style="auto-update-caption: true"&gt;Cursor Modifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193" style="auto-update-caption: true"&gt;Rollover Modifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f6e59c15-4337-410b-81e5-808989851e57" style="auto-update-caption: true"&gt;Legend Modifier&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0fccba9c-a504-48b8-9280-a18a94643360" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2c5fca53-4e1c-426d-826b-966b97ed42b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="20286b90-5f74-429d-827f-1db6b9832043" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="86dd9073-5257-4f09-b47a-9e1e7ee6cec8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="86dd9073-5257-4f09-b47a-9e1e7ee6cec8" Status="New Topic" CreatedOn="2017-03-09T10:25:00.8431691Z" ModifiedOn="2019-10-28T14:44:41.3854426Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 06 - Adding Realtime Updates" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:44:41.3854426Z">&lt;P&gt;So far we have focused on static charts. Assuming you have completed &lt;A href="103afbcf-5d52-4774-96f0-0af4e7d4823d" style="auto-update-caption: true"&gt;Tutorial 05 - Adding Tooltips and Legends&lt;/A&gt;, now we will show how to create live charts.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v3.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding New Data Values&lt;/H2&gt;
&lt;P&gt;We change the way we populate &lt;STRONG&gt;lineData&lt;/STRONG&gt; and &lt;STRONG&gt;scatterData&lt;/STRONG&gt; by spinning up a new thread and using &lt;STRONG&gt;java.util.Timer&lt;/STRONG&gt; to update it in the background.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;final XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add new data on update&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; TimerTask updateDataTask = new TimerTask() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int x = lineData.getCount();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(x, Math.cos(x * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Zoom series to fit the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Timer timer = new Timer();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long interval = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer.schedule(updateDataTask, delay, interval);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Making the Code More Efficient&lt;/H3&gt;
&lt;P&gt;This code works, but it isn't very efficient:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Calling an &lt;STRONG&gt;UpdateXXX&lt;/STRONG&gt; method triggers a chart update, which redraws the entire chart. 
&lt;LI&gt;The values are passed in as &lt;STRONG&gt;Double&lt;/STRONG&gt; objects, which require boxing/unboxing, which increases the number of objects to be removed during Garbage Collection. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Here is how to improve that:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Always append or update data in a DataSeries in batches instead of one at a time. 
&lt;LI&gt;Suspend updates on a &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; using &lt;STRONG&gt;UpdateSuspender&lt;/STRONG&gt; to prevent redrawing until you have updated the whole DataSeries. 
&lt;LI&gt;Use the class &lt;STRONG&gt;DoubleValues&lt;/STRONG&gt;. It stores data in an array internally and requires not require boxing/unboxing. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;So we rewrite the code as follows:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int dataCount = 1000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; dataCount; i++)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final DoubleValues lineDoubleData = new DoubleValues(dataCount);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final DoubleValues scatterDoubleData = new DoubleValues(dataCount);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineDoubleData.setSize(dataCount);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterDoubleData.setSize(dataCount);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; TimerTask updateDataTask = new TimerTask() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private double _phaseShift = 0.0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Fill the DoubleValues collections&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; dataCount; i++)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineDoubleData.set(i, Math.sin(i * 0.1 + _phaseShift));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterDoubleData.set(i, Math.cos(i * 0.1 + _phaseShift));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Update DataSeries using bunch update&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.updateRangeYAt(0, lineDoubleData);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.updateRangeYAt(0, scatterDoubleData);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _phaseShift += 0.01;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Timer timer = new Timer();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long interval = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer.schedule(updateDataTask, delay, interval);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, we should mention that it is worth rewriting initial call to the &lt;STRONG&gt;append()&lt;/STRONG&gt; method the same way. This will result in a noticeable decrease in load time in when there is a large amount of data.&lt;/P&gt;
&lt;P&gt;Finally, you should end up with a chart looking like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/UpdateDS.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The resulting chart should look very much like this:&lt;/P&gt;
&lt;H1&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/AppendData.gif"&gt;&amp;nbsp;&lt;/H1&gt;
&lt;H2&gt;Scrolling Realtime (FIFO) Charts&lt;/H2&gt;
&lt;P&gt;What if you wanted to scroll as new data was appended? You have a few choices.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you want to be &lt;STRONG&gt;memory efficient&lt;/STRONG&gt;, and you don't mind if you &lt;STRONG&gt;discard old data&lt;/STRONG&gt;, you can use our &lt;STRONG&gt;FIFO&lt;/STRONG&gt; (first-in-first-out) functionality. 
&lt;LI&gt;If you want to &lt;STRONG&gt;preserve old data&lt;/STRONG&gt;, you can simply update the VisibleRange of an axis. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;We're going to show you both techniques below.&lt;/P&gt;
&lt;H3&gt;FIFO Scrolling Charts (Discarding Old Data)&lt;/H3&gt;
&lt;P&gt;The most memory efficient way to achieve scrolling is to call &lt;STRONG&gt;setFifoCapacity()&lt;/STRONG&gt; on a DataSeries to set the maximum size of a DataSeries before old points are discarded. DataSeries in FIFO mode act as a circular (first-in-first-out) buffer. Once the capacity is exceeded, old points are discarded. You cannot zoom back to see the old points, once they are lost, they are lost.&lt;/P&gt;
&lt;P&gt;To make a DataSeries use the FIFO buffer, you have to set fifo capacity on the DataSeries, which defines the size of the FIFO buffer. The code from our application should be rewritten like the following to utilize a FIFO buffer:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Set FIFO capacity to 500 on DataSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int fifoCapacity = 500;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TimerTask updateDataTask = new TimerTask() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private int x = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(x, Math.cos(x * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Zoom series to fit the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.zoomExtents();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ++x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Timer timer = new Timer();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; long interval = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer.schedule(updateDataTask, delay, interval);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The code for the most part is self-explanatory. But we can point that that we set. &lt;STRONG&gt;FifoCapacity&lt;/STRONG&gt; on the DataSeries. Then, after apending new data we call &lt;STRONG&gt;zoomExtents()&lt;/STRONG&gt; to make series to fit the viewport in Y direction.&lt;/P&gt;
&lt;P&gt;This should be the result when you run the application:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/ScrollingFifo.gif"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9f7996c8-54f3-4f8c-a928-651de1eda1bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="103afbcf-5d52-4774-96f0-0af4e7d4823d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3c4e6468-30a6-4401-9f56-dfa4ccf7c3a6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b295f570-3b57-4bf8-8467-71b41908c024" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b295f570-3b57-4bf8-8467-71b41908c024" Status="New Topic" CreatedOn="2017-03-09T10:25:54.8976306Z" ModifiedOn="2019-09-05T07:34:57.1838444Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 07 - Adding Annotations" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T07:34:57.1838444Z">&lt;P&gt;In the second tutorial, &lt;A href="30f7b8a6-e55b-49bb-909f-998d6d24112e"&gt;Creating a Chart&lt;/A&gt;, we briefly mentioned the &lt;A href="https://www.scichart.com/documentation/android/v3.x/webframe.html#SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;&lt;STRONG&gt;Text Annotations API&lt;/STRONG&gt;&lt;/A&gt; to write &lt;STRONG&gt;Hello World&lt;/STRONG&gt; on the chart.&lt;/P&gt;
&lt;P&gt;This API also It lets you to add other UI elements to a chart, like:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Lines&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Text&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Boxes&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Arrows&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Android Views&lt;/STRONG&gt;, like, e.g., an &lt;STRONG&gt;ImageView&lt;/STRONG&gt; 
&lt;LI&gt;custom &lt;STRONG&gt;Markers&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v3.x/Tutorials/SciChartAndroid_Tutorial7" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Chart Annotations in SciChart&lt;/H2&gt;
&lt;P&gt;The SciChart annotations derive from the &lt;A href="https://www.scichart.com/documentation/android/v3.x/SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation.html"&gt;IAnnotation&lt;/A&gt; interface.&lt;/P&gt;
&lt;P&gt;This annotation types include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/LineAnnotation.html"&gt;LineAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt; 
&lt;LI&gt;Android Views using &lt;A href="https://www.scichart.com/documentation/android/v2.x/CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Adding Annotations to the Chart&lt;/H2&gt;
&lt;P&gt;In this tutorial, we are going to build on the &lt;A href="https://www.scichart.com/documentation/android/v2.x/Tutorial%2006%20-%20Adding%20Realtime%20Updates.html"&gt;previous tutorial&lt;/A&gt;. We will add a bulletin type marker (e.g., text, like a stock ticker or news item) to the chart.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;To do this, we will modify the &lt;STRONG&gt;updateDataTask&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;We create a &lt;STRONG&gt;TextAnnotation&lt;/STRONG&gt; and add it to the &lt;STRONG&gt;Annotations&lt;/STRONG&gt; collection of the &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt;. We use &lt;STRONG&gt;SciChartBuilder&lt;/STRONG&gt; to create and configure the annotation.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The modified code is shown below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int fifoCapacity = 500;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TimerTask updateDataTask = new TimerTask() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private int x = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(x, Math.cos(x * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // New code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an annotation every 100 data points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(x%100 == 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation marker = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("N")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBackgroundColor(ColorUtil.Green)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(x)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(0.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(20, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZIndex(1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getAnnotations().add(marker);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Remove one annotation from the beginning&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // in the FIFO way&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(x &amp;gt; fifoCapacity){&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getAnnotations().remove(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Zoom series to fit the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ++x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Timer timer = new Timer();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; long delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; long interval = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer.schedule(updateDataTask, delay, interval);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code from produces this following chart where we have added the letter &lt;STRONG&gt;N&lt;/STRONG&gt; as a TextAnnotation as each points where x is a multiple of 100.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/Annotations.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;You can find out&amp;nbsp;more about the Annotations API in the relevant section of the documentation:&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788" style="auto-update-caption: true"&gt;What Is an Annotation&lt;/A&gt;. Also, there is a couple of examples&amp;nbsp;showcasing&amp;nbsp;annotations in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-annotations-example/"&gt;SciChart Android Examples Suite&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="a1f6fc4c-aaf5-4f03-acb5-fe156bb51938" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="86dd9073-5257-4f09-b47a-9e1e7ee6cec8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="efbbdf58-a0b4-44b3-a39b-50a07acbf09b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" Status="New Topic" CreatedOn="2017-03-09T10:27:35.0141976Z" ModifiedOn="2019-10-28T14:46:03.8040028Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 08 - Adding Multiple Axis" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:46:03.8040028Z">&lt;P&gt;In the previous &lt;A href="https://www.scichart.com/documentation/android/v3.x/Tutorial%2007%20-%20Adding%20Annotations.html"&gt;tutorial&lt;/A&gt; we learned how to add a &lt;A href="https://www.scichart.com/documentation/android/v2.x/webframe.html#SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt; on a &lt;A href="https://www.scichart.com/documentation/android/v2.x/webframe.html#SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Now we are going to learn how to too a second &lt;A href="https://www.scichart.com/documentation/android/v3.x/SciChart.Charting~com.scichart.charting.visuals.axes.IAxis.html"&gt;YAxis&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;SciChart supports unlimited axes This unlocks many possibilities , such as &lt;STRONG&gt;rotated (vertical)&lt;/STRONG&gt; charts, &lt;STRONG&gt;mixed axes&lt;/STRONG&gt; (have both the XAxis and YAxis on the left), &lt;STRONG&gt;horizontally&lt;/STRONG&gt; or vertically stacked axes, etc.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The source code for this tutorial is on &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;github&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To illustrate, In this tutorial, we are going to add a second &lt;STRONG&gt;YAxis&lt;/STRONG&gt; to the chart. We are going to show how to register annotations and line series on the second axis. We are also going to show how to ensure Axis drag behavior work on both axis.&lt;/P&gt;
&lt;H2&gt;Adding a Second Y Axis&lt;/H2&gt;
&lt;P&gt;The procedure to add a second axis to a &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; is pretty much the same as with one axis with one difference. You must assign a &lt;STRONG&gt;unique string ID&lt;/STRONG&gt; to all axes if there is more than one.&lt;/P&gt;
&lt;P&gt;To see the axis to appear to the either side of a chart, you set &lt;STRONG&gt;AxisAlignment&lt;/STRONG&gt; to &lt;STRONG&gt;AxisAlignment.Left&lt;/STRONG&gt;, &lt;STRONG&gt;AxisAlignment.Right&lt;/STRONG&gt;, etc. &lt;A href="https://www.scichart.com/documentation/android/v3.x/SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment.html"&gt;enumeration&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Let's add another axis and align it to the left side of the chart (assuming the original one is placed to the right).&lt;/P&gt;
&lt;P&gt;To have a different scale on the secondary axis, we are going to enlarge its &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; by 40% setting a &lt;STRONG&gt;GrowBy&lt;/STRONG&gt; value:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a numeric axis, right-aligned&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxisRight = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Primary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign a unique ID to the axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Right)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create another numeric axis, left-aligned&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxisLeft = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Secondary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign a unique ID to the axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("secondaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Left)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withGrowBy(0.2,0.2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add both Y axes to the YAxes collection of the surface Collections.addAll(surface.getYAxes(), yAxisLeft, yAxisRight);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see the second axis in our application:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/TwoYAxes.png"&gt;&lt;/P&gt;
&lt;P&gt;Note that &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and &lt;STRONG&gt;Annotations&lt;/STRONG&gt; don't get rendered now.&lt;/P&gt;
&lt;H2&gt;Registering RenderableSeries on an Axis&lt;/H2&gt;
&lt;P&gt;If there are several Y or X axes, you need to register other chart parts, like &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and &lt;STRONG&gt;Annotations&lt;/STRONG&gt;, on a particular axis to be measured against its scale.&lt;/P&gt;
&lt;P&gt;From the tutorial, we are going to attach one series to the right axis and the other to the left axis, passing corresponding IDs to the RenderableSeries:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;// Create and configure a line series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRenderableSeries lineSeries = sciChartBuilder.newLineSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(lineData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Register on a particular axis using its ID&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.LightBlue, 2f, true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure a scatter series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRenderableSeries scatterSeries = sciChartBuilder.newScatterSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(scatterData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Register on a particular axis using its ID&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("secondaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The resulting chart is shown below:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SecondaryAxisWithSeries.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Registering Annotations on an Axis&lt;/H2&gt;
&lt;P&gt;Annotations also need to be registered on a certain axis in a multi-axis scenario. So we are going to assign the axis IDs to annotations in on our chart in this way:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;TextAnnotation marker = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Register on a particular axis using its ID&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Text")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBackgroundColor(ColorUtil.Green)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(x)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(0.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(20, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZIndex(1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see the annotations on our chart again:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SecondaryAxisWithAnnotations.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;Here is related documentation for further reading:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="4e3b9e99-8d41-4edc-ac35-368d459f8c81" style="auto-update-caption: true"&gt;Adding an Axis to a SciChartSurface&lt;/A&gt; 
&lt;LI&gt;&lt;A href="0ec125b0-0563-40b0-ba8c-0929f387c6b1" style="auto-update-caption: true"&gt;Chart Layout - Placing Axis Central in the Chart&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b1f7b793-a230-44a5-ad59-66a2b8062d2b" style="auto-update-caption: true"&gt;Chart Layout - Stack Axes Vertically or Horizontally&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3d17ae15-e43d-4115-97b1-659f04c0c563" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b295f570-3b57-4bf8-8467-71b41908c024" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3300cbc0-4c17-4307-9322-70cc3e09c08b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5cdfe58-f742-4e91-8ee7-f39b850743d7" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5cdfe58-f742-4e91-8ee7-f39b850743d7" Status="New Topic" CreatedOn="2017-03-09T10:49:52.3633636Z" ModifiedOn="2019-11-28T08:05:16.274114Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 09 - Linking Multiple Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-11-28T08:05:16.274114Z">&lt;P&gt;The previous tutorial is: &lt;A href="https://www.scichart.com/documentation/android/v3.x/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html"&gt;Tutorial 08 - Adding Multiple Axis&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;In these tutorials, so far we have added a chart with two &lt;STRONG&gt;YAxis&lt;/STRONG&gt;, one &lt;STRONG&gt;XAxis&lt;/STRONG&gt;, two series, tooltips, legends, zooming, panning, and annotations.&lt;/P&gt;
&lt;P&gt;Now we are going to show you how to create multiple charts and link them together.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our &lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples/tree/master/v3.x/Tutorial9" target=_blank&gt;github&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Multiple Charts&lt;/H2&gt;
&lt;P&gt;So far our code looks like this:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;package com.example.tutorials.scichart.myapplication;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import android.os.Bundle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import android.support.v7.app.AppCompatActivity;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import android.widget.LinearLayout;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.model.dataSeries.XyDataSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.modifiers.ModifierGroup;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.SciChartSurface;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.annotations.HorizontalAnchorPoint;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.annotations.TextAnnotation;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.annotations.VerticalAnchorPoint;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.axes.AxisAlignment;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.axes.IAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.pointmarkers.EllipsePointMarker;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.charting.visuals.renderableSeries.IRenderableSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.core.framework.UpdateSuspender;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.drawing.utility.ColorUtil;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import com.scichart.extensions.builders.SciChartBuilder;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import java.util.Collections;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import java.util.Timer;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; import java.util.TimerTask;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public class MainActivity extends AppCompatActivity {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onCreate(Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onCreate(savedInstanceState);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setContentView(R.layout.activity_main);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChartSurface surface = new SciChartSurface(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Get a layout declared in "activity_main.xml" by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final LinearLayout chartLayout = (LinearLayout) findViewById(R.id.chart_layout);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the SciChartSurface to the layout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chartLayout.addView(surface);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Initialize the SciChartBuilder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartBuilder.init(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Obtain the SciChartBuilder instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChartBuilder sciChartBuilder = SciChartBuilder.instance();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis xAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxisRight = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Primary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Right)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create another numeric axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxisLeft = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Secondary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("secondaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Left)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withGrowBy(0.2, 0.2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int fifoCapacity = 500;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries lineData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyDataSeries scatterData = sciChartBuilder.newXyDataSeries(Integer.class, Double.class)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFifoCapacity(fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TimerTask updateDataTask = new TimerTask() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private int x = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(x, Math.cos(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x % 100 == 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boolean isEven = x % 2 == 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String yAxisId = isEven ? "primaryYAxis" : "secondaryYAxis";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation marker = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId(yAxisId)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Text")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBackgroundColor(ColorUtil.Green)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(x)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(0.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(20, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZIndex(1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getAnnotations().add(marker);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x &amp;gt; fifoCapacity) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getAnnotations().remove(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Zoom series to fit the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ++x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Timer timer = new Timer();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; long delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; long interval = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer.schedule(updateDataTask, delay, interval);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure a line series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRenderableSeries lineSeries = sciChartBuilder.newLineSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(lineData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.LightBlue, 2f, true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an Ellipse PointMarker for the Scatter Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EllipsePointMarker pointMarker = sciChartBuilder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .newPointMarker(new EllipsePointMarker())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LightBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.Green, 2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(10)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure a scatter series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRenderableSeries scatterSeries = sciChartBuilder.newScatterSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(scatterData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("secondaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a RenderableSeries onto the SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getRenderableSeries().add(scatterSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getRenderableSeries().add(lineSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure chart modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup chartModifiers = sciChartBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomPanModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withCursorModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a TextAnnotation and specify the inscription and position for it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation textAnnotation = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(5.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(55.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Hello World! ^_^")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(20, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the chart modifiers to the SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.getChartModifiers().add(chartModifiers);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the Y axis to the YAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxisLeft, yAxisRight);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the X axis to the XAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the annotation to the Annotations collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), chartModifiers);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding a Second Chart&lt;/H2&gt;
&lt;P&gt;Now we repeat the same procedure to configure the second chart, with some differences.&lt;/P&gt;
&lt;P&gt;We will leave off annotations and modifiers . Everything else will be the same.&lt;/P&gt;
&lt;P&gt;The code below adds one more &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; to the application:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;final SciChartSurface surface2 = new SciChartSurface(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Add the SciChartSurface to the layout chartLayout.addView(surface2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Set layout parameters for both surfaces LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT, 1.0f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.setLayoutParams(layoutParams);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface2.setLayoutParams(layoutParams);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Create a numeric X axis final IAxis xAxis2 = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //.withGrowBy(0, 0.1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Create a numeric axis final IAxis yAxisRight2 = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Primary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Right)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Create another numeric axis final IAxis yAxisLeft2 = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Secondary")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId("secondaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Left)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withGrowBy(0.2, 0.2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Add the Y axis to the YAxes collection of the surface Collections.addAll(surface2.getYAxes(), yAxisLeft2, yAxisRight2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Add the X axis to the XAxes collection of the surface Collections.addAll(surface2.getXAxes(), xAxis2)&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Your application should now show a view with two charts:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SyncTwoCharts.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding a Series to the Second Chart&lt;/H2&gt;
&lt;P&gt;Now we are ready to add a &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; to the second chart. To try something new, lets t another RenderableSeries type, &lt;A href="https://www.scichart.com/documentation/android/v2.x/The%20Mountain%20(Area)%20Series%20Type.html"&gt;FastMountainRenderableSeries&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;We are going to attach an existing &lt;STRONG&gt;DataSeries&lt;/STRONG&gt; so it scrolls just like the series on the first chart. Also, we will attach the &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; to the right axis.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Remember, since there are two Y axes, they both must have unique IDs assigned to them. Those IDs can be used to register &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and &lt;STRONG&gt;Annotations&lt;/STRONG&gt; on a corresponding axis.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Add these lines of code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create and configure an area series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRenderableSeries areaSeries = sciChartBuilder.newMountainSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(scatterData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("primaryYAxis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.LightBlue, 2f, true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAreaFillColor(ColorUtil.argb(ColorUtil.LightSteelBlue, 0.6f))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Add the area series to the RenderableSeries collection of the surface Collections.addAll(surface2.getRenderableSeries(), areaSeries);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now run the application again:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/SyncChartsScrolling.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Synchronizing VisibleRanges on Axes&lt;/H2&gt;
&lt;P&gt;To make both charts show the same &lt;STRONG&gt;VisibleRanges&lt;/STRONG&gt; on both axes, you share the same &lt;STRONG&gt;IRange&lt;/STRONG&gt; instance across the axes.&lt;/P&gt;
&lt;P&gt;But in this case, there is no need to do that because both charts use the same data.&lt;/P&gt;
&lt;P&gt;If it was different, we would need to synchronize &lt;STRONG&gt;VisibleRanges&lt;/STRONG&gt; like this:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create an IRange instance that will be shared across multiple charts&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IRange sharedXRange = new DoubleRange(0d, 1d);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Create an X axis and apply sharedXRange&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis xAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(sharedXRange)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Create another X axis and apply sharedXRange&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis xAxis2 = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(sharedXRange)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Synchronizing Chart Widths&lt;/H2&gt;
&lt;P&gt;Imagine a situation when you have a two charts with Y axes on opposite sides:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/ChartWidthsDesynchronized.png"&gt;&lt;/P&gt;
&lt;P&gt;The bottom chart sticks out to the left because there is no second Y Axis. So we use the helper class &lt;STRONG&gt;SciChartVerticalGroup&lt;/STRONG&gt; to line them up:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a SciChartVerticalGroup&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartVerticalGroup verticalGroup = new SciChartVerticalGroup();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add two surfaces which widths are to be synchronized verticalGroup.addSurfaceToGroup(surface);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalGroup.addSurfaceToGroup(surface2);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Results in this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Tutorial_files/ChartWidthsSynchronized.png"&gt;&lt;/P&gt;
&lt;H2&gt;Linking Cursor and Other Modifiers&lt;/H2&gt;
&lt;P&gt;Next we are going to link chart modifiers.&lt;/P&gt;
&lt;P&gt;The first chart has an array of &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; set up to handle zooming, panning and tooltips. We are going to add some of these modifiers to the second chart:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create the second collection of chart modifiers &lt;/P&gt;
&lt;P&gt;ModifierGroup chartModifiers2 = sciChartBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomPanModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withCursorModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Add the interactions to the ChartModifiers collection of the surface &lt;/P&gt;
&lt;P&gt;Collections.addAll(surface2.getChartModifiers(), chartModifiers2);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If you run the applicaiton now, you will notice that you have zooming behaviour and tooltips on both charts, but the mouse events still aren't linked. You need to do a few more steps to fully link the charts together.&lt;/P&gt;
&lt;H3&gt;Sharing MotionEventGroup&lt;/H3&gt;
&lt;P&gt;We need to set &lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt; on the &lt;STRONG&gt;ModifierGroups&lt;/STRONG&gt; on both charts. Set this to a string value. It needs to be the same string on both charts to link the charts together.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create the second collection of chart modifiers &lt;/P&gt;
&lt;P&gt;ModifierGroup chartModifiers2 = sciChartBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setting MotionEventsGroup&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMotionEventsGroup("SharedMotionEvents")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Adding some modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomPanModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withCursorModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Hint! You can use a &lt;STRONG&gt;MouseEventGroup&lt;/STRONG&gt; on more than two charts. You can also bind this value to a &lt;STRONG&gt;ViewModel&lt;/STRONG&gt; property to make it dynamic.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Run the application again. The &lt;STRONG&gt;Cursors&lt;/STRONG&gt; and &lt;STRONG&gt;Tooltips&lt;/STRONG&gt; are now synchronizing across the charts.&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;Our SciChart Android Examples Suite contains a couple of examples that show chart synchronization techniques. For instance, take a look at the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-sync-multi-chart/"&gt;Sync Multi Chart Example&lt;/A&gt;. You can download the full&amp;nbsp;demo application from&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-examples/"&gt;https://www.scichart.com/android-chart-examples/&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="018bde61-2d81-4309-a6ce-65df5dce8f97" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2a5e800c-d796-4086-ad6e-1bf2a2569cc6" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/android-chart-example-sync-multi-chart/" BuildFlags="">
                    <Title m="2017-03-22T08:28:33.8054072Z">Sync Multi Chart Example</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="15307027-f0b0-4173-87d0-0765259f7448" AutoIndex="false">
            <Caption m="2017-04-18T11:05:07.721909Z">Xamarin Tutorials</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="b208d225-0b83-4e60-a832-4b4b2716a469" Status="New Topic" CreatedOn="2017-04-18T11:05:14.7717375Z" ModifiedOn="2019-09-05T13:25:46.4057075Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 01 - Adding SciChart libraries as dependencies" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.4057075Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Create the Visual Studio Solution&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In this tutorial series we will create a simple line chart using SciChart Xamarin.Android. First, we need to create a new project and reference the DLLs.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P style="MARGIN-BOTTOM: 0px; MARGIN-TOP: 0px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px"&gt;&lt;STRONG&gt;If you have already created a project with references to SciChart DLLs, you can safely skip to&amp;nbsp;&lt;A href="b4336b38-3278-4c42-b9c0-664f4fa984aa"&gt;Xamarin Tutorial 02 - Creating a Chart&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;First, ensure you have downloaded and unzipped the SciChart Xamarin.Android&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;package.&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;Next, create a new Visual studio project selecting&amp;nbsp;Xamarin Android Single-View App.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinNewProject.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Referencing the SciChart DLLs&lt;/H2&gt;
&lt;H3&gt;Referencing from Installation Directory&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;Right click the project and click Add Reference&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddReference.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;In the References dialog, select Assemblies and search for SciChart.Android.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;Now add a reference to SciChart.Android.Core, SciChart.Android.Data, SciChart.Android.Drawing and SciChart.Android.Charting and click OK to complete.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;Or, alternative, referencing from NuGet&lt;/H3&gt;
&lt;OL&gt;
&lt;LI&gt;Alternatively, you can optionally reference SciChart from NuGet. Setup the NuGet feed according to the article&amp;nbsp;&lt;A style="TEXT-DECORATION: none; COLOR: rgb(19,100,196)" href="http://support.scichart.com/index.php?/Knowledgebase/Article/View/17232/37/getting-nightly-builds-with-nuget" target=_blank&gt;Getting Nightly Builds with NuGet&lt;/A&gt; 
&lt;LI&gt;In Visual Studio select View -&amp;gt; Other Windows -&amp;gt; Package Manager Console 
&lt;LI&gt;Type&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Install-package SciChart.Android&lt;/STRONG&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;in the console and click Enter. This will isntall the latest build of SciChart.Android. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinInstallFromNuget.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;At this point the solution should build and run, however we now need to add functionality.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinProjectFinishedConfiguration.png"&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart Android control comes with an inbuilt fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="7050da83-33f7-4681-8ea8-1620b3f0b395" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b4336b38-3278-4c42-b9c0-664f4fa984aa" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b4336b38-3278-4c42-b9c0-664f4fa984aa" Status="New Topic" CreatedOn="2017-04-18T11:24:14.4626244Z" ModifiedOn="2019-09-05T13:25:46.4286903Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 02 - Creating a Chart" BuildFlags="">
                <Title m="2017-04-18T12:12:11.3390304Z">Xamarin Tutorial 02 - Creating a Chart</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.4286903Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Licensing SciChart&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;The SciChart Android control&amp;nbsp;comes with an inbuilt&amp;nbsp;&lt;STRONG&gt;fully-functional 30-day trial&lt;/STRONG&gt;. During the trial period&amp;nbsp;the &lt;SPAN&gt;SciChartSurface control&lt;/SPAN&gt;&amp;nbsp;displays a watermark “Powered by SciChart”.&amp;nbsp;&lt;SPAN&gt;At the end of the trial period, applications you have built with SciChart will cease to work and you will not be able to keep working on them. In order to&amp;nbsp;continue&amp;nbsp;using SciChart, please&amp;nbsp;&lt;A href="https://www.scichart.com/contact-us/"&gt;Contact Us&lt;/A&gt; to &lt;STRONG&gt;buy a perpetual license&lt;/STRONG&gt; key&amp;nbsp;or&amp;nbsp;to &lt;STRONG&gt;ask for an extended trial&lt;/STRONG&gt; license key.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;SciChartSurface Type&lt;/H2&gt;
&lt;P&gt;The root 2D chart control is called the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;. This is the&amp;nbsp;Android View that&amp;nbsp;you will be adding to your applications wherever you need a chart. You can add more than one SciChartSurface, you can configure them independently, and you can link them together.&lt;/P&gt;
&lt;P&gt;First up, let’s start by declaring one&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Declaring a SciChartSurface Instance&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;After Referencing the SciChart.Android DLLs from NuGet (package=SciChart.Android), from local DLL files (referencing DLLs SciChart.Android.Charting, SciChart.Android.Drawing, SciChart.Android.Data, SciChart.Android.Core) or the SciChart Source from Github, a SciChartSurface instance can be declared as follows:&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;XML&lt;/H3&gt;
&lt;P&gt;First declare&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt; inside file with layout&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring a SciChartSurface Instance&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;BR&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/Chart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="fill_parent" /&amp;gt;&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;C#&lt;/H3&gt;
&lt;P&gt;Then use it in code&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring SciChartSurface Instance&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected override void OnCreate(Bundle bundle)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnCreate(bundle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set our view from the "main" layout resource&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SetContentView(Resource.Layout.Main);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Get our chart from the layout resource,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var chart = FindViewById&amp;lt;SciChartSurface&amp;gt;(Resource.Id.Chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var xAxis = new NumericAxis(this) { AxisTitle = "Number of Samples (per Series)" };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var yAxis = new NumericAxis(this)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisTitle = "Value",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VisibleRange = new DoubleRange(-1, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add xAxis to the XAxes collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.XAxes.Add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add yAxis to the YAxes collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.YAxes.Add(yAxis);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;SPAN&gt;The code above declares a SciChartSurface and adds a (numeric) X and Y Axis.&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;Congratulations, you have just created your first SciChartSurface!&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinCreateChart.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart Android control comes with an inbuilt fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="http://www.scichart.com/licensing-scichart-android" target=_blank&gt;www.scichart.com/licensing-scichart-android&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="1eb8709b-4afd-41ce-abc7-0f1be8b08ddb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b208d225-0b83-4e60-a832-4b4b2716a469" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3f977655-e32d-4fc9-a60d-7c151cadaf5e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b86b2dfe-b728-4429-b88a-c11cf8b3b39c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b86b2dfe-b728-4429-b88a-c11cf8b3b39c" Status="New Topic" CreatedOn="2017-04-18T14:52:17.4362752Z" ModifiedOn="2019-09-05T13:25:46.4586651Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 03 - Adding Series to a Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.4586651Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Series to a SciChartSurface&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(245,245,245); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;Following on from&amp;nbsp;&lt;A href="b4336b38-3278-4c42-b9c0-664f4fa984aa"&gt;Xamarin Tutorial 02 - Creating a SciChartSurface&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(245,245,245); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;where we created the chart control, added an XAxis and a YAxis, we will now add a some RenderableSeries and some data to the chart.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Declaring a RenderableSeries&lt;/H2&gt;
&lt;P&gt;To draw a Line and Scatter series on the chart, we need to define two RenderableSeries, and two DataSeries to hold the data.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;First, lets declare the DataSeries&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create DataSeries for the Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create XyDataSeries to host data for our chart&lt;BR&gt;var lineData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Sin(x)"};&lt;BR&gt;var scatterData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Cos(x)"};&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For these data series we need to add some data to the chart&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add data for the Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Append data which should be drawn&lt;BR&gt;for (var i = 0; i &amp;lt; 1000; i++)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.Append(i, Math.Sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.Append(i, Math.Cos(i * 0.1));&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we need to declare the RenderableSeries&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create RenderableSeries for the Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create line series with data appended into lineData&lt;BR&gt;var lineSeries = new FastLineRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = lineData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.LightBlue, 2)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create scatter series with data appended into scatterData&lt;BR&gt;var scatterSeries = new XyScatterRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = scatterData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PointMarker = new EllipsePointMarker()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Width = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Height = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.Green, 2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FillStyle = new SolidBrushStyle(Color.LightBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And finally we need to add them into chart's RenderableSeries collection&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding RenderableSeries to the Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Add the renderable series to the RenderableSeries collection of the chart&lt;BR&gt;chart.RenderableSeries.Add(lineSeries);&lt;BR&gt;chart.RenderableSeries.Add(scatterSeries);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Congratulations! You now have added some series to a chart!&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddSeries.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e709a3d0-3742-4800-873c-5a21f177820e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b4336b38-3278-4c42-b9c0-664f4fa984aa" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="dca2e584-8e56-46bf-bb57-6f62ba11321a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9f69d415-734f-47d5-aeed-4d365923d22a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9f69d415-734f-47d5-aeed-4d365923d22a" Status="New Topic" CreatedOn="2017-04-18T14:52:44.173023Z" ModifiedOn="2019-09-05T13:25:46.4756513Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 04 - Adding Zooming, Panning Behaviors" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.4756513Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Zooming, Panning Behaviors&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;So far in the tutorial series, we have created a new chart, added an XAxis, YAxis, some series.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;We're going&amp;nbsp;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;to extend this now to add zoom, pan behavior to the chart. Modify the code from&amp;nbsp;&lt;A href="b86b2dfe-b728-4429-b88a-c11cf8b3b39c"&gt;Xamarin Tutorial 03 - Adding Series to a Chart&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;as follows&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding Zoom, Pan Behaviors&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create interactivity modifiers&lt;BR&gt;var pinchZoomModifier = new PinchZoomModifier();&lt;BR&gt;pinchZoomModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;var zoomPanModifier = new ZoomPanModifier();&lt;BR&gt;zoomPanModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;var zoomExtentsModifier = new ZoomExtentsModifier();&lt;BR&gt;zoomExtentsModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;var yAxisDragModifier = new YAxisDragModifier();&lt;BR&gt;yAxisDragModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create modifier group from declared modifiers&lt;BR&gt;var modifiers = new ModifierGroup(pinchZoomModifier, zoomPanModifier, zoomExtentsModifier, yAxisDragModifier);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the interactions to the ChartModifiers collection of the chart&lt;BR&gt;chart.ChartModifiers.Add(modifiers);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;&lt;SPAN class=Apple-converted-space&gt;After rebuilding and running the application you should be able to pan and zoom chart.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;&lt;SPAN class=Apple-converted-space&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddZoomPanBehaviors.gif"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="565ee25b-476c-4617-b686-87e7042355a9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b86b2dfe-b728-4429-b88a-c11cf8b3b39c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6b6d6808-1d18-4b4e-9345-9859e42dd775" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f5961004-3679-4c2a-aae7-76518d89673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f5961004-3679-4c2a-aae7-76518d89673b" Status="New Topic" CreatedOn="2017-04-18T14:53:23.1819812Z" ModifiedOn="2019-09-05T13:25:46.4936419Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 05 - Adding Tooltips &amp; Legends to a Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.4936419Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This article is a continuation of a tutorial series on how to create a chart using SciChart Xamarin.Android. So far we have created a new chart, added&amp;nbsp;both X axis and Y axis, some series with data and also zoom and pan behaviors. The previous tutorial can be found here:&amp;nbsp;&lt;A href="9f69d415-734f-47d5-aeed-4d365923d22a"&gt;Xamarin Tutorial 04 - Adding Zooming, Panning Behavior&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding a Legend to the Chart&lt;/H2&gt;
&lt;P&gt;In SciChart, a chart legend can be created and configured via the LegendModifier:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create a&amp;nbsp;LegendModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create and configure legend&lt;BR&gt;var legendModifier = new LegendModifier(this);&lt;BR&gt;legendModifier.SetLegendPosition(GravityFlags.Bottom | GravityFlags.CenterHorizontal, 10);&lt;BR&gt;legendModifier.SetOrientation(Orientation.Horizontal);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Series Tooltips&lt;/H2&gt;
&lt;P&gt;Similarly, to add series tooltips you have to create a corresponding modifier and add it to the ChartModifiers collection of&amp;nbsp;a SciChartSurface. In this tutorial, we are going to add a RolloverModifier to the chart:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create a RolloverModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create RolloverModifier to show tooltips&lt;BR&gt;var rolloverModifier = new RolloverModifier();&lt;BR&gt;rolloverModifier.SetReceiveHandledEvents(true);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The last step is to modify previosly created ModifierGroup and add new modifiers:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add new modifiers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;var modifiers = new ModifierGroup(pinchZoomModifier, zoomPanModifier, zoomExtentsModifier, yAxisDragModifier, rolloverModifier, legendModifier);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When you rebuild project you should see next:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddLegendAndTooltips.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b48f7d7f-530b-45a0-b1f2-83f2653f74e1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9f69d415-734f-47d5-aeed-4d365923d22a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="29db1b1e-bd73-433a-a734-f963f32994c0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb01ffa-b24c-4b41-8008-aa619fab0599" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3fb01ffa-b24c-4b41-8008-aa619fab0599" Status="New Topic" CreatedOn="2017-04-18T14:53:58.3373609Z" ModifiedOn="2019-09-05T13:25:46.515624Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 06 - Adding Realtime Updates" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.515624Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This article is a continuation of a tutorial series on how to create a chart using SciChart Android. So far we have focused on static charts where the data doesn't change. Assuming you have completed&amp;nbsp;&lt;A href="Xamarin Tutorial 05 - Adding Tooltips &amp;amp; Legends to a Chart.html"&gt;Xamarin Tutorial 05 - Adding Tooltips and Legends&lt;/A&gt;, we will now make some changes to update the data dynamically.&lt;/P&gt;
&lt;H2&gt;Updating Data Values&lt;/H2&gt;
&lt;P&gt;In our DataSeries, we have some static data so far. Lets animate it now.&lt;/P&gt;
&lt;P&gt;We are going to add a Timer and schedule&amp;nbsp;updating the data&amp;nbsp;on timer tick.&amp;nbsp;To update&amp;nbsp;data in a&amp;nbsp;DataSeries, we&amp;nbsp;have to call&amp;nbsp;one of the available &lt;STRONG&gt;UpdateXXX&lt;/STRONG&gt;&amp;nbsp;methods on that DataSeries. Also to avoid unnecessary boxing/unboxing of primitive types we'll use two DoubleValues instances&amp;nbsp;as a buffers.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Update Data&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;double phase = 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;var timer = new Timer(30) {AutoReset = true};&lt;BR&gt;var lineBuffer = new DoubleValues(1000);&lt;BR&gt;var scatterBuffer = new DoubleValues(1000);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Update on each tick of timer&lt;BR&gt;timer.Elapsed += (s, e) =&amp;gt;&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineBuffer.Clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterBuffer.Clear();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 1000; i++)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineBuffer.Add(Math.Sin(i*0.1 + phase));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterBuffer.Add(Math.Cos(i*0.1 + phase));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (chart.SuspendUpdates())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.UpdateRangeYAt(0, lineBuffer);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.UpdateRangeYAt(0, scatterBuffer);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; phase += 0.01;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;timer.Start();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinUpdateDataSeries.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Adding New Data Values&lt;/H2&gt;
&lt;P&gt;The DataSeries class&amp;nbsp;declares a bunch of &lt;STRONG&gt;Append()&lt;/STRONG&gt; methods. You should call&amp;nbsp;a suitable one and pass&amp;nbsp;new data as a param into it to add the data to a&amp;nbsp;DataSeries.&amp;nbsp;The code from above&amp;nbsp;can be rewritten as follows to append new data constantly to&amp;nbsp;the&amp;nbsp;DataSeries:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Append Data&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;var timer = new Timer(30) {AutoReset = true};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Update on each tick of timer&lt;BR&gt;timer.Elapsed += (s, e) =&amp;gt;&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (chart.SuspendUpdates())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var x = lineData.Count;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.Append(x, Math.Sin(x * 0.1 ));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.Append(x, Math.Cos(x * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // zoom series to&amp;nbsp;fit viewport size into XAxis direction&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;chart.ZoomExtentsX();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;timer.Start();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddDataSeries.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Scrolling Realtime (FIFO)&amp;nbsp;Charts&lt;/H2&gt;
&lt;P&gt;The most memory efficient way to achieve scrolling is to set&amp;nbsp;&lt;STRONG&gt;FifoCapacity&lt;/STRONG&gt; on a DataSeries&amp;nbsp;to set the maximum size of a DataSeries before old points are discarded. DataSeries in FIFO mode act as a circular (first-in-first-out) buffer. Once the capacity is exceeded, old points are discarded. You cannot zoom back to see the old points, once they are lost, they are lost.&lt;/P&gt;
&lt;P&gt;To make a DataSeries use the FIFO buffer, you have to set fifo capacity&amp;nbsp;on the DataSeries, which&amp;nbsp;defines the size of the FIFO buffer. The declaration of DataSeries from our application should be rewritten like the following to utilize a FIFO buffer:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;FIFO Scrolling Charts&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const int fifoCapacity = 500;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create XyDataSeries to host data for our chart&lt;BR&gt;var lineData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Sin(x)", FifoCapacity = new Integer(fifoCapacity)};&lt;BR&gt;var scatterData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Cos(x)", FifoCapacity = new Integer(fifoCapacity) };&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinFifoDataSeries.gif"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ed43f552-2d5a-480f-891f-57e72c56e58d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f5961004-3679-4c2a-aae7-76518d89673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e12241ec-c5d1-4fe4-8421-9dccb469b0db" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91c10eb1-300f-4802-94f6-6f5c95a88337" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="91c10eb1-300f-4802-94f6-6f5c95a88337" Status="New Topic" CreatedOn="2017-04-18T14:54:24.9250961Z" ModifiedOn="2019-09-05T13:25:46.5296083Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 07 - Adding Annotations" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.5296083Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Annotations to the Chart&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;In this tutorial, we are going to build on&amp;nbsp;the FIFO scrolling chart&amp;nbsp;that was implemented in the&amp;nbsp;&lt;A href="3fb01ffa-b24c-4b41-8008-aa619fab0599"&gt;Xamarin Tutorial 06 - Adding Realtime Updates&lt;/A&gt;. Please make&amp;nbsp;corresponding amendments&amp;nbsp;to your code&amp;nbsp;if required.&lt;/P&gt;
&lt;P&gt;Lets&amp;nbsp;add a kind of news bulletin&amp;nbsp;markers to&amp;nbsp;the chart, one per 100 data points.&amp;nbsp;To achieve this, we are going to modify our handler for timer's Elapsed event. We&amp;nbsp;want to create&amp;nbsp;a TextAnnotation with some text and&amp;nbsp;background and add it to the Annotations collection of SciChartSurface.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The modified code is shown below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add Annotation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;var x = lineData.Count;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;// Append on each tick of timer&lt;BR&gt;timer.Elapsed += (s, e) =&amp;gt;&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (chart.SuspendUpdates())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.Append(x, Math.Sin(x*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.Append(x, Math.Cos(x*0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add label every 100 data points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x%100 == 0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create text annotation with label&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var label = new TextAnnotation(this)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text = "N",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; X1Value = x,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Y1Value = 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HorizontalAnchorPoint = HorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VerticalAnchorPoint = VerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FontStyle = new FontStyle(20, Color.White),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Background = new ColorDrawable(Color.DarkGreen),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ZIndex = 1&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add label into annotation collection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.Annotations.Add(label);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // if we add annotation and x &amp;gt; fifoCapacity&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // then we need to remove annotation which goes out of the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x &amp;gt; fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.Annotations.Remove(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // zoom series to fit viewport size into XAxis direction&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;chart.ZoomExtentsX();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x++;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;timer.Start();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The code from above will result in the following chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddAnnotations.gif"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="fa20e3a1-8bf5-48f3-a9b7-aa82d1d3aa8b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb01ffa-b24c-4b41-8008-aa619fab0599" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6513a1d5-5973-4e57-b069-4580624d929f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="54f0c76f-fc83-4d4e-8cef-764a9579ce75" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="54f0c76f-fc83-4d4e-8cef-764a9579ce75" Status="New Topic" CreatedOn="2017-04-18T14:54:53.0279928Z" ModifiedOn="2019-09-05T13:25:46.5505913Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 08 - Adding Multiple Axes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.5505913Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding a Second Y Axis&lt;/H2&gt;
&lt;P&gt;To add one more axis to a SciChartSurface, you have to do pretty much the same as with one axis. There is one thing to remember though. You must&amp;nbsp;assign a&amp;nbsp;&lt;STRONG&gt;unique string&amp;nbsp;ID&lt;/STRONG&gt;&amp;nbsp;to all your axes if there are more than one.&lt;/P&gt;
&lt;P&gt;If you want&amp;nbsp;the axis to appear to the either side of a chart, you have to set &lt;STRONG&gt;AxisAlignment&lt;/STRONG&gt; to a corresponding value. Lets add another axis and align it to the left side of the chart (assuming the original one if placed to the right). To have a different scale on the secondary axis, we are going to&amp;nbsp;set its VisibleRange on it:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add Second Axis to the Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a numeric Y axis&lt;BR&gt;var yAxis = new NumericAxis(this)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisTitle = "Value",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VisibleRange = new DoubleRange(-1, 1)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a secondary numeric Y Axis&lt;BR&gt;var secondaryYAxis = new NumericAxis(this)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisTitle = "Secondary",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisId = "SecondaryAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisAlignment = AxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VisibleRange = new DoubleRange(-2, 2)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add yAxis to the YAxes collection of the chart&lt;BR&gt;chart.YAxes.Add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add secondaryYAxis to the YAxes collection of the chart&lt;BR&gt;chart.YAxes.Add(secondaryYAxis);&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see second axis in our application&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddSecondaryYAxis.png"&gt;&lt;/P&gt;
&lt;H2&gt;Registering RenderableSeries on an Axis&lt;/H2&gt;
&lt;P&gt;If there are several Y or X axes, you need to register other chart parts, like RenderableSeries and&amp;nbsp;Annotations, on a particular axis to be measured against its scale. So we have to do in our application. For the tutorial's sake, we are going to leave one series attached to axis with default axis id&amp;nbsp;(the right axis) and the other to the left axis, passing corresponding ID to the RenderableSeries:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding RenderableSeries for secondary Axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create line series with data appended into lineData&lt;BR&gt;var lineSeries = new FastLineRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = lineData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.LightBlue, 2)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create scatter series with data appended into scatterData&lt;BR&gt;var scatterSeries = new XyScatterRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = scatterData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PointMarker = new EllipsePointMarker()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Width = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Height = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.Green, 2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FillStyle = new SolidBrushStyle(Color.LightBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; YAxisId = "SecondaryAxis"&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The resulting chart should look like on the screenshot below:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddSeriesForSecondaryYAxis.png"&gt;&lt;/P&gt;
&lt;H2&gt;Registering Annotations on an Axis&lt;/H2&gt;
&lt;P&gt;Annotations also need to be registered on a certain axis in a multi-axis scenario. So we are going to assign the axis ID to annotations in on our chart in this way:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding Annotations for the secondary Axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// create text annotation with label&lt;BR&gt;var label = new TextAnnotation(this)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text = "N",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; X1Value = x,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Y1Value = 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HorizontalAnchorPoint = HorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VerticalAnchorPoint = VerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FontStyle = new FontStyle(20, Color.White),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Background = new ColorDrawable(Color.DarkGreen),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ZIndex = 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; YAxisId = x%200 == 0 ? AxisBase.DefaultAxisId : "SecondaryAxis"&lt;BR&gt;};&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see the annotations on our chart again:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddAnnotationForSecondaryYAxis.gif"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="26ca98c6-f866-4ef2-843d-31b5ed62f809" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91c10eb1-300f-4802-94f6-6f5c95a88337" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="533d4b00-b968-47ca-bec3-333bf3527cff" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8503b094-4083-4ae8-8f8b-6ccf55da1847" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="8503b094-4083-4ae8-8f8b-6ccf55da1847" Status="New Topic" CreatedOn="2017-04-18T14:55:35.4865307Z" ModifiedOn="2019-09-05T13:25:46.6095491Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin Tutorial 09 - Linking Multiple Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-05T13:25:46.6095491Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Xamarin.Examples/tree/master/v2.x/Tutorials" target=_blank&gt;SciChart.Android.Examples Github Repository&lt;/A&gt; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In our series of tutorials, up until now we have added a chart with two YAxis, one XAxis, two series, added tooltips, legends and zooming, panning behavior, and added some annotations. The previous tutorial can be found at this link:&amp;nbsp;&lt;A href="54f0c76f-fc83-4d4e-8cef-764a9579ce75"&gt;Xamarin Tutorial 08 - Adding Multiple Axis&lt;/A&gt;&lt;A href="54f0c76f-fc83-4d4e-8cef-764a9579ce75"&gt;.&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Next, we are going to show you how to create multiple charts and link them together.&lt;/P&gt;
&lt;H2&gt;Revision&lt;/H2&gt;
&lt;P&gt;If you haven't already, you will need to review the following tutorials, as we are working straight from these:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="91c10eb1-300f-4802-94f6-6f5c95a88337"&gt;Xamarin Tutorial 07 - Adding Annotations&lt;/A&gt; 
&lt;LI&gt;&lt;A href="54f0c76f-fc83-4d4e-8cef-764a9579ce75"&gt;Xamarin Tutorial 08 - Adding Multiple Axis&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Before next step we'll need to refactor our code and extract some parts ( like creation XAxes, YAxes and Modifiers ) which&amp;nbsp;we can reuse&amp;nbsp;into seperate method. Let's call&amp;nbsp;this method&amp;nbsp;InitChart. It accepts SciChartSurface instance and add one XAxis and two YAxes. Also it add some modifiers. Here its code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialize Chart with XAxes, YAxes and Modifiers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private void InitChart(SciChartSurface chart)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var xAxis = new NumericAxis(this) {AxisTitle = "Number of Samples (per Series)"};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var yAxis = new NumericAxis(this)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisTitle = "Value",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VisibleRange = new DoubleRange(-1, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a secondary numeric Y Axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var secondaryYAxis = new NumericAxis(this)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisTitle = "Secondary",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisId = "SecondaryAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisAlignment = AxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VisibleRange = new DoubleRange(-2, 2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var pinchZoomModifier = new PinchZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pinchZoomModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var zoomPanModifier = new ZoomPanModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zoomPanModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var zoomExtentsModifier = new ZoomExtentsModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zoomExtentsModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create RolloverModifier to show tooltips&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var rolloverModifier = new RolloverModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rolloverModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var yAxisDragModifier = new YAxisDragModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxisDragModifier.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure legend&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var legendModifier = new LegendModifier(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; legendModifier.SetLegendPosition(GravityFlags.Bottom | GravityFlags.CenterHorizontal, 10);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; legendModifier.SetOrientation(Orientation.Horizontal);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var modifiers = new ModifierGroup(pinchZoomModifier, zoomPanModifier, zoomExtentsModifier, rolloverModifier,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; legendModifier, yAxisDragModifier);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add xAxis to the XAxes collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.XAxes.Add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add yAxis to the YAxes collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.YAxes.Add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add secondaryYAxis to the YAxes collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.YAxes.Add(secondaryYAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the interactions to the ChartModifiers collection of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.ChartModifiers.Add(modifiers);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then our OnCreate method will have next code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialize Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Get our chart from the layout resource,&lt;BR&gt;var chart = FindViewById&amp;lt;SciChartSurface&amp;gt;(Resource.Id.Chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Init chart with&amp;nbsp;axes and modifiers&amp;nbsp;&lt;/P&gt;
&lt;P&gt;InitChart(chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;const int fifoCapacity = 500;&lt;/P&gt;
&lt;P&gt;// Create XyDataSeries to host data for our chart&lt;BR&gt;var lineData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Sin(x)", FifoCapacity = new Integer(fifoCapacity)};&lt;BR&gt;var scatterData = new XyDataSeries&amp;lt;double, double&amp;gt;() {SeriesName = "Cos(x)",FifoCapacity = new Integer(fifoCapacity)};&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;var x = lineData.Count;&lt;/P&gt;
&lt;P&gt;var timer = new Timer(30) {AutoReset = true};&lt;/P&gt;
&lt;P&gt;// Append on each tick of timer&lt;BR&gt;timer.Elapsed += (s, e) =&amp;gt;&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (chart.SuspendUpdates())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.Append(x, Math.Sin(x*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.Append(x, Math.Cos(x*0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add label every 100 data points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x%100 == 0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create text annotation with label&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var label = new TextAnnotation(this)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text = "N",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; X1Value = x,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Y1Value = 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HorizontalAnchorPoint = HorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; VerticalAnchorPoint = VerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FontStyle = new FontStyle(20, Color.White),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Background = new ColorDrawable(Color.DarkGreen),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ZIndex = 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; YAxisId = x%200 == 0 ? AxisBase.DefaultAxisId : "SecondaryAxis"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add label into annotation collection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;chart.Annotations.Add(label);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // if we add annotation and x &amp;gt; fifoCapacity&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // then we need to remove annotation which goes out of the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (x &amp;gt; fifoCapacity)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;chart.Annotations.Remove(0);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;// zoom series to fit viewport size into XAxis direction&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart.ZoomExtentsX();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x++;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;timer.Start();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create line series with data appended into lineData&lt;BR&gt;var lineSeries = new FastLineRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = lineData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.LightBlue, 2)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create scatter series with data appended into scatterData&lt;BR&gt;var scatterSeries = new XyScatterRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = scatterData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; PointMarker = new EllipsePointMarker()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Width = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Height = 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.Green, 2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FillStyle = new SolidBrushStyle(Color.LightBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; YAxisId = "SecondaryAxis"&lt;BR&gt;};&lt;BR&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the renderable series to the RenderableSeries collection of the chart&lt;BR&gt;chart.RenderableSeries.Add(lineSeries);&lt;BR&gt;chart.RenderableSeries.Add(scatterSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding a Second Chart&lt;/H2&gt;
&lt;P&gt;Now we are going to do almost the same to create and configure&amp;nbsp;the second chart. For example purposes, lets put aside the annotations part and modifiers part for now. Everything else&amp;nbsp;will be the same.&amp;nbsp;The code below adds one more SciChartSurface to the application.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;First, we need to declare second chart in our layout file:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring second SciChartSurface Instance&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;BR&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/Chart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="0px"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_weight="1"/&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/SecondChart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="0px"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_weight="1"/&amp;gt;&lt;BR&gt;&amp;nbsp;&lt;BR&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Then need to get and initialize it in code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Get the second chart from the layout resource.&lt;BR&gt;var secondChart = FindViewById&amp;lt;SciChartSurface&amp;gt;(Resource.Id.SecondChart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Init secondChart with axes and modifiers&lt;/P&gt;
&lt;P&gt;InitChart(secondChart);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;With this addition, your application should now show a view with two charts on it:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinCreateSecondChart.png"&gt;&lt;/P&gt;
&lt;H2&gt;Adding a Series to the Second Chart&lt;/H2&gt;
&lt;P&gt;Now we are ready to add a RenderableSeries to the second&amp;nbsp;chart. For the versatility's sake, lets&amp;nbsp;try out another RenderableSeries type, say,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;. We are going to&amp;nbsp;attach an existing&amp;nbsp;DataSeries to it&amp;nbsp;so it&amp;nbsp;appears scrolling just&amp;nbsp;like the series on the first chart. Also, the new RenderableSeries is going to be attached to the&amp;nbsp;axis width default axis id&amp;nbsp;(in our case it is the right axis).&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Remember, since there are two Y axes, they both must have unique&amp;nbsp;IDs assigned to them. Those IDs can be used to&amp;nbsp;register RenderableSeries and Annotations&amp;nbsp;on a corresponding axis.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;So lets add these&amp;nbsp;missing&amp;nbsp;lines to the code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add RenderableSeries to the second Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// create mountain series with same data which we appended into scatter series&lt;/P&gt;
&lt;P&gt;var mountainSeries = new FastMountainRenderableSeries()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = scatterData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; StrokeStyle = new SolidPenStyle(Color.LightSteelBlue),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AreaStyle = new SolidBrushStyle(Color.SteelBlue),&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the renderable series to the RenderableSeries collection of the second chart&lt;BR&gt;secondChart.RenderableSeries.Add(mountainSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Synchronizing&amp;nbsp;VisibleRanges on Axes&lt;/H2&gt;
&lt;P&gt;To make both charts showing same VisibleRanges on axes, you should just share the same IRange instance across the axes. In our case, we're going to assign VisibleRange of one xAxis to VisibleRange of the another xAxis:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Share VisibleRange from top Chart with bottom Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Share chart's XAxis VisibleRange with secondChart's XAxis VisibleRange&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;secondChart.XAxes[0].VisibleRange = chart.XAxes[0].VisibleRange;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now run the application again:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddSeriesForSecondChart.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Linking Cursor and Other Modifiers&lt;/H2&gt;
&lt;P&gt;The next thing we are going to do is to link&amp;nbsp;chart modifiers. Because we use have added modifiers inside InitChart method both charts have the same set of modifiers. Now to sync them we just need to add them to the same MotionEventGroup and to ensure that events from one chart will be received by the other charts in group:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Provide MotionEventGroup for&amp;nbsp;Modifiers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;var modifiers = new ModifierGroup(pinchZoomModifier, zoomPanModifier, zoomExtentsModifier, rolloverModifier,&amp;nbsp;legendModifier, yAxisDragModifier);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Receive events from other charts even if they were handled&lt;BR&gt;modifiers.SetReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assing same MotionEventGroup for all charts&lt;BR&gt;modifiers.MotionEventGroup = "SharedEvents"&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Hint! You can use a MouseEventGroup on more than two charts. You can also bind this value to a ViewModel property to make it dynamic.Type your Tip Box content here.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Run the application again. The&amp;nbsp;RolloverModifier's Tooltips are now synchronizing across the charts.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Xamarin_Tutorial_files/XamarinAddSharedModifiersForTwoCharts.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="525f68b8-0e0c-4c4f-9fd3-6ea272417dca" AutoIndex="false">
            <Caption m="2016-06-20T20:53:14.7848156Z">The SciChart Android Examples Suite</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="481993d4-64bd-4388-bb27-dba9b5784df7" Status="New Topic" CreatedOn="2016-06-20T20:37:35.3395416Z" ModifiedOn="2019-12-11T10:38:03.8089078Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The_SciChart_Android_Examples_Suite" BuildFlags="">
                <Title m="2019-02-11T16:02:26.5151682Z">The SciChart Android Examples Suite</Title>
                <ContentsTitle m="2019-02-11T15:56:58.433395Z">The SciChart Android Examples Suite</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BODYTEXT">
                    <Content m="2019-12-11T10:38:03.8089078Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To make it easier to start using SciChart in your project, we prepared a bunch of examples demonstrating different features and their usage. These are called “SciChart Android Examples Suite” and can be found in the&amp;nbsp;&lt;A href="http://www.scichart.com/downloads" target=_blank&gt;SciChart Android SDK ZIP&lt;/A&gt;, as an Android application with the following features:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;More than&amp;nbsp;50 rich examples showcasing the features of SciChart Android 
&lt;LI&gt;Search keying on tag, example title, description and source-code 
&lt;LI&gt;View / copy source in the example application 
&lt;LI&gt;Export example to stand-alone Android Studio project &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Visit &lt;A href="http://www.scichart.com/android-chart-examples" target=_blank&gt;www.scichart.com/android-chart-examples&lt;/A&gt; to see the full list, or download the&amp;nbsp;&lt;A href="https://play.google.com/store/apps/details?id=com.scichart.examples" target=_blank&gt;SciChart Android Examples app from the App Store&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;A href="http://www.scichart.com/android-chart-examples" target=_blank&gt;&lt;IMG border=0 alt="" src="images/scichart-android-examples-page.png"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Getting the Examples Suite&lt;/H2&gt;
&lt;P&gt;There are a few ways of getting SciChart Android Examples Suite:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;downloading zipped archive from our web resource at &lt;A href="http://www.scichart.com/downloads" target=_blank&gt;www.scichart.com/downloads&lt;/A&gt; 
&lt;LI&gt;Cloning the SciChart Android Examples from our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Android.Examples" target=_blank&gt;SciChart.Android.Examples Github repository&lt;/A&gt; 
&lt;LI&gt;Xamarin Examples are available from the&amp;nbsp;&lt;A href="https://www.scichart.com/scichart.xamarin.examples" target=_blank&gt;SciChart.Xamarin.Examples Github repository&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Building the SciChart Android Examples Suite&lt;/H2&gt;
&lt;P&gt;The SciChart Android Examples Suite is shipped as source code with the&amp;nbsp;&lt;A href="http://www.scichart.com/downloads" target=_blank&gt;SciChart Android SDK ZIP&lt;/A&gt;&amp;nbsp;in the Examples folder. To run the SciChart Android Examples, you simply need to open this folder in Android Studio and compile it. See&amp;nbsp;&lt;A href="01e391ef-8c89-482d-946d-78188f80e2ad"&gt;Setting up an Android Development Environment&lt;/A&gt; if you haven't already.&lt;/P&gt;&lt;IMG src="images/scichart-android-examples.png"&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To do this, first&amp;nbsp;start&amp;nbsp;&lt;A href="https://developer.android.com/studio/index.html" target=_blank&gt;Android Studio&lt;/A&gt;. In the main menu go to File -&amp;gt; Open and select the folder where you unzipped the SciChart Android SDK. Select &lt;STRONG&gt;Examples&lt;/STRONG&gt; in that folder and click &lt;STRONG&gt;OK&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/android-studio-open-project.png"&gt;&lt;/P&gt;
&lt;P&gt;Android Studio will immediately start building the Scichart Android Examples application, you will see this at the bottom where it says 'Gradle Build Running'. To run the SciChart Android Examples, you simply need to click the &lt;STRONG&gt;RUN&lt;/STRONG&gt; button on the top menu bar.&lt;/P&gt;&lt;IMG src="images/scichart-android-run-examples.png"&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;If you have a device connected via USB, select that as a deployment target. Or, you can select an emulator if you have one installed.&lt;/P&gt;&lt;IMG src="images/scichart-android-emulator-start.png"&gt; 
&lt;H2&gt;&amp;nbsp;&lt;/H2&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="f714b389-87af-469e-b24a-64b7ca2c7798" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fd0edae3-8a75-49cd-bfc7-927e8651d17f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="988bddb7-1551-4be7-a4b1-8724dfe10ee3" Status="New Topic" CreatedOn="2019-02-11T16:03:15.944833Z" ModifiedOn="2019-10-28T14:54:04.6923572Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The SciChart Xamarin Android Examples Suite" BuildFlags="">
                <Title m="2019-02-11T16:39:44.0210887Z">Xamarin.Android Examples Suite</Title>
                <ContentsTitle m="2019-02-11T16:39:53.0990228Z">The Xamarin.Android Examples Suite</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:54:04.6923572Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The SciChart Android SDK contains a rich&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-examples" target=_blank&gt;interactive examples application&lt;/A&gt; with the following features:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Approximately 60+ Rich examples showcasing the features of SciChart&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-features" target=_blank&gt;Android Charts&lt;/A&gt; 
&lt;LI&gt;Search keying on tag, example title, description and source-code 
&lt;LI&gt;View / copy source in the example application 
&lt;LI&gt;Export example to stand-alone Xcode project &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Visit &lt;A href="http://www.scichart.com/xamarin-chart-examples" target=_blank&gt;www.scichart.com/xamarin-chart-examples&lt;/A&gt; to see the full list.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/xamarin-chart-examples" target=_blank&gt;&lt;IMG border=0 alt="" src="images/xamarin-examples-list.png"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Getting the Examples Suite&lt;/H2&gt;
&lt;P&gt;There are a few ways of getting SciChart Xamarin.iOS Examples Suite:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;downloading zipped archive from our web resource at &lt;A href="http://www.scichart.com/downloads" target=_blank&gt;www.scichart.com/downloads&lt;/A&gt; 
&lt;LI&gt;Cloning the SciChart Xamarin Examples from our&amp;nbsp;&lt;A href="https://www.scichart.com/scichart.xamarin.examples" target=_blank&gt;Github repository&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Building the SciChart Xamarin Examples Suite&lt;/H2&gt;
&lt;P&gt;To help you build the SciChart Xamarin.Android Examples Suite, we've created a video below that walks you through the steps.&lt;/P&gt;
&lt;DIV class=videoWrapper&gt;&lt;IFRAME height=315 src="https://www.youtube.com/embed/wYdab-0XHMA" frameBorder=0 width=560 allowfullscreen="" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"&gt;&lt;/IFRAME&gt;&lt;/DIV&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Applying a License Key to the Examples Suite&lt;/H2&gt;
&lt;P&gt;Note that you will have to apply a license key to the examples to get them to run. You can get a trial license key from your&amp;nbsp;&lt;A href="https://www.scichart.com/profile" target=_blank&gt;account&lt;/A&gt; page.&lt;/P&gt;
&lt;P&gt;For more info on licensing, see&amp;nbsp;&lt;A href="https://www.scichart.com/licensing-scichart-android/" target=_blank&gt;Licensing SciChart Android&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Build and Run the Examples Suite&lt;/H3&gt;
&lt;P&gt;Now let's&amp;nbsp;try to Build &amp;amp; Run the Demo application.&lt;/P&gt;
&lt;P&gt;After the build, you can navigate through the Examples Suite. The application itself has a lot useful features for you. You can not only take a look at&amp;nbsp; each particular example, but also see the code, share the project or configure the example.&lt;/P&gt;
&lt;H2&gt;&amp;nbsp;&lt;/H2&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="fd0edae3-8a75-49cd-bfc7-927e8651d17f" Status="New Topic" CreatedOn="2016-07-07T15:00:56.6181947Z" ModifiedOn="2019-02-11T20:49:47.4808938Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Using the SciChart Android Examples App" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-11T20:49:47.4808938Z">&lt;H2&gt;The Examples Suite Home Screen&lt;/H2&gt;
&lt;P&gt;From the Home Screen of the SciChart Android Examples Suite, you can search for examples by chart type, title or source code you can scroll and browse examples, or you can switch category to see Featured Apps.&lt;/P&gt;
&lt;P&gt;When you start the SciChart Android Examples Suite, try playing around with these controls to become familiar with the application.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/examples-app-home.png"&gt; 
&lt;H2&gt;Using an Example&lt;/H2&gt;
&lt;P&gt;Click on any example in the SciChart Examples Suite. In most examples, the following actions are available:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Touch drag to pan 
&lt;LI&gt;Pinch to zoom in/out 
&lt;LI&gt;Drag axis to scale or pan 
&lt;LI&gt;Double tap to zoom to extents &lt;/LI&gt;&lt;/UL&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/examples-touch-pan-drag.png"&gt; 
&lt;H2&gt;Viewing the Source Code&lt;/H2&gt;
&lt;P&gt;In the top right of each SciChart Android Chart Example there is a burger menu for settings of the Example. Tap this to show the menu.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/examples-show-menu.png"&gt; 
&lt;P&gt;Next, click on the Show Source Code icon to show the source. From here you can browse the files and source we used to create this example directly on your android device.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/android-examples-view-source.png"&gt; 
&lt;H2&gt;Exporting / Sharing the Source Code&lt;/H2&gt;
&lt;P&gt;The SciChart Android Examples Suite has&amp;nbsp;a powerful feature which allows you to export any example to a stand alone Android Studio project. This can be used to get started really quickly when using SciChart Android.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt; The Export/Share Example feature only works from an Android Device with a configured email account. It will not work from the emulator.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To use this feature, on the example burger menu, click the &lt;STRONG&gt;Share&lt;/STRONG&gt; icon.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/scichart-examples-share.png"&gt; 
&lt;P&gt;Select an Export option from the popup menu. For instance, you can email the exported project to yourself, or, share it to dropbox or google drive.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/scichart-android-export-share-to-dropbox.png"&gt; 
&lt;P&gt;Now, download the exported example on your desktop computer and using Android Studio you should be able to compile it and run it.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/The-exported-example-project.png"&gt; &lt;IMG src="The_SciChart_Android_Examples_Suite_files/export-open-in-android-studio.png"&gt; 
&lt;P&gt;Wowzers!&lt;/P&gt;
&lt;H2&gt;Searching for an Example or Chart Type&lt;/H2&gt;
&lt;P&gt;Using the search functionality you can serach for an example title, chart type or even search the source code. For instance, to find examples which feature a Cursor, type &lt;STRONG&gt;'Cursor'&lt;/STRONG&gt; into the search bar.&lt;/P&gt;&lt;IMG src="The_SciChart_Android_Examples_Suite_files/search-examples-with-cursor.png"&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Viewing the Examples Online&lt;/H2&gt;
&lt;P&gt;&amp;nbsp;Export examples to HTML (or create pages) and list like &lt;A href="http://www.scichart.com/android-chart-examples" target=_blank&gt;www.scichart.com/android-chart-examples&lt;/A&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9dc6085c-c94b-47a8-9755-d1d3948b9f62" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="481993d4-64bd-4388-bb27-dba9b5784df7" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="b5ff915f-9dcc-4731-807f-8311afd544e6" AutoIndex="false">
            <Caption m="2016-06-20T21:09:56.9641038Z">Quickstart Guide</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="290456e2-48c4-43ed-87a1-bc6452a926b6" Status="New Topic" CreatedOn="2016-06-20T21:10:18.5924207Z" ModifiedOn="2019-10-28T14:54:04.7083449Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your First SciChart Android App - Part 1" BuildFlags="">
                <Title />
                <ContentsTitle m="2017-04-03T13:17:51.9152727Z">Creating your First SciChart Android App - Part 1</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:54:04.7083449Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This tutorial was created using Android Studio v.2.1.1. If you have another version of IDE installed on your PC, the steps may differ slightly for you.&lt;/P&gt;
&lt;H2&gt;Setting up a new Android Application&lt;/H2&gt;
&lt;P&gt;If it is the first time you launch Android Studio, the &lt;B&gt;“Welcome to Android Studio”&lt;/B&gt; window will appear:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/image_1.jpg"&gt;&lt;/P&gt;
&lt;P&gt;To create a new Android application, choose the &lt;B&gt;“Start a new Android Studio project”&lt;/B&gt; option from the list.&lt;/P&gt;
&lt;P&gt;If you have worked in Android Studio already, go to the &lt;B&gt;File-&amp;gt;New-&amp;gt;New Project&lt;/B&gt; menu options:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG style="HEIGHT: 319px; WIDTH: 1247px" border=0 alt="" src="images/1.jpg" width=1918 height=452&gt;&lt;/P&gt;&amp;nbsp; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The &lt;B&gt;“Create New Project”&lt;/B&gt; window will appear:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG style="HEIGHT: 584px; WIDTH: 780px" border=0 alt="" src="images/2.jpg" width=1080 height=745&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Using the fields, give the name and package name to your application and choose a location for it on a hard disk. After clicking the “Next” button, Android Studio will propose to choose a platform and the targeting Android SDK version. &lt;B&gt;To use SciChart for Android, the Minimum SDK version must be API 19 (Android 4.4 KitKat) or higher:&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG style="HEIGHT: 574px; WIDTH: 781px" border=0 alt="" src="images/3.jpg" width=1076 height=745&gt;&lt;/P&gt;
&lt;P&gt;Then you will be proposed to choose a startup project template. &lt;B&gt;This step is completely optional and depends only on the complexity of an application&lt;/B&gt;, to reduce the amount of manually written code.&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 570px; WIDTH: 788px" border=0 alt="" src="images/4.jpg" width=1076 height=745&gt;&lt;/P&gt;
&lt;P&gt;For this tutorial it actually doesn’t matter which template is choosen, so we are going to select “Empty Activity” for simplicity’s sake. This will result in a project having the only activity.&lt;/P&gt;
&lt;P&gt;After clicking the “Next” button, Android Studio allows you to give a name to the activity and (optionally) generate an xml layout resource file for it:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 530px; WIDTH: 788px" border=0 alt="" src="images/5.jpg" width=1079 height=745&gt;&lt;/P&gt;
&lt;P&gt;In this tutorial, we will check the “Generate Layout File” box to have the xml layout resource file for the activity generated by Android Studio. Pressing the “Finish” button closes the creation wizard and we end up with a project created from the chosen template:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG style="HEIGHT: 613px; WIDTH: 1088px" border=0 alt="" src="images/5(2).jpg" width=1917 height=1038&gt;&lt;/P&gt;
&lt;P&gt;If the project’s structure doesn’t appear, you can open it clicking on the “Project” tab in the top left corner or choosing the &lt;STRONG&gt;View-&amp;gt;Tool Windows-&amp;gt;Project&lt;/STRONG&gt; option from the menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/6.jpg"&gt;&lt;/P&gt;
&lt;P&gt;In the project’s structure you should see the file with .java extension containing the class for the activity generated from the template under the “java” directory and the layout file with .xml extension under the “res” directory. The “manifest” directory contains the project’s configuration file, and under the “Gradle Scripts” directory buid configuration files can be found:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/7.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Setting up the build configuration&lt;/H2&gt;
&lt;P&gt;To be able to use SciChart classes in your application, you will need to add the SciChart libraries to the project’s dependencies. &lt;B&gt;To do this, you need to go to the “app” folder under the application’s main directory and&lt;/B&gt; It is possible to navigate to the application’s directory from the Android Studio via the “Show in Explorer” option of the context menu on the items in the project’s structure tab:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 483px; WIDTH: 798px" border=0 alt="" src="images/9.jpg" width=1091 height=627&gt;&lt;/P&gt;
&lt;P&gt;We are going to add them to the “libs” folder in the “app” directory:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 301px; WIDTH: 850px" border=0 alt="" src="images/10.jpg" width=1215 height=429&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 313px; WIDTH: 854px" border=0 alt="" src="images/11.jpg" width=1217 height=754&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Now you need modify the &lt;STRONG&gt;“build.gradle” file for the project&lt;/STRONG&gt; to make the build system to look for project’s dependencies in the “libs” folder. To achieve this, open &lt;B&gt;the “build.gradle” file for the project&lt;/B&gt; and declare a new repository in the “&lt;B&gt;repositories&lt;/B&gt;” node, located inside the “&lt;B&gt;allprojects&lt;/B&gt;” node. To point it to the particular directory, use &lt;B&gt;the “flatDir” command&lt;/B&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;flatDir&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;allprojects {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; repositories {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; jcenter()&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set up a repository which looks for dependencies in the "libs" folder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; flatDir{dirs 'libs'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 578px; WIDTH: 1187px" border=0 alt="" src="images/12.jpg" width=1317 height=596&gt;&lt;/P&gt;
&lt;P&gt;After that, you need to add every library as a dependency to the module which is intended to use SciChart. In our tutorial, the example application has the only module, so we are going to modify &lt;B&gt;the “build.gradle” file for this module&lt;/B&gt;. Use &lt;B&gt;the “compile“ command&lt;/B&gt; to declare a library as a module’s dependency (the order doesn’t matter):&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Compile&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;dependencies {&lt;BR&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;// Default module dependencies&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile fileTree(dir: 'libs', include: ['*.jar'])&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; testCompile 'junit:junit:4.12'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile 'com.android.support:appcompat-v7:23.4.0'&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart libraries as module dependencies&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile (name:'charting-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile (name:'drawing-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile (name:'data-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile (name:'core-release', ext:'aar')&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 516px; WIDTH: 1254px" border=0 alt="" src="images/13.jpg" width=1915 height=736&gt;&lt;/P&gt;
&lt;P&gt;Now, the Android Studio proposes to “synchronize” the changes done in the build files. It will reload all the dependencies specified there, including the SciChart dependency that we have added. You can do this pressing the message at the top or the “Sync” button from the menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 506px; WIDTH: 1261px" border=0 alt="" src="images/14.jpg" width=1915 height=693&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;After the synchronization is finished, you can check the build results at the “Messages” tab at the bottom:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 846px; WIDTH: 1258px" border=0 alt="" src="images/15.jpg" width=1363 height=1045&gt;&lt;/P&gt;
&lt;P&gt;If you don’t see the “Messages” tab, it can be opened via the &lt;B&gt;View-&amp;gt;Tool Windows-&amp;gt;Messages&lt;/B&gt; option from the menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/16.jpg"&gt;&lt;/P&gt;
&lt;P&gt;If the build has failed, please try to do the steps again to ensure you haven’t missed something. If you still cannot manage it to succeed at this point, please let us know at &lt;A href="http://support.scichart.com/"&gt;http://support.scichart.com&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;&amp;nbsp;&lt;/H3&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3cfc9b61-37eb-419f-b3bc-aa90aee60d99" Status="New Topic" CreatedOn="2016-06-20T21:12:06.1507885Z" ModifiedOn="2019-02-11T16:39:11.7178596Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your First SciChart Android App - Part 2" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-11T16:39:11.7178596Z">&lt;H2&gt;Adding the SciChartSurface to the Designer Window&lt;/H2&gt;
&lt;P&gt;When the previous step is finished, you should be able to access and use classes from SciChart libraries in the application.&lt;/P&gt;
&lt;P&gt;Android Studio has the inbuilt designer which comes in handy when need to create not very complex layouts from scratch. To open the designer, double-click on the activity layout file located in the “res” and “layout” folders accessible from the project’s structure tab to the left. An activity with a simple layout, having the “Hello World!” text in it, should appear:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 644px; WIDTH: 1275px" border=0 alt="" src="images/2(1).jpg" width=1895 height=1034&gt;&lt;/P&gt;
&lt;P&gt;If the designer reports any rendering errors, you could try switching to another API version using the dropdown list from the menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 341px; WIDTH: 1272px" border=0 alt="" src="images/2(2).jpg" width=1522 height=398&gt;&lt;/P&gt;
&lt;P&gt;At the left side of the designer window the Palette can be found, where all available UI elements can be picked and dragged to be placed at the desired position on the phone view at the center. SciChartSurface can be found at the very bottom of the Palette. To find it, scroll the list to the bottom and choose the “CustomView” item under the Custom section. The list with all the custom UI elements will appear. You can look through it or use the Android Studio search to find the SciChartSurface item:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 865px; WIDTH: 1268px" border=0 alt="" src="images/2(3).jpg" width=1526 height=1040&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Now Android Studio allows you to place the SciChartSurface at the desired location. In this tutorial, we placed it at the center, stretched to occupy all available space:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 516px; WIDTH: 295px" border=0 alt="" src="images/2(4).jpg" width=375 height=703&gt;&amp;nbsp;&lt;IMG style="HEIGHT: 515px; WIDTH: 290px" border=0 alt="" src="images/2(5).jpg" width=376 height=712&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;After that, you can see SciChartSurface appearing in the Component Tree in the top right corner of the designer. The Component Tree can be used to manage the added UI elements and change their properties, which appear in the Properties tab below:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 704px; WIDTH: 1248px" border=0 alt="" src="images/2(6).jpg" width=1304 height=874&gt;&lt;/P&gt;
&lt;P&gt;Lets look for the property called “id” and change it to give a name to the SciChartSurface. You will be able to refer to this particular SciChartSurface by its ID in other parts of the application’s code. Clicking on the “id” row, it enters the edit mode and property’s value can be changed now. In this example application, we are going to refer to it as “chartView”:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 762px; WIDTH: 486px" border=0 alt="" src="images/2(7).jpg" width=617 height=990&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;You can notice now that the initial “Hello World!” textView is hidden beneath the SciChartSurface. In this tutorial, we will simply remove it from the UI. To do this, select the textView in the Component Tree and press the “Delete” key.&lt;/P&gt;
&lt;H2&gt;The SciChartSurface in the XML Text Editor Window&lt;/H2&gt;
&lt;P&gt;Although Android Studio opens xml layout files in the designer by default, it is possible to edit layout manually in the xml text view. To switch to the text mode, choose the “Text” tab at the bottom of the design view:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 198px; WIDTH: 1248px" border=0 alt="" src="images/2(8).jpg" width=1518 height=245&gt;&lt;/P&gt;
&lt;P&gt;In the text mode, you can see the Component Tree laid out in the xml markup. Every UI element is represented here as an xml node with properties set as xml attributes on it. So far the SciChartSurface is the only child of the topmost RelativeLayout container:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 700px; WIDTH: 1293px" border=0 alt="" src="images/2(9).jpg" width=1915 height=1035&gt;&lt;/P&gt;
&lt;H3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/H3&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="50843f34-0ce8-4df7-96d2-227f7f9dd47b" Status="New Topic" CreatedOn="2016-06-20T21:12:56.840439Z" ModifiedOn="2019-02-11T16:39:11.7238437Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your First SciChart Android App - Part 3" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-11T16:39:11.7238437Z">&lt;H2&gt;Setting up the SciChartSurface in Code&lt;/H2&gt;
&lt;P&gt;Having done that, you should set up the rest of the chart in code. To proceed, find the file generated for the activity with .java extension in the project’s structure tab and open it. In this example application, it is named MainActivity.java:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 680px; WIDTH: 1299px" border=0 alt="" src="images/3(1).jpg" width=1917 height=1034&gt;&lt;/P&gt;
&lt;P&gt;In the file, you should see the Activity class with the onCreate(…) method overridden. The Activity knows where to look for its layout because of the setContentView(…) method call. The xml layout file is passed in as a parameter.&lt;/P&gt;
&lt;P&gt;The chart can be initialized right there. First, you need to obtain the SciChartSurface from the layout file, referencing it by its ID. Calling the findViewById(…)method with the ID as a parameter returns the UI element which corresponds to this ID. Lets cast the result to the SciChartSurface type and store it in a variable called “chartSurface”:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;chartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;@Override&lt;BR&gt;protected void onCreate(Bundle savedInstanceState) {&lt;BR&gt;super.onCreate(savedInstanceState);&lt;BR&gt;setContentView(R.layout.&lt;I&gt;activity_main&lt;/I&gt;);&lt;BR&gt;&lt;BR&gt;SciChartSurface chartSurface = (SciChartSurface) findViewById(R.id.&lt;I&gt;chartView&lt;/I&gt;);&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The Android Studio will probably mark “SciChartSurface” in red and propose you to import the class:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/3(2).jpg"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To do this, click the text in red and press the Alt+Enter key combination, as suggested. A context menu with several options should appear. Choose the “Import class” one:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/3(3).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Now, Android Studio should recognize the class name and a corresponding import statement should appear at the top:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;importcom.scichart.charting.visuals.SciChartSurface;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Alternatively, you can press the red light bulb icon to the left of that line of code or add the import statement manually:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/3(4).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Once we have a variable referencing SciChartSurface, we can add X and Y axes to it.&lt;/P&gt;
&lt;H3&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/H3&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7f994081-2172-43cf-9853-5d4404a6ee3e" Status="New Topic" CreatedOn="2016-06-20T21:13:53.390682Z" ModifiedOn="2019-02-11T16:39:11.7717158Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your First SciChart Android App - Part 4" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-11T16:39:11.7717158Z">&lt;H2&gt;Adding Axes to the SciChartSurface&lt;/H2&gt;
&lt;P&gt;There are several axis types provided by SciChart. While Y axis can be a Value type axis only, X axis can be either a Value type or a Category type axis. The key difference between those axis types is that using a Value axis, a data point is located on a chart according to its X value. However, using a Category axis, X values are ignored and data points are placed according to their order with equal spaces between them.&lt;/P&gt;
&lt;P&gt;In this tutorial, we are going to demonstrate usage of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt; as X axis and &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt; as Y axis (both are Value axes).&lt;/P&gt;
&lt;P&gt;Once an axis is created, you can add it to the corresponding AxisCollection of SciChartSurface:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding Axes to the SciChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;DateAxis xAxis = new DateAxis(this);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;AxisCollection xAxes = chartSurface.getXAxes();&lt;BR&gt;xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Don’t forget to import the used classes, either manually or using Android Studio’s capabilities.&lt;/P&gt;
&lt;P&gt;Now, you can configure the X axis to achieve the desired appearance and behaviour. There is a bunch of setXXX(…) methods which can change axis’ properties:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 651px; WIDTH: 1255px" border=0 alt="" src="images/4(1).jpg" width=1486 height=763&gt;&lt;/P&gt;
&lt;P&gt;The most important among these are: &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment.html"&gt;axis alignment&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IVisibleRangeAnimator.html"&gt;visible range&lt;/A&gt;, grow by values,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisTitlePlacement.html"&gt;axis title&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisInfo~axisId.html"&gt;axis id&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AutoRange.html"&gt;auto range&lt;/A&gt;, major and minor delta and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryAxis~DEFAULT_TEXT_FORMATTING.html"&gt;text formatting&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Also there are many styling properties which have an impact on axis’ appearance, such as ticks style, tick labels style, grid lines style, title style, etc.&lt;/P&gt;
&lt;P&gt;For example, to set a title on the X axis, you have to call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~setAxisTitlePlacement.html"&gt;setAxisTitle&lt;/A&gt;(…) method:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;xAxis.setAxisTitle("X Axis");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Similarly, an Y axis can be added to the SciChartSurface:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NumericAxis yAxis = new NumericAxis(this);&lt;BR&gt;&lt;BR&gt;AxisCollection yAxes = chartSurface.getYAxes();&lt;BR&gt;yAxes.add(yAxis);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Lets configure the Y axis to appear at the left calling the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~setAxisAlignment.html"&gt;setAxisAlignment&lt;/A&gt;(…) method:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;yAxis.setAxisAlignment(AxisAlignment.&lt;I&gt;Left&lt;/I&gt;);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Using the abovementioned&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~setAxisTitlePlacement.html"&gt;setAxisTitle&lt;/A&gt;(…), a title can be added to the Y axis:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;yAxis.setAxisTitle("Y Axis");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding RenerableSeries to the SciChartSurface&lt;/H2&gt;
&lt;P&gt;Once axes are set up, we are going to make the SciChartSurface to draw a line. SciChart provides special classes called “&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries_namespace.html"&gt;RenderableSeries&lt;/A&gt;” that are responsible for drawing different chart types, such as lines (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt;), columns (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;FastColumnsRenderableSeries&lt;/A&gt;), candlestick series (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt;), filled area (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;), heat maps (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;), error bars (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries.html"&gt;FastErrorBarsRenderableSeries&lt;/A&gt;), etc.&lt;/P&gt;
&lt;P&gt;Every&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries_namespace.html"&gt;RenderableSeries&lt;/A&gt; type has its own features, but there are also many that they have in common, such as the possibility to hide or show a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries_namespace.html"&gt;RenderableSeries&lt;/A&gt; or to show&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers_namespace.html"&gt;PointMarkers&lt;/A&gt; for every point in it.&lt;/P&gt;
&lt;P&gt;As it was mentioned, we are going to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt; in this tutorial. Once the line series is created, it can be added to the RenderableSeries collection of the SciChartSurface:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;FastLineRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;&lt;BR&gt;RenderableSeriesCollection renderableSeries = chartSurface.getRenderableSeries();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;renderableSeries.add(lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To set a particular color and thickness to the line, you should call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries~setStrokeY1Style.html"&gt;setStrokeStyle&lt;/A&gt;(…) method. It accepts a parameter of the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;PenStyle&lt;/A&gt; type. During the creation of a PenStyle instance, you can pass the desired values as parameters to the constructor:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;PenStyle penStyle = new SolidPenStyle(ColorUtil.&lt;I&gt;Green&lt;/I&gt;, true, 2f, null);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Again, don’t forget to import all the used classes.&lt;/P&gt;
&lt;P&gt;As you may notice, SciChart provides a special helper class called &lt;A href="SciChart.Drawing~com.scichart.drawing.utility.ColorUtil.html"&gt;ColorUtil&lt;/A&gt;. It has several predefined integer color constants, for the most polular and widely used colors.&lt;/P&gt;
&lt;P&gt;Now, we should tell the line series to use this PenStyle as StrokeStyle:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;PenStyle penStyle = new SolidPenStyle(ColorUtil.&lt;I&gt;Green&lt;/I&gt;, true, 2f, null);&lt;BR&gt;lineSeries.setStrokeStyle(penStyle);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding a DataSeries to a RenderableSeries&lt;/H2&gt;
&lt;P&gt;The line series requires some data to be drawn. For best performance, SciChart provides a bunch of special classes called “&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries_namespace.html"&gt;DataSeries&lt;/A&gt;” which are designed to store data efficiently and access it in a rapid and optimal way.&lt;/P&gt;
&lt;P&gt;The most usual&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries_namespace.html"&gt;DataSeries&lt;/A&gt; type is&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;XyDataSeries&lt;/A&gt;, which is intended to store two collections, of X and Y values. However, it may not be enough for some&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries_namespace.html"&gt;RenderableSeries&lt;/A&gt; types. For instance, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt; requires four values as a data point (Open, High, Low, Close) instead of a simple X,Y pair. Therefore there is a special&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries_namespace.html"&gt;DataSeries&lt;/A&gt; type called&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;OhlcDataSeries&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;In this tutorial we are going to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;XyDataSeries&lt;/A&gt; for holding data, since it is the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries_namespace.html"&gt;DataSeries&lt;/A&gt; type&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt; can work with.&lt;/P&gt;
&lt;P&gt;The constructor for a DataSeries requires a data type for every component to be passed in; here, we will use Date for X and Double for Y values:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;XyDataSeries&amp;lt;Date, Double&amp;gt;&amp;nbsp;dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Date.class, Double.class);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To add data points to the DataSeries, you should call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries~append.html"&gt;append&lt;/A&gt;&lt;B&gt;(…)&lt;/B&gt; method on it. Every DataSeries type provides several overrides of it, allowing to add either a single data point or a bunch at a time. To get the best performance, you should try to append data points in batches as much as possible, using the those&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries~append.html"&gt;append&lt;/A&gt;&lt;B&gt;(…)&lt;/B&gt; overrides that accept Arrays or Collections.&lt;/P&gt;
&lt;P&gt;For this purpose, SciChart provides a special interface called&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.IValues.html"&gt;IValues&lt;/A&gt; that allows to implement your own collections with fast access to data. There are several default implementations for the primitive types,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.DoubleValues.html"&gt;DoubleValues&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.FloatValues.html"&gt;FloatValues&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.IntegerValues.html"&gt;IntegerValues&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.LongValues.html"&gt;LongValues&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.ShortValues.html"&gt;ShortValues&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.DateValues.html"&gt;DateValues&lt;/A&gt;. Use these to avoid boxing/unboxing of primitive types, thus enchanching performance of your charts.&lt;/P&gt;
&lt;P&gt;In this tutorial, we are going to demonstrate how to use&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.DoubleValues.html"&gt;DoubleValues&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.model.DateValues.html"&gt;DateValues&lt;/A&gt;. First, you need to initialize instances, passing the desired capacity to the constructor (optionally):&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;int size = 100;&lt;BR&gt;DateValues xValues = new DateValues(size);&lt;BR&gt;DoubleValues yValues = new DoubleValues(size);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Then, you should be able to add some X, Y data to the collections. For the simplicity’s sake, lets use random generated doubles as Y values, and fill the collections in the following “for” loop:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Random random = new Random();&lt;BR&gt;for (double i = 0; i &amp;lt; size; ++i) {&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; long xValue = new Date().getTime() + DateIntervalUtil.&lt;I&gt;fromDays&lt;/I&gt;(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.add(new Date(xValue));&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.add(random.nextDouble());&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Now, the data values can be appended to the DataSeries:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;dataSeries.append(xValues, yValues);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Once this is done, you can assign the newly created DataSeries to the RenderableSeries:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;lineSeries.setDataSeries(dataSeries);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To make the SciChartSurface drawing the line series stretched to the extents of the data range, you should call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier~getZoomExtentsY.html"&gt;zoomExtents&lt;/A&gt;&lt;B&gt;()&lt;/B&gt; method on it:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;chartSurface.zoomExtents();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding Interaction to the SciChartSurface&lt;/H2&gt;
&lt;P&gt;Vast majority of possible user interactions with a chart in SciChart is provided by the entities called “chart modifiers”. Using their API, making customization of the available out-of-the-box interactions and creation of new ones becomes simple and straightforward.&lt;/P&gt;
&lt;P&gt;There is a bunch of modifiers provided by SciChart for the most common user interactions, such as zooming, panning, inspecting a chart with cursors and hit-testing RenderableSeries or data points:&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;PinchZoomModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;ZoomPanModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier.html"&gt;RolloverModifier&lt;/A&gt;, &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SeriesSelectionModifier.html"&gt;SeriesSelectionModifier&lt;/A&gt; etc. As you may notice, all these names follows the “XXXModifier” pattern, and we recommend that you name your custom modifiers in the same way.&lt;/P&gt;
&lt;P&gt;For the tutorial’s sake, lets assume you want to allow users to zoom a chart in and out with a pinch gesture and scroll it with a finger. The default&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;PinchZoomModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;ZoomPanModifier&lt;/A&gt; sounds like doing exactly what is required. To add them to the SciChartSurface, you should do something pretty much similar to what we did before with axes and RenderableSeries:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;PinchZoomModifier zoomModifier = new PinchZoomModifier();&lt;BR&gt;ZoomPanModifier panModifier = new ZoomPanModifier();&lt;BR&gt;&lt;BR&gt;ChartModifierCollection chartModifiers = chartSurface.getChartModifiers();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;chartModifiers.add(zoomModifier);&lt;BR&gt;chartModifiers.add(panModifier);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;There is also a modifier, called “&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;”, which allows you to zoom out to the extents of chart’s data instantaneously, double-tapping a chart. Lets add it to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers_namespace.html"&gt;ChartModifierCollection&lt;/A&gt; too:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;ZoomExtentsModifier zoomExtentsModifier = new ZoomExtentsModifier();&lt;BR&gt;chartModifiers.add(zoomExtentsModifier);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Licensing the Application&lt;/H2&gt;
&lt;P&gt;At this point we are almost done with the set up of the chart. The only thing left is to license the SciChartSurface to allow it to be used in the application.&lt;/P&gt;
&lt;P&gt;The SciChart Runtime License is an XML file named &lt;STRONG&gt;“&lt;/STRONG&gt;license.xml” that provides Customer Info, Order Details and the Expiration Date of your subscribtion:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;LicenseContract&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;Customer&amp;gt;SciChart Ltd.&amp;lt;/Customer&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;OrderId&amp;gt;123-456&amp;lt;/OrderId&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;LicenseCount&amp;gt;1&amp;lt;/LicenseCount&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt; IsTrialLicense&amp;gt;false&amp;lt;/IsTrialLicense&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;SupportExpires&amp;gt;01/01/202000:00:00&amp;lt;/SupportExpires&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;ProductCode&amp;gt;SC-ANDROID-2D-ENTERPRISE-SITE-SRC&amp;lt;/ProductCode&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;KeyCode&amp;gt;ADFVNKJQN123456789…&amp;lt;/KeyCode&amp;gt;&lt;BR&gt;&amp;lt; /LicenseContract&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;It must be added to a project as a resource file. To do this, right-click the “res” folder in the project’s structure tab and choose the &lt;B&gt;New-&amp;gt;Android Resource Directory&lt;/B&gt; option from the context menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 726px; WIDTH: 1275px" border=0 alt="" src="images/4(2).jpg" width=1855 height=1014&gt;&lt;/P&gt;
&lt;P&gt;The “New Resource Directory” window will appear:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/4(33).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Here, choose the “raw” option from the “Resource Type” drop down list:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(3).jpg"&gt;&lt;/P&gt;
&lt;P&gt;The newly added folder should appear in the project’s structure tab:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(4).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Now, copy and paste your license file into the “raw” folder:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(5).jpg"&gt;&lt;/P&gt;
&lt;P&gt;After this, you have to point the SciChartSurface to the location of the license file. The SciChartSurface class has a special method for this,&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.licensing.Credentials~setRuntimeLicenseKey.html"&gt;setRuntimeLicenseKeyFromResource(…),&lt;/A&gt; which expects a Context and a relative path to the license file as parameters.&lt;/P&gt;
&lt;P&gt;We are going to call it at the very beginning of the onCreate(…) method in the MainActivity class, just after creation of the SciChartSurface instance:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 698px; WIDTH: 1261px" border=0 alt="" src="images/4(6).jpg" width=1890 height=1030&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The call to&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.licensing.Credentials~setRuntimeLicenseKey.html"&gt;setRuntimeLicenseKeyFromResource(…)&lt;/A&gt; should be enclosed in a try/catch block, because an exception may be thrown if the license file isn’t found.&lt;/P&gt;
&lt;H2&gt;Running and Viewing the Application&lt;/H2&gt;
&lt;P&gt;At this point, the application should compile and run without any issues. To Build it, choose the &lt;B&gt;Build-&amp;gt;Make Project&lt;/B&gt; option from the Android Studio’s menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(7).jpg"&gt;&lt;/P&gt;
&lt;P&gt;You can monitor the build’s status using the “&lt;B&gt;Messages&lt;/B&gt;” tab at the bottom of the Android Studio:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 650px; WIDTH: 1274px" border=0 alt="" src="images/4(8).jpg" width=1919 height=1038&gt;&lt;/P&gt;
&lt;P&gt;If you don’t see the “Messages” tab, it can be opened via the &lt;B&gt;View-&amp;gt;Tool Windows-&amp;gt;Messages&lt;/B&gt; option from the menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(9).jpg"&gt;&lt;/P&gt;
&lt;P&gt;If the build has failed, please try to do the steps again to ensure you haven’t missed something. If you still cannot manage it to succeed, please let us know at &lt;A href="http://support.scichart.com/"&gt;http://support.scichart.com&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;If the build has succeeded, Android Studio will allow you to Run the application. To do this, ensure it is selected in the “Run/Debug Configuration” dropdown:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(10).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Now try to run the application using the &lt;B&gt;Run-&amp;gt;Run ‘[app name]’&lt;/B&gt; option from the Android Studio’s menu:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(11).jpg"&gt;&lt;/P&gt;
&lt;P&gt;The “&lt;B&gt;Select Deployment Target&lt;/B&gt;” window will appear, suggesting to choose a target device from the list of available devices and emulators:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(12).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Select the desired one and press the “OK” button. Android Studio will re-build the application again and launch it on the selected device if the build has succeeded:&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986191" border=0 name="Picture 482986191" src="The_SciChart_Android_Examples_Suite_files/image067.jpg" width=273 height=486&gt;&lt;/P&gt;
&lt;P&gt;You should be able to zoom in and out, scroll the chart with fingers and double-tap to zoom out to the data range.&lt;/P&gt;
&lt;P&gt;The only thing left is to get rid of the white paddings around the chart. These are declared in the layout file for the activity and can be simply removed either in the text or design mode:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/4(14).jpg"&gt;&lt;/P&gt;
&lt;P&gt;Whithout the paddings the chart gets its final look:&lt;/P&gt;
&lt;P&gt;&lt;IMG id="Picture 482986195" border=0 name="Picture 482986195" src="The_SciChart_Android_Examples_Suite_files/image069.jpg" width=272 height=484&gt;&lt;/P&gt;
&lt;P&gt;Congratulations! You have just finished your first(probably) charting application using SciChart! We hope this tutorial was useful – please let us know what you think. If you have any ideas or remarks, feel free to share them at &lt;A href="http://support.scichart.com/"&gt;http://support.scichart.com&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
      <TopicCategory Id="36406a57-adda-4a2b-8a37-9d11942994e5" AutoIndex="false">
        <Caption m="2019-07-08T10:32:02.5713056Z">SciChart Android 2D Charts</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="4815323b-3bf9-4ed9-be5a-9313e5001efe" AutoIndex="false">
            <Caption m="2016-08-04T06:33:08.6944458Z">SciChart Android Basics</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="c66138c0-4f3e-48cb-9660-bb30cd6e2d13" Status="New Topic" CreatedOn="2016-08-04T06:56:56.504338Z" ModifiedOn="2019-10-28T14:54:04.7253308Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChartSurface" BuildFlags="">
                <Title m="2019-02-11T16:46:17.3685252Z">The SciChartSurface Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:54:04.7253308Z">&lt;P&gt;The root 2D chart view is called the &lt;B&gt;SciChartSurface&lt;/B&gt;. This is the Android ViewGroup you will be adding to your applications wherever you need a chart. You can add more than one SciChartSurface, you can configure them independently, and you can link them together.&lt;/P&gt;
&lt;P&gt;First up, let’s start by declaring one.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Declaring a SciChartSurface Instance&lt;/H2&gt;
&lt;P&gt;Once the SciChart&amp;nbsp;&lt;A href="290456e2-48c4-43ed-87a1-bc6452a926b6"&gt;AARs are added as dependencies&lt;/A&gt; to an application’s build configuration, a SciChartSurface instance can be declared in a layout file using the following markup:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Layout file&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="fill_parent" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then, it can be accessed in code (assuming the layout file is called “&lt;I&gt;base_scichart_layout.xml&lt;/I&gt;”) for further manipulations:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;@Override&lt;BR&gt;&amp;nbsp;public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Inflate the layout from “base_scichart_layout.xml”&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; View view = inflater.inflate(R.layout.base_scichart_layout, container, false);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Find the surface by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface surface = (SciChartSurface) view.findViewById(R.id.chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis xAxis = new NumericAxis(getActivity());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.setAxisTitle("X Axis Title");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Turn off AutoRanging and set the VisibleRange&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.setAutoRange(AutoRange.Never);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.setVisibleRange(new DoubleRange(-5d, 20d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the X axis to the XAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set a title for Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.setAxisTitle("Y Axis Title");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Turn off AutoRanging and set the VisibleRange&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.setAutoRange(AutoRange.Never);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.setVisibleRange(new DoubleRange(0d, 100d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the Y axis to the YAxes collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a TextAnnotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation textAnnotation = new TextAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Specify the position and alignment for the TextAnnotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setHorizontalAnchorPoint(HorizontalAnchorPoint.Center);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setVerticalAnchorPoint(VerticalAnchorPoint.Center);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setX1(5.0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setY1(50.0);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set a FontStyle for the TextAnnotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FontStyle fontStyle = new FontStyle(70, ColorUtil.Orange);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setFontStyle(fontStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set the inscription&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotation.setText("Hello World!");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the annotation to the Annotations collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PinchZoomModifier pinchZoom = new PinchZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ZoomExtentsModifier zoomExtents = new ZoomExtentsModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup chartModifiers = new ModifierGroup(pinchZoom, zoomExtents);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), chartModifiers);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return view;&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To summarize, the code above declares a SciChartSurface, adds two numeric axes, X and Y, onto it, adds a single text annotation and two zoom behaviours:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="What_is_SciChart_Android-_files/SciChartSurfaceBasics_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;Also, the&amp;nbsp;surface should appear in the&amp;nbsp;&lt;A href="3cfc9b61-37eb-419f-b3bc-aa90aee60d99"&gt;design view of Android Studio&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Creating a SciChartSurface Instance&amp;nbsp;in Code&lt;/H2&gt;
&lt;P&gt;Process of&amp;nbsp;creation&amp;nbsp;and configuring&amp;nbsp;a SciChartSurface instance in&amp;nbsp;code is essentially the same and quite straightforward. To make it even easier, SciChart Android&amp;nbsp;provides a bunch of helper classes called &lt;STRONG&gt;Chart Builders&lt;/STRONG&gt;. Please see the&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders Helper Classes&lt;/A&gt; article for more details.&lt;/P&gt;
&lt;H2&gt;What's Next?&lt;/H2&gt;
&lt;P&gt;To learn more about&amp;nbsp;how to configure SciChartSurface further,&amp;nbsp;please refer to the following documentation&amp;nbsp;sections:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis APIs&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Renderable Series APIs&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;Chart Modifier API&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;For&amp;nbsp;a step-by-step instruction on how to create a simple application with SciChart, please see the&amp;nbsp;&lt;A href="7f994081-2172-43cf-9853-5d4404a6ee3e"&gt;Quickstart Guide&lt;/A&gt;. Also, there are over 30 chart&amp;nbsp;examples that can be found in the downloadable&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-examples/"&gt;SciChart Android Examples Suite&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="94d753d1-216f-4370-b858-40095386c8e3" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f6700d6f-f8e5-4415-a0d4-fe4a76bef883" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7f994081-2172-43cf-9853-5d4404a6ee3e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2142a982-921e-4adf-adfa-77c7cc635c5c" Status="New Topic" CreatedOn="2016-08-04T07:39:17.782922Z" ModifiedOn="2019-08-13T10:53:06.8154727Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Builders Helper Classes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-13T10:53:06.8154727Z">&lt;P&gt;To simplify creation and configuring of a SciChartSurface, SciChart Android&amp;nbsp;provides a bunch of helper classes. They follow the &lt;STRONG&gt;XXXBuilder&lt;/STRONG&gt; naming pattern and allow to initialize virtually anything in an easier and more convenient way. Different property of classes can be preset via the &lt;STRONG&gt;withXXX(…)&lt;/STRONG&gt; methods&amp;nbsp;of the&amp;nbsp;helpers, a.k.a. "&lt;EM&gt;chart&lt;/EM&gt; &lt;EM&gt;builders&lt;/EM&gt;".&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Referencing SciChart Builders&lt;/H2&gt;
&lt;P&gt;SciChart builders for 2D charts&amp;nbsp;provided as seperate library which is called 'extensions'. If you&amp;nbsp;want to use&amp;nbsp;then you'll need to&amp;nbsp;add it into your project as&amp;nbsp;dependency. This is available from our&amp;nbsp;&lt;A href="https://www.myget.org/feed/abtsoftware/package/maven/com.scichart.library/extensions" target=_blank&gt;Maven feed&lt;/A&gt;, or in the Android Charts SDK at &lt;A href="http://www.scichart.com/downloads"&gt;www.scichart.com/downloads&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding extension library&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;Gradle&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart libraries as module dependencies&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'charting-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'drawing-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'data-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'core-release', ext:'aar'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Declare SciChart extension library as module dependencies&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation (name:'extensions-release', ext:'aar')&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using Chart Builders in Code&lt;/H2&gt;
&lt;P&gt;The main chart builder class is called &lt;STRONG&gt;SciChartBuilder&lt;/STRONG&gt;. It acts as a factory&amp;nbsp;of builders of other types, representing different&amp;nbsp;chart aspects.&lt;/P&gt;
&lt;P&gt;Using chart builders,&amp;nbsp;the code snippet for chart initialization from the section above can be rewritten as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;@Override&lt;BR&gt;public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Inflate the layout from “base_scichart_layout.xml”&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; View view = inflater.inflate(R.layout.base_scichart_layout, container, false);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // find the surface by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface surface = (SciChartSurface) view.findViewById(R.id.chart);&lt;/P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // need to init SciChartBuilder class with application context before using&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;SciChartBuilder.init(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // obtain the SciChartBuilder instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChartBuilder sciChartBuilder = SciChartBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis xAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis yAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("Y Axis Title").withVisibleRange(0, 100).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a TextAnnotation and specify the inscription and position for it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextAnnotation textAnnotation = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(5.0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(2.5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Hello World!")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(10, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup chartModifiers = sciChartBuilder.newModifierGroupWithDefaultModifiers().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the Y axis to the YAxes collection of the surface&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getYAxes(), yAxis);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the X axis to the XAxes collection of the surface&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getXAxes(), xAxis);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), chartModifiers);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return view;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Usually this approach to chart&amp;nbsp;initialization&amp;nbsp;results in more concise and elegent code. It is preferred for the vast majority of examples from the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-examples/"&gt;Android Examples Suite&lt;/A&gt;. We would recommend using it in applications too. However, it doesn't give any other benefits except those stated above, so the standard way of objects initialization is equally fine.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="a8ea5f1c-f4bc-4306-aa8a-24f4987457ad" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-examples/" BuildFlags="">
                    <Title m="2016-08-04T08:16:09.7364531Z">Android Chart Examples</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4e3b9e99-8d41-4edc-ac35-368d459f8c81" Status="New Topic" CreatedOn="2016-08-04T08:09:20.5656182Z" ModifiedOn="2019-10-28T14:54:04.7533083Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Adding an Axis to a SciChartSurface" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:54:04.7533083Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Java/Android Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b208d225-0b83-4e60-a832-4b4b2716a469"&gt;Xamarin.Android 2DTutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="b0767532-561b-484f-af6f-090b862e3219"&gt;Xamarin.Android 3D Tutorials&lt;/A&gt; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;Zoom &amp;amp; Pan Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltip Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling Basics&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3D%20Tutorial%2003%20-%20Creating%20a%20Chart%20and%20Add%20a%20Data%20Series.html"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the previous article we touched on adding a single X and Y Axis to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;. With SciChart you can also have &lt;STRONG&gt;unlimited left, right, top or bottom X or Y Axes&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P align=left&gt;&lt;IMG border=0 alt="" src="images/MultiXAxes1.png"&gt;&lt;/P&gt;
&lt;P align=left&gt;You can also place axes &lt;STRONG&gt;in the centre&lt;/STRONG&gt; of the chart or &lt;STRONG&gt;swap&lt;/STRONG&gt; &lt;STRONG&gt;X and Y axes over&lt;/STRONG&gt; to create a &lt;STRONG&gt;vertical chart&lt;/STRONG&gt;. Please see these examples from the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-examples/"&gt;Android Examples Suite&lt;/A&gt; for reference:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="http://www.scichart.com/android-chart-example-multiple-xaxis/"&gt;Multiple X-Axis Chart&lt;/A&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="http://www.scichart.com/android-chart-example-multiple-yaxis/"&gt;Multiple Y-Axis Chart&lt;/A&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/"&gt;Central X Axis and Y Axix&lt;/A&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="http://www.scichart.com/android-chart-example-vertical-charts/"&gt;Vertical Charts&lt;/A&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Axes can be added to&amp;nbsp;either the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getXAxes.html"&gt;XAxes&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getYAxes.html"&gt;YAxes&lt;/A&gt; collection of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;. In case of having &lt;STRONG&gt;multiple X or Y&amp;nbsp;axes&lt;/STRONG&gt;, every axis should have a &lt;STRONG&gt;unique&amp;nbsp;&lt;/STRONG&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~getAxisId.html"&gt;String ID&lt;/A&gt; assigned to it. All axes are positioned on a&amp;nbsp;chart&amp;nbsp;according to&amp;nbsp;their&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~getAxisAlignment.html"&gt;AxisAlignment&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding an Axis&lt;/H2&gt;
&lt;P&gt;To &lt;STRONG&gt;add an axis&lt;/STRONG&gt; to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// find the surface by id&lt;/P&gt;
&lt;P&gt;SciChartSurface surface = (SciChartSurface) view.findViewById(R.id.chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create numeric X axis&lt;BR&gt;IAxis xAxis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create numeric Y axis&lt;/P&gt;
&lt;P&gt;IAxis yAxis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// add the Y and X axes to the axis collections of the surface&lt;BR&gt;Collections.addAll(surface.getXAxes(), xAxis);&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getYAxes(), yAxis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Aligning an Axis Inside a Chart&lt;/H2&gt;
&lt;P&gt;To &lt;STRONG&gt;change the position&lt;/STRONG&gt; of an axis, set&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~getAxisAlignment.html"&gt;AxisAlignment&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// specifies that X Axis should appear to the bottom&lt;BR&gt;xAxis.setAxisAlignment(AxisAlignment.Bottom);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// specifies that Y Axis should appear to the left&lt;BR&gt;yAxis.setAxisAlignment(AxisAlignment.Left);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also refer to the&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;Create a Vertical Chart&lt;/A&gt;&amp;nbsp;article or the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-vertical-charts/"&gt;Vertical Chart&lt;/A&gt; example&amp;nbsp;to learn how to create &lt;STRONG&gt;Vertical (Rotated) Charts&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;Changing Axis Direction&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;Pointing an&amp;nbsp;axis inward or outward&lt;/STRONG&gt; requires setting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setIsCenterAxis.html"&gt;IsCenterAxis&lt;/A&gt; on an axis. By default, it is set to False, thus axis labels and ticks are turned outside a chart.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis xAxis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// specifies that the axis should be pointed inward&lt;BR&gt;// labels and ticks will overlay a chart area&lt;BR&gt;xAxis.setIsCenterAxis(true);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/innerAxis_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Placing an Axis Central&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;Placing an axis in the center of a chart&lt;/STRONG&gt; is more complicated though. It requires changes to&amp;nbsp;the &lt;STRONG&gt;layout process&lt;/STRONG&gt; in&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt; to specify the exact axis position inside a chart area. Please refer to the&amp;nbsp;&lt;A href="0ec125b0-0563-40b0-ba8c-0929f387c6b1"&gt;Placing Axis Central in the Chart&lt;/A&gt; article or the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/"&gt;Shifted Axes&lt;/A&gt;&amp;nbsp;example&amp;nbsp;for more info.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ShiftedAxes_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Adding Multiple Axes&lt;/H2&gt;
&lt;P&gt;Similarly, &lt;STRONG&gt;multiple X or Y&amp;nbsp;axes&lt;/STRONG&gt; can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&amp;nbsp;Although, it is recommended&amp;nbsp;that&amp;nbsp;&lt;STRONG&gt;unique IDs&lt;/STRONG&gt; are&amp;nbsp;assigned to every axis:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;//Create a left-aligned Y axis&lt;/P&gt;
&lt;P&gt;final IAxis yLeftAxis1 = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;yLeftAxis1.setAxisAlignment(AxisAlignment.Left);&lt;/P&gt;
&lt;P&gt;yLeftAxis1.setAxisId(“Y Left Axis 1”);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;//Create another left-aligned Y axis&lt;/P&gt;
&lt;P&gt;final IAxis yLeftAxis2 = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;yLeftAxis2.setAxisAlignment(AxisAlignment.Left);&lt;/P&gt;
&lt;P&gt;yLeftAxis2.setAxisId(“Y Left Axis 2”);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;//Create a right-aligned Y axis&lt;BR&gt;final IAxis yRightAxis1 = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;yRightAxis1.setAxisAlignment(AxisAlignment.Right);&lt;/P&gt;
&lt;P&gt;yRightAxis1.setAxisId(“Y Right Axis 1”);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;//Create another right-aligned Y axis&lt;/P&gt;
&lt;P&gt;final IAxis yRightAxis2 = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;yRightAxis2.setAxisAlignment(AxisAlignment.Right);&lt;/P&gt;
&lt;P&gt;yRightAxis2.setAxisId(“Y Right Axis 2”);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add all the axes to the YAxis Collection of SciChartSurface&lt;BR&gt;Collections.addAll(surface.getYAxes(), yLeftAxis1, yLeftAxis2, yRightAxis1, yRightAxis2);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/MultiYAxes_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Stacking Multiple Axes Vertically/Horizontally&lt;/H2&gt;
&lt;P&gt;It is possible to configure&amp;nbsp;chart layout to have axes &lt;STRONG&gt;placed one&amp;nbsp;next to another&lt;/STRONG&gt; vertically or horizontally.&amp;nbsp;This requires changes to&amp;nbsp;the &lt;STRONG&gt;layout process&lt;/STRONG&gt; in&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="0ec125b0-0563-40b0-ba8c-0929f387c6b1"&gt;Placing Axis Central in the Chart&lt;/A&gt; article or the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-vertically-stacked-yaxes/"&gt;Vertically Stacked Y Axes&lt;/A&gt;&amp;nbsp;example&amp;nbsp;for more info.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/VerticallyStacked_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using Axis Builders&lt;/H2&gt;
&lt;P&gt;&amp;nbsp;Also an axis can be created and configured using the&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;chart builders factory&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis xAxis = sciChartBuilder.newNumericAxis()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisAlignment(AxisAlignment.Bottom)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisId(“Y Left Axis 1”)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisTitle("X Axis Title")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5,15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt; &lt;EM&gt;Every &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; (chart types e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;Line&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;Candlestick&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;Column&lt;/A&gt;) and every &lt;STRONG&gt;Annotation&lt;/STRONG&gt; (Android Views laid over the chart) and some &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; (&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;zoom&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;pan&lt;/A&gt; behaviours) &lt;STRONG&gt;requires to be&lt;/STRONG&gt; measured against/&lt;STRONG&gt;attached to a particular axis&lt;/STRONG&gt;. You have to &lt;STRONG&gt;specify the ID of the axis&amp;nbsp;&lt;/STRONG&gt;for them&amp;nbsp;using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setYAxisId.html"&gt;setYAxisId&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setXAxisId.html"&gt;setXAxisId&lt;/A&gt; methods.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;EM&gt;However, If you have only a &lt;STRONG&gt;single X and Y Axis&lt;/STRONG&gt; you never have to set these &lt;STRONG&gt;ID properties&lt;/STRONG&gt;. This is required only in case of multiple axis. More on that later…&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="34e3ee2f-526e-42ff-b632-b79edaf42a72" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="dca777c7-6f3c-4823-ad89-4daa68e3fc3e" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis" BuildFlags="">
                    <Title />
                    <Category m="2016-08-04T08:56:35.6443039Z">Axis Types</Category>
                  </TopicLink>
                  <TopicLink Id="84ea1e04-57fc-40c5-bd25-51fe024d913d" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis" BuildFlags="">
                    <Title />
                    <Category m="2016-08-04T08:56:51.9084846Z">Axis Types</Category>
                  </TopicLink>
                  <TopicLink Id="7567e07b-9975-4752-b4d3-2cb8fba3e0a3" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis" BuildFlags="">
                    <Title />
                    <Category m="2016-08-04T08:57:03.316296Z">Axis Types</Category>
                  </TopicLink>
                  <TopicLink Id="11fd0801-eb3a-460b-8ae5-c740c3b89a89" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-multiple-xaxis/" BuildFlags="">
                    <Title m="2016-08-04T08:57:55.34217Z">Multiple X-Axis Chart</Title>
                    <Category m="2016-08-04T08:59:15.2038518Z">Android Chart Examples</Category>
                  </TopicLink>
                  <TopicLink Id="055e6595-fa14-467d-8b05-57581ea975da" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-multiple-yaxis/" BuildFlags="">
                    <Title m="2016-08-04T08:58:14.0297755Z">Multiple Y-Axis Chart</Title>
                    <Category m="2016-08-04T08:59:29.339336Z">Android Chart Examples</Category>
                  </TopicLink>
                  <TopicLink Id="2b542a50-5cd2-4b9a-ad51-17a708142f18" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/" BuildFlags="">
                    <Title m="2016-08-04T08:58:32.7483886Z">Central X Axis and Y Axis</Title>
                    <Category m="2016-08-04T08:59:34.9477175Z">Android Chart Examples</Category>
                  </TopicLink>
                  <TopicLink Id="c01599fa-8ca9-4535-95ba-708c64a81b35" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-vertical-charts/" BuildFlags="">
                    <Title m="2016-08-04T08:58:44.8583733Z">Vertical Charts</Title>
                    <Category m="2016-08-04T08:59:41.6753752Z">Android Chart Examples</Category>
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="edbc7aff-3aa5-4bc6-8694-efe3866556f5" AutoIndex="false">
            <Caption m="2016-08-04T09:00:32.249839Z">Axis APIs</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="e4489a79-987b-4a06-ac98-586190c47ec5" Status="New Topic" CreatedOn="2016-08-04T09:36:36.3649393Z" ModifiedOn="2019-09-24T12:29:50.2009013Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Types" BuildFlags="">
                <Title m="2019-02-11T16:51:06.0544125Z">Axis Types in SciChart</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T11:39:16.6874631Z">&lt;P&gt;There are several axis types&amp;nbsp;in SciChart Android. Although they all&amp;nbsp;differ in&amp;nbsp;types of data values&amp;nbsp;that can be rendered,&amp;nbsp;the most fundamental difference is in their&amp;nbsp;behavior. By that, the axes can be divided into two groups, Category and Value axis types. Please read the&amp;nbsp;&lt;A href="http://www.scichart.com/documentation/v4.x/Value%20Axis%20vs.%20Category%20Axis.html"&gt;Value Axis vs. Category Axis&lt;/A&gt; article&amp;nbsp;elaborating on what the difference is.&lt;/P&gt;
&lt;P&gt;The axis types provided by SciChart Android are listed below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Axis Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Value or Category Axis&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html" target=_blank&gt;NumericAxis&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html" target=_blank&gt;LogarithmicNumericAxis&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html" target=_blank&gt;DateAxis&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;CategoryNumericAxis&lt;/TD&gt;
&lt;TD&gt;Category Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html" target=_blank&gt;CategoryDateAxis&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Category Axis&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;All the axis types in SciChart implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis.html"&gt;IAxis&lt;/A&gt;&amp;nbsp;interface.&lt;/P&gt;
&lt;H2&gt;NumericAxis&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;is a &lt;STRONG&gt;Value axis&lt;/STRONG&gt; and is suitable for &lt;STRONG&gt;X and Y Axis&lt;/STRONG&gt; when the data on that axis is &lt;STRONG&gt;numeric&lt;/STRONG&gt; (e.g. &lt;STRONG&gt;double&lt;/STRONG&gt;, &lt;STRONG&gt;int&lt;/STRONG&gt;, &lt;STRONG&gt;long&lt;/STRONG&gt;, &lt;STRONG&gt;float&lt;/STRONG&gt;, &lt;STRONG&gt;short&lt;/STRONG&gt;). It is not suitable for non-numeric data types.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;, use the following code:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;NumericAxis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;axis.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;axis.setAutoRange(AutoRange.Once);&lt;BR&gt;axis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;
&lt;P&gt;axis.setVisibleRange(new DoubleRange(-45d, 300d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;LogarithmicNumericAxis&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt; is a &lt;STRONG&gt;Value axis&lt;/STRONG&gt; which uses&amp;nbsp;non-linear (logarithmic) scale. It&amp;nbsp;is suitable for X and Y Axis when the data &lt;SPAN&gt;is &lt;STRONG&gt;numeric&lt;/STRONG&gt; (e.g. &lt;STRONG&gt;double&lt;/STRONG&gt;, &lt;STRONG&gt;int&lt;/STRONG&gt;, &lt;STRONG&gt;long&lt;/STRONG&gt;, &lt;STRONG&gt;float&lt;/STRONG&gt;, &lt;STRONG&gt;short&lt;/STRONG&gt;). It is not suitable for non-numeric data types.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;EM&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt; The&amp;nbsp;&lt;/EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;&lt;EM&gt;LogarithmicNumericAxis&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;&amp;nbsp;cannot render data values less than or equal to zero. Please ensure you append&amp;nbsp;valid data to your&lt;/EM&gt; &lt;EM&gt;DataSeries&lt;/EM&gt;&lt;EM&gt;.&lt;/EM&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;, use the following code:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;LogarithmicNumericAxis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;LogarithmicNumericAxis axis = new LogarithmicNumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;axis.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;axis.setAutoRange(AutoRange.Once);&lt;BR&gt;axis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specifies how lables appear on the axis&lt;/P&gt;
&lt;P&gt;axis.setScientificNotation(ScientificNotation.LogarithmicBase);&lt;/P&gt;
&lt;P&gt;axis.setTextFormatting("#.#E+0");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specifies the logarithm&amp;nbsp;base for the logarithmic&amp;nbsp;scale of the axis&lt;/P&gt;
&lt;P&gt;axis.setLogarithmicBase(10d);&lt;/P&gt;
&lt;P&gt;axis.setVisibleRange(new DoubleRange(0.1d, 1000d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;DateAxis&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;is a &lt;STRONG&gt;Value axis&lt;/STRONG&gt;, which&amp;nbsp;is&amp;nbsp;suitable for &lt;STRONG&gt;X and Y Axis&lt;/STRONG&gt;&amp;nbsp;and is designed to&amp;nbsp;work with &lt;STRONG&gt;temporal data&lt;/STRONG&gt; (&lt;A href="https://developer.android.com/reference/java/util/Date.html"&gt;Date&lt;/A&gt;). It is not suitable for numeric data types.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;, use the following code:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DateAxis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new DateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;axis.setAxisAlignment(AxisAlignment.Bottom);&lt;BR&gt;axis.setAutoRange(AutoRange.Once);&lt;BR&gt;axis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;
&lt;P&gt;axis.setVisibleRange(new DateRange(dateMin, dateMax));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;CategoryDateAxis&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt; is a &lt;STRONG&gt;Category axis&lt;/STRONG&gt; and is suitable for the &lt;STRONG&gt;XAxis only&lt;/STRONG&gt;. It&amp;nbsp;is designed to&amp;nbsp;handle&amp;nbsp;a special case when &lt;STRONG&gt;data is discontinuous&lt;/STRONG&gt;&amp;nbsp;or contains breaks at regular intervals.&amp;nbsp;Unlike the&amp;nbsp;other axis types, it works with with&amp;nbsp;&lt;STRONG&gt;data indicies, not actual data values&lt;/STRONG&gt;.&amp;nbsp;It is not suitable for YAxis or numeric data types.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt;, use the following code:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CategoryDateAxis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new CategoryDateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;axis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;axis.setAutoRange(AutoRange.Once);&lt;BR&gt;axis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set VisibleRange to [min data index, max data index]&lt;BR&gt;xAxis.setVisibleRange(new DoubleRange(10d, 50d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;See the Axis Types in action&lt;/H2&gt;
&lt;P&gt;Please take a look at the examples from the Android Examples Suite listed&amp;nbsp;below&amp;nbsp;to see these axis types in action:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="http://www.scichart.com/android-column-chart-example/"&gt;Column Chart&lt;/A&gt;&amp;nbsp;with&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt; 
&lt;LI&gt;Logarithmic Axis&amp;nbsp;with &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt; 
&lt;LI&gt;&lt;A href="http://www.scichart.com/android-chart-example-fan-chart/"&gt;Fan Chart&lt;/A&gt; with&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt; 
&lt;LI&gt;&lt;A href="http://www.scichart.com/android-candlestick-chart-example/"&gt;Candlestick Chart&lt;/A&gt; with&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e1147406-090c-46a0-b046-bb75811b1da3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0a5b9be3-ae32-49f9-8335-d36f55269b37" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c535688a-6a18-47f2-be04-b4688e66981d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="258d598a-38f0-489a-92f5-d9daed562f45" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="da11a67f-4fff-4d5c-abe4-6d517da61e6c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1f42648d-b868-4793-8ab7-b44504f33f99" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="970b68ab-5753-4c39-b46c-de710af2e0bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1d18444a-b912-4bcc-ae02-96bde1620a21" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="494e52f8-99aa-417d-b80e-819c259dbb08" Status="New Topic" CreatedOn="2016-08-04T11:58:14.5952645Z" ModifiedOn="2019-02-12T12:11:54.1324377Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - VisibleRange and DataRange" BuildFlags="">
                <Title />
                <ContentsTitle m="2019-02-12T12:11:36.9106655Z">Axis Ranging - VisibleRange and DataRange</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T12:11:54.1324377Z">&lt;P&gt;Every axis type can work with a &lt;STRONG&gt;specific&amp;nbsp;range type&lt;/STRONG&gt;&amp;nbsp;that&amp;nbsp;implements the&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;IRange&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;interface. It depends on the data&amp;nbsp;type&amp;nbsp;the axis can work with.&amp;nbsp;Please review the&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;article on axis types&lt;/A&gt; to learn more.&lt;/P&gt;
&lt;H2&gt;Range Types in SciChart&lt;/H2&gt;
&lt;P&gt;The most important&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange.html"&gt;Range&lt;/A&gt; types are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.model.DoubleRange.html"&gt;DoubleRange&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.model.DateRange.html"&gt;DateRange&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.model.IndexRange.html"&gt;IndexRange&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;SciChart introduces the concepts of&amp;nbsp;a &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; and&amp;nbsp;the &lt;STRONG&gt;DataRange&lt;/STRONG&gt; of an axis, which are instances of the Range types listed above.&lt;/P&gt;
&lt;H2&gt;What is DataRange?&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;DataRange&lt;/STRONG&gt; is a property exposed by the axis, which tells you the range (Max, Min) of the DataSeries associated with that axis.&lt;/P&gt;
&lt;P&gt;DataRange completely depends on the chart data and doesn't change without data changes. The DataRange can be accessed via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase~getDataRange.html"&gt;Axis.getDataRange&lt;/A&gt; method.&lt;/P&gt;&lt;IMG border=0 alt="" src="images/LineSeriesVRDr_framed.png"&gt; 
&lt;H2&gt;What is VisibleRange?&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; is an actual&amp;nbsp;axis range, measured&amp;nbsp;in chart units.&amp;nbsp;This is a part&amp;nbsp;of a chart&amp;nbsp;that is currently visible in a viewport. So when&amp;nbsp;DataRange completely depends on chart data and doesn't change without data changes, VisibleRange can be modified to provide a different viewpoint to a chart. The VisibleRange of an axis can be accessed by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;&lt;EM&gt;Axis.getVisibleRange&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LineVR_DR_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;The type of the Range depends on the type of the axis. For more infmrmation, see&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Axis Ranging - Setting and Getting VisibleRange&lt;/A&gt;. &lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="eb4b86e5-fff3-4ff7-92f3-00dd441bfd25" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e4489a79-987b-4a06-ac98-586190c47ec5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8905dedb-756f-41ac-892c-9f011c652dc5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f43a75da-4a63-41a6-8db9-ff0ea13a5198" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="24079097-30a7-43ae-8829-a35508354a1f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1af2411a-a194-4bbe-9a3b-efe4a4caf49a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="00db68b3-95cf-464a-8dd7-b2957ee97135" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Data~com.scichart.data.model.IRange" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7af0d89d-0a88-4ab1-8c07-1728e234ac18" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7e516534-a04e-4231-9204-eeea678fbd26" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.ISciChartController" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f8027fe0-ad4f-4236-8722-ae1b403974a1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore+VisibleRangeChangeListener" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f43a75da-4a63-41a6-8db9-ff0ea13a5198" Status="New Topic" CreatedOn="2016-08-04T11:58:52.0955062Z" ModifiedOn="2019-02-12T12:02:42.5465631Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - AutoRange" BuildFlags="">
                <Title m="2016-08-05T13:00:50.5922709Z">Axis Ranging - AutoRange</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T12:02:42.5465631Z">&lt;P&gt;At the outset,&amp;nbsp;the&amp;nbsp;&lt;A href="494e52f8-99aa-417d-b80e-819c259dbb08"&gt;VisibleRange&lt;/A&gt; is adjusted to be equal to the&amp;nbsp;&lt;A href="494e52f8-99aa-417d-b80e-819c259dbb08"&gt;DataRange&lt;/A&gt; of an axis. However, an axis won't adjust its VisibleRange&amp;nbsp;automatically when data changes, unless it&amp;nbsp;is configured to do this.&amp;nbsp;The default&amp;nbsp;behavior&amp;nbsp;can be changed&amp;nbsp;using different&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AutoRange.html"&gt;AutoRange&lt;/A&gt; modes.&lt;/P&gt;
&lt;H2&gt;AutoRange Once&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;This is the&lt;STRONG&gt;&amp;nbsp;default setting&lt;/STRONG&gt;. The axis will attempt to autorange once to fit the data as you start the chart. This is an one-time action - the VisibleRange&amp;nbsp;won't adjust to any data changes in future.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// specify that the axis should update its VisibleRange automatically&lt;BR&gt;axis.setAutoRange(AutoRange.Once);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;AutoRange Always&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In this mode, the axis will attempt to autorange always to fit the data every time the chart is drawn. The &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; &lt;STRONG&gt;will adjust&lt;/STRONG&gt; to data changes correspondingly.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// specify that the axis should update its VisibleRange automatically&lt;BR&gt;axis.setAutoRange(AutoRange.Always);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;Please be aware that this &lt;STRONG&gt;setting will override any other ranging&lt;/STRONG&gt;, including zooming and panning by modifiers, but is useful in situations where you always want to view the extents of the data.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;AutoRange Never&lt;/H2&gt;&lt;SPAN&gt;&lt;A id=OLE_LINK53 name=OLE_LINK53&gt;&lt;/A&gt;&lt;/SPAN&gt;
&lt;P&gt;The &lt;STRONG&gt;axis will never autorange&lt;/STRONG&gt;. With this option, you would need to set the VisibleRange manually. The &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;won't adjust&lt;/STRONG&gt; to any data changes.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// specify that the axis should update its VisibleRange automatically&lt;BR&gt;axis.setAutoRange(AutoRange.Never);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using ViewportManager&lt;/H2&gt;
&lt;P&gt;The AutoRange behavior can be &lt;STRONG&gt;completely overridden&lt;/STRONG&gt; if necessary. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager.html"&gt;IViewportManager&lt;/A&gt; provides the full access to&amp;nbsp;and control&amp;nbsp;over axis ranges and viewport. The default implementation of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager.html"&gt;IViewportManager&lt;/A&gt;&amp;nbsp;is the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.DefaultViewportManager.html"&gt;DefaultViewportManager&lt;/A&gt;&amp;nbsp;class. Custom ViewportManagers can be assigned via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setViewportManager.html"&gt;&lt;EM&gt;setViewportManager()&lt;/EM&gt;&lt;/A&gt; method of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="24b18cd4-935b-43ae-8a2f-aaf008ea78ed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.AutoRange" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="555382cc-6db6-4721-bb93-7c7dbfef443c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="481c2c5f-080b-4403-b363-d034bf01848a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.viewportManagers.DefaultViewportManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="dfe50e75-c34a-4d96-98c7-9ce9855956cd" Status="New Topic" CreatedOn="2017-10-24T16:15:42.5610104Z" ModifiedOn="2019-02-12T13:18:23.3351891Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - Setting and Getting VisibleRange" BuildFlags="">
                <Title />
                <ContentsTitle m="2019-02-12T12:11:51.4954639Z">Axis Ranging - Setting and Getting VisibleRange</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T13:18:23.3351891Z">&lt;H2&gt;How to modify VisibleRange for different Axis Types&lt;/H2&gt;
&lt;P&gt;To programmatically range an axis, set the property &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getVisibleRange.html" target=_blank&gt;AxisCore.setVisibleRange&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;The type of object to apply to the Axis VisibleRange changes depending on the axis type. Please see the examples below for guidance:&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// 1.) NumericAxis&lt;BR&gt;// NumericAxis accepts types Double, Int, Long, Float, Short for data and DoubleRange for VisibleRange.&lt;BR&gt;NumericAxis yAxis = new NumericAxis(getActivity());&lt;BR&gt;yAxis.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;yAxis.setAutoRange(AutoRange.Always);&lt;BR&gt;yAxis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;BR&gt;yAxis.setVisibleRange(new DoubleRange(1d, 10d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// 2.) DateAxis&lt;BR&gt;//&amp;nbsp; DateAxisaccepts type DateTime for data and DateRange for VisibleRange.&lt;BR&gt;DateAxis xAxis = new DateAxis (getActivity());&lt;BR&gt;xAxis.setVisibleRange(new DateRange(dateMin, dateMax));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// 3.) LogarithmicNumericAxis&lt;BR&gt;// LogarithmicNumericAxisaccepts types Double, Int, Long, Float, Short for data and DoubleRange for VisibleRange.&lt;BR&gt;// Note that both Min and Max visible range must be the same sign. Zero values are not allowed&lt;BR&gt;LogarithmicNumericAxis yAxis = new LogarithmicNumericAxis(getActivity());&lt;BR&gt;yAxis.setVisibleRange(new DoubleRange(0.001d, 100d));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// 4.) CategoryDateAxis&lt;BR&gt;// CategoryDateAxis accepts type DateTime for data&lt;BR&gt;// and IndexRange for VisibleRange (specifyng the index to the data)&lt;BR&gt;IAxis xAxis = new CategoryDateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;xAxis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;xAxis.setAutoRange(AutoRange.Once);&lt;BR&gt;xAxis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;
&lt;P&gt;// set VisibleRange to [min data index, max data index]&lt;BR&gt;double dataIndex1 = 10d, dataIndex2 = 100d;&lt;/P&gt;
&lt;P&gt;DoubleRange visibleRange = new DoubleRange(dataIndex1, dataIndex2);&lt;BR&gt;xAxis.setVisibleRange(visibleRange);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt;&amp;nbsp;is treated as a special case. Although it is intended to show Dates, it doesn't allow setting&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.DateRange.html"&gt;DateRange&lt;/A&gt; as VisibleRange. The reason for this is that&amp;nbsp;this axis type works with with&amp;nbsp;&lt;STRONG&gt;data indicies, not actual data values.&lt;/STRONG&gt; So a&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.DoubleRange.html"&gt;DoubleRange&lt;/A&gt; should be applied instead, with lower data index as Min and Upper data index as Max.&lt;BR&gt;&lt;BR&gt;To learn more about &lt;STRONG&gt;how to convert values&lt;/STRONG&gt; from Dates to Indexes and back, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Padding or Spacing with GrowBy&lt;/H2&gt;
&lt;P&gt;Also, it is possible to&amp;nbsp;&lt;STRONG&gt;add spacing&lt;/STRONG&gt; to the VisibleRange via the &lt;STRONG&gt;GrowBy&lt;/STRONG&gt; property. It allows to specify two fractions which will be always applied to the&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMin.html"&gt;Min&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMax.html"&gt;Max&lt;/A&gt; values of VisibleRange:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;BR&gt;axis.setVisibleRange(new DoubleRange(-10d, 20d));&lt;BR&gt;axis.setGrowBy(new DoubleRange(0.1d, 0.1d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code snippet, the GrowBy of 0.1&amp;nbsp;will be&amp;nbsp;applied&amp;nbsp;to the VisibleRange resulting in actual VisibleRange increased by a fraction of&amp;nbsp;0.1, i.e. Min = -11, Max = 22.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 241px; WIDTH: 460px" border=0 alt="" src="images/ScatterGrowBy_VR_framed.png" width=767 height=401&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Zooming to fit&amp;nbsp;all the Data&lt;/H2&gt;
&lt;P&gt;Sometimes it is required to&amp;nbsp;make&amp;nbsp;an axis to &lt;STRONG&gt;show the full&amp;nbsp;extent of&amp;nbsp;the data&lt;/STRONG&gt;&amp;nbsp;associated with it. There are several ways to achieve this in code:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;set the VisibleRange to the DataRange value 
&lt;LI&gt;configure&amp;nbsp;the axis to auto adjust&amp;nbsp;correspondingly to&amp;nbsp;data changes. See the &lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;article about AutoRange&lt;/A&gt;. 
&lt;LI&gt;call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartController.html"&gt;ISciChartController&lt;/A&gt; methods from&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;such as ZoomExtents() 
&lt;LI&gt;call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartController.html"&gt;ISciChartController&lt;/A&gt;&amp;nbsp;methods from&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager.html"&gt;IViewportManager&lt;/A&gt;&amp;nbsp;such as ZoomExtents() &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;To change the&amp;nbsp;VisibleRange by touch interaction with a chart, please read about our&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifier API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="75091468-bbf7-49ad-9841-c5d935660429" Status="New Topic" CreatedOn="2017-10-24T16:16:39.0850588Z" ModifiedOn="2019-02-12T13:40:57.1647566Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - How to Listen to VisibleRange Changes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T13:40:57.1647566Z">&lt;H2&gt;How to&amp;nbsp;listen to VisibleRange changes&lt;/H2&gt;
&lt;P&gt;It is possible to subscribe to listening to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getVisibleRange.html"&gt;Axis.VisibleRange&lt;/A&gt; changes using&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.VisibleRangeChangeListener.html"&gt;VisibleRangeChangeListener&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;axis.setVisibleRangeChangeListener(new VisibleRangeChangeListener() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onVisibleRangeChanged(IAxisCore axis, IRange oldRange, IRange newRange, boolean isAnimating) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // TODO handle range changes here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The most typical use for this callback is to perform some kind of operation when the Axis.VisibleRange changes, such as updating UI.&lt;/P&gt;
&lt;P&gt;It is also possible to use this callback to restrict the VisibleRange in some way, e.g set a bounded or clipped range onto Axis.VisibleRange when the range changes outside of a desired area.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt; that you can differentiate between changes that were part of an animation by checking the &lt;STRONG&gt;isAnimating&lt;/STRONG&gt; parameter. For example, an animated zoom to extents operation will fire the callback many times with isAnimated = true, then once at the end with isAnimated = false.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1af2411a-a194-4bbe-9a3b-efe4a4caf49a" Status="New Topic" CreatedOn="2016-08-04T11:59:13.8144577Z" ModifiedOn="2019-10-28T14:57:03.9434087Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - Restricting VisibleRange" BuildFlags="">
                <Title m="2017-10-24T16:17:22.7604931Z">Axis Ranging - Restricting VisibleRange</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T14:57:03.9434087Z">&lt;H2&gt;Clipping the Axis VisibleRange on Zoom and Pan&lt;/H2&gt;
&lt;H3&gt;Specifying&amp;nbsp;the&amp;nbsp;VisibleRange Limit&lt;/H3&gt;
&lt;P&gt;Given a chart with data in the range of 0:10, when you zoom to extents, the axis will have a VisibleRange of 0:10. Sometimes this is not desirable, and you want to clip the&amp;nbsp;&lt;A href="494e52f8-99aa-417d-b80e-819c259dbb08"&gt;axis.VisibleRange&lt;/A&gt; &lt;I&gt;inside&lt;/I&gt; the data-range.&lt;BR&gt;To do this, you can use the&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://www.scichart.com/documentation/ios/v2.x/api/protocol_s_c_i_axis2_d_protocol-p.html#a19b031964e92e671c45763e986fccbd8" target=_blank&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setVisibleRangeLimit.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setVisibleRangeLimit.html"&gt;axis.setVisibleRangeLimit&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;For example. Given an axis without any limits (&lt;A href="https://www.scichart.com/documentation/ios/v2.x/api/protocol_s_c_i_axis2_d_protocol-p.html#a19b031964e92e671c45763e986fccbd8" target=_blank&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setVisibleRangeLimit.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setVisibleRangeLimit.html"&gt;axis.setVisibleRangeLimit&lt;/A&gt; = null). When we perform ZoomExtents on the chart, the XAxis gets the visible range (0;10):&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/visiblerangelimit1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Actual XAxis data range = (0:10) ; XAxis.VisibleRangeLimit = null; XAxis.VisibleRange after ZoomExtents = (0:10)&lt;/P&gt;
&lt;P&gt;After setting XAxis.visibleRangeLimit = (1:9) and using ZoomExtents we now get an XAxis.visibleRange = (1:9). In other words, zooming has clipped or limited the visibleRange to (1:9)&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;B&gt;&lt;I&gt;NOTE:&lt;/I&gt;&lt;/B&gt;&lt;I&gt;&amp;nbsp; VisibleRangeLimit &lt;B&gt;does not clip data range when VisibleRangeLimit is greater than data range&lt;/B&gt;. In this case after ZoomExtents you’ll get the actual data range.&lt;/I&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/visiblerangelimit2.png"&gt;&lt;/P&gt;
&lt;P&gt;Actual data range = (0:10); XAxis.VisibleRange = (1:9); XAxis.VisibleRange after ZoomExtents = (1:9)&lt;/P&gt;
&lt;H3&gt;Declaring an Axis VisibleRangeLimit&lt;/H3&gt;
&lt;P&gt;In the code sample below, the VisibleRange will never exceed the (-5, 5) range limit.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// VisibleRangeLimit expects a minimum and maximum value according to the axis VisibleRange type&lt;BR&gt;//&lt;BR&gt;// e.g.NumericAxis expects DoubleRange,&lt;BR&gt;//&amp;nbsp; DateAxis expects DateRange,&lt;BR&gt;//&amp;nbsp; CategoryDateAxis expect&amp;nbsp;DoubleRange where min,max are indices&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// turn off AutoRanging to set the VisibleRange&lt;BR&gt;axis.setAutoRange(AutoRange.Never);&lt;/P&gt;
&lt;P&gt;// set the VisibleRange&lt;BR&gt;axis.setVisibleRange(new DoubleRange(0d,50d));&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// restrict the VisibleRange&lt;BR&gt;axis.setVisibleRangeLimit(new DoubleRange(-5d,5d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;VisibleRangeLimit Modes&lt;/H2&gt;
&lt;P&gt;Sometimes it is required to have &lt;STRONG&gt;one end&lt;/STRONG&gt; of VisibleRange &lt;STRONG&gt;fixed&lt;/STRONG&gt; or restrict VisibleRange either by&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMin.html"&gt;Min&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMax.html"&gt;Max&lt;/A&gt; value. For that purposes, Axis API exposes&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.RangeClipMode.html"&gt;RangeClipMode&lt;/A&gt;. It allows&lt;/P&gt;
&lt;P&gt;to&amp;nbsp;specify&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setVisibleRangeLimitMode.html"&gt;VisibleRangeLimitMode&lt;/A&gt;&amp;nbsp;on an axis&amp;nbsp;to choose a behavior which is best&amp;nbsp;suitable&amp;nbsp;for a particular scenario.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="SciChart.Data~com.scichart.data.model.RangeClipMode.html"&gt;RangeClipMode.MinMax&lt;/A&gt; –&lt;/STRONG&gt; (Default) Allow clipping at Min and Max 
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="SciChart.Data~com.scichart.data.model.RangeClipMode.html"&gt;RangeClipMode.Max&lt;/A&gt; -&lt;/STRONG&gt; Allow clipping only at Max 
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="SciChart.Data~com.scichart.data.model.RangeClipMode.html"&gt;RangeClipMode&lt;U&gt;.&lt;/U&gt;Min&lt;/A&gt; -&lt;/STRONG&gt; Allow clipping only at Min &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Use this property if you wish to ensure that one side of the chart is always clipped, while the other side is not.&lt;/P&gt;
&lt;P&gt;Results in a chart that always sets VisibleRange.Min = 0 when you zoom to extents.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;B&gt;&lt;I&gt;NOTE:&lt;/I&gt;&lt;/B&gt;&lt;I&gt;&amp;nbsp; VisibleRangeLimit &lt;B&gt;does not clip data range when VisibleRangeLimit is greater than data range&lt;/B&gt;. In this case after ZoomExtents you’ll get the actual data range.&lt;/I&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Advanced VisibleRange Clipping&lt;/H2&gt;
&lt;P&gt;&lt;EM&gt;&lt;B&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setVisibleRangeLimit.html" target=_blank&gt;Axis.VisibleRangeLimit&lt;/A&gt;&lt;/B&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;is a useful API to ensure the axis clips the VisibleRange when zooming to extents. However, it will not stop a user from scrolling outside of that range. To achieve that, you need a small modification.&amp;nbsp;&lt;BR&gt;&lt;BR&gt;To clip the &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setVisibleRange.html" target=_blank&gt;VisibleRange&lt;/A&gt; and force a certain maximum or minimum, just use the following code:&lt;/EM&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// Register a VisibleRangeChanged callback&lt;BR&gt;axis.setVisibleRangeChangeListener(new VisibleRangeChangeListener() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onVisibleRangeChanged(IAxisCore axis, IRange oldRange, IRange newRange, boolean isAnimating) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// if the new Range is outside of a certain limit, set the old range&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(((DoubleRange)newRange).getMin() &amp;lt; 0.0d) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setVisibleRange(oldRange);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp; });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Specifying a Minimum Zoom Level&lt;/H1&gt;
&lt;P&gt;If you want to constrain zoom depth in your application, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getMinimalZoomConstrain.html"&gt;MinimalZoomConstrain&lt;/A&gt; allows you to specify the minimal difference between&amp;nbsp;Min&amp;nbsp;and Max values of axis' VisibleRange. If the difference becomes less than&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getMinimalZoomConstrain.html"&gt;MinimalZoomConstrain&lt;/A&gt; then VisibleRange will not change.&lt;/P&gt;
&lt;H3&gt;Setting MinimalZoomConstrain&amp;nbsp;for&amp;nbsp;NumericAxis&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// specify that VisibleRange should never become less than 10&lt;BR&gt;axis.setMinimalZoomConstrain(10d);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Setting MinimalZoomConstrain&amp;nbsp;for&amp;nbsp;CategoryDateAxis&lt;/H3&gt;
&lt;P&gt;MinimalZoomConstrain works differently if set on&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;CategoryDateAxis&lt;/A&gt;. It determines the minimal zoom level on an axis&amp;nbsp;possible to show the&amp;nbsp;specified amount of data points:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;CategoryDateAxis axis = new CategoryDateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// specify that VisibleRange should show no less than 10 data points&lt;BR&gt;&amp;nbsp;axis.setMinimalZoomConstrain(10d);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Setting MinimalZoomConstrain&amp;nbsp;for&amp;nbsp;DateAxis&lt;/H3&gt;
&lt;P&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;DateAxis&lt;/A&gt; has its specifics as well. It's VisibleRange is of&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.model.DateRange.html"&gt;DateRange&lt;/A&gt; type, so the MinimalZoomConstrain is designed to specify the &lt;STRONG&gt;difference between two dates in milliseconds&lt;/STRONG&gt;. Setting MinimalZoomConstrain on a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;, you ensure that &lt;STRONG&gt;((Date) VisibleRange.getDiff() ).getTime()&lt;/STRONG&gt; will never become less than the MinimalZoomConstrain value.&lt;/P&gt;
&lt;P&gt;For convenience, SciChart provides a&amp;nbsp;bunch of helper methods in the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.utility.DateIntervalUtil.html"&gt;DateIntervalUtil&lt;/A&gt; class:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;DateAxis axis = new DateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// find the Ticks for the desired time span&lt;/P&gt;
&lt;P&gt;long minTicks = DateIntervalUtil.fromMonths(2);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// specify that VisibleRange should never become less than 2 months&lt;BR&gt;&amp;nbsp;axis.setMinimalZoomConstrain(minTicks);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Specifying a &lt;SPAN&gt;Maximum Zoom Level&lt;/SPAN&gt;&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;It is also possible&amp;nbsp;to specify the maximal difference between&amp;nbsp;Min&amp;nbsp;and Max values of axis' VisibleRange. If the difference becomes more than&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getMinimalZoomConstrain.html"&gt;MaximumZoomConstrain&lt;/A&gt; then VisibleRange will not change.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;&lt;SPAN&gt;Setting MaximumZoomConstrain&amp;nbsp;for&amp;nbsp;NumericAxis&lt;/SPAN&gt;&lt;/H3&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// specify that VisibleRange should never become more than 100&lt;BR&gt;&amp;nbsp;axis.setMaximumZoomConstrain(100d);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;&lt;SPAN&gt;Setting MaximumZoomConstrain&amp;nbsp;for&amp;nbsp;CategoryDateAxis&lt;/SPAN&gt;&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;MaximumZoomConstrain works differently if set on&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;CategoryDateAxis&lt;/A&gt;. It determines the maximal zoom level on an axis&amp;nbsp;possible to show the&amp;nbsp;specified amount of data points:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;CategoryDateAxis axis = new CategoryDateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// specify that VisibleRange should contain no more than 100 data points&lt;BR&gt;&amp;nbsp;axis.setMaximumZoomConstrain(100d);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;&lt;SPAN&gt;Setting MaximumZoomConstrain&amp;nbsp;for&amp;nbsp;DateAxis&lt;/SPAN&gt;&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;As to the &lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;DateAxis&lt;/A&gt;, the MaximumZoomConstrain is designed to specify the &lt;STRONG&gt;difference between two dates in milliseconds&lt;/STRONG&gt;. Setting MaximumZoomConstrain on a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;, you ensure that &lt;STRONG&gt;((Date) VisibleRange.getDiff() ).getTime()&lt;/STRONG&gt; will never become more than the MaximumZoomConstrain value.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;For convenience, SciChart provides a&amp;nbsp;bunch of helper methods in the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.utility.DateIntervalUtil.html"&gt;DateIntervalUtil&lt;/A&gt; class:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;DateAxis axis = new DateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// find the Ticks for the desired time span&lt;/P&gt;
&lt;P&gt;long maxTicks = DateIntervalUtil.fromMonths(10);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// specify that VisibleRange should never become more than 10 months&lt;BR&gt;&amp;nbsp;axis.setMaximumZoomConstrain(maxTicks);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3f7d945b-251d-4b4b-8210-7d90bdfe7a51" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2055f1db-3f89-4c1c-8a84-9a065f37dcf0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="494e52f8-99aa-417d-b80e-819c259dbb08" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="331cb894-11bf-4af7-b9cf-e60de654662d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f43a75da-4a63-41a6-8db9-ff0ea13a5198" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="905dc605-3914-4824-9eb6-2e5d969f8475" Status="New Topic" CreatedOn="2016-08-31T08:56:34.2419524Z" ModifiedOn="2019-02-12T14:35:46.9312344Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Labels - TextFormatting and CursorTextFormatting" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T14:35:46.9312344Z">&lt;H2&gt;Axis Labels Formatting&lt;/H2&gt;
&lt;P&gt;All the axis&amp;nbsp;classes obey standard Java formatting strings, calling methods of the&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/text/Format.html"&gt;Java Format API&lt;/A&gt; internally. Thus, standard&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html"&gt;Date and Time&lt;/A&gt; and&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html"&gt;Numeric&lt;/A&gt; pattern strings can be applied to format axis labels.&amp;nbsp;There is the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTextFormatting.html"&gt;&lt;EM&gt;setTextFormatting()&lt;/EM&gt;&lt;/A&gt; method declared in&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore.html"&gt;IAxisCore&lt;/A&gt;&amp;nbsp;for this purpose. Also, axis axis labels formatting is&amp;nbsp;applied to &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;labels.&lt;/P&gt;
&lt;P&gt;There are some&amp;nbsp;examples of possible formatting strings&amp;nbsp;for&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;: "&lt;STRONG&gt;%+,8f&lt;/STRONG&gt;", "&lt;STRONG&gt;#,##0.###&lt;/STRONG&gt;", "&lt;STRONG&gt;$###,###.###",&lt;/STRONG&gt; "&lt;STRONG&gt;0.#####E0&lt;/STRONG&gt;".&lt;/P&gt;
&lt;P&gt;And the following ones are examples of&amp;nbsp;valid&amp;nbsp;formatting strings&amp;nbsp;for &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;: "&lt;STRONG&gt;dd.MM.yy&lt;/STRONG&gt;", "&lt;STRONG&gt;EEE, MMM d,' 'yy&lt;/STRONG&gt;", "&lt;STRONG&gt;K:mm a,z&lt;/STRONG&gt;", "&lt;STRONG&gt;h:mm a&lt;/STRONG&gt;".&lt;/P&gt;
&lt;P&gt;Axis Labels Formatting can be&amp;nbsp;set in code as shown below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an axis and set a formatting string&lt;/P&gt;
&lt;P&gt;IAxis xAxis = new DateAxis(getActivity());&lt;BR&gt;&amp;nbsp;xAxis.setTextFormatting("dd.MMM");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an axis and set a formatting string&lt;/P&gt;
&lt;P&gt;IAxis yAxis = new NumericAxis(getActivity());&lt;BR&gt;&amp;nbsp;yAxis.setTextFormatting("$0.0000");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above results in axis labels being formatted as shown below:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/TextFormatting_framed (1).png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Axis Cursor Text Formatting&lt;/H2&gt;
&lt;P&gt;Axis API allows&amp;nbsp;to&amp;nbsp;assign&amp;nbsp;a formatting string&amp;nbsp;for axis overlays,&amp;nbsp;such as&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;Cursor axis labels&lt;/A&gt;.&amp;nbsp;Similarly to axis labels formatting, there&amp;nbsp;is&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setCursorTextFormatting.html"&gt;&lt;EM&gt;setCursorTextFormatting()&lt;/EM&gt;&lt;/A&gt; method&amp;nbsp;for&amp;nbsp;this. Likewise, it uses the same&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/text/Format.html"&gt;Java Format API&lt;/A&gt;&amp;nbsp;internally, so everything&amp;nbsp;aforementioned applies to the cursor labels as well.&lt;/P&gt;
&lt;P&gt;Axis Overlays Formatting can be&amp;nbsp;set in code as shown below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an axis and set a formatting string for modifiers' axis labels&lt;/P&gt;
&lt;P&gt;IAxis xAxis = new DateAxis(getActivity());&lt;BR&gt;xAxis.setCursorTextFormatting("'X Value:'dd.MM.yyyy");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an axis and set a formatting string for modifiers' axis labels&lt;/P&gt;
&lt;P&gt;IAxis yAxis = new NumericAxis(getActivity());&lt;BR&gt;&amp;nbsp;yAxis.setCursorTextFormatting("'Price:'###.##' $'");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The code above results in cursor labels being formatted as shown below:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CursorTextFormatting_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Numeric&amp;nbsp;Axes and Scientific Notation&lt;/H2&gt;
&lt;P&gt;It is possible to render axis labels and text in tooltips in a shortened form&amp;nbsp;using &lt;STRONG&gt;scientific notation&lt;/STRONG&gt; (&lt;STRONG&gt;standard form&lt;/STRONG&gt;). This&amp;nbsp;becomes an issue when working with large numbers. In this case axis size&amp;nbsp;will&amp;nbsp;grow&amp;nbsp;to fit axis labels inside.&amp;nbsp;This is a common issue when working with&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;To configure an axis to show numbers in this form, it is necessary that a&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html"&gt;proper format string&lt;/A&gt; is provided and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation.html"&gt;ScientificNotation&lt;/A&gt;&amp;nbsp;is set to the desired value. There is a method called&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis~setScientificNotation.html"&gt;setScientificNotation()&lt;/A&gt;&lt;/EM&gt; for this purpose, which accepts a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation.html"&gt;ScientificNotation&lt;/A&gt; enum member. Possible options are listed below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation~None.html"&gt;None&lt;/A&gt; -&amp;nbsp;the default value. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation~Normalized.html"&gt;Normalized&lt;/A&gt; - assumes 10 as base. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation~E.html"&gt;E&lt;/A&gt; - assumes the numer E as base. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation~LogarithmicBase.html"&gt;LogarithmicBase&lt;/A&gt; - used with &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;. Assumes&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ILogarithmicNumericAxis~getLogarithmicBase.html"&gt;the logarithmic base&lt;/A&gt; of &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;&amp;nbsp;as base. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;An axis can be configured to use &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.ScientificNotation.html"&gt;ScientificNotation&lt;/A&gt;&amp;nbsp;like follows:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;LogarithmicNumericAxis axis = new LogarithmicNumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;axis.setLogarithmicBase(10d);&lt;BR&gt;&amp;nbsp;axis.setScientificNotation(ScientificNotation.LogarithmicBase);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;axis.setTextFormatting("#.#E+0");&lt;BR&gt;&amp;nbsp;axis.setCursorTextFormatting("#.#E+0");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The code above will&amp;nbsp;result in&amp;nbsp;cursor labels and labels on axes&amp;nbsp;being formatted as shown below:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 254px; WIDTH: 482px" border=0 alt="" src="images/LogAxisFormatting_framed.png" width=605 height=310&gt;&lt;/P&gt;
&lt;H2&gt;Dynamically Changing TextFormatting&lt;/H2&gt;
&lt;P&gt;For more advanced formatting scenarios,&amp;nbsp;Axis API provides&amp;nbsp;a feature called &lt;STRONG&gt;LabelProviders&lt;/STRONG&gt;. It grants full control over text output of&amp;nbsp;every axis label. This can be useful if required to&amp;nbsp;customize textual representation of particular axis labels or replace all of them with other strings based on some logics. Please refer to the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider API&lt;/A&gt; article for further details.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="272df91a-3f01-4ef5-96c4-5f58d1198d30" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1325dcad-b236-42e7-8491-af7a8137d6e7" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1325dcad-b236-42e7-8491-af7a8137d6e7" Status="New Topic" CreatedOn="2016-08-04T12:05:46.0398385Z" ModifiedOn="2019-02-12T14:45:40.0101003Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Labels - LabelProvider API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T14:45:40.0101003Z">&lt;P&gt;All Axis Types include the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setLabelProvider.html" target=_blank&gt;AxisCore.LabelProvider&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;property, which allows a class to be attached to an axis for complete control over axis label output.&lt;/P&gt;
&lt;P&gt;Use a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.LabelProviderBase.html"&gt;LabelProvider&lt;/A&gt; when you want to:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Have fine grained control over Axis Text or Cursor Labels, depending on numeric (or date) values 
&lt;LI&gt;Display strings on the XAxis, e.g. “Bananas”, “Oranges”, “Apples” not “1”, “2”, “3” 
&lt;LI&gt;Dynamically change the Axis TextFormatting as you zoom in or out 
&lt;LI&gt;Dynamically change the Axis TextFormatting depending on Data-value &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Creating your own LabelProviders&lt;/H2&gt;
&lt;P&gt;By default each axis has a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider.html"&gt;LabelProvider&lt;/A&gt; created and assigned to it. The type of LabelProvider depends on the&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;type of Axis&lt;/A&gt;. Below is a table of the LabelProviders already defined in SciChart Android.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.NumericLabelProvider.html"&gt;NumericLabelProvider&lt;/A&gt;– used to provide labels on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.DateLabelProvider.html"&gt;DateLabelProvider&lt;/A&gt;– used to provide labels on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.LogarithmicNumericLabelProvider.html"&gt;LogarithmicNumericLabelProvider&lt;/A&gt; - used to provide labels on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.TradeChartAxisLabelProvider.html"&gt;TradeChartAxisLabelProvider&lt;/A&gt;– used to provide labels on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;If you create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider.html"&gt;LabelProvider&lt;/A&gt;, inherit from the correct class above, and override&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider~formatLabel.html"&gt;&lt;EM&gt;formatLabel()&lt;/EM&gt;&lt;/A&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider~formatCursorLabel.html"&gt;&lt;EM&gt;formatCursorLabel()&lt;/EM&gt;&lt;/A&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;methods.&lt;/P&gt;
&lt;P&gt;The former is called internally&amp;nbsp;for every axis tick value&amp;nbsp;to&amp;nbsp;get a text&amp;nbsp;to show&amp;nbsp;for&amp;nbsp;corresponding axis label. Also&amp;nbsp;it is used to format&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;labels.&amp;nbsp;The latter is called to format data values for axis overlays,&amp;nbsp;such as&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;Cursor axis labels&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;A LabelProvider can be assigned to an axis via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setLabelProvider.html"&gt;&lt;EM&gt;setLabelProvider()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;H2&gt;Worked Example: Creating a Custom NumericAxis LabelProvider&lt;/H2&gt;
&lt;P&gt;To create a custom label provider for the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;, we simply create a class that inherits&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.NumericLabelProvider.html"&gt;NumericLabelProvider&lt;/A&gt;, and override&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider~formatLabel.html"&gt;&lt;EM&gt;formatLabel()&lt;/EM&gt;&lt;/A&gt; and optionally,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ILabelProvider~formatCursorLabel.html"&gt;&lt;EM&gt;formatCursorLabel()&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;To apply a custom label provider, call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setLabelProvider.html"&gt;&lt;EM&gt;setLabelProvider()&lt;/EM&gt;&lt;/A&gt; method on an axis:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public static class NumericLabelProviderEx extends NumericLabelProvider{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String axisLabelFormat;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public NumericLabelProviderEx(String axisLabelFormat) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.axisLabelFormat = axisLabelFormat;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public String formatLabel(Comparable dataValue) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // return a formatting string for tick labels&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return String.format(axisLabelFormat, (Double)dataValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public String formatCursorLabel(Comparable dataValue) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // return a formatting string for modifiers' axis labels&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return formatLabel(dataValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Usage in example - application of custom labelprovider to an axis &lt;BR&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// create a NumericLabelProviderEx with a specific formatting&lt;BR&gt;// and assign it to the axis&lt;BR&gt;axis.setLabelProvider(new NumericLabelProviderEx("%+,8f"));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Please&amp;nbsp;note that&amp;nbsp;other axis types require different base types for the LabelProvider.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="73a23908-15a6-413f-8662-a99635774814" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="905dc605-3914-4824-9eb6-2e5d969f8475" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="463d136b-fe1f-4960-85ac-9cb15ceb1d21" Status="New Topic" CreatedOn="2016-09-01T05:16:13.4388368Z" ModifiedOn="2019-02-12T15:05:03.8692793Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ticks - Major Delta, Minor Delta and AutoTicks" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T15:05:03.8692793Z">&lt;H2&gt;Axis Ticks, Labels and Grid Lines&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In SciChart, the &lt;STRONG&gt;Ticks&lt;/STRONG&gt; are small marks around the chart on an axis.&amp;nbsp;There are &lt;STRONG&gt;Minor&lt;/STRONG&gt; and &lt;STRONG&gt;Major&lt;/STRONG&gt; &lt;STRONG&gt;Ticks&lt;/STRONG&gt;,&amp;nbsp;where Minor Ticks are placed in between&amp;nbsp;Major&amp;nbsp;ones. By default, Major&amp;nbsp;Ticks&amp;nbsp;are longer and thicker than Minor Ticks.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Axis Labels&lt;/STRONG&gt; appears for every Major Tick, if there is enough space around. If Axis Labels&amp;nbsp;are&amp;nbsp;placed too tightly, some of them &lt;STRONG&gt;get culled&lt;/STRONG&gt; to make more space. If necessary, labels &lt;STRONG&gt;culling can be switched off&lt;/STRONG&gt; via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setIsLabelCullingEnabled.html"&gt;&lt;EM&gt;setIsLabelCullingEnabled()&lt;/EM&gt;&lt;/A&gt; method.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Grid Lines&lt;/STRONG&gt; correspond to &lt;STRONG&gt;Ticks&lt;/STRONG&gt; on an axis.&amp;nbsp;Likewise, there are&amp;nbsp;Minor and Major Grid lines. In SciChart,&amp;nbsp;&lt;STRONG&gt;axes are responsible&lt;/STRONG&gt; not only for drawing Ticks and Labels, but also &lt;STRONG&gt;for&amp;nbsp;the chart grid&lt;/STRONG&gt;. An axis draws only&amp;nbsp;those Grid Lines that can be measured against it, i.e. a horizontal axis draws vertical grid lines and vice versa.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="images/image003.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P align=left&gt;&lt;SPAN&gt;&lt;SPAN&gt;To learn more about possible options for Axis Ticks, Gridlines and Labels, please refer to the&amp;nbsp;&lt;A href="4a3049e2-a07f-4fb0-81b3-106f7803db42"&gt;Styling Gridlines, Ticks and Axis Bands&lt;/A&gt; and&amp;nbsp;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Styling Title and Axis Labels&lt;/A&gt; articles.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2 align=left&gt;Automatic Tick Spacing&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In SciChart, the&amp;nbsp;difference between two Major Ticks is called &lt;STRONG&gt;MajorDelta&lt;/STRONG&gt;, and that between two minor Ticks - &lt;STRONG&gt;MinorDelta&lt;/STRONG&gt;.&amp;nbsp;By default,&amp;nbsp;both delta values&lt;SPAN&gt;(therefore the Tick spacing) are calculated automatically&amp;nbsp;according to&amp;nbsp;the VisibleRange&lt;/SPAN&gt;&amp;nbsp;and size of&amp;nbsp;an axis. As zoom level changes,&amp;nbsp;&lt;SPAN&gt;the MajorDelta, MinorDelta of&amp;nbsp;every axis will be updated correspondingly,&amp;nbsp;and the tick frequency may change.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;There are two additional&amp;nbsp;options used&amp;nbsp;to control&amp;nbsp;the auto ticking behavior. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setMaxAutoTicks.html"&gt;&lt;EM&gt;setMaxAutoTicks()&lt;/EM&gt;&lt;/A&gt; method allows to limit the number of generated ticks to the desired number, and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setMinorsPerMajor.html"&gt;&lt;EM&gt;setMinorsPerMajor()&lt;/EM&gt;&lt;/A&gt; specifies how many Minor Ticks are drawn between two Major Ticks (the default is 5).&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// change max possible auto ticks amount&lt;BR&gt;// the default is 10&lt;BR&gt;axis.setMaxAutoTicks(20);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify that there should be 10 Minor Ticks between two Major Ticks&lt;BR&gt;// the default is 5&lt;BR&gt;axis.setMinorsPerMajor(10);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Altering&amp;nbsp;Tick Spacing&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;It is possible to set &lt;STRONG&gt;MinorDelta&lt;/STRONG&gt; and &lt;STRONG&gt;MajorDelta&lt;/STRONG&gt; manually. To change them, automatic calculation&amp;nbsp;must be switched off via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setAutoTicks.html"&gt;&lt;EM&gt;setAutoTicks()&lt;/EM&gt;&lt;/A&gt; method. To set delta values, call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setMinorDelta.html"&gt;&lt;EM&gt;setMinorDelta()&lt;/EM&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setMajorDelta.html"&gt;&lt;EM&gt;setMajorDelta()&lt;/EM&gt;&lt;/A&gt; methods. Please note that &lt;STRONG&gt;both&lt;/STRONG&gt; delta values need to be set in this case:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// switch off automatic deltas calculation&lt;BR&gt;axis.setAutoTicks(false);&lt;/P&gt;
&lt;P&gt;// assign Major, MinorDeltas values&lt;BR&gt;axis.setMajorDelta(10d);&lt;BR&gt;axis.setMinorDelta(2d);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Altering Tick Spacing for the LogarithmicAxis&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;&amp;nbsp;is a special case that need to be mentioning here. Due to the exponential nature of this axis type, &lt;STRONG&gt;MajorDelta&lt;/STRONG&gt; represents &lt;STRONG&gt;the difference between exponents&lt;/STRONG&gt; of neighbouring major ticks, not between their actual values. For instance, having MajorDelta = 3&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis~setLogarithmicBase.html"&gt;LogarithmicBase&lt;/A&gt; = 10 on a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt; specifies that major ticks and gridlines will be spaced at 10&lt;SUP&gt;3&lt;/SUP&gt; intervals (exponents will be divisors of MajorDelta):&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/LogAxisMajorTicks.png"&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&lt;STRONG&gt;&amp;nbsp;&lt;FONT size=1&gt;LogarithmicAxis, MajorDelta = 3, minor ticks/gridlines hidden&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;
&lt;P&gt;On the contrary, the difference between neighbouring minor ticks is not exponential. Therefore &lt;STRONG&gt;MinorDelta&lt;/STRONG&gt; represents &lt;STRONG&gt;the difference between actual values&lt;/STRONG&gt; of neighbouring minor ticks. For instance, having MinorDelta = 100 results in minor ticks and gridlines appearing with the increment of 100x10&lt;SUP&gt;E&lt;/SUP&gt;, where&amp;nbsp;E is the exponent of the nearest major tick to the left. So the interval will be (100x10&lt;SUP&gt;0&lt;/SUP&gt;&amp;nbsp;= 100)&amp;nbsp;between 1x10&lt;SUP&gt;0&lt;/SUP&gt; and 1x10&lt;SUP&gt;3&lt;/SUP&gt;, (100x10&lt;SUP&gt;3&amp;nbsp;&lt;/SUP&gt; = 100 000) between 1x10&lt;SUP&gt;3&lt;/SUP&gt; and 1x10&lt;SUP&gt;6&lt;/SUP&gt;, and 100x10&lt;SUP&gt;6&lt;/SUP&gt; between 1x10&lt;SUP&gt;6&lt;/SUP&gt; and 1x10&lt;SUP&gt;9&lt;/SUP&gt;:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/LogAxisMinorTicks.png"&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&amp;nbsp; &lt;STRONG&gt;&lt;FONT size=1&gt;LogarithmicAxis, MajorDelta = 3, MinorDelta = 100&lt;/FONT&gt;&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="814ce23d-e9a2-4eb8-8e51-62de01a38517" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a3049e2-a07f-4fb0-81b3-106f7803db42" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="4ccaa096-a4af-4678-97fa-77fc353b5f57" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="522bb84c-264c-4919-aa66-5f8272a72610" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="965db259-73ff-4df0-b49d-b539f7a304a2" Status="New Topic" CreatedOn="2017-10-24T17:53:07.794567Z" ModifiedOn="2019-08-12T13:55:44.0752407Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ticks - TickProvider and DeltaCalculator API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-12T13:55:44.0752407Z">&lt;P&gt;It is possible to further&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;customize the MajorDelta, MinorDelta&lt;/A&gt; and affect the tick frequency of an axis, to have a totally custom set of axis ticks (gridlines, label intervals) on the chart.&lt;/P&gt;
&lt;P&gt;To use this feature you will need to create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTickProvider.html"&gt;set for axis&lt;/A&gt;.&lt;/P&gt;
&lt;P class=NewStyle2&gt;Creating your own TickProvider&lt;/P&gt;
&lt;P&gt;By default each axis has a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;created and assigned to it. The type of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;depends on the&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;type of Axis&lt;/A&gt;. Below is a table of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;already defined in SciChart Android.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.NumericTickProvider.html"&gt;NumericTickProvider&lt;/A&gt; - used to provide ticks for &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;NumericAxis&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;.
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.LogarithmicNumericTickProvider.html"&gt;LogarithmicNumericTickProvider&lt;/A&gt; - used to provide ticks for &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;LogarithmicNumericAxis&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.DateTickProvider.html"&gt;DateTickProvider&lt;/A&gt; - used to provide ticks for &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;DateAxis&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;.
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.CategoryTickProvider.html"&gt;CategoryTickProvider&lt;/A&gt;– used to provide ticks&amp;nbsp;for&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt;.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;If you create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;, inherit from the correct class above, and override&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.TickProvider~updateTicks.html"&gt;updateTicks()&lt;/A&gt; method which is called internally for every axis when it needs to recalculate major and minor ticks for drawing.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom TickProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomNumericTickProvider extends NumericTickProvider {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void updateTicks(DoubleValues minorTicks, DoubleValues majorTicks) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // fill ticks using default calculations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // or comment this line to generate from scratch&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.updateTicks(minorTicks, majorTicks);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // use properties from axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Comparable majorDelta = axis.getMajorDelta();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Comparable minorDelta = axis.getMinorDelta();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // minor ticks are used to draw minor grid lines&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // major ticks are used to draw major grid lines and tick labels&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minorTicks.add(minorTick);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; majorTicks.add(majorTick);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then to use it just&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTickProvider.html"&gt;set it for axis&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set TickProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final NumericAxis numericAxis = new NumericAxis(context);&lt;/P&gt;
&lt;P&gt;numericAxis.setTickProvider(new CustomNumericTickProvider());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P class=NewStyle2&gt;Creating your own&amp;nbsp;DeltaCalculator&lt;/P&gt;
&lt;P&gt;To have full control over the calculations of MajorDelta and MinorDelta you will need to create a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.IDeltaCalculator.html"&gt;DeltaCalculator&lt;/A&gt;. By default each&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;has a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.IDeltaCalculator.html"&gt;DeltaCalculator&lt;/A&gt; created&amp;nbsp;for it. The type of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.IDeltaCalculator.html"&gt;DeltaCalculator&lt;/A&gt;&amp;nbsp;depends on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;. Below is a table of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.IDeltaCalculator.html"&gt;DeltaCalculator&lt;/A&gt;&amp;nbsp;already defined in SciChart Android.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.NumericDeltaCalculator.html"&gt;NumericDeltaCalculator&lt;/A&gt; - used by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.NumericTickProvider.html"&gt;NumericTickProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.CategoryTickProvider.html"&gt;CategoryTickProvider&lt;/A&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.LogarithmicDeltaCalculator.html"&gt;LogarithmicDeltaCalculator&lt;/A&gt; - used by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.LogarithmicNumericTickProvider.html"&gt;LogarithmicNumericTickProvider&lt;/A&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.DateDeltaCalculator.html"&gt;DateDeltaCalculator&lt;/A&gt; - used by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.DateTickProvider.html"&gt;DateTickProvider&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;First, create a class which extends one of the classes above and use it to create&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.deltaCalculators.IDeltaCalculator.html"&gt;DeltaCalculator&lt;/A&gt;. For example to create custom delta calculator for NumericAxis you can use code like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom DeltaProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomNumericDeltaCalculator extends NumericDeltaCalculator {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IAxisDelta&amp;lt;Double&amp;gt; getDeltaFromRange(Comparable min, Comparable max, int minorsPerMajor, int maxTicks) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double minDouble = ComparableUtil.toDouble(min);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double maxDouble = ComparableUtil.toDouble(max);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double minorDelta = ...;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double majorDelta = ...;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new AxisDelta&amp;lt;&amp;gt;(minorDelta, majorDelta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then to use it to create&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.ITickProvider.html"&gt;TickProvider&lt;/A&gt;&amp;nbsp;and&amp;nbsp;just&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTickProvider.html"&gt;set it for axis&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Use TickProvider with custom DeltaProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final NumericAxis numericAxis = new NumericAxis(context);&lt;/P&gt;
&lt;P&gt;numericAxis.setTickProvider(new NumericTickProvider(new CustomNumericDeltaCalculator()));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2294a48f-459b-464f-9504-aed96c7fda2a" Status="New Topic" CreatedOn="2017-10-24T17:53:49.4781408Z" ModifiedOn="2019-02-12T15:25:33.5913166Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Alignment - Setting Axis Alignment" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T15:25:33.5913166Z">&lt;P&gt;&lt;SPAN&gt;SciChart supports &lt;STRONG&gt;unlimited, multiple X or Y&amp;nbsp;axes&lt;/STRONG&gt; which can be aligned to the&amp;nbsp;Right, Left, Top, Bottom sides of a chart.&amp;nbsp;Axis may be placed by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/ios/v2.x/api/protocol_s_c_i_axis2_d_protocol-p.html#a472dff61e46f0a848e7e48c79cb3331d" target=_blank&gt;AxisCore.axisAlignment&lt;/A&gt; property.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;SPAN&gt;Example&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;&lt;SPAN&gt;Java&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;SPAN&gt;// Create an axis and position it to the top&lt;BR&gt;&lt;/SPAN&gt;&lt;SPAN&gt;IAxis xTopAxis = new NumericAxis(getActivity());&lt;BR&gt;xTopAxis.setAxisId("xTop");&lt;BR&gt;xTopAxis.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;xTopAxis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;sciChartSurface.xAxes.add(xTopAxis);&lt;BR&gt;&lt;BR&gt;// Create an axis and position it to the bottom&lt;BR&gt;IAxis xBottomAxis = new NumericAxis(getActivity());&lt;BR&gt;xBottomAxis.setAxisAlignment(AxisAlignment.Bottom);&lt;BR&gt;xBottomAxis.setAxisId("xBottom");&lt;BR&gt;xBottomAxis.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;xBottomAxis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;sciChartSurface.xAxes.add(xBottomAxis);&lt;BR&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;// Create an axis and position it to the left&lt;BR&gt;IAxis yAxisLeft = new NumericAxis(getActivity());&lt;BR&gt;yAxisLeft.setAxisAlignment(AxisAlignment.Left);&lt;BR&gt;yAxisLeft.setAxisId("yLeft");&lt;BR&gt;yAxisLeft.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;sciChartSurface.yAxes.add(yAxisLeft);&lt;BR&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;// Create an axis and position it to the right&lt;BR&gt;IAxis yAxisRight = new NumericAxis(getActivity());&lt;BR&gt;yAxisRight.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;yAxisRight.setAxisId("yRight");&lt;BR&gt;yAxisRight.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;sciChartSurface.yAxes.add(yAxisRight);&lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;&lt;SPAN&gt;Xamarin&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;SPAN&gt;// Create an axis and position it to the top&lt;BR&gt;IAxis xTopAxis = new NumericAxis(Activity);&lt;BR&gt;xTopAxis.AxisId = "xTop";&lt;BR&gt;xTopAxis.GrowBy = new DoubleRange(0.1, 0.1);&lt;BR&gt;xTopAxis.AxisAlignment = AxisAlignment.Top;&lt;BR&gt;sciChartSurface.XAxes.Add(xTopAxis);&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;BR&gt;// Create an axis and position it to the bottom&lt;BR&gt;IAxis xBottomAxis = new NumericAxis(Activity);&lt;BR&gt;xBottomAxis.AxisId = "xBottom";&lt;BR&gt;xBottomAxis.GrowBy = new DoubleRange(0.1, 0.1);&lt;BR&gt;xBottomAxis.AxisAlignment = AxisAlignment.Bottom;&lt;BR&gt;sciChartSurface.XAxes.Add(xTopAxis);&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;BR&gt;// Create an axis and position it to the left&lt;BR&gt;IAxis yAxisLeft = new NumericAxis(Activity);&lt;BR&gt;yAxisLeft.AxisId = "yLeft";&lt;BR&gt;yAxisLeft.GrowBy = new DoubleRange(0.1, 0.1);&lt;BR&gt;yAxisLeft.AxisAlignment = AxisAlignment.Left;&lt;BR&gt;sciChartSurface.YAxes.Add(yAxisLeft);&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create an axis and position it to the right&lt;BR&gt;IAxis yAxisRight = new NumericAxis(Activity);&lt;BR&gt;yAxisRight.AxisId = "yRight";&lt;BR&gt;yAxisRight.GrowBy = new DoubleRange(0.1, 0.1);&lt;BR&gt;yAxisRight.AxisAlignment = AxisAlignment.Right;&lt;BR&gt;sciChartSurface.YAxes.Add(yAxisRight);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This code results in the following view. Also seen in our&amp;nbsp;&lt;A href="https://www.scichart.com/example/android-chart-example-multiple-xaxis/" target=_blank&gt;Multiple Axis Demo&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;IMG alt="Android Chart multiple axis demo" src="images/AndroidMultiAxis.png"&gt; 
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt; &lt;EM&gt;Every &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; (chart types e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;Line&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;Candlestick&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;Column&lt;/A&gt;) and every &lt;STRONG&gt;Annotation&lt;/STRONG&gt; (Android Views laid over the chart) and some &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; (&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;zoom&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;pan&lt;/A&gt; behaviours) &lt;STRONG&gt;requires to be&lt;/STRONG&gt; measured against/&lt;STRONG&gt;attached to a particular axis&lt;/STRONG&gt;. You have to &lt;STRONG&gt;specify the ID of the axis&amp;nbsp;&lt;/STRONG&gt;for them&amp;nbsp;using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setYAxisId.html"&gt;setYAxisId&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setXAxisId.html"&gt;setXAxisId&lt;/A&gt; methods.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;EM&gt;However, If you have only a &lt;STRONG&gt;single X and Y Axis&lt;/STRONG&gt; you never have to set these &lt;STRONG&gt;ID properties&lt;/STRONG&gt;. This is required only in case of multiple axis.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e00ca150-579a-4496-98b9-70c83ca9a7bb" Status="New Topic" CreatedOn="2016-08-04T12:03:28.8688363Z" ModifiedOn="2019-02-12T15:35:48.9200663Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Alignment - Create a Vertical Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T15:35:48.9200663Z">&lt;P&gt;It is possible to create&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-vertical-charts/"&gt;Vertical (Rotated) Charts&lt;/A&gt;&amp;nbsp;with SciChart. To&amp;nbsp;achieve this, simply set&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setAxisAlignment.html"&gt;AxisAlignment&lt;/A&gt; to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment~Left.html"&gt;Left&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment~Right.html"&gt;Right&lt;/A&gt; for X Axis and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment~Top.html"&gt;Top&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment~Bottom.html"&gt;Bottom&lt;/A&gt; for Y Axis. And that's it - SciChart takes care of the rest:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an axis and position it to the left&lt;/P&gt;
&lt;P&gt;IAxis xAxis = new NumericAxis(getActivity());&lt;BR&gt;xAxis.setAxisAlignment(AxisAlignment.Left);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create an axis and position it to the top&lt;/P&gt;
&lt;P&gt;IAxis yAxis = new NumericAxis(getActivity());&lt;BR&gt;yAxis.setAxisAlignment(AxisAlignment.Top);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/VerticalChart_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Multiple axes support&lt;/H2&gt;
&lt;P&gt;Also,&amp;nbsp;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: 13px "Segoe UI", Verdana, Arial; WIDOWS: 1; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;SciChart supports &lt;STRONG&gt;unlimited, multiple X or Y&amp;nbsp;axes&lt;/STRONG&gt; which can be aligned to the&amp;nbsp;Right, Left, Top, Bottom sides of a chart.&amp;nbsp;More information about the &lt;STRONG&gt;multi-axis feature&lt;/STRONG&gt; can be found in&amp;nbsp;&lt;A href="4e3b9e99-8d41-4edc-ac35-368d459f8c81"&gt;this article&lt;/A&gt;. All t&lt;/SPAN&gt;&lt;SPAN style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: 13px "Segoe UI", Verdana, Arial; WIDOWS: 1; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;hat applies to&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-vertical-charts/"&gt;Vertical (Rotated) Charts&lt;/A&gt; as well, so any reasonable combination of&amp;nbsp;differently aligned axes&amp;nbsp;is allowed. This allows to create &lt;STRONG&gt;mixed horizontal and vertical charts&lt;/STRONG&gt;:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an axis, position it to the left,&lt;/P&gt;
&lt;P&gt;// set the Id and the Title&lt;/P&gt;
&lt;P&gt;IAxis leftXAxis = new NumericAxis(getActivity());&lt;BR&gt;leftXAxis.setAxisAlignment(AxisAlignment.Left);&lt;BR&gt;leftXAxis.setAxisId("LeftXAxis");&lt;BR&gt;leftXAxis.setAxisTitle("Vertical X");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an axis, position it to the bottom,&lt;/P&gt;
&lt;P&gt;// set the Id and the Title&lt;/P&gt;
&lt;P&gt;IAxis bottomXAxis = new NumericAxis(getActivity());&lt;BR&gt;bottomXAxis.setAxisAlignment(AxisAlignment.Bottom);&lt;BR&gt;bottomXAxis.setAxisId("BottomXAxis");&lt;BR&gt;bottomXAxis.setAxisTitle("Horizontal X");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an axis, position it to the top,&lt;/P&gt;
&lt;P&gt;// set the Id and the Title&lt;BR&gt;IAxis topYAxis = new NumericAxis(getActivity());&lt;BR&gt;topYAxis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;topYAxis.setAxisId("TopYAxis");&lt;BR&gt;topYAxis.setAxisTitle("Horizontal Y");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an axis, position it to the right,&lt;/P&gt;
&lt;P&gt;// set the Id and the Title&lt;BR&gt;IAxis rightYAxis = new NumericAxis(getActivity());&lt;BR&gt;rightYAxis.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;rightYAxis.setAxisId("RightYAxis");&lt;BR&gt;rightYAxis.setAxisTitle("Vertical Y");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 285px; WIDTH: 557px" border=0 alt="" src="images/VerticalChartsMulti_framed (1).png" width=768 height=405&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;NOTE:&lt;/STRONG&gt; &lt;EM&gt;Every &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; (chart types e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;Line&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;Candlestick&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;Column&lt;/A&gt;) and every &lt;STRONG&gt;Annotation&lt;/STRONG&gt; (Android Views laid over the chart) and some &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; (&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;zoom&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;pan&lt;/A&gt; behaviours) &lt;STRONG&gt;requires to be&lt;/STRONG&gt; measured against/&lt;STRONG&gt;attached to a particular axis&lt;/STRONG&gt;. You have to &lt;STRONG&gt;specify the ID of the axis&amp;nbsp;&lt;/STRONG&gt;for them&amp;nbsp;using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setYAxisId.html"&gt;setYAxisId&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setXAxisId.html"&gt;setXAxisId&lt;/A&gt; methods.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;EM&gt;However, If you have only a &lt;STRONG&gt;single X and Y Axis&lt;/STRONG&gt; you never have to set these &lt;STRONG&gt;ID properties&lt;/STRONG&gt;. This is required only in case of multiple axis.&lt;/EM&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="cd9e35cf-56a3-4a4f-9013-0e8a95d970d4" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-vertical-charts/" BuildFlags="">
                    <Title m="2016-08-09T15:53:31.9205838Z">Vertical (Rotated) Chart Example</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7df9e34f-c17e-4b2e-9843-f7351e09dd5c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4e3b9e99-8d41-4edc-ac35-368d459f8c81" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="522bb84c-264c-4919-aa66-5f8272a72610" Status="New Topic" CreatedOn="2016-08-12T10:20:48.9449549Z" ModifiedOn="2019-02-12T15:32:16.2528739Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Styling - Styling Title and Axis Labels" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T15:32:16.2528739Z">&lt;P&gt;Every aspect of the axis can be styled, including &lt;STRONG&gt;major and minor gridlines, tick lines,&amp;nbsp;axis labels&lt;/STRONG&gt; and &lt;STRONG&gt;the title&lt;/STRONG&gt;:&lt;/P&gt;&lt;IMG border=0 alt="" src="images/MultiAxesWithTitles_framed.png"&gt; 
&lt;H2&gt;FontStyle&lt;/H2&gt;
&lt;P&gt;In SciChart, almost&amp;nbsp;all styling methods expect an instance of either&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt; to be passed in. Those that deals with text styling, expect an instance of a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;. To learn more about how to utilize them, please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;PenStyle, BrushStyle and FontStyle&lt;/A&gt; article found&amp;nbsp;under the Styling and Theming section.&lt;/P&gt;
&lt;H2&gt;Axis Labels&lt;/H2&gt;
&lt;P&gt;The tick&amp;nbsp;labels can be hidden or shown on an axis via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setDrawLabels.html"&gt;setDrawLabels()&lt;/A&gt; method. To make the labels at edges to&amp;nbsp;always appear inside&amp;nbsp;the axis area, use the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setAutoFitMarginalLabels.html"&gt;setAutoFitMarginalLabels()&lt;/A&gt; method.&lt;/P&gt;
&lt;H2&gt;Styling Axis Labels&lt;/H2&gt;
&lt;P&gt;A &lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;&amp;nbsp;object can be applied to axis labels via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTickLabelStyle.html"&gt;setTickLabelStyle()&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getContext());&lt;/P&gt;
&lt;P&gt;// create a FontStyle object for axis labels&lt;BR&gt;FontStyle labelStyle = new FontStyle(14, ColorUtil.Blue);&lt;/P&gt;
&lt;P&gt;// apply the FontStyle&lt;BR&gt;axis.setTickLabelStyle(labelStyle);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling Axis Title&lt;/H2&gt;
&lt;P&gt;&amp;nbsp;A &lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;&amp;nbsp;object can be applied to the axis title&amp;nbsp;via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setTickLabelStyle.html"&gt;setTitleStyle()&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getContext());&lt;/P&gt;
&lt;P&gt;// create a FontStyle object for the axis title&lt;BR&gt;FontStyle titleStyle = new FontStyle(14, ColorUtil.Blue);&lt;/P&gt;
&lt;P&gt;// apply the FontStyle&lt;BR&gt;axis.setTitleStyle(titleStyle);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Positioning Axis Title&lt;/H2&gt;
&lt;P&gt;There are several options available for positioning the title&amp;nbsp;inside the axis area:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisTitlePlacement.html"&gt;AxisTitlePlacement&lt;/A&gt;&amp;nbsp;- allows placing a title inside or outside&amp;nbsp;the axis area, can be applied via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setAxisTitlePlacement.html"&gt;setAxisTitlePlacement()&lt;/A&gt; method. 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisTitleOrientation.html"&gt;AxisTitleOrientation&lt;/A&gt;&amp;nbsp;- changes the orientation of the title, making it horizontal or vertical. Use the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis~setAxisTitleOrientation.html"&gt;setAxisTitleOrientation()&lt;/A&gt; method for this. 
&lt;LI&gt;Title&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html"&gt;Gravity&lt;/A&gt; - the desired placement of the object, defined using the Android&amp;nbsp;predefined constants. &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="d1c0d60b-f950-4e48-b094-cf7100c9c283" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="31592c33-deb1-4033-b73c-9517599da59a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a3049e2-a07f-4fb0-81b3-106f7803db42" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4a3049e2-a07f-4fb0-81b3-106f7803db42" Status="New Topic" CreatedOn="2016-08-11T13:37:31.8250901Z" ModifiedOn="2019-02-12T15:35:48.9320346Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Styling - Styling Gridlines, Ticks and Axis Bands" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T15:35:48.9320346Z">&lt;P&gt;Every aspect of the Axis can be styled, including Major and Minor Gridlines, Tick Lines, Axis Labels and Axis title.&lt;/P&gt;
&lt;P&gt;The Axis is responsible for drawing the following parts on the chart:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The Axis Labels including Font, Font Size, Color and Rotation angle 
&lt;LI&gt;The Axis Ticks (small marks on the outside of an axis next to labels) 
&lt;LI&gt;The Axis Gridlines (displayed across the centre of the chart) 
&lt;LI&gt;The Axis Bands (shading between major gridlines) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 353px; WIDTH: 686px" border=0 alt="" src="images/MultiAxesStyling_framed.png" width=726 height=383&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Styling Axis Ticks and&amp;nbsp;Gridlines&lt;/H2&gt;
&lt;P&gt;It is important to note&amp;nbsp;a YAxis is responsible for drawing horizontal gridlines as well as bands between gridlines.&lt;/P&gt;
&lt;P&gt;We are going to show how to style the&amp;nbsp;&lt;STRONG&gt;gridline, tick line and axis band&lt;/STRONG&gt;&amp;nbsp;elements in the code sample below.&lt;/P&gt;
&lt;P&gt;Axis Ticks and Gridlines&amp;nbsp;can be styled&amp;nbsp;passing a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; instance into appropriate method:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getContext());&lt;/P&gt;
&lt;P&gt;// create a PenStyle for axis ticks&lt;BR&gt;PenStyle tickStyle = new SolidPenStyle(0xFF279B27, true, 2, null);&lt;/P&gt;
&lt;P&gt;// apply the PenStyle&lt;BR&gt;axis.setMinorTickLineStyle(tickStyle);&lt;BR&gt;axis.setMajorTickLineStyle(tickStyle);&lt;/P&gt;
&lt;P&gt;// create a PenStyle for grid lines&lt;BR&gt;PenStyle gridlineStyle = new SolidPenStyle(0xFF279B27, true, 2, new float[]{10,30});&lt;/P&gt;
&lt;P&gt;// apply the PenStyle&lt;BR&gt;axis.setMajorGridLineStyle(gridlineStyle);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code snippet above a PenStyle is&amp;nbsp;applied&amp;nbsp;to all the axis ticks (major and minor), and&amp;nbsp;the other one is applied to&amp;nbsp;major grid lines only.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;In SciChart, almost&amp;nbsp;all styling methods expect an instance of either&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt; to be passed in. Those that deals with text styling, expect an instance of a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;. To learn more about how to utilize them, please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;PenStyle, BrushStyle and FontStyle&lt;/A&gt; article found&amp;nbsp;under the Styling and Theming section.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling Axis Bands&lt;/H2&gt;
&lt;P&gt;The colored strips between major grid lines are called &lt;STRONG&gt;Axis Bands.&lt;/STRONG&gt; They can be made visible or hidden via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setDrawMajorBands.html"&gt;setDrawMajorBands()&lt;/A&gt;&amp;nbsp;method. The fill can be changed via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setAxisBandsStyle.html"&gt;setAxisBandsStyle()&lt;/A&gt;, that expects a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis axis = new NumericAxis(getContext());&lt;/P&gt;
&lt;P&gt;// show axis bands&lt;BR&gt;axis.setDrawMajorBands(true);&lt;/P&gt;
&lt;P&gt;// create a solid fill brush for axis bands&lt;BR&gt;BrushStyle bandStyle = new SolidBrushStyle(0x22279B27);&lt;/P&gt;
&lt;P&gt;// apply the BrushStyle&lt;BR&gt;axis.setAxisBandsStyle(bandStyle);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5abd8771-8980-4601-a784-d8ecf92105e3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="522bb84c-264c-4919-aa66-5f8272a72610" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5bd5ab44-2abf-45a1-8eba-e6735a4017ea" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.axes.IAxis" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="71de4b19-4e61-4f9d-be5e-9b90bb2587f3" Status="New Topic" CreatedOn="2016-08-10T16:53:27.1832552Z" ModifiedOn="2019-02-12T17:26:22.2668933Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis APIs - Convert Pixel to Data Coordinates" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:26:22.2668933Z">&lt;P&gt;&lt;SPAN&gt;SciChart provides a clean and simple API to transform pixels to data-values and vice versa via the &lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getDataValue.html"&gt;IAxisCore.getDataValue()&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCoordinate.html"&gt;IAxisCore.getCoordinate()&lt;/A&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;methods.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Where Pixel Coordinates are measured from&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;It is important to note when converting Pixels to Data Coordinates and vice versa that pixels are measured from the top-left inside corner of the chart. So, the pixel coordinate (0,0) corresponds to the data-value at (XAxis.&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;getVisibleRange()&lt;/A&gt;.&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMin.html"&gt;getMin(),&lt;/A&gt; YAxis.&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;getVisibleRange()&lt;/A&gt;.&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMax.html"&gt;getMax()&lt;/A&gt;), and the pixel coordinate (Width, Height) corresponds to the data-value at (XAxis.&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;&lt;FONT color=#0066cc&gt;getVisibleRange()&lt;/FONT&gt;&lt;/A&gt;.&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMax.html"&gt;getMax(),&lt;/A&gt; YAxis.&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;getVisibleRange()&lt;/A&gt;.&lt;A href="SciChart.Data~com.scichart.data.model.IRange~getMin.html"&gt;getMin()&lt;/A&gt;),&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;Learn about Axis.VisibleRange and how to get/set this property at the page:&amp;nbsp;&lt;A href="494e52f8-99aa-417d-b80e-819c259dbb08"&gt;Axis Ranging - VisibleRange and DataRange&lt;/A&gt;&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="images/ScatterConvertingCoords.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Converting between Pixels and Data Coordinates&lt;/H2&gt;
&lt;P&gt;Data-values are converted to pixel coordinates via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCoordinate.html"&gt;IAxisCore.&lt;EM&gt;getCoordinate()&lt;/EM&gt;&lt;/A&gt; method. Also, Coordinates in pixels are converted back to chart data-values via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getDataValue.html"&gt;IAxisCore.&lt;EM&gt;getDataValue()&lt;/EM&gt;&lt;/A&gt; method. It expects a coordinate in pixels and returns the closest data value to that coordinate.&lt;/P&gt;
&lt;P&gt;You can find some examples how to do the conversions below.&lt;/P&gt;
&lt;H3&gt;Converting NumericAxis Data to Pixels&lt;/H3&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis xAxis = new NumericAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// the getCoordinate() expects a chart data value and&lt;/P&gt;
&lt;P&gt;// returns the corresponding pixel coordinate&lt;BR&gt;float coord = xAxis.getCoordinate(1.2d);&lt;BR&gt;&lt;BR&gt;// Convert back: &lt;BR&gt;// the getDataValue() expects a coordinate in pixels and returns the closest data value to that coordinate&lt;BR&gt;double dataValue = (Double)xAxis.getDataValue(coord);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Converting DateAxis Data to/from Pixels&lt;/H3&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis xAxis = new DateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;Date date = new Date(1990, 5, 10);&lt;/P&gt;
&lt;P&gt;// the getCoordinate() expects a chart data value and returns the corresponding pixel coordinate&lt;BR&gt;float coord = xAxis.getCoordinate(date);&lt;BR&gt;&lt;BR&gt;// Convert back&lt;BR&gt;// the getDataValue() expects a coordinate in pixels and returns the closest data value to that coordinate&lt;BR&gt;double d = (Double)xAxis.getDataValue(coord);&lt;/P&gt;
&lt;P&gt;Date dataValue = new Date((long)d);&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Converting CategoryDateAxis Data to/from Pixels&lt;/H3&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt; is slightly different. The&amp;nbsp;&lt;SPAN&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCoordinate.html"&gt;&lt;EM&gt;getCoordinate()&lt;/EM&gt;&lt;/A&gt;&lt;/SPAN&gt; method&amp;nbsp;expects an integer, which is the &lt;STRONG&gt;index&amp;nbsp;of a data point&lt;/STRONG&gt; inside a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.DataSeries.html"&gt;DataSeries&lt;/A&gt;. You can convert &lt;A href="https://docs.oracle.com/javase/8/docs/api/java/util/Date.html"&gt;Date&lt;/A&gt;&amp;nbsp;to index and vice versa through the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.labelProviders.ICategoryLabelProvider.html"&gt;ICategoryLabelProvider&lt;/A&gt;&amp;nbsp;as follows:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IAxis xAxis = new CategoryDateAxis(getActivity());&lt;/P&gt;
&lt;P&gt;// get ICategoryLabelProvider to convert Date values to Indexes and vice versa&lt;BR&gt;ICategoryLabelProvider categoryLabelProvider = (ICategoryLabelProvider)xAxis.getLabelProvider();&lt;BR&gt;int index = categoryLabelProvider.transformDataToIndex(new Date(2000, 1, 10));&lt;/P&gt;
&lt;P&gt;// the getCoordinate() expects a data index and returns the corresponding pixel coordinate&lt;BR&gt;float coord = xAxis.getCoordinate(index);&lt;BR&gt;&lt;BR&gt;// Convert back:&lt;BR&gt;// the getDataValue() expects a coordinate in pixels and returns the closest index value to that coordinate&lt;BR&gt;double index = (Double)xAxis.getDataValue(coord );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// get ICategoryLabelProvider to convert Date values to Indexes and vice versa&lt;BR&gt;ICategoryLabelProvider categoryLabelProvider = (ICategoryLabelProvider)xAxis.getLabelProvider();&lt;BR&gt;Date dataValue = categoryLabelProvider.transformIndexToData((int)index);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Transforming Pixels to the Inner Viewport&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;If you subscribe to listen to touch events on a SciChartSurface, the&amp;nbsp;touch&amp;nbsp;coordinates&amp;nbsp;you will receive will be&amp;nbsp;relative to the SciChartSurface itself. Before the &lt;STRONG&gt;Coordinate Transformation API&lt;/STRONG&gt; can be used, it's important to ensure that such&amp;nbsp;coordinates &lt;SPAN&gt;are &lt;STRONG&gt;transformed relative to the viewport&lt;/STRONG&gt; (the central area). The view to translate relative to can be obtained calling&amp;nbsp;either the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getModifierSurface.html"&gt;ISciChartSurface.getModifierSurface()&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getRenderableSeriesArea.html"&gt;ISciChartSurface.getRenderableSeriesArea(),&lt;/A&gt; depending on the context. By default, both&amp;nbsp;occupy the same area, but this can be changed if a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt; is provided:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;IMG border=0 alt="" src="images/MultiYAxes.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;The transformation can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface.html"&gt;ISciChartSurface.&lt;EM&gt;translatePoint()&lt;/EM&gt;&lt;/A&gt; method:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = new SciChartSurface(getActivity());&lt;/P&gt;
&lt;P&gt;surface.setOnTouchListener(new View.OnTouchListener() {&lt;BR&gt;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;public boolean onTouch(View v, MotionEvent event) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // the touch point relative to the SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PointF touchPoint = new PointF(event.getX(), event.getY());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // translate the touch point relative to RenderableSeriesArea or ModifierSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.translatePoint(touchPoint, surface.getRenderableSeriesArea());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //OR surface.translatePoint(touchPoint, surface.getModifierSurface());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // the translated point can be used for looking for data values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double dataValue = (Double)xAxis.getDataValue(touchPoint.x);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return true;&lt;BR&gt;&amp;nbsp;}&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For more information on chart layout customization, please refer to the&amp;nbsp;&lt;A href="0ec125b0-0563-40b0-ba8c-0929f387c6b1"&gt;Placing Axes Central in the Chart&lt;/A&gt; article.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="bdcfbcd7-5f2e-4183-bcef-6414cfca64be" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-hit-test-api/" BuildFlags="">
                    <Title m="2016-08-11T12:45:20.9724756Z">Hit-Test API</Title>
                    <Category m="2016-08-11T12:45:38.464914Z">SciChart Android Examples</Category>
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="0ec125b0-0563-40b0-ba8c-0929f387c6b1" Status="New Topic" CreatedOn="2016-08-04T12:04:20.9722313Z" ModifiedOn="2019-02-12T17:26:22.2848457Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Layout - Placing Axis Central in the Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:26:22.2848457Z">&lt;P&gt;SciChart supports placing axes &lt;STRONG&gt;in the centre of&amp;nbsp;a chart:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 287px; WIDTH: 561px" border=0 alt="" src="images/ShiftedAxes_framed.png" width=717 height=379&gt;&lt;/P&gt;
&lt;H2&gt;The Layout System&lt;/H2&gt;
&lt;P&gt;This requires a customization&amp;nbsp;of the default&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;.&amp;nbsp;This&amp;nbsp;class&amp;nbsp;is responsible&amp;nbsp;for&amp;nbsp;positioning axes&amp;nbsp;on&amp;nbsp;a chart. The layout process&amp;nbsp;&lt;SPAN&gt;consists of&amp;nbsp;two passes for every axis, a &lt;STRONG&gt;measure pass&lt;/STRONG&gt; and a &lt;STRONG&gt;layout pass.&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;&amp;nbsp;conducts this process, doing&amp;nbsp;calculations and&amp;nbsp;providing all the necessary data to its&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy.html"&gt;IAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;fields.&amp;nbsp;Every &lt;SPAN&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy.html"&gt;IAxisLayoutStrategy&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;field&amp;nbsp;handles &lt;FONT color=black&gt;a specific&amp;nbsp;&lt;/FONT&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment.html"&gt;AxisAlignment&lt;/A&gt; &lt;FONT color=black&gt;case and is responsible&amp;nbsp;for placing axes with corresponding&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment.html"&gt;AxisAlignment&lt;/A&gt;&lt;FONT color=black&gt;&amp;nbsp; inside&amp;nbsp;the boundaries provided by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;&lt;/FONT&gt;.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;The layout&amp;nbsp;takes place in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager~onLayoutChart.html"&gt;LayoutManager.onLayoutChart()&lt;/A&gt; method. It orderly calls&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy~measureAxes.html"&gt;IAxisLayoutStrategy.measureAxes()&lt;/A&gt; &lt;SPAN&gt;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy~layoutAxes.html"&gt;outStrategy.layoutAxes()&lt;/A&gt; during the measure and layout passes and &lt;STRONG&gt;returns evaluated viewport size&lt;/STRONG&gt; as&amp;nbsp;the result.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;The layout process is triggered by a&amp;nbsp;SciChartSurface&amp;nbsp;in response to different state changes. It&amp;nbsp;is an essential&amp;nbsp;part of a &lt;STRONG&gt;render process.&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Customizing Layout of Axes&lt;/H2&gt;
&lt;P&gt;Usually you don't need to&amp;nbsp;create a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;, but rather to provide a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy.html"&gt;IAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;for&amp;nbsp;a specific&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisAlignment.html"&gt;AxisAlignment&lt;/A&gt; mode, e.g. for bottom axes layout or right axes layout, or both. It is possible to extend an existing &lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy.html"&gt;IAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;class and change its behavior&amp;nbsp;to&amp;nbsp;better serve&amp;nbsp;your purposes. Please find&amp;nbsp;a list of&amp;nbsp;the&amp;nbsp;existing strategies&amp;nbsp;below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.TopAlignmentOuterAxisLayoutStrategy.html"&gt;TopAlignmentOuterAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.TopAlignmentInnerAxisLayoutStrategy.html"&gt;TopAlignmentInnerAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.BottomAlignmentOuterAxisLayoutStrategy.html"&gt;BottomAlignmentOuterAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.BottomAlignmentInnerAxisLayoutStrategy.html"&gt;BottomAlignmentInnerAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.LeftAlignmentOuterAxisLayoutStrategy.html"&gt;LeftAlignmentOuterAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.LeftAlignmentInnerAxisLayoutStrategy.html"&gt;LeftAlignmentInnerAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.RightAlignmentOuterAxisLayoutStrategy.html"&gt;RightAlignmentOuterAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.RightAlignmentInnerAxisLayoutStrategy.html"&gt;RightAlignmentInnerAxisLayoutStrategy&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Pinned Axes&lt;/H2&gt;
&lt;P&gt;The following code extends the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.TopAlignmentOuterAxisLayoutStrategy.html"&gt;TopAlignmentOuterAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;class and makes&amp;nbsp;the stack of&amp;nbsp;the top-aligned X&amp;nbsp;axes to start exactly at the center of a chart:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private static class CenteredTopAlignmentAxisLayoutStrategy extends TopAlignmentOuterAxisLayoutStrategy {&lt;BR&gt;&amp;nbsp;private int chartAreaWidth, chartAreaHeight;&lt;/P&gt;
&lt;P&gt;@Override&lt;BR&gt;&amp;nbsp;public void measureAxes(int availableWidth, int availableHeight, ChartLayoutState chartLayoutState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.measureAxes(availableWidth, availableHeight, chartLayoutState);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chartAreaWidth = availableWidth;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chartAreaHeight = availableHeight;&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;@Override&lt;BR&gt;&amp;nbsp;public void layoutAxes(int left, int top, int right, int bottom) {&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // pin the stack of the top-aligned X Axes to the center of a chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int topCoord = chartAreaHeight/2;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; layoutFromTopToBottom(left, topCoord, right, axes);&lt;BR&gt;&amp;nbsp;}&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To apply&amp;nbsp;the newly created layout strategy, create a new&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.DefaultLayoutManager.html"&gt;DefaultLayoutManager&lt;/A&gt; instance and set the corresponding field. It can be done using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.DefaultLayoutManager+Builder.html"&gt;DefaultLayoutManager.Builder&lt;/A&gt; helper.&amp;nbsp;Then assign the LayoutManager to a SciChartSurface:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface chart = new SciChartSurface(getActivity());&lt;/P&gt;
&lt;P&gt;chart.setLayoutManager(new DefaultLayoutManager.Builder()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setTopOuterAxesLayoutStrategy(new CenteredTopAlignmentAxisLayoutStrategy())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;In the result, &amp;nbsp;the X Axis should be&amp;nbsp;placed at the center of a chart. It should&amp;nbsp;look&amp;nbsp;very similar to this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CentralXAxis_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Floating Axes&lt;/H2&gt;
&lt;P&gt;Another possible scenario, &lt;STRONG&gt;floating axes&lt;/STRONG&gt;, can be found in the example called&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/"&gt;Shifted Axes&lt;/A&gt;&amp;nbsp;from the SciChart Android Example Suite. In this case each axis&amp;nbsp;is pinned&amp;nbsp;to 0 value of the&amp;nbsp;other axis. To achieve this,&amp;nbsp;the&amp;nbsp;pixel coordinate of 0 data&amp;nbsp;value is looked for during every layout pass, using the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Coordinate Transformation API&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private static class CenteredTopAlignmentAxisLayoutStrategy extends TopAlignmentOuterAxisLayoutStrategy {&lt;BR&gt;&amp;nbsp;private final IAxis yAxis;&lt;/P&gt;
&lt;P&gt;private CenteredTopAlignmentAxisLayoutStrategy(IAxis yAxis) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.yAxis = yAxis;&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;@Override&lt;BR&gt;&amp;nbsp;public void layoutAxes(int left, int top, int right, int bottom) {&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // find the coordinate of 0 on the Y Axis in pixels&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // place the stack of the top-aligned X Axes at this coordinate&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float topCoord = yAxis.getCurrentCoordinateCalculator().getCoordinate(0);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; layoutFromTopToBottom(left, (int) topCoord, right, axes);&lt;BR&gt;&amp;nbsp;}&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;As it can be seen in the example, both axes are&amp;nbsp;pinned to&amp;nbsp;a given&amp;nbsp;data value, not to&amp;nbsp;a specific position inside the chart area. Thus they&amp;nbsp;will adjust their positions&amp;nbsp;accordingly to&amp;nbsp;VisibleRange changes&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/"&gt;Shifted Axes&lt;/A&gt;&amp;nbsp;example&amp;nbsp;to&amp;nbsp;find&amp;nbsp;the&amp;nbsp;complete code sample.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ShiftedAxesPinned_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;For more examples of&amp;nbsp;&lt;STRONG&gt;custom axes layouts&lt;/STRONG&gt;, please refer to the&amp;nbsp;&lt;A href="b1f7b793-a230-44a5-ad59-66a2b8062d2b"&gt;Stack Axes Vertically or Horizontally&lt;/A&gt;&amp;nbsp;article.&lt;A title="Edit this Link" class=DesignItemEdit href="designcommand:name=edit,id='1d33d44c-8fac-465d-a40c-da8ae3f3e15d'"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Advanced Axes Layout Customization&lt;/H2&gt;
&lt;P&gt;For more advanced layout customization&amp;nbsp;it is possible to override the whole layout process. To achieve this,&amp;nbsp;a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;&amp;nbsp;is required with a&amp;nbsp;custom layout process implemented in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager~onLayoutChart.html"&gt;LayoutManager.onLayoutChart()&lt;/A&gt; method.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4a788a02-4aa1-4b48-8fff-226f6c9fc3f3" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-central-xaxis-and-yaxis/" BuildFlags="">
                    <Title m="2016-08-09T16:23:52.0490074Z">Central X and Y Axis Example</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="df02f6f5-497d-4617-b8af-50d37ee6370c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4e3b9e99-8d41-4edc-ac35-368d459f8c81" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e72398dc-f27e-4412-98ff-165dbf62b294" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e00ca150-579a-4496-98b9-70c83ca9a7bb" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="31adbc6f-50b9-4715-be01-d4e2937e6cf3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e5d8202b-6ee5-40b6-aaa3-36bfe6b708a3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.layoutManagers.DefaultLayoutManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1d33d44c-8fac-465d-a40c-da8ae3f3e15d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b1f7b793-a230-44a5-ad59-66a2b8062d2b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b1f7b793-a230-44a5-ad59-66a2b8062d2b" Status="New Topic" CreatedOn="2016-08-10T17:48:20.6265044Z" ModifiedOn="2019-02-12T17:26:22.2968137Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Layout - Stack Axes Vertically or Horizontally" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:26:22.2968137Z">&lt;P&gt;It is possible to make axes to &lt;STRONG&gt;stack up vertically or horizontally&lt;/STRONG&gt;&amp;nbsp;with SciChart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/VerticallyStacked_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;To achieve this, a customization&amp;nbsp;of the&amp;nbsp;default chart layout is required. Please refer to the&amp;nbsp;&lt;A href="AxisAlignment - Placing Axis Central in the Chart.html"&gt;Placing Axis Central in the Chart&lt;/A&gt; article to learn more about the layout processes and&amp;nbsp;ways to&amp;nbsp;customize them.&lt;/P&gt;
&lt;H2&gt;Stacking Axes Vertically&lt;/H2&gt;
&lt;P&gt;In the code snippet below, a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy.html"&gt;IAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;is created for all the left-aligned axes that belong to a chart.&lt;/P&gt;
&lt;P&gt;In the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy~measureAxes.html"&gt;measureAxes()&lt;/A&gt; method override the size of the left axes area is calculated, setting the corresponding field&amp;nbsp;of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisLayoutState.html"&gt;AxisLayoutState&lt;/A&gt;&amp;nbsp;object.&amp;nbsp;It provides a value&amp;nbsp;feedback to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt; after the &lt;STRONG&gt;measure pass&lt;/STRONG&gt; ends.&lt;/P&gt;
&lt;P&gt;In the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy~layoutAxes.html"&gt;layoutAxes()&lt;/A&gt; method override every axis is given a position&amp;nbsp;at the&amp;nbsp;top of the previous one.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private static class LeftAlignedOuterVerticallyStackedYAxisLayoutStrategy extends VerticalAxisLayoutStrategy {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void measureAxes(int availableWidth, int availableHeight, ChartLayoutState chartLayoutState) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0, size = axes.size(); i &amp;lt; size; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis axis = axes.get(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.updateAxisMeasurements();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final AxisLayoutState axisLayoutState = axis.getAxisLayoutState();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chartLayoutState.leftOuterAreaSize = Math.max(getRequiredAxisSize(axisLayoutState), chartLayoutState.leftOuterAreaSize);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void layoutAxes(int left, int top, int right, int bottom) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int size = axes.size();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int height = bottom - top;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int axisSize = height / size;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int topPlacement = top;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; size; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis axis = axes.get(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final AxisLayoutState axisLayoutState = axis.getAxisLayoutState();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int bottomPlacement = topPlacement + axisSize;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.layoutArea(right - getRequiredAxisSize(axisLayoutState), topPlacement, right, bottomPlacement);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; topPlacement = bottomPlacement;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To apply&amp;nbsp;the newly created layout strategy, create a new&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.DefaultLayoutManager.html"&gt;DefaultLayoutManager&lt;/A&gt; instance and set the corresponding field. It can be done using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.DefaultLayoutManager+Builder.html"&gt;DefaultLayoutManager.Builder&lt;/A&gt; helper.&amp;nbsp;Then assign the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager.html"&gt;LayoutManager&lt;/A&gt;&amp;nbsp;to a SciChartSurface:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface chart = new SciChartSurface(getContext());&lt;/P&gt;
&lt;P&gt;// create and configure a DefaultLayoutManager&lt;BR&gt;DefaultLayoutManager layoutManager = new DefaultLayoutManager.Builder()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .setLeftOuterAxesLayoutStrategy(new LeftAlignedOuterVerticallyStackedYAxisLayoutStrategy())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// assign it to the chart&lt;BR&gt;chart.setLayoutManager(layoutManager);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;To full code sample can be found in the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-example-vertically-stacked-yaxes/"&gt;Vertically Stacked Y Axes&lt;/A&gt;&amp;nbsp;example. For more examples of&amp;nbsp;&lt;STRONG&gt;custom axes layouts&lt;/STRONG&gt;, please refer to the&amp;nbsp;&lt;A href="AxisAlignment - Placing Axis Central in the Chart.html"&gt;Placing Axis Central in the Chart&lt;/A&gt;&amp;nbsp;article.&lt;A title="Edit this Link" class=DesignItemEdit href="designcommand:name=edit,id='1d33d44c-8fac-465d-a40c-da8ae3f3e15d'"&gt;&lt;/A&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="f30514f2-583e-4f20-8897-adba2ee5ff2d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.layoutManagers.ILayoutManager" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8a625b15-1549-4c98-aab9-cc0a0f32943b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.layoutManagers.IAxisLayoutStrategy" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="56c68848-2ffe-4073-ae7b-2913d6585691" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0ec125b0-0563-40b0-ba8c-0929f387c6b1" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f295dadb-831c-4f5b-b681-21e41933cd3f" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="http://www.scichart.com/android-chart-example-vertically-stacked-yaxes/" BuildFlags="">
                    <Title m="2016-08-10T18:20:37.8424774Z">Vertically Stacked Y Axes</Title>
                    <Category m="2016-08-10T18:20:56.5422229Z">SciChart Examples Suite</Category>
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4144928b-eab7-437b-a445-9b549ecb52b7" Status="New Topic" CreatedOn="2019-08-12T13:39:36.3698216Z" ModifiedOn="2019-08-12T13:52:35.9519746Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ticks - TickCoordinatesProvider API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-12T13:52:35.9519746Z">&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickCoordinatesProviders.ITickCoordinatesProvider.html"&gt;TickCoordinatesProvider API&lt;/A&gt; is a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getTickCoordinatesProvider.html"&gt;part of Axis&lt;/A&gt; which is responsible for converting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickProviders.AxisTicks.html"&gt;AxisTicks&lt;/A&gt; provided by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getTickProvider.html"&gt;TickProvider&lt;/A&gt; into coordinates on screen.&lt;/P&gt;
&lt;P&gt;By default each axis uses&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickCoordinatesProviders.DefaultTickCoordinatesProvider.html"&gt;DefaultTickCoordinatesProvider&lt;/A&gt; which just converts data ticks into pixel coordinates using&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCurrentCoordinateCalculator.html"&gt;ICoordinatesCalculator&lt;/A&gt; provided by axis. If you want to customize this process you can extend this class and override&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickCoordinatesProviders.DefaultTickCoordinatesProvider~update.html"&gt;update()&lt;/A&gt; to update&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.numerics.tickCoordinatesProviders.TickCoordinates.html"&gt;TickCoordinates&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom TickCoordinatesProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomTickCoordinatesProvider extends DefaultTickCoordinatesProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void update() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.update();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final TickCoordinates tickCoordinates = getTickCoordinates();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // majorTickCoords contains coordinates of major ticks on screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // minorTickCoords contains coordinates of minor ticks on screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final FloatValues majorTickCoords = tickCoordinates.getMajorTickCoordinates();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final FloatValues minorTickCoords = tickCoordinates.getMinorTickCoordinates();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting of CustomTickCoordinatesProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final NumericAxis numericAxis = new NumericAxis(context);&lt;BR&gt;numericAxis.setTickCoordinatesProvider(new CustomTickCoordinatesProvider());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="838239f7-4111-40cd-bb24-13d54e97eb4d" Status="New Topic" CreatedOn="2019-08-16T13:29:54.2875879Z" ModifiedOn="2019-08-16T13:56:00.3227206Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Types ( Value Axis vs Category Axis )" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-16T13:56:00.3227206Z">&lt;P&gt;SciChart Android 2D&amp;nbsp;features several axis types. All inherit from&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisBase.html"&gt;AxisBase&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;What is a Value Axis vs. a Category Axis?&lt;/H2&gt;
&lt;P&gt;SciChart Android features both Value Axis and Category Axis types. An explanation of these is given below:&lt;/P&gt;
&lt;P&gt;Given the data&lt;/P&gt;
&lt;TABLE class=MsoNormalTable style="WIDTH: 210.15pt; BORDER-COLLAPSE: collapse; MARGIN-LEFT: -0.75pt; mso-yfti-tbllook: 1184; mso-padding-alt: 0cm 5.4pt 0cm 5.4pt" cellSpacing=0 cellPadding=0 width=280 border=0&gt;
&lt;TBODY&gt;
&lt;TR style="HEIGHT: 15pt; mso-yfti-irow: 0; mso-yfti-firstrow: yes"&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 66.15pt; BORDER-BOTTOM: 1pt solid; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-bottom-alt: solid windowtext .5pt; mso-border-right-alt: solid windowtext .5pt" vAlign=bottom width=88 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal"&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;Age (XAxis)&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: 1pt solid; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-bottom-alt: solid windowtext .5pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal"&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;Cats&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: 1pt solid; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-bottom-alt: solid windowtext .5pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal"&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;Dogs&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: medium none; WIDTH: 48pt; BORDER-BOTTOM: 1pt solid; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-bottom-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; LINE-HEIGHT: normal"&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;Fish&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR style="HEIGHT: 15pt; mso-yfti-irow: 1"&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 66.15pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" vAlign=bottom width=88 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;1&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;7&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;7&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="HEIGHT: 15pt; WIDTH: 48pt; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; PADDING-RIGHT: 5.4pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;8&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR style="HEIGHT: 15pt; mso-yfti-irow: 2"&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 66.15pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt" vAlign=bottom width=88 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;9&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;6&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;5&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="HEIGHT: 15pt; WIDTH: 48pt; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; PADDING-RIGHT: 5.4pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;7&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR style="HEIGHT: 15pt; mso-yfti-irow: 3"&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 66.15pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt" vAlign=bottom width=88 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;10&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;5&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;4&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="HEIGHT: 15pt; WIDTH: 48pt; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; PADDING-RIGHT: 5.4pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;3&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR style="HEIGHT: 15pt; mso-yfti-irow: 4; mso-yfti-lastrow: yes"&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 66.15pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt" vAlign=bottom width=88 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;20&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;4&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: medium none; HEIGHT: 15pt; BORDER-RIGHT: 1pt solid; WIDTH: 48pt; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; BORDER-LEFT: medium none; PADDING-RIGHT: 5.4pt; mso-border-right-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;3&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD style="HEIGHT: 15pt; WIDTH: 48pt; PADDING-BOTTOM: 0cm; PADDING-TOP: 0cm; PADDING-LEFT: 5.4pt; PADDING-RIGHT: 5.4pt; mso-border-left-alt: solid windowtext .5pt" vAlign=bottom width=64 noWrap&gt;
&lt;P class=MsoNormal style="MARGIN-BOTTOM: 0pt; TEXT-ALIGN: right; LINE-HEIGHT: normal" align=right&gt;&lt;SPAN lang=EN-GB style='COLOR: black; mso-ascii-font-family: Calibri; mso-fareast-font-family: "Times New Roman"; mso-hansi-font-family: Calibri; mso-bidi-font-family: "Times New Roman"; mso-fareast-language: EN-GB' xml:lang="EN-GB"&gt;2&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;A Value X-Axis and Category X-Axis would display the data differently:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CategoryAxis.png"&gt;&lt;IMG border=0 alt="" src="images/ValueAxis.png"&gt;&lt;/P&gt;
&lt;P&gt;The fundamental difference is a Value-Axis uses the X-Value to compute distance on the XAxis, whereas a Category-Axis uses the X-Index. Value-Axis are primarily used in scientific software where Categor –Axis are typically used in financial software (e.g. stock charts).&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Axis Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Value or Category Axis&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.NumericAxis.html"&gt;NumericAxis&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.LogarithmicNumericAxis.html"&gt;LogarithmicNumericAxis&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.DateAxis.html"&gt;DateAxis&lt;/A&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.CategoryDateAxis.html"&gt;CategoryDateAxis&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Category Axis&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="29ad58ab-4973-4c28-b9c9-7b17a52919a4" AutoIndex="false">
            <Caption m="2016-09-02T09:12:07.2958535Z">2D Chart Types</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="b8ff5657-2f4f-472a-80c0-35af00c032d4" AutoIndex="false">
                <Caption m="2016-09-02T09:12:51.2631221Z">Renderable Series APIs</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="172addbf-995e-4705-9f7d-535415ab322a" Status="New Topic" CreatedOn="2016-09-02T09:34:03.7440005Z" ModifiedOn="2019-08-12T10:37:06.2360859Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What is a RenderableSeries" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-12T10:37:06.2360859Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;in SciChart are visual representations of &lt;STRONG&gt;X,Y Numeric&lt;/STRONG&gt; or &lt;STRONG&gt;Date&lt;/STRONG&gt; data. Some RenderableSeries render simple X,Y values (2D points in space), while some render additional information (such as X,Y0,Y1 values, or X,Y,Z values).&lt;/P&gt;
&lt;P&gt;RenderableSeries all inherit&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;and are&amp;nbsp;added&amp;nbsp;to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.RenderableSeriesCollection.html"&gt;RenderableSeriesCollection&lt;/A&gt; of a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;. This collection supports multiple RenderableSeries of differing types. Each RenderableSeries is rendered to the screen, displaying the data from an associated&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.IDataSeries.html"&gt;DataSeries&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;To learn more about&amp;nbsp;the&amp;nbsp;features all RenderableSeries have in common, please read the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt; article. For specific&amp;nbsp;features of any RenderableSeries&amp;nbsp;please refer to&amp;nbsp;a corresponding article on this series type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To get an understanding about RenderableSeries / DataSeries quickly, try our&amp;nbsp;&lt;A href="fae1bf5c-55ce-464c-aea8-8ebc45a065e6"&gt;Tutorial on adding data to SciChart&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Also, for more information about which DataSeries are used for which RenderableSeries, see the&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries Types&lt;/A&gt; page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="965a5ee6-ff7d-40b4-9ff8-198c73bbaeee" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e280ed77-6cc5-49cd-84be-ecd143139ca6" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1353ea76-0fcb-4f1c-ad30-cb74085eea2b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="7638b057-5d02-474b-8642-d232115f0ead" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="246d21d0-3b1b-4840-be7b-33bc0066e0e1" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="4fac0b05-882b-4a04-9d99-019dbd5c822d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5693b2a-3d41-4603-b249-8594512d1604" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="f83a131d-1767-4062-b118-fbbad3ab4c91" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b2fc10ad-2614-414b-a173-bed16255aa6f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2b99a8ee-26f5-4c68-a538-72440ef96be0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="7024de12-2cfe-47cd-af38-0e9857df82f5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="204332aa-96b3-40e5-972c-3078640db919" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="f05189b6-f951-4f1e-8b7a-3bad4ee52981" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="24d13db2-562d-4d3a-a86e-583e70608a27" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="dd63d4b4-6253-41cc-80bd-280109b59aae" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="6139d2e5-f098-4674-99e5-581141312bf5" Status="New Topic" CreatedOn="2016-09-02T09:36:54.0487028Z" ModifiedOn="2019-02-12T17:38:10.9174287Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common RenderableSeries Features" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T17:38:10.9174287Z">&lt;P&gt;All 2D series types in SciChart Android implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries.html"&gt;IRenderableSeries&lt;/A&gt; interface. These are called &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and are visual representation of X,Y data. Please refer to the&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;What is a RenderableSeries&lt;/A&gt; article for the complete&amp;nbsp;list of all the series types available out of the box in SciChart.&lt;/P&gt;
&lt;H1&gt;Common RenderableSeries APIs&lt;/H1&gt;
&lt;P&gt;One of the&amp;nbsp;main features of RenderableSeries API is its extensibility. New series types can be created via the&amp;nbsp;&lt;A href="6d291a82-3990-4a2e-9156-3c71562adc4a"&gt;Custom RenderableSeries API&lt;/A&gt;. The list of other features shared by&amp;nbsp;all the series&amp;nbsp;types can be found below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD style="VERTICAL-ALIGN: middle" width=643&gt;
&lt;P align=left&gt;&lt;STRONG&gt;IRenderableSeries Features&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=left&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getDataSeries.html"&gt;getDataSeries()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setDataSeries.html"&gt;setDataSeries()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A&amp;nbsp;DataSeries is the data-source for a RenderableSeries. Please see the DataSeries API section for a complete walkthrough of&amp;nbsp;the DataSeries API.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~getIsVisible.html"&gt;getIsVisible()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~setIsVisible.html"&gt;setIsVisible()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to hide or show a series.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~getIsSelected.html"&gt;getIsSelected()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~setIsSelected.html"&gt;setIsSelected()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A series can be made Selected to be drawn on the top of other RenderableSeries. Also,&amp;nbsp;the series can&amp;nbsp;alter its&amp;nbsp;appearance in response to changes in the selection state. Please refer to the &lt;A href="18b07bb4-d65f-4417-a954-4fb58a308818"&gt;SeriesSelectionModifier&lt;/A&gt;&amp;nbsp;article for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getPointMarker.html"&gt;getPointMarker()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPointMarker.html"&gt;setPointMarker()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;This feature lets you set an optional marker on data points, e.g. Ellipse, Square, Triangle or&amp;nbsp;a custom shape.&amp;nbsp;Its usage is&amp;nbsp;described minutely in the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarker API&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getResamplingMode.html"&gt;getResamplingMode()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setResamplingMode.html"&gt;setResamplingMode()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to choose a particular&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingMode&lt;/A&gt; for a series, which&amp;nbsp;specifies&amp;nbsp;a way&amp;nbsp;to&amp;nbsp;reduce the DataSeries for drawing. For more details, see the&amp;nbsp;&lt;A href="c13e369f-7271-45b5-ae7f-6214bbb417c2"&gt;Data Resampling&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getPaletteProvider.html"&gt;getPaletteProvider()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;setPaletteProvider()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; allows changing the color of a series on a per-point basis. Please see the PaletteProvider API article for more information.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getStrokeStyle.html"&gt;getStrokeStyle()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setStrokeStyle.html"&gt;setStrokeStyle()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to assign an&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;object&amp;nbsp;to determine how the series' outline should be drawn. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getSeriesInfoProvider.html"&gt;getSeriesInfoProvider()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setSeriesInfoProvider.html"&gt;setSeriesInfoProvider()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;customize&amp;nbsp;the result of inspection of a series by&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;Chart Modifiers&lt;/A&gt;. Also&amp;nbsp;can be used to specify&amp;nbsp;how modifiers tooltips have to appear for this series. Please refer to the Cursors and&amp;nbsp;Tooltips section for more info.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getSelectedSeriesStyle.html"&gt;getSelectedSeriesStyle()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setSelectedSeriesStyle.html"&gt;setSelectedSeriesStyle()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to change the appearance of a series when its selection status changes. Please refer to the&amp;nbsp;&lt;A href="18b07bb4-d65f-4417-a954-4fb58a308818"&gt;SeriesSelectionModifier&lt;/A&gt; article to learn more about this.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getXAxisId.html"&gt;getXAxisId()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;In case of multi axis, allows to attach a series to a specific&amp;nbsp;X axis.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=643&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~getYAxisId.html"&gt;getYAxisId()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;In case of multi axis, allows to attach a series to a specific Y axis.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=637&gt;
&lt;P align=left&gt;&lt;STRONG&gt;IRenderableSeries Event Listeners&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=left&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=637&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~addIsSelectedChangeListener.html"&gt;addIsSelectedChangeListener() /&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~removeIsSelectedChangeListener.html"&gt;removeIsSelectedChangeListener()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to attach a listener to a series which will be called when&amp;nbsp;it becomes selected/deselected. This can&amp;nbsp;occur when the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~setIsSelected.html"&gt;setIsSelected()&lt;/A&gt; method is called. See the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.RenderableSeriesChangeListener.html"&gt;RenderableSeriesChangeListener&lt;/A&gt; interface.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=637&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~addIsVisibleChangeListener.html"&gt;addIsVisibleChangeListener()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~removeIsVisibleChangeListener.html"&gt;removeIsVisibleChangeListener()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to attach a listener to a series which will be called when&amp;nbsp;its visibility changes. This can&amp;nbsp;occur when the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeriesBase~setIsVisible.html"&gt;setIsVisible()&lt;/A&gt; method is called. See the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.RenderableSeriesChangeListener.html"&gt;RenderableSeriesChangeListener&lt;/A&gt; interface.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=636&gt;
&lt;P align=left&gt;&lt;STRONG&gt;BaseRenderableSeries Features&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=left&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=636&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~getZeroLineY.html"&gt;getZeroLineY()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setZeroLineY.html"&gt;setZeroLineY()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies the&amp;nbsp;minimum Y value&amp;nbsp;which is considered as an up value. Any part of a series which contains values that are&amp;nbsp;above&amp;nbsp;this value&amp;nbsp;will be drawn upwards.&amp;nbsp;Any part of the series with values&amp;nbsp;below&amp;nbsp;it will be drawn&amp;nbsp;downwards.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=636&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~getDrawNaNAs.html"&gt;getDrawNaNAs()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setDrawNaNAs.html"&gt;setDrawNaNAs()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies how&amp;nbsp;data points with&amp;nbsp;NaN Y values are rendered within a given series type.&amp;nbsp;In SciChart,&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/lang/Double.html#NaN"&gt;Double.NaN&lt;/A&gt; or&amp;nbsp;&lt;A href="https://docs.oracle.com/javase/7/docs/api/java/lang/Float.html#NaN"&gt;Float.NaN&lt;/A&gt;&amp;nbsp;is treated as a special value which designates an empty point. It is rendered as a gap within a series. For some chart types, though, the ends of&amp;nbsp;the gap&amp;nbsp;can be connected with a line. See the next paragraph for more details.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;For more comprehensive walkthrough into any feature, please&amp;nbsp;find a corresponding article in the list below. To learn more about the specifics of any series type, please refer to articles on that series type. The list of the series types available out of the box can be found in the&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;What is a RenderableSeries&lt;/A&gt;&amp;nbsp;article.&lt;/P&gt;
&lt;H2&gt;Adding a Gap onto a RenderableSeries&lt;/H2&gt;
&lt;P&gt;There is a special value reserved for this purpose in SciChart, &lt;STRONG&gt;Double.NaN&lt;/STRONG&gt; or &lt;STRONG&gt;Float.NaN&lt;/STRONG&gt;. If&amp;nbsp;the Y value of a data point is equal to&amp;nbsp;the NaN value, a series will render an empty space at this place, equal to the width of a single series&amp;nbsp;bar:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/GapsInCandlesticks_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Some chart types, such as&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt; or&amp;nbsp;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeries&lt;/A&gt;,&amp;nbsp;allow to configure how gaps appear on a series via the &lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method.&amp;nbsp;Please&amp;nbsp;see the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;LineDrawMode&lt;/A&gt; enumeration for more info.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="6c0a062b-0f5f-4ef1-a450-24c36582a6e7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="cd441c93-f483-4657-954d-5268c451ad33" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:47:01.5099758Z">Renderable Series APIs</Category>
                      </TopicLink>
                      <TopicLink Id="19aae0ba-0095-4da2-9a95-4e03489869fc" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:47:18.7582306Z">Renderable Series APIs</Category>
                      </TopicLink>
                      <TopicLink Id="47a46dc7-10e8-4b30-83a0-819cf287b620" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:47:27.7344459Z">Renderable Series APIs</Category>
                      </TopicLink>
                      <TopicLink Id="2580536c-c3bf-4411-893b-2246a29aaa7f" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="6d291a82-3990-4a2e-9156-3c71562adc4a" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:47:38.6381379Z">Renderable Series APIs</Category>
                      </TopicLink>
                      <TopicLink Id="f6868230-3951-4841-a091-05de3d3ac996" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="f7b4ddd1-9588-4090-bda7-1d3edc1bbd0e" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:48:28.7985136Z">Renderable Series APIs</Category>
                      </TopicLink>
                      <TopicLink Id="3bca3046-d8d2-4779-a87a-4e5e48889d3f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c13e369f-7271-45b5-ae7f-6214bbb417c2" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="ee6093db-1eb7-4221-8866-6505a150083f" Status="New Topic" CreatedOn="2016-09-02T09:35:00.2020569Z" ModifiedOn="2019-02-12T18:52:57.9475467Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PointMarker API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T18:52:57.9475467Z">&lt;P&gt;This article detail how to configure a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;to render&amp;nbsp;markers for every data point.&lt;/P&gt;
&lt;H2&gt;What is a PointMarker?&lt;/H2&gt;
&lt;P&gt;The PointMarkers&amp;nbsp;feature allows to annotate the data points of a certain series with markers, e.g. &lt;STRONG&gt;Ellipse&lt;/STRONG&gt;, &lt;STRONG&gt;Square&lt;/STRONG&gt;, &lt;STRONG&gt;Triangle&lt;/STRONG&gt;&amp;nbsp;or a &lt;STRONG&gt;custom shape&lt;/STRONG&gt; marker. Some series types, such as&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries.html"&gt;XyScatterRenderableSeries&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastImpulseRenderableSeries.html"&gt;FastImpulseRenderableSeries&lt;/A&gt;, require a&amp;nbsp;PointMarker assigned to them&amp;nbsp;lest they&amp;nbsp;will not&amp;nbsp;render at all.&lt;/P&gt;
&lt;H2&gt;PointMarker Types&lt;/H2&gt;
&lt;P&gt;The list of the PointMarker types available out of the box can be found below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.EllipsePointMarker.html"&gt;EllipsePointMarker&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.TrianglePointMarker.html"&gt;TrianglePointMarker&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SquarePointMarker.html"&gt;SquarePointMarker&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.CrossPointMarker.html"&gt;CrossPointMarker&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker.html"&gt;SpritePointMarker&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The following screenshot demonstrates how&amp;nbsp;all these appear on a chart with multiple&amp;nbsp;Line Series:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UsePointMarkers_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;It is possible to change how&amp;nbsp;point markers appears by extending any of the above classes. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker.html"&gt;SpritePointMarker&lt;/A&gt; allows to render&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/drawable/Drawable.html"&gt;Drawables&lt;/A&gt;&amp;nbsp;as point markers. For more details, refer to the Custom PointMarkers&amp;nbsp;section down the page.&lt;/P&gt;
&lt;H2&gt;PointMarker Styling&lt;/H2&gt;
&lt;P&gt;All the PointMarker types implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;IPointMarker&lt;/A&gt; interface.&amp;nbsp;It&amp;nbsp;provides the following&amp;nbsp;styling options:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=337&gt;
&lt;P&gt;&lt;STRONG&gt;Method or Property&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=337&gt;
&lt;P&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~setSize.html"&gt;setSize()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~getWidth.html"&gt;getWidth()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~getHeight.html"&gt;getHeight()&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Allows to&amp;nbsp;specify the size of a PointMarker. PointMarkers will not appear if this value isn't set. The units are DIP (Device Independent Pixels).&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=337&gt;
&lt;P&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~setFillStyle.html"&gt;setFillStyle()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~getFillStyle.html"&gt;getFillStyle()&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Specifies a fill brush&amp;nbsp;of&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt;&amp;nbsp;type. It contains information about the fill&amp;nbsp;Color and the desired type of visual output. Please see the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;&lt;FONT color=#0066cc&gt;PenStyle, BrushStyle and FontStyle&lt;/FONT&gt;&lt;/A&gt; article to&amp;nbsp;find out&amp;nbsp;more.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=337&gt;
&lt;P&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~setStrokeStyle.html"&gt;setStrokeStyle()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker~getStrokeStyle.html"&gt;getStrokeStyle()&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Specifies a stroke pen of&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;type. It contains information about the Color, Stroke Thickness, etc. Please see the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;&lt;FONT color=#0066cc&gt;PenStyle, BrushStyle and FontStyle&lt;/FONT&gt;&lt;/A&gt; article to&amp;nbsp;find out&amp;nbsp;more.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Using PointMarkers&lt;/H2&gt;
&lt;P&gt;Code for creation and assigning a PointMarker to a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;is essentially the same&amp;nbsp;regardless&amp;nbsp;of a&amp;nbsp;PointMarker&amp;nbsp;type. After an instance of&amp;nbsp;it has been created, it can be configured and then applied to&amp;nbsp;the RenderableSeries via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPointMarker.html"&gt;setPointMarker()&lt;/A&gt;&lt;/EM&gt; method:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;pointMarker.setFillStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to a LineSeries&lt;BR&gt;IRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;lineSeries.setPointMarker(pointMarker);&lt;/P&gt;
&lt;P&gt;// Set Stroke Thickness and Color to the LineSeries&lt;BR&gt;lineSeries.setStrokeStyle(new SolidPenStyle(ColorUtil.Blue, true, 4f, null));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code will&amp;nbsp;produce the following chart (assuming that the data has been added to the&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;LineSeries&lt;/A&gt;):&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/PointMarkers_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Custom PointMarkers&lt;/H2&gt;
&lt;P&gt;There are two ways of creating custom PointMarkers in SciChart. The first one&amp;nbsp;involves using our&amp;nbsp;&lt;A href="2e02ad3c-378c-4512-9b05-49a6b0f0fa61"&gt;RenderContext2D API&lt;/A&gt; for drawing, and the second&amp;nbsp;allows to use&amp;nbsp;Android drawing capabilities.&lt;/P&gt;
&lt;H3&gt;Extend&amp;nbsp;DrawablePointMarkers&lt;/H3&gt;
&lt;P&gt;This technique requires&amp;nbsp;extending the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.DrawablePointMarker.html"&gt;DrawablePointMarker&lt;/A&gt; class and overridding the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.DrawablePointMarker~internalDraw.html"&gt;&lt;EM&gt;internalDraw()&lt;/EM&gt;&lt;/A&gt; method.&amp;nbsp;It is called for every data point in a series.&amp;nbsp;In the implementation, a PointMarker can be drawn&amp;nbsp;calling methods from&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D.html"&gt;IRenderContext2D&lt;/A&gt;. The code below demonstrates how &lt;STRONG&gt;custom EllipsePointMarker&lt;/STRONG&gt; can be created&amp;nbsp;using this approach:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;private final class EllipsePointMarker extends DrawablePointMarker {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalDraw(IRenderContext2D renderContext, float x, float y, IPen2D strokePen, IBrush2D fillBrush) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(x, y, getWidth(), getHeight(), strokePen, fillBrush);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;However, the&amp;nbsp;&lt;A href="2e02ad3c-378c-4512-9b05-49a6b0f0fa61"&gt;RenderContext2D API&lt;/A&gt;&amp;nbsp;has its own limitations. It isn't suitable for drawing complex custom shapes. Besides, calling drawing methods for every data point is redundant and actually&amp;nbsp;overkill. So the&amp;nbsp;second technique, described in the following paragraph,&amp;nbsp;&amp;nbsp;is better suited for most cases.&lt;/P&gt;
&lt;H3&gt;Implement ISpritePointMarkerDrawer&lt;/H3&gt;
&lt;P&gt;This approach is rather different. It allows to&amp;nbsp;draw a shape on&amp;nbsp;&lt;A href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#draw-with-canvas"&gt;Android Canvas&lt;/A&gt;&amp;nbsp;with&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Paint.html"&gt;Android Paint&lt;/A&gt;&amp;nbsp;objects. Then, a sprite is created out of the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Canvas.html"&gt;Canvas&lt;/A&gt;, which is rendered for every data point in a series. This requires implementing&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker+ISpritePointMarkerDrawer~onDraw.html"&gt;&lt;EM&gt;onDraw()&lt;/EM&gt;&lt;/A&gt; method of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker+ISpritePointMarkerDrawer.html"&gt;ISpritePointMarkerDrawer&lt;/A&gt; interface and passing in&amp;nbsp;an instance of it to&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker~_ctor.html"&gt;SpritePointMarker's constructor&lt;/A&gt;, as follows:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Implement the ISpritePointMarkerDrawer interface&lt;/P&gt;
&lt;P&gt;private class CustomPointMarkerDrawer implements SpritePointMarker.ISpritePointMarkerDrawer {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final Drawable drawable;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private CustomPointMarkerDrawer(Context context, @DrawableRes int drawableId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.drawable = context.getResources().getDrawable(drawableId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onDraw(Canvas canvas, Paint stroke, Paint fill) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Render the drawable on a Canvas&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawable.draw(canvas);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then a new instance of &lt;STRONG&gt;CustomPointMarkerDrawer&lt;/STRONG&gt; is created and passed in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.SpritePointMarker~_ctor.html"&gt;SpritePointMarker's constructor&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;//&amp;nbsp;Create a SpritePointMarker&amp;nbsp;out of&amp;nbsp;a&amp;nbsp;CustomPointMarkerDrawer&lt;/P&gt;
&lt;P&gt;IPointMarker&amp;nbsp;spritePointMarker = new SpritePointMarker(new CustomPointMarkerDrawer(getActivity(), R.drawable.my_point_marker_image));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to a LineSeries&lt;BR&gt;&amp;nbsp;IRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;&amp;nbsp;lineSeries.setPointMarker(pointMarker);&lt;/P&gt;
&lt;P&gt;// Set Stroke Thickness and Color to the LineSeries&lt;BR&gt;&amp;nbsp;lineSeries.setStrokeStyle(new SolidPenStyle(ColorUtil.Blue, true, 4f, null));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above, an&amp;nbsp;&lt;A href="https://developer.android.com/guide/topics/graphics/2d-graphics.html#drawables"&gt;Android Drawable&lt;/A&gt; object&amp;nbsp;is passed in to be used as&amp;nbsp;the PointMarker for a series:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SpritePointMarker_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The complete code sample can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-using-pointmarkers/"&gt;Use Point Markers&lt;/A&gt; example from the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-examples/"&gt;SciChart Android Examples Suite&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;PointMarkerBuilder Helper&lt;/H2&gt;
&lt;P&gt;To simplify PointMarker creation, SciChart provides a bunch of&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;helper Builder Classes&lt;/A&gt;.&amp;nbsp;Their usage can be benefitial in many ways.&amp;nbsp;For instance, there is no need to create&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt; instances&amp;nbsp;explicitly&amp;nbsp;for PointMarker styling:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an Ellipse PointMarker, with given Fill and Stroke colors&lt;/P&gt;
&lt;P&gt;final EllipsePointMarker pointMarker = sciChartBuilder.newPointMarker(new EllipsePointMarker())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(15, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.argb(255, 176, 196, 222), 2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.argb(255, 70, 130, 180))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;// Create a Scatter RenderableSeries and apply the PointMarker&lt;/P&gt;
&lt;P&gt;final IRenderableSeries rs1 = sciChartBuilder.newScatterSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="4e979f59-f846-4841-91ad-79bc5e8d4934" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="90bcc30d-0d74-43bb-b3d8-5e0b46b84de5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="098cf6a2-968b-4049-b257-9f5cef3523d0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="24d13db2-562d-4d3a-a86e-583e70608a27" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9a7edde1-1f26-4598-8dd9-e20a0f661316" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e867960c-d131-4a76-98bf-51583f4d5f59" Status="New Topic" CreatedOn="2016-09-02T09:37:21.5814059Z" ModifiedOn="2019-02-12T17:41:34.1152416Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PaletteProvider API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T17:41:34.1152416Z">&lt;H2&gt;What is&amp;nbsp;a PaletteProvider?&lt;/H2&gt;
&lt;P&gt;PaletteProvider is an&amp;nbsp;API that&amp;nbsp;allows to change series color on a point-to-point basis:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UsePaletteProvider_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using&amp;nbsp;PaletteProviders&lt;/H2&gt;
&lt;P&gt;To enable series coloring with PaletteProvider, you need to create a class which implements either&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;, or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;IFillPaletteProvider&lt;/A&gt;, or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IPointMarkerPaletteProvider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt;, or all of them.&amp;nbsp;A choice depends on a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries type&lt;/A&gt; which PaletteProvider is planned for. If it&amp;nbsp;has to&amp;nbsp;&lt;STRONG&gt;paint some area&lt;/STRONG&gt; in a color that differs from that of rest of&amp;nbsp;a&amp;nbsp;series, implement&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;IFillPaletteProvider&lt;/A&gt;. For&amp;nbsp;&lt;STRONG&gt;painting parts of&amp;nbsp;the series' outline&lt;/STRONG&gt;, choose&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;. To change the &lt;STRONG&gt;fill of some&amp;nbsp;PointMarkers&lt;/STRONG&gt;,&amp;nbsp;use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IPointMarkerPaletteProvider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Every PaletteProvider interface&amp;nbsp;declares &lt;STRONG&gt;the only method&lt;/STRONG&gt; which returns an array with colors for every data points.&amp;nbsp;For the convenience, there is also the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.PaletteProviderBase.html"&gt;PaletteProviderBase&lt;/A&gt; class, which provides some basic implementation. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IPaletteProvider~update.html"&gt;&lt;EM&gt;update()&lt;/EM&gt;&lt;/A&gt; method is called every time a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; requires a redraw, so it is supposed that the&amp;nbsp;colors array should be updated there correspondingly.&lt;/P&gt;
&lt;P&gt;The following code snippet demonstrates how to create a custom PaletteProvider for a&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private static final class HorizontalThresholdPaletteProvider extends PaletteProviderBase&amp;lt;XyScatterRenderableSeries&amp;gt; implements IPointMarkerPaletteProvider{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IAnnotation upperLimit, lowerLimit;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; int upperColor = ColorUtil.Red, mediumColor = ColorUtil.Purple, lowerColor = ColorUtil.Green;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IntegerValues colors = new IntegerValues();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected HorizontalThresholdPaletteProvider(IAnnotation upperLimit, IAnnotation lowerLimit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(XyScatterRenderableSeries.class);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.upperLimit = upperLimit;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.lowerLimit = lowerLimit;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void update() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyScatterRenderableSeries scaterSeries = this.renderableSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyRenderPassData currentRenderPassData = (XyRenderPassData) scaterSeries.getCurrentRenderPassData();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final DoubleValues yValues = currentRenderPassData.yValues;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int size = currentRenderPassData.pointsCount();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colors.setSize(size);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y1 = (Double)upperLimit.getY1();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y2 = (Double)lowerLimit.getY1();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double min = Math.min(y1, y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double max = Math.max(y1, y2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int[] colorsArray = colors.getItemsArray();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double[] valuesArray = yValues.getItemsArray();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; size; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double value = valuesArray[i];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (value &amp;gt;= max)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colorsArray[i] = upperColor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else if(value &amp;gt; min &amp;amp;&amp;amp; value &amp;lt; max)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colorsArray[i] = mediumColor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colorsArray[i] = lowerColor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public IntegerValues getPointMarkerColors() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return colors;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Once&amp;nbsp;a PaletteProvider class is ready, its instances&amp;nbsp;can be used to set up&amp;nbsp;the PaletteProvider for a&amp;nbsp;RenderableSeries via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;setPaletteProvider()&lt;/A&gt;&lt;/EM&gt; method:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final EllipsePointMarker pointMarker = sciChartBuilder.newPointMarker(new EllipsePointMarker())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(15, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;HorizontalLineAnnotation upperLimit = sciChartBuilder.newHorizontalLineAnnotation().withIsEditable(true).withStroke(2, ColorUtil.Red).withY1(0.7d).build();&lt;BR&gt;HorizontalLineAnnotation lowerLimit = sciChartBuilder.newHorizontalLineAnnotation().withIsEditable(true).withStroke(2, ColorUtil.Purple).withY1(0.2d).build();&lt;/P&gt;
&lt;P&gt;final IRenderableSeries scatters = sciChartBuilder.newScatterSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPaletteProvider(new HorizontalThresholdPaletteProvider(upperLimit, lowerLimit))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), upperLimit, lowerLimit);&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), scatters);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above results in a chart with a &lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt; which change colors of its PointMarkers depending on the threshold levels provided by two&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotations&lt;/A&gt;:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/PaletteproviderThresholds_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;More examples of PaletteProvider usage can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-using-paletteprovider/"&gt;SciChart Android Examples Suite&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Using&amp;nbsp;PaletteProviders with Heatmaps&lt;/H2&gt;
&lt;P&gt;There is a special PaletteProvider interface called&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider.html"&gt;IUniformHeatmapPaletteProvider&lt;/A&gt;&amp;nbsp;designed for usage with&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;Heatmaps&lt;/A&gt;.&amp;nbsp;The only distinction from the other interfaces is&amp;nbsp;the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider~shouldSetColors.html"&gt;shouldSetColors()&lt;/A&gt;&lt;/EM&gt; method, which determines whether an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider.html"&gt;IUniformHeatmapPaletteProvider&lt;/A&gt;&amp;nbsp;implementation &lt;STRONG&gt;provides colors&lt;/STRONG&gt; for every data point &lt;STRONG&gt;or&lt;/STRONG&gt; it just &lt;STRONG&gt;updates colors&lt;/STRONG&gt; passed in by a&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt; object.&lt;/P&gt;
&lt;P&gt;The following code snippet demonstrates how to create a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider.html"&gt;IUniformHeatmapPaletteProvider&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public&amp;nbsp;class CustomUniformHeatMapProvider extends PaletteProviderBase&amp;lt;FastUniformHeatmapRenderableSeries&amp;gt; implements IUniformHeatmapPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private double thresholdValue;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomUniformHeatMapProvider() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(FastUniformHeatmapRenderableSeries.class);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void setThresholdValue(double thresholdValue) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.thresholdValue = thresholdValue;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(renderableSeries != null)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeries.invalidateElement();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public boolean shouldSetColors() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void update() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final FastUniformHeatmapRenderableSeries renderableSeries = this.renderableSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final UniformHeatmapRenderPassData currentRenderPassData = (UniformHeatmapRenderPassData)&amp;nbsp;renderableSeries.getCurrentRenderPassData();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final DoubleValues zValues = currentRenderPassData.zValues;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IntegerValues zColors = currentRenderPassData.zColors;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int size = zValues.size();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zColors.setSize(size);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // working with array is much faster than calling set() many times&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double[] zValuesArray = zValues.getItemsArray();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int[] zColorsArray = zColors.getItemsArray();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int zIndex = 0; zIndex &amp;lt; size; zIndex++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double value = zValuesArray[zIndex];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zColorsArray[zIndex] = value &amp;lt; thresholdValue ? Color.BLACK : Color.WHITE;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above&amp;nbsp;defines&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider.html"&gt;IUniformHeatmapPaletteProvider&lt;/A&gt;&amp;nbsp;called &lt;STRONG&gt;CustomUniformHeatMapProvider&lt;/STRONG&gt;. Since its&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider~shouldSetColors.html"&gt;shouldSetColors()&lt;/A&gt;&lt;/EM&gt; method returns False, &lt;STRONG&gt;CustomUniformHeatMapProvider&lt;/STRONG&gt;&amp;nbsp;has&amp;nbsp;to provide&amp;nbsp;a color for&amp;nbsp;every data point. In this sample the color is picked&amp;nbsp;based on the&amp;nbsp;threshold value.&amp;nbsp;The array with colors is created in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IPaletteProvider~update.html"&gt;&lt;EM&gt;update()&lt;/EM&gt;&lt;/A&gt; method and the current&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;RenderPassData&lt;/A&gt; instance is updated to&amp;nbsp;pass it&amp;nbsp;to a&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;object for rendering:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/UseHeatmapPaletteProvider_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;The complete code sample can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-heatmap-paletteprovider/"&gt;SciChart Android Example Suite&lt;/A&gt;.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="e481823a-508f-4607-93e5-d467f43cf115" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9ba5fe78-7b0c-4b01-b003-0b3bbbe67faf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="f5de8023-be60-477f-a8c7-26fe082e1ca6" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/android-chart-example-using-paletteprovider/" BuildFlags="">
                        <Title m="2016-10-03T13:26:52.3001194Z">Using Palette Provider</Title>
                        <Category m="2016-10-03T13:27:14.414549Z">SciChart Android Examples Suite</Category>
                      </TopicLink>
                      <TopicLink Id="1bbd1d3b-84bd-4078-bdbf-cc675ad60756" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/android-chart-example-heatmap-paletteprovider/" BuildFlags="">
                        <Title m="2016-10-03T13:28:00.5495727Z">Using PaletteProvider With Heatmap</Title>
                        <Category m="2016-10-03T13:28:18.036478Z">SciChart Android Examples Suite</Category>
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" Status="New Topic" CreatedOn="2016-09-02T09:36:01.882535Z" ModifiedOn="2019-08-09T13:16:24.1084109Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-09T13:16:24.1084109Z">&lt;P&gt;The Hit-Test API is set of virtual methods defined on&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt;, and overridden by some of the series types. This API is used by the&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="18b07bb4-d65f-4417-a954-4fb58a308818"&gt;SeriesSelectionModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="764104d5-6906-439e-a2d8-72cc35308eee"&gt;TooltipModifier&lt;/A&gt; to transform touch on screen into data-points, and determine if touch event occurs&amp;nbsp;over a point or over a series.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To call the Hit-Test method, use the following code from example from our Example Suite:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;@Override&lt;BR&gt;public boolean onTouch(View v, MotionEvent event) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; touchPoint.set(event.getX(), event.getY());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.translatePoint(touchPoint, surface.getRenderableSeriesArea());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final StringBuilder stringBuilder = new StringBuilder();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stringBuilder.append(String.format("Touch at: (%.1f, %.1f)", touchPoint.x, touchPoint.y));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (IRenderableSeries renderableSeries : surface.getRenderableSeries()) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeries.hitTest(hitTestInfo, touchPoint.x, touchPoint.y, 30);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stringBuilder.append(String.format("\n%s - %s", renderableSeries.getClass().getSimpleName(), Boolean.toString(hitTestInfo.isHit)));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; toast.setText(stringBuilder.toString());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; toast.show();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return true;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: You must transform any touch events into the coordinate space of the main chart area. Without this, all hit-test results will be inaccurate.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P class=NewStyle2&gt;The Hit-Test Results&lt;/P&gt;
&lt;P&gt;The HitTestInfo which is used for Hit-Test contains some useful properties to determine what point was touched.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~hitTestPoint.html"&gt;HitTestPoint&lt;/A&gt; - The coordinates of point used for Hit-Test
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~hitTestRadius.html"&gt;HitTestRadius&lt;/A&gt; - The Hit-Test radius which was used for searching of nearest data point
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~dataSeriesIndex.html"&gt;DataSeriesIndex&lt;/A&gt; - If data point was hit contains&amp;nbsp;index of the point in DataSeries which was hit
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~pointSeriesIndex.html"&gt;PointSeriesIndex&lt;/A&gt; - If data point was hit contains index of the point in resampled PointSeries which was hit
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~isHit.html"&gt;IsHit&lt;/A&gt; - Boolean flag which tells wheter or not HitTestPoint was within a certain radis of point on series
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~isWithinDataBounds.html"&gt;IsWithinDataBounds&lt;/A&gt; - Boolean flag which tells if HitTestPoint lies between first and last X point on series
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.hitTest.HitTestInfo~hitRenderableSeries.html"&gt;HitRenderableSeries&lt;/A&gt; - The RenderableSeries which we perform Hit-Test on&lt;/LI&gt;&lt;/UL&gt;
&lt;P class=NewStyle3&gt;UseInterpolation Flag&lt;/P&gt;
&lt;P&gt;The &lt;STRONG&gt;UseInterpolation&lt;/STRONG&gt; flag increases the accuracy of HitTest at the expense of performance.&lt;/P&gt;
&lt;P&gt;When used in a&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt;, UseInterpolation=True will return IsHit=True if the input touch event is over the line, whereas if UseInterpolation=False, it will return IsHit=True only if the input mouse-point is over a data-point.&lt;/P&gt;
&lt;P&gt;This is useful say if you wanted to show a tooltip only on datapoints (UseInterpolation=False), vs.&amp;nbsp;anywhere on the line (UseInterpolation=True).&lt;/P&gt;
&lt;P&gt;For other series types, such as&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;FastColumnRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeries&lt;/A&gt;, setting UseInterpolation=True will result in an IsHit=True when touch is ‘over the series’ as opposed to ‘over the data-points’.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: Interpolation is linear interpolation and at the time of writing, is not suitable for use by Logarithmic Axis. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="f7b4ddd1-9588-4090-bda7-1d3edc1bbd0e" Status="New Topic" CreatedOn="2016-09-06T17:10:05.007611Z" ModifiedOn="2016-09-09T08:20:45.2762963Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Styling a RenderableSeries" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2016-09-09T08:20:45.2762963Z">&lt;P&gt;Other Styling Options&lt;/P&gt;
&lt;P&gt;Almost every series type&amp;nbsp;has its own set of styling options. Please refer to an article about&amp;nbsp;a particular&amp;nbsp;RenderbaleSeries type for more details.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="f1295ddf-baa8-4bb2-886e-6fd099bf9a80" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="c13e369f-7271-45b5-ae7f-6214bbb417c2" Status="New Topic" CreatedOn="2016-09-06T17:34:27.106362Z" ModifiedOn="2019-02-12T17:44:33.723479Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Data Resampling" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T17:44:33.723479Z">&lt;H2&gt;How does Data Resampling&amp;nbsp;work?&lt;/H2&gt;
&lt;P&gt;By default, SciChart uses &lt;STRONG&gt;resampling (culling) of data&lt;/STRONG&gt; to ensure the minimum viable dataset is displayed on the screen.&amp;nbsp;Resampling is intended to be &lt;STRONG&gt;lossless, and automatic&lt;/STRONG&gt;. It occurs&amp;nbsp;for every&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; before the series is rendered, if required.&lt;/P&gt;
&lt;P&gt;Resampling methods make assumptions about the data in order to produce a valid output.&amp;nbsp;SciChart provides variety of the&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingModes&lt;/A&gt;,&amp;nbsp;and auto detects the most suitable one.&amp;nbsp;However, there are cases when&amp;nbsp;data input cannot be resampled accurately. Good examples could be&amp;nbsp;plotting&amp;nbsp;unsorted data&amp;nbsp;or&amp;nbsp;using logarithmic scale on an axis. We recommend switching&amp;nbsp;Resampling&amp;nbsp;off (setting &lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~None.html"&gt;ResamplingMode.None&lt;/A&gt;)&amp;nbsp;in such situations.&lt;/P&gt;
&lt;P&gt;Please be aware that if you disable resampling you will experience a degredation in performance.&lt;/P&gt;
&lt;H2&gt;Resampling Modes&lt;/H2&gt;
&lt;P&gt;There are several&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingModes&lt;/A&gt; available in SciChart:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~Auto.html"&gt;ResamplingMode.Auto&lt;/A&gt; - the &lt;STRONG&gt;default mode&lt;/STRONG&gt;. Auto-detects the most suitable resampling algorithm (fastest&amp;nbsp;and most accurate) for the type of data appended. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~None.html"&gt;ResamplingMode.None&lt;/A&gt; - switches off Resampling on a RenderableSeries. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~MinMax.html"&gt;ResamplingMode.MinMax&lt;/A&gt; - suitable for evenly-spaced data. Resamples by taking the min-max of oversampled data. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~MinMaxWithUnevenSpacing.html"&gt;ResamplingMode.MinMaxWithUnevenSpacing&lt;/A&gt; - suitable for not evenly-spaced data. Resamples by taking the min-max of oversampled data. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~Min.html"&gt;ResamplingMode.Min&lt;/A&gt; - suitable for evenly-spaced data. Resamples by taking the minimum point&amp;nbsp;of oversampled data. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~Max.html"&gt;ResamplingMode.Max&lt;/A&gt; - suitable for evenly-spaced data. Resamples by taking the maximum point&amp;nbsp;of oversampled data. 
&lt;LI&gt;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode~Mid.html"&gt;ResamplingMode.Mid&lt;/A&gt; - suitable for evenly-spaced data. Resamples by taking the median point&amp;nbsp;of oversampled data. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Setting Resampling Mode&lt;/H2&gt;
&lt;P&gt;Most of the time, you don't need to set&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingMode&lt;/A&gt;&amp;nbsp;manually. SciChart auto detects the best one for a given data and&amp;nbsp;uses it internally. However, when it is necessary,&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingMode&lt;/A&gt;&amp;nbsp;can be set explicitly. There is the setResamplingMode() method for this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;IRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;lineSeries.setStrokeStyle(new SolidPenStyle(ColorUtil.Green, true, 2f, null));&lt;BR&gt;&lt;BR&gt;// Set a&amp;nbsp;DataSeries with unsorted data&lt;BR&gt;lineSeries.setDataSeries(unsortedDataSeries);&lt;BR&gt;&lt;BR&gt;// Switch off Resampling because the&amp;nbsp;DataSeries is unsorted&lt;BR&gt;lineSeries.setResamplingMode(ResamplingMode.None);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Resampling Performance&lt;/H2&gt;
&lt;P&gt;Resampling makes drawing many millions of points possible with SciChart. For instance, in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-realtime-performance-demo/"&gt;Performance Demo&lt;/A&gt; example,&amp;nbsp;we push &lt;STRONG&gt;1000 points every 10ms&lt;/STRONG&gt; to three series on a chart. The point count quickly rises to the &lt;STRONG&gt;millions of points&lt;/STRONG&gt;, and SciChart is still rendering at interactive rates. Also, the example allows to play around with different&amp;nbsp;&lt;A href="SciChart.Data~com.scichart.data.numerics.ResamplingMode.html"&gt;ResamplingModes&lt;/A&gt; and see their impact on performance.&lt;/P&gt;
&lt;P&gt;In addition, we&amp;nbsp;compared performance&amp;nbsp;of the most popular Android&amp;nbsp;charting packages with SciChart. The results can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-performance-comparison/"&gt;Performance Comparison&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="21114660-3f94-461e-b224-3a5e5ab2093b" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/android-chart-realtime-performance-demo/" BuildFlags="">
                        <Title m="2016-09-09T07:02:16.661675Z">SciChart Performance Demo</Title>
                        <Category m="2016-09-09T07:10:10.2697655Z">SciChart Performance</Category>
                      </TopicLink>
                      <TopicLink Id="79f78fcb-8a3d-4d4c-9787-2de3e650b2ae" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/android-chart-performance-comparison/" BuildFlags="">
                        <Title m="2016-09-09T07:02:49.2691132Z">Performance Comparison</Title>
                        <Category m="2016-09-09T07:10:28.9305576Z">SciChart Performance</Category>
                      </TopicLink>
                      <TopicLink Id="ff378ee8-b4d5-4951-a0f0-09c820e7f531" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Data~com.scichart.data.numerics.ResamplingMode" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="0ab72d1d-8725-434f-9f4a-da30ed22d95f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9c6a93da-bc65-4b6c-bfca-895e98dde761" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="2f6499c3-9dce-48e1-a312-1e82d53d8db7" Status="New Topic" CreatedOn="2019-08-09T12:21:26.5983555Z" ModifiedOn="2019-08-12T10:35:55.0728993Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Animations API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-12T10:35:55.0728993Z">&lt;P&gt;In SciChart v2.1 and above, you can use Animations API to animate RenderableSeries. In this example we'll use&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Builders API&lt;/A&gt; which simplifies declaration of animation:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Line Series animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// declare FastLineRenderableSeries to animate&lt;/P&gt;
&lt;P&gt;final FastLineRenderableSeries rSeries = sciChartBuilder.newLineSeries().withDataSeries(dataSeries).withStrokeStyle(0xFF279B27, 1f, true).build();&lt;/P&gt;
&lt;P&gt;// suspend updates on chart while we add rSeries and start animation&lt;/P&gt;
&lt;P&gt;// to prevent showing of series before starting of animation&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add renderable series into chart as usual&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), rSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// create and start sweep&amp;nbsp;animation for specified series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newAnimator(rSeries).withSweepTransformation().withInterpolator(new DecelerateInterpolator()).withDuration(3000).withStartDelay(350).start();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Under the hood&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Builders API&lt;/A&gt;&amp;nbsp;uses&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.AnimationsHelper.html"&gt;AnimationsHelper&lt;/A&gt;&amp;nbsp;class which contains some helper methods which create&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/animation/Animator"&gt;Android Animator&lt;/A&gt;&amp;nbsp;to animate specified series. After creation of animator you can combine them using&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/animation/AnimatorSet"&gt;AnimatorSet&lt;/A&gt; to animate several series at the same time or to create more complex animations.&lt;/P&gt;
&lt;P class=NewStyle2&gt;Transformation API&lt;/P&gt;
&lt;P&gt;The Animations API is based on&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.IRenderPassDataTransformation.html"&gt;Tranformation API&lt;/A&gt; which allows to define different tranformations for IRenderableSeries which we apply during animation. When we start&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/animation/Animator"&gt;Animator&lt;/A&gt; created by&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Builders API&lt;/A&gt;&amp;nbsp;or using&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.AnimationsHelper.html"&gt;AnimationsHelper&lt;/A&gt;&amp;nbsp;directly it animates&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.IRenderPassDataTransformation~setCurrentProgress.html"&gt;Progress&lt;/A&gt; of tranformation from 0 ( begining of animation ) to 1 ( end of animation ).&lt;/P&gt;
&lt;P&gt;There are several default implementations of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.IRenderPassDataTransformation.html"&gt;Tranformation API&lt;/A&gt;&amp;nbsp;which allow to animate different series:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Scale Tranformation &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ScaleAnimation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Sweep Tranformation &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/SweepAnimation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Translate Transformation &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/TranslateAnimation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Wave Tranformation &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/WaveAnimation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Composite Transformation - allows to combine effects of several transformations into one tranformation (e.g. sweep and wave transformation) &lt;/LI&gt;&lt;/UL&gt;
&lt;P class=NewStyle2&gt;Custom&amp;nbsp;Animation&lt;/P&gt;
&lt;P&gt;To create custom animation we need to create class which implements IRenderPassDataTransformation interface. Inside we need to add code which modifies render pass data of Renderable Series which we need to animate. For example we'll try to animate line series and create 'expand' effect which moves points from some predefined origin point.&lt;/P&gt;
&lt;P&gt;First we need to&amp;nbsp;create transformation for render pass data:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom XyTransformation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomXyTransformation extends BaseRenderPassDataTransformation&amp;lt;XyRenderPassData&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FloatValues originalXCoordinates = new FloatValues();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FloatValues originalYCoordinates = new FloatValues();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final double centerX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final double centerY;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private float zeroXCoord, zeroYCoord;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomXyTransformation(double centerX, double centerY) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(XyRenderPassData.class);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.centerX = centerX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.centerY = centerY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void applyTransformation() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // transform current render pass data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; transformValues(renderPassData.xCoords, originalXCoordinates, zeroXCoord);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; transformValues(renderPassData.yCoords, originalYCoordinates, zeroYCoord);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private void transformValues(FloatValues valuesToTransform, FloatValues originalCoordinates, float zeroCoord) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float transformationValue = 1 - getCurrentTransformationValue();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // calculate new values to display based on original value&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float[] itemsArray = valuesToTransform.getItemsArray();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float[] originalValues = originalCoordinates.getItemsArray();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0, size = renderPassData.pointsCount(); i &amp;lt; size; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float originalValue = originalValues[i];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; itemsArray[i] = originalValue - (originalValue - zeroCoord) * transformationValue;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void discardTransformation() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // restore xCoords&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderPassData.xCoords.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderPassData.xCoords.add(originalXCoordinates.getItemsArray(), 0, originalXCoordinates.size());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // restore yCoords&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderPassData.yCoords.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderPassData.yCoords.add(originalYCoordinates.getItemsArray(), 0, originalYCoordinates.size());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onInternalRenderPassDataChanged() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void saveOriginalData() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zeroXCoord = renderPassData.getXCoordinateCalculator().getCoordinate(centerX);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zeroYCoord = renderPassData.getYCoordinateCalculator().getCoordinate(centerY);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int count = renderPassData.pointsCount();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // save initial xCoords&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; originalXCoordinates.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; originalXCoordinates.add(renderPassData.xCoords.getItemsArray(), 0, count);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // save initial xCoords&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; originalYCoordinates.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; originalYCoordinates.add(renderPassData.yCoords.getItemsArray(), 0, count);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we use this transformation to create&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/animation/Animator"&gt;Animator&lt;/A&gt;&amp;nbsp;using&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.animations.AnimationsHelper.html"&gt;AnimationsHelper&lt;/A&gt;&amp;nbsp;in &lt;A href="https://www.scichart.com/example/android-line-chart-example/"&gt;Line Chart example&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Line Series with custom animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IAxis xAxis = sciChartBuilder.newNumericAxis().withGrowBy(0.1d, 0.1d).withVisibleRange(1.1, 2.7).build();&lt;BR&gt;final IAxis yAxis = sciChartBuilder.newNumericAxis().withGrowBy(0.1d, 0.1d).build();&lt;/P&gt;
&lt;P&gt;final DoubleSeries fourierSeries = DataManager.getInstance().getFourierSeries(1.0, 0.1, 5000);&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = sciChartBuilder.newXyDataSeries(Double.class, Double.class).build();&lt;BR&gt;dataSeries.append(fourierSeries.xValues, fourierSeries.yValues);&lt;/P&gt;
&lt;P&gt;final FastLineRenderableSeries rSeries = sciChartBuilder.newLineSeries().withDataSeries(dataSeries).withStrokeStyle(0xFF279B27, 1f, true).build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), rSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), sciChartBuilder.newModifierGroupWithDefaultModifiers().build());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AnimationsHelper.createAnimator(rSeries, new CustomXyTransformation(2, 0), 3000, 350, new DecelerateInterpolator(), new FloatEvaluator(), 0f, 1f).start();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will result next ouput:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/CustomAnimation.gif"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics>
              <Topic Id="e280ed77-6cc5-49cd-84be-ecd143139ca6" Status="New Topic" CreatedOn="2016-09-02T11:58:47.2034614Z" ModifiedOn="2019-02-12T17:50:17.0962502Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Line Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:50:17.0962502Z">&lt;P&gt;&lt;STRONG&gt;Line Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Line Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-line-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-line-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/LineChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;FastLineRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the Line RenderableSeries&lt;BR&gt;lineSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a Stroke Pen and assign it&lt;BR&gt;PenStyle strokePen = new SolidPenStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27), true, 2f, null);&lt;BR&gt;lineSeries.setStrokeStyle(strokePen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above, a &lt;STRONG&gt;Line Series&lt;/STRONG&gt; instance is created. It is assigned to draw the data that is provided by&amp;nbsp;the &lt;STRONG&gt;DataSeries&lt;/STRONG&gt; assigned to it. The line is drawn with a &lt;STRONG&gt;Pen&lt;/STRONG&gt; provided by the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; instance. Finally, the Line Series is added to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.RenderableSeriesCollection.html"&gt;RenderableSeriesCollection&lt;/A&gt; of&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Using Chart Builders&lt;/H2&gt;
&lt;P&gt;Similarly, a Line Series can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create and configure a Line Series&lt;/P&gt;
&lt;P&gt;FastLineRenderableSeries lineSeries = sciChartBuilder.newLineSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the corresponding documentation section to learn more about the&amp;nbsp;DataSeries API and&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Line Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt;, however, allows to specify how a gap should appear. There are several modes defined in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;&lt;FONT color=#0066cc&gt;LineDrawMode&lt;/FONT&gt;&lt;/A&gt; enumeration, which can be applied via the&amp;nbsp;&lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Add Point Markers onto a Line Series&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 339px; WIDTH: 610px" border=0 alt="" src="images/UsePointMarkers_framed.png" width=650 height=346&gt;&lt;/P&gt;
&lt;P&gt;Every data point of a Line Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;PointMarker&lt;/A&gt;. To add Point Markers to the Line Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;pointMarker.setFillStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to a LineSeries&lt;BR&gt;IRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;lineSeries.setPointMarker(pointMarker);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about Point Markers, please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarkers API&lt;/A&gt; article.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;This feature can be used to create a&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;, if StrokeStyle&amp;nbsp;contains a transparent Pen.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Paint Line Segments With Different Colors&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 351px; WIDTH: 623px" border=0 alt="" src="2D_Chart_Types_files/PalettedLine_framed.png" width=721 height=379&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Such appearance&amp;nbsp;can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows to change color of Line Series between any two data points. To do this, a custom &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create&amp;nbsp;a PaletteProvider instance and assign it to the Line Series&lt;/P&gt;
&lt;P&gt;IPaletteProvider paletteProvider = new ColoredLinePaletteProvider();&lt;/P&gt;
&lt;P&gt;lineSeries.setPaletteProvider(paletteProvider);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b8608098-0839-4264-a2f3-e0c2515fabb7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="786e5b4a-e028-4c2b-b640-d6935756e2e5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="aeffa761-8941-4250-a7ad-d8d3bb1e364d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eacb28eb-cdc8-43a2-9486-bc5c4f4deb6f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b4cb98ca-ad0c-4203-a86d-e45ef0fb7c33" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3425a202-cb28-4349-915f-ccf122d3a766" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c07263f0-2e3c-4c5a-a9cf-2162d50b2fb7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5ac133e0-2914-424b-b138-24e3d0e61c9f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="983963f2-0fbf-4f48-aec8-d326824bf9b5" Status="New Topic" CreatedOn="2020-03-31T14:03:40.5664595Z" ModifiedOn="2020-04-08T15:48:34.7589644Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The  Spline Line Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-04-08T15:48:34.7589644Z">&lt;P&gt;&lt;STRONG&gt;Spline Line Series&lt;/STRONG&gt; can be created using the &lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineLineRenderableSeries.html"&gt;SplineLIneRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Spline Line Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-spline-line-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-spline-line-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Spline-Line.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a Spline Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineLineRenderableSeries.html"&gt;SplineLineRenderableSeries&lt;/A&gt;, please&amp;nbsp;use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;&amp;nbsp;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;SplineLineRenderableSeries splineSeries = new SplineLineRenderableSeries();&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;&amp;nbsp;// Assume some data has been added to the dataSeries here&lt;BR&gt;&amp;nbsp;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the Spline Line RenderableSeries&lt;BR&gt;&amp;nbsp;splineSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;// Create a Stroke Pen and assign it&lt;BR&gt;&amp;nbsp;PenStyle strokePen = new SolidPenStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27), true, 2f, null);&lt;BR&gt;&amp;nbsp;splineSeries.setStrokeStyle(strokePen);&lt;/P&gt;
&lt;P&gt;// Add the Spline Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;Collections.addAll(surface.getRenderableSeries(), splineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;ISciChartSurface surface;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SplineLineRenderableSeries splineSeries = new SplineLineRenderableSeries();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XyDataSeries&amp;lt;double, double&amp;gt; dataSeries = new XyDataSeries&amp;lt;double, double&amp;gt;();&lt;BR&gt;&amp;nbsp;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;BR&gt;// Assign the dataSeries to the Spline Line RenderableSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; splineSeries.DataSeries = dataSeries;&lt;BR&gt;&amp;nbsp;// Create a Stroke Pen and assign it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokePen = new SolidPenStyle(Color.FromArgb(0xFF, 0x27, 0x9B, 0x27), 2f, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; splineSeries.StrokeStyle = strokePen;&lt;BR&gt;&amp;nbsp;// Add the Spline Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.RenderableSeries.Add(splineSeries);&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above, a &lt;STRONG&gt;Spline Line Series&lt;/STRONG&gt; instance is created. It is assigned to draw the data that is provided by&amp;nbsp;the &lt;STRONG&gt;DataSeries&lt;/STRONG&gt; assigned to it. The line is drawn with a &lt;STRONG&gt;Pen&lt;/STRONG&gt; provided by the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; instance. Finally, the Line Series is added to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.RenderableSeriesCollection.html"&gt;RenderableSeriesCollection&lt;/A&gt; of&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Using Chart Builders&lt;/H2&gt;
&lt;P&gt;Similarly, a Line Series can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create and configure a Line Series&lt;BR&gt;SplineLineRenderableSeries splineSeries = sciChartBuilder.newSplineLineSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;// Add the Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), splineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the corresponding documentation section to learn more about the&amp;nbsp;DataSeries API and&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Spline Line Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Spline Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineLineRenderableSeries.html"&gt;SplineLineRenderableSeries&lt;/A&gt;, however, allows to specify how a gap should appear. There are several modes defined in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;&lt;FONT color=#0066cc&gt;LineDrawMode&lt;/FONT&gt;&lt;/A&gt; enumeration, which can be applied via the&amp;nbsp;&lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;Please note, even though Gaps via NaN values in spline series is supported, ClosedGaps feature, which is available in &lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#The%20Line%20Series%20Type.html"&gt;regular (non-spline)&lt;/A&gt; series, aren't supported with splines.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Add Point Markers onto a Spline Line Series&lt;/H2&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Spline-Line-Point-Markers.png"&gt;&lt;/P&gt;
&lt;P&gt;Every data point of a Spline Line Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;PointMarker&lt;/A&gt;. To add Point Markers to the Spline Line Series, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a Triangle PointMarker instance&lt;BR&gt;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;pointMarker.setSize(40,40);&lt;BR&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;pointMarker.setStrokeStyle(strokeStyle);&lt;BR&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;pointMarker.setFillStyle(fillStyle);&lt;BR&gt;// Apply the PointMarker to a LineSeries&lt;BR&gt;IRenderableSeries splineSeries = new SplineLineRenderableSeries();&lt;BR&gt;splineSeries.setPointMarker(pointMarker);&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a Triangle PointMarker instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.SetSize(40, 40);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokeStyle = new SolidPenStyle(Color.Green, 2, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.StrokeStyle = strokeStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BrushStyle fillStyle = new SolidBrushStyle(Color.Red);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.FillStyle = fillStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply the PointMarker to a LineSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IRenderableSeries splineSeries = new SplineLineRenderableSeries();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; splineSeries.PointMarker = pointMarker;&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about Point Markers, please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarkers API&lt;/A&gt; article.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;This feature can be used to create a&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;, if StrokeStyle&amp;nbsp;contains a transparent Pen.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Paint Spline Line Segments With Different Colors&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 351px; WIDTH: 623px" border=0 alt="" src="2D_Chart_Types_files/Spline-Line-Segmented-Colors.png" width=721 height=379&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Such appearance&amp;nbsp;can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows changing color of Spline Line Series between any two data points. To do this, a custom &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget type="Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a PaletteProvider instance and assign it to the Line Series&lt;BR&gt;IPaletteProvider paletteProvider = new RandomColorPaletteProvider();&lt;BR&gt;splineSeries.setPaletteProvider(paletteProvider);&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a PaletteProvider instance and assign it to the Line Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IPaletteProvider paletteProvider = new RandomColorPaletteProvider();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; splineSeries.PaletteProvider = paletteProvider;&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b8608098-0839-4264-a2f3-e0c2515fabb7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="786e5b4a-e028-4c2b-b640-d6935756e2e5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="aeffa761-8941-4250-a7ad-d8d3bb1e364d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eacb28eb-cdc8-43a2-9486-bc5c4f4deb6f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b4cb98ca-ad0c-4203-a86d-e45ef0fb7c33" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3425a202-cb28-4349-915f-ccf122d3a766" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c07263f0-2e3c-4c5a-a9cf-2162d50b2fb7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineLineRenderableSeries" BuildFlags="">
                    <Title m="2020-03-31T15:22:42.6116574Z">SplineLineRenderableSeries Class</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5ac133e0-2914-424b-b138-24e3d0e61c9f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c" Status="New Topic" CreatedOn="2016-09-02T11:59:08.5079453Z" ModifiedOn="2019-02-12T19:06:49.3778758Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Scatter Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:06:49.3778758Z">&lt;P&gt;&lt;STRONG&gt;Scatter&amp;nbsp;Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;&amp;nbsp;type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Scatter Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-scatter-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-scatter-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ScatterChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Scatter Series Features&lt;/H2&gt;
&lt;P&gt;The Scatter Series requires&amp;nbsp;a shape to be specified for Point Markers.&amp;nbsp;SciChart provides several shapes out of the box, also it is possible to define custom shapes. Please refer to the &lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PointMarkers API&lt;/A&gt;&amp;nbsp;article to learn more. The&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; allows to&amp;nbsp;&lt;STRONG&gt;override colors&lt;/STRONG&gt; for Point Markers, up to&amp;nbsp;coloring every one individually.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Scatter Series&lt;/H2&gt;
&lt;P&gt;To create the Scatter Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an Ellipse&amp;nbsp;PointMarker&lt;BR&gt;&amp;nbsp;IPointMarker pointMarker = new EllipsePointMarker();&lt;BR&gt;&amp;nbsp;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;&amp;nbsp;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;&amp;nbsp;pointMarker.setFillStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to&amp;nbsp;the&amp;nbsp;Scatter Series&lt;BR&gt;IRenderableSeries scatterSeries = new XyScatterRenderableSeries();&lt;BR&gt;scatterSeries.setPointMarker(pointMarker);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the Line RenderableSeries&lt;BR&gt;scatterSeries.setDataSeries(dataSeries);&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;// Add the Scatter RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), scatterSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using Chart Builders:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an Ellipse PointMarker&lt;/P&gt;
&lt;P&gt;final EllipsePointMarker pointMarker = sciChartBuilder.newPointMarker(new EllipsePointMarker())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(15, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.argb(255, 176, 196, 222), 2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.argb(255, 70, 130, 180))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;BR&gt;&amp;nbsp;// Assume some data has been added to the dataSeries here&lt;BR&gt;&amp;nbsp;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure a&amp;nbsp;Scatter Series&lt;/P&gt;
&lt;P&gt;final IRenderableSeries scatterSeries = sciChartBuilder.newScatterSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPaletteProvider(new HorizontalThresholdPaletteProvider(upperLimit, lowerLimit))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Scatter RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), scatterSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Color&amp;nbsp;Some Point Markers Differently&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; allows to fill certain PointMarkers with a&amp;nbsp;different color:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/PaletteproviderThresholds_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;To do this, implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IPointMarkerPaletteProvider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt;&amp;nbsp;interface and assign an instance of that type to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries.html"&gt;XyScatterRenderableSeries&lt;/A&gt; via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;&lt;FONT color=#0066cc&gt;setPaletteProvider()&lt;/FONT&gt;&lt;/EM&gt;&lt;/A&gt; method. Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="494a3792-d04c-49c8-97b4-3be542c4ea64" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="ee4bed1c-4135-4f75-b6b1-4dfe8970bbb8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="be15412c-e83f-48c7-bb19-ce8a31e018fb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b463b347-785d-4256-9e17-73309f5f396b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6ffd1095-273d-4b51-a6ef-19961fd4a081" Status="New Topic" CreatedOn="2019-02-12T17:49:16.3185003Z" ModifiedOn="2019-02-12T17:49:23.7313704Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Scatter-Line Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:49:16.3185003Z">&lt;p&gt; &lt;/p&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="246d21d0-3b1b-4840-be7b-33bc0066e0e1" Status="New Topic" CreatedOn="2016-09-02T11:59:21.5554478Z" ModifiedOn="2019-02-12T19:06:49.3938332Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Column Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:06:49.3938332Z">&lt;P&gt;&lt;STRONG&gt;Column Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;FastColumnRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Column Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-column-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ColumnChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Column Series Features&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;FastColumnRenderableSeries&lt;/A&gt; class allows to specify &lt;STRONG&gt;Fill&lt;/STRONG&gt; brush, &lt;STRONG&gt;Stroke&lt;/STRONG&gt; pen and relative &lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; which will be&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;every&amp;nbsp;column. The&amp;nbsp;&lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; specifies how much space a single column occupies, varying from 0 to 1 (when columns are conjoined). Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;Also, it is possible to set &lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt; to define the baseline position. All data points that have Y value less than&amp;nbsp;&lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt; will be drawn downwards, else - upwards.&lt;/P&gt;
&lt;P&gt;Those values&amp;nbsp;can be assigned via the corresponding methods,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseColumnRenderableSeries~setFillBrushStyle.html"&gt;&lt;EM&gt;setFillBrushStyle(),&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setStrokeStyle.html"&gt;setStrokeStyle(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseColumnRenderableSeries~setDataPointWidth.html"&gt;setDataPointWidth()&lt;/A&gt;&lt;/EM&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setZeroLineY.html"&gt;&lt;EM&gt;setZeroLineY()&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a Column Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;Column Series&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(0xA99A8A, true, 2, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new LinearGradientBrushStyle(0, 0, 0, 1, ColorUtil.LightSteelBlue, ColorUtil.SteelBlue, TileMode.CLAMP);&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;// Create and configure the Column Chart Series&lt;BR&gt;FastColumnRenderableSeries columnSeries = new FastColumnRenderableSeries();&lt;BR&gt;columnSeries.setStrokeStyle(strokeStyle);&lt;BR&gt;columnSeries.setFillBrushStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set relative width for columns&lt;BR&gt;columnSeries.setDataPointWidth(0.8);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the chart series&lt;BR&gt;columnSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), columnSeries);&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the Column Chart Series&lt;/P&gt;
&lt;P&gt;final FastColumnRenderableSeries columnSeries = sciChartBuilder.newColumnSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xA99A8A)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataPointWidth(1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLinearGradientColors(ColorUtil.LightSteelBlue, ColorUtil.SteelBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), columnSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Paint Columns With Different Colors&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 299px; WIDTH: 580px" border=0 alt="" src="2D_Chart_Types_files/PalettedColumns_framed.png" width=726 height=379&gt;&lt;/P&gt;
&lt;P&gt;This can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;&lt;FONT color=#0066cc&gt;PaletteProvider API&lt;/FONT&gt;&lt;/A&gt;. It allows to change the&amp;nbsp;color of any column within a Column Series. To do this, a custom &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;IFillPaletteProvider&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;&lt;FONT color=#0066cc&gt;setPaletteProvider()&lt;/FONT&gt;&lt;/EM&gt;&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a PaletteProvider instance and assign it to the chart series&lt;/P&gt;
&lt;P&gt;IPaletteProvider paletteProvider = new ColoredColumnsPaletteProvider();&lt;/P&gt;
&lt;P&gt;columnSeries.setPaletteProvider(paletteProvider);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="52a6e207-7b82-45ea-9048-a848650c1fe4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="91641c0f-d313-403c-a4d1-21d0b66c83d1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c0430a75-d54b-4c40-b041-306576cc738d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a9c07789-54b7-4a2e-9d00-1836e0859a0a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b5fba377-f1ea-420d-9638-6b972b92cecf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b2fc10ad-2614-414b-a173-bed16255aa6f" Status="New Topic" CreatedOn="2016-09-02T11:59:42.2308832Z" ModifiedOn="2019-02-12T19:18:41.103096Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Candlestick Series type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:18:41.103096Z">&lt;P&gt;&lt;STRONG&gt;Candlestick&amp;nbsp;Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Candlestick Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-candlestick-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-candlestick-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/CandlestickChart_framed.png"&gt;&lt;/P&gt;
&lt;H1&gt;Candlestick Series Features&lt;/H1&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt;&amp;nbsp;class allows to specify &lt;STRONG&gt;FillUp&lt;/STRONG&gt; and &lt;STRONG&gt;FillDown&lt;/STRONG&gt;&amp;nbsp;brushes, &lt;STRONG&gt;StrokeUp&lt;/STRONG&gt; and&amp;nbsp;&lt;STRONG&gt;StrokeDown&lt;/STRONG&gt;&amp;nbsp;pens and relative &lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; which will be&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;every&amp;nbsp;bar.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; specifies how much space a single bar occupies, varying from 0 to 1 (when bars are conjoined).&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;StrokeUp&lt;/STRONG&gt; and &lt;STRONG&gt;FillUp&lt;/STRONG&gt; styles are&amp;nbsp;applied to bars&amp;nbsp;with &lt;STRONG&gt;Close &amp;gt;&amp;nbsp;Open&lt;/STRONG&gt;, and &lt;STRONG&gt;StrokeDown&lt;/STRONG&gt; and &lt;STRONG&gt;FillDown&lt;/STRONG&gt; to those that have &lt;STRONG&gt;Open &amp;lt;= Close&lt;/STRONG&gt; respectively.&amp;nbsp;Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;Those values&amp;nbsp;can be assigned via the corresponding methods,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries~getFillUpBrushStyle.html"&gt;&lt;EM&gt;setFillUpBrushStyle(),&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries~setFillDownBrushStyle.html"&gt;&lt;EM&gt;setFillDownBrushStyle(),&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase~setStrokeUpStyle.html"&gt;setStrokeUpStyle(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase~setStrokeDownStyle.html"&gt;setStrokeDownStyle()&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;and &lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseColumnRenderableSeries~setDataPointWidth.html"&gt;setDataPointWidth()&lt;/A&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H1&gt;Create a Candlestick Series&lt;/H1&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt;&amp;nbsp;instance, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create PenStyles for Up Stroke, Down Stroke&lt;BR&gt;PenStyle strokeUpStyle = new SolidPenStyle(0xFF00AA00, true, 1, null);&lt;BR&gt;PenStyle strokeDownStyle = new SolidPenStyle(0xFFFF0000, true, 1, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a BrushStyles for Fill&lt;BR&gt;BrushStyle fillUpStyle = new LinearGradientBrushStyle(0, 0, 0, 1, 0x55002200, 0xFF00AA00);&lt;BR&gt;BrushStyle fillDownStyle = new LinearGradientBrushStyle(0, 0, 0, 1, 0x55441111, 0xFFFF0000);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the Candlestick Chart Series&lt;BR&gt;FastCandlestickRenderableSeries candlestickSeries = new FastCandlestickRenderableSeries();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;candlestickSeries.setStrokeUpStyle(strokeUpStyle);&lt;BR&gt;candlestickSeries.setStrokeDownStyle(strokeDownStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;candlestickSeries.setFillUpBrushStyle(fillUpStyle);&lt;BR&gt;candlestickSeries.setFillDownBrushStyle(fillDownStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set relative width for bars&lt;BR&gt;candlestickSeries.setDataPointWidth(0.8d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IOhlcDataSeries&amp;lt;Date, Double&amp;gt; dataSeries = new OhlcDataSeries&amp;lt;&amp;gt;(Date.class, Double.class);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(Date, Open, High, Low, Close);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the chart series&lt;BR&gt;candlestickSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), candlestickSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;&lt;FONT color=#0066cc&gt;Chart Builders&lt;/FONT&gt;&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IOhlcDataSeries&amp;lt;Date, Double&amp;gt; dataSeries = new OhlcDataSeries(Date.class, Double.class);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(Date, Open, High, Low, Close);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the Candlestick Chart Series&lt;BR&gt;final FastCandlestickRenderableSeries candlestickSeries = sciChartBuilder.newCandlestickSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeUp(0xFF00AA00)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeDown(0xFFFF0000)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFillUpLinearGradientColors(0x55002200, 0xFF00AA00)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFillDownLinearGradientColors(0x55441111, 0xFFFF0000)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), candlestickSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Candlestick Series&lt;/H1&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Renderable Series by passing a&amp;nbsp;data point with &lt;STRONG&gt;NaN&lt;/STRONG&gt; values&amp;nbsp;as the&amp;nbsp;Open, High, Low, Close values.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/GapsInCandlesticks_framed.png"&gt;&lt;/P&gt;
&lt;H1&gt;Paint&amp;nbsp;Candlesticks With Different Colors&lt;/H1&gt;
&lt;P&gt;This can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows to change the fill&amp;nbsp;color of any bar within a Candlestick Series. To do this, a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;IFillPaletteProvider&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 326px; WIDTH: 612px" border=0 alt="" src="2D_Chart_Types_files/PalettedCandlesticks_framed.png" width=650 height=341&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="41086784-c120-40f8-91b9-0afd59a6a841" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastCandlestickRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c7c14ec5-8e0d-4ea2-82d4-577867a1a660" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f783c60f-0b3f-4d2e-82d9-47ea56786aaf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6ba530b1-174c-4b03-aeec-716812d056de" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8e24a71c-9f60-409f-8f14-60619125cd35" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5693b2a-3d41-4603-b249-8594512d1604" Status="New Topic" CreatedOn="2016-09-02T11:59:58.7264025Z" ModifiedOn="2019-02-12T19:06:49.3868519Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Mountain (Area) Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:06:49.3868519Z">&lt;P&gt;Mountain (Area)&amp;nbsp;Series can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Mountain Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-mountain-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-mountain-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/MountainChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Mountain Series Features&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; class allows to specify &lt;STRONG&gt;Area&lt;/STRONG&gt; brush and&amp;nbsp;&lt;STRONG&gt;Stroke&lt;/STRONG&gt; pen. Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;It is possible to define the &lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt;&amp;nbsp;baseline position for&amp;nbsp;a Mountain&amp;nbsp;Series. &amp;nbsp;All data points that have Y value less than&amp;nbsp;&lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt; will&amp;nbsp;appear downward, else - upward.&lt;/P&gt;
&lt;P&gt;Those values&amp;nbsp;can be assigned via the corresponding methods,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseMountainRenderableSeries~setAreaStyle.html"&gt;setAreaStyle(),&lt;/A&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setStrokeStyle.html"&gt;setStrokeStyle(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setZeroLineY.html"&gt;&lt;EM&gt;setZeroLineY()&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Digital (Step) Mountain Series&lt;/H2&gt;
&lt;P&gt;Also,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; can be configured to draw&amp;nbsp;a &lt;STRONG&gt;Digital (Step) Mountain Series&lt;/STRONG&gt;. For this,&amp;nbsp;call the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseMountainRenderableSeries~setIsDigitalLine.html"&gt;setIsDigitalLine()&lt;/A&gt;&lt;/EM&gt; method, passing in True.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DigitalMountainChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;Mountain Series&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(0xAAFFC9A8, true, 2, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new LinearGradientBrushStyle(0, 0, 0, 1, 0xAAFF8D42, 0x88090E11);&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;// Create and configure the Mountain Chart Series&lt;BR&gt;FastMountainRenderableSeries mountainSeries = new FastMountainRenderableSeries();&lt;BR&gt;mountainSeries.setStrokeStyle(strokeStyle);&lt;BR&gt;mountainSeries.setAreaStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the chart series&lt;BR&gt;mountainSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), mountainSeries);&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the Mountain Chart Series&lt;/P&gt;
&lt;P&gt;final FastMountainRenderableSeries mountainSeries = sciChartBuilder.newMountainSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xAAFFC9A8)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAreaFillLinearGradientColors(0xAAFF8D42,0x88090E11)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), mountainSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a&amp;nbsp;Mountain Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Renderable Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;, however, allows to specify how a gap should appear. There are several modes defined in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;&lt;FONT color=#0066cc&gt;LineDrawMode&lt;/FONT&gt;&lt;/A&gt; enumeration, which can be applied via the&amp;nbsp;&lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Add Point Markers onto a Mountain Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Mountain Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;&lt;FONT color=#0066cc&gt;PointMarker&lt;/FONT&gt;&lt;/A&gt;. To add Point Markers to a Mountain Series, call the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPointMarker.html"&gt;setPointMarker()&lt;/A&gt;&lt;/EM&gt; method. For more info and code examples,&amp;nbsp;please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;&lt;FONT color=#0066cc&gt;PointMarkers API&lt;/FONT&gt;&lt;/A&gt; article.&lt;/P&gt;
&lt;H2&gt;Paint&amp;nbsp;Area Parts&amp;nbsp;With Different Colors&lt;/H2&gt;
&lt;P&gt;This can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;&lt;FONT color=#0066cc&gt;PaletteProvider API&lt;/FONT&gt;&lt;/A&gt;. It allows to specify a color for every data point in a series. This will result in a Mountain Series with colored stripes:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/PalettedMountain_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To achieve this, a custom &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;&lt;FONT color=#0066cc&gt;IFillPaletteProvider&lt;/FONT&gt;&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IFillPaletteProvider.html"&gt;&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;&lt;FONT color=#0066cc&gt;IStrokePaletteProvider&lt;/FONT&gt;&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;&lt;FONT color=#0066cc&gt;setPaletteProvider()&lt;/FONT&gt;&lt;/EM&gt;&lt;/A&gt; method. Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="66dc8609-1139-4434-a55f-962cf3279723" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="bdd9723e-ba27-4f57-8681-e6c81aed787c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="96b54301-c0da-4a46-b387-183ccfcac299" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="04467e64-7f3d-4087-b591-073ec9fc3b3a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5a224024-02a5-435e-a4d6-c268190a12ac" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fabc0772-ed02-471b-9956-5767d17f1554" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="68e6a595-a44e-4704-a164-8623f81c2976" Status="New Topic" CreatedOn="2020-03-31T15:24:39.2739445Z" ModifiedOn="2020-04-08T14:23:53.7797064Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Spline Mountain (Area) Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-04-08T14:23:53.7797064Z">&lt;P&gt;The Spline Mountain (Area)&amp;nbsp;Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineMountainRenderableSeries.html"&gt;SplineMountainRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Spline Mountain Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-spline-mountain-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-spline-mountain-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Spline-Mountain.png"&gt;&lt;/P&gt;
&lt;H2&gt;Spline Mountain Series Features&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineMountainRenderableSeries.html"&gt;SplineMountainRenderableSeries&lt;/A&gt; class allows to specify &lt;STRONG&gt;Area&lt;/STRONG&gt; brush and&amp;nbsp;&lt;STRONG&gt;Stroke&lt;/STRONG&gt; pen. Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;It is possible to define the &lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt;&amp;nbsp;baseline position for&amp;nbsp;a Mountain&amp;nbsp;Series. &amp;nbsp;All data points that have Y value less than&amp;nbsp;&lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt; will&amp;nbsp;appear downward, else - upward.&lt;/P&gt;
&lt;P&gt;Those values&amp;nbsp;can be assigned via the corresponding methods,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseMountainRenderableSeries~setAreaStyle.html"&gt;setAreaStyle(),&lt;/A&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setStrokeStyle.html"&gt;setStrokeStyle(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setZeroLineY.html"&gt;&lt;EM&gt;setZeroLineY()&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp; Spline Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineMountainRenderableSeries.html"&gt;Spline Mountain Series&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(0xAAFFC9A8, true, 2, null);&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new LinearGradientBrushStyle(0, 0, 0, 1, 0xAAFF8D42, 0x88090E11);&lt;/P&gt;
&lt;P&gt;// Create and configure the Spline Mountain Chart Series&lt;BR&gt;SplineMountainRenderableSeries mountainSeries = new SplineMountainRenderableSeries();&lt;BR&gt;mountainSeries.setStrokeStyle(strokeStyle);&lt;BR&gt;mountainSeries.setAreaStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the chart series&lt;BR&gt;mountainSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), mountainSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ISciChartSurface surface;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokeStyle = new SolidPenStyle(0xAAFFC9A8, 2, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BrushStyle fillStyle = new LinearGradientBrushStyle(0, 0, 0, 1, 0xAAFF8D42, 0x88090E11);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and configure the Spline Mountain Chart Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SplineMountainRenderableSeries mountainSeries = new SplineMountainRenderableSeries();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainSeries.StrokeStyle = strokeStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainSeries.AreaStyle = fillStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a DataSeries for the chart series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;double, double&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assume some data has been added to the dataSeries here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // dataSeries.append(X, Y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign the dataSeries to the chart series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainSeries.DataSeries = dataSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.RenderableSeries.Add(mountainSeries);&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;// Create and configure the Mountain Chart Series&lt;BR&gt;final SplineMountainRenderableSeries mountainSeries = sciChartBuilder.newSplineMountainSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xAAFFC9A8)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAreaFillLinearGradientColors(0xAAFF8D42,0x88090E11)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), mountainSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a&amp;nbsp;Spline Mountain Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Renderable Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineMountainRenderableSeries.html"&gt;SplineMountainRenderableSeries&lt;/A&gt;, however, allows to specify how a gap should appear. There are several modes defined in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;&lt;FONT color=#0066cc&gt;LineDrawMode&lt;/FONT&gt;&lt;/A&gt; enumeration, which can be applied via the&amp;nbsp;&lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Please note, even though Gaps via NaN values in spline series is supported, ClosedGaps feature, which is available in &lt;A href="https://www.scichart.com/documentation/android/current/webframe.html#SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;regular (non-spline)&lt;/A&gt; series, aren't supported with splines.&lt;/P&gt;
&lt;H2&gt;Add Point Markers onto a Spline Mountain Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Mountain Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;&lt;FONT color=#0066cc&gt;PointMarker&lt;/FONT&gt;&lt;/A&gt;. To add Point Markers to a Mountain Series, call the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPointMarker.html"&gt;setPointMarker()&lt;/A&gt;&lt;/EM&gt; method. For more info and code examples,&amp;nbsp;please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;&lt;FONT color=#0066cc&gt;PointMarkers API&lt;/FONT&gt;&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="66dc8609-1139-4434-a55f-962cf3279723" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineMountainRenderableSeries" BuildFlags="">
                    <Title m="2020-03-31T15:41:56.8231316Z">SplineMountainRenderableSeries Class</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="bdd9723e-ba27-4f57-8681-e6c81aed787c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="96b54301-c0da-4a46-b387-183ccfcac299" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="04467e64-7f3d-4087-b591-073ec9fc3b3a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5a224024-02a5-435e-a4d6-c268190a12ac" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fabc0772-ed02-471b-9956-5767d17f1554" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7f5a6207-a081-4a74-add0-1fb3e36b2806" Status="New Topic" CreatedOn="2019-02-12T17:47:58.7917386Z" ModifiedOn="2019-02-12T17:48:50.4332456Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Digital (Step) Line Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:48:50.4332456Z">&lt;P&gt;&lt;STRONG&gt;Line Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Line Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-line-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-line-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/LineChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;FastLineRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the Line RenderableSeries&lt;BR&gt;lineSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a Stroke Pen and assign it&lt;BR&gt;PenStyle strokePen = new SolidPenStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27), true, 2f, null);&lt;BR&gt;lineSeries.setStrokeStyle(strokePen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above, a &lt;STRONG&gt;Line Series&lt;/STRONG&gt; instance is created. It is assigned to draw the data that is provided by&amp;nbsp;the &lt;STRONG&gt;DataSeries&lt;/STRONG&gt; assigned to it. The line is drawn with a &lt;STRONG&gt;Pen&lt;/STRONG&gt; provided by the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; instance. Finally, the Line Series is added to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.RenderableSeriesCollection.html"&gt;RenderableSeriesCollection&lt;/A&gt; of&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Using Chart Builders&lt;/H2&gt;
&lt;P&gt;Similarly, a Line Series can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create and configure a Line Series&lt;/P&gt;
&lt;P&gt;FastLineRenderableSeries lineSeries = sciChartBuilder.newLineSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.argb(0xFF, 0x27, 0x9B, 0x27))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Line RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), lineSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the corresponding documentation section to learn more about the&amp;nbsp;DataSeries API and&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Digital (Step) Line Series&lt;/H2&gt;
&lt;P&gt;To create a &lt;STRONG&gt;Digital Line&lt;/STRONG&gt;, call the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries~setIsDigitalLine.html"&gt;setIsDigitalLine()&lt;/A&gt;&lt;/EM&gt; method, passing in True.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DigitalLineChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Line Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastLineRenderableSeries.html"&gt;FastLineRenderableSeries&lt;/A&gt;, however, allows to specify how a gap should appear. There are several modes defined in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.LineDrawMode.html"&gt;&lt;FONT color=#0066cc&gt;LineDrawMode&lt;/FONT&gt;&lt;/A&gt; enumeration, which can be applied via the&amp;nbsp;&lt;EM&gt;setDrawNaNAs()&lt;/EM&gt; method&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Add Point Markers onto a Line Series&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 339px; WIDTH: 610px" border=0 alt="" src="images/UsePointMarkers_framed.png" width=650 height=346&gt;&lt;/P&gt;
&lt;P&gt;Every data point of a Line Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;PointMarker&lt;/A&gt;. To add Point Markers to the Line Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;pointMarker.setFillStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to a LineSeries&lt;BR&gt;IRenderableSeries lineSeries = new FastLineRenderableSeries();&lt;BR&gt;lineSeries.setPointMarker(pointMarker);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about Point Markers, please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarkers API&lt;/A&gt; article.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;This feature can be used to create a&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;, if StrokeStyle&amp;nbsp;contains a transparent Pen.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Paint Line Segments With Different Colors&lt;/H2&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 351px; WIDTH: 623px" border=0 alt="" src="2D_Chart_Types_files/PalettedLine_framed.png" width=721 height=379&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Such appearance&amp;nbsp;can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows to change color of Line Series between any two data points. To do this, a custom &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create&amp;nbsp;a PaletteProvider instance and assign it to the Line Series&lt;/P&gt;
&lt;P&gt;IPaletteProvider paletteProvider = new ColoredLinePaletteProvider();&lt;/P&gt;
&lt;P&gt;lineSeries.setPaletteProvider(paletteProvider);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d792ff3f-5429-4186-8947-790b9d6bcee5" Status="New Topic" CreatedOn="2019-02-12T17:52:23.4565607Z" ModifiedOn="2019-02-12T17:52:30.2525143Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Digital (Step) Mountain Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T17:52:23.4565607Z">&lt;p&gt; &lt;/p&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" Status="New Topic" CreatedOn="2016-09-02T12:00:20.1263227Z" ModifiedOn="2019-02-12T19:14:38.815722Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Uniform Heatmap Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:14:38.815722Z">&lt;P&gt;&lt;STRONG&gt;Heatmap&amp;nbsp;Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Impulse Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-heatmap-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-heatmap-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/HeatmapChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Heatmap Series Features&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;class is&amp;nbsp;designed to display &lt;STRONG&gt;2D array of data&lt;/STRONG&gt;. Every item in the array is represented as a colored rectangle - a&amp;nbsp;&lt;STRONG&gt;cell.&lt;/STRONG&gt; The color depends on corresponding item’s &lt;STRONG&gt;ZValue&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;All ZValues should fall into the range determined by the &lt;STRONG&gt;Minimum&lt;/STRONG&gt;, &lt;STRONG&gt;Maximum&lt;/STRONG&gt; values (they may go beyond it though). These values can be set via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries~setMinimum.html"&gt;setMinimum(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries~setMaximum.html"&gt;setMaximum()&lt;/A&gt;&lt;/EM&gt; methods.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;Also,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;requires a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ColorMap.html"&gt;&lt;STRONG&gt;ColorMap&lt;/STRONG&gt;&lt;/A&gt; to be set. The &lt;STRONG&gt;ColorMap&lt;/STRONG&gt; determines how a gradient color transition occurs. It uses the&amp;nbsp;&lt;STRONG&gt;LinearGradient&lt;/STRONG&gt; shader internally, so please refer to the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/LinearGradient.html"&gt;Android documentation&lt;/A&gt; for more info.&amp;nbsp;The&lt;/SPAN&gt; &lt;SPAN&gt;ColorMap can be applied via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries~setColorMap.html"&gt;&lt;EM&gt;setColorMap()&lt;/EM&gt;&lt;/A&gt; method.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;Optionally, a &lt;STRONG&gt;PaletteProvider&lt;/STRONG&gt; can be applied to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;to change the color&amp;nbsp;for particular cells. Scroll down&amp;nbsp;this article&amp;nbsp;to the last section&amp;nbsp;for more info.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Show Values&amp;nbsp;for a&amp;nbsp;Heatmap&lt;/H2&gt;
&lt;P&gt;Additionally,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;allows to configure a heatmap to show&amp;nbsp;&lt;STRONG&gt;ZValues&lt;/STRONG&gt; in its cells. This option can be enabled via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries~getDrawTextInCell.html"&gt;setDrawTextInCell()&lt;/A&gt;&lt;/EM&gt; method. Labels can be styled&amp;nbsp;via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries~setCellTextStyle.html"&gt;setCellTextStyle()&lt;/A&gt;&lt;/EM&gt; method. It requires a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt; object to be passed in. More&amp;nbsp;details about Brushes and Pens used in SciChart can be found&amp;nbsp;in the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/HeatmapChartwithText_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Add a Legend onto a&amp;nbsp;Heatmap Chart&lt;/H2&gt;
&lt;P&gt;There is a special view designed to be used in tandem with&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt; called&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap.html"&gt;SciChartHeatmapColourMap&lt;/A&gt;.&amp;nbsp;It is not required by a Heatmap and is&amp;nbsp;fully optional. It can be placed anywhere on the layout.&lt;/P&gt;
&lt;P&gt;Similarly to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap.html"&gt;SciChartHeatmapColourMap&lt;/A&gt;&amp;nbsp;type allows to set the &lt;STRONG&gt;Minimum&lt;/STRONG&gt;, &lt;STRONG&gt;Maximum&lt;/STRONG&gt; values and apply a &lt;STRONG&gt;ColorMap&lt;/STRONG&gt;. All these can be&amp;nbsp;assigned via the corresponding methods:&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap~setMinimum.html"&gt;setMinimum()&lt;/A&gt;&lt;/EM&gt;,&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap~setMaximum.html"&gt;setMaximum(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap~setColorMap.html"&gt;setColorMap().&lt;/A&gt;&lt;/EM&gt; The numeric labels can be formatted by apply &lt;STRONG&gt;TextFormatting&lt;/STRONG&gt; to them via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap~setTextFormat.html"&gt;setTextFormat()&lt;/A&gt;&lt;/EM&gt; method.&lt;/P&gt;
&lt;P&gt;Additionally, there is&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap~setOrientation.html"&gt;&lt;EM&gt;setOrientation()&lt;/EM&gt;&lt;/A&gt; method to specify whether the legend appears &lt;STRONG&gt;Horizontal&lt;/STRONG&gt; or &lt;STRONG&gt;Vertical&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;Create a Heatmap Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries.html"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;instance, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a Heatmap Series&lt;BR&gt;FastUniformHeatmapRenderableSeries heatmapRenderableSeries = new FastUniformHeatmapRenderableSeries&amp;lt;&amp;gt;();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specify ZValue range&lt;BR&gt;heatmapRenderableSeries.setMinimum(0);&lt;BR&gt;heatmapRenderableSeries.setMaximum(200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a ColorMap&lt;BR&gt;ColorMap colorMap = new ColorMap(new int[]{DarkBlue, CornflowerBlue, DarkGreen, Chartreuse, Yellow, Red}, new float[]{0f, 0.2f, 0.4f, 0.6f, 0.8f, 1});&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the ColorMap&lt;BR&gt;&amp;nbsp;heatmapRenderableSeries.setColorMap(colorMap);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a ColorMap Legend&lt;/P&gt;
&lt;P&gt;// It requires to be&amp;nbsp;added to the Layout&amp;nbsp;somewhere&lt;/P&gt;
&lt;P&gt;SciChartHeatmapColourMap colorMapView = new SciChartHeatmapColourMap(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Configure the ColorMap Legend&lt;/P&gt;
&lt;P&gt;colorMapView.setColorMap(heatmapRenderableSeries.getColorMap());&lt;BR&gt;colorMapView.setMinimum(heatmapRenderableSeries.getMinimum());&lt;BR&gt;colorMapView.setMaximum(heatmapRenderableSeries.getMaximum());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Heatmap&lt;BR&gt;UniformHeatmapDataSeries&amp;lt;Integer, Integer, Double&amp;gt; dataSeries = new UniformHeatmapDataSeries&amp;lt;&amp;gt;(Integer.class, Integer.class, Double.class, WIDTH, HEIGHT);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.updateZValues(Double[] ZValues);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the Heatmap&lt;BR&gt;heatmapRenderableSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Heatmap to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), heatmapRenderableSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure a&amp;nbsp;Heatmap Series&lt;/P&gt;
&lt;P&gt;FastUniformHeatmapRenderableSeries heatmapRenderableSeries = sciChartBuilder.newUniformHeatmap()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withColorMap(new ColorMap(new int[]{DarkBlue, CornflowerBlue, DarkGreen, Chartreuse, Yellow, Red}, new float[]{0f, 0.2f, 0.4f, 0.6f, 0.8f, 1}))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinimum(0)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMaximum(200)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a ColorMap Legend&lt;/P&gt;
&lt;P&gt;// It requires to be added to the Layout somewhere&lt;/P&gt;
&lt;P&gt;SciChartHeatmapColourMap colorMapView = new SciChartHeatmapColourMap(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Configure the ColorMap Legend&lt;/P&gt;
&lt;P&gt;colorMapView.setColorMap(heatmapRenderableSeries.getColorMap());&lt;/P&gt;
&lt;P&gt;colorMapView.setMinimum(heatmapRenderableSeries.getMinimum());&lt;BR&gt;colorMapView.setMaximum(heatmapRenderableSeries.getMaximum());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Heatmap&lt;BR&gt;UniformHeatmapDataSeries&amp;lt;Integer, Integer, Double&amp;gt; dataSeries = new UniformHeatmapDataSeries&amp;lt;&amp;gt;(Integer.class, Integer.class, Double.class, WIDTH, HEIGHT);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.updateZValues(Double[] ZValues);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assign the dataSeries to the Heatmap&lt;BR&gt;heatmapRenderableSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Heatmap to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), heatmapRenderableSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above creates a Heatmap with a ColorMap that has gradient transitions between five colors&amp;nbsp;and a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartHeatmapColourMap.html"&gt;SciChartHeatmapColourMap&lt;/A&gt;&amp;nbsp;Legend for it.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Change Heatmap Colors With PaletteProviders&lt;/H2&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/UseHeatmapPaletteProvider_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows to change the&amp;nbsp;color&amp;nbsp;for any data point of a&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;object. To do this, a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IUniformHeatmapPaletteProvider.html"&gt;IUniformHeatmapPaletteProvider&lt;/A&gt;&amp;nbsp;has to be passed in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a PaletteProvider instance and assign it to the chart series&lt;/P&gt;
&lt;P&gt;IPaletteProvider paletteProvider = new CustomUniformHeatMapProvider();&lt;/P&gt;
&lt;P&gt;heatmapSeries.setPaletteProvider(paletteProvider);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article to learn more about this.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0648619c-054f-4c48-8efb-61f14f6b5465" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f2bf2bd3-335c-4244-b68e-9525c2492794" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5b271113-9453-47e2-8d60-f5c0951f4eae" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastUniformHeatmapRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7cf91fa8-841d-4bb8-adbd-44a9dd73b238" Status="New Topic" CreatedOn="2016-09-02T12:00:42.7014721Z" ModifiedOn="2019-02-12T19:21:57.489815Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Band Series type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:21:57.489815Z">&lt;P&gt;&lt;STRONG&gt;Band Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries.html"&gt;FastBandRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Band Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-chart-example-band-series-chart/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-band-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/BandChart_framed.png"&gt;&lt;/P&gt;
&lt;H1&gt;Band Series Features&lt;/H1&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;High-Low Fill&lt;/STRONG&gt; or &lt;STRONG&gt;Band Series&lt;/STRONG&gt; are provided by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries.html"&gt;FastBandRenderableSeries&lt;/A&gt;&amp;nbsp;type. This accepts data in a triplet form&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;(X, Y1, Y2) and renders two lines with a polygon, which changes color depending on whether Y1&amp;gt;Y2 or vice versa&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries.html"&gt;FastBandRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;class allows to specify&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;Fill, FillY1&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;brushes and&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Stroke, StrokeY1&lt;/STRONG&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;pens. Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/PenStyle,%20BrushStyle%20and%20FontStyle.html"&gt;Styling and Theming section&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;to learn more about Brushes and Pens used in SciChart.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Digital (Step) Band Series&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;Also,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries.html"&gt;FastBandRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;can be configured to draw&amp;nbsp;a&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;Digital (Step)&amp;nbsp;Band Series&lt;/STRONG&gt;&lt;SPAN&gt;. For this,&amp;nbsp;call the&amp;nbsp;&lt;/SPAN&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries~setIsDigitalLine.html"&gt;setIsDigitalLine()&lt;/A&gt;&lt;/EM&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;method, passing in True.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DigitalBandChart_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a Band Series&lt;/H2&gt;
&lt;P&gt;To create a Band Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Band Series&lt;BR&gt;FastBandRenderableSeries bandSeries = new FastBandRenderableSeries&amp;lt;&amp;gt;();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create PenStyles for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(0xFFFF1919, true, 2, null);&lt;BR&gt;PenStyle strokeY1Style = new SolidPenStyle(0xFF279B27, true, 2, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the StrokeStyle&lt;BR&gt;bandSeries.setStrokeStyle(strokeStyle);&lt;BR&gt;bandSeries.setStrokeY1Style(strokeY1Style);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create BrushStyles for Fill&lt;BR&gt;BrushStyle brushStyle = new SolidBrushStyle(0x33279B27);&lt;BR&gt;BrushStyle brushY1Style = new SolidBrushStyle(0x33FF1919);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the BrushStyle&lt;BR&gt;bandSeries.setFillBrushStyle(brushStyle);&lt;BR&gt;bandSeries.setFillY1BrushStyle(brushY1Style);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;BR&gt;IXyyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;BR&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y, Y1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the RenderableSeries&lt;BR&gt;bandSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), bandSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y, Y1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure a Band Series&lt;/P&gt;
&lt;P&gt;final FastBandRenderableSeries renderableSeries = sciChartBuilder.newBandSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFillColor(0x33279B27).withFillY1Color(0x33FF1919)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xFFFF1919).withStrokeY1Style(0xFF279B27)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), mountainSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding PointMarkers onto a Band Series&lt;/H2&gt;
&lt;P&gt;Every&amp;nbsp;pair of (X, Y) and (X, Y1) data points&amp;nbsp;of a Band Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;PointMarker&lt;/A&gt;. Please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarkers API&lt;/A&gt; article for more info.&lt;/P&gt;
&lt;P&gt;To add Point Markers to&amp;nbsp;a Band Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;&amp;nbsp;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;&amp;nbsp;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;&amp;nbsp;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;&amp;nbsp;pointMarker.setFillStyle(fillStyle);&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to a&amp;nbsp;Band Series&lt;BR&gt;&amp;nbsp;IRenderableSeries bandSeries= new FastBandRenderableSeries();&lt;BR&gt;&amp;nbsp;bandSeries.setPointMarker(pointMarker);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5ffe8366-34fa-4a8a-bed0-3275b65f90bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBandRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eb43be02-4df3-49cc-b76e-c163585b0492" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f7e58fac-9aaf-4ce1-91fb-df763f2bedc3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e84c916f-7be4-4730-b7ac-7c477dd3e1bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="65dc5a78-3aba-405f-b0ad-344e8b08f28f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f8227f73-d97e-4aa4-a960-d709998c446e" Status="New Topic" CreatedOn="2020-03-31T15:43:55.8196963Z" ModifiedOn="2020-04-08T14:32:58.077882Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Spline Band Series type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-04-08T14:32:58.077882Z">&lt;P&gt;&lt;STRONG&gt;The Spline Band Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineBandRenderableSeries.html"&gt;SplineBandRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Band Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-spline-band-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-spline-band-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Spline_band.png"&gt;&lt;/P&gt;
&lt;H1&gt;Spline Band Series Features&lt;/H1&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Spline High-Low Fill&lt;/STRONG&gt; or &lt;STRONG&gt;Spline Band Series&lt;/STRONG&gt; are provided by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineBandRenderableSeries.html"&gt;SplineBandRenderableSeries&lt;/A&gt;&amp;nbsp;type. This accepts data in a triplet form&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;(X, Y1, Y2) and renders two lines with a polygon, which changes color depending on whether Y1&amp;gt;Y2 or vice versa&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineBandRenderableSeries.html"&gt;SplineBandRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;class allows to specify&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;STRONG&gt;Fill, FillY1&amp;nbsp;&lt;/STRONG&gt;&lt;SPAN&gt;brushes and&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;Stroke, StrokeY1&lt;/STRONG&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;pens. Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/PenStyle,%20BrushStyle%20and%20FontStyle.html"&gt;Styling and Theming section&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;to learn more about Brushes and Pens used in SciChart.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Create a Spline Band Series&lt;/H2&gt;
&lt;P&gt;To create a Band Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;// Create a Spline Band Series&lt;BR&gt;SplineBandRenderableSeries bandSeries = new SplineBandRenderableSeries();&lt;/P&gt;
&lt;P&gt;// Create PenStyles for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(0xFFFF1919, true, 2, null);&lt;BR&gt;PenStyle strokeY1Style = new SolidPenStyle(0xFF279B27, true, 2, null);&lt;/P&gt;
&lt;P&gt;// Apply the StrokeStyle&lt;BR&gt;bandSeries.setStrokeStyle(strokeStyle);&lt;BR&gt;bandSeries.setStrokeY1Style(strokeY1Style);&lt;/P&gt;
&lt;P&gt;// Create BrushStyles for Fill&lt;BR&gt;BrushStyle brushStyle = new SolidBrushStyle(0x33279B27);&lt;BR&gt;BrushStyle brushY1Style = new SolidBrushStyle(0x33FF1919);&lt;/P&gt;
&lt;P&gt;// Apply the BrushStyle&lt;BR&gt;bandSeries.setFillBrushStyle(brushStyle);&lt;BR&gt;bandSeries.setFillY1BrushStyle(brushY1Style);&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;BR&gt;IXyyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y, Y1);&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the RenderableSeries&lt;BR&gt;bandSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;// Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), bandSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;// Create a Spline Band Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SplineBandRenderableSeries bandSeries = new SplineBandRenderableSeries();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create PenStyles for Stroke&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokeStyle = new SolidPenStyle(0xFFFF1919, 2, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokeY1Style = new SolidPenStyle(0xFF279B27, 2, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply the StrokeStyle&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.StrokeStyle = strokeStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.StrokeY1Style = strokeY1Style;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create BrushStyles for Fill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BrushStyle brushStyle = new SolidBrushStyle(0x33279B27);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BrushStyle brushY1Style = new SolidBrushStyle(0x33FF1919);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply the BrushStyle&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.FillBrushStyle = brushStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.FillY1BrushStyle = brushY1Style;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a DataSeries for the Scatter Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XyyDataSeries&amp;lt;double, double&amp;gt; dataSeries = new XyyDataSeries&amp;lt;double, double&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assume some data has been added to the dataSeries here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // dataSeries.append(X, Y, Y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign the dataSeries to the RenderableSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.DataSeries = dataSeries;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.RenderableSeries.Add(bandSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IXyyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyyDataSeries(Double.class, Double.class);&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y, Y1);&lt;/P&gt;
&lt;P&gt;// Create and configure a Band Series&lt;BR&gt;final SplineBandRenderableSeries rSeries = sciChartBuilder.newSplineBandSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFillColor(0x33279B27).withFillY1Color(0x33FF1919)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xFFFF1919).withStrokeY1Style(0xFF279B27)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), rSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding PointMarkers onto a Spline Band Series&lt;/H2&gt;
&lt;P&gt;Every&amp;nbsp;pair of (X, Y) and (X, Y1) data points&amp;nbsp;of a Band Series can be marked with a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.pointmarkers.IPointMarker.html"&gt;PointMarker&lt;/A&gt;. Please refer to the&amp;nbsp;&lt;A href="ee6093db-1eb7-4221-8866-6505a150083f"&gt;PointMarkers API&lt;/A&gt; article for more info.&lt;/P&gt;
&lt;P&gt;To add Point Markers to&amp;nbsp;a Spline&amp;nbsp;Band Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;&amp;nbsp;IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;&amp;nbsp;pointMarker.setSize(40,40);&lt;BR&gt;// Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Green, true, 2, null);&lt;BR&gt;&amp;nbsp;pointMarker.setStrokeStyle(strokeStyle);&lt;BR&gt;// Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;BrushStyle fillStyle = new SolidBrushStyle(ColorUtil.Red);&lt;BR&gt;&amp;nbsp;pointMarker.setFillStyle(fillStyle);&lt;BR&gt;// Apply the PointMarker to a Band Series&lt;BR&gt;&amp;nbsp;IRenderableSeries bandSeries= new SplineBandRenderableSeries();&lt;BR&gt;&amp;nbsp;bandSeries.setPointMarker(pointMarker);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a Triangle PointMarker instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IPointMarker pointMarker = new TrianglePointMarker();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.SetSize(40, 40);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a PenStyle for Stroke&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PenStyle strokeStyle = new SolidPenStyle(Color.Green,2, true, null);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.StrokeStyle = strokeStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a BrushStyle for Fill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; BrushStyle fillStyle = new SolidBrushStyle(Color.Red);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker.FillStyle = fillStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply the PointMarker to a Band Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IRenderableSeries bandSeries = new SplineBandRenderableSeries();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.PointMarker = pointMarker;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5ffe8366-34fa-4a8a-bed0-3275b65f90bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SplineBandRenderableSeries" BuildFlags="">
                    <Title m="2020-03-31T15:54:30.6247399Z">SplineBandRenderableSeries Class</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eb43be02-4df3-49cc-b76e-c163585b0492" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f7e58fac-9aaf-4ce1-91fb-df763f2bedc3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e84c916f-7be4-4730-b7ac-7c477dd3e1bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="65dc5a78-3aba-405f-b0ad-344e8b08f28f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="121e373b-412a-4846-8fa8-862f0e716fa2" Status="New Topic" CreatedOn="2016-09-02T12:02:15.7015902Z" ModifiedOn="2019-02-12T19:24:22.2186389Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Stacked Column Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:24:22.2186389Z">&lt;P&gt;Stacked Column series can be&amp;nbsp;created&amp;nbsp;by&amp;nbsp;combining of &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;/&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.HorizontallyStackedColumnsCollection.html"&gt;HorizontallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;classes.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;&amp;nbsp;shares many properties with the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;FastColumnRenderableSeries&lt;/A&gt; class, with the added feature that columns automatically stack by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.HorizontallyStackedColumnsCollection.html"&gt;HorizontallyStackedColumnCollection&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Stacked Column Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-chart-stacked-column-chart-grouped-side-by-side-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-stacked-column-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/StackedColumnChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a Stacked Column Series&lt;/H2&gt;
&lt;P&gt;To create a Stacked&amp;nbsp;Column Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// declare axes for chart&lt;/P&gt;
&lt;P&gt;final IAxis xAxis = sciChartBuilder.newNumericAxis().build();&lt;BR&gt;final IAxis yAxis = sciChartBuilder.newNumericAxis().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// declare arrays with data to append&lt;/P&gt;
&lt;P&gt;final double[] porkData = new double[]{10, 13, 7, 16, 4, 6, 20, 14, 16, 10, 24, 11};&lt;BR&gt;final double[] vealData = new double[]{12, 17, 21, 15, 19, 18, 13, 21, 22, 20, 5, 10};&lt;BR&gt;final double[] tomatoesData = new double[]{7, 30, 27, 24, 21, 15, 17, 26, 22, 28, 21, 22};&lt;BR&gt;final&amp;nbsp;double[] cucumberData = new double[]{16, 10, 9, 8, 22, 14, 12, 27, 25, 23, 17, 17};&lt;BR&gt;final&amp;nbsp;double[] pepperData = new double[]{7, 24, 21, 11, 19, 17, 14, 27, 26, 22, 28, 16};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// declare and append data into data series&lt;/P&gt;
&lt;P&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds1 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).withSeriesName("Pork Series").build();&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds2 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).withSeriesName("Veal Series").build();&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds3 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).withSeriesName("Tomato Series").build();&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds4 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).withSeriesName("Cucumber Series").build();&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds5 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).withSeriesName("Pepper Series").build();&lt;/P&gt;
&lt;P&gt;final int data = 1992;&lt;BR&gt;for (int i = 0; i &amp;lt; porkData.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double xValue = data + i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds1.append(xValue, porkData[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds2.append(xValue, vealData[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds3.append(xValue, tomatoesData[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds4.append(xValue, cucumberData[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds5.append(xValue, pepperData[i]);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// declare few StackedColumnRenderableSeries and assign data series to draw&lt;/P&gt;
&lt;P&gt;final StackedColumnRenderableSeries porkSeries = sciChartBuilder.newStackedColumn().withDataSeries(ds1).withFillColor(0xff226fb7).withStrokeStyle(0xff22579D, 0f).build();&lt;BR&gt;final StackedColumnRenderableSeries vealSeries = sciChartBuilder.newStackedColumn().withDataSeries(ds2).withFillColor(0xffff9a2e).withStrokeStyle(0xffBE642D, 0f).build();&lt;BR&gt;final StackedColumnRenderableSeries tomatoSeries = sciChartBuilder.newStackedColumn().withDataSeries(ds3).withFillColor(0xffdc443f).withStrokeStyle(0xffA33631, 0f).build();&lt;BR&gt;final StackedColumnRenderableSeries cucumberSeries = sciChartBuilder.newStackedColumn().withDataSeries(ds4).withFillColor(0xffaad34f).withStrokeStyle(0xff73953D, 0f).build();&lt;BR&gt;final StackedColumnRenderableSeries pepperSeries = sciChartBuilder.newStackedColumn().withDataSeries(ds5).withFillColor(0xff8562b4).withStrokeStyle(0xff64458A, 0f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// wrap porkSeries and vealSeries into VerticallyStackedColumnCollection to stack them vertically&lt;/P&gt;
&lt;P&gt;final VerticallyStackedColumnsCollection verticalCollection1 = new VerticallyStackedColumnsCollection();&lt;BR&gt;verticalCollection1.add(porkSeries);&lt;BR&gt;verticalCollection1.add(vealSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// wrap cucumberSeries, cucumberSeries and pepperSeriesinto VerticallyStackedColumnCollection to stack them vertically&lt;/P&gt;
&lt;P&gt;final VerticallyStackedColumnsCollection verticalCollection2 = new VerticallyStackedColumnsCollection();&lt;BR&gt;verticalCollection2.add(tomatoSeries);&lt;BR&gt;verticalCollection2.add(cucumberSeries);&lt;BR&gt;verticalCollection2.add(pepperSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// wrap previously created VerticallyStackedColumnCollection into HorizontallyStackedColumnsCollection to stack resulting series horizontally&lt;/P&gt;
&lt;P&gt;final HorizontallyStackedColumnsCollection columnsCollection = new HorizontallyStackedColumnsCollection();&lt;BR&gt;columnsCollection.setSpacing(0f);&lt;/P&gt;
&lt;P&gt;columnsCollection.add(verticalCollection1);&lt;BR&gt;columnsCollection.add(verticalCollection2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// init chart&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), columnsCollection);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), new RolloverModifier());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getChartModifiers(), new ZoomExtentsModifier());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;VerticallyStackedColumnCollection&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;is a special&amp;nbsp;renderable series which allows to stack&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;&amp;nbsp;vertically. Basically it's a collection and the order of items in this collection determines how series should be stacked and drawn ( the first item will be drawn as regular column series and the rest will be stacked on top of each other). You can create several instances of &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;class and add them as renderable series into chart if you&amp;nbsp;have&amp;nbsp;several instances of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;&amp;nbsp;which should be stacked independently.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;HorizontallyStackedColumnCollection&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.HorizontallyStackedColumnsCollection.html"&gt;HorizontallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;is similar to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;and the only difference is that it stacks its&amp;nbsp;items horizontally. By default it supports stacking&amp;nbsp;of &lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedColumnsCollection.html"&gt;VerticallyStackedColumnCollection&lt;/A&gt;&amp;nbsp;if you need to have both vertical and horizontal stacking in your application.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1" Status="New Topic" CreatedOn="2016-09-02T12:03:50.8610912Z" ModifiedOn="2019-02-12T19:24:45.6849352Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Stacked Mountain Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:24:45.6849352Z">&lt;P&gt;Stacked Mountain&amp;nbsp;series can be&amp;nbsp;created&amp;nbsp;by&amp;nbsp;using&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedMountainRenderableSeries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;VerticallyStackedMountainCollection&lt;/A&gt; classes.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedMountainRenderableSeries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt;&amp;nbsp;shares many properties with the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastMountainRenderableSeries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; class, with the added feature that mountains automatically stack by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;VerticallyStackedMountainCollection&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Stacked Mountain Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-chart-stacked-mountain-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-stacked-mountain-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/StackedMountainChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Vertically Stacked Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a Vertically Stacked Mountain Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// declare arrays with data to append&lt;/P&gt;
&lt;P&gt;final double[] yValues1 = new double[] { 4.0,&amp;nbsp; 7,&amp;nbsp;&amp;nbsp;&amp;nbsp; 5.2,&amp;nbsp; 9.4,&amp;nbsp; 3.8,&amp;nbsp; 5.1, 7.5,&amp;nbsp; 12.4, 14.6, 8.1, 11.7, 14.4, 16.0, 3.7, 5.1, 6.4, 3.5, 2.5, 12.4, 16.4, 7.1, 8.0, 9.0 };&lt;BR&gt;final double[] yValues2 = new double[] { 15.0, 10.1, 10.2, 10.4, 10.8, 1.1, 11.5, 3.4,&amp;nbsp; 4.6,&amp;nbsp; 0.1, 1.7, 14.4, 6.0, 13.7, 10.1, 8.4, 8.5, 12.5, 1.4, 0.4, 10.1, 5.0, 1.0 }; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// declare axes for chart&lt;/P&gt;
&lt;P&gt;final IAxis xAxis = sciChartBuilder.newNumericAxis().build();&lt;BR&gt;final IAxis yAxis = sciChartBuilder.newNumericAxis().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// declare and append data into data series&lt;/P&gt;
&lt;P&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds1 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).build();&lt;BR&gt;final IXyDataSeries&amp;lt;Double, Double&amp;gt; ds2 = sciChartBuilder.newXyDataSeries(Double.class, Double.class).build();&lt;/P&gt;
&lt;P&gt;for (int i = 0; i &amp;lt; yValues1.length; i++) ds1.append((double) i, yValues1[i]);&lt;BR&gt;for (int i = 0; i &amp;lt; yValues2.length; i++) ds2.append((double) i, yValues2[i]);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create few StackedMountainRenderable instances and assign data series to draw&lt;/P&gt;
&lt;P&gt;final StackedMountainRenderableSeries s1 = sciChartBuilder.newStackedMountain().withDataSeries(ds1).withLinearGradientColors(0xDDDBE0E1, 0x88B6C1C3).build();&lt;BR&gt;final StackedMountainRenderableSeries s2 = sciChartBuilder.newStackedMountain().withDataSeries(ds2).withLinearGradientColors(0xDDACBCCA, 0x88439AAF).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// wrap declared renderable series into VerticallyStackedMountainCollection to stack them vertically&lt;/P&gt;
&lt;P&gt;final VerticallyStackedMountainsCollection seriesCollection = new VerticallyStackedMountainsCollection();&lt;/P&gt;
&lt;P&gt;seriesCollection.add(s1);&lt;BR&gt;seriesCollection.add(s2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// init chart&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), seriesCollection);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;VerticallyStackedMountainsCollection&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;VerticallyStackedMountainCollection&lt;/A&gt;&amp;nbsp;is a special&amp;nbsp;renderable series which allows to stack&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedColumnRenderableSeries.html"&gt;&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedMountainRenderableSeries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt;&amp;nbsp;vertically. Basically it's a collection and the order of items in this collection determines how series should be stacked and drawn ( the first item will be drawn as regular mountain series and the rest will be stacked on top of each other). You can create several instances of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.VerticallyStackedMountainsCollection.html"&gt;VerticallyStackedMountainCollection&lt;/A&gt;&amp;nbsp;class and add them as renderable series into chart if you&amp;nbsp;have&amp;nbsp;several instances of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.StackedMountainRenderableSeries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt;&amp;nbsp;class which should be&amp;nbsp;stacked independently.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="24d13db2-562d-4d3a-a86e-583e70608a27" Status="New Topic" CreatedOn="2016-09-02T12:04:03.1884392Z" ModifiedOn="2019-02-12T19:06:49.4018118Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Impulse (Stem) Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:06:49.4018118Z">&lt;P&gt;&lt;STRONG&gt;Impulse&amp;nbsp;Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastImpulseRenderableSeries.html"&gt;FastImpulseRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Impulse Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-impulse-stem-chart-example/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-impulse-stem-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ImpulseChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Impulse Series Features&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;Impulse Series&lt;/STRONG&gt; is a hybrid of&amp;nbsp;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;Column Series&lt;/A&gt; and&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;.&amp;nbsp;So&amp;nbsp;all three have&amp;nbsp;their most important&amp;nbsp;features in common.&lt;/P&gt;
&lt;P&gt;Like the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries.html"&gt;XyScatterRenderableSeries&lt;/A&gt; type,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastImpulseRenderableSeries.html"&gt;FastImpulseRenderableSeries&lt;/A&gt;&amp;nbsp;requires&amp;nbsp;a shape to be specified for &lt;STRONG&gt;Point Markers&lt;/STRONG&gt;.&amp;nbsp;There are several shapes available&amp;nbsp;out of the box, also it is possible to define custom shapes. Please refer to the&amp;nbsp; &lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PointMarkers API&lt;/A&gt;&amp;nbsp;article to learn more.&lt;/P&gt;
&lt;P&gt;And similarly to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastColumnRenderableSeries.html"&gt;FastColumnRenderableSeries&lt;/A&gt; type,&amp;nbsp;&lt;SPAN&gt;it is possible to&lt;/SPAN&gt; &lt;SPAN&gt;specify the baseline position for series' bars. This can be done by&amp;nbsp;setting &lt;STRONG&gt;ZeroLineY&lt;/STRONG&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setZeroLineY.html"&gt;&lt;EM&gt;setZeroLineY()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;method.&amp;nbsp;&lt;SPAN&gt;All data points that have Y value less than&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;will be drawn downwards, else - upwards:&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ImpulseChartBaseline.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&lt;SPAN&gt;Finally, the &lt;STRONG&gt;stem color&lt;/STRONG&gt; can be changed setting &lt;STRONG&gt;StrokeStyle&lt;/STRONG&gt; via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setStrokeStyle.html"&gt;setStrokeStyle()&lt;/A&gt;&lt;/EM&gt; method&amp;nbsp;Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; &lt;FONT size=2&gt;to learn more about Brushes and Pens used in SciChart.&lt;/FONT&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;STRONG&gt;No&lt;/STRONG&gt;&lt;STRONG&gt;te:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Create an Impulse Series&lt;/H2&gt;
&lt;P&gt;To create an Impulse Series, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an Ellipse PointMarker&lt;BR&gt;IPointMarker pointMarker = new EllipsePointMarker();&lt;BR&gt;pointMarker.setSize(40,40);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a PenStyle for Stroke&lt;BR&gt;PenStyle strokeStyle = new SolidPenStyle(ColorUtil.Yellow, true, 2, null);&lt;BR&gt;pointMarker.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a BrushStyle for Fill&lt;BR&gt;BrushStyle markerFillStyle = new SolidBrushStyle(ColorUtil.argb(0xFF, 0x00, 0x66, 0xFF));&lt;BR&gt;pointMarker.setFillStyle(markerFillStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the PointMarker to the Impulse Series&lt;BR&gt;FastImpulseRenderableSeries impulseSeries = new FastImpulseRenderableSeries&amp;lt;&amp;gt;();&lt;BR&gt;impulseSeries.setPointMarker(pointMarker);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply the StrokeStyle&lt;BR&gt;impulseSeries.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Specify position of the baseline&lt;BR&gt;impulseSeries.setZeroLineY(0.2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the RenderableSeries&lt;BR&gt;impulseSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), impulseSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code from above will&amp;nbsp;result in the following chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ImpulseSeries_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;&lt;FONT color=#0066cc&gt;Chart Builders&lt;/FONT&gt;&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an Ellipse PointMarker&lt;/P&gt;
&lt;P&gt;EllipsePointMarker pointMarker = sciChartBuilder.newPointMarker(new EllipsePointMarker())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(40, 40)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.Yellow, 2)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.argb(0xFF, 0x00, 0x66, 0xFF))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the Scatter Series&lt;BR&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries(Double.class, Double.class);&lt;BR&gt;&amp;nbsp;// Assume some data has been added to the dataSeries here&lt;BR&gt;&amp;nbsp;// dataSeries.append(...);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure a Scatter Series&lt;/P&gt;
&lt;P&gt;IRenderableSeries impulseSeries = sciChartBuilder.newImpulseSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(ColorUtil.argb(0xFF, 0x00, 0x66, 0xFF))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the Scatter RenderableSeries to the RenderableSeriesCollection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getRenderableSeries(), impulseSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Specify Color for&amp;nbsp;Individual Bars&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;This can be achieved with the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/PaletteProvider%20API.html"&gt;PaletteProvider API&lt;/A&gt;&lt;SPAN&gt;. It allows to change the fill&amp;nbsp;color of any bar within an Impulse Series. To do this, a custom PaletteProvider that implements&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;and IPointMarkerPaletteProvider&amp;nbsp;has to be provided to the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;method.&amp;nbsp; Please refer to the&amp;nbsp;&lt;/SPAN&gt;&lt;A href="https://www.scichart.com/documentation/android/v2.x/PaletteProvider%20API.html"&gt;PaletteProvider API&lt;/A&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;article for more info.&lt;/SPAN&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e9761290-abde-4599-b963-8372db19493b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastImpulseRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1593fb51-2f91-45c9-aefc-06fe3ab92b3a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="434270cb-26e5-4c70-aef7-538a548f116d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1402be56-b344-4e59-bc81-b748b93548ce" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ee6093db-1eb7-4221-8866-6505a150083f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="ad237ced-5394-4aeb-b9d1-15a476940035" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="884e11e6-e961-4e20-84ec-97d7a8d0c4a7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d" Status="New Topic" CreatedOn="2016-09-02T12:04:47.7566372Z" ModifiedOn="2019-02-12T19:19:50.7674687Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The OHLC Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:19:50.7674687Z">&lt;P&gt;&lt;STRONG&gt;Ohlc&amp;nbsp;Series&lt;/STRONG&gt; can be created using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastOhlcRenderableSeries.html"&gt;FastOhlcRenderableSeries&lt;/A&gt;&amp;nbsp;type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We don't&amp;nbsp;have examples for the OHLC series, but the very similar Candlestick Series&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-candlestick-chart-demo/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-candlestick-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/OhlcChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;OHLC&amp;nbsp;Series Features&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastOhlcRenderableSeries.html"&gt;FastOhlcRenderableSeries&lt;/A&gt;&amp;nbsp;class is&amp;nbsp;very much alike the&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt; class.&amp;nbsp;It allows to specify&amp;nbsp;&lt;STRONG&gt;StrokeUp&lt;/STRONG&gt; and&amp;nbsp;&lt;STRONG&gt;StrokeDown&lt;/STRONG&gt;&amp;nbsp;pens and relative &lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; which will be&amp;nbsp;applied&amp;nbsp;to&amp;nbsp;every&amp;nbsp;bar.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt; specifies how much space a single bar occupies, varying from 0 to 1 (when bars are conjoined).&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The &lt;STRONG&gt;StrokeUp&lt;/STRONG&gt; style is applied to bars&amp;nbsp;with &lt;STRONG&gt;Close &amp;gt;&amp;nbsp;Open&lt;/STRONG&gt;, and &lt;STRONG&gt;StrokeDown&lt;/STRONG&gt; to those having &lt;STRONG&gt;Open &amp;lt;= Close&lt;/STRONG&gt; respectively.&amp;nbsp;Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;Those values&amp;nbsp;can be assigned via the corresponding methods,&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase~setStrokeUpStyle.html"&gt;setStrokeUpStyle(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase~setStrokeDownStyle.html"&gt;setStrokeDownStyle()&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;and &lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseColumnRenderableSeries~setDataPointWidth.html"&gt;setDataPointWidth()&lt;/A&gt;.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create an OHLC&amp;nbsp;Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastOhlcRenderableSeries.html"&gt;FastOhlcRenderableSeries&lt;/A&gt;&amp;nbsp;instance, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create PenStyles for Up Stroke, Down Stroke&lt;BR&gt;PenStyle strokeUpStyle = new SolidPenStyle(0xFF00AA00, true, 1, null);&lt;BR&gt;PenStyle strokeDownStyle = new SolidPenStyle(0xFFFF0000, true, 1, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the OHLC Chart Series&lt;BR&gt;FastOhlcRenderableSeries ohlcSeries = new FastOhlcRenderableSeries();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;ohlcSeries.setStrokeUpStyle(strokeUpStyle);&lt;BR&gt;ohlcSeries.setStrokeDownStyle(strokeDownStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set relative width for bars&lt;BR&gt;ohlcSeries.setDataPointWidth(0.8d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IOhlcDataSeries&amp;lt;Date, Double&amp;gt; dataSeries = new OhlcDataSeries&amp;lt;&amp;gt;(Date.class, Double.class);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(Date, Open, High, Low, Close);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Assign the dataSeries to the chart series&lt;BR&gt;ohlcSeries.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), ohlcSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;&lt;FONT color=#0066cc&gt;Chart Builders&lt;/FONT&gt;&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;BR&gt;IOhlcDataSeries&amp;lt;Date, Double&amp;gt; dataSeries = new OhlcDataSeries(Date.class, Double.class);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(Date, Open, High, Low, Close);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure the Candlestick Chart Series&lt;BR&gt;final FastCandlestickRenderableSeries candlestickSeries = sciChartBuilder.newOhlcSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeUp(0xFF00AA00)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeDown(0xFFFF0000)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the chart series to the RenderableSeriesCollection of the surface&lt;BR&gt;Collections.addAll(surface.getRenderableSeries(), candlestickSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a OHLC Series&lt;/H2&gt;
&lt;P&gt;It is possible to show a gap&amp;nbsp;in a Renderable Series by passing a&amp;nbsp;data point with &lt;STRONG&gt;NaN&lt;/STRONG&gt; values&amp;nbsp;as the&amp;nbsp;Open, High, Low, Close values.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="6139d2e5-f098-4674-99e5-581141312bf5"&gt;Common RenderableSeries Features&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;
&lt;H2&gt;Paint&amp;nbsp;Individual Bars&amp;nbsp;With Different Colors&lt;/H2&gt;
&lt;P&gt;This can be achieved with the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt;. It allows to change the fill&amp;nbsp;color of any bar within an OHLC Series. To do this, a custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.paletteProviders.IStrokePaletteProvider.html"&gt;IStrokePaletteProvider&lt;/A&gt;&amp;nbsp;has to be provided to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setPaletteProvider.html"&gt;&lt;EM&gt;setPaletteProvider()&lt;/EM&gt;&lt;/A&gt; method.&amp;nbsp; Please refer to the&amp;nbsp;&lt;A href="e867960c-d131-4a76-98bf-51583f4d5f59"&gt;PaletteProvider API&lt;/A&gt; article for more info.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="04e1fef8-64eb-4c56-a97b-fb3cae6fe467" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastOhlcRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7b54a698-3302-4969-919c-828ca5f03afb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3e1e5127-18a5-4013-9652-c222cb4e3e62" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fdc08b4c-1562-4417-b98e-9e2034d50478" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e867960c-d131-4a76-98bf-51583f4d5f59" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="204332aa-96b3-40e5-972c-3078640db919" Status="New Topic" CreatedOn="2016-09-02T12:05:24.940073Z" ModifiedOn="2019-02-12T19:23:43.2045624Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Error Bars Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:23:43.2045624Z">&lt;P&gt;In SciChart, &lt;STRONG&gt;Error Bar&amp;nbsp;Series&lt;/STRONG&gt; is represented by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastErrorBarsRenderableSeries.html"&gt;FastErrorBarsRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries.html"&gt;FastFixedErrorBarsRenderableSeries&lt;/A&gt; types.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Error Bars Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-chart-example-error-bars/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-bubble-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ErrorBarsChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Error Bar Series Features&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Error Bar Series&lt;/STRONG&gt; allow to render error bars&amp;nbsp;for every data point. This can be achieved by&amp;nbsp;setting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorDirection.html"&gt;&lt;STRONG&gt;ErrorDirection&lt;/STRONG&gt;&lt;/A&gt;&amp;nbsp;to either&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorDirection~Vertical.html"&gt;Vertical&lt;/A&gt; error&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorDirection~Horizontal.html"&gt;Horizontal&lt;/A&gt; error. It is possible to show either&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorMode~High.html"&gt;HighError&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorMode~Low.html"&gt;LowError&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorMode~Both.html"&gt;Both&lt;/A&gt; by&amp;nbsp;setting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorMode.html"&gt;&lt;STRONG&gt;ErrorMode&lt;/STRONG&gt;&lt;/A&gt;:&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/ErrorBarsChart_Features.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorType.html"&gt;ErrorType&lt;/A&gt;&lt;/STRONG&gt; specifies whether error value is&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorType~Relative.html"&gt;Relative&lt;/A&gt; (a fraction between 0 and 1)&amp;nbsp;or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ErrorType~Absolute.html"&gt;Absolute&lt;/A&gt;. All these can be set via the corresponding methods:&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setErrorDirection.html"&gt;setErrorDirection(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setErrorMode.html"&gt;setErrorMode(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setErrorType.html"&gt;setErrorType().&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Relative &lt;STRONG&gt;DataPointWidth&lt;/STRONG&gt;&amp;nbsp;should be used to determine&amp;nbsp;how much space a single bar occupies. This value can&amp;nbsp;vary from 0 to 1 (when bars are conjoined). It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setDataPointWidth.html"&gt;&lt;EM&gt;setDataPointWidth()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;Error Bars can be colored differently by providing&amp;nbsp;desired pens for&amp;nbsp;&lt;STRONG&gt;StrokeLowStyle&lt;/STRONG&gt; or &lt;STRONG&gt;StrokeHighStyle&lt;/STRONG&gt; via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setStrokeLowStyle.html"&gt;&lt;EM&gt;setStrokeLowStyle()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries~setStrokeHighStyle.html"&gt;&lt;EM&gt;setStrokeHighStyle()&lt;/EM&gt;&lt;/A&gt; methods. Please refer to the articles&amp;nbsp;under the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming section&lt;/A&gt; to learn more about Brushes and Pens used in SciChart.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;This series type&amp;nbsp;can be used in tandem&amp;nbsp;with other series types, such as&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyScatterRenderableSeries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;. Error Bars Series can share a DataSeries with other series, to avoid data duplication.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;In multi axis scenarios, a series&amp;nbsp;has to&amp;nbsp;be assigned to particular X and Y&amp;nbsp;axes. This can be done passing the axes IDs to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setXAxisId.html"&gt;setXAxisId(),&lt;/A&gt;&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IRenderableSeries~setYAxisId.html"&gt;setYAxisId()&lt;/A&gt; methods of&amp;nbsp;the series.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create an Error Bars Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries.html"&gt;FastFixedErrorBarsRenderableSeries&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a Stroke Pen&lt;/P&gt;
&lt;P&gt;PenStyle strokeStyle = new SolidPenStyle(0xFFFF1919, true, 2, null);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an Error Bars Series&lt;/P&gt;
&lt;P&gt;FastFixedErrorBarsRenderableSeries verticalErrorBars = new FastFixedErrorBarsRenderableSeries();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;verticalErrorBars.setDataSeries(dataSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set StrokeStyle&lt;/P&gt;
&lt;P&gt;verticalErrorBars.setStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specify that error bars should appear in Y-direction&lt;/P&gt;
&lt;P&gt;verticalErrorBars.setErrorDirection(ErrorDirection.Vertical);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specify that both&amp;nbsp;HighError and LowError&amp;nbsp;have to&amp;nbsp;be drawn&lt;/P&gt;
&lt;P&gt;verticalErrorBars.setErrorMode(ErrorMode.Both);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set error values&lt;BR&gt;verticalErrorBars.setErrorHigh(0.3);&lt;BR&gt;verticalErrorBars.setErrorLow(0.1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Specify that error values are relative&lt;/P&gt;
&lt;P&gt;verticalErrorBars.setErrorType(ErrorType.Relative);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;Collections.addAll(surface.getRenderableSeries(), bandSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The same can be achieved using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume a surface has been created and configured somewhere&lt;BR&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a DataSeries for the chart series&lt;/P&gt;
&lt;P&gt;IXyDataSeries&amp;lt;Double, Double&amp;gt; dataSeries = new XyDataSeries&amp;lt;&amp;gt;(Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;// Assume some data has been added to the dataSeries here&lt;BR&gt;// dataSeries.append(X, Y);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure an Error Bars Series&lt;/P&gt;
&lt;P&gt;FastFixedErrorBarsRenderableSeries horizontalErrorBars = sciChartBuilder.newFixedErrorBarsSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xFFFF0000)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withErrorDirection(ErrorDirection.Horizontal)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withErrorType(ErrorType.Absolute)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withErrorMode(ErrorMode.Both)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLowError(0.3)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHighError(0.3)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the RenderableSeries to the RenderableSeriesCollection of the surface&lt;BR&gt;&amp;nbsp;Collections.addAll(surface.getRenderableSeries(), horizontalErrorBars);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4301a9a2-8f3c-4de0-99c6-8821c2922690" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastFixedErrorBarsRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b9956e65-18db-4bab-93aa-1390dc246a6c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastErrorBarsRenderableSeries" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="57cd42e8-df31-4718-9dc2-5c2e6309458f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8de746e8-7c7d-4a49-9414-7f98848c09fa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b9d6fda2-0d87-4256-b9bf-d281b2f5693a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72c98c63-fe53-4c4b-8d96-3a09c48ce831" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a53bef2b-820c-45a3-9903-ad426d572aae" Status="New Topic" CreatedOn="2017-06-01T09:43:50.9488113Z" ModifiedOn="2019-02-12T19:22:24.3065692Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Bubble Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:22:24.3065692Z">&lt;P&gt;Bubble Chart are provided by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.FastBubbleRenderableSeries.html"&gt;FastBubbleRenderableSeries&lt;/A&gt; class. It accepts data from a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;XyzDataSeries&lt;/A&gt; (X,Y, Z - bubble scale ) and renders a bubble at each XY value.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Examples for the Bubble Series can be found in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart Android Examples Suite&lt;/A&gt;:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/android-bubble-chart-demo/" target=_blank&gt;Java Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/example/xamarin-chart-bubble-chart-example/" target=_blank&gt;Xamarin Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/BubbleChart_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Create&amp;nbsp;a Bubble Chart&lt;/H2&gt;
&lt;P&gt;To create a Bubble Chart you can use next code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Declare axes&lt;/P&gt;
&lt;P&gt;final IAxis xAxis = sciChartBuilder.newDateAxis().withGrowBy(0d, 0.1d).build();&lt;BR&gt;final IAxis yAxis = sciChartBuilder.newNumericAxis().withGrowBy(0d, 0.1d).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Declare DataSeries and append some data&lt;/P&gt;
&lt;P&gt;final XyzDataSeries&amp;lt;Date, Double, Double&amp;gt; dataSeries = sciChartBuilder.newXyzDataSeries(Date.class, Double.class, Double.class).build();&lt;/P&gt;
&lt;P&gt;final List&amp;lt;TradeData&amp;gt; tradeTicks = DataManager.getInstance().getTradeTicks(getActivity());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; tradeTicks.size(); i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TradeData tradeData = tradeTicks.get(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(tradeData.getTradeDate(), tradeData.getTradePrice(), tradeData.getTradeSize());&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// Declare RenderableSeries&lt;/P&gt;
&lt;P&gt;final FastLineRenderableSeries lineSeries = sciChartBuilder.newLineSeries().withDataSeries(dataSeries).withStrokeStyle(0xffff3333, 2f).build();&lt;/P&gt;
&lt;P&gt;final FastBubbleRenderableSeries bubbleSeries = sciChartBuilder.newBubbleSeries()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZScaleFactor(zScaleFactor / 10f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBubbleBrushStyle(new SolidBrushStyle(0x77CCCCCC))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeStyle(0xFFCCCCCC, 2f, true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAutoZRange(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Init chart&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), lineSeries, bubbleSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6d291a82-3990-4a2e-9156-3c71562adc4a" Status="New Topic" CreatedOn="2016-09-02T09:36:32.533794Z" ModifiedOn="2020-04-08T14:30:43.15267Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Custom RenderableSeries API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-04-08T14:30:43.15267Z">&lt;H2&gt;Creating your Own Series&lt;/H2&gt;
&lt;P&gt;If the built-in chart types in SciChart are not enough, you can create your own RenderableSeries! CustomRenderableSeries&amp;nbsp;should extend&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt; if you want to provide some custom data or one of predefined base classes if you want to display data from one of&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;default DataSeries implementations&lt;/A&gt;.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=273&gt;Base class for CustomRenderableSeries&lt;/TD&gt;
&lt;TD&gt;When to use&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyRenderableSeriesBase.html"&gt;XyRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;XyDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyyRenderableSeriesBase.html"&gt;XyyRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyyDataSeries.html"&gt;XyyDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.HlRenderableSeriesBase.html"&gt;HlRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.HlDataSeries.html"&gt;HlDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase.html"&gt;OhlcRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;OhlcDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyzRenderableSeriesBase.html"&gt;XyzRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;XyzDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If&amp;nbsp;default DataSeries implementations aren't suitable for data which should be dispayed and&amp;nbsp;you want to create custom DataSeries type&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;For example let's try to create a series which draws&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~getPointMarker.html"&gt;PointMarker&lt;/A&gt; at specified (x, y) coordinates:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomRenderableSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomRenderableSeries extends XyRenderableSeriesBase {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates a new instance of &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; XyRenderableSeriesBase} class&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomRenderableSeries() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // In default constructor we use:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - XyRenderPassData which will store points to draw ( If you need to store some additional data for drawing you can extend it and add additional fields )&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - PointMarkerHitProvider which performs hit checks on points rendered by series. In our case we just check if point marker is hit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - NearestXyPointProvider allows to locate nearest (x, y) point to specified point on screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this(new XyRenderPassData(), new PointMarkerHitProvider(), new NearestXyPointProvider());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates a new instance of &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; XyRenderableSeriesBase} class&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param currentRenderPassData The render pass data instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitProvider&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; The hit provider instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param nearestPointProvider&amp;nbsp; The nearest point provider instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected CustomRenderableSeries(XyRenderPassData currentRenderPassData, IHitProvider hitProvider, INearestPointProvider nearestPointProvider) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(currentRenderPassData, hitProvider, nearestPointProvider);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Draws the series using the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; IRenderContext2D}, the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; IAssetManager2D} and the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; ISeriesRenderPassData} passed in&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderContext&amp;nbsp; The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param assetManager&amp;nbsp;&amp;nbsp; The asset manager. This is manager for graphic assets which has method for creation pens, brushes and textures&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderPassData The render pass data which contain a resampled point series, the index range of point on the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; and the current coordinate calculator of XAxis and YAxis to convert data-point to screen points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalDraw(IRenderContext2D renderContext, IAssetManager2D assetManager, ISeriesRenderPassData renderPassData) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we cast render pass data to type of render pass data which we created in constructor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyRenderPassData renderPassDataToDraw = (XyRenderPassData) renderPassData;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// here we need to draw something using specified renderContext!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // use helper method to draw data as point markers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawPointMarkers(renderContext, assetManager, renderPassDataToDraw.xCoords, renderPassDataToDraw.yCoords);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomRenderableSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;class CustomRenderableSeries : XyRenderableSeriesBase&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomRenderableSeries() : this(new XyRenderPassData(), new PointMarkerHitProvider(), new NearestXyPointProvider())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // In default constructor we use:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - XyRenderPassData which will store points to draw ( If you need to store some additional data for drawing you can extend it and add additional fields )&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - PointMarkerHitProvider which performs hit checks on points rendered by series. In our case we just check if point marker is hit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - NearestXyPointProvider allows to locate nearest (x, y) point to specified point on screen&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected CustomRenderableSeries(XyRenderPassData currentRenderPassData, IHitProvider hitProvider, INearestPointProvider nearestPointProvider) : base(currentRenderPassData, hitProvider, nearestPointProvider)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected override void InternalDraw(IRenderContext2D renderContext, IAssetManager2D assetManager, ISeriesRenderPassData renderPassData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we cast render pass data to type of render pass data which we created in constructor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XyRenderPassData renderPassDataToDraw = (XyRenderPassData)renderPassData;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we need to draw something using specified renderContext!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // use helper method to draw data as point markers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DrawPointMarkers(renderContext, assetManager, renderPassDataToDraw.XCoords, renderPassDataToDraw.YCoords);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;IRenderContext2D and IAssetManager2D&amp;nbsp;– the Immediate Mode Graphics&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D.html"&gt;IRenderContext2D&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D.html"&gt;IAssetManager2D&lt;/A&gt;&amp;nbsp;passed into the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~internalDraw.html"&gt;internalDraw()&lt;/A&gt; method&amp;nbsp;are parts of&amp;nbsp;the graphics context for this render pass. Use this to draw to the screen.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: For a full walk-through of the RenderContext API, see the&amp;nbsp;&lt;A href="2e02ad3c-378c-4512-9b05-49a6b0f0fa61"&gt;section on Immediate Mode RenderContext API&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;ISeriesRenderPassData – the current Data to Draw&lt;/H2&gt;
&lt;P&gt;The data to draw is contained in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt; passed in to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~internalDraw.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;internalDraw()&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; method. Using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt;&amp;nbsp;you can access the data values and coordinates&amp;nbsp;to draw, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~xPointRange.html"&gt;PointRange&lt;/A&gt;&amp;nbsp;(the indices of the data to draw, inclusive), the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~getXCoordinateCalculator.html"&gt;XCoordinateCalculator&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~getYCoordinateCalculator.html"&gt;YCoordinateCalculator&lt;/A&gt; (which transforms data to pixel coordinates).&lt;/P&gt;
&lt;P&gt;Depending on DataSeries type&amp;nbsp;you can have a different&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt;&amp;nbsp;type and different ways to access the data to draw.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;SeriesRenderPassData type&lt;/TD&gt;
&lt;TD&gt;DataSeries type&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyRenderPassData.html"&gt;XyRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyyRenderPassData.html"&gt;XyyRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyyDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyyDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyzRenderPassData.html"&gt;XyzRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyzDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.OhlcRenderPassData.html"&gt;OhlcRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;OhlcDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.HlRenderPassData.html"&gt;HlRenderPassData&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.HlDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;HlDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.UniformHeatmapRenderPassData.html"&gt;UniformHeatmapRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.UniformHeatmapDataSeries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;The types above could be extended to add some additional information which is required for rendering ( e.g. ColumnRenderPassData extends XyRenderPassData and adds fields for caching of column width in pixels and coordinate of zero line ).&lt;/P&gt;
&lt;H2&gt;Example: SplineRoundedColumnRenderableSeries&lt;/H2&gt;
&lt;P&gt;We have a full worked&amp;nbsp;&lt;A href="https://www.scichart.com/example/android-chart-custom-series-spline-line/"&gt;example&lt;/A&gt;,&amp;nbsp;which shows how to create a&amp;nbsp;rounded column&amp;nbsp;series with this powerful API.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Rounded-Columns.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d9007373-3f18-4bbd-be21-86a97872b4ee" Status="New Topic" CreatedOn="2019-02-12T17:53:49.6433146Z" ModifiedOn="2019-08-09T09:42:07.0239457Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Pie Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-09T09:42:07.0239457Z">&lt;P&gt;In SciChart v2.1 and above, The Pie Chart type is represented by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface.html"&gt;SciPieChartSurface&lt;/A&gt; class.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The Pie Chart represents data in a form of circle divided into triangular wedges called segments. A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt; represents a percentage that corresponds to a particular value. This value appears drawn on every segment and can be set&amp;nbsp;in code. A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt; can be selected by clicking either on it or on the corresponding item in the Legend. This action provides a visual feedback on the chart and the Legend.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN class=NewStyle2&gt;Create a Pie Chart&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;To create a Pie Chart, you have to provide a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.PieRenderableSeriesCollection.html"&gt;PieRenderableSeriesCollection&lt;/A&gt; and assign it to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface~setRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt; property. The data source is a collection of objects which implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries.html"&gt;IPieRenderableSeries&lt;/A&gt; interface which contain list of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;instances to&amp;nbsp;draw. Alternatively you can add&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries.html"&gt;IPieRenderableSeries&lt;/A&gt;&amp;nbsp;into&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface~getRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt; collection which is by default is empty. In next example we'll use&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Builders API&lt;/A&gt; to configure chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declare SciPieChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciPieChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/pieChart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"/&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure SciPieChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciPieChartSurface pieChartSurface = findViewById(R.id.pieChart);&lt;/P&gt;
&lt;P&gt;final IPieRenderableSeries pieSeries = sciChartBuilder.newPieSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withRadialGradientColors(0xffFFFF00, 0xfffed325).build()&lt;BR&gt;).build();&lt;/P&gt;
&lt;P&gt;Collections.addAll(pieChartSurface.getRenderableSeries(), pieSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P class=NewStyle2 align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/PieChart.png"&gt;&lt;/P&gt;
&lt;P class=NewStyle2&gt;Styling Pie Chart Segments&lt;/P&gt;
&lt;P&gt;Every&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;can be configured to show custom label which by default displays formatted value. To do this you'll need use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries~setPieSegmentLabelFormatter.html"&gt;PieSegmentLabelFormatter&lt;/A&gt;&amp;nbsp;which is repsonsible for providing labels for each&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;. For example if you want to display Title of each label&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Pie Series with Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IPieRenderableSeries pieSeries = sciChartBuilder.newPieSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withRadialGradientColors(0xffFFFF00, 0xfffed325).build()&lt;BR&gt;).build();&lt;/P&gt;
&lt;P&gt;pieSeries.setPieSegmentLabelFormatter(new TitlePieSegmentLabelFormatter());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And TitlePieSegmentLabelFormatter class has next code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;TitlePieSegmentLabelFormatter&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;public class TitlePieSegmentLabelFormatter extends PieSegmentLabelFormatterBase{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CharSequence formatLabel(IPieSegment pieSegment) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return pieSegment.getTitle();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will result next output:&lt;/P&gt;
&lt;P class=NewStyle3&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle3 align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/PieChartWithTitle.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P class=NewStyle3&gt;Changing Pie Segments Colors&lt;/P&gt;
&lt;P&gt;To change colors of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;you can use one next properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment~setStrokeStyle.html"&gt;StrokeStyle&lt;/A&gt; which is repsonsible for drawing of segment border 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment~setFillStyle.html"&gt;FillStyle&lt;/A&gt; which is responsible for segment fill &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Pie Series with custom colors&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final IPieRenderableSeries pieSeries = sciChartBuilder.newPieSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withFillColor(Color.GREEN).withStrokeStyle(Color.YELLOW).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withFillColor(Color.RED).withStrokeStyle(Color.BLUE).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withFillColor(Color.BLUE).withStrokeStyle(Color.RED).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withFillColor(Color.YELLOW).withStrokeStyle(Color.BLUE).build()&lt;BR&gt;).build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/PieChartWithColors.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9bbf7021-7ef1-49d7-9904-c28029ab9a48" Status="New Topic" CreatedOn="2019-02-12T17:53:56.0583001Z" ModifiedOn="2019-08-09T11:45:25.8136119Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Donut Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-09T11:45:25.8136119Z">&lt;P&gt;In SciChart v2.1 and above, The Donut Chart type is represented by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface.html"&gt;SciPieChartSurface&lt;/A&gt; class.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The Donut Chart is similar to&amp;nbsp;&lt;A href="d9007373-3f18-4bbd-be21-86a97872b4ee"&gt;Pie Chart&lt;/A&gt; except it has a round&amp;nbsp;hole in the center. A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt; represents a percentage that corresponds to a particular value. This value appears drawn on every segment and can be set&amp;nbsp;in code. A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt; can be selected by clicking either on it or on the corresponding item in the Legend. This action provides a visual feedback on the chart and the Legend.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN class=NewStyle2&gt;Create a Donut Chart&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;To create a Donut Chart, you have to provide a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.PieRenderableSeriesCollection.html"&gt;PieRenderableSeriesCollection&lt;/A&gt; and assign it to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface~setRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt; property. The data source is a collection of objects which implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries.html"&gt;IPieRenderableSeries&lt;/A&gt; interface which contain list of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;instances to&amp;nbsp;draw. Alternatively you can add&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries.html"&gt;IPieRenderableSeries&lt;/A&gt;&amp;nbsp;into&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface~getRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt; collection which is by default is empty. In next example we'll use&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Builders API&lt;/A&gt; to configure chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declare SciPieChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciPieChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/pieChart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"/&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure SciPieChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciPieChartSurface pieChartSurface = findViewById(R.id.pieChart);&lt;/P&gt;
&lt;P&gt;final float donutSeriesHeight = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getActivity().getResources().getDisplayMetrics());&lt;/P&gt;
&lt;P&gt;final IPieRenderableSeries donutSeries = sciChartBuilder.newDonutSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withRadialGradientColors(0xffFFFF00, 0xfffed325).build()&lt;BR&gt;).withHeightSizingModeP(SizingMode.Absolute).withHeight(donutSeriesHeight).build();&lt;/P&gt;
&lt;P&gt;Collections.addAll(pieChartSurface.getRenderableSeries(), donutSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P class=NewStyle2 align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DonutChart.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle2&gt;Styling Pie Chart Segments&lt;/P&gt;
&lt;P&gt;Every&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;can be configured to show custom label which by default displays formatted value. To do this you'll need use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.IPieRenderableSeries~setPieSegmentLabelFormatter.html"&gt;PieSegmentLabelFormatter&lt;/A&gt;&amp;nbsp;which is repsonsible for providing labels for each&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;. For example if you want to display Title of each label&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Donut Series with Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IPieRenderableSeries donutSeries = sciChartBuilder.newDonutSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withRadialGradientColors(0xffFFFF00, 0xfffed325).build()&lt;BR&gt;).withHeightSizingModeP(SizingMode.Absolute).withHeight(donutSeriesHeight).build();&lt;/P&gt;
&lt;P&gt;donutSeries.setPieSegmentLabelFormatter(new TitlePieSegmentLabelFormatter());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And TitlePieSegmentLabelFormatter class has next code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;TitlePieSegmentLabelFormatter&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;public class TitlePieSegmentLabelFormatter extends PieSegmentLabelFormatterBase{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CharSequence formatLabel(IPieSegment pieSegment) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return pieSegment.getTitle();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will result next output:&lt;/P&gt;
&lt;P class=NewStyle3&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle3 align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DonutChartWithTitle.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P class=NewStyle3 align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle3&gt;Changing Pie Segments Colors&lt;/P&gt;
&lt;P&gt;To change colors of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;you can use one next properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment~setStrokeStyle.html"&gt;StrokeStyle&lt;/A&gt; which is repsonsible for drawing of segment border 
&lt;LI&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieSegment~setFillStyle.html"&gt;FillStyle&lt;/A&gt; which is responsible for segment fill &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Donut Series with custom colors&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final IPieRenderableSeries donutSeries = sciChartBuilder.newDonutSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withFillColor(Color.GREEN).withStrokeStyle(Color.YELLOW).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withFillColor(Color.RED).withStrokeStyle(Color.BLUE).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withFillColor(Color.BLUE).withStrokeStyle(Color.RED).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withFillColor(Color.YELLOW).withStrokeStyle(Color.BLUE).build()&lt;BR&gt;)).withHeightSizingMode(SizingMode.Absolute).withHeight(donutSeriesHeight).build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DonutChartWithColors.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle3&gt;Changing size of Donut Chart&lt;/P&gt;
&lt;P&gt;If you want to change size of Donut Chart you can use combination of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieDonutRenderableSeriesBase~setHeightSizingMode.html"&gt;HeightSizingMode&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieDonutRenderableSeriesBase~setHeight.html"&gt;Height&lt;/A&gt; properties which allows to specify how much space donut chart should use for its rendering. If you use Absolute mode then Height accepts size in pixels, and if you use Relative mode then Height expects value from 0 to 1 which tells how much of the available space it should use for rendering ( e.g. 0.5 will tell Donut series to use 50% of available space ).&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Donut Chart with Relative size&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final IPieRenderableSeries donutSeries = sciChartBuilder.newDonutSeries().withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(40).withTitle("Green").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(10).withTitle("Red").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(20).withTitle("Blue").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(15).withTitle("Yellow").withRadialGradientColors(0xffFFFF00, 0xfffed325).build()&lt;BR&gt;).withHeightSizingMode(SizingMode.Relative).withHeight(0.5f).build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/DonutChartWithRelativeSizingMode.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e627d5a1-bbcc-4265-bd91-fcf1d9a5bcf0" Status="New Topic" CreatedOn="2019-08-09T06:29:04.0123113Z" ModifiedOn="2019-08-09T12:00:09.3105828Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Fan Charts Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-09T12:00:09.3105828Z">&lt;P&gt;Fan Chart are provided by using multiple&amp;nbsp;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;Band Series&lt;/A&gt; on the same chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/FanChart.png"&gt;&amp;nbsp;We have a full example in our Example Suite under&amp;nbsp;&lt;A href="https://www.scichart.com/example/android-chart-example-fan-chart/"&gt;Multi Chart -&amp;gt; Fan Chart&lt;/A&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e8eeff9d-0fd8-4e04-bd35-fdf5da243b57" Status="New Topic" CreatedOn="2019-08-09T11:37:21.8047827Z" ModifiedOn="2019-08-09T11:52:46.5689404Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Multi Pie Donut Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-09T11:52:46.5689404Z">&lt;P&gt;In SciChart v2.1 and above, both&amp;nbsp;&lt;A href="9bbf7021-7ef1-49d7-9904-c28029ab9a48"&gt;Donut Chart&lt;/A&gt; and &lt;A href="d9007373-3f18-4bbd-be21-86a97872b4ee"&gt;Pie Chart&lt;/A&gt; can be placed inside&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciPieChartSurface.html"&gt;SciPieChartSurface&lt;/A&gt;&amp;nbsp;at the same time.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/MultiPieDonutChart.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=left&gt;To get such output just need to add&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.PieRenderableSeries.html"&gt;PieRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.DonutRenderableSeries.html"&gt;DonutRenderableSeries&lt;/A&gt; into same chart:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Multi Pie Donut Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final IPieRenderableSeries pieSeries = sciChartBuilder.newPieSeries().withSeriesName("HowPeopleTravel").withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(34).withTitle("Ecologic").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(34.4).withTitle("Municipal").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(31.6).withTitle("Personal").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build()&lt;BR&gt;).build();&lt;/P&gt;
&lt;P&gt;final IPieRenderableSeries donutSeries = sciChartBuilder.newDonutSeries().withSeriesName("DetailedGroup").withSegments(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(28.8).withTitle("Walking").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(5.2).withTitle("Bicycle").withRadialGradientColors(0xff84BC3D, 0xff5B8829).build(),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(12.3).withTitle("Metro").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(3.5).withTitle("Tram").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(5.9).withTitle("Rail").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(9.7).withTitle("Bus").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(3.0).withTitle("Taxi").withRadialGradientColors(0xffe04a2f, 0xffB7161B).build(),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(23.2).withTitle("Car").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(3.1).withTitle("Motorcycle").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBuilder.newPieSegment().withValue(5.3).withTitle("Other").withRadialGradientColors(0xff4AB6C1, 0xff2182AD).build()&lt;BR&gt;).build();&lt;/P&gt;
&lt;P&gt;Collections.addAll(pieChartSurface.getRenderableSeries(), pieSeries, donutSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="e9434bfa-ad33-4ed5-a634-942029097f55" AutoIndex="false">
            <Caption m="2016-08-04T13:46:49.4131783Z">ChartModifier API</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="d9cfccc2-e487-4f4b-a53d-1257836f50e5" AutoIndex="false">
                <Caption m="2016-10-07T15:59:13.1267024Z">ChartModifier APIs</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="f1ace0de-c745-4610-a766-eb59af8cf33d" Status="New Topic" CreatedOn="2016-08-04T13:47:17.7297161Z" ModifiedOn="2019-02-12T19:52:56.0690909Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What is a ChartModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:52:56.0690909Z">&lt;P&gt;Within the SciChart SDK, &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; are the classes which can be added to a chart to give it a &lt;STRONG&gt;certain&lt;/STRONG&gt; &lt;STRONG&gt;behaviour&lt;/STRONG&gt;. For instance, all &lt;STRONG&gt;zooming, panning operations&lt;/STRONG&gt;, &lt;STRONG&gt;tooltips&lt;/STRONG&gt;, &lt;STRONG&gt;legends&lt;/STRONG&gt; and even &lt;STRONG&gt;selection&lt;/STRONG&gt; of points or lines are handled by ChartModifierBase derived classes in the SciChart codebase.&lt;/P&gt;
&lt;P&gt;There are many different ChartModifiers provided by SciChart and each one deserves an article by itself! This article is concerned with simply giving an overview of the modifiers and where you can find the examples in our Examples Suite which demonstrate them.&lt;/P&gt;
&lt;P&gt;There are also several individual articles on the ChartModifier's and how to configure them in the SciChart Android Documentation. Please find them at the bottom of this page.&lt;/P&gt;
&lt;H2&gt;Zoom, Pan Modifiers&lt;/H2&gt;
&lt;P&gt;The following modifiers&amp;nbsp;can be used if you want to add scrolling or zooming behavior to a chart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Demo Link&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=271&gt;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;PinchZoomModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;&lt;STRONG&gt;Zooms&lt;/STRONG&gt; a chart in and out via the pinch and spread gestures correspondingly.&lt;/TD&gt;
&lt;TD height=19&gt;Available almost everywhere. For instance, see the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-multiple-xaxis/"&gt;Multiple X Axes&lt;/A&gt; example.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=271&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;&lt;SPAN&gt;&lt;STRONG&gt;Pans&lt;/STRONG&gt; the chart in X, Y or both directions&amp;nbsp;with&amp;nbsp;inertia via finger&amp;nbsp;sliding.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Available almost everywhere. For instance, see the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-multiple-xaxis/"&gt;Multiple X Axes&lt;/A&gt; example.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="3522c82b-989f-4d1b-bc80-be617b68af2f"&gt;XAxisDragModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Scales&lt;/STRONG&gt; or pans an X Axis via finger drag.&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/android-chart-example-drag-axes-to-scale/"&gt;Drag Axis to Scale a Chart&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="8be89d95-1b3a-4ce3-8665-1f8f18d43b32"&gt;YAxisDragModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Scales&lt;/STRONG&gt; or pans an&amp;nbsp;Y Axis via finger drag.&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/android-chart-example-drag-axes-to-scale/"&gt;Drag Axis to Scale a Chart&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833"&gt;RubberBandXyZoomModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;&lt;STRONG&gt;Zooms&lt;/STRONG&gt; a chart&amp;nbsp;inside a rectangle or horizontal section that is drawn on the chart with a finger.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/android-chart-example-drag-area-to-zoom/"&gt;Drag Area to Zoom&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;&lt;STRONG&gt;Resets the zoom&lt;/STRONG&gt; to the&amp;nbsp;data&amp;nbsp;extents via double-tapping.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;Available almost everywhere. For instance, see the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-example-multiple-xaxis/"&gt;Multiple X Axes&lt;/A&gt; example.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Interactivity, Tooltips, Cursor Modifiers&lt;/H2&gt;
&lt;P&gt;These&amp;nbsp;modifiers&amp;nbsp;allow to interact with chart series or inspect them:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Demo Link&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="18b07bb4-d65f-4417-a954-4fb58a308818"&gt;SeriesSelectionModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides &lt;STRONG&gt;selection&lt;/STRONG&gt; of a&amp;nbsp;series via tapping on it.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-chart-example-series-selection/"&gt;Series Selection&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="764104d5-6906-439e-a2d8-72cc35308eee"&gt;TooltipModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides a&amp;nbsp;&lt;STRONG&gt;tooltip&lt;/STRONG&gt; for the nearest point&amp;nbsp;on&amp;nbsp;a series under the finger.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-chart-example-using-tooltipmodifier-tooltips/"&gt;Using TooltipModifier Tooltips&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides a &lt;STRONG&gt;vertical slice cursor with tooltips&lt;/STRONG&gt; and markers rolling over a series.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-chart-example-using-rollovermodifier-tooltips/"&gt;Using RolloverModifier Tooltips&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides a &lt;STRONG&gt;crosshairs&lt;/STRONG&gt; with a tooltip and axis labels.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-chart-example-using-cursormodifier-tooltips/"&gt;Using CursorModifier Tooltips&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Miscellaneous Modifiers&lt;/H2&gt;
&lt;P&gt;Modifiers below are used as helpers and can be a useful addition to a chart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Demo Link&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroup&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Can be used to &lt;STRONG&gt;group chart modifiers together&lt;/STRONG&gt;. This can useful in multi-chart scenarios, to unite ModifierGroups into one &lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt; of modifiers. If a MotionEvent occurs on a chart, it will be propagated to modifiers from other charts that are in the same &lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt;.&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-multi-pane-stock-charts/"&gt;Multi-Pane Stock Charts&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;A href="f6e59c15-4337-410b-81e5-808989851e57"&gt;LegendModifier&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Allows to creates and configure&amp;nbsp;a &lt;STRONG&gt;Legend&lt;/STRONG&gt; for a chart.&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD width=271&gt;&lt;A href="https://www.scichart.com/android-chart-legends-api-example/"&gt;Chart Legends API&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;To learn more about ChartModifiers API, please read the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article. To find out about a specific ChartModifier type, please refer to a corresponding article about this Modifier type.&lt;/H2&gt;
&lt;H2&gt;Adding Chart Modifiers to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a LegendModifier&lt;BR&gt;IChartModifier legendModifier = new LegendModifier(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(legendModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, it is possible to use &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt; to create and configure Chart Modifiers:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a ModifierGroup with several modifiers&lt;BR&gt;IChartModifier modifiers = sciChartBuilder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomPanModifier().withClipModex(ClipMode.StretchAtExtents).withXyDirection(XyDirection.XDirection).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisDragModifier().withClipModex(ClipMode.StretchAtExtents).withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withRolloverModifier().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the modifiers to the surface&lt;BR&gt;surface.getChartModifiers().add(modifiers);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For convenience, the most commonly used modifiers available in a bunch via the &lt;STRONG&gt;&lt;EM&gt;SciChartBuilder&lt;/EM&gt;&lt;/STRONG&gt;.&lt;EM&gt;newModifierGroupWithDefaultModifiers().&lt;/EM&gt; The method returns a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroup&lt;/A&gt;&amp;nbsp;with the&amp;nbsp;&lt;A href="d9ced961-1155-435f-8aee-686b9f60de40"&gt;PinchZoomModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a ModifierGroup with the PinchZoomModifier, ZoomPanModifier and ZoomExtentsModifier&lt;BR&gt;IChartModifier modifiers = sciChartBuilder.newModifierGroupWithDefaultModifiers().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the modifiers to the surface&lt;BR&gt;surface.getChartModifiers().add(modifiers);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="68b2810a-0062-4df0-8ef8-1aee896543da" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="588f4455-b27e-4317-ab4a-bfacfd97e10f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e14c324d-a823-460b-8971-cb248d617e35" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="21c30e2d-6038-44be-b053-d0fc4a6baa0a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d9ced961-1155-435f-8aee-686b9f60de40" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1439f48d-b9e8-468b-b322-68071f7d2496" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="764104d5-6906-439e-a2d8-72cc35308eee" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1fb37b67-2824-41eb-b735-174ae4f37b3f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="7534c459-3efb-4429-ac2f-d6186a541a5b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fac601dc-5435-4c51-abec-1c267f55f193" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="97b3d87d-36e0-4ca2-93dd-4f5c0fb4385d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="18b07bb4-d65f-4417-a954-4fb58a308818" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="49c501d5-8756-41d0-a479-f1864c3f60a6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f6e59c15-4337-410b-81e5-808989851e57" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9ed76765-1e2c-4a01-b9dd-5b12ae5b813b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="d64a8807-f1d8-447b-b8df-a528953d466f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3404e05e-872c-4be6-ab19-52ddac8c4f94" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="25eb0a70-7616-4e61-abdf-66bbbcd77ac1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4af28faf-3268-417a-8146-a3d25a8d9833" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="30951493-a633-43c5-afe0-62074a06d043" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8be89d95-1b3a-4ce3-8665-1f8f18d43b32" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="fdf5b778-0561-4355-94e5-fd4703b80404" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3522c82b-989f-4d1b-bc80-be617b68af2f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="c7ddb5a2-5c58-4351-9336-bafd039a556f" Status="New Topic" CreatedOn="2016-09-28T13:41:33.8227108Z" ModifiedOn="2019-02-12T19:27:27.555235Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common ChartModifiers Features" BuildFlags="">
                    <Title m="2016-10-07T16:00:02.5606327Z">Common ChartModifiers Features</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.555235Z">&lt;P&gt;All the ChartModifiers provided by SciChart implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier.html"&gt;IChartModifier&lt;/A&gt; interface and&amp;nbsp;derive from&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class. These provide a powerful API which&amp;nbsp;gives&amp;nbsp;the full access to internals of a chart, axes, series, annotations. It is a must that Custom Modifiers implement&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier.html"&gt;IChartModifier&lt;/A&gt;; we recommend&amp;nbsp;inheriting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt;&amp;nbsp;in such cases&amp;nbsp;as well.&lt;/P&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;What is a ChartModifier&lt;/A&gt;&amp;nbsp;article for the complete&amp;nbsp;list of all the Chart&amp;nbsp;Modifiers available out of the box in SciChart.&lt;/P&gt;
&lt;H2&gt;Common&amp;nbsp;Features of Chart Modifiers&lt;/H2&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=497&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=497&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier~getParentSurface.html"&gt;getParentSurface()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the surface which a modifier is attached to. See the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~isAttached.html"&gt;isAttached()&lt;/A&gt;&lt;/EM&gt; method below.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=497&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier~getModifierSurface.html"&gt;getModifierSurface()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the ModifierSurface from the parental SciChartSurface. It is used to place Views like tooltips, etc. onto it.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=497&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~isAttached.html"&gt;isAttached()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Returns a value indicating whether a modifier is attached to a SciChartSurface or not. If it is, the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier~getParentSurface.html"&gt;getParentSurface()&lt;/A&gt;&lt;/EM&gt; method will return the corresponding instance of SciChartSurface.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=497&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier~getIsEnabled.html"&gt;getIsEnabled()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier~setIsEnabled.html"&gt;setIsEnabled()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify if a modifier should be available for interaction or not.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getReceiveHandledEvents.html"&gt;getReceiveHandledEvents()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~setReceiveHandledEvents.html"&gt;setReceiveHandledEvents()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify whether a modifier should receive events handled by another modifier.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;ModifierGroup Features&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroup&lt;/A&gt; allows &lt;STRONG&gt;grouping of modifiers&lt;/STRONG&gt;. This can be useful if modifiers create a logical group&amp;nbsp;within&amp;nbsp;which they are handled together. For example, all modifiers inside a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroup&lt;/A&gt;&amp;nbsp;can be&amp;nbsp;enabled/disabled together by calling &lt;EM&gt;setIsEnabled()&lt;/EM&gt; on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroup&lt;/A&gt;&amp;nbsp;itself.&lt;/P&gt;
&lt;P&gt;Also, this is useful in &lt;STRONG&gt;multi-chart scenarios&lt;/STRONG&gt;. Several&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup.html"&gt;ModifierGroups&lt;/A&gt; can be&amp;nbsp;united to share motion events between charts. This can be done setting&amp;nbsp;&lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt;&amp;nbsp;to be the same for ModifierGroups which belong to different&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurfaces&lt;/A&gt;.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=503&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=503&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup~getMotionEventGroup.html"&gt;getMotionEventGroup()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup~setMotionEventGroup.html"&gt;setMotionEventGroup()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;specify which &lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt;&amp;nbsp;this modifier goes in. It is used to share motion events between modifiers&amp;nbsp;that belong to&amp;nbsp;different surfaces.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=503&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup~getEventsSource.html"&gt;getEventsSource()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the ModifierSurface which is the source of motion events.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=503&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup~getChildModifiers.html"&gt;getChildModifiers()&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup~setChildModifiers.html"&gt;setChildModifiers()&lt;/A&gt;&lt;/EM&gt;&lt;/TD&gt;
&lt;TD&gt;Assigns&amp;nbsp;a collection of modifiers to&amp;nbsp;a ModifierGroup. Also a collection can be passed into&amp;nbsp;the class&amp;nbsp;constructor during creation.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;For more detailed information about the ChartModifiers API, please refer to the&amp;nbsp;&lt;A href="e14c324d-a823-460b-8971-cb248d617e35"&gt;Custom Modifiers - ChartModifierBase API&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="da3f16c0-fcd7-4c5b-81f8-0e9a14ff5c40" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="ffc707ae-adc5-44c8-9156-764c31b373af" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e14c324d-a823-460b-8971-cb248d617e35" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="56e490ef-664d-4584-96cc-c20f1d77aada" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.IChartModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="303bc7b4-f703-4d0e-8d1d-8493ba5120a6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="38b7a197-8c04-4982-bac4-4b8f001c0d8d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.IModifierGroup" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="d1781887-3281-4db7-a764-a2bb6692b3f2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.ModifierGroup" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e14c324d-a823-460b-8971-cb248d617e35" Status="New Topic" CreatedOn="2016-10-07T16:00:22.0111357Z" ModifiedOn="2019-02-12T19:53:32.2101174Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Custom Modifiers - ChartModifierBase API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:53:32.2101174Z">&lt;P&gt;The &lt;STRONG&gt;ChartModifierBase API&lt;/STRONG&gt; is by far the most powerful API in the SciChart library. Using this API you can &lt;STRONG&gt;create behaviours&lt;/STRONG&gt; which you can attach to a chart to perform custom Zooming, Panning, Annotation &amp;amp; Markers, Legend output and much much more. Any time you want to do something to alter the behaviour of a SciChartSurface you should be thinking about creating a custom modifier to do it.&lt;/P&gt;
&lt;H2&gt;The ChartModifierBase Type&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; provides an abstract base class for all of the ChartModifiers within SciChart. All of our built-in modifiers inherit&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt;. For custom ChartModifiers, we recommend that you do the same. For example, you can declare a modifier like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public final class CustomRotateChartModifier extends ChartModifierBase {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void rotateChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isAttached()) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ISciChartSurface parentSurface = getParentSurface();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; IUpdateSuspender updateSuspender = parentSurface.suspendUpdates();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotateAxes(parentSurface.getXAxes());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotateAxes(parentSurface.getYAxes());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } finally {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSuspender.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private void rotateAxes(AxisCollection axes) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0, size = axes.size(); i &amp;lt; size; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis axis = axes.get(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final AxisAlignment axisAlignment = axis.getAxisAlignment();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; switch (axisAlignment) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case Right:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Bottom);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case Left:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Top);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case Top:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Right);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case Bottom:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Left);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case Auto:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (axis.isXAxis()) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Bottom&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Left);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Right&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.setAxisAlignment(AxisAlignment.Bottom);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The modifier above allows to rotate a chart when added to its&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifierCollection&lt;/A&gt;.&lt;/P&gt;
&lt;H1&gt;Most Important Methods&lt;/H1&gt;
&lt;P&gt;The common methods that are currently implemented and are not likely to be&amp;nbsp;replaced&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article. In the table&amp;nbsp;below are listed methods which can be overridden to provide a custom behavior:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=635&gt;Method&lt;/TD&gt;
&lt;TD&gt;Description&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getRenderableSeries.html"&gt;&lt;EM&gt;getRenderableSeries()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns&amp;nbsp;the&amp;nbsp;RenderableSeries on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt; (&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;).&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getXAxes.html"&gt;&lt;EM&gt;getXAxes()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the XAxes on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;(SciChartSurface).&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getXAxis.html"&gt;&lt;EM&gt;getXAxis(String axisId)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Looks for the axis with the&amp;nbsp;Id among all the XAxes.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getXAxis.html"&gt;&lt;EM&gt;getXAxis()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the Primary Axis among all the XAxes.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getYAxes.html"&gt;&lt;EM&gt;getYAxes()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the YAxes on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;(&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;).&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getYAxis.html"&gt;&lt;EM&gt;getYAxis(String axisId)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Looks for the axis with the&amp;nbsp;Id among all the YAxes.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getYAxis.html"&gt;&lt;EM&gt;getYAxis()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the Primary Axis among all the YAxes.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getModifierSurface.html"&gt;&lt;EM&gt;getModifierSurface()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns&amp;nbsp;the&amp;nbsp;&lt;STRONG&gt;ModifierSurface&lt;/STRONG&gt; on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;.&amp;nbsp;All Views&amp;nbsp;produced by a modifier should be placed onto it. Also can be used to translate points relative to its boundaries.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getRenderableSeriesArea.html"&gt;&lt;EM&gt;getRenderableSeriesArea()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns&amp;nbsp;the&amp;nbsp;&lt;STRONG&gt;RenderableSeriesArea&lt;/STRONG&gt; on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;.&amp;nbsp;All RenderableSeries&amp;nbsp;are drawn on it. It is intended to be used to translate points relative to its boundaries.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getPointRelativeTo.html"&gt;&lt;EM&gt;getPointRelativeTo(PointF point, IHitTestable relativeTo)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Transforms a&amp;nbsp;point relative to the specified&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.IHitTestable.html"&gt;IHitTestable&lt;/A&gt;&amp;nbsp;instance within the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;. The&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.IHitTestable.html"&gt;IHitTestable&lt;/A&gt; to pass in can be obtained from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getModifierSurface.html"&gt;&lt;EM&gt;getModifierSurface()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getRenderableSeriesArea.html"&gt;&lt;EM&gt;getRenderableSeriesArea()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onTouch.html"&gt;&lt;EM&gt;onTouch(ModifierTouchEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Occurs in response to a touch event. See&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html#onTouchEvent(android.view.MotionEvent)"&gt;Android Documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Can be used with a&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/GestureDetector.html"&gt;GestureDetector&lt;/A&gt; to handle gestures. In this case a modifier should implement&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"&gt;OnGestureListener&lt;/A&gt;. Alternatively, inherit the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.GestureModifierBase.html"&gt;GestureModifierBase&lt;/A&gt; class&lt;EM&gt;.&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onGenericMotion.html"&gt;&lt;EM&gt;onGenericMotion(ModifierTouchEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs in response to any device event. See&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html#onGenericMotionEvent(android.view.MotionEvent)"&gt;Android Documentation&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~attachTo.html"&gt;&lt;EM&gt;attachTo()&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;/&amp;nbsp;&lt;/EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~detach.html"&gt;&lt;EM&gt;detach()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Is called when a modifier gets attached to / detached from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;. Current state can be checked with the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~isAttached.html"&gt;&lt;EM&gt;isAttached()&lt;/EM&gt;&lt;/A&gt; method.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~applyThemeProvider.html"&gt;&lt;EM&gt;applyThemeProvider(IThemeProvider themeProvider)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Is called when a new&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.themes.IThemeProvider.html"&gt;ThemeProvider&lt;/A&gt; is applied to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onIsEnabledChanged.html"&gt;&lt;EM&gt;onIsEnabledChanged(boolean isEnabled)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when&amp;nbsp;the modifier's state gets changed.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onParentSurfaceResized.html"&gt;&lt;EM&gt;onParentSurfaceResized(ResizedMessage message)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs in response&amp;nbsp;to resizing of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onRenderSurfaceRendered.html"&gt;&lt;EM&gt;onRenderSurfaceRendered(RenderedMessage message)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Is called&amp;nbsp;after every&amp;nbsp;render pass&amp;nbsp;of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onXAxesDrasticallyChanged.html"&gt;&lt;EM&gt;onXAxesDrasticallyChanged(ISciChartSurface surface)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Occurs in responce&amp;nbsp;to replacement of the XAxes collection on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setXAxes.html"&gt;setXAxes()&lt;/A&gt; method.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onXAxesCollectionChanged.html"&gt;&lt;EM&gt;onXAxesCollectionChanged(CollectionChangedEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when a new axis is added to the XAxes collection or any of the&amp;nbsp;present is removed.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onYAxesDrasticallyChanged.html"&gt;&lt;EM&gt;onYAxesDrasticallyChanged(ISciChartSurface surface)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Occurs in responce&amp;nbsp;to replacement of the YAxes collection on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setYAxes.html"&gt;setYAxes()&lt;/A&gt; method.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onYAxesCollectionChanged.html"&gt;&lt;EM&gt;onYAxesCollectionChanged(CollectionChangedEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when a new axis is added to the YAxes collection or any of the&amp;nbsp;present is removed.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onRenderableSeriesDrasticallyChanged.html"&gt;&lt;EM&gt;onRenderableSeriesDrasticallyChanged(ISciChartSurface surface)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs in responce&amp;nbsp;to replacement of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.RenderableSeriesCollection.html"&gt;RenderableSeriesCollection&lt;/A&gt; on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setRenderableSeries.html"&gt;&lt;EM&gt;setRenderableSeries()&lt;/EM&gt;&lt;/A&gt; method.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onRenderableSeriesCollectionChanged.html"&gt;&lt;EM&gt;onRenderableSeriesCollectionChanged(CollectionChangedEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when a new RenderableSeries is added to the RenderableSeriesCollection or any of the&amp;nbsp;present is removed.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onAnnotationsDrasticallyChanged.html"&gt;&lt;EM&gt;onAnnotationsDrasticallyChanged(ISciChartSurface surface)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs in responce&amp;nbsp;to replacement of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.AnnotationCollection.html"&gt;AnnotationCollection&lt;/A&gt;&amp;nbsp;on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;&amp;nbsp;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setAnnotations.html"&gt;&lt;EM&gt;setAnnotations()&lt;/EM&gt;&lt;/A&gt; method.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onAnnotationsCollectionChanged.html"&gt;&lt;EM&gt;onAnnotationsCollectionChanged(CollectionChangedEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when a new Annotation is added to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.AnnotationCollection.html"&gt;AnnotationCollection&lt;/A&gt; or any of the&amp;nbsp;present is removed.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=635&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onSelectedSeriesCollectionChanged.html"&gt;&lt;EM&gt;onSelectedSeriesCollectionChanged(CollectionChangedEventArgs args)&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Occurs when&amp;nbsp;any RenderableSeries is added to&amp;nbsp;or removed&amp;nbsp;from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getSelectedRenderableSeries.html"&gt;SelectedRenderableSeriesCollection&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&lt;/EM&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;If you want to handle gestures in your custom ChartModifier, you could derive it from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.GestureModifierBase.html"&gt;GestureModifierBase&lt;/A&gt;&amp;nbsp;class, which already&amp;nbsp;implements the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/GestureDetector.OnGestureListener.html"&gt;OnGestureListener&lt;/A&gt; interface and uses a&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/GestureDetector.html"&gt;GestureDetector&lt;/A&gt; internally.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;&lt;/STRONG&gt;&lt;/EM&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;The ModifierTouchEventArgs Type&lt;/H2&gt;
&lt;P&gt;If your custom ChartModifier requires to handle touch events or gestures, you will need to override either the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onTouch.html"&gt;&lt;EM&gt;onTouch()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~onGenericMotion.html"&gt;&lt;EM&gt;onGenericMotion()&lt;/EM&gt;&lt;/A&gt; method. Both receive&amp;nbsp;the only&amp;nbsp;parameter of the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs.html"&gt;ModifierTouchEventArgs&lt;/A&gt; type. This type exposes the following information about an event that occured:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;STRONG&gt;Field&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~source.html"&gt;Source&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Provides the source of the event, of the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.IReceiveMotionEvents.html"&gt;IReceiveMotionEvents&lt;/A&gt; type.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~isMaster.html"&gt;IsMaster&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Gets whether the event occured on the ParentSurface or was propagated through &lt;STRONG&gt;MotionEventGroup&lt;/STRONG&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~isInSourceBounds.html"&gt;IsInSourceBounds&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Reports whether the event occured within the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~source.html"&gt;Source&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~isHandled.html"&gt;IsHandled&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Reports whether the event has been already passed to any other modifier and handled by it.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=365&gt;&lt;A href="SciChart.Core~com.scichart.core.utility.touch.ModifierTouchEventArgs~e.html"&gt;E&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the original MotionEvent instance. See&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/MotionEvent.html"&gt;Android Documentation&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;To receive handled events, call the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase~setReceiveHandledEvents.html"&gt;setReceiveMotionEvents()&lt;/A&gt; on a modifier, passing in &lt;STRONG&gt;True&lt;/STRONG&gt;.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;EM&gt;&lt;/EM&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="4222877e-2352-4b7e-b9e0-c5ecfa8bc175" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="c74a7412-be95-413f-ac29-3be6a618190e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="aa5938cf-d3b6-465f-9c9e-281f49499642" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="e6dfa8ce-495c-4d6d-aab1-978dcc58bf2f" AutoIndex="false">
                <Caption m="2016-08-04T13:47:03.3171627Z">Zooming And Panning</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="d9ced961-1155-435f-8aee-686b9f60de40" Status="New Topic" CreatedOn="2016-10-07T16:11:43.5929053Z" ModifiedOn="2019-02-12T19:27:27.6011123Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PinchZoomModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:47.6526337Z">PinchZoomModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6011123Z">&lt;P&gt;SciChart for Android provides pinch zooming via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;PinchZoomModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;PinchZoomModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;set &lt;STRONG&gt;ScaleFactor&lt;/STRONG&gt; to &lt;STRONG&gt;change zooming speed&lt;/STRONG&gt;. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier~getScaleFactor.html"&gt;&lt;EM&gt;getScaleFactor()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier~setScaleFactor.html"&gt;&lt;EM&gt;setScaleFactor()&lt;/EM&gt;&lt;/A&gt; methods. Also, it allows to &lt;STRONG&gt;restrict zooming&lt;/STRONG&gt; to the horizontal or vertical direction only, via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier~getDirection.html"&gt;getDirection()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier~setDirection.html"&gt;&lt;EM&gt;setDirection()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Adding a PinchZoomModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create a PinchZoomModifier&lt;BR&gt;PinchZoomModifier pinchZoomModifier = new PinchZoomModifier();&lt;BR&gt;pinchZoomModifier.setScaleFactor(1.5f);&lt;BR&gt;pinchZoomModifier.setDirection(Direction2D.XDirection);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(pinchZoomModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier.html"&gt;PinchZoomModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="d5afdb01-1159-41ca-8a4e-1e81d13c6bcc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.PinchZoomModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3" Status="New Topic" CreatedOn="2016-10-10T11:47:18.4493252Z" ModifiedOn="2019-02-12T19:27:27.6070964Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ZoomPanModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:44.3317812Z">ZoomPanModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6070964Z">&lt;P&gt;SciChart for Android provides an inertial&amp;nbsp;scrolling / panning&amp;nbsp;behavior via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;ZoomPanModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;&lt;STRONG&gt;restrict scrolling&lt;/STRONG&gt; to the horizontal or vertical direction only, via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier~getDirection.html"&gt;getDirection()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier~setDirection.html"&gt;setDirection()&lt;/A&gt; methods. It is possible to configure it to keep series' peeks &lt;STRONG&gt;always in viewport&lt;/STRONG&gt; via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier~setZoomExtentsY.html"&gt;&lt;EM&gt;setZoomExtentsY()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;Also, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier~getClipModeX.html"&gt;&lt;EM&gt;setClipModeX()&lt;/EM&gt;&lt;/A&gt; method allows to specify the &lt;STRONG&gt;behavior when scrolling reaches data extents&lt;/STRONG&gt; in X direction. There are several behavioral modes defined&amp;nbsp;by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.ClipMode.html"&gt;ClipMode&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;ZoomPanModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create a ZoomPanModifier&lt;BR&gt;ZoomPanModifier zoomPanModifier = new ZoomPanModifier();&lt;BR&gt;zoomPanModifier.setClipModeX(ClipMode.None);&lt;BR&gt;zoomPanModifier.setDirection(Direction2D.XyDirection)&lt;BR&gt;zoomPanModifier.setZoomExtentsY(true);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(zoomPanModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier.html"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="f7be864d-4b74-4c7e-8155-c9241eaff773" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.ZoomPanModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3404e05e-872c-4be6-ab19-52ddac8c4f94" Status="New Topic" CreatedOn="2016-10-10T12:02:54.7541082Z" ModifiedOn="2019-02-12T19:27:27.6130803Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ZoomExtentsModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:40.9523374Z">ZoomExtentsModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6130803Z">&lt;P&gt;SciChart for Android provides &lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;the ability to zoom-to-fit the entire chart double-tapping&amp;nbsp;it&amp;nbsp;&lt;/SPAN&gt;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;&lt;STRONG&gt;restrict zooming behavior&amp;nbsp;&lt;/STRONG&gt;to the horizontal or vertical direction only, via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier~getDirection.html"&gt;getDirection()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier~setDirection.html"&gt;&lt;EM&gt;setDirection()&lt;/EM&gt;&lt;/A&gt; methods. It is possible to&amp;nbsp;&lt;STRONG&gt;switch on / off the animation&lt;/STRONG&gt; on zoom out&amp;nbsp;via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier~setIsAnimated.html"&gt;&lt;EM&gt;setIsAnimated()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;P&gt;Also, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier~setExecuteOn.html"&gt;&lt;EM&gt;setExecuteOn()&lt;/EM&gt;&lt;/A&gt; method allows to specify&amp;nbsp;the &lt;STRONG&gt;trigger action&lt;/STRONG&gt; for the modifier. There are several modes defined&amp;nbsp;by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ExecuteOn.html"&gt;ExecuteOn&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;ZoomExtentsModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create a ZoomExtentsModifier&lt;BR&gt;ZoomExtentsModifier zoomExtentsModifier = new ZoomExtentsModifier();&lt;BR&gt;zoomExtentsModifier.setDirection(Direction2D.XyDirection);&lt;/P&gt;
&lt;P&gt;zoomExtentsModifier.setExecuteOn(ExecuteOn.LongPress);&lt;/P&gt;
&lt;P&gt;zoomExtentsModifier.setIsAnimated(true);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(zoomExtentsModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="dd6356e6-c1fd-48c4-9d31-8d2f5ba94afb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.ZoomExtentsModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="4af28faf-3268-417a-8146-a3d25a8d9833" Status="New Topic" CreatedOn="2016-10-10T12:41:02.0257475Z" ModifiedOn="2019-02-12T19:27:27.6220564Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RubberBandXyZoomModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:27.5784463Z">RubberBandXyZoomModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6220564Z">&lt;P&gt;SciChart for Android provides&amp;nbsp;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;zooming via drag rectangle on&amp;nbsp;a chart&amp;nbsp;with&lt;/SPAN&gt; the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;. Besides&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;common features&lt;/A&gt; which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;&amp;nbsp;defines a bunch of&amp;nbsp;behavioral traits itself. Please find these in the table below: &amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getIsXAxisOnly.html"&gt;getIsXAxisOnly()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setIsXAxisOnly.html"&gt;&lt;EM&gt;setIsXAxisOnly()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;&lt;STRONG&gt;restrict zooming behavior&amp;nbsp;&lt;/STRONG&gt;to the&amp;nbsp;X Axis&amp;nbsp;only.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getIsAnimated.html"&gt;&lt;EM&gt;getIsAnimated()&lt;/EM&gt;&lt;/A&gt; / &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setIsAnimated.html"&gt;&lt;EM&gt;setIsAnimated()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;&lt;STRONG&gt;switch on / off the animation&lt;/STRONG&gt; on zoom.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getMinDragSensitivity.html"&gt;&lt;EM&gt;getMinDragSensitivity()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setMinDragSensitivity.html"&gt;&lt;EM&gt;setMinDragSensitivity()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify&amp;nbsp;the &lt;STRONG&gt;drag rectangle's minimal possible&amp;nbsp;size&lt;/STRONG&gt;.&amp;nbsp;Rectangles smaller than this size in the diagonal will be ignored when zooming.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getZoomExtentsY.html"&gt;&lt;EM&gt;getZoomExtentsY()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setZoomExtentsY.html"&gt;&lt;EM&gt;setZoomExtentsY()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Determines&amp;nbsp;whether to&amp;nbsp;perform &lt;STRONG&gt;zoom to extents on the Y Axis&lt;/STRONG&gt; on the each zoom operation or not.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getRubberBandStrokeStyle.html"&gt;&lt;EM&gt;getRubberBandStrokeStyle()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setRubberBandStrokeStyle.html"&gt;&lt;EM&gt;setRubberBandStrokeStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to assign an&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;object&amp;nbsp;to&amp;nbsp;the&amp;nbsp;&lt;STRONG&gt;outline of&amp;nbsp;the drag rectangle&lt;/STRONG&gt;. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~getRubberBandFillStyle.html"&gt;&lt;EM&gt;getRubberBandFillStyle()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier~setRubberBandFillStyle.html"&gt;&lt;EM&gt;setRubberBandFillStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to assign an&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt;&amp;nbsp;object&amp;nbsp;to&lt;STRONG&gt;&amp;nbsp;fill&amp;nbsp;the drag rectangle&lt;/STRONG&gt;. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section for more details.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Adding a&amp;nbsp;RubberBandXyZoomModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier&amp;nbsp; can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create a RubberBandXyZoomModifier&lt;BR&gt;RubberBandXyZoomModifier rubberBandZoomModifier = new RubberBandXyZoomModifier();&lt;BR&gt;rubberBandZoomModifier.setIsXAxisOnly(true);&lt;BR&gt;rubberBandZoomModifier.setZoomExtentsY(true);&lt;/P&gt;
&lt;P&gt;rubberBandZoomModifier.setIsAnimated(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;//&amp;nbsp;Apply a BrushStyle for fill&lt;/P&gt;
&lt;P&gt;BrushStyle brushStyle = new SolidBrushStyle(0x33999999);&lt;BR&gt;rubberBandZoomModifier.setRubberBandFillStyle(brushStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Apply a PenStyle for stroke&lt;/P&gt;
&lt;P&gt;PenStyle strokeStyle = new SolidPenStyle(0x77999999, true, 1f, null);&lt;BR&gt;rubberBandZoomModifier.setRubberBandStrokeStyle(strokeStyle);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(rubberBandZoomModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="ddc28a7a-cbda-4331-b995-001b354ebec3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.RubberBandXyZoomModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="8be89d95-1b3a-4ce3-8665-1f8f18d43b32" Status="New Topic" CreatedOn="2016-10-10T12:41:22.9621791Z" ModifiedOn="2019-02-12T19:27:27.6280405Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="YAxisDragModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:33.8262338Z">YAxisDragModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6280405Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.YAxisDragModifier.html"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;provides the&amp;nbsp;capability to&amp;nbsp;&lt;STRONG&gt;scale or pan an&amp;nbsp;Y Axis&lt;/STRONG&gt; via finger drag.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.YAxisDragModifier.html"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;change&amp;nbsp;the default&amp;nbsp;axis &lt;STRONG&gt;scaling&amp;nbsp;behavior&lt;/STRONG&gt; to axis&amp;nbsp;&lt;STRONG&gt;panning&amp;nbsp;behavior&lt;/STRONG&gt; (&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt; alike).&amp;nbsp;This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase~setDragMode.html"&gt;&lt;EM&gt;setDragMode()&lt;/EM&gt;&lt;/A&gt; method, which accepts&amp;nbsp;a member of&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase+AxisDragMode.html"&gt;AxisDragMode&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;P&gt;Also, it is possible to configure the &lt;STRONG&gt;sensitivity&lt;/STRONG&gt; of the modifier via the &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase~setMinTouchArea.html"&gt;&lt;EM&gt;setMinTouchArea()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;YAxisDragModifier &lt;!--DXMETADATA end--&gt;to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create an YAxisDragModifier&lt;BR&gt;YAxisDragModifier yAxisDrag = new YAxisDragModifier();&lt;BR&gt;yAxisDrag.setDragMode(AxisDragModifierBase.AxisDragMode.Pan);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(yAxisDrag);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.YAxisDragModifier.html"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="fa2042b5-0135-472b-a0a2-0711e03f3d89" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="ddb5c142-a26d-43c2-a1b8-1b73b31e2af7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.YAxisDragModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="52af4c4d-7018-4477-b7d4-5f9a14be1ea0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase+AxisDragMode" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3522c82b-989f-4d1b-bc80-be617b68af2f" Status="New Topic" CreatedOn="2016-10-11T16:31:27.4427274Z" ModifiedOn="2019-02-12T19:27:27.6340244Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="XAxisDragModifier" BuildFlags="">
                    <Title m="2016-10-11T16:31:39.8581013Z">XAxisDragModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6340244Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.XAxisDragModifier.html"&gt;XAxisDragModifier&lt;/A&gt;&amp;nbsp;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;provides the&amp;nbsp;capability to&amp;nbsp;&lt;STRONG&gt;scale or pan an&amp;nbsp;X Axis&lt;/STRONG&gt; via finger drag.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.ChartModifierBase.html"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.XAxisDragModifier.html"&gt;XAxisDragModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;change&amp;nbsp;the default&amp;nbsp;axis &lt;STRONG&gt;scaling&amp;nbsp;behavior&lt;/STRONG&gt; to axis&amp;nbsp;&lt;STRONG&gt;panning&amp;nbsp;behavior&lt;/STRONG&gt; (&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;alike).&amp;nbsp;This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase~setDragMode.html"&gt;&lt;EM&gt;setDragMode()&lt;/EM&gt;&lt;/A&gt; method, which accepts&amp;nbsp;a member of&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase+AxisDragMode.html"&gt;AxisDragMode&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;P&gt;Also, it is possible to configure the &lt;STRONG&gt;sensitivity&lt;/STRONG&gt; of the modifier via the &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase~setMinTouchArea.html"&gt;&lt;EM&gt;setMinTouchArea()&lt;/EM&gt;&lt;/A&gt; method.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;YAxisDragModifier &lt;!--DXMETADATA end--&gt;to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create an XAxisDragModifier&lt;BR&gt;XAxisDragModifier xAxisDrag = new XAxisDragModifier();&lt;BR&gt;xAxisDrag.setDragMode(AxisDragModifierBase.AxisDragMode.Pan);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(xAxisDrag);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.XAxisDragModifier.html"&gt;XAxisDragModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9927ef9d-7598-4f68-a935-9de2e895bbfe" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="eeaa9cc8-0e18-492a-9da2-4b1786405d20" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.XAxisDragModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="5cda983a-fa6c-4069-acea-32b594e70dcd" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.AxisDragModifierBase+AxisDragMode" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="5d3d5308-b11a-4f4f-9264-2de81d8d0971" AutoIndex="false">
                <Caption m="2016-10-17T15:24:55.8524474Z">Cursors and Tooltips</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="092285e6-c901-4a72-9af1-056057d0a22c" Status="New Topic" CreatedOn="2016-10-18T19:33:59.9369516Z" ModifiedOn="2019-02-12T19:27:27.6430005Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common Features and Tooltip Customization" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6430005Z">&lt;P&gt;The following features are common to all the modifiers that inherit&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase.html"&gt;TooltipModifierBase&lt;/A&gt;&amp;nbsp;(&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier.html"&gt;TooltipModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier.html"&gt;RolloverModifier&lt;/A&gt;):&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=384&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=384&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~getShowTooltip.html"&gt;&lt;EM&gt;getShowTooltip()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~setShowTooltip.html"&gt;&lt;EM&gt;setShowTooltip()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to &lt;STRONG&gt;hide or show&lt;/STRONG&gt; modifier's&amp;nbsp;Tooltips.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=384&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~getUseInterpolation.html"&gt;&lt;EM&gt;getUseInterpolation()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~setUseInterpolation.html"&gt;&lt;EM&gt;setUseInterpolation()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&lt;STRONG&gt;&amp;nbsp;show interpolated values&lt;/STRONG&gt; between data points.&amp;nbsp;&lt;STRONG&gt;True&lt;/STRONG&gt; by default. If &lt;STRONG&gt;False&lt;/STRONG&gt;, modifier's&amp;nbsp;Tooltips will report the info about closest data points.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=384&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~getSourceMode.html"&gt;&lt;EM&gt;getSourceMode()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase~setSourceMode.html"&gt;&lt;EM&gt;setSourceMode()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;specify which&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;are to be inspected by&amp;nbsp;a modifier&amp;nbsp;, e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode~AllVisibleSeries.html"&gt;VisibleSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode~SelectedSeries.html"&gt;SelectedSeries&lt;/A&gt;, etc.&amp;nbsp;Other will be &lt;STRONG&gt;ignored by the modifier&lt;/STRONG&gt;. Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode.html"&gt;SourceMode&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Tooltips Customization&lt;/H2&gt;
&lt;P&gt;In SciChart, tooltips customization can be achieved via the ISeriesInfoProvider and ISeriesTooltip interfaces. Tooltips can be&amp;nbsp;made unique&amp;nbsp;per a RenderableSeries instance via the setSeriesInfoProvider() method of the IRenderableSeries type. The base implementation is provided in the abstract SeriesInfoProviderBase class. A custom SeriesInfo can be derived directly from the interface or SeriesInfoProviderBase, or can extend any of the existing SeriesInfo classes. A custom SeriesInfo class should extend the SeriesInfo type and is created based on a RenderableSeries instance.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;/**&lt;BR&gt;&amp;nbsp;* Defines the interface which creates {@link SeriesInfo} and tooltips based on {@link SeriesInfo} values.&lt;BR&gt;&amp;nbsp;*/&lt;BR&gt;public interface ISeriesInfoProvider extends IAttachable {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates {@link SeriesInfo} instance which is attached to current {@link IRenderableSeries}.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return The {@link SeriesInfo} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SeriesInfo getSeriesInfo();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates {@link ISeriesTooltip} instance for specified {@code tooltipId} which is attached to current {@link IRenderableSeries}.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param modifierType The type of modifier for which tooltip will be created.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return Tooltip instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ISeriesTooltip getSeriesTooltip(Class&amp;lt;?&amp;gt; modifierType);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates {@link ISeriesTooltip} instance which is attached to current {@link IRenderableSeries}.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return Tooltip instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ISeriesTooltip getSeriesTooltip();&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;A custom Tooltip has to implement the ISeriesTooltip or extend the SeriesTooltipBase class, which is derived from TextView.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;/**&lt;BR&gt;&amp;nbsp;* Defines the interface for tooltips for {@link IRenderableSeries}.&lt;BR&gt;&amp;nbsp;*/&lt;BR&gt;public interface ISeriesTooltip extends ITooltip, IHitTestInfoUpdatable, IThemeable, IAttachable {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Gets the associated {@link SeriesInfo} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return The associated {@link SeriesInfo} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SeriesInfo getSeriesInfo();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Updates tooltips with specified updateAction.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param updateAction The action which updated this tooltip.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param xyCoordinate The {@link PointF} coordinate to update tooltip at.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void updateTooltip(Action2&amp;lt;View, PointF&amp;gt; updateAction, PointF xyCoordinate);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Draws overlay provided by this tooltip.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param canvas The target Canvas to draw overlay at.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void onDrawTooltipOverlay(Canvas canvas);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Checks whether series info contains passed in {@link IRenderableSeries} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Used mostly {@link StackedSeriesTooltipBase} and inheritors.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderableSeries The {@link IRenderableSeries} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return True if the underlying {@link SeriesInfo} contains passed in renderableSeries instance. Otherwise - false.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; boolean containsHitRenderableSeries(IRenderableSeries renderableSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Requests layout for {@link ISeriesTooltip} views using {@link View#requestLayout()}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void requestLayout();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Invalidate {@link ISeriesTooltip} views using {@link View#invalidate()}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void invalidate();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Sets the background color for this {@link ISeriesTooltip} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param color Int color which will be used as a background color.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void setTooltipBackgroundColor(@ColorInt int color);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Sets the stroke color for this {@link ISeriesTooltip} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param color Int color which will be used as a stroke color.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void setTooltipStroke(@ColorInt int color);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Sets the text color for this {@link ISeriesTooltip} instance.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param color Int color which will be used as a text color.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void setTooltipTextColor(@ColorInt int color);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="69d3f1b3-8f3c-45b3-8e21-116236ad0ebf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="5477a518-6d9e-4083-b7d4-6ccbff862bbe" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="764104d5-6906-439e-a2d8-72cc35308eee" Status="New Topic" CreatedOn="2016-10-07T16:12:59.4872857Z" ModifiedOn="2019-02-12T19:27:27.6529737Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TooltipModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6529737Z">&lt;P&gt;Tooltips may be added to the SciChartSurface using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier.html"&gt;TooltipModifier&lt;/A&gt;:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/TooltipModifierTooltips_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;TooltipModifier Usage&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier.html"&gt;TooltipModifier&lt;/A&gt;&amp;nbsp;allows inspecting&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;at a&amp;nbsp;touch position. For convenience,&amp;nbsp;the actual&amp;nbsp;hit-test point is located a bit upper. It&amp;nbsp;is marked&amp;nbsp;with&amp;nbsp;a small "X" sign. Tooltips will appear to the side of it, showing&amp;nbsp;the hit-test result for&amp;nbsp;all RenderableSeries&amp;nbsp;at the "X" location:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/TooltipModifier_Components.png"&gt;&lt;/P&gt;
&lt;P&gt;For hit-testing series parts that are close to the chart boundaries, a multi-touch finger drag can be used:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/Tooltips_NearEdge_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;TooltipModifier Features&lt;/H2&gt;
&lt;P&gt;To learn more about the inherited features from &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase.html"&gt;TooltipModifierBase&lt;/A&gt;&amp;nbsp;and tooltips customization, please refer to the&amp;nbsp;&lt;A href="092285e6-c901-4a72-9af1-056057d0a22c"&gt;Common Features and Tooltip Customization&lt;/A&gt; article. The features from the table below are disctinctive to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier.html"&gt;TooltipModifier&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=379&gt;Feature&lt;/TD&gt;
&lt;TD&gt;Description&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getOffset.html"&gt;&lt;EM&gt;getOffset()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setOffset.html"&gt;&lt;EM&gt;setOffset()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies how far the hit-test point is from the actual touch point. This value will be used for either&amp;nbsp;X or&amp;nbsp;Y coordinate, or both, depending on &lt;STRONG&gt;MarkerPlacement&lt;/STRONG&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getCustomPointOffset.html"&gt;&lt;EM&gt;getCustomPointOffset()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setCustomPointOffset.html"&gt;&lt;EM&gt;setCustomPointOffset()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies how far the hit-test point is from the actual touch point. As opposed to &lt;STRONG&gt;Offset&lt;/STRONG&gt;, both X and&amp;nbsp;Y&amp;nbsp;coordinate will &lt;STRONG&gt;always&lt;/STRONG&gt; be applied.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getMarkerPlacement.html"&gt;&lt;EM&gt;getMarkerPlacement()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setMarkerPlacement.html"&gt;&lt;EM&gt;setMarkerPlacement()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the position of the hit-test point &lt;STRONG&gt;relative to the touch point&lt;/STRONG&gt;,&amp;nbsp;e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~Left.html"&gt;Left&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~Top.html"&gt;Top&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~BottomRight.html"&gt;BottomRight&lt;/A&gt;.&amp;nbsp;Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement.html"&gt;Placement&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getTooltipPosition.html"&gt;&lt;EM&gt;getTooltipPosition()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setTooltipPosition.html"&gt;&lt;EM&gt;setTooltipPosition()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the position of modifier's&amp;nbsp;Toolips&amp;nbsp;&lt;STRONG&gt;relative to the hit-test point&lt;/STRONG&gt;,&amp;nbsp;e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition~TopLeft.html"&gt;TopLeft&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition~BottomRight.html"&gt;BottomRight&lt;/A&gt;.&amp;nbsp;Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition.html"&gt;TooltipPosition&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getTooltipPointMarkerPaint.html"&gt;&lt;EM&gt;getTooltipPointMarkerPaint()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Paint.html"&gt;Paint&lt;/A&gt; object that is responsible for the "X" marker drawing (marking the&amp;nbsp;hit-test point). Can be used to change style and color properties of the marker.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Adding a&amp;nbsp;TooltipModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Create a TooltipModifier&lt;BR&gt;TooltipModifier tooltipModifier = new TooltipModifier();&lt;BR&gt;tooltipModifier.setMarkerPlacement(Placement.Top);&lt;BR&gt;tooltipModifier.setTooltipPosition(TooltipPosition.TopRight);&lt;BR&gt;tooltipModifier.setSourceMode(SourceMode.AllVisibleSeries);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Add the modifier to the surface&lt;BR&gt;&amp;nbsp;surface.getChartModifiers().add(tooltipModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier.html"&gt;TooltipModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="9bd8be01-8fad-43a4-8af8-bbfa08098172" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="b484449d-164c-46a2-98bd-9971aa22fc27" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="566fbad3-1fe1-4c7c-92c4-dc633f6ee328" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="030dce95-3a2d-48de-a93a-b858c2d1ebd0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="4c330fa6-12dc-4f94-ac8e-6d66760ff1c0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="092285e6-c901-4a72-9af1-056057d0a22c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" Status="New Topic" CreatedOn="2016-10-07T16:13:08.8825627Z" ModifiedOn="2019-02-12T19:27:27.6629472Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CursorModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.6629472Z">&lt;P&gt;Crosshair or Cursor&amp;nbsp;can be added to the SciChartSurface using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;.&amp;nbsp;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;It allows to display a crosshairs at the touch-point and XAxis or YAxis labels. The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;is also able to display an aggregated tooltip (all series in one tooltip):&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/Cursor_Tooltips_framed.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;CursorModifier Usage&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;allows inspecting&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;at a&amp;nbsp;touch point. For convenience,&amp;nbsp;the actual&amp;nbsp;hit-test position is a bit upper. It&amp;nbsp;is marked&amp;nbsp;with&amp;nbsp;a "sniper aim". Tooltips will appear to the side of it, showing&amp;nbsp;the hit-test result for&amp;nbsp;all the&amp;nbsp;RenderableSeries under the cursor vertical line. Also, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;shows labels on axes for its horizontal, vertical lines.&lt;/P&gt;
&lt;P&gt;For hit-testing series parts that are close to the chart boundaries, a multi-touch finger drag can be used:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/Cursor_NearEdges_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;CursorModifier Features&lt;/H2&gt;
&lt;P&gt;To learn more about the inherited features from &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase.html"&gt;TooltipModifierBase&lt;/A&gt;&amp;nbsp;and tooltips customization, please refer to the&amp;nbsp;&lt;A href="092285e6-c901-4a72-9af1-056057d0a22c"&gt;Common Features and Tooltip Customization&lt;/A&gt; article. The features from the table below are disctinctive to the&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=379&gt;Feature&lt;/TD&gt;
&lt;TD&gt;Description&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getOffset.html"&gt;&lt;EM&gt;getOffset()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setOffset.html"&gt;&lt;EM&gt;setOffset()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies how far the hit-test point is from the actual touch point. This value will be used for either&amp;nbsp;X or&amp;nbsp;Y coordinate, or both, depending on &lt;STRONG&gt;MarkerPlacement&lt;/STRONG&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getCustomPointOffset.html"&gt;&lt;EM&gt;getCustomPointOffset()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setCustomPointOffset.html"&gt;&lt;EM&gt;setCustomPointOffset()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies how far the hit-test point is from the actual touch point. As opposed to &lt;STRONG&gt;Offset&lt;/STRONG&gt;, both X and&amp;nbsp;Y&amp;nbsp;coordinate will &lt;STRONG&gt;always&lt;/STRONG&gt; be applied.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getMarkerPlacement.html"&gt;&lt;EM&gt;getMarkerPlacement()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setMarkerPlacement.html"&gt;&lt;EM&gt;setMarkerPlacement()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the position of the hit-test point &lt;STRONG&gt;relative to the touch point&lt;/STRONG&gt;,&amp;nbsp;e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~Left.html"&gt;Left&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~Top.html"&gt;Top&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement~BottomRight.html"&gt;BottomRight&lt;/A&gt;.&amp;nbsp;Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.Placement.html"&gt;Placement&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getTooltipPosition.html"&gt;&lt;EM&gt;getTooltipPosition()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~setTooltipPosition.html"&gt;&lt;EM&gt;setTooltipPosition()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the position of modifier's&amp;nbsp;Toolips&amp;nbsp;&lt;STRONG&gt;relative to the hit-test point&lt;/STRONG&gt;,&amp;nbsp;e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition~TopLeft.html"&gt;TopLeft&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition~BottomRight.html"&gt;BottomRight&lt;/A&gt;.&amp;nbsp;Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipPosition.html"&gt;TooltipPosition&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier~getCrosshairPaint.html"&gt;&lt;EM&gt;getCrosshairPaint()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getTooltipPointMarkerPaint.html"&gt;&lt;/A&gt;Returns the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Paint.html"&gt;Paint&lt;/A&gt; object that is responsible for the&amp;nbsp;crosshair ("sniper aim")&amp;nbsp;drawing (marking the&amp;nbsp;hit-test point). Can be used to change style and color properties of the crosshair.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Adding a&amp;nbsp;CursorModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Create a CursorModifier&lt;BR&gt;CursorModifier cursorModifier = new CursorModifier();&lt;BR&gt;cursorModifier.setMarkerPlacement(Placement.Top);&lt;BR&gt;cursorModifier.setTooltipPosition(TooltipPosition.TopRight);&lt;BR&gt;cursorModifier.setSourceMode(SourceMode.AllVisibleSeries);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Add the modifier to the surface&lt;BR&gt;&amp;nbsp;surface.getChartModifiers().add(cursorModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="1107dba1-a783-40dd-bf6f-ef98a451d1e9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.CursorModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="76eb7b8f-3cc7-45f6-bbe8-ae6da32ef8b6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9aa1dcc7-546c-410c-902a-c16501d1b09c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="0eb24f25-d546-42d9-a3a9-518387079555" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="ab544988-198e-4472-9099-104cb4cdf58f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="092285e6-c901-4a72-9af1-056057d0a22c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="fac601dc-5435-4c51-abec-1c267f55f193" Status="New Topic" CreatedOn="2016-10-07T16:13:17.6740431Z" ModifiedOn="2019-02-12T19:27:27.668931Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RolloverModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.668931Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier.html"&gt;RolloverModifier&lt;/A&gt; can be used to show tooltips for all the series under&amp;nbsp;the vertical line drawn at the touch position:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/UsingRolloverModifierTooltips_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;RolloverModifier Features&lt;/H2&gt;
&lt;P&gt;To learn more about the inherited features from &lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase.html"&gt;TooltipModifierBase&lt;/A&gt;&amp;nbsp;and tooltips customization, please refer to the&amp;nbsp;&lt;A href="092285e6-c901-4a72-9af1-056057d0a22c"&gt;Common Features and Tooltip Customization&lt;/A&gt; article. The features from the table below are disctinctive to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier.html"&gt;RolloverModifier&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=379&gt;Feature&lt;/TD&gt;
&lt;TD&gt;Description&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=379&gt;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier~getDrawVerticalLine.html"&gt;getDrawVerticalLine()&lt;/A&gt;&lt;/EM&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier~setDrawVerticalLine.html"&gt;&lt;EM&gt;setDrawVerticalLine()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Enables or disables Rollover's&amp;nbsp;vertical line.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier~getVerticalLinePaint.html"&gt;&lt;EM&gt;getVerticalLinePaint()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifier~getTooltipPointMarkerPaint.html"&gt;&lt;/A&gt;Returns the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Paint.html"&gt;Paint&lt;/A&gt; object&amp;nbsp;for the Rollover's vertical line. Can be used to change style and color properties of the line.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Adding a&amp;nbsp;RolloverModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Create a RolloverModifier&lt;BR&gt;RolloverModifier rolloverModifier = new RolloverModifier();&lt;BR&gt;rolloverModifier.setSourceMode(SourceMode.AllVisibleSeries);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Add the modifier to the surface&lt;BR&gt;&amp;nbsp;surface.getChartModifiers().add(rolloverModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier.html"&gt;RolloverModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="7178099a-de13-458c-a9ad-c2f0e5bb99d7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.RolloverModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="554bb7d5-b8de-45bc-bdfa-b47119f5c3dd" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.TooltipModifierBase" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="808790b3-82df-456a-a82c-5e07cd43df9b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="80babbd5-095c-421e-a2dc-e219b7773622" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="76fb6d87-deb6-4bd8-9e74-1c1cef4258a2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="092285e6-c901-4a72-9af1-056057d0a22c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="d3700630-58d2-4b8c-8b92-66ec23b54a89" AutoIndex="false">
                <Caption m="2016-10-17T15:23:13.5237621Z">Selection and Legends</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="18b07bb4-d65f-4417-a954-4fb58a308818" Status="New Topic" CreatedOn="2016-10-07T16:13:19.3936687Z" ModifiedOn="2019-02-12T19:27:27.680899Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SeriesSelectionModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-02-12T19:27:27.680899Z">&lt;P&gt;SciChart features the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SeriesSelectionModifier.html"&gt;SeriesSelectionModifier&lt;/A&gt;, which allows selection of&amp;nbsp;the upmost&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; at&amp;nbsp;a touch position:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/SeriesSelection_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;SeriesSelectionModifier Usage&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SeriesSelectionModifier.html"&gt;SeriesSelectionModifier&lt;/A&gt;&amp;nbsp;allows setting of &lt;STRONG&gt;SelectedSeriesStyle&lt;/STRONG&gt;, which is applied to&amp;nbsp;a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; after it has been selected by the modifier. Internally, the modifier calls&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setIsSelected.html"&gt;&lt;EM&gt;setIsSelected()&lt;/EM&gt;&lt;/A&gt; method&amp;nbsp;on the topmost&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;to make it selected and tries to apply the&amp;nbsp;&lt;STRONG&gt;SelectedSeriesStyle&amp;nbsp;&lt;/STRONG&gt;calling the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~setSelectedSeriesStyle.html"&gt;&lt;EM&gt;setSelectedSeriesStyle()&lt;/EM&gt;&lt;/A&gt; method on it.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;STRONG&gt;SelectedSeriesStyle&lt;/STRONG&gt; has to implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ISeriesStyle.html"&gt;ISeriesStyle&lt;/A&gt; interface:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public interface ISeriesStyle {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Applies this style to specified renderable series.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderableSeries The target renderable series.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void applyStyle(IRenderableSeries renderableSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Discards this style on specified renderable series.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderableSeries The target renderable series.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; void discardStyle(IRenderableSeries renderableSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Gets the target renderable series type.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @return The target renderable series type.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Class&amp;lt;? extends IRenderableSeries&amp;gt; getSeriesType();&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In&amp;nbsp;an implementation of the interface, you should provide the desired&amp;nbsp;behavior&amp;nbsp;for a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Method&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=18&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ISeriesStyle~applyStyle.html"&gt;&lt;EM&gt;applyStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=18&gt;In&amp;nbsp;this&amp;nbsp;method you&amp;nbsp;have to&amp;nbsp;make the desired&amp;nbsp;changes to&amp;nbsp;a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;. It&amp;nbsp;is called when&amp;nbsp;a series&amp;nbsp;gets selected.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ISeriesStyle~discardStyle.html"&gt;&lt;EM&gt;discardStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;In this method you have to discard all the changes made in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ISeriesStyle~applyStyle.html"&gt;applyStyle()&lt;/A&gt; call.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.ISeriesStyle~getSeriesType.html"&gt;&lt;EM&gt;getSeriesType()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Returns the type of a&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;that this Style is to be applied to.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;For more convenience, there is a basic implementation called&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SeriesStyleBase.html"&gt;SeriesStyleBase&lt;/A&gt;. Extending it, you will need to implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SeriesStyleBase~applyStyleInternal.html"&gt;&lt;EM&gt;applyStyleInternal()&lt;/EM&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.SeriesStyleBase~discardStyleInternal.html"&gt;&lt;EM&gt;discardStyleInternal()&lt;/EM&gt;&lt;/A&gt; methods instead. Please find&amp;nbsp;a code sample below.&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;If you need to be able to select multiple RenderableSeries of different types, you&amp;nbsp;can return the IRenderableSeries as the RenderableSeries type, as it is shown in the code sample below. Alternatively, it is possible&lt;/EM&gt;&lt;EM&gt;&amp;nbsp;to have several SeriesSelectionModifiers with&amp;nbsp;Styles for different RenderableSeries types and ReceiveHandledEvents set to True.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;SeriesSelectionModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create a SeriesSelectionModifier&lt;BR&gt;SeriesSelectionModifier seriesSelectionModifier = new SeriesSelectionModifier();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create an ISeriesStyle&amp;nbsp;that will&amp;nbsp;be applied when a Series gets selected.&lt;/P&gt;
&lt;P&gt;ISeriesStyle selectedSeriesStyle = new SeriesStyleBase&amp;lt;IRenderableSeries&amp;gt;(IRenderableSeries.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle selectedStrokeStyle = sciChartBuilder.newPen().withColor(ColorUtil.White).withThickness(4f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final IPointMarker selectedPointMarker = sciChartBuilder.newPointMarker(new EllipsePointMarker()).withSize(10, 10).withFill(0xFFFF00DC).withStroke(ColorUtil.White, 1f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private static final String STROKE = "Stroke";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private static final String POINT_MARKER = "PointMarker";&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void applyStyleInternal(IRenderableSeries renderableSeriesToStyle) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; putPropertyValue(renderableSeriesToStyle, STROKE, renderableSeriesToStyle.getStrokeStyle());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; putPropertyValue(renderableSeriesToStyle, POINT_MARKER, renderableSeriesToStyle.getPointMarker());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeriesToStyle.setStrokeStyle(selectedStrokeStyle);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeriesToStyle.setPointMarker(selectedPointMarker);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void discardStyleInternal(IRenderableSeries renderableSeriesToStyle) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeriesToStyle.setStrokeStyle(getPropertyValue(renderableSeriesToStyle, STROKE, PenStyle.class));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderableSeriesToStyle.setPointMarker(getPropertyValue(renderableSeriesToStyle, POINT_MARKER, IPointMarker.class));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Set a style which will be applied to a RenderableSeries when selected&lt;BR&gt;seriesSelectionModifier.setSelectedSeriesStyle(selectedSeriesStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the modifier to the surface&lt;/P&gt;
&lt;P&gt;surface.getChartModifiers().add(seriesSelectionModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SeriesSelectionModifier.html"&gt;SeriesSelectionModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="57e25b1d-08bf-49d5-9503-9c05c67de0da" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.SeriesSelectionModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="730ac737-32bf-478e-8da5-495992093638" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="29d4bb96-2bb0-4003-ae05-389d42ad2866" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="f6e59c15-4337-410b-81e5-808989851e57" Status="New Topic" CreatedOn="2016-10-07T16:13:47.4163719Z" ModifiedOn="2019-08-13T10:51:10.2132192Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LegendModifier" BuildFlags="">
                    <Title m="2019-08-13T10:51:10.2127194Z">Legend Modifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-13T10:50:38.9079762Z">&lt;P&gt;In SciChart, the easiest way to&amp;nbsp;add a &lt;STRONG&gt;Legend&lt;/STRONG&gt; onto a chart is to use a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier.html"&gt;LegendModifier&lt;/A&gt;:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_ChartModifiers/ChartLegendsAPI_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;&amp;nbsp;LegendModifier Features&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier.html"&gt;LegendModifier&lt;/A&gt;&amp;nbsp;class exposes several configurational properties. Please find them explained in the table below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=416&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=416&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setShowLegend.html"&gt;&lt;EM&gt;setShowLegend()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to &lt;STRONG&gt;hide or show&lt;/STRONG&gt; the Legend.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=416&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setLegendPosition.html"&gt;&lt;EM&gt;setLegendPosition()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify&amp;nbsp;&lt;STRONG&gt;Gravity&lt;/STRONG&gt; and &lt;STRONG&gt;Margins&lt;/STRONG&gt; for the Legend.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=416&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setOrientation.html"&gt;&lt;EM&gt;setOrientation()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Determines&amp;nbsp;&lt;STRONG&gt;orientation&lt;/STRONG&gt; of the Legend. Can be&amp;nbsp;either Horizontal or Vertical.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setShowSeriesMarkers.html"&gt;&lt;EM&gt;setShowSeriesMarkers()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Determines whether to &lt;STRONG&gt;show colored markers&lt;/STRONG&gt; for every RenderableSeries in the Legend or not.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setShowCheckboxes.html"&gt;&lt;EM&gt;setShowCheckboxes()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Determines whether to &lt;STRONG&gt;show&amp;nbsp;visibility checkboxes&lt;/STRONG&gt;&amp;nbsp;for every RenderableSeries in the Legend or not. These allow hiding or showing&amp;nbsp;their corresponsing RenderableSeries.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=416&gt;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier~setSourceMode.html"&gt;&lt;EM&gt;setSourceMode()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to&amp;nbsp;specify which&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt;&amp;nbsp;should appear in the Legend, e.g.&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode~AllVisibleSeries.html"&gt;VisibleSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode~SelectedSeries.html"&gt;SelectedSeries&lt;/A&gt;, etc.&amp;nbsp;Other will be &lt;STRONG&gt;ignored by the modifier&lt;/STRONG&gt;. Expects a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.SourceMode.html"&gt;SourceMode&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Adding&amp;nbsp;the LegendModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A ChartModifier can be added to a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.ChartModifierCollection.html"&gt;ChartModifiersCollection&lt;/A&gt; of a SciChartSurface via&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.ISciChartSurface~getChartModifiers.html"&gt;&lt;EM&gt;getChartModifiers()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setChartModifiers.html"&gt;&lt;EM&gt;setChartModifiers()&lt;/EM&gt;&lt;/A&gt; methods. This can be done&amp;nbsp;using the code below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Create a LegendModifier&lt;/P&gt;
&lt;P&gt;LegendModifier legendModifier = new LegendModifier(getActivity());&lt;BR&gt;legendModifier.setShowLegend(true);&lt;BR&gt;legendModifier.setSourceMode(SourceMode.AllVisibleSeries);&lt;BR&gt;legendModifier.setOrientation(Orientation.HORIZONTAL);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;// Add the modifier to the surface&lt;BR&gt;&amp;nbsp;surface.getChartModifiers().add(legendModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier.html"&gt;LegendModifier&lt;/A&gt;&amp;nbsp;can be created using &lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;. To learn more about features available, Please refer to the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Placing Legend outside Chart&lt;/H2&gt;
&lt;P&gt;Starting from v2.1 and above you can place Legend outside chart. To do so first of all you need to declare SciChartLegend somewhere in your layout:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;XML layout&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="horizontal"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="0dp"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_weight="1"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"/&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting.visuals.legend.SciChartLegend&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/legend"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="wrap_content"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_gravity="center"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_margin="10dp"/&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then you need to find legend using findViewById() in code and use it to create LegendModifier:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Creation LegendModifier with legend outside Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// locate legend in layout&lt;/P&gt;
&lt;P&gt;final SciChartLegend legend = getActivity().findViewById(R.id.legend);&lt;/P&gt;
&lt;P&gt;// create LegendModifier using legend and passing useAutoPlacement = false to disable auto&amp;nbsp;placement of legend&amp;nbsp;within chart&lt;/P&gt;
&lt;P&gt;final LegendModifier legendModifier = new LegendModifier(legend, false);&lt;/P&gt;
&lt;P&gt;// Add the modifier to the surface&lt;BR&gt;surface.getChartModifiers().add(legendModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This should produce next output:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/LegendOutsideChart.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="2000ddae-3c22-4928-87c4-831e9b7c8a21" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.modifiers.LegendModifier" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="474f251f-ec1e-426b-a22c-ec589bd0a2ce" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="e6232eb1-3142-4753-939c-7a11493dd0be" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics />
          </TopicCategory>
          <TopicCategory Id="934a005f-39fb-4091-95b3-4b29c366fd22" AutoIndex="false">
            <Caption m="2016-08-04T14:58:49.4798347Z">Advanced 2D Charting Topics</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="67126749-e79c-4fd8-b0bc-2b394c114dd1" Status="New Topic" CreatedOn="2016-08-04T14:58:52.6786202Z" ModifiedOn="2019-08-14T12:03:46.5672993Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ViewportManager - Full Control over Axis Ranges and Viewport" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-14T12:03:46.5672993Z">&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;The &lt;STRONG&gt;ViewportManager API&lt;/STRONG&gt; provides fine-grained control over the SciChartSurface viewport, allowing you to configure the result of VisibleRange calculations on a per-axis basis, change zoom level or&amp;nbsp;invalidate a chart.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;You can declare a viewport manager and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setViewportManager.html"&gt;assign to a SciChartSurface&lt;/A&gt; using the following code. By default SciChart has a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.DefaultViewportManager.html"&gt;DefaultViewportManager&lt;/A&gt; assigned. You can also inherit this type and provide your own Viewport Managers.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting ViewportManager&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;SciChartSurface surface = ...;&lt;BR&gt;surface.setViewportManager(new DefaultViewportManager());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Overriding Axis VisibleRanges&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;The most powerful feature of the ViewportManager is the abilty to intercept the Axis&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;VisibleRange&lt;/A&gt; calculations and return your own custom range. Use this if you want to have full control over the axis, not just set a new VisibleRange.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;Define your own ViewportManager as follows:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomViewportManager&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomViewportManager extends DefaultViewportManager {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onUpdateXAxis(IAxisCore xAxis) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onUpdateXAxis(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // called before drawing of xAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here you can update visible range&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRange visibleRange = xAxis.getVisibleRange();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onUpdateYAxis(IAxisCore yAxis) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onUpdateYAxis(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // called before drawing of yAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here you can update visible range&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRange visibleRange = yAxis.getVisibleRange();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onApplyAutoRange(IAxisCore axis) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onApplyAutoRange(axis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // called when axis uses AutoRange.Always or AutoRange.Once &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here you can update visible range when need to perform auto range&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IRange visibleRange = axis.getVisibleRange();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;Then attach it to a chart. If you put a breakpoint in your&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager~updateXAxis.html"&gt;onUpdateXAxis&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.viewportManagers.IViewportManager~updateYAxis.html"&gt;onUpdateYAxis&lt;/A&gt; methods you will see these being hit when the chart resizes or redraws and you can manipulate the calculated visible range passed to SciChart as you wish.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 13px; FONT-FAMILY: "Segoe UI", Verdana, Arial; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal'&gt;&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2e02ad3c-378c-4512-9b05-49a6b0f0fa61" Status="New Topic" CreatedOn="2016-09-08T12:18:01.5318743Z" ModifiedOn="2019-08-14T11:23:25.9501772Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RenderContext API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-14T11:23:25.9501772Z">&lt;P&gt;The secret to SciChart’s speed is a bespoke, immediate-mode raster drawing engine. This means that all drawing in SciChart is done ‘immediately’ to the screen, and is cleared and redrawn each time the chart is updated.&lt;/P&gt;
&lt;P&gt;Now in SciChart you can take advantage of our immediate-mode drawing API, to create custom RenderableSeries, custom Point-Markers, Draw on top of the chart, or even create your own immediate-mode drawing applications.&lt;/P&gt;
&lt;H2&gt;The IRenderContext2D Interface&lt;/H2&gt;
&lt;P&gt;All the drawing to the separate layer is achieved with the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D.html"&gt;IRenderContext2D&lt;/A&gt; interface. All drawing is done to the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface.html"&gt;RenderSurface&lt;/A&gt;, using either a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.canvas.RenderSurface.html"&gt;Canvas API&lt;/A&gt;, or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;OpenGL&lt;/A&gt; depending on your RenderSurface.&lt;/P&gt;
&lt;P&gt;Using this interface, you can:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawLine.html"&gt;draw&lt;/A&gt;&amp;nbsp;lines of variable stroke width 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawRect.html"&gt;draw&lt;/A&gt; a rectangle 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawEllipse.html"&gt;draw&lt;/A&gt; an ellipse shape 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawTrianglesStrip.html"&gt;fill&lt;/A&gt; an area with a brush 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~fillRect.html"&gt;fill&lt;/A&gt; a rectangle area 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawText.html"&gt;draw&lt;/A&gt; some text to the render surface 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawSprite.html"&gt;draw&lt;/A&gt;&amp;nbsp;sprite 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~setClipRect.html"&gt;set&lt;/A&gt; clip rect which prevents drawing outside specified bounds 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~rotate.html"&gt;rotate&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~scale.html"&gt;scale&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~translate.html"&gt;translate&lt;/A&gt; RenderContext&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Believe it or not, you can achieve a lot with just those!&lt;/P&gt;
&lt;H2&gt;The IAssetManager2D interface&lt;/H2&gt;
&lt;P&gt;The second part RenderContext API is IAssetManager2D interface which is responsible for creation and storing of RenderSurface specific resources from Style classes.&lt;/P&gt;
&lt;P&gt;Using this interface, you can&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createPen.html"&gt;create&lt;/A&gt; pens to draw stroke with 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createBrush.html"&gt;create&lt;/A&gt; brushes to fill rects, ellipses with 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createTexture.html"&gt;create textures&lt;/A&gt;&amp;nbsp;from Bitmap 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~storeResource.html"&gt;store&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~getResource.html"&gt;get&lt;/A&gt;&amp;nbsp;some heavy&amp;nbsp;resources which should be reused during drawing (e.g. textures, sprites ) &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Example of using RenderContext API&lt;/H2&gt;
&lt;P&gt;For example we'll create a simple example of&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurfaceRenderer.html"&gt;IRenderSurfaceRenderer&lt;/A&gt; which can be&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface~setRenderer.html"&gt;set as renderer for RenderSurface&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom RenderSurface Renderer&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private class TestRenderSurfaceRenderer implements IRenderSurfaceRenderer{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final RectF sprite2Rect = new RectF(0,0, 0.5f, 0.5f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final RectF sprite3Rect = new RectF(0.25f,0.25f, 0.75f, 0.75f);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle solidStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle linearGradient;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle radialGradient;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final TextureBrushStyle textureStyle;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle simpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle aaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle texturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle texturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FontStyle fontStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FontStyle customFontStyle;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final Bitmap texture;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final float[] xAxisArrow = {0,0, 50, 0, 30, -10, 50, 0, 30, 10, 50, 0};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final float[] yAxisArrow = {0,0, 0, 50, -10, 30, 0, 50, 10, 30, 0, 50};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private float degrees, dx, dy, opacity;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public TestRenderSurfaceRenderer(Bitmap texture) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; solidStyle = new SolidBrushStyle(ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; linearGradient = new LinearGradientBrushStyle(0, 0, 1, 1, ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8), ColorUtil.argb(0xEE, 0x13, 0x24, 0xA5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; radialGradient = new RadialGradientBrushStyle(0.5f, 0.5f, 0.5f, 0.5f, ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8), ColorUtil.argb(0xEE, 0x13, 0x24, 0xA5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textureStyle = new TextureBrushStyle(texture);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontStyle = new FontStyleBuilder(getActivity()).withTextSize(32).withTextColor(ColorUtil.Red).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customFontStyle = new FontStyleBuilder(getActivity()).withTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD_ITALIC)).withTextSize(23).withTextColor(ColorUtil.Yellow).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; simpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Red).withAntiAliasing(false).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Green).withAntiAliasing(true).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; texturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; texturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(1f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Blue).withAntiAliasing(false).withThickness(1f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Magenta).withAntiAliasing(true).withThickness(1f).withStrokeDashArray(new float[]{10, 5, 10, 5}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withStrokeDashArray(new float[]{5, 10, 5, 10}).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withStrokeDashArray(new float[]{10, 5, 10, 5}).withThickness(1f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Red).withAntiAliasing(false).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Green).withAntiAliasing(true).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(10f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Blue).withAntiAliasing(false).withThickness(20f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Magenta).withAntiAliasing(true).withThickness(20f).withStrokeDashArray(new float[]{0, 20, 10, 5}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(20f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(20).withStrokeDashArray(new float[]{0, 20, 10, 5}).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.texture = texture;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceAttached(IRenderSurface surface) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceDetached(IRenderSurface surface) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceSizeChanged(int width, int height, int oldWidth, int oldHeight) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void setTransform(float degrees, float dx, float dy, float opacity){&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.degrees = degrees;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.dx = dx&amp;nbsp; - translateX.getMax() / 2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.dy = dy - translateY.getMax() / 2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.opacity = opacity;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onDraw(IRenderContext2D renderContext, IAssetManager2D assetManager) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(dx, dy);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.rotate(degrees);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D solidBrushPerScreen = assetManager.createBrush(solidStyle, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D radialGradientBrushPerScreen = assetManager.createBrush(radialGradient, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D linearGradientBrushPerScreen = assetManager.createBrush(linearGradient, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D textureBrushPerScreen = assetManager.createBrush(textureStyle, TextureMappingMode.PerScreen, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D solidBrushPerPrimitive = assetManager.createBrush(solidStyle, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D radialGradientBrushPerPrimitive = assetManager.createBrush(radialGradient, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D linearGradientBrushPerPrimitive = assetManager.createBrush(linearGradient, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D textureBrushPerPrimitive = assetManager.createBrush(textureStyle, TextureMappingMode.PerPrimitive, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D simpleLine = assetManager.createPen(this.simpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D aaLine = assetManager.createPen(this.aaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedSimpleLine = assetManager.createPen(this.dashedSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedAaLine = assetManager.createPen(this.dashedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickSimpleLine = assetManager.createPen(this.thickSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickAaLine = assetManager.createPen(this.thickAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickSimpleLine = assetManager.createPen(this.dashedThickSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickAaLine = assetManager.createPen(this.dashedThickAaLine, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D texturedLine = assetManager.createPen(this.texturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D texturedAaLine = assetManager.createPen(this.texturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedTexturedLine = assetManager.createPen(this.dashedTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedTexturedAaLine = assetManager.createPen(this.dashedTexturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickTexturedLine = assetManager.createPen(this.thickTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickTexturedAaLine = assetManager.createPen(this.thickTexturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickTexturedLine = assetManager.createPen(this.dashedThickTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickTexturedAaLine = assetManager.createPen(this.dashedThickTexturedAaLine, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IFont font = assetManager.createFont(this.fontStyle);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IFont customFont = assetManager.createFont(this.customFontStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite1 = assetManager.createTexture(texture);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite2 = assetManager.createTexture(texture, sprite2Rect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite3 = assetManager.createTexture(texture, sprite3Rect);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLines(xAxisArrow, 0, xAxisArrow.length, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLines(yAxisArrow, 0, yAxisArrow.length, aaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.save();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(10, 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 0, 80, 80, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 0, 180, 80, aaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 0, 280, 80, dashedSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 0, 380, 80, dashedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 100, 80, 180, thickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 100, 180, 180, thickAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 100, 280, 180, dashedThickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 100, 380, 180, dashedThickAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 0, 80, 80, texturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 0, 180, 80, texturedAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 0, 280, 80, dashedTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 0, 380, 80, dashedTexturedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 100, 80, 180, thickTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 100, 180, 180, thickTexturedAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 100, 280, 180, dashedThickTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 100, 380, 180, dashedThickTexturedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(0, 0, 80, 80, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(100, 0, 180, 80, aaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(200, 0, 280, 80, dashedSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(300, 0, 380, 80, dashedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(0, 100, 80, 180, thickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(100, 100, 180, 180, thickAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(200, 100, 280, 180, dashedThickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(300, 100, 380, 180, dashedThickAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(0, 0, 80, 80, solidBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(100, 0, 180, 80, linearGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(200, 0, 280, 80, radialGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(300, 0, 380, 80, textureBrushPerScreen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(0, 100, 80, 180, solidBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(100, 100, 180, 180, linearGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(200, 100, 280, 180, radialGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(300, 100, 380, 180, textureBrushPerPrimitive);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(50, 50, 80, 80, simpleLine, solidBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(150, 50, 80, 80, aaLine, linearGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(250, 50, 80, 80, dashedSimpleLine, radialGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(350, 50, 80, 80, dashedAaLine, textureBrushPerScreen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(50, 150, 80, 80, thickSimpleLine, solidBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(150, 150, 80, 80, thickAaLine, linearGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(250, 150, 80, 80, dashedThickSimpleLine, radialGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(350, 150, 80, 80, dashedThickAaLine, textureBrushPerPrimitive);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.restore();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.save();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(500, 0);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 0, fontStyle.textColor, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 50, fontStyle.textColor, "abcdefghijklmnopqrstuvwxyz");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 100, fontStyle.textColor, "&lt;A href="mailto:1234567890~!@#$%^&amp;amp;*()-+=/|\\'\"&gt;1234567890~!@#$%^&amp;amp;*()-+=/|\\'\&lt;/A&gt;"");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 150, customFontStyle.textColor, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 200, customFontStyle.textColor, "abcdefghijklmnopqrstuvwxyz");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 250, customFontStyle.textColor, "&lt;A href="mailto:1234567890~!@#$%^&amp;amp;*()-+=/|\\'\"&gt;1234567890~!@#$%^&amp;amp;*()-+=/|\\'\&lt;/A&gt;"");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 300);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite1, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite1.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite2, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite2.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite3, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite3.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite1.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite2.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite3.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d9d4e37d-15fa-4b3c-9bc8-91358e70ac48" Status="New Topic" CreatedOn="2019-08-16T07:34:02.332123Z" ModifiedOn="2019-08-16T13:02:41.4459432Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Renderer Plugins" BuildFlags="">
                <Title m="2019-08-16T13:02:41.4439376Z">Renderer Plugins</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-16T12:44:51.8062058Z">&lt;P&gt;SciChart ships with three&amp;nbsp;swappable renderer plugins which perform the final draw for RenderableSeries and Axes on the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getRenderSurface.html"&gt;SciChartSurface.RenderSurface&lt;/A&gt;. These plugins are detailed below. To use them you can&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setRenderSurface.html"&gt;set SciChartSurface.RenderSurface&lt;/A&gt; or extend&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt; and overide&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getDefaultRenderSurface.html"&gt;getDefaultRenderSurface()&lt;/A&gt; to return alternaitive implementation:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set RenderSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = ...;&lt;/P&gt;
&lt;P&gt;surface.setRenderSurface(new RenderSurfaceGL(context));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom SciChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CanvasSciChartSurface extends SciChartSurface {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CanvasSciChartSurface(Context context) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CanvasSciChartSurface(Context context, AttributeSet attrs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, attrs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CanvasSciChartSurface(Context context, AttributeSet attrs, int defStyleAttr) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, attrs, defStyleAttr);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected IRenderSurface getDefaultRenderSurface(Context context) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new RenderSurface(context); // return Canvas based IRenderSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;GLTextureView&lt;/H2&gt;
&lt;P&gt;Since v3.0&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.GLTextureView.html"&gt;GLTextureView&lt;/A&gt; is a default&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface.html"&gt;IRenderSurface&lt;/A&gt; implementation which is used by&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt; for drawing of its RenderableSeries and Axes. It uses OpenGL for rendering ( it's&amp;nbsp;based on&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/TextureView"&gt;TextureView&lt;/A&gt; class provided by Android SDK) and&amp;nbsp;creates a&amp;nbsp;separate Thread for rendering which makes is suitable for the most cases. Unlike&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;RenderSurfaceGL&lt;/A&gt; it doesn't have a problem with Z-order and transparency but is abit slower because it requires GPU to blitt its content onto the View layer. The GPU can do this quickly, but in case of&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;RenderSurfaceGL&lt;/A&gt; which creates a separate layer for this it isn't required at all.&lt;/P&gt;
&lt;H2&gt;RenderSurfaceGL&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;RenderSurfaceGL&lt;/A&gt; was default RenderSurface used by SciChart Android prior to v3.0. It uses OpenGL for rendering and based on&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/opengl/GLSurfaceView"&gt;GLSurfaceView&lt;/A&gt; class provided by Android SDK. This is the fastest implementation in terms of performance because its surface which is used for rendering gets passed directly to the surface compositor, so when you draw on it with OpenGL there's relatively little overhead. Also it&amp;nbsp;uses separate Thread for rendering.&amp;nbsp;This makes it fast, but it also makes it not play quite right with the View hierarchy, because the surface is rendered&amp;nbsp;on one layer and the View-based UI is on a different layer. This means that if you use this type of surface you can get a problem with Z-order&amp;nbsp;and problem with transparency ( you can't place Android View below surface )&lt;/P&gt;
&lt;H2&gt;RenderSurface&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.canvas.RenderSurface.html"&gt;RenderSurface&lt;/A&gt; uses &lt;A href="https://developer.android.com/reference/android/graphics/Canvas"&gt;Canvas API&lt;/A&gt; isntead of OpenGL for rendering and doesn't use separate Thread for rendering which makes it slower than other OpenGL based&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface.html"&gt;IRenderSurface&lt;/A&gt; implementations, but because of this it doesn't introduce overhead on startup (&amp;nbsp;it doesn't require additional time to initialize OpenGL and start render Thread&amp;nbsp;) which may lead to seing a black screen on startup when surface isn't fully initialized. This makes it ideal for cases when you need to attach/detach&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt; from View hierarchy many times (e.g. when you place chart into RecycleView which recycles its items)&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7ef3a430-fd62-49be-b736-22f81384115c" Status="New Topic" CreatedOn="2019-08-16T12:44:58.0172258Z" ModifiedOn="2019-08-16T13:05:08.9593305Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Export Chart to Bitmap" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-16T13:05:08.9593305Z">&lt;P&gt;SciChart features a number of ways to export the chart to Bitmap.&lt;/P&gt;
&lt;H2&gt;Export Chart from Screen to Bitmap&lt;/H2&gt;
&lt;P&gt;SciChart supports export to Bitmap. To take screenshot the &lt;U&gt;current chart on screen&lt;/U&gt; and get a Bitmap in memory, call the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Export to Bitmap&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = ...;&lt;/P&gt;
&lt;P&gt;final Bitmap screenshot = surface.exportToBitmap();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Export Chart to Bitmap in Memory at specific Size&lt;/H2&gt;
&lt;P&gt;SciChart supports exporting to&amp;nbsp;Bitmap at a specific size without showing chart on screen ( in-memory export ). This method can be used to create a larger or higher resolution image than the chart currently on screen.&lt;/P&gt;
&lt;P&gt;To do this, please use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Export in Memory&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// create new SciChartSurface&lt;/P&gt;
&lt;P&gt;final SciChartSurface sciChartSurface = new SciChartSurface(getActivity()); &lt;/P&gt;
&lt;P&gt;// init it with axes, series etc&lt;/P&gt;
&lt;P&gt;initSurface(sciChartSurface);&lt;/P&gt;
&lt;P&gt;// prepare it for export at specified size&lt;/P&gt;
&lt;P&gt;SciChartSurfaceExportUtil.prepareSurfaceForExport(sciChartSurface, 800, 600);&lt;/P&gt;
&lt;P&gt;// export it to Bitmap&lt;/P&gt;
&lt;P&gt;final Bitmap screenshot = sciChartSurface.exportToBitmap();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Export ViewGroup which contains ScichartSurface&lt;/H2&gt;
&lt;P&gt;By default SciChartSurface&amp;nbsp;&lt;A href="d9d4e37d-15fa-4b3c-9bc8-91358e70ac48"&gt;can be used with different IRenderSurface implementations&lt;/A&gt;. Some of them (e.g.&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;RenderSurfaceGL&lt;/A&gt; which uses OpenGL for rendering of its content) won't be visible&amp;nbsp;when you call&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html#draw(android.graphics.Canvas)"&gt;draw()&lt;/A&gt; on parent ViewGroup. So if need to export ViewGroup which contains&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;then you need to switch to&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.canvas.RenderSurface.html"&gt;Canvas based RenderSurface&lt;/A&gt; before export:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set Canvas based&amp;nbsp;RenderSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = ...;&lt;/P&gt;
&lt;P&gt;surface.setRenderSurface(new RenderSurface(context));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="498f88e2-6f84-4804-9da5-426e8d72ef00" Status="New Topic" CreatedOn="2019-08-16T13:05:59.2168225Z" ModifiedOn="2019-08-16T13:25:40.1552155Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Suspending Updates of Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-16T13:25:40.1552155Z">&lt;P&gt;When performing multiple updates, such as VisibleRange changes, DataSeries changes and RenderableSeries or Axis property changes, each change can potentially trigger a redraw in SciChart. To prevent this and combine several updates into one, use the methods from the&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.ISuspendable.html"&gt;ISuspendable&lt;/A&gt; implementation on&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt; or use&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.UpdateSuspender~using.html"&gt;UpdateSuspender.using()&lt;/A&gt; helper method which accepts&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.ISuspendable.html"&gt;ISuspendable&lt;/A&gt; which should be suspended and Runnable which should be executed while&amp;nbsp;&lt;A href="SciChart.Core~com.scichart.core.framework.ISuspendable.html"&gt;ISuspendable&lt;/A&gt;&amp;nbsp;is suspended.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Using UpdateSuspender API&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// use try-with-resources statement&lt;/P&gt;
&lt;P&gt;try(IUpdateSuspender suspender = surface.suspendUpdates()){&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;dataSeries.append(x1, y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x2, y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x3, y4);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Collections.addAll(surface.getRenderableSeries(), rSeries);&lt;BR&gt;} catch (Exception e){&lt;BR&gt;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;or use UpdateSuspender.using() which does the same thing&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;dataSeries.append(x1, y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dataSeries.append(x2, y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x3, y4);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getXAxes(), xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getYAxes(), yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface.getRenderableSeries(), rSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P class=NewStyle3&gt;Using UpdateSuspender API to avoid problems because of&amp;nbsp;multithreading&lt;/P&gt;
&lt;P&gt;By default SciChartSurface&amp;nbsp;&lt;A href="d9d4e37d-15fa-4b3c-9bc8-91358e70ac48"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;can be used with different IRenderSurface implementations&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;. Some of them create a separate Java Thread for rendering (e.g.&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;RenderSurfaceGL&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.GLTextureView.html"&gt;GLTextureView&lt;/A&gt;). This means that chart can be updated from one Thread ( usually from UI Thread ) and rendered on other thread. Potentially this could lead to different problems ( race conditions, deadlocks etc )&amp;nbsp;when different Threads try to get access to some shared resource ( in our case&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;or its part ). In this case UpdateSuspender API which allows to avoid these kind of problems by telling&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;or its part that you want to update it.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="6f709290-a0f5-4fd7-a944-9180795038df" AutoIndex="false">
            <Caption m="2016-10-21T10:20:42.4974424Z">Annotations API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="06b6036b-fbc1-41e4-905a-52ec73295788" Status="New Topic" CreatedOn="2016-10-21T10:34:26.4092461Z" ModifiedOn="2019-02-12T19:29:13.1645444Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What Is an Annotation" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.1645444Z">&lt;P&gt;SciChart features a rich &lt;STRONG&gt;Annotations API&lt;/STRONG&gt;, that allows you to place&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android Views&lt;/A&gt;&amp;nbsp;over a chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/Annotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;Annotation Features&lt;/H2&gt;
&lt;P&gt;Annotations can provide &lt;STRONG&gt;interactive&lt;/STRONG&gt; event/news bullets, horizontal/vertical lines (thresholds), text/callouts as well as measurements such as Peak-to-peak or cycle duration. Annotations can be edited by click &amp;amp; drag,&amp;nbsp;added by touching a screen, or, simply created programmatically. SciChat provides a number of built-in annotations, but you can also create your own. To find out more about annotations features, please&amp;nbsp;see&amp;nbsp;the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotations Features&lt;/A&gt; article.&lt;/P&gt;
&lt;H2&gt;Annotation Types&lt;/H2&gt;
&lt;P&gt;The following annotation types are&amp;nbsp;available out of the box in SciChart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="463874a3-04b9-430b-be53-63863b12a39b"&gt;AxisMarkerAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to place &lt;STRONG&gt;markers&lt;/STRONG&gt; with custom&amp;nbsp;text&amp;nbsp;onto X, Y axes.&amp;nbsp;By default, shows the axis value at its location.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=481&gt;&lt;A href="583becc5-a46d-4fdf-9b69-f6b2f973deb8"&gt;BoxAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Draws&amp;nbsp;a &lt;STRONG&gt;rectangle&lt;/STRONG&gt; at&amp;nbsp;specific X1, X2, Y1, Y2&amp;nbsp;coordinates.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="46e0aece-c112-40af-a0e8-46c69045fd50"&gt;HorizontalLineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws a &lt;STRONG&gt;horizontal line&lt;/STRONG&gt;&amp;nbsp;between X1, X2 coordinates at Y1.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="1150712d-1531-47f8-a9f7-c8fa6662edbe"&gt;VerticalLineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws a &lt;STRONG&gt;vertical line&lt;/STRONG&gt;&amp;nbsp;between Y1, Y2 coordinates at X1.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=481&gt;&lt;A href="963d03d5-c2f0-4143-9817-8b37186bfe69"&gt;LineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Draws&amp;nbsp;a &lt;STRONG&gt;line&lt;/STRONG&gt;&amp;nbsp;between X1, Y1 and X2, Y2 positions.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="7b100b94-ef0c-4cc9-a73a-7ee728f7208d"&gt;LineArrowAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws&amp;nbsp;an&amp;nbsp;&lt;STRONG&gt;arrow&lt;/STRONG&gt;&amp;nbsp;from X1, Y1&amp;nbsp;to X2, Y2 position.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="72e4491f-8140-49cb-8bd3-85b381967f87"&gt;TextAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to place a piece of &lt;STRONG&gt;text&lt;/STRONG&gt; at a specific location on a chart.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="24a50b9d-0b8d-4124-b5e0-db75517608bc"&gt;CustomAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to place any&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android View&lt;/A&gt; at a specific location on a chart.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;To learn more about any annotation type, please refer to the corresponding article.&lt;/P&gt;
&lt;H2&gt;Adding an Annotation Onto a Chart&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;stores all&amp;nbsp;its annotations in the internal&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.AnnotationCollection.html"&gt;AnnotationCollection&lt;/A&gt;. It exposes the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~getAnnotations.html"&gt;&lt;EM&gt;getAnnotations()&lt;/EM&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurface~setAnnotations.html"&gt;&lt;EM&gt;setAnnotations()&lt;/EM&gt;&lt;/A&gt; methods to access it.&amp;nbsp;The following code can be used to do this:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Assume the surface has been created and configured earlier&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Create and configure a HorizontalLineAnnotation&lt;/P&gt;
&lt;P&gt;HorizontalLineAnnotation horizontalLineAnnotation = new HorizontalLineAnnotation(getActivity());&lt;BR&gt;horizontalLineAnnotation.setX1(5d);&lt;BR&gt;horizontalLineAnnotation.setY1(3.2d);&lt;BR&gt;horizontalLineAnnotation.setStroke(new PenStyle(ColorUtil.Orange, false, 2f));&lt;BR&gt;horizontalLineAnnotation.setHorizontalGravity(Gravity.RIGHT);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the annotation to the AnnotationsCollection of a surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), horizontalLineAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also Annotations can be added using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a watermark&amp;nbsp;using a TextAnnotation&lt;BR&gt;TextAnnotation textAnnotation = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(0.5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withY1(0.5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(Typeface.DEFAULT_BOLD, 42, 0x22FFFFFF)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withCoordinateMode(AnnotationCoordinateMode.Relative)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalAnchorPoint(HorizontalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Center)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("Create \n Watermarks")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextGravity(Gravity.CENTER)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build()&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Add the annotation to the AnnotationsCollection of a surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ff5ee86f-157c-4d62-8add-12f4696d8c12" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eb06f90d-c336-4017-8068-62479d395260" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0a6362da-15c5-4d9b-bc56-fe64f2e1cfa2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7df45f73-3483-4737-9cf5-0844b614d734" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="463874a3-04b9-430b-be53-63863b12a39b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="210540cc-5e46-4f64-ab54-3b211027664f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="583becc5-a46d-4fdf-9b69-f6b2f973deb8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7cc37c76-c206-4f03-976f-75475f52635b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="46e0aece-c112-40af-a0e8-46c69045fd50" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6ae2693a-9197-4c0b-84dd-66cd3c12072c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1150712d-1531-47f8-a9f7-c8fa6662edbe" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c3cbd76d-1db8-4fa2-ba4f-a2f2243b30f3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="963d03d5-c2f0-4143-9817-8b37186bfe69" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a61737e9-5ff5-4de6-a125-d95e60089b93" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7b100b94-ef0c-4cc9-a73a-7ee728f7208d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="cb7f6ea5-f6b9-4721-8c4f-b9608d9efa9d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="24a50b9d-0b8d-4124-b5e0-db75517608bc" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f1e5b335-80a8-49aa-a447-d46fac4cefed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72e4491f-8140-49cb-8bd3-85b381967f87" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" Status="New Topic" CreatedOn="2016-10-21T12:19:59.4705124Z" ModifiedOn="2019-02-12T19:29:13.1785072Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common Annotations Features" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.1785072Z">&lt;P&gt;All the Annotation classes provided by SciChart implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation.html"&gt;IAnnotation&lt;/A&gt; interface and&amp;nbsp;derive from&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase.html"&gt;AnnotationBase&lt;/A&gt; class. These provide an API which&amp;nbsp;allows to put&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android Views&lt;/A&gt; onto a chart and&amp;nbsp;interact with them.&lt;/P&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;What is an Annotation&amp;nbsp;&lt;/A&gt;article for the complete&amp;nbsp;list of all the Annotation types available out of the box in SciChart.&lt;/P&gt;
&lt;H2&gt;Common Features of Annotations&lt;/H2&gt;
&lt;P&gt;The table below lists all the methods declared&amp;nbsp;by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation.html"&gt;IAnnotation&lt;/A&gt;&amp;nbsp;interface:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getX1.html"&gt;&lt;EM&gt;getX1()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X1, X2, Y1, Y2 specify the position of an annotation on a SciChartSurface. These are &lt;STRONG&gt;chart coordinates&lt;/STRONG&gt;, not device (screen or pixel) coordinates. To find out about coordinate transformation in SciChart, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=37 width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getX2.html"&gt;&lt;EM&gt;getX2()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=37&gt;X1, X2, Y1, Y2 specify the position of an annotation on a SciChartSurface. These are &lt;STRONG&gt;chart coordinates&lt;/STRONG&gt;, not device (screen or pixel) coordinates. To find out about coordinate transformation in SciChart, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getY1.html"&gt;&lt;EM&gt;getY1()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X1, X2, Y1, Y2 specify the position of an annotation on a SciChartSurface. These are &lt;STRONG&gt;chart coordinates&lt;/STRONG&gt;, not device (screen or pixel) coordinates. To find out about coordinate transformation in SciChart, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getY2.html"&gt;&lt;EM&gt;getY2()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X1, X2, Y1, Y2 specify the position of an annotation on a SciChartSurface. These are &lt;STRONG&gt;chart coordinates&lt;/STRONG&gt;, not device (screen or pixel) coordinates. To find out about coordinate transformation in SciChart, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getXAxisId.html"&gt;&lt;EM&gt;getXAxisId()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setXAxisId()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies&amp;nbsp;the &lt;STRONG&gt;ID of X Axis&lt;/STRONG&gt;&amp;nbsp;that this annotation is measured against.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getYAxisId.html"&gt;&lt;EM&gt;getYAxisId()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies&amp;nbsp;the &lt;STRONG&gt;ID of&amp;nbsp;Y Axis&lt;/STRONG&gt;&amp;nbsp;that this annotation is measured against.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~isSelected.html"&gt;&lt;EM&gt;isSelected()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setSelected.html"&gt;&lt;EM&gt;setSelected()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Makes an annotation &lt;STRONG&gt;Selected&lt;/STRONG&gt;. When Selected, round resizing markers appears at the ends or corners of the annotation which can be used to resize it. Resizing markers can be changed via the setResizingGrip() method (see the following&amp;nbsp;table).&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~isEditable.html"&gt;&lt;EM&gt;isEditable()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setIsEditable.html"&gt;&lt;EM&gt;setIsEditable()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies whether an annotation is available for interaction. When &lt;STRONG&gt;Editable&lt;/STRONG&gt;, the annotation can be &lt;STRONG&gt;Selected, Moved and Resized&lt;/STRONG&gt; by a user with a finger.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~isHidden.html"&gt;&lt;EM&gt;isHidden()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setIsHidden.html"&gt;&lt;EM&gt;setIsHidden()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Hides or shows&lt;/STRONG&gt; an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getDragDirections.html"&gt;&lt;EM&gt;getDragDirections()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setDragDirections.html"&gt;&lt;EM&gt;setDragDirections()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to &lt;STRONG&gt;constrain drag&amp;nbsp;directions&lt;/STRONG&gt; for an annotation. Accepts a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.Direction2D.html"&gt;Direction2D&lt;/A&gt;&amp;nbsp;enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getResizeDirections.html"&gt;&lt;EM&gt;getResizeDirections()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setResizeDirections.html"&gt;&lt;EM&gt;setResizeDirections()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to &lt;STRONG&gt;constrain resize&amp;nbsp;directions&lt;/STRONG&gt; for an annotation. Accepts a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.Direction2D.html"&gt;Direction2D&lt;/A&gt; enumeration.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=370&gt;&lt;/TD&gt;
&lt;TD height=19&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setOnAnnotationDragListener.html"&gt;&lt;EM&gt;setOnAnnotationDragListener()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to appoint &lt;STRONG&gt;OnAnnotationDragListener&lt;/STRONG&gt; to receive notifications about&amp;nbsp;user interactions with an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setOnAnnotationSelectionChangeListener.html"&gt;&lt;EM&gt;setOnAnnotationSelectionChangeListener()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Allows to appoint &lt;STRONG&gt;OnAnnotationSelectionChangeListener&lt;/STRONG&gt; to receive notifications about&amp;nbsp;user interactions with an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setOnAnnotationIsHiddenChangeListener.html"&gt;&lt;EM&gt;setOnAnnotationIsHiddenChangeListener()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to appoint &lt;STRONG&gt;OnAnnotationIsHiddenChangeListener&lt;/STRONG&gt; to receive notifications when an annotation gets hidden or visible.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~moveAnnotation.html"&gt;&lt;EM&gt;moveAnnotation()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Moves&lt;/STRONG&gt; an annotation by&amp;nbsp;the specified amount in&amp;nbsp;horizontal and vertical&amp;nbsp;directions.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~refresh.html"&gt;&lt;EM&gt;refresh()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Redraws&lt;/STRONG&gt; an annotation without invalidating the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;. Calls&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~update.html"&gt;&lt;EM&gt;update()&lt;/EM&gt;&lt;/A&gt; internally.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=370&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~update.html"&gt;&lt;EM&gt;update()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Redraws&lt;/STRONG&gt; an annotation without invalidating the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~getParentSurface.html"&gt;ParentSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;Methods, inherited from the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase.html"&gt;AnnotationBase&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=372&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=372&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~getResizingGrip.html"&gt;&lt;EM&gt;getResizingGrip()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setResizingGrip.html"&gt;&lt;EM&gt;setResizingGrip()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Determines&amp;nbsp;what &lt;STRONG&gt;resizing markers&amp;nbsp;look&lt;/STRONG&gt; like. Custom ones&amp;nbsp;have to&amp;nbsp;implement&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IResizingGrip.html"&gt;IResizingGrip&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=372&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~getCoordinateMode.html"&gt;&lt;EM&gt;getCoordinateMode()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setCoordinateMode.html"&gt;&lt;EM&gt;setCoordinateMode()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Determines whether X1, X2, Y1, Y2 coordinates are in&amp;nbsp;&lt;STRONG&gt;chart coordinates&amp;nbsp;or&lt;/STRONG&gt; in &lt;STRONG&gt;relative screen coordinates.&lt;/STRONG&gt; Relative&amp;nbsp;coordinates&lt;STRONG&gt;&amp;nbsp;&lt;/STRONG&gt;range from 0 to 1, where 1&amp;nbsp;refers to&amp;nbsp;the full&amp;nbsp;Width or Height of&amp;nbsp;the canvas.&lt;/P&gt;
&lt;P&gt;Accepts a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationCoordinateMode.html"&gt;AnnotationCoordinateMode&lt;/A&gt; enumeration.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~getAnnotationSurface.html"&gt;&lt;EM&gt;getAnnotationsSurface()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setAnnotationsSurface.html"&gt;&lt;EM&gt;setAnnotationsSurface()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Specifies a &lt;STRONG&gt;surface&lt;/STRONG&gt; to place an annotation on. All possible&amp;nbsp;options are declared by the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationSurfaceEnum.html"&gt;AnnotationSurfaceEnum&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; &lt;EM&gt;This feature doesn't work for all the annotation types. For now, it has an effect on&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotations&lt;/A&gt;&lt;/EM&gt; &lt;EM&gt;only. Other annotation types will ignore it.&lt;/EM&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;For more information about specifics of any&amp;nbsp;annotation type, please refer to the corresponding article on that annotation&amp;nbsp;type. The&amp;nbsp;full&amp;nbsp;list of annotation classes provided by SciChart can be found in the&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;What is an Annotation&amp;nbsp;&lt;/A&gt;article.&lt;/P&gt;
&lt;H2&gt;Annotation Alignment (Anchor Points)&lt;/H2&gt;
&lt;P&gt;There is&amp;nbsp;the subset of classes&amp;nbsp;among&amp;nbsp;all the annotation types&amp;nbsp;that&amp;nbsp;allows their&amp;nbsp;instances&amp;nbsp;to&amp;nbsp;be &lt;STRONG&gt;aligned relative to the X1,Y1&lt;/STRONG&gt; control point. The base class responsible for this behavior is called&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnchorPointAnnotation.html"&gt;AnchorPointAnnotation&lt;/A&gt;. It&amp;nbsp;adds two methods,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnchorPointAnnotation~setHorizontalAnchorPoint.html"&gt;&lt;EM&gt;setHorizontalAnchorPoint()&lt;/EM&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnchorPointAnnotation~setVerticalAnchorPoint.html"&gt;&lt;EM&gt;setVerticalAnchorPoint()&lt;/EM&gt;,&lt;/A&gt; that&amp;nbsp;accept&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalAnchorPoint.html"&gt;HorizontalAnchorPoint&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalAnchorPoint.html"&gt;VerticalAnchorPoint&lt;/A&gt; enumeration members correspondingly. The image below illustrates how it works:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/AnchorPoints.jpg"&gt;&lt;/P&gt;
&lt;P&gt;The annotation types that derive from&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnchorPointAnnotation.html"&gt;AnchorPointAnnotation&lt;/A&gt;&amp;nbsp;are&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;. As the information above implies, annotations of these types are controlled by the X1,Y1 coordinates only.&amp;nbsp;The X2,Y2 coordinates&amp;nbsp;have no impact on placement and are&amp;nbsp;simply ignored.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="7c140b2f-feec-4b55-9128-89be3ae4b201" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="365d3d4b-eed6-461c-8653-bbe2b14bb23d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b97f30d8-217d-477e-9c26-5ab49dda44b5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.AnchorPointAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7f159b86-2534-46bf-94c4-889942a3af99" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="463874a3-04b9-430b-be53-63863b12a39b" Status="New Topic" CreatedOn="2016-10-21T13:19:00.2595246Z" ModifiedOn="2019-02-12T19:29:13.1914724Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AxisMarkerAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:14.1901827Z">AxisMarkerAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.1914724Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt; type allows to place &lt;STRONG&gt;markers&lt;/STRONG&gt; with custom&amp;nbsp;text&amp;nbsp;onto X or&amp;nbsp;Y axes.&amp;nbsp;By default, they show the axis value at&amp;nbsp;their location:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/AxisMarkers_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;AxisMarkerAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. Among those that are specific to&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;, the most important are listed in the table below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=423&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=423&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~getFormattedValue.html"&gt;&lt;EM&gt;getFormattedValue()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~setFormattedValue.html"&gt;&lt;EM&gt;setFormattedValue()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the text that will apear on the marker.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=423&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~setFormattedValueProvider.html"&gt;&lt;EM&gt;getFormattedValueProvider()&lt;/EM&gt;&lt;/A&gt; /&lt;EM&gt;&amp;nbsp;&lt;/EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~getFormattedValueProvider.html"&gt;&lt;EM&gt;setFormattedValueProvider()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Allows to override the&amp;nbsp;default formatted value,&amp;nbsp;which comes from an axis via&amp;nbsp;an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisInfo.html"&gt;AxisInfo&lt;/A&gt; object. To do this, you need to implement the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IFormattedValueProvider.html"&gt;IFormattedValueProvider&lt;/A&gt; interface. The default implementation can be found in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.DefaultFormattedValueProvider.html"&gt;DefaultFormattedValueProvider&lt;/A&gt; class.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~getFontStyle.html"&gt;&lt;EM&gt;getFontStyle()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~setFontStyle.html"&gt;&lt;EM&gt;setFontStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Determines the appearance of the text on the marker via&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt; object. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt;&amp;nbsp;article to learn more.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=423&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~getMarkerPointWidth.html"&gt;&lt;EM&gt;getMarkerPointWidth()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation~setMarkerPointWidth.html"&gt;&lt;EM&gt;setMarkerPointWidth()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify the &lt;STRONG&gt;length of the pointed end&lt;/STRONG&gt; of the marker.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Position AxisMarkerAnnotation&lt;/H2&gt;
&lt;P&gt;The position of an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;is defined by the&lt;STRONG&gt;&amp;nbsp;X1 or Y1 coordinate&lt;/STRONG&gt;, depending on axis.&amp;nbsp;It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt; methods.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;can be &lt;STRONG&gt;placed on an X axis or an Y axis&lt;/STRONG&gt;. This must be specified when an annotation is created via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setAnnotationsSurface.html"&gt;&lt;EM&gt;setAnnotationSurface()&lt;/EM&gt;&lt;/A&gt; method. It accepts a member of the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationSurfaceEnum.html"&gt;AnnotationSurfaceEnum&lt;/A&gt; enumeration.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;P&gt;Also,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;can be aligned&amp;nbsp;relative to the X1 or Y1 coordinate&amp;nbsp;setting&amp;nbsp;&lt;STRONG&gt;Anchor Points&lt;/STRONG&gt;. Please refer to the corresponding section of the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt;&amp;nbsp;article for more information.&lt;/P&gt;
&lt;H2&gt;Create AxisMarkerAnnotation&lt;/H2&gt;
&lt;P&gt;An&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an AxisMarkerAnnotation&lt;/P&gt;
&lt;P&gt;AxisMarkerAnnotation topMarker1 = new AxisMarkerAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the marker in run-time&lt;BR&gt;topMarker1.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;topMarker1.setXAxisId("Top_X_Axis");&lt;BR&gt;topMarker1.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify that the marker should appear on an X Axis&lt;BR&gt;// The X Axis is chosen by the XAxisId set above&lt;BR&gt;topMarker1.setAnnotationsSurface(AnnotationSurfaceEnum.XAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// set the X1 coordinate, since the marker is going to be located on an X axis&lt;BR&gt;topMarker1.setX1(400d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// set the text which will appear on the marker&lt;BR&gt;// by default, shows the axis value at the location&lt;BR&gt;topMarker1.setFormattedValue("X1 Position");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify the background color for the marker&lt;BR&gt;topMarker1.setBackgroundColor(0x99279B27);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a FontStyle for the marker&lt;BR&gt;FontStyle markerFont = new FontStyle(14, ColorUtil.White);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// apply the FontStyle&lt;BR&gt;topMarker1.setFontStyle(markerFont);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), topMarker1);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please note that majority of the values in the code sample above&amp;nbsp;are set&amp;nbsp;for educational purposes. Most of them are optional (such as FontStyle and Background)&amp;nbsp;and inherit their default values from the default style. The ones that &lt;STRONG&gt;must be set&lt;/STRONG&gt; are &lt;STRONG&gt;AnnotationsSurface&lt;/STRONG&gt; (canvas), &lt;STRONG&gt;X1&amp;nbsp;or Y1&lt;/STRONG&gt; (position)&amp;nbsp;and &lt;STRONG&gt;XAxisId or YAxisId&lt;/STRONG&gt; (in a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;&amp;nbsp;or if axis Ids where&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~setAxisId.html"&gt;set explicitly&lt;/A&gt;&amp;nbsp;to specify the axis). To learn more about these, please scroll the page&amp;nbsp;up to the opening paragraphs.&lt;/P&gt;
&lt;P&gt;Also, an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation.html"&gt;AxisMarkerAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;AxisMarkerAnnotation topMarker1 = sciChartBuilder.newAxisMarkerAnnotation()&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAnnotationSurface(AnnotationSurfaceEnum.XAxis)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withX1(400d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBackgroundColor(0x99279B27)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId("Top_X_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("Left_Y_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFormattedValue("T1")&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="00c58404-1272-49a7-b7cc-da9efa056792" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.AxisMarkerAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="77df5af4-d080-4e3d-83bc-f4f11f1748d1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="802243d5-7fc4-4a12-a2c4-584102511db4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="583becc5-a46d-4fdf-9b69-f6b2f973deb8" Status="New Topic" CreatedOn="2016-10-21T13:19:27.8616755Z" ModifiedOn="2019-02-12T19:29:13.2004482Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="BoxAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:34.9265961Z">BoxAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2004482Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt; draws&amp;nbsp;a &lt;STRONG&gt;rectangle&lt;/STRONG&gt; at&amp;nbsp;specific X1, X2, Y1, Y2&amp;nbsp;coordinates:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/BoxAnnotation_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;BoxAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class.&amp;nbsp;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt;&amp;nbsp;class doesn't&amp;nbsp;define any configurable features on its own. The background color can be assigned via corresponding&amp;nbsp;methods, inherited from&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;View&lt;/A&gt;, such&amp;nbsp;as &lt;EM&gt;&lt;A href="https://developer.android.com/reference/android/view/View.html#setBackgroundColor(int)"&gt;setBackgroundColor()&lt;/A&gt;&lt;/EM&gt; and&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html#setBackgroundResource(int)"&gt;&lt;EM&gt;setBackgroundResource()&lt;/EM&gt;&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Position BoxAnnotation&lt;/H2&gt;
&lt;P&gt;A &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt;&amp;nbsp;is placed on a chart&amp;nbsp;at the position determined by its&amp;nbsp;&lt;STRONG&gt;X1,Y1 and X2,Y2&amp;nbsp;coordinates&lt;/STRONG&gt;, which&amp;nbsp;correspond to the &lt;STRONG&gt;top-left and bottom-right&amp;nbsp;corners&lt;/STRONG&gt; of&amp;nbsp;the drawn rectangle. It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;, &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create BoxAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a BoxAnnotation&lt;/P&gt;
&lt;P&gt;BoxAnnotation boxAnnotation = new BoxAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the annotation in run-time&lt;BR&gt;boxAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;boxAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;boxAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;a desired position by setting coordinates&lt;BR&gt;boxAnnotation.setX1(1d);&lt;/P&gt;
&lt;P&gt;boxAnnotation.setY1(4.6d);&lt;/P&gt;
&lt;P&gt;boxAnnotation.setX2(10d);&lt;/P&gt;
&lt;P&gt;boxAnnotation.setY2(9.1d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify the background color for the annotation&lt;BR&gt;boxAnnotation1.setBackgroundColor(0x44FF1919);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), boxAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation.html"&gt;BoxAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;BoxAnnotation boxAnnotation = sciChartBuilder.newBoxAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(3.5d, 4d, 5d, 5d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withBackgroundDrawableId(R.drawable.example_box_annotation_background_1)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId("Top_X_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId("Left_Y_Axis")&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build()&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="1e7a32e0-c9ad-4136-982c-d4a91bb41221" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.BoxAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0e683fda-7ae5-43ea-83d9-0d03133651aa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="49a08204-4190-4a64-9a6f-bed7ac6ed702" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="46e0aece-c112-40af-a0e8-46c69045fd50" Status="New Topic" CreatedOn="2016-10-21T13:19:42.7029317Z" ModifiedOn="2019-02-12T19:29:13.2104219Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="HorizontalLineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:54.5452128Z">HorizontalLineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2104219Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt; allows to&lt;!--DXMETADATA end--&gt;&amp;nbsp;draw a &lt;STRONG&gt;horizontal line&lt;/STRONG&gt;&amp;nbsp;between X1, X2 coordinates at Y1:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/HorizontalLineAnnotations_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;HorizontalLineAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class.&amp;nbsp;&amp;nbsp;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt;&amp;nbsp;class itself allows setting &lt;STRONG&gt;HorizontalGravity&lt;/STRONG&gt;. More about it in the next paragraph.&lt;/P&gt;
&lt;H2&gt;Position HorizontalLineAnnotation&lt;/H2&gt;
&lt;P&gt;In general case, the position of an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt;&amp;nbsp;can be&amp;nbsp;defined by the&lt;STRONG&gt;&amp;nbsp;Y1 value.&lt;/STRONG&gt; It can be set via the &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt; method.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Additionaly, it is possible to specify&amp;nbsp;X coordinates for the line ends. This requires setting&amp;nbsp;&lt;STRONG&gt;HorizontalGravity&lt;/STRONG&gt; to a corresponding value via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation~setHorizontalGravity.html"&gt;&lt;EM&gt;setHorizontalGravity()&lt;/EM&gt;&lt;/A&gt; method. The recognizable&amp;nbsp;values are&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#FILL_HORIZONTAL"&gt;Gravity.FILL_HORIZONTAL&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#CENTER_HORIZONTAL"&gt;Gravity.CENTER_HORIZONTAL&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#RIGHT"&gt;Gravity.RIGHT&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#LEFT"&gt;Gravity.LEFT&lt;/A&gt;. In combination with the&amp;nbsp;X1, X2 values they will end up in the following behavior:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;for &lt;A href="https://developer.android.com/reference/android/view/Gravity.html#FILL_HORIZONTAL"&gt;Gravity.FILL_HORIZONTAL&lt;/A&gt;, both X coordinates&amp;nbsp;are ignored. The line appear horizontally&amp;nbsp;&lt;STRONG&gt;stretched&lt;/STRONG&gt;. This is the &lt;STRONG&gt;default value&lt;/STRONG&gt;. 
&lt;LI&gt;for &lt;A href="https://developer.android.com/reference/android/view/Gravity.html#CENTER_HORIZONTAL"&gt;Gravity.CENTER_HORIZONTAL&lt;/A&gt;, both &lt;STRONG&gt;X1 and X2&lt;/STRONG&gt; coordinates will be applied. 
&lt;LI&gt;for&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#RIGHT"&gt;Gravity.RIGHT&lt;/A&gt;&amp;nbsp;and &lt;A href="https://developer.android.com/reference/android/view/Gravity.html#LEFT"&gt;Gravity.LEFT&lt;/A&gt;, the &lt;STRONG&gt;X1&lt;/STRONG&gt; coordinate will be applied to the loose end of a line. The line appear pinned to one side. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The X1, X2 values can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create HorizontalLineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a HorizontalLineAnnotation&lt;/P&gt;
&lt;P&gt;HorizontalLineAnnotation horizontalLine = new HorizontalLineAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the annotation in run-time&lt;BR&gt;horizontalLine.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;horizontalLine.setXAxisId("Top_X_Axis");&lt;BR&gt;horizontalLine.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify that the annotation should appear fully stretched&lt;/P&gt;
&lt;P&gt;horizontalLine.setHorizontalGravity(Gravity.FILL_HORIZONTAL);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// set the Y1 coordinate&lt;BR&gt;horizontalLine.setY1(400d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), horizontalLine);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation.html"&gt;HorizontalLineAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;HorizontalLineAnnotation horizontalLine = sciChartBuilder.newHorizontalLineAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(5d, 3.2d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(2, ColorUtil.Orange)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHorizontalGravity(Gravity.RIGHT)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId("Top_X_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId("Left_Y_Axis")&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0520f6d6-7020-4920-bd1d-1fb0d12d1f09" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.HorizontalLineAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fbe4766e-403a-4597-8375-f03c6a4aaad5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f9838e8b-606b-4d30-b297-15fbb4c7eff7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1150712d-1531-47f8-a9f7-c8fa6662edbe" Status="New Topic" CreatedOn="2016-10-21T13:20:00.0315864Z" ModifiedOn="2019-02-12T19:29:13.2203948Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="VerticalLineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:09.8829093Z">VerticalLineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2203948Z">&lt;P&gt;[This article is under construction.]&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt; allows to&amp;nbsp;draw a &lt;STRONG&gt;vertical line&lt;/STRONG&gt;&amp;nbsp;between Y1, Y2 coordinates at X1.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/VerticalLines_framed.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;VerticalLineAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class.&amp;nbsp;&amp;nbsp;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt;&amp;nbsp;class itself allows setting &lt;STRONG&gt;VerticalGravity&lt;/STRONG&gt;. More about it in the next paragraph.&lt;/P&gt;
&lt;H2&gt;Position VerticalLineAnnotation&lt;/H2&gt;
&lt;P&gt;In general case, the position of an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt;&amp;nbsp;can be&amp;nbsp;defined by the&lt;STRONG&gt;&amp;nbsp;X1 value.&lt;/STRONG&gt; It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;method.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Additionaly, it is possible to specify&amp;nbsp;Y coordinates for the line ends. This requires setting&amp;nbsp;&lt;STRONG&gt;VerticalGravity&lt;/STRONG&gt; to a corresponding value via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation~setVerticalGravity.html"&gt;&lt;EM&gt;setVerticalGravity()&lt;/EM&gt;&lt;/A&gt; method. The recognizable&amp;nbsp;values are&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#FILL_VERTICAL"&gt;Gravity.FILL_VERTICAL&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#CENTER_VERTICAL"&gt;Gravity.CENTER_VERTICAL&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#TOP"&gt;Gravity.TOP&lt;/A&gt;,&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#BOTTOM"&gt;Gravity.BOTTOM&lt;/A&gt;. In combination with the&amp;nbsp;Y1, Y2 values they will end up in the following behavior:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;for&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#FILL_VERTICAL"&gt;Gravity.FILL_VERTICAL&lt;/A&gt;, both&amp;nbsp;Y coordinates&amp;nbsp;are ignored. The line appear vertically &lt;STRONG&gt;stretched&lt;/STRONG&gt;. This is the &lt;STRONG&gt;default value&lt;/STRONG&gt;. 
&lt;LI&gt;for&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#CENTER_VERTICAL"&gt;Gravity.CENTER_VERTICAL&lt;/A&gt;, both &lt;STRONG&gt;Y1 and Y2&lt;/STRONG&gt; coordinates will be applied. 
&lt;LI&gt;for&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#TOP"&gt;Gravity.TOP&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/Gravity.html#BOTTOM"&gt;Gravity.BOTTOM&lt;/A&gt;, the &lt;STRONG&gt;Y1&lt;/STRONG&gt; coordinate will be applied to the loose end of a line. The line appear pinned to one side. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Y1, Y2 values can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create VerticalLineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a VerticalLineAnnotation&lt;/P&gt;
&lt;P&gt;VerticalLineAnnotation verticalLine = new VerticalLineAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the annotation in run-time&lt;BR&gt;verticalLine.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;verticalLine.setXAxisId("Top_X_Axis");&lt;BR&gt;verticalLine.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify that the annotation should appear fully stretched&lt;/P&gt;
&lt;P&gt;verticalLine.setVerticalGravity(Gravity.FILL_VERTICAL);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// set the X1 coordinate&lt;BR&gt;verticalLine.setX1(20d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), verticalLine);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation.html"&gt;VerticalLineAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;VerticalLineAnnotation verticalLine = sciChartBuilder.newVerticalLineAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(5d, 3.2d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(2, ColorUtil.Orange)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalGravity(Gravity.Top)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId("Top_X_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId("Left_Y_Axis")&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4e9845da-032d-487c-9436-b8a00338f44b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="952eac61-f4bd-441b-814f-4b881fa56f31" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="116d3906-72dc-4ead-b3e2-0eae46bc7c68" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.VerticalLineAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="963d03d5-c2f0-4143-9817-8b37186bfe69" Status="New Topic" CreatedOn="2016-10-21T13:20:16.7134683Z" ModifiedOn="2019-02-12T19:29:13.2293709Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:23.4144267Z">LineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2293709Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotation.html"&gt;LineAnnotation&lt;/A&gt; draws&amp;nbsp;a &lt;STRONG&gt;line&lt;/STRONG&gt;&amp;nbsp;connecting the X1,Y1 and X2,Y2 positions:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/LineAnnotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;LineAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. The Stroke color can be applied via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotationBase~setStroke.html"&gt;&lt;EM&gt;setStroke()&lt;/EM&gt;&lt;/A&gt; method, which expects&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; object. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section to learn more about pens and brushes in SciChart.&lt;/P&gt;
&lt;H2&gt;Position LineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotation.html"&gt;LineAnnotation&lt;/A&gt;&amp;nbsp;is placed on a chart&amp;nbsp;at the position determined by its&amp;nbsp;&lt;STRONG&gt;X1,Y1 and X2,Y2&amp;nbsp;coordinates&lt;/STRONG&gt;, which&amp;nbsp;specify the two line ends. It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;, &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create LineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotation.html"&gt;LineAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an LineAnnotation&lt;/P&gt;
&lt;P&gt;LineAnnotation lineAnnotation = new LineAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;a PenStyle for the&amp;nbsp;Stroke&lt;/P&gt;
&lt;P&gt;lineAnnotation.setStroke(new SolidPenStyle(0xFF0000FF, true, 4, null));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the&amp;nbsp;annotation in run-time&lt;BR&gt;lineAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;lineAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;lineAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a desired position by setting coordinates&lt;BR&gt;lineAnnotation.setX1(1d);&lt;/P&gt;
&lt;P&gt;lineAnnotation.setY1(4.6d);&lt;/P&gt;
&lt;P&gt;lineAnnotation.setX2(10d);&lt;/P&gt;
&lt;P&gt;lineAnnotation.setY2(9.1d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), lineAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotation.html"&gt;LineAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;LineAnnotation lineAnnotation = sciChartBuilder.newLineAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(1d, 4d, 2d, 6d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(2f, 0xFF555555)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId(X_TOP_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId(Y_LEFT_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="6cfe81be-3670-4612-8006-8c4206669fcd" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fc7e1299-d2f3-430a-8c3f-63a284a1a49e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a7e4a18a-f37e-4740-8c9f-83e6d530c606" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7b100b94-ef0c-4cc9-a73a-7ee728f7208d" Status="New Topic" CreatedOn="2016-10-21T13:20:27.3476479Z" ModifiedOn="2019-02-12T19:29:13.2383473Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LineArrowAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:37.00524Z">LineArrowAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2383473Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt; allows to draw&amp;nbsp;an&amp;nbsp;&lt;STRONG&gt;arrow&lt;/STRONG&gt;&amp;nbsp;from X1,Y1&amp;nbsp;to X2,Y2 position:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/ArrowAnnotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;LineAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. The Stroke color can be applied via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotationBase~setStroke.html"&gt;&lt;EM&gt;setStroke()&lt;/EM&gt;&lt;/A&gt; method, which expects&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; object. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section to learn more about pens and brushes in SciChart.&lt;/P&gt;
&lt;P&gt;Size of the arrow's head can be changed via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation~setHeadLength.html"&gt;setHeadLength(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation~setHeadWidth.html"&gt;setHeadWidth()&lt;/A&gt;&lt;/EM&gt; methods.&lt;/P&gt;
&lt;H2&gt;Position LineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;is placed on a chart&amp;nbsp;at the position determined by its&amp;nbsp;&lt;STRONG&gt;X1,Y1 and X2,Y2&amp;nbsp;coordinates&lt;/STRONG&gt;, which&amp;nbsp;specify the two line ends. It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;, &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods. The arrow's &lt;STRONG&gt;head is placed at X2,Y2&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create LineAnnotation&lt;/H2&gt;
&lt;P&gt;A &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an LineAnnotation&lt;/P&gt;
&lt;P&gt;LineArrowAnnotation lineArrowAnnotation = new LineArrowAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;a PenStyle for the&amp;nbsp;Stroke&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setStroke(new SolidPenStyle(0xFF0000FF, true, 4, null));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the&amp;nbsp;annotation in run-time&lt;BR&gt;lineArrowAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;lineArrowAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;lineArrowAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;size&amp;nbsp;for the arrow's head&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setHeadLength(20f);&lt;BR&gt;lineArrowAnnotation.setHeadWidth(20f);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a desired position by setting coordinates&lt;/P&gt;
&lt;P&gt;// the arrow's head is located at X2,Y2&lt;BR&gt;lineArrowAnnotation.setX1(1d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setY1(4.6d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setX2(10d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setY2(9.1d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), lineArrowAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;LineAnnotation lineAnnotation = sciChartBuilder.newLineAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(1d, 4d, 2d, 6d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(2f, 0xFF555555)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId(X_TOP_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId(Y_LEFT_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="89146db9-9df1-46ab-8339-bca506955111" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8b91c093-8a55-495d-8128-4a4e582b0337" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="85b7bda9-7dd0-458f-8cf7-e0e140ccaa03" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="72e4491f-8140-49cb-8bd3-85b381967f87" Status="New Topic" CreatedOn="2016-10-21T13:22:54.5131458Z" ModifiedOn="2019-02-12T19:29:13.2493179Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TextAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:23:00.5519906Z">TextAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2493179Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt; allows to place a piece of &lt;STRONG&gt;text&lt;/STRONG&gt; at a specific location on a chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/TextAnnotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;TextAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. The features that are specific to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;&amp;nbsp;type can be found in the table below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=307&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~getFontStyle.html"&gt;&lt;EM&gt;getFontStyle()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~setFontStyle.html"&gt;&lt;EM&gt;setFontStyle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to specify how text should appear via a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt; object.&amp;nbsp; Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section to learn more about styles in SciChart.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=307&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~getText.html"&gt;&lt;EM&gt;getText()&lt;/EM&gt;&lt;/A&gt; /&lt;EM&gt;&amp;nbsp;&lt;/EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~setText.html"&gt;&lt;EM&gt;setText()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies the text for an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~getTextGravity.html"&gt;&lt;EM&gt;getTextGravity()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~setTextGravity.html"&gt;&lt;EM&gt;setTextGravity()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Specifies&amp;nbsp;a text alignment&amp;nbsp;with &lt;A href="https://developer.android.com/reference/android/view/Gravity.html"&gt;Android Gravity&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~getCanEditText.html"&gt;&lt;EM&gt;getCanEditText()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~setCanEditText.html"&gt;&lt;EM&gt;setCanEditText()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When&amp;nbsp;set to True, allows to&amp;nbsp;&lt;STRONG&gt;modify the text in run-time&lt;/STRONG&gt; after selecting an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=307&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~getRotationAngle.html"&gt;&lt;EM&gt;getRotationAngle()&lt;/EM&gt;&lt;/A&gt; /&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation~setRotationAngle.html"&gt;&lt;EM&gt;setRotationAngle()&lt;/EM&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Rotates an annotation through&amp;nbsp;the specified&amp;nbsp;angle in degrees.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Position TextAnnotation&lt;/H2&gt;
&lt;P&gt;The position of an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;&amp;nbsp;is defined by the&lt;STRONG&gt;&amp;nbsp;X1,Y1 values.&lt;/STRONG&gt;&amp;nbsp;These can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt; methods.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Also,&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;&amp;nbsp;can be aligned&amp;nbsp;relative to&amp;nbsp;its X1,Y1&amp;nbsp;position via&amp;nbsp;&lt;STRONG&gt;Anchor Points&lt;/STRONG&gt;. Please refer to the corresponding section of the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt;&amp;nbsp;article for more information.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create TextAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a TextAnnotation&lt;/P&gt;
&lt;P&gt;TextAnnotation textAnnotation = new TextAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a FontStyle for the text&lt;BR&gt;textAnnotation.setFontStyle(new FontStyle(30f, 0x66FC9C29));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// set the text&lt;BR&gt;textAnnotation.setText("My Text Annotation");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the annotation in run-time&lt;BR&gt;textAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;textAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;textAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify anchor points&lt;/P&gt;
&lt;P&gt;textAnnotation.setHorizontalAnchorPoint(HorizontalAnchorPoint.Center);&lt;BR&gt;textAnnotation.setVerticalAnchorPoint(VerticalAnchorPoint.Center);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a desired position by setting coordinates&lt;/P&gt;
&lt;P&gt;textAnnotation.setX1(4.2d);&lt;BR&gt;textAnnotation.setY1(2d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), textAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation.html"&gt;TextAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;TextAnnotation textAnnotation = sciChartBuilder.newTextAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withText("My Text Annotation")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(7.5d, 5d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFontStyle(12, ColorUtil.White)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVerticalAnchorPoint(VerticalAnchorPoint.Bottom)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId("Top_X_Axis")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId("Left_Y_Axis")&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0ef14cd2-d624-419f-a816-d1bf3c2746a5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="83f3bd95-1046-4aa9-8e46-a457c2ce4d6d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="30cd769e-2cd4-4256-a739-4143d60046ed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.TextAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="24a50b9d-0b8d-4124-b5e0-db75517608bc" Status="New Topic" CreatedOn="2016-10-21T13:20:40.4463196Z" ModifiedOn="2019-02-12T19:29:13.2642779Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomAnnotation" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2642779Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt; allows to place any&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android View&lt;/A&gt; at a specific location on a chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/CustomAnnotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;CustomAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. The particularity of&amp;nbsp;the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt;&amp;nbsp;type&amp;nbsp;is that its instances can be used to place any&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android View&lt;/A&gt; onto a chart.&amp;nbsp;This can be done either by&amp;nbsp;passing an&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/view/View.html"&gt;Android View&lt;/A&gt;&amp;nbsp;into the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation~setContentView.html"&gt;setContentView()&lt;/A&gt;&lt;/EM&gt; method or an layout id into the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation~setContentId.html"&gt;setContentId()&lt;/A&gt;&lt;/EM&gt; method.&lt;/P&gt;
&lt;H2&gt;Position CustomAnnotation&lt;/H2&gt;
&lt;P&gt;The position of an&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt;&amp;nbsp;is defined by the&lt;STRONG&gt;&amp;nbsp;X1,Y1 values.&lt;/STRONG&gt;&amp;nbsp;These can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt; methods.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Also,&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt;&amp;nbsp;can be aligned&amp;nbsp;relative to&amp;nbsp;its X1,Y1&amp;nbsp;position via&amp;nbsp;&lt;STRONG&gt;Anchor Points&lt;/STRONG&gt;. Please refer to the corresponding section of the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt;&amp;nbsp;article for more information.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create CustomAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a CustomAnnotation&lt;/P&gt;
&lt;P&gt;CustomAnnotation customAnnotation = new CustomAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create a custom View to place on a chart&lt;/P&gt;
&lt;P&gt;ImageView image = new ImageView(getActivity());&lt;BR&gt;image.setImageResource(R.drawable.my_custom_view);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// appoint the custom View to the annotation&lt;/P&gt;
&lt;P&gt;customAnnotation.setContentView(image);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the annotation in run-time&lt;BR&gt;customAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;customAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;customAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify anchor points&lt;/P&gt;
&lt;P&gt;customAnnotation.setHorizontalAnchorPoint(HorizontalAnchorPoint.Center);&lt;BR&gt;customAnnotation.setVerticalAnchorPoint(VerticalAnchorPoint.Center);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a desired position by setting coordinates&lt;/P&gt;
&lt;P&gt;customAnnotation.setX1(4.2d);&lt;BR&gt;customAnnotation.setY1(2d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), customAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation.html"&gt;CustomAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// create a custom View to place on a chart&lt;/P&gt;
&lt;P&gt;ImageView image = new ImageView(getActivity());&lt;BR&gt;image.setImageResource(R.drawable.my_custom_view);&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;// create and configure&amp;nbsp;a CustomAnnotation&lt;/P&gt;
&lt;P&gt;CustomAnnotation customAnnotation = sciChartBuilder.newCustomAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(7.5d, 5d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContent(image)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId(X_TOP_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYAxisId(Y_LEFT_AXIS)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="34eb3a4f-ef6a-4621-830a-477390570e8a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.CustomAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="52165a5b-a9d3-466b-b063-6a2ec206dd08" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5f9fdbb5-9b8b-4959-b682-513da9923138" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="60b7ec9e-8855-447c-9b4e-9d28aa408b27" AutoIndex="false">
            <Caption m="2016-09-06T17:55:19.1631326Z">DataSeries API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="3425a202-cb28-4349-915f-ccf122d3a766" Status="New Topic" CreatedOn="2016-09-06T17:55:46.885991Z" ModifiedOn="2019-08-14T10:30:17.1563296Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries Types in SciChart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-14T10:30:17.1563296Z">&lt;P&gt;SciChart features a proprietary DataSeries API, which internally uses the fastest possible data-structures to allow fast manipulation of data bound to charts.&lt;/P&gt;
&lt;P&gt;Our DataSeries are highly optimized data-structures for indexing, searching and iterating over data, enabling SciChart to achieve its record performance!&lt;/P&gt;
&lt;H3&gt;DataSeries Types&lt;/H3&gt;
&lt;P&gt;The following DataSeries types exist in SciChart. All DataSeries are generic, where TX is the type of the X-data and TY is the type of the Y data.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;DataSeries type&lt;/TD&gt;
&lt;TD&gt;Series Applicable&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;XyDataseries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y Data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastLineRenderableSeries, FastMountainRenderableSeries, XyScatterRenderableSeries, FastColumnRenderableSeries, &lt;BR&gt;FastImpulseRenderableSeries and&lt;BR&gt;FastFixedErrorBarsRenderableSeries&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyyDataSeries.html"&gt;XyyDataSeries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y1,Y2 data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastBandRenderableSeries (required).&amp;nbsp;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;
&lt;P&gt;Can also apply to&amp;nbsp;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastLineRenderableSeries, FastMountainRenderableSeries, XyScatterRenderableSeries, FastColumnRenderableSeries, &lt;BR&gt;FastImpulseRenderableSeries and&lt;BR&gt;FastFixedErrorBarsRenderableSeries&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;. In this case only the X,Y1 value is chosen&lt;/P&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;XyzDataSeries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y,Z data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastBubbleRenderableSeries (required).&lt;BR&gt;&lt;BR&gt;Can also apply to &lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastLineRenderableSeries, FastMountainRenderableSeries, XyScatterRenderableSeries, FastColumnRenderableSeries, &lt;BR&gt;FastImpulseRenderableSeries and&lt;BR&gt;FastFixedErrorBarsRenderableSeries&lt;/SPAN&gt;. In this case only the X,Y value is chosen&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.HlDataSeries.html"&gt;HlDataSeries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores X, Y, High, Low data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastErrorBarsRenderableSeries (required)&lt;BR&gt;&lt;BR&gt;Can also apply to &lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastLineRenderableSeries, FastMountainRenderableSeries, XyScatterRenderableSeries, FastColumnRenderableSeries, &lt;BR&gt;FastImpulseRenderableSeries and&lt;BR&gt;FastFixedErrorBarsRenderableSeries&lt;/SPAN&gt;. In this case only the X,Y value is chosen&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;OhlcDataseries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores X, Open, High, Low, Close data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastCandlestickRenderableSeries or FastOhlcRenderableSeries (required)&lt;BR&gt;&lt;BR&gt;Can also apply to &lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastLineRenderableSeries, FastMountainRenderableSeries, XyScatterRenderableSeries, FastColumnRenderableSeries, &lt;BR&gt;FastImpulseRenderableSeries and&lt;BR&gt;FastFixedErrorBarsRenderableSeries&lt;/SPAN&gt;. In this case only the X,Y (Close) value is chosen&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.UniformHeatmapDataSeries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Stores TY values as array of TY and TX, TZ values are computed from cell index, Start and Step values&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastUniformHeatmapRenderableSeries (required)&lt;BR&gt;&lt;BR&gt;This DataSeries type is not applicable to any other RenderableSeries&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;NOTE: Allowable types in SciChart include Date,&amp;nbsp;double, float, long, int, short, byte.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: Date&amp;nbsp;is only allowable on TX. Custom types are not allowed.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="a269d98f-6e02-493e-aa86-866861049871" AutoIndex="false">
            <Caption m="2016-09-08T12:06:18.271211Z">Styling and Theming</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="72c98c63-fe53-4c4b-8d96-3a09c48ce831" Status="New Topic" CreatedOn="2016-09-08T12:06:25.7714769Z" ModifiedOn="2019-02-12T19:27:27.5322964Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PenStyle, BrushStyle and FontStyle" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:27:27.5322964Z">&lt;P&gt;In SciChart, almost&amp;nbsp;all styling methods expect an instance of either&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt; to be passed in. Those that deals with text styling, expect an instance of a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;. All these classes are designed to hold a relevant information related to drawing.&lt;/P&gt;
&lt;P&gt;SciChart also provides&amp;nbsp;the helper&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.utility.ColorUtil.html"&gt;ColorUtil&lt;/A&gt; class, which&amp;nbsp;can be used to pick up colors quickly from the list of preset ones.&lt;/P&gt;
&lt;H2&gt;PenStyle&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;are 4 available &lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;implementations&amp;nbsp;which&amp;nbsp;allows to specify how&amp;nbsp;lines should be drawn:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.SolidPenStyle.html"&gt;SolidPenStyle&lt;/A&gt; which&amp;nbsp;allows to draw 2D lines with solid color 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.LinearGradientPenStyle.html"&gt;LinearGradientPenStyle&lt;/A&gt; which allows to draw 2D lines with linear gradient 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.RadialGradientPenStyle.html"&gt;RadialGradientPenStyle&lt;/A&gt; which allows to draw 2D lines with radial gradient 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.TexturePenStyle.html"&gt;TexturePenStyle&lt;/A&gt; which allows to draw textured 2D lines &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Also all&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; implementations allows to specify the following parameters for a pen:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Is pen &lt;STRONG&gt;anti-aliased&lt;/STRONG&gt; or not 
&lt;LI&gt;&lt;STRONG&gt;Thickness&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;StrokeDashArray&lt;/STRONG&gt; - used to create dashed pens.&amp;nbsp;Creates a&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/DashPathEffect.html"&gt;DashPathEffect&lt;/A&gt;&amp;nbsp;internally. Please refer to the&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/DashPathEffect.html"&gt;Android documentation&lt;/A&gt; to find out how to specify dashed&amp;nbsp;intervals by an array of floats. &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;To create a new&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;instance, call an appropriate&amp;nbsp;type constructor, for example:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;SolidPenStyle solidPenStyle = new SolidPenStyle (0xFF279B27, true, 2, new float[]{20, 20});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Or if you use our&amp;nbsp;builder helpers you can use&amp;nbsp;PenStyleBuilder for more convenience:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JAVA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;SolidPenStyle solidPenStyle = sciChartBuilder.newPen().withColor(ColorUtil.argb(0xFF, 0x40, 0x83, 0xB7)).withAntiAliasing(true).withThickness(3).build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Another benefit of using PenStyleBuilder&amp;nbsp; is that it allows to &lt;STRONG&gt;specify units&lt;/STRONG&gt; for the pen thickness. There are the following units available out of the box:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_PX"&gt;TypedValue.COMPLEX_UNIT_PX&lt;/A&gt; - value is in raw pixels. 
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_DIP"&gt;TypedValue.COMPLEX_UNIT_DIP&lt;/A&gt; - value is in&amp;nbsp;Device Independent Pixels. 
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_SP"&gt;TypedValue.COMPLEX_UNIT_SP&lt;/A&gt; - value is in&amp;nbsp;scaled pixels. 
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_PT"&gt;TypedValue.COMPLEX_UNIT_PT&lt;/A&gt; - value is in points. 
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_IN"&gt;TypedValue.COMPLEX_UNIT_IN&lt;/A&gt; - value is in inches. 
&lt;LI&gt;&lt;A href="https://developer.android.com/reference/android/util/TypedValue.html#COMPLEX_UNIT_MM"&gt;TypedValue.COMPLEX_UNIT_MM&lt;/A&gt; - value is in millimeters &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Brush Style&lt;/H2&gt;
&lt;P&gt;As to the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt;&amp;nbsp;class, it has three implementations available out of the box:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.RadialGradientBrushStyle.html"&gt;&lt;/A&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.SolidBrushStyle.html"&gt;SolidBrushStyle&lt;/A&gt;&amp;nbsp;-&amp;nbsp;defines a brush for filling with a&amp;nbsp;solid color. 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.RadialGradientBrushStyle.html"&gt;&lt;FONT color=#0066cc&gt;RadialGradientBrushStyle&lt;/FONT&gt;&lt;/A&gt;&amp;nbsp;-&amp;nbsp;defines a brush for filling with a&amp;nbsp;radial gradient. 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.LinearGradientBrushStyle.html"&gt;LinearGradientBrushStyle&lt;/A&gt;&amp;nbsp;-&amp;nbsp;defines a brush for filling with a&amp;nbsp;linear gradient. 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.TextureBrushStyle.html"&gt;TextureBrushStyle&lt;/A&gt;&amp;nbsp;-&amp;nbsp;defines a brush for filling with a&amp;nbsp;Bitmap texture. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;BrushStyle brushStyle = new SolidBrushStyle(0x22279B27);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;FontStyle&lt;/H2&gt;
&lt;P&gt;In SciChart, almost&amp;nbsp;all styling methods expect an instance of either&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;&lt;FONT color=#0066cc&gt;PenStyle&lt;/FONT&gt;&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;&lt;FONT color=#0066cc&gt;BrushStyle&lt;/FONT&gt;&lt;/A&gt; to be passed in. Those that deals with text styling, expect an instance of a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;&lt;FONT color=#0066cc&gt;FontStyle&lt;/FONT&gt;&lt;/A&gt;. The&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;&lt;FONT color=#0066cc&gt;FontStyle&lt;/FONT&gt;&lt;/A&gt;&amp;nbsp;type is designed to hold a relevant information related to text, such as:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Font style&lt;/STRONG&gt; -&amp;nbsp;a&amp;nbsp;&lt;A href="https://developer.android.com/reference/android/graphics/Typeface.html"&gt;Typeface&lt;/A&gt; object 
&lt;LI&gt;&lt;STRONG&gt;Text size&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Text color&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.FontStyle.html"&gt;FontStyle&lt;/A&gt;&amp;nbsp;type instances&amp;nbsp;can be created in this way:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;Typeface typeface = Typeface.createFromAsset(getAssets(), "font/font.ttf");&lt;/P&gt;
&lt;P&gt;FontStyle fontStyle = new FontStyle(typeface, 14, ColorUtil.Blue);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Or if you use our&amp;nbsp;builder helpers you can use&amp;nbsp;FonStyleBuilder helper for more convenience:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;FontStyle labelStyle = sciChartBuilder.newFont().withTextSize(8).withTextColor(ColorUtil.White).build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Another benefit of using&amp;nbsp;FonStyleBuilder&amp;nbsp;is that it allows to &lt;STRONG&gt;specify units&lt;/STRONG&gt; for the font size. Please refer to the information about PenStyle above to find&amp;nbsp;a list of all the&amp;nbsp;available units.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="bebeb632-03d8-42e8-812a-f4ee48b8e749" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Drawing~com.scichart.drawing.common.PenStyle" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2e604859-a440-4afb-b1de-1093623bd8fb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Drawing~com.scichart.drawing.common.BrushStyle" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5f0fb993-73d9-4ce0-ae70-4ff89a0e0002" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Drawing~com.scichart.drawing.common.FontStyle" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2587ccb2-a219-464a-b9b3-8c88f41d3cd0" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Drawing~com.scichart.drawing.common.PenStyle+Builder" BuildFlags="">
                    <Title />
                    <Category m="2016-09-08T14:54:03.6739499Z">Builder Classes</Category>
                  </TopicLink>
                  <TopicLink Id="7fcea81e-b988-4cfd-82e8-6cabf462dcad" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="SciChart.Drawing~com.scichart.drawing.common.FontStyle+Builder" BuildFlags="">
                    <Title />
                    <Category m="2016-09-08T14:54:20.3526502Z">Builder Classes</Category>
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="5760011e-fce8-440b-bdb5-470621e85012" Status="New Topic" CreatedOn="2019-08-15T08:27:59.6295222Z" ModifiedOn="2019-08-15T12:16:11.9224724Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ThemeManager API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-15T12:16:11.9224724Z">&lt;H2&gt;SciChart Themes&lt;/H2&gt;
&lt;P&gt;SciChart ships with 8 stunning themes which you can select and apply to the charts in your application. Most of the components of SciChart are also&amp;nbsp;stylable, so you can truly customize the chart to fit your application.&lt;/P&gt;
&lt;P&gt;The 8 built-in themes are shown below. You can also create your own custom theme, or modify ours to meet your needs.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/OscilloscopeTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Oscilloscope Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/SciChartv4DarkTheme.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;SciChartv4Dark Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ElectricTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Electric Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ExpressionDarkTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;ExpressionDark Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BlackSteelTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;BlackSteel Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ExpressionLightTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;ExpressionLight Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChromeTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Chrome Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BrightSparkTheme.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;BrightSpark Theme&lt;/STRONG&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Applying a Theme to the SciChartSurface&lt;/H2&gt;
&lt;P&gt;To apply a theme to a SciChartSurface, simply use the following code. Allowable values for theme string include SciChartv4Dark (default), Oscilloscope, Electric, ExpressionDark, ExpressionLight, BrightSpark, Chrome, BlackSteel.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Applying a Theme&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = ...;&lt;/P&gt;
&lt;P&gt;surface.setTheme(R.style.SciChart_SciChartv4DarkStyle);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Creating a Custom Theme&lt;/H2&gt;
&lt;P&gt;As well as built in themes provided by the ThemeManager, in SciChart you can also define your&amp;nbsp;&lt;A href="https://www.scichart.com/example/android-chart-example-create-a-custom-theme/"&gt;own custom theme&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;First of all you'll need to define style with&amp;nbsp;new theme&amp;nbsp;in styles.xml&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Defining your own Theme in styles.xml&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;resources&amp;gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; &amp;lt;!-- some other styles --&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; &amp;lt;style name="SciChart_BerryBlue" parent="SciChart_BaseStyle"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Background defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="sciChartBackground"&amp;gt;@drawable/example_sci_chart_berry_blue_background&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="legendBackground"&amp;gt;@drawable/example_sci_chart_berry_blue_legend_background&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="axisTooltipBackground"&amp;gt;@drawable/example_sci_chart_berry_blue_label_background&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="renderableSeriesAreaBorderColor"&amp;gt;#102A47&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="renderableSeriesAreaFillColor"&amp;gt;@android:color/transparent&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="defaultTextColor"&amp;gt;#EEEEEE&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Axis defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="tickTextColor"&amp;gt;#FF6495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="majorGridLinesColor"&amp;gt;#102A47&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="minorGridLinesColor"&amp;gt;#0D223D&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="axisBandsColor"&amp;gt;#0E233A&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Modifier defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="rolloverLineColor"&amp;gt;#33FD9F25&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="cursorLineColor"&amp;gt;#996495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="rubberBandStrokeColor"&amp;gt;#77999999&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="rubberBandFillColor"&amp;gt;#33999999&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="axisTooltipTextColor"&amp;gt;#EEEEEE&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- MountainSeries defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="mountainLineColor"&amp;gt;#76BBD2&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- TODO - this should be a gradient --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="mountainAreaColor"&amp;gt;#094C9F&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- LineSeries defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="lineSeriesColor"&amp;gt;#FFC6E6FF&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- ColumnSeries defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="columnLineColor"&amp;gt;#FFFFFFFF&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="columnFillColor"&amp;gt;#FFFFFFFF&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- CandlestickSeries defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="candleStickStrokeUpColor"&amp;gt;#FF6495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="candleStickStrokeDownColor"&amp;gt;#FF00008B&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="candleStickFillUpColor"&amp;gt;#A06495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="candleStickFillDownColor"&amp;gt;#A000008B&amp;lt;/item&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- BandSeries defaults --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="bandStrokeUpColor"&amp;gt;#FF6495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="bandStrokeDownColor"&amp;gt;#FF00008B&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="bandFillUpColor"&amp;gt;#A06495ED&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;item name="bandFillDownColor"&amp;gt;#A000008B&amp;lt;/item&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;lt;/resources&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then just&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.SciChartSurfaceBase~setTheme.html"&gt;apply it for SciChartSurface&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Apply the Custom Theme&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;SciChartSurface surface = ...;&lt;/P&gt;
&lt;P&gt;surface.setTheme(R.style.SciChart_BerryBlue);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
      <TopicCategory Id="9fbddf37-3662-4f08-913b-e9a0952a356e" AutoIndex="false">
        <Caption m="2019-07-08T10:31:38.3217985Z">SciChart Android 3D Charts</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="d9bdbdfa-dc94-4ce6-8f55-f54b9c350f98" AutoIndex="false">
            <Caption m="2019-08-30T13:01:07.7719105Z">Tutorials 3D </Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="66c2a477-19b7-4c68-9aea-10c01c54774f" Status="New Topic" CreatedOn="2019-08-30T13:01:32.6708223Z" ModifiedOn="2019-09-25T18:07:25.7951881Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial  01 - Charting Concepts" BuildFlags="">
                <Title m="2019-09-24T12:43:04.45247Z">3D Tutorial  01 - Charting Concepts</Title>
                <ContentsTitle m="2019-09-23T16:36:08.8189086Z">Charting Concepts</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T18:07:25.7951881Z">&lt;H2&gt;Understanding Charts, Basic Definitions&lt;/H2&gt;
&lt;P&gt;In order to understand charts, it is necessary to learn some basic concepts first.&lt;/P&gt;
&lt;P&gt;Here we will cover:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Two Dimensional Charts 
&lt;LI&gt;3D charts 
&lt;LI&gt;Right Hand Coordinates 
&lt;LI&gt;Left-hand Charts 
&lt;LI&gt;Camera 3D 
&lt;LI&gt;World Coordinates &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Two Dimensional Charts&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;Cartesian Plane&lt;/STRONG&gt; is how data is represented in two dimensions.&lt;/P&gt;
&lt;P&gt;The two dimensions are &lt;STRONG&gt;height&lt;/STRONG&gt; and &lt;STRONG&gt;width&lt;/STRONG&gt;. In mathematics these are the x and y axes, respectively. A 3D chart adds &lt;STRONG&gt;depth&lt;/STRONG&gt;, which is labelled Z. The cartesian plane looks this this, where the pink line is the function y=f(x), where y is some function, like sales = 2 * ad budget. The points x-y are given (x,y). The &lt;STRONG&gt;origin&lt;/STRONG&gt; is the point where x=0 and y=0.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/cartesianPlane.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;3D Charts&lt;/H2&gt;
&lt;P&gt;In 3D charts, we introduce a 3rd axis, &lt;STRONG&gt;z&lt;/STRONG&gt;. Points on the chart are (x,y,z). This z axis is at a right angle to x and y. This creates the illusion that the graph is 3 dimensional.&lt;/P&gt;
&lt;H2&gt;Right-Hand Coordinates&lt;/H2&gt;
&lt;P&gt;When the z axis points outward this is called a &lt;STRONG&gt;right-handed coordinate system&lt;/STRONG&gt;. When it points inward it is called &lt;STRONG&gt;left-handed&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In the &lt;STRONG&gt;right-handed coordinate system&lt;/STRONG&gt; positive rotation about the axis is counter clockwise.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rightHandCoordinate.jpg"&gt;&lt;/P&gt;
&lt;P&gt;Charts in SciChart are left-hand by default with the y axis point up, the x axis horizontal, and the z axis pointing inward. Rotation is clockwise. Rotation about the vertical axis is called &lt;STRONG&gt;yaw&lt;/STRONG&gt; and &lt;STRONG&gt;rotation&lt;/STRONG&gt; about the horizontal axis is called pitch, just like the terms used in aviation.&lt;/P&gt;
&lt;H2&gt;Left-Hand Coordinates&lt;/H2&gt;
&lt;P&gt;In the chart below the chart is rotated (yaw) 45 degrees in the clockwise direction. In the chart on the right it is 90 degrees. For both charts the rotation about the axis is 45 degrees, which is the default value.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TH&gt;
&lt;P align=center&gt;45 degrees&lt;/P&gt;&lt;/TH&gt;
&lt;TH&gt;
&lt;P align=center&gt;90 degrees&lt;/P&gt;&lt;/TH&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=center&gt;&lt;IMG border=0 alt="" src="images/yaw45min.jpg" width="75%"&gt;&lt;/TD&gt;
&lt;TD align=center&gt;&lt;IMG border=0 alt="" src="images/yaw90min.jpg" width="75%"&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Here is the xyz origin and axis in the middle of the box as it is when using the World Coordinate System&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/leftHand1.png" p=""&gt;&lt;/P&gt;
&lt;H2&gt;Camera 3D&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;Camera&lt;/STRONG&gt; is a SciChart object. Think of this as the location from which you are viewing the chart, just like you were floating above the surface and looking down at it with a pair of binoculars. We explain this using the concepts below. A camera has an xyz position and &lt;STRONG&gt;pitch&lt;/STRONG&gt; (up and down) and &lt;STRONG&gt;yaw&lt;/STRONG&gt; (rotation).&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Camera coordinates&lt;/STRONG&gt; are three dimensional &lt;STRONG&gt;world coordinates&lt;/STRONG&gt; projected on a two dimensional plane.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Camera3DExplanation.png"&gt;&lt;/P&gt;
&lt;P&gt;This graphic shows how you can change the pitch and yaw of the camera. Notice that the red, green, and blue xyz graphic to show the orientation of the world coordinate system.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ModifyCamera3DProperties.gif"&gt;&lt;/P&gt;
&lt;H2&gt;World Coordinates&lt;/H2&gt;
&lt;P&gt;World coordinates are the (x,y,z) coordinates used to locate an object in 3D space. You can transform camera coordinates to world coordinates and vice versa. SciChart does this mathematics when it renders a 3D object onto 2D surface of a tablet or mobile device screen.&lt;/P&gt;
&lt;P&gt;In terms of charting, the origin (0,0,0) is located in the middle of the box shown below which represents 3D space.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/worldcoordinates1.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="da59b1bf-d8bb-4126-bb2b-a9823bc1e380" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="ms-its:Univerity of Amsterdam,Image Processing and Computer Vision::/Univerity of Amsterdam,Image Processing and Computer Vision" BuildFlags="">
                    <Title m="2019-09-24T09:11:02.067747Z">University of Amsterdam, Image Processing and Computer Vision</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b6028fd1-9906-48ac-9d08-dd81e45997dd" Status="New Topic" CreatedOn="2019-09-02T10:38:10.9905454Z" ModifiedOn="2019-09-25T18:11:58.6027116Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial  02 - Add SciChart Libraries to Android Studio" BuildFlags="">
                <Title m="2019-09-24T12:43:59.8562675Z">3D Tutorial  02 - Add SciChart Libraries to Android Studio</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T18:11:58.6027116Z">&lt;P&gt;You can use Gradle or Maven to include the .aar files in Android Studio. Here we use Gradle.&lt;/P&gt;
&lt;H2&gt;Create Android Basic Activity App&lt;/H2&gt;
&lt;P&gt;1. First, in Android Studio create a project with a &lt;STRONG&gt;Basic&lt;/STRONG&gt; activity.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/configureYourProject.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using Gradle&lt;/H2&gt;
&lt;P&gt;2. Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" that says &lt;STRONG&gt;(Module:app)&lt;/STRONG&gt; and declare a new Maven repository in the "&lt;STRONG&gt;repositories&lt;/STRONG&gt;" node inside the "&lt;STRONG&gt;allprojects&lt;/STRONG&gt;" node. Use the URL from above.&lt;/P&gt;
&lt;P&gt;The screenshot below shows where the file can be found in the Project window in Android Studio:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/gradle2.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;3. Download and unzip &lt;STRONG&gt;SciChart Android v3&lt;/STRONG&gt;. Copy these files into the folder &lt;STRONG&gt;app/libs&lt;/STRONG&gt; in your project folder:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;charting-release.aar 
&lt;LI&gt;drawing-release.aar 
&lt;LI&gt;charting3d-release.aar 
&lt;LI&gt;extensions-release.aar 
&lt;LI&gt;core-release.aar 
&lt;LI&gt;extensions3d-release.aar 
&lt;LI&gt;data-release.aar &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;4. Add to sections first &lt;STRONG&gt;flatDir&lt;/STRONG&gt; to tell Gradle what folder to look into:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;repositories&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;repositories {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add app\libs folder as libs source&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; flatDir {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dirs 'libs'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;5. Then add the SciChart .aar files to the &lt;STRONG&gt;dependencies&lt;/STRONG&gt; section:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;dependencies&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:recyclerview-v7:28.0.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:appcompat-v7:28.0.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:design:28.0.0'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'de.greenrobot:eventbus:2.4.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.daasuu:EasingInterpolator:1.0.0'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.jakewharton:butterknife:8.8.1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // you can reference aar from app\libs folder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:charting:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:charting3d:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:core:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:drawing:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:data:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:extensions:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:extensions3d:+@aar'&amp;nbsp;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b490bbc1-b301-4485-9bdc-6cf2154d0f79" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title m="2019-09-24T09:14:22.8396314Z">Referencing from Maven and java docs</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="699aad4b-9271-4f53-bcff-48cd49a70752" Status="New Topic" CreatedOn="2019-09-23T16:15:11.006571Z" ModifiedOn="2019-09-25T17:58:04.7475946Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial  03 - Creating a Chart and Add a Data Series" BuildFlags="">
                <Title m="2019-09-24T12:44:11.2138917Z">3D Tutorial  03 - Creating a Chart and Add a Data Series</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T17:58:04.7475946Z">&lt;P&gt;There are four key files here. Two Java classes and two layouts:&lt;/P&gt;
&lt;P&gt;1. MainActivity.java&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Create a reference to &lt;STRONG&gt;CreateScatter3DChartFragment exampleFragment&lt;/STRONG&gt; 
&lt;LI&gt;Reads the SciChart license. 
&lt;LI&gt;Inits &lt;STRONG&gt;SciChartBuilder.init(this)&lt;/STRONG&gt; and &lt;STRONG&gt;SciChart3DBuilder.init(this)&lt;/STRONG&gt;; 
&lt;LI&gt;Inflates &lt;STRONG&gt;activity_main&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;2. CreateScatter3DChartFragment.java&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Extends &lt;STRONG&gt;android.app.Fragment&lt;/STRONG&gt;. 
&lt;LI&gt;Inflates &lt;STRONG&gt;R.layout.example_single_chart3d_fragment&lt;/STRONG&gt;. 
&lt;LI&gt;Creates a &lt;STRONG&gt;Camera3D camera&lt;/STRONG&gt; which is used to project world coordinates (x,y,z) onto a 2D plane, i.e., the device screen. 
&lt;LI&gt;Populates &lt;STRONG&gt;XyzDataSeries3D dataSeries&lt;/STRONG&gt; with data. 
&lt;LI&gt;Inits a &lt;STRONG&gt;SciChart3DBuilder&lt;/STRONG&gt; which it uses to create &lt;STRONG&gt;SciChartSurface3D surface3d&lt;/STRONG&gt;. 
&lt;LI&gt;Creates an &lt;STRONG&gt;EllipsePointMarker3D pointMarker3D&lt;/STRONG&gt;. 
&lt;LI&gt;Passes the &lt;STRONG&gt;dataseries&lt;/STRONG&gt; and &lt;STRONG&gt;pointMarker3D&lt;/STRONG&gt; into the RenderableSeries &lt;STRONG&gt;ScatterRenderableSeries3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;3. activity_main.xml&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Contains the fragment &lt;STRONG&gt;com.scichart.examples.fragments.charts3d.CreateScatter3DChartFragment&lt;/STRONG&gt; in a &lt;STRONG&gt;LinearLayout&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;4. example_single_chart3D_fragment.xml&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Inflates &lt;STRONG&gt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Step by step, this is:&lt;/P&gt;
&lt;H2&gt;Add the license to MainActivity&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;License&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;super.onCreate(bundle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String license = "&amp;lt;LicenseContract&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;Customer&amp;gt;xxxxxxxx&amp;lt;/Customer&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;OrderId&amp;gt;Documentation Use Only&amp;lt;/OrderId&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;LicenseCount&amp;gt;1&amp;lt;/LicenseCount&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;IsTrialLicense&amp;gt;true&amp;lt;/IsTrialLicense&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;SupportExpires&amp;gt;10/01/2019 00:00:00&amp;lt;/SupportExpires&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;ProductCode&amp;gt;SC-ANDV3-PRO&amp;lt;/ProductCode&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;KeyCode&amp;gt;xxxxx&amp;lt;/KeyCode&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/LicenseContract&amp;gt;";&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface.setRuntimeLicenseKey(license);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception e) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Log.e("scichart", e.printStackTrace();)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;First we inflate a &lt;STRONG&gt;LinearLayout R.layout.activity_main&lt;/STRONG&gt; which contains the &lt;STRONG&gt;Fragment com.scichart.examples.fragments.charts3d.CreateScatter3DChartFragment&lt;/STRONG&gt;: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class MainActivity extends Activity {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private CreateScatter3DChartFragment exampleFragment;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private CustomDrawerLayout drawerLayout;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private ImageButton settingsButton;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onCreate(Bundle bundle) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartBuilder.init(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChart3DBuilder.init(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setContentView(R.layout.activity_main);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;We use &lt;A href="https://github.com/JakeWharton/butterknife" target=_blank&gt;ButterKnife&lt;/A&gt;, which is an SDK that lets you use annotation to inflate layouts, to inflate a &lt;STRONG&gt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class CreateScatter3DChartFragment extends Fragment {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected final SciChart3DBuilder sciChart3DBuilder = SciChart3DBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @BindView(R.id.chart3d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;This inflates &lt;STRONG&gt;example_single_chart3d_fragment.xml&lt;/STRONG&gt;: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;lt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart3d"&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Now the heavy lifting begins in &lt;STRONG&gt;CreateScatter3DChartFragment.init()&lt;/STRONG&gt;. We first create some data: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected void initExample() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; dataSeries = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = i;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Then we make an &lt;STRONG&gt;EllipsePointMarker3D pointMarker3D&lt;/STRONG&gt; and &lt;STRONG&gt;ScatterRenderableSeries3D rs&lt;/STRONG&gt; and bind that to the &lt;STRONG&gt;XyzDataSeries3D dataseries&lt;/STRONG&gt;. A pointMarker means the type, color, and size of the points in the graph. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final EllipsePointMarker3D pointMarker3D = sciChart3DBuilder.newEllipsePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Now we set the Camera, XYZ axes, and render the chart: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The resulting chart looks like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial1Scatter1.jpg"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d5f6befd-6b5b-4650-a207-d63f648a4f8e" Status="New Topic" CreatedOn="2019-09-02T14:12:14.8733503Z" ModifiedOn="2019-09-24T12:48:00.4835681Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial 04 - Changing the Axes Length and Chart Pitch and Yaw" BuildFlags="">
                <Title m="2019-09-24T12:48:00.4835681Z">3D Tutorial 04 - Changing the Axes Length and Chart Pitch and Yaw</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T09:51:37.4149205Z">&lt;P&gt;In the &lt;A href=""&gt;previous tutorial&lt;/A&gt;, it was hard to see the coordinates, because the axis range was much larger than the data range. So the points were small. And it was hard to understand where the coordinates are located, because they are in 3D.&lt;/P&gt;
&lt;P&gt;So to address the first issue, we set the axis range close to the data range to make the points easier to see.&lt;/P&gt;
&lt;P&gt;Specifically our data ranges from 1 to 6 we&amp;nbsp;want the axis length to be, say, 0 and 6. So we set:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;com.scichart.data.model.DoubleRange = (Min = 1.0, Max = 5.0) 
&lt;LI&gt;com.scichart.data.model.DoubleRange = (Min = 0.0, Max = 6.0) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;With:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;BR&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And to address the second issue, it's understand the position of the coordinates x,y,z in 3D space if we set one axis to zero. Below we have modified the code to create the points thus setting z to zero.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;(1,1,0) 
&lt;LI&gt;(2,2,0) 
&lt;LI&gt;(3,3,0) 
&lt;LI&gt;(4,4,0) 
&lt;LI&gt;(5,5,0) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Now you can more easily see that this is the graph of y = x, since we are looking at the xy plane from the side.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/flattenChart.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;If we set all three axes to (1,1,1) ... (5,5,5) we get the chart in the previous tutorial where the line appeared to be pointing straight out from the screen at a 45 degree angle.&lt;/P&gt;
&lt;P&gt;At the bottom left as you rotate and title the screen with your fingers, meaning change the pitch and yaw. A graphic shows the orientation of the chart. It's small on the screen, so here it is enlarged:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/littleXPY.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Below is the modified code. The default Yaw and Pitch are 45 so we use camera.setOrbitalYaw(54).&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;camera.setOrbitalYaw(54)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected void initExample() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; dataSeries = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 1; i &amp;lt;= 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final EllipsePointMarker3D pointMarker3D = sciChart3DBuilder.newEllipsePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSeriesInfoProvider(new CustomSeriesInfo3DProvider())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withOrbitModifier3D().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier3D().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; camera.setOrbitalYaw(54);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; camera.setOrbitalPitch(45);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Pitch and Yaw&lt;/H2&gt;Since the chart is &lt;STRONG&gt;left-handed&lt;/STRONG&gt; and the y axis it vertical rotation about the y axis (&lt;STRONG&gt;yaw&lt;/STRONG&gt;) is in the counterclockwise direction. You could call this &lt;STRONG&gt;left&lt;/STRONG&gt;. In terms of aviation, that makes sense as turning left and turning counterclockwise if the same thing. Since the x axis is horizontal rotation about the x axis (&lt;STRONG&gt;pitch&lt;/STRONG&gt;) is counterclockwise. You could call this&amp;nbsp;&lt;STRONG&gt;down&lt;/STRONG&gt;. Again this makes sense when you think of an aircraft. 
&lt;H3&gt;Pitch Down&lt;/H3&gt;
&lt;P&gt;We started with this chart. This is oriented at the default yaw=45 and pitch=45.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial1Scatter.jpg"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;yaw=45 and pitch=45&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;camera.setOrbitalYaw(45); &lt;/P&gt;
&lt;P&gt;camera.setOrbitalPitch(90);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To make the chart tilt straight down, we change the pitch to 90 degrees. We change the yaw the same 45 degrees.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/pitchDown.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This clearly looks like the chart has tiled straight down.&lt;/P&gt;
&lt;H3&gt;Rotate Left&lt;/H3&gt;
&lt;P&gt;To turn left degrees we change yaw to -45 degrees, since rotation in the positive direction in a left-hand coordinate system is clockwise. So we want to go 90 degrees in the other direction. &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;camera.setOrbitalYaw(-45); &lt;/P&gt;
&lt;P&gt;camera.setOrbitalPitch(45);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rotateLeft.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Look at the small graphic in the corner of the Android screen and you can see the new orientation of the xyz axes. The x axis has swung around 90 degrees:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rotateLeft90xyz.jpg"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="15f98772-959e-40e9-8d86-32f07faea52c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="88e23fb1-2693-454f-bc8f-512d816ca961" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5b2aee27-ddd0-4f07-ada5-304ba13d5c66" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="140182b7-2495-419a-b4e0-541fa229f714" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b302958a-29d2-4089-9b36-8ff8acd30627" Status="New Topic" CreatedOn="2019-09-02T15:14:36.8281591Z" ModifiedOn="2019-10-28T09:49:44.6763796Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial 05 - Zooming and Rotating" BuildFlags="">
                <Title m="2019-10-28T09:31:49.6199316Z">3D Tutorial 05 - Zooming and Rotating</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T09:43:37.8265699Z">&lt;P&gt;So far we created a 3D chart, added XAxis, YAxis and ZAxis and 3D scatter series. In this tutorial we're going to add some interactivity for 3D chart and in the end we should get ability to zoom and rotate camera around the chart.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Zooming and Rotation Definitions:&lt;/H2&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;zoom&lt;/STRONG&gt; — means to enlarge the chart by zooming in on a section. You use two fingers to do this. But it's more than just zooming into a 2D drawing, the perspective changes as you move throughout the 3D space, creating the illusion that you are moving inside the cube which is the chart. 
&lt;LI&gt;&lt;STRONG&gt;rotate&lt;/STRONG&gt; — means to move rotate the camera and move it up and down. Remember that the &lt;STRONG&gt;camera&lt;/STRONG&gt; is your perspective, or the projection from your eye of the chart onto the 2D surface of the screen. &lt;/LI&gt;&lt;/UL&gt;
&lt;H1&gt;3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;In SciChart 3D, chart interactions are defined by 3D ChartModifiers. In addition to the default SciChart modifiers you can write custom modifiers or extends existing ones.&lt;/P&gt;
&lt;P&gt;The default modifiers includes:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;PinchZoomModifier3D 
&lt;LI&gt;ObitModifier3D 
&lt;LI&gt;FreeLookModifier3d 
&lt;LI&gt;ZoomExtentsModifier3D 
&lt;LI&gt;TooltipModifier3D 
&lt;LI&gt;VertexSelectionModifier3D 
&lt;LI&gt;LegendModifier3D &lt;/LI&gt;&lt;/UL&gt;
&lt;H1&gt;Adding 3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;Now we are going to create and configure a couple of modifiers using SciChartBuilder3D and add them to the modifier collection of the SciChartSurfac3D:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final ModifierGroup3D modifierGroup3D = sciChart3DBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withOrbitModifier3D().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then to add them into collection:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.getChartModifiers().add(modifierGroup3D);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="6c10afbe-fd7a-4fa9-b26b-25d47ea9a2c1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title m="2019-10-28T09:46:31.4385931Z">PinchZoomModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fd9d4d72-f8e5-4720-a130-6d76ea508949" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title m="2019-10-28T09:48:40.4281627Z">ObitModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="91a7ead9-2c8b-47a4-a060-e304f8e7dca5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title m="2019-10-28T09:49:31.6138953Z">FreeLookModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a32f5061-c887-45b1-aec6-16d2eee44313" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title m="2019-10-28T09:49:44.5854368Z">ZoomExtentsModifier3D</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="57a08ab7-2fd2-4ee1-8268-30acf5c474c3" Status="New Topic" CreatedOn="2019-09-02T16:02:59.1689118Z" ModifiedOn="2019-09-25T18:01:58.9581264Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial 06 - Cursors and Tooltips" BuildFlags="">
                <Title m="2019-09-24T13:27:26.35552Z">3D Tutorial 06 - Cursors and Tooltips</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T11:47:33.2557949Z">&lt;P&gt;In the&amp;nbsp;&lt;A href="b302958a-29d2-4089-9b36-8ff8acd30627"&gt;previous tutorial&lt;/A&gt;, we showed how to create a chart and add data. In this tutorial we show how to add a cursor and tooltip to that chart.&lt;/P&gt;
&lt;H3&gt;Definitions&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;cursor&lt;/STRONG&gt; ⁠— a tablet or cell phone obviously does not have a mouse. Instead the mouse is your finer and the cursor is where you place your finger. It appears as a small &lt;STRONG&gt;x&lt;/STRONG&gt; (cross). 
&lt;LI&gt;&lt;STRONG&gt;tooltip⁠&lt;/STRONG&gt; — is text that displays when you push the cursor onto an object, like a point plotted on a chart. You have to push the cursor onto the coordinate for the text to appear. In the case of the example below you probably need to use two fingers to zoom into the chart to make the points appear large enough to that you can see them. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Tooltip&lt;/H2&gt;
&lt;P&gt;At the bottom of &lt;A href="699aad4b-9271-4f53-bcff-48cd49a70752"&gt;CreateScatter3DChartFragment&lt;/A&gt;&amp;nbsp;we added a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt; in the previous tutorial. This gives the chart the panning and zooming ability.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We can add more additional charts on the surface by simple adding them to &lt;STRONG&gt;surface3d.getRenderableSeries().add(CHART)&lt;/STRONG&gt;. Similarly we an add additional modifiers, such as a &lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier&lt;/A&gt;, to the surface3D object using &lt;STRONG&gt;surface3d.getChartModifiers().add&lt;/STRONG&gt;. &lt;/P&gt;
&lt;P&gt;So in &lt;A href="7915ac64-f37b-4acd-a5c7-521a0259d63c"&gt;CreateScatter3DChartFragment&lt;/A&gt; we create a &lt;STRONG&gt;TooltipModifier3D&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final TooltipModifier3D tooltipModifier3D = new TooltipModifier3D();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipModifier3D.setIsEnabled(true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //tooltipModifier3D.setExecuteOnPointerCount(1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipModifier3D.setCrosshairMode(CrosshairMode.Lines);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(new ModifierGroup3D(tooltipModifier3D));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we assign the &lt;STRONG&gt;CustomXyzSeriesTooltip3D&lt;/STRONG&gt;, defined further below in the class &lt;STRONG&gt;CustomSeriesInfo3DProvider&lt;/STRONG&gt;, with &lt;STRONG&gt;return new CustomXyzSeriesTooltip3D(context, seriesInfo)&lt;/STRONG&gt; to the &lt;STRONG&gt;CustomSeriesInfo3DProvider&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;class CustomSeriesInfo3DProvider extends DefaultXyzSeriesInfo3DProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected ISeriesTooltip3D getSeriesTooltipInternal(Context context, XyzSeriesInfo3D&amp;lt;? extends XyzRenderableSeries3DBase&amp;gt; seriesInfo, Class&amp;lt;?&amp;gt; modifierType) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(modifierType == TooltipModifier3D.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomXyzSeriesTooltip3D(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return super.getSeriesTooltipInternal(context, seriesInfo, modifierType);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We define the behavior of the tooltip by extending &lt;STRONG&gt;XyzSeriesTooltip3D&lt;/STRONG&gt;. Here we add the text that we want to appear in the tooltip. In this case we pass it a description and the x,y,z coordinates or the point you touch. Use a line feed &lt;STRONG&gt;\n&lt;/STRONG&gt; at the end of each line.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;class CustomSeriesInfo3DProvider extends DefaultXyzSeriesInfo3DProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected ISeriesTooltip3D getSeriesTooltipInternal(Context context, XyzSeriesInfo3D&amp;lt;? extends XyzRenderableSeries3DBase&amp;gt; seriesInfo, Class&amp;lt;?&amp;gt; modifierType) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(modifierType == TooltipModifier3D.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomXyzSeriesTooltip3D(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return super.getSeriesTooltipInternal(context, seriesInfo, modifierType);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private static class CustomXyzSeriesTooltip3D extends XyzSeriesTooltip3D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomXyzSeriesTooltip3D(Context context, XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalUpdate(XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SpannableStringBuilder sb = new SpannableStringBuilder();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("This is Custom Tooltip").append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("VertexId: ").append(Integer.toString(seriesInfo.vertexId)).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("X: ").append(seriesInfo.getFormattedXValue()).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Y: ").append(seriesInfo.getFormattedYValue()).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Z: ").append(seriesInfo.getFormattedZValue());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setText(sb);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setSeriesColor(seriesInfo.seriesColor);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here is the result:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/customtooltip.jpg"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="da0d621a-f710-4761-a3bf-4b0454648587" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7915ac64-f37b-4acd-a5c7-521a0259d63c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="5eb89f7b-2486-4a91-bb5d-2a567a4cdd16" Status="New Topic" CreatedOn="2019-09-02T12:26:48.1021752Z" ModifiedOn="2019-09-24T13:27:40.12036Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial 07 - Plotting Realtime Data" BuildFlags="">
                <Title m="2019-09-24T13:27:40.12036Z">3D Tutorial 07 - Plotting Realtime Data</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T11:48:45.1702818Z">&lt;P&gt;Go back to the code &lt;A href=""&gt;Creating a Chart and Add a Data Series&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Before we add realtime updates to the chart it is necessary to use the &lt;A href=""&gt;UpdateSuspender&lt;/A&gt; object to create the chart instead of the approach we used before, which was just to run a series of steps in &lt;STRONG&gt;initExample()&lt;/STRONG&gt;. UpdateSuspender is disposable class which allows nested suspend/resume operations on an &lt;A href=""&gt;ISuspendable&lt;/A&gt; target.&lt;/P&gt;
&lt;P&gt;Then change this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;... to this code shown below. Build and run the project to make sure that it still works.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;BR&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we add the code below to update the chart in real time. As you can see updating the chart is as simple as changing the data and running that in a thread.&lt;/P&gt;
&lt;P&gt;First add ScheduledExecutorService and ScheduledFuture to the top:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class CreateScatter3DChartFragment extends ExampleBaseFragment {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @BindView(R.id.chart3d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private ScheduledFuture&amp;lt;?&amp;gt; schedule;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now put this at the bottom:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void initExample() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; schedule = scheduledExecutorService.scheduleWithFixedDelay(new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final DoubleValues buffer = new DoubleValues();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double randomDouble = Math.random();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; randomDouble = randomDouble * 5 + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int randomInt = (int) randomDouble;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i*randomInt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i*randomInt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = i*randomInt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, 0, 33, TimeUnit.MILLISECONDS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onDestroyView() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onDestroyView();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (schedule != null)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; schedule.cancel(true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The complete code for the modified &lt;STRONG&gt;CreateScatter3DChartFragment&lt;/STRONG&gt; is &lt;A href="b6028fd1-9906-48ac-9d08-dd81e45997dd"&gt;here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The resulting chart is the same except values plotted on the screen change in real time.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/RealtimeAndroid.gif"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="13d7487c-cf17-4ec6-aef1-a78860c2ecb1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="498f88e2-6f84-4804-9da5-426e8d72ef00" BuildFlags="">
                    <Title m="2019-09-24T11:38:43.3581343Z">Suspending Updates of Chart</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="e4b525e7-9afc-47c0-b367-cb3e9563e8e3" AutoIndex="true">
            <Caption m="2019-10-28T09:55:42.7433294Z">Xamarin 3D Tutorials</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="b0767532-561b-484f-af6f-090b862e3219" Status="New Topic" CreatedOn="2019-10-28T09:56:09.9919599Z" ModifiedOn="2019-10-28T12:14:39.8230468Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin 3D Tutorial 01 - Adding SciChart 3D libraries as dependencies" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T12:14:39.8230468Z">&lt;H2&gt;Create the Visual Studio Solution&lt;/H2&gt;
&lt;P&gt;In this tutorial series we will create a simple line chart using SciChart Xamarin.Android. First, we need to create a new project and reference the DLLs.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;If you have already created a project with references to SciChart DLLs, you can safely skip to Xamarin Tutorial 02 - Creating a Chart&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;First, ensure you have downloaded and unzipped the SciChart Xamarin.Android package. Next, create a new Visual studio project selecting Xamarin Android Single-View App.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt=NewProject src="images/XamarinNewProject.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Referencing the SciChart DLLs&lt;/H2&gt;
&lt;H3&gt;Referencing from Installation Directory&lt;/H3&gt;
&lt;P&gt;Right click the project and click Add Reference&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/XamarinAddReference.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the References dialog, select Assemblies and search for SciChart.Android3D. Now add a reference to SciChart.Android.Core, SciChart.Android.Data, SciChart.Android.Drawing, SciChart.Android.Charting and SciChart.Android.Charting3D, then click OK to complete.&lt;/P&gt;
&lt;H3&gt;Or, alternative, referencing from NuGet&lt;/H3&gt;
&lt;OL&gt;
&lt;LI&gt;Alternatively, you can optionally reference SciChart from NuGet. Setup the NuGet feed according to the article &lt;A href="http://support.scichart.com/index.php?/Knowledgebase/Article/View/17232/37/getting-nightly-builds-with-nuget" target=_blank&gt;Getting Nightly Builds with NuGet&lt;/A&gt;. 
&lt;LI&gt;In Visual Studio select View -&amp;gt; Other Windows -&amp;gt; Package Manager Console. 
&lt;LI&gt;Type &lt;STRONG&gt;Install-package SciChart.Android3D&lt;/STRONG&gt; in the console and click Enter. This will isntall the latest build of SciChart.Android3D. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&lt;IMG border=0 alt="Install from NuGet" src="images/Xamarin3DNuget.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;At this point the solution should build and run, however we now need to add functionality.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d18c9c69-51a2-4a0f-9844-87cb35916165" Status="New Topic" CreatedOn="2019-10-28T11:44:09.6868925Z" ModifiedOn="2019-10-28T16:09:41.9790028Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin 3D Tutorial 02 - Creating a Chart and Add a Data Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T16:09:41.9790028Z">&lt;P&gt;First of all we need to declare SciChartSurface3D, which is the root of 3D chart. This is the Android View that you will be adding to your application whenever you need a 3D chart.&lt;/P&gt;
&lt;P&gt;First we declare SciChartSurface3D inside XML with layout.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;xml&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;BR&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart3d"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="fill_parent" /&amp;gt;&lt;BR&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And then use it in code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected override void OnCreate(Bundle bundle)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnCreate(bundle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set our view from the "main" layout resource&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SetContentView(Resource.Layout.Main);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Get our chart from the layout resource,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var chart3D = FindViewById&amp;lt;SciChartSurface3D&amp;gt;(Resource.Id.Chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var xAxis3D = new NumericAxis3D() {GrowBy = new DoubleRange(0.1, 0.1)};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var yAxis3D = new NumericAxis3D() {GrowBy = new DoubleRange(0.1, 0.1)};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a numeric Z axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var zAxis3D = new NumericAxis3D() {GrowBy = new DoubleRange(0.1, 0.1)};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; using (chart3D.SuspendUpdates())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.XAxis = xAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.YAxis = yAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.ZAxis = zAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;After this you should see empty 3D chart which has XAxis, YAxis and ZAxis.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/XamarinTutorial_Empty3DChart.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding 3D DataSeries and RenderableSeries&lt;/H2&gt;
&lt;P&gt;To draw some data in chart we need to create 3D DataSeries and RenderableSeries. The DataSeries is a class which is responsible for storing data which should be displayed and RenderableSeries is a class which determines how data should be visualized by chart.&lt;/P&gt;
&lt;P&gt;First, lets declare the 3D DataSeries and generate some data for it:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;var dataManager = DataManager.Instance;&lt;/P&gt;
&lt;P&gt;var dataSeries3D = new XyzDataSeries3D&amp;lt;double, double, double&amp;gt;();&lt;/P&gt;
&lt;P&gt;for (int i = 0; i &amp;lt; 100; i++)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double x = dataManager.GetGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double y = dataManager.GetGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double z = dataManager.GetGaussianRandomNumber(5, 1.5);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries3D.Append(x, y, z);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The next step is to create 3D RenderableSeries. In our case we're going to display data as a point cloud using ScatterRenderableSeries3D.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;var pointMarker3D = new SpherePointMarker3D()&lt;BR&gt;&amp;nbsp;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; FillColor = Color.Lime,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Size = 5f&lt;BR&gt;&amp;nbsp;};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;var renderableSeries3D = new ScatterRenderableSeries3D()&lt;BR&gt;&amp;nbsp;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; PointMarker = pointMarker3D,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DataSeries = dataSeries3D&lt;BR&gt;&amp;nbsp;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The last step is to add created series into RenderableSeries collection of chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;using (chart3D.SuspendUpdates())&lt;BR&gt;&amp;nbsp;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.XAxis = xAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.YAxis = yAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.ZAxis = zAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.RenderableSeries.Add(renderableSeries3D);&lt;BR&gt;&amp;nbsp;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/XamarinTutorial_3DPointCloud.png"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3ce03a34-72ea-473d-ba1a-7093d79729a2" Status="New Topic" CreatedOn="2019-10-28T11:57:27.0728218Z" ModifiedOn="2019-10-28T12:31:55.9419769Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin 3D Tutorial 03 - Zooming and Rotating" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T12:31:08.7560175Z">&lt;P&gt;So far we created a 3D chart, added XAxis, YAxis and ZAxis and 3D scatter series. In this tutorial we're going to add some interactivity for 3D chart and in the end we should get ability to zoom and rotate camera around the chart.&lt;/P&gt;
&lt;P&gt;Zooming and Rotation Definitions:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;zoom&lt;/STRONG&gt; — means to enlarge the chart by zooming in on a section. You use two fingers to do this. But it's more than just zooming into a 2D drawing, the perspective changes as you move throughout the 3D space, creating the illusion that you are moving inside the cube which is the chart. 
&lt;LI&gt;&lt;STRONG&gt;rotate&lt;/STRONG&gt; — means to move rotate the camera and move it up and down. Remember that the &lt;STRONG&gt;camera&lt;/STRONG&gt; is your perspective, or the projection from your eye of the chart onto the 2D surface of the screen. &lt;/LI&gt;&lt;/UL&gt;
&lt;H1&gt;3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;In SciChart 3D, chart interactions are defined by 3D ChartModifiers. In addition to the default SciChart modifiers you can write custom modifiers or extends existing ones.&lt;/P&gt;
&lt;P&gt;The default modifiers includes:&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;PinchZoomModifier3D 
&lt;LI&gt;ObitModifier3D 
&lt;LI&gt;FreeLookModifier3d 
&lt;LI&gt;ZoomExtentsModifier3D 
&lt;LI&gt;TooltipModifier3D 
&lt;LI&gt;VertexSelectionModifier3D 
&lt;LI&gt;LegendModifier3D &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H1&gt;Adding 3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;Now we are going to create and configure a couple of modifiers and add set them as modifier collection of the SciChartSurfac3D:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;using (chart3D.SuspendUpdates())&lt;BR&gt;&amp;nbsp;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.XAxis = xAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.YAxis = yAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.ZAxis = zAxis3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.RenderableSeries.Add(renderableSeries3D);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart3D.ChartModifiers = new ChartModifier3DCollection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new PinchZoomModifier3D(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new OrbitModifier3D(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;}&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about modifiers which manipulate camera position in 3D provided by SciChart out of the box please find links to the corresponding documentation articles below:&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0e5a4ff6-e3b8-4cfa-9abd-0bc0696c5a3a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title m="2019-10-28T12:31:19.8797194Z">PinchZoomModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="ae1bbf68-2b3b-4cdf-a375-5d9f282fae93" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title m="2019-10-28T12:31:33.7065889Z">OrbitModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0ba99a6f-771a-4bfb-9636-8b2250fc9746" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title m="2019-10-28T12:31:45.3671759Z">FreeLookModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a2006f00-e22c-4025-8f14-1967128e88bf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title m="2019-10-28T12:31:55.8320703Z">ZoomExtentsModifier3D</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4b4c0f0f-f126-42cc-bff5-22024bafb1f5" Status="New Topic" CreatedOn="2019-10-28T11:04:03.2901804Z" ModifiedOn="2019-10-28T12:18:00.5768928Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin 3D Tutorial 04 - Cursors and Tooltips" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T12:17:38.9561322Z">&lt;P&gt;In the &lt;A href="https://www.scichart.com/documentation/android/v3.x/3D Tutorial 05 - Zooming and Panning.html" target=_blank&gt;previous tutorial&lt;/A&gt;, we showed how to create a chart and add data. In this tutorial we show how to add a cursor and tooltip to that chart.&lt;/P&gt;
&lt;H3&gt;Definitions&lt;/H3&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;cursor&lt;/STRONG&gt; ⁠— a tablet or cell phone obviously does not have a mouse. Instead the mouse is your finer and the cursor is where you place your finger. It appears as a small &lt;STRONG&gt;x&lt;/STRONG&gt; (cross). 
&lt;LI&gt;&lt;STRONG&gt;tooltip&lt;/STRONG&gt; — is text that displays when you push the cursor onto an object, like a point plotted on a chart. You have to push the cursor onto the coordinate for the text to appear. In the case of the example below you probably need to use two fingers to zoom into the chart to make the points appear large enough to that you can see them. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;TooltipModifier3D&lt;/H2&gt;
&lt;P&gt;We can add more renderable on the surface by simple adding them into RenderableSeries collection of chart3D. Similarly we an add additional modifiers, such as a &lt;A href="https://www.scichart.com/documentation/android/v3.x/SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html" target=_blank&gt;TooltipModifier3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp; chart3D.ChartModifiers = new ChartModifier3DCollection&lt;BR&gt;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new PinchZoomModifier3D(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new OrbitModifier3D(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier3D(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TooltipModifier3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; CrosshairMode = CrosshairMode.Lines,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ReceiveHandledEvents = true&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp; };&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;Here is result which you can see if touch one of points.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/XamarinTutorial_TooltipModifier3D.png"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="529c4e58-caef-4c47-a17a-608cd05072c7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title m="2019-10-28T11:55:40.8294227Z">PinchZoomModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="edeaa72f-0626-444a-b8d0-06be6fbe97b6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title m="2019-10-28T11:55:56.3171531Z">ObitModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="9e40c237-5af3-4805-aec7-82044b82545b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title m="2019-10-28T11:56:12.3642346Z">FreeLookModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2f45474d-cd30-4af7-802a-c504e140f972" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title m="2019-10-28T11:56:28.0356027Z">ZoomExtentsModifier3D</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f2b4d9d7-eb15-472e-8e72-ce251d0826d4" Status="New Topic" CreatedOn="2019-10-28T12:09:11.1636083Z" ModifiedOn="2019-10-28T12:13:37.8703631Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Xamarin 3D Tutorial 05 - Plotting Realtime Data" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T12:13:37.8703631Z">&lt;P&gt;In this tutorial we are going to show how to update data displayed by 3D chart in realtime. Assuming you have completed previous tutorial, we will now make some changes to update the data dynamically.&lt;/P&gt;
&lt;H2&gt;Updating Data Values&lt;/H2&gt;
&lt;P&gt;In our 3D DataSeries, we have some static data so far. Lets animate it now.&lt;/P&gt;
&lt;P&gt;We are going to add a Timer and schedule updating the data on timer tick. To update data in a 3D DataSeries, we have to call one of the available &lt;STRONG&gt;UpdateXXX&lt;/STRONG&gt; methods on that DataSeries, but first of all we need to adjust some previously created code and save DataSeries instance and data used in private fields:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;
&lt;P&gt;csharp&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private readonly XyzDataSeries3D&amp;lt;double, double, double&amp;gt; _dataSeries3D = new XyzDataSeries3D&amp;lt;double, double, double&amp;gt;();&lt;/P&gt;
&lt;P&gt;private readonly List&amp;lt;double&amp;gt; _xData = new List&amp;lt;double&amp;gt;();&lt;BR&gt;private readonly List&amp;lt;double&amp;gt; _yData = new List&amp;lt;double&amp;gt;();&lt;BR&gt;private readonly List&amp;lt;double&amp;gt; _zData = new List&amp;lt;double&amp;gt;();&lt;/P&gt;
&lt;P&gt;protected override void OnCreate(Bundle bundle)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; base.OnCreate(bundle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; var dataManager = DataManager.Instance;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 1000; i++)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _xData.Add(dataManager.GetGaussianRandomNumber(5, 1.5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _yData.Add(dataManager.GetGaussianRandomNumber(5, 1.5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _zData.Add(dataManager.GetGaussianRandomNumber(5, 1.5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _dataSeries3D.Append(_xData, _yData, _zData);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // start timer here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Start();&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;After this we can add Timer which updates &lt;STRONG&gt;_dataSeries3D&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;csharp&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private const int TimerInterval = 10;&lt;BR&gt;private volatile bool _isRunning = false;&lt;BR&gt;private readonly object _syncRoot = new object();&lt;BR&gt;private Timer _timer;&lt;/P&gt;
&lt;P&gt;private void Start()&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (_isRunning) return;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _isRunning = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _timer = new Timer(TimerInterval);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _timer.Elapsed += OnTick;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _timer.AutoReset = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; _timer.Start();&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;private void OnTick(object sender, ElapsedEventArgs e)&lt;BR&gt;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lock (_syncRoot)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!_isRunning) return;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; var random = new Random();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0, size = _dataSeries3D.Count; i &amp;lt; size; i++)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _xData[i] += random.NextDouble() - 0.5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _yData[i] += random.NextDouble() - 0.5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _zData[i] += random.NextDouble() - 0.5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; _dataSeries3D.UpdateRangeXyzAt(0, _xData, _yData, _zData);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This should result next output of chart&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt=ReatimeUpdate3D src="images/XamarinTutorial_RealtimeUpdate3D.gif"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="f2a1bf7b-58d6-4576-a9db-52f9b204dec7" AutoIndex="false">
            <Caption m="2019-07-08T10:32:17.0279208Z">Axis3D APIs</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="1f42648d-b868-4793-8ab7-b44504f33f99" Status="New Topic" CreatedOn="2019-07-08T10:32:21.0237301Z" ModifiedOn="2019-09-23T11:41:40.6730452Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Types in SciChart3D" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T11:41:40.6730452Z">&lt;P&gt;SciChart 3D Android features several axis types. All inherit from&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisBase3D.html"&gt;AxisBase3D&lt;/A&gt;. The Axis&amp;nbsp;are the logical representation of the XZ, ZY, YX planes in the Axis Cube.&lt;/P&gt;
&lt;P&gt;Axes are required to measure the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~getRenderableSeries.html"&gt;RenderableSeries&lt;/A&gt;, for instance, an axis is responsible for the transformation between data-values (provided by your code) and world coordinates (X,Y,Z values in 3D Space).&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: It is necessary to declare&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setXAxis.html"&gt;XAxis&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setYAxis.html"&gt;YAxis&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setZAxis.html"&gt;ZAxis&lt;/A&gt; in code before the 3D chart will draw.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;Axis types available in SciChart3D are listed below.&lt;/P&gt;
&lt;H2&gt;NumericAxis3D&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.NumericAxis3D.html"&gt;NumericAxis3D&lt;/A&gt; is a Value-Axis and is suitable when the data on that axis is numeric (e.g. double, it, long, float, short). It is not suitable for when the data-type is DateTime or TimeSpan.&lt;/P&gt;
&lt;P&gt;Declare a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.NumericAxis3D.html"&gt;NumericAxis3D&lt;/A&gt; as follows.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;NumericAxis3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final NumericAxis3D xAxis = new NumericAxis3D();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;xAxis.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;xAxis.setVisibleRange(new DoubleRange(1.1, 2.7));&lt;BR&gt;xAxis.setAxisTitle("XAxis");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;DateTimeAxis3D&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.DateAxis3D.html"&gt;DateTimeAxis3D&lt;/A&gt; is a Value-Axis and is suitable when the data on that axis is a DateTime.&lt;/P&gt;
&lt;P&gt;Declare a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.DateAxis3D.html"&gt;DateTimeAxis3D&lt;/A&gt; as follows.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DateTimeAxis3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final DateAxis3D xAxis = new DateAxis3D();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;xAxis.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;xAxis.setAxisTitle("XAxis");&lt;BR&gt;xAxis.setAutoRange(AutoRange.Always);&lt;BR&gt;xAxis.setVisibleRange(new DateRange(dateMin, dateMax));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;LogarithmicNumericAxis3D&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.LogarithmicNumericAxis3D.html"&gt;LogarithmicNumericAxis3D&lt;/A&gt; is a Logarithmic Value-Axis and is suitable when the data on that axis is a Numeric value e.g. Double, Int, Long, Float.&lt;/P&gt;
&lt;P&gt;Declare a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.LogarithmicNumericAxis3D.html"&gt;LogarithmicNumericAxis3D&lt;/A&gt; as follows.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;LogarithmicNumericAxis3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final LogarithmicNumericAxis3D xAxis = new LogarithmicNumericAxis3D();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;xAxis.setGrowBy(new DoubleRange(0.1, 0.1));&lt;BR&gt;xAxis.setAxisTitle("XAxis");&lt;/P&gt;
&lt;P&gt;// Specifies how lables appear on the axis&lt;BR&gt;xAxis.setScientificNotation(ScientificNotation.LogarithmicBase);&lt;BR&gt;xAxis.setTextFormatting("#.#E+0");&lt;/P&gt;
&lt;P&gt;// Specifies the logarithm base for the logarithmic scale of the axis&lt;BR&gt;xAxis.setLogarithmicBase(10d);&lt;BR&gt;xAxis.setVisibleRange(new DoubleRange(0.1d, 1000d));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1d18444a-b912-4bcc-ae02-96bde1620a21" Status="New Topic" CreatedOn="2019-07-08T11:53:54.69086Z" ModifiedOn="2019-09-23T13:03:44.0370404Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis3D APIs" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:03:44.0370404Z">&lt;P&gt;SciChart 3D shares the same&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore.html"&gt;AxisCore&lt;/A&gt; as SciChart 2D. Many of the following features are shared. For your convenience, some of the documentation has been duplicated here, with some referring to other sections of the user manual.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Axis 3D TextFormatting&lt;/H2&gt;
&lt;P&gt;All Axis obey standard Java formatting strings via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getTextFormatting.html"&gt;TextFormatting&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getCursorTextFormatting.html"&gt;CursorTextFormatting&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;e.g. several examples can be found at the following articles:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="905dc605-3914-4824-9eb6-2e5d969f8475"&gt;Axis TextFormatting and CursorTextFormatting&lt;/A&gt; 
&lt;LI&gt;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis LabelProvider API&lt;/A&gt; (Dynamic or complex text formatting) &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Axis 3D AutoRanging &amp;amp; Setting VisibleRange&lt;/H2&gt;
&lt;P&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisBase3D.html"&gt;AxisBase3D&lt;/A&gt; derived Types also have AutoRanging behaviour as per the 2D axis types. The AxisCore.AutoRange property defines how the axis will autorange when data is changed.&lt;/P&gt;
&lt;P&gt;The AxisCore.VisibleRange property allows you to set or get the VisibleRange on the axis.&lt;/P&gt;
&lt;P&gt;For more info see:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;Axis Ranging - AutoRanging&lt;/A&gt; 
&lt;LI&gt;&lt;A href="494e52f8-99aa-417d-b80e-819c259dbb08"&gt;Axis Ranging - VisibleRange and DataRange&lt;/A&gt; 
&lt;LI&gt;&lt;A href="1af2411a-a194-4bbe-9a3b-efe4a4caf49a"&gt;Axis Ranging -&amp;nbsp;Restricting VisibleRange&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: In a 3D Axis, AutoRanging means ‘given a fixed size of Axis in 3D world coordinates, change the VisibleRange Max/Min to fit the data’. Dynamically positioning the camera to view all of the 3D Chart is known as ‘Zoom to Fit’ and is performed by&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.Camera3D~zoomToFit.html"&gt;Camera3D.zoomToFit()&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Axis 3D Tick Frequency&lt;/H2&gt;
&lt;P&gt;In SciChart, the ticks are small marks around the chart on an axis. They Also define the spacing of Gridlines, Axis Labels and Axis Bands.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis3DTickFrequency.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;AxisBase3D tick intervals can be changed using the same APIs as SciChart 2D. For further information see:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Axis Ticks - MajorDelta, MinorDelta and AutoTicks&lt;/A&gt; 
&lt;LI&gt;&lt;A href="965db259-73ff-4df0-b49d-b539f7a304a2"&gt;Axis Ticks - TickProvider and DeltaCalculator API&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6cc44150-883d-41f3-818c-0068615c6a34" Status="New Topic" CreatedOn="2019-07-08T11:54:15.0322699Z" ModifiedOn="2019-09-23T13:04:56.9655134Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Advanced Axis3D APIs" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:04:56.9655134Z">&lt;P&gt;Several Axis APIs are shared with SciChart 2D’s&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore.html"&gt;AxisCore&lt;/A&gt; type. These are summarised below:&lt;BR&gt;&lt;/P&gt;
&lt;H2&gt;LabelProvider API – Full Control over Axis Labels&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider API&lt;/A&gt; allows full control over the formatting of&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore.html"&gt;AxisCore&lt;/A&gt; text labels, over and above what you can achieve by setting TextFormatting.&lt;/P&gt;
&lt;P&gt;Use the LabelProvider when you want to:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Have fine-grained control over Axis Text or Cursor Labels, depending on numeric (or date) values.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Display strings on Axis e.g. “Bananas”, “Oranges”, “Apples”, not “1”, “2”, “3”&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Dynamically change the Axis Textformatting as you zoom in or out.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Dynamically change the Axis Textformatting depending on data-value.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: This is a shared API between SciChart 2D and SciChart 3D. For a full walk-through of the AxisCore LabelProvider API, including code-samples, please see&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider API&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Full Control over Axis ticks – Tick Provider and Delta Calculator API&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="965db259-73ff-4df0-b49d-b539f7a304a2"&gt;TickProvider and DeltaCalculator APIs&lt;/A&gt; provide full control over the frequency of axis labels and gridlines, over and above what you can achieve by setting&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setMajorDelta.html"&gt;MajorDelta&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setMinorDelta.html"&gt;MinorDelta&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: This is a shared API between SciChart 2D and SciChart 3D. For a full walk-through of the AxisCore TickProvider API, including code-samples, please see&amp;nbsp;&lt;A href="965db259-73ff-4df0-b49d-b539f7a304a2"&gt;TickProvider and DeltaCalculator APIs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Axis Data/Pixel Coordinate Conversion API&lt;/H2&gt;
&lt;P&gt;SciChart 3D provides a clean and simple API to transform 3D world coordinates to data-values and vice versa via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCurrentCoordinateCalculator.html"&gt;AxisCore.getCurrentCoordinateCalculator()&lt;/A&gt; API.&lt;/P&gt;
&lt;H2&gt;Where World Coordinates are measured from&lt;/H2&gt;
&lt;P&gt;World coordinates are virtual coordinates in the 3D World. They are defined by Vector3 struct which comprises X,Y,Z components.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WorldCoordinates.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;All points in ‘World Coordinates’ are measured from the origin, which by default is the center floor of the Axis Cube.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;All Axes are responsible for converting between data-values and world-coordinates: the XAxis converts X data-values to X-world coordinates, the YAxis converts Y data-values to Y-world coordinates and the ZAxis converts Z-data values to Z-world coordinates.&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;Getting a CoordinateCalculator instance&lt;/P&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getCurrentCoordinateCalculator.html"&gt;AxisCore.getCurrentCoordinateCalculator()&lt;/A&gt; returns a coordinate calculator instance which is valid for the current render pass.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: If the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.IAxisCore~getVisibleRange.html"&gt;VisibleRange&lt;/A&gt; changes, the data changes, or the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~getWorldDimensions.html"&gt;SciChart3DSurface.WorldDimensions&lt;/A&gt; changes, then the CoordinateCalculator will give incorrect results. It is advisable to cache the Coordinate Calculator only for a short period of time, e.g. when using inside a loop.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Converting from Data to Pixels&lt;/H2&gt;
&lt;P&gt;Data-values are converted to pixel coordinates via the ICoordinateCalculator.GetCoordinate() method.&lt;/P&gt;
&lt;H3&gt;Converting NumericAxis3D Data to World Coordinates and vice versa&lt;/H3&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Coordinate calculations for NumericAxis3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final NumericAxis3D numericAxis3D = new NumericAxis3D();&lt;/P&gt;
&lt;P&gt;// get coordinate calculator used by axis&lt;BR&gt;final ICoordinateCalculator coordinateCalculator = numericAxis3D.getCurrentCoordinateCalculator();&lt;/P&gt;
&lt;P&gt;// convert value to 3D world coordinate&lt;BR&gt;final float worldCoordinate = coordinateCalculator.getCoordinate(1.23d);&lt;/P&gt;
&lt;P&gt;// convert 3D world coordinate back to double value&lt;BR&gt;final double dataValue = coordinateCalculator.getDataValue(worldCoordinate);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Converting DateAxis3D Data to World Coordinates&lt;/H3&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Coordinate calculations for DateAxis3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final DateAxis3D dateAxis3D = new DateAxis3D();&lt;/P&gt;
&lt;P&gt;// get coordinate calculator used by axis&lt;BR&gt;final ICoordinateCalculator coordinateCalculator = dateAxis3D.getCurrentCoordinateCalculator();&lt;/P&gt;
&lt;P&gt;// create Date instance&lt;BR&gt;final Date now = Calendar.getInstance().getTime();&lt;/P&gt;
&lt;P&gt;// convert time value to 3D world coordinate&lt;BR&gt;final float worldCoordinate = coordinateCalculator.getCoordinate(now.getTime());&lt;/P&gt;
&lt;P&gt;// convert 3D world coordinate back to double value&lt;BR&gt;final double doubleDataValue = coordinateCalculator.getDataValue(worldCoordinate);&lt;/P&gt;
&lt;P&gt;// You need to wrap the double in a Date to complete the conversion&lt;BR&gt;final Date dataValue = new Date((long) doubleDataValue);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="8c00716b-2379-46f2-8cd1-a26dd54a3115" Status="New Topic" CreatedOn="2019-07-09T08:26:29.8963497Z" ModifiedOn="2019-09-23T13:08:56.132619Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Styling Axis3D Gridlines and Labels" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:08:56.132619Z">&lt;P&gt;Like SciChart 2D, many aspects of the Axis in SciChart3D can be styled, including major and minor gridlines, tick lines and labels.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;To style a MajorGridline or MinorGridLine create a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt;&amp;nbsp;with properties such as Stroke, StrokeThickness, StrokeDashArray etc. 
&lt;LI&gt;To style a Major or Minor Tick, create a &lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;PenStyle&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;and set Stroke, StrokeThickness etc. You can also set&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~setMinorTickLineLength.html"&gt;MinorTickLineLength&lt;/A&gt;/&lt;A href="SciChart.Charting~com.scichart.charting.visuals.axes.AxisCore~getMajorTickLineLength.html"&gt;MajorTickLineLength&lt;/A&gt; to define the size of the tick. 
&lt;LI&gt;To blanket style all labels, set the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisBase3D~setTextSize.html"&gt;TextSize&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisBase3D~setTextColor.html"&gt;TextColor&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisBase3D~getTextFont.html"&gt;TextFont&lt;/A&gt;&amp;nbsp;properties&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Style Axis3D using Builders API&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorsPerMajor(5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMaxAutoTicks(7)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextSize(13)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextColor(ColorUtil.Lime)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextFont(font)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisBandsFill(ColorUtil.DarkOliveGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineStyle(ColorUtil.Lime, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorTickLineStyle(ColorUtil.MediumVioletRed, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(4f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorGridLineStyle(ColorUtil.Lime, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorGridLineStyle(ColorUtil.DarkViolet, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorsPerMajor(5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMaxAutoTicks(7)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextSize(13)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextColor(ColorUtil.Firebrick)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextFont(font)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisBandsFill(ColorUtil.Tomato)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineStyle(ColorUtil.Firebrick, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorTickLineStyle(ColorUtil.IndianRed, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(4f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorGridLineStyle(ColorUtil.DarkGreen, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorGridLineStyle(ColorUtil.DarkSkyBlue, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorsPerMajor(5)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMaxAutoTicks(7)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextSize(13)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextColor(ColorUtil.PaleVioletRed)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withTextFont(font)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withAxisBandsFill(ColorUtil.GreenYellow)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineStyle(ColorUtil.PaleVioletRed, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorTickLineStyle(ColorUtil.Chartreuse, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorTickLineLength(4f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMajorGridLineStyle(ColorUtil.Beige, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMinorGridLineStyle(ColorUtil.Brown, 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;surface3d.setXAxis(xAxis);&lt;BR&gt;surface3d.setYAxis(yAxis);&lt;BR&gt;surface3d.setZAxis(zAxis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Which results in the following:&lt;/P&gt;
&lt;P&gt;&lt;IMG style="HEIGHT: 254px; WIDTH: 482px" border=0 alt="" src="images/StyleAxis3D.png" width=605 height=310&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a0d12d84-660f-424a-87f4-4eb79b8031a4" Status="New Topic" CreatedOn="2019-07-09T08:27:13.6478909Z" ModifiedOn="2019-09-24T13:47:13.2234838Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Showing Axis Labels on one side of the 3D charts " BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T13:47:13.2234838Z">&lt;P&gt;To enable showing of&amp;nbsp;Axis Labels on one side of the Axis Cube, simply set one of the following properties on the SciChart3DSurface:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~getXyAxisPlaneDrawLabelsMode.html"&gt;XyAxisPlaneDrawLabelsMode&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setZyAxisPlaneDrawLabelsMode.html"&gt;ZyAxisPlaneDrawLabelsMode&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setZxAxisPlaneDrawLabelsMode.html"&gt;ZxAxisPlaneDrawLabelsMode&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting Axis Labels Drawing Mode&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.setXyAxisPlaneDrawLabelsMode(AxisPlaneDrawLabelsMode.AxisPlaneDrawLabelsBoth);&lt;BR&gt;surface3d.setZyAxisPlaneDrawLabelsMode(AxisPlaneDrawLabelsMode.AxisPlaneDrawLabelsLocalX);&lt;BR&gt;surface3d.setZxAxisPlaneDrawLabelsMode(AxisPlaneDrawLabelsMode.AxisPlaneDrawLabelsHidden);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis3DLabelsOnFarSide-min.png"&gt;&lt;/P&gt;
&lt;H2&gt;Zy, Zx, Xy Planes&lt;/H2&gt;
&lt;P&gt;The Planes are defined as follows.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; The Zy Plane is perpedicular to the X Axis (Right by default)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; The Zx Plane is perpendicular to the Y Axis (up)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; The Xy Plane is perpendicular to the Z Axis (Left by default)&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ZyPlaneExplanation-min.png"&gt;&lt;/P&gt;
&lt;H2&gt;AxisPlaneDrawLabelsMode Enum&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisPlaneDrawLabelsMode.html"&gt;AxisPlaneDrawLabelsMode Enum&lt;/A&gt; has the following options:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;AxisPlaneDrawLabelsMode&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public enum AxisPlaneDrawLabelsMode {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisPlaneDrawLabelsBoth,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisPlaneDrawLabelsHidden,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisPlaneDrawLabelsLocalX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; AxisPlaneDrawLabelsLocalY&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The default is&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisPlaneDrawLabelsMode~AxisPlaneDrawLabelsBoth.html"&gt;AxisPlaneDrawLabelsBoth&lt;/A&gt;: axis labels are drawn on both sides of the axis cube.&lt;/P&gt;
&lt;P&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisPlaneDrawLabelsMode~AxisPlaneDrawLabelsHidden.html"&gt;AxisPlaneDrawLabelsHidden&lt;/A&gt; hides the axis labels for this plane, for example, when applied to the XyAxisPlane, the labels drawn by this plane will be hidden.&lt;/P&gt;
&lt;P&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisPlaneDrawLabelsMode~AxisPlaneDrawLabelsLocalX.html"&gt;AxisPlaneDrawLabelsLocalX&lt;/A&gt; draws the labels on one side (the local X) of the plane.&lt;/P&gt;
&lt;P&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.axes.AxisPlaneDrawLabelsMode~AxisPlaneDrawLabelsLocalY.html"&gt;AxisPlaneDrawLabelsLocalY&lt;/A&gt; draws the labels on the other side (the local Y) of the plane.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LocalXyPlane-min.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="52a1498f-8169-4c7e-abfb-bae331217e72" AutoIndex="false">
            <Caption m="2019-07-10T07:58:05.7072369Z">3D Chart Types</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="5bcc9eea-4d0c-416d-af36-e08e3c6eeed4" AutoIndex="false">
                <Caption m="2019-07-11T12:17:16.6871166Z">The SurfaceMesh 3D Chart Type</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="18cded29-373d-4748-a964-9bcd4e931443" Status="New Topic" CreatedOn="2019-07-11T12:18:26.621479Z" ModifiedOn="2019-09-23T13:52:43.4591632Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Applying Palettes to Surface Meshes" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T13:52:43.4581641Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; accepts color palettes via the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~getMeshColorPalette.html"&gt;MeshColorPalette&lt;/A&gt; property.&amp;nbsp; Several options are available for paletting the mesh, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt; - applies a solid color to all cells in the mesh 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.GradientColorPalette.html"&gt;GradientColorPalette&lt;/A&gt; - maps a linear gradient to the mesh, where heights map to successive colors. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.BrushColorPalette.html"&gt;BrushColorPalette&lt;/A&gt; - maps a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.BrushStyle.html"&gt;BrushStyle&lt;/A&gt; to the mesh. For example, this can be used to map an image via the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.TextureBrushStyle.html"&gt;TextureBrushStyle&lt;/A&gt; type. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;We will talk about each of these options below.&lt;/P&gt;
&lt;H2&gt;SolidColorBrushPalette&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt; is simple enough.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SolidColorBrushPalette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surfaceMeshRenderableSeries3D.setMeshColorPalette(new SolidColorBrushPalette(ColorUtil.DarkGreen));&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SolidColorBrushPalette.png" width=605 height=310&gt;&lt;/P&gt;
&lt;H2&gt;GradientColorPalette&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.GradientColorPalette.html"&gt;GradientColorPalette&lt;/A&gt; can be used to map a Gradient Brush set of colors to heights in the Surface Mesh. The mapping is similar to that performed by the Heatmap Series in 2D Charts.&lt;/P&gt;
&lt;P&gt;Given the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GradientBrushPalette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;surfaceMeshRenderableSeries3D.setMeshColorPalette(new GradientColorPalette(colors, stops));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Colors are mapped onto Y-values as follows:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Y values corresponding to&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~getMinimum.html"&gt;Minimum&lt;/A&gt; are drawn with the gradient stop color at offset 0. 
&lt;LI&gt;Y values corresponding to&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~getMaximum.html"&gt;Maximum&lt;/A&gt; are drawn with the gradient stop color at offset 1. 
&lt;LI&gt;All other values are linearly interpolated (including Y-values outside of&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~getMinimum.html"&gt;Minimum&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~getMaximum.html"&gt;Maximum&lt;/A&gt;). &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/GradientColorPalette.png"&gt;&lt;/P&gt;
&lt;H3&gt;GradientColorPalette.IsStepped&lt;/H3&gt;
&lt;P&gt;When the property IsStepped is set to true, the color map is not interpolated, and graidnet stops are interpretted as hard steppings.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Stepped GradientColorPalette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;surfaceMeshRenderableSeries3D.setMeshColorPalette(new GradientColorPalette(colors, stops, true));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The Surface Mesh now looks like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SteppedGradientColorPalette.png"&gt;&lt;/P&gt;
&lt;H2&gt;BrushColorPalette&lt;/H2&gt;
&lt;P&gt;A texture can be applied to the SurfaceMesh and mapped over it in the X-Z plane by using a combination of&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.BrushColorPalette.html"&gt;BrushColorPalette&lt;/A&gt;, &lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshPaletteMode~Textured.html"&gt;MeshPaletteMode.Textured&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setMeshColorPaletteSize.html"&gt;MeshColorPaletteSize&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;BrushColorPalette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.smiley);&lt;BR&gt;final TextureBrushStyle brushStyle = new TextureBrushStyle(bitmap);&lt;/P&gt;
&lt;P&gt;surfaceMeshRenderableSeries.setMeshPaletteMode(MeshPaletteMode.Textured);&lt;BR&gt;surfaceMeshRenderableSeries.setMeshColorPalette(new BrushColorPalette(brushStyle));&lt;BR&gt;surfaceMeshRenderableSeries.setMeshColorPaletteSize(new Size(bitmap.getWidth(), bitmap.getHeight()));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/TexturedMeshPaletteMode.png"&gt;&lt;/P&gt;
&lt;H2&gt;Creating a Custom Palette&lt;/H2&gt;
&lt;P&gt;You can create a custom Color Palette by inheriting&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshColorPalette.html"&gt;MeshColorPalette&lt;/A&gt; and overriding&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshColorPalette~getTexture.html"&gt;getTexture&lt;/A&gt;. For example, see below.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom Palette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomPalette extends MeshColorPalette {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Texture2D getTexture(int width, int height) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // TODO fill Bitmap&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return Texture2D.fromBitmap(bitmap);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } finally {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; bitmap.recycle();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The palette is applied to a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; as before.&lt;/P&gt;
&lt;H2&gt;Effect of SurfaceMeshRenderableSeries3D.MeshPaletteMode&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setMeshPaletteMode.html"&gt;MeshPaletteMode&lt;/A&gt; property changes how the palette is applied to the Mesh.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshPaletteMode~Textured.html"&gt;MeshPaletteMode.Textured&lt;/A&gt; means the Palette is applied to the mesh in the X-Z plane (the plane of the floor of the 3D Chart). Imagine the palette is stretched over the mesh itself. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshPaletteMode~HeightMapInterpolated.html"&gt;MeshPaletteMode.HeightMapInterpolated&lt;/A&gt; means the palette is applied in the Y direction (vertically)&amp;nbsp; 
&lt;LI&gt;Other variations such as &lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshPaletteMode~TexturedSolidCells.html"&gt;MeshPaletteMode.TexturedSolidCells&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.MeshPaletteMode~HeightMapSolidCells.html"&gt;HeightMapSolidCells&lt;/A&gt; perform the above two functions but without linear interpolation between nearby cells. use this to have each cell a constant colour. &lt;/LI&gt;&lt;/UL&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="25011f80-a875-4a44-afee-b40e37c64bdf" Status="New Topic" CreatedOn="2019-07-11T12:18:42.7014709Z" ModifiedOn="2019-07-12T10:50:14.2687069Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Configuring Wireframe on Surface Meshes " BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-07-12T10:50:14.2687069Z">&lt;P&gt;The 3D Surface Mesh Wireframe can be added optionally and configured via the following properties.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setDrawMeshAs.html"&gt;SurfaceMeshRenderableSeries3D.DrawMeshAs&lt;/A&gt;:
&lt;UL&gt;
&lt;LI&gt;Options&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWireframe.html"&gt;SolidWireFrame&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~Wireframe.html"&gt;WireFrame&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWireframeWithContours.html"&gt;SolidWireframeWithContours&lt;/A&gt; will draw wireframes
&lt;LI&gt;Options&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidMesh.html"&gt;SolidMesh&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~Contours.html"&gt;Contours&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWithContours.html"&gt;SolidWithContours&lt;/A&gt; will omit wireframes.&lt;/LI&gt;&lt;/UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setStrokeThickness.html"&gt;SurfaceMeshRenderableSeries3D.StrokeThickness&lt;/A&gt;: Defines the thickness of the wireframe line
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setStroke.html"&gt;SurfaceMeshRenderableSeries3D.Stroke&lt;/A&gt;: Defines the stroke color of the wireframe, which may optionally include opacity.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformMeshWithWifreframe.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3f9f08b1-fe1c-4ab5-a312-8c2b8e5a00d3" Status="New Topic" CreatedOn="2019-07-11T12:19:18.9063505Z" ModifiedOn="2019-07-12T10:53:13.8329902Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Configuring Contours on Surface Meshes" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-07-12T10:53:13.8329902Z">&lt;P&gt;The 3D Surface Mesh Contours can be added optionally and configured via the following properties.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setDrawMeshAs.html"&gt;SurfaceMeshRenderableSeries3D.DrawMeshAs&lt;/A&gt;:
&lt;UL&gt;
&lt;LI&gt;Options&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~Contours.html"&gt;Contours&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWithContours.html"&gt;SolidWithContours&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWireframeWithContours.html"&gt;SolidWireframeWithContours&lt;/A&gt; will draw contours
&lt;LI&gt;Options&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidWireframe.html"&gt;SolidWireframe&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~Wireframe.html"&gt;Wireframe&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.DrawMeshAs~SolidMesh.html"&gt;SolidMesh&lt;/A&gt;, will omit contours&lt;/LI&gt;&lt;/UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setContourStrokeThickness.html"&gt;SurfaceMeshRenderableSeries3D.ContourStrokeThickness&lt;/A&gt;: Defines the thickness of the contour line
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setContourStroke.html"&gt;SurfaceMeshRenderableSeries3D.ContourStroke&lt;/A&gt;: Defines the stroke color of the contours, which may optionally include opacity.
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setContourOffset.html"&gt;SurfaceMeshRenderableSeries3D.ContourOffset&lt;/A&gt;: Defines the offset of contours from Y-values, defaults to 0
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setContourInterval.html"&gt;SurfaceMeshRenderableSeries3D.ContourInterval&lt;/A&gt;: Defines the Y-value intervals between contours&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformMeshWithCountours.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="d4142937-b850-4b7c-81bf-52358f803349" Status="New Topic" CreatedOn="2019-07-11T12:19:38.1359554Z" ModifiedOn="2019-08-02T11:36:48.932406Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Overriding Specific Cell Colors" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-02T11:36:48.932406Z">&lt;P&gt;In addition to custom palettes, heightmaps, textures, you can override a specific cell or cells in the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; by using the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.BaseRenderableSeries3D~setMetadataProvider.html"&gt;MetadataProvider3D&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;You can remove specific cells or mark them as NULL by overriding the cell color to be&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.metadataProviders.MetadataProvider3DBase~TRANSPARENT.html"&gt;TRANSPARENT&lt;/A&gt; 
&lt;LI&gt;You can mark regions of interest, say certain cells in a value range, or with index must be colored differently. 
&lt;LI&gt;With higher resolution meshes, you can change the shape of the mesh to circular (approx) by removing cells outside of a region. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;ISurfaceMeshPaletteProvider Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class SurfaceMeshMetadataProvider3D extends MetadataProvider3DBase&amp;lt;SurfaceMeshRenderableSeries3D&amp;gt; implements ISurfaceMeshMetadataProvider3D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SurfaceMeshMetadataProvider3D() { super(SurfaceMeshRenderableSeries3D.class); }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void updateMeshColors(IntegerValues cellColors) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SurfaceMeshRenderPassData3D currentRenderPassData = (SurfaceMeshRenderPassData3D) renderableSeries.getCurrentRenderPassData();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final DataManager dataManager = DataManager.getInstance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int countX = currentRenderPassData.countX - 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int countZ = currentRenderPassData.countZ - 1;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cellColors.setSize(currentRenderPassData.getPointsCount());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int[] items = cellColors.getItemsArray();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int x = 0; x &amp;lt; countX; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; countZ; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int index = x * countZ + z;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int color;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((x &amp;gt;= 20 &amp;amp;&amp;amp; x &amp;lt;= 26 &amp;amp;&amp;amp; z &amp;gt; 0 &amp;amp;&amp;amp; z &amp;lt; 47) || (z &amp;gt;= 20 &amp;amp;&amp;amp; z &amp;lt;= 26 &amp;amp;&amp;amp; x &amp;gt; 0 &amp;amp;&amp;amp; x &amp;lt; 47)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // need to use special transparent color definition for MetadataProvider3D for it to work&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; color = TRANSPARENT;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; color = dataManager.getRandomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; items[index] = color;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/MeshMetadataProvider.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0b5698bb-7ae4-45bd-94fe-6b76bf553ecd" Status="New Topic" CreatedOn="2019-07-11T12:19:57.929309Z" ModifiedOn="2019-08-02T11:37:39.1664335Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Additional Surface Mesh properties" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-02T11:37:39.1664335Z">&lt;P&gt;Additional properties which affect the rendering of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setHighlight.html"&gt;SurfaceMeshRenderableSeries3D.Highlight&lt;/A&gt;: Changes the lighting algorithm to make cells appear lighter 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.ContourMeshRenderableSeries3DBase~setMeshPaletteMode.html"&gt;SurfaceMeshRenderableSeries3D.MeshPaletteMode&lt;/A&gt;: Changes how the heightmap is applied. HeightMapInterpolated allows for smooth colors, while HeightMapSolidCells means each cell has one continuous color.&amp;nbsp; 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~setHeightScaleFactor.html"&gt;SurfaceMeshRenderableSeries3D.HeightScaleFactor&lt;/A&gt;: Applies a constant scaling factor to the heights, e.g. setting to 0 will make the surface mesh flat 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D~setYOffset.html"&gt;SurfaceMeshRenderableSeries3D.YOffset&lt;/A&gt;: Applies a constant offset heights, e.g. setting to 1 will move the SurfaceMesh 1-Datavalue in the Y-direction. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The effect of these properties are demonstrated in the images below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Higlight=0&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final int stroke = 0x77228B22;&lt;/P&gt;
&lt;P&gt;final SurfaceMeshRenderableSeries3D rs = sciChart3DBuilder.newSurfaceMeshSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawSkirt(false) &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHighlight(0f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformMeshWithoutHighlighting.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Highlight=1&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final int stroke = 0x77228B22;&lt;/P&gt;
&lt;P&gt;final SurfaceMeshRenderableSeries3D rs = sciChart3DBuilder.newSurfaceMeshSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawSkirt(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHighlight(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformMeshWithHighlighting.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Highlight=0.1, MeshPaletteMode=HeightMapSolidCells&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final int stroke = 0x77228B22;&lt;/P&gt;
&lt;P&gt;final SurfaceMeshRenderableSeries3D rs = sciChart3DBuilder.newSurfaceMeshSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawSkirt(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withHighlight(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshPaletteMode(MeshPaletteMode.HeightMapSolidCells)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformMeshWithSolidCellColors.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;YOffset=0, HeightScaleFactor=0&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final int stroke = 0x77228B22;&lt;/P&gt;
&lt;P&gt;final SurfaceMeshRenderableSeries3D rs = sciChart3DBuilder.newSurfaceMeshSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawSkirt(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYOffset(0f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withHeightScaleFactor(0f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/FlatUniformMesh.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e5fc78ef-475f-45ae-b38c-d42ba9e6ed50" Status="New Topic" CreatedOn="2019-07-22T12:12:50.6890873Z" ModifiedOn="2019-08-02T11:42:28.979725Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The SurfaceMesh 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-08-02T11:42:28.979725Z">&lt;P&gt;The surface mesh renders a two-dimensional array as a heightmap. The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.surfaceMesh.SurfaceMeshRenderableSeries3D.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; type provides a number of configurable chart types in SciChart 3D, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Dynamic, updating Surfaces (terrains or height maps) 
&lt;LI&gt;Texturing of surfaces or terrains or height maps 
&lt;LI&gt;Non-uniform or uniform grid spacing 
&lt;LI&gt;Contour mapping or wireframe on terrain or height maps &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/UniformSurfaceMesh.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=NewStyle2&gt;Declaring a Surface Mesh with Uniform Data&lt;/P&gt;
&lt;P&gt;To declare a Surface Mesh with uniform data, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Uniform SurfaceMesh 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0, .3).withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;final int xSize = 25;&lt;BR&gt;final int zSize = 25;&lt;/P&gt;
&lt;P&gt;final UniformGridDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new UniformGridDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, xSize, zSize);&lt;/P&gt;
&lt;P&gt;for (int x = 0; x &amp;lt; xSize; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; zSize; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double xVal = 25.0 * x / xSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double zVal = 25.0 * z / zSize;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = Math.sin(xVal * .2) / ((zVal+1) * 2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(x, z, y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final int[] colors = new int[]{0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final int stroke = 0x77228B22;&lt;/P&gt;
&lt;P&gt;final SurfaceMeshRenderableSeries3D rs = sciChart3DBuilder.newSurfaceMeshSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(stroke)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawSkirt(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Data is stored in the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D.html"&gt;UniformGridDataSeries3D&lt;/A&gt; Type. This represents a 2-dimensional grid, typically of type Double (but can be defined with generics).&lt;/P&gt;
&lt;P&gt;Some important points to note:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The double values stored in the &lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;UniformGridDataSeries3D&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;correspond to the heights on the chart (the Y-Axis). They are transformed into chart World Coordinates via the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getYAxis.html"&gt;YAxis&lt;/A&gt;. 
&lt;LI&gt;The Z and X Data-Value is defined by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStartX.html"&gt;StartX&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStepX.html"&gt;StepX&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStartZ.html"&gt;StartZ&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStepZ.html"&gt;StepZ&lt;/A&gt; properties on &lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;UniformGridDataSeries3D&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;. These are also transformed into World Coordinates via the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getZAxis.html"&gt;ZAxis&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getXAxis.html"&gt;XAxis&lt;/A&gt; respectively. 
&lt;LI&gt;The Colours on the SurfaceMesh are defined by the&amp;nbsp;&lt;A href="18cded29-373d-4748-a964-9bcd4e931443"&gt;MeshColorPalette&lt;/A&gt;. More on this in the following sections.&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="669fa749-7b16-4e0a-9eb7-e278de311e44" AutoIndex="false">
                <Caption m="2019-07-15T07:27:04.5812211Z">The Waterfall 3D Chart Type</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="026b57fb-daf8-467e-902c-eafbb0e2c0fb" Status="New Topic" CreatedOn="2019-07-15T07:27:26.6328788Z" ModifiedOn="2019-09-23T13:40:04.9347731Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Applying Palettes to Waterfall" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T13:40:04.9347731Z">&lt;P&gt;The Waterfall chart obeys Palette rules similar to that of the&amp;nbsp;&lt;A href="18cded29-373d-4748-a964-9bcd4e931443"&gt;3D SurfaceMesh Chart&lt;/A&gt;. Please have a look at this article&amp;nbsp;&lt;A href="18cded29-373d-4748-a964-9bcd4e931443"&gt;for SurfaceMesh palettes&lt;/A&gt; to see the types of palette available and how to declare them. Palettes which may be applied to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D.html"&gt;3D Waterfall chart&lt;/A&gt; include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt; - applies a solid color the waterfall slice or stroke 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.GradientColorPalette.html"&gt;GradientColorPalette&lt;/A&gt; - maps a LinearGradientBrush to the slice or stroke, where heights map to successive colors. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Applying Palettes to the Waterfall Slice Fill&lt;/H2&gt;
&lt;P&gt;The properties which allow paletteing of the Waterfall Slices are &lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~setZColorMapping.html"&gt;WaterfallRenderableSeries3D.ZColorMapping&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~setYColorMapping.html"&gt;YColorMapping&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;These properties are mutually exclusive, you should set one or the other to apply palettes in the Z direction or Y direction.&lt;/P&gt;
&lt;P&gt;As an example of how to apply a GradientColorPalette to the Y-direction (up), see below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Waterfall 3D with YColorMapping&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] fillColors = new int[] {Red, Orange, Yellow, GreenYellow, DarkGreen};&lt;BR&gt;final float[] fillStops = new float[] {0, .25f, .5f, .75f, 1};&lt;/P&gt;
&lt;P&gt;final GradientColorPalette colorPalette = new GradientColorPalette(fillColors , fillStops );&lt;/P&gt;
&lt;P&gt;final WaterfallRenderableSeries3D rs = sciChart3DBuilder.newWaterfallSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYStrokeColorMapping(new SolidColorBrushPalette(Transparent))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYColorMapping(colorPalette)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will result in the following output:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/WaterfallYFill.png"&gt;&lt;/P&gt;
&lt;P&gt;If the same GradientColorPalette is applied in the Z-direction, then you get this effect.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/WaterfallZFill.png"&gt;&lt;/P&gt;
&lt;P&gt;Also, the Waterfall3D Chart will accept&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt;, which allows you to set a constant color for each slice.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WaterfallSolidFill.png"&gt;&lt;/P&gt;
&lt;H2&gt;Applying Palettes to the Waterfall Slice Stroke (Outline)&lt;/H2&gt;
&lt;P&gt;You can&amp;nbsp;apply a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.BrushColorPalette.html"&gt;BrushColorPalette&lt;/A&gt; to the Stroke outline of Waterfall 3D Charts, which can be either a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.GradientColorPalette.html"&gt;GradientColorPalette&lt;/A&gt; or a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The Brush may be set in the Y direction (Up) or the Z direction (horizontally) as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Waterfall 3D with ZStrokeColorMapping&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private final int[] strokeColors = new int[] {Crimson, DarkOrange, LimeGreen, LimeGreen};&lt;BR&gt;private final float[] strokeStops = new float[]{0, .33f, .67f, 1};&lt;/P&gt;
&lt;P&gt;private final GradientColorPalette gradientStrokeColorPalette = new GradientColorPalette(strokeColors, strokeStops);&lt;/P&gt;
&lt;P&gt;final WaterfallRenderableSeries3D rs = sciChart3DBuilder.newWaterfallSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(Blue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZStrokeColorMapping(gradientStrokeColorPalette )&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Combinations of Solid, Gradient color Fill and Stroke can be applied to get the desired effect on a waterfall chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WaterfallYStroke.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WaterfallZStroke.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WaterfallSolidStroke.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="75cb72e5-1e6c-42fd-949b-f453e5d39181" Status="New Topic" CreatedOn="2019-07-15T08:07:43.2169343Z" ModifiedOn="2019-07-15T08:47:59.5434008Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Volumetric Waterfall 3D Chart and Point Markers" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-07-15T08:47:59.5434008Z">&lt;P&gt;A Waterfall Chart can be made volumetric by setting the property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~setSliceThickness.html"&gt;WaterfallRenderableSeries3D.SliceThickness&lt;/A&gt; (default value = 0).&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Waterfall 3D Slice Thickness&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;waterfallRenderableSeries3D.setSliceThickness(10f);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/VolumetricWaterfall3D.png"&gt;&lt;/P&gt;
&lt;P&gt;Point Markers may be added to the data-points by setting the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.BaseRenderableSeries3D~setPointMarker.html"&gt;WaterfallRenderableSeries3D.PointMarker&lt;/A&gt; property.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Waterfall 3D Point Markers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;waterfallRenderableSeries3D.setPointMarker(sciChart3DBuilder.newSpherePointMarker3D().withFill(Color.BLUE).withSize(5f).build());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WaterfallWithPointMarkers.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="bfe08e9c-3594-4f09-a30e-86d8dbb4008c" Status="New Topic" CreatedOn="2019-07-22T12:32:57.4864864Z" ModifiedOn="2019-09-23T13:40:57.220804Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Waterfall 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T13:40:57.220804Z">&lt;P&gt;The Waterfall 3D Chart renders a two-dimensional array as a series of slices. The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D.html"&gt;WaterfallRenderableSeries3D&lt;/A&gt; type provides a number of configurable chart types in SciChart 3D, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Dynamic updating slices for visualizing spectra (Acoustic or radio frequency domain data) 
&lt;LI&gt;Volumetric slices 
&lt;LI&gt;Optional PointMarkers at data-points. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/Waterfall3D.png"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring a Waterfall 3D Chart&lt;/H2&gt;
&lt;P&gt;To declare a Waterfall 3D Chart with SciChart, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Waterfall 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withAutoRangeMode(AutoRange.Always).build();&lt;/P&gt;
&lt;P&gt;final WaterfallDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new WaterfallDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, POINTS_PER_SLICE, SLICE_COUNT);&lt;BR&gt;ds.setStartX(10d);&lt;BR&gt;ds.setStepX(1d);&lt;/P&gt;
&lt;P&gt;ds.setStartZ(1d);&lt;/P&gt;
&lt;P&gt;for (int sliceIndex = 0; sliceIndex &amp;lt; SLICE_COUNT; sliceIndex++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int pointIndex = 0; pointIndex &amp;lt; POINTS_PER_SLICE; pointIndex++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(pointIndex, sliceIndex, yValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final int[] fillColors = new int[] {Red, Orange, Yellow, GreenYellow, DarkGreen};&lt;BR&gt;final float[] fillStops = new float[] {0, .25f, .5f, .75f, 1};&lt;/P&gt;
&lt;P&gt;final GradientColorPalette gradientFillColorPalette = new GradientColorPalette(fillColors, fillStops);&lt;/P&gt;
&lt;P&gt;final WaterfallRenderableSeries3D rs = sciChart3DBuilder.newWaterfallSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(Transparent)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSliceThickness(0f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withYColorMapping(gradientFillColorPalette)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Data is stored in the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.waterfall.WaterfallDataSeries3D.html"&gt;WaterfallDataSeries3D&lt;/A&gt; Type. This represents a 2-dimensional&amp;nbsp;grid, typically of type Double (but can be defined with generics).&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Some important points to note:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The double values stored in the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.waterfall.WaterfallDataSeries3D.html"&gt;WaterfallDataSeries3D&lt;/A&gt;correspond to the heights on the chart (the Y-Axis). They are transformed into chart World Coordinates via the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getYAxis.html"&gt;YAxis&lt;/A&gt;. 
&lt;LI&gt;The Z and X Data-Value is defined by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStartX.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;StartX&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStepX.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;StepX&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStartZ.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;StartZ&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D~getStepZ.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;StepZ&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; properties on&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.waterfall.WaterfallDataSeries3D.html"&gt;WaterfallDataSeries3D&lt;/A&gt;. . These are also transformed into World Coordinates via the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getZAxis.html"&gt;ZAxis&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getXAxis.html"&gt;XAxis&lt;/A&gt; respectively. 
&lt;LI&gt;The Color of each slice on the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D.html"&gt;WaterfallRenderableSeries3D&lt;/A&gt;are defined by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~getZColorMapping.html"&gt;ZColorMapping&lt;/A&gt; property, which accepts a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.GradientColorPalette.html"&gt;GradientColorPalette&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.data.SolidColorBrushPalette.html"&gt;SolidColorBrushPalette&lt;/A&gt;. You can also apply colors in the Y direction with the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~getYColorMapping.html"&gt;YColorMapping&lt;/A&gt; property. 
&lt;LI&gt;The Color of each outline or stroke on the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D.html"&gt;WaterfallRenderableSeries3D&lt;/A&gt;&amp;nbsp;are defined by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~getZStrokeColorMapping.html"&gt;ZStrokeColorMapping&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.waterfall.WaterfallRenderableSeries3D~getYStrokeColorMapping.html"&gt;YStrokeColorMapping&lt;/A&gt; properties.&lt;BR&gt;&lt;/LI&gt;&lt;/UL&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="cc7db19b-37e2-4ddc-9234-9ee7f1955b2b" AutoIndex="false">
                <Caption m="2019-07-18T11:15:42.9512374Z">The Free Surface 3D Chart TYpe</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="25b8cba1-1983-4c9b-a2dc-ab0ab25920f6" Status="New Topic" CreatedOn="2019-07-18T11:15:46.1375869Z" ModifiedOn="2019-09-23T14:11:07.6853549Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Configuring the Free Surface chart" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:11:07.6853549Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D.html"&gt;FreeSurfaceRenderableSeries3D&lt;/A&gt; type provides a number of properties that allow users to configure the chart up to their needs.&lt;/P&gt;
&lt;H2&gt;Shared Configuration with Surface Meshes&lt;/H2&gt;
&lt;P&gt;Most of the configuration options follow the same approach as it is in The SurfaceMesh 3D Chart Type so all of the following articles are also applicable to Free Surface Meshes:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="18cded29-373d-4748-a964-9bcd4e931443"&gt;Applying Palettes to Surface Meshes&lt;/A&gt; 
&lt;LI&gt;&lt;A href="25011f80-a875-4a44-afee-b40e37c64bdf"&gt;Configuring Wireframe on the Surface Meshes&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3f9f08b1-fe1c-4ab5-a312-8c2b8e5a00d3"&gt;Configuring Contours on Surface Meshes&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d4142937-b850-4b7c-81bf-52358f803349"&gt;Overriding Specific Cell Colors&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Palette Modes for Free Surface Meshes&lt;/H2&gt;
&lt;P&gt;Despite the similarity of configuration to other 3D charts, Free Surface 3D Charts have some unique options. One of them is the Palette Mode, determining which color is picked from the Palette based on its four components:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The Axial Palette Component 
&lt;LI&gt;The Radial Palette Component 
&lt;LI&gt;The Azimuthal Palette Component 
&lt;LI&gt;The Polar Palette Component &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Each of components can be used separately or blended together, based on values of corresponding Factor properties. Below is the formula that determines the color of the Palette:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/FreeSurfacePaletteFormula.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Where P is the coordinate that determines color being picked from the Palette by its value in the ange [0..1];&amp;nbsp; Wax is axial weight 3D vector and ( Fax) is axial factor 3D vector; Wr is radial weight and Fr is radial factor; Waz is azimuthal weight and Faz is azimuthal factor; Wp is polar weight and Fp is polar factor.&lt;/P&gt;
&lt;P&gt;We will talk about each of these options below:&lt;/P&gt;
&lt;H3&gt;The Axial Palette Component&lt;/H3&gt;
&lt;P&gt;In this mode, palette color is determined by the position of a particular point on the surface that linearly interpolates between the user-specified minimum and maximum values.&lt;/P&gt;
&lt;P&gt;The weightof the Axial Palette Component is calculated by following formula:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AxialPaletteFormula.png"&gt;&lt;/P&gt;
&lt;P&gt;Where:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Ps is the position of a particular point on the surface 
&lt;LI&gt;Pmin is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteMinimum.html"&gt;PaletteMinimum&lt;/A&gt; 
&lt;LI&gt;Pmax is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteMaximum.html"&gt;PaletteMaximum&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The Factor of the Axial Palette Component ( see Fax on the Formula 1) is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteAxialFactor.html"&gt;PaletteAxialFactor&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Example of The Axial Palette Component&lt;/H3&gt;
&lt;P&gt;In the following example the parameters Fax, Pmin and Pmax are set as follows:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AxialPaletteExample.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Axial Palette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;rs.setPaletteMinMaxMode(FreeSurfacePaletteMinMaxMode.Absolute);&lt;BR&gt;rs.setPaletteMinimum(new Vector3(0f, -4f, 0f));&lt;BR&gt;rs.setPaletteMaximum(new Vector3(0f, 4f, 0f));&lt;BR&gt;rs.setPaletteRadialFactor(0f);&lt;BR&gt;rs.setPaletteAxialFactor(new Vector3(0f, 1f, 0f));&lt;BR&gt;rs.setPaletteAzimuthalFactor(0f);&lt;BR&gt;rs.setPalettePolarFactor(0f);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/EllipsoidWithAxialPalette.png"&gt;&lt;/P&gt;
&lt;H3&gt;The Radial Palette Mode&lt;/H3&gt;
&lt;P&gt;In this mode palette color is determined by the distance between the chart origin and position of a particular point on the surface, linearly interpolated between the user-specified minimum and maximum values. The chart origin differs in its sense in regards to the type Free Surface Chart. For the Ellipsoid chart, the origin is defined by a point in the 3D space, whereas for the Cylindroid and Polar 3D is defined by line and plane respectively.&lt;/P&gt;
&lt;P&gt;The weight of the Radial Palette Component is calculated by following formula:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/RadialPaletteFormula.png"&gt;&lt;/P&gt;
&lt;P&gt;Where:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Ds is the distance between the position of a particular point on the surface and the origin 
&lt;LI&gt;Dmin is the distance between Pmin and the origin. Pmin is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteMinimum.html"&gt;PaletteMinimum&lt;/A&gt; 
&lt;LI&gt;Dmax is the distance between Pmax and the origin. Pmax is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteMaximum.html"&gt;PaletteMaximum&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Factor of the Radial Palette Component ( see Fr on the Formula 1 ) is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteRadialFactor.html"&gt;PaletteRadialFactor&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Example of The Radial Palette Component.&lt;/H3&gt;
&lt;P&gt;In the following example the parameters Fax, Pmin and Pmax are set as follows:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/RadialPaletteExample.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Radial Palette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;rs.setPaletteMinMaxMode(FreeSurfacePaletteMinMaxMode.Relative);&lt;BR&gt;rs.setPaletteMinimum(new Vector3(0f, 6f, 0f));&lt;BR&gt;rs.setPaletteMaximum(new Vector3(0f, 7f, 0f));&lt;BR&gt;rs.setPaletteRadialFactor(1f);&lt;BR&gt;rs.setPaletteAxialFactor(new Vector3(0, 0, 0));&lt;BR&gt;rs.setPaletteAzimuthalFactor(0f);&lt;BR&gt;rs.setPalettePolarFactor(0f);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/EllipsoidWithRadialPalette.png"&gt;&lt;/P&gt;
&lt;H3&gt;The Azimuthal Palette Mode&lt;/H3&gt;
&lt;P&gt;In this mode palette color is determined by cos angle between the unit vector of the X-Axis and vector from the origin point to the particular point on the surface, projected onto the XZ plane.&lt;/P&gt;
&lt;P&gt;The weight of the Azimuthal Palette Component is calculated by following formula:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AzimuthPaletteFormula.png"&gt;&lt;/P&gt;
&lt;P&gt;Where:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;X is the unit vector of the X-Axis 
&lt;LI&gt;Pxz is a particular point on the surface, projected onto the XZ plane &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;The Factor of the Azimuthal Palette Component ( see Fax on the Formula 1 ) is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPaletteAzimuthalFactor.html"&gt;PaletteAzimuthalFactor&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Example of The Azimuthal Palette Component.&lt;/H3&gt;
&lt;P&gt;In the following example the parameters Faz is set as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Azimuthal Palette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;rs.setPaletteRadialFactor(0f);&lt;BR&gt;rs.setPaletteAxialFactor(new Vector3(0f, 0f, 0f));&lt;BR&gt;rs.setPaletteAzimuthalFactor(1f);&lt;BR&gt;rs.setPalettePolarFactor(0f);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AzimuthExample.png"&gt;&lt;/P&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/EllipsoidWithAzimuthalPalette.png"&gt;&lt;/P&gt;
&lt;H3&gt;The Polar Palette Mode&lt;/H3&gt;
&lt;P&gt;In this mode, palette color is determined by cos angle between the unit vector of the Y-Axis and vector from the origin point to the particular point on the surface.&lt;/P&gt;
&lt;P&gt;The weight of the Polar Palette Component is calculated by following formula:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/PolarFormula.png"&gt;&lt;/P&gt;
&lt;P&gt;Where:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Y is the unit vector of the Y-Axis. 
&lt;LI&gt;P is a particular point on the surface. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Factor of the Axial Palette Component ( see Fr on the Formula 1 ) is specified by property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.freeSurface.FreeSurfaceRenderableSeries3D~getPalettePolarFactor.html"&gt;PalettePolarFactor&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Example of The PolarPalette Component.&lt;/H3&gt;
&lt;P&gt;In the following example the parameters Fp is set as follows:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/PolarPaletteExample.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Polar Palette&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;rs.setPaletteRadialFactor(0f);&lt;BR&gt;rs.setPaletteAxialFactor(new Vector3(0f, 0f, 0f));&lt;BR&gt;rs.setPaletteAzimuthalFactor(0f);&lt;BR&gt;rs.setPalettePolarFactor(1f);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/EllipsoidWithPolarPalette.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="f832628c-8f98-4054-bb30-a7c3f1a91411" Status="New Topic" CreatedOn="2019-07-18T11:16:55.8119519Z" ModifiedOn="2019-07-22T07:25:45.1349065Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Cylindroid 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-07-22T07:25:45.1349065Z">&lt;P&gt;Cylindroid 3D Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D.html"&gt;CylindroidDataSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/CylindroidFreeSurface3D.png"&gt;&lt;/P&gt;
&lt;P&gt;The location of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D.html"&gt;CylindroidDataSeries3D&lt;/A&gt; is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetX.html"&gt;OffsetX&lt;/A&gt; – a location of the Cylindroid by the X-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetY.html"&gt;OffsetY&lt;/A&gt; – a location of the Cylindroid by the Y-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetZ.html"&gt;OffsetZ&lt;/A&gt; – a location of the Cylindroid by the Z-Axis &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The size of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D.html"&gt;CylindroidDataSeries3D&lt;/A&gt; is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D~setA.html"&gt;A&lt;/A&gt;&amp;nbsp;- a distance from the origin to the internal edge of the cylindroid 3D Surface 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D~setB.html"&gt;B&lt;/A&gt; – a distance from the origin to the internal edge of the cylindroid&amp;nbsp;3D Surface 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CylindroidDataSeries3D~setH.html"&gt;H&lt;/A&gt; – a height of the Cylindroid along the Z-Axis &lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Cylindroid 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;surface3d.getWorldDimensions().assign(200, 200, 200);&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;/P&gt;
&lt;P&gt;final int sizeU = 40, sizeV = 20;&lt;/P&gt;
&lt;P&gt;final CylindroidDataSeries3D&amp;lt;Double, Double&amp;gt; meshDataSeries = new CylindroidDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, sizeU, sizeV);&lt;BR&gt;meshDataSeries.setA(3d);&lt;BR&gt;meshDataSeries.setB(3d);&lt;BR&gt;meshDataSeries.setH(7d);&lt;/P&gt;
&lt;P&gt;final Random random = new Random();&lt;BR&gt;for (int u = 0; u &amp;lt; sizeU; u++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int v = 0; v &amp;lt; sizeV; v++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double weight = 1d - Math.abs(2d * v / sizeV - 1d);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double offset = random.nextDouble();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; meshDataSeries.setDisplacement(u, v, offset * weight);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;&lt;/UL&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="d1557183-e88e-4fe3-89e9-c363a4461bbc" Status="New Topic" CreatedOn="2019-07-18T11:17:08.7968513Z" ModifiedOn="2019-09-23T14:11:43.3682721Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Polar 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:11:43.3682721Z">&lt;P&gt;Polar 3D Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.PolarDataSeries3D.html"&gt;PolarDataSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/PolarFreeSurface3D.png"&gt;&lt;/P&gt;
&lt;P&gt;The location of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.PolarDataSeries3D.html"&gt;PolarDataSeries3D&lt;/A&gt; is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetX.html"&gt;OffsetX&lt;/A&gt; – a location of the Polar by the X-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetY.html"&gt;OffsetY&lt;/A&gt; – a location of the Polar by the Y-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetZ.html"&gt;OffsetZ&lt;/A&gt; – a location of the Polar by the Z-Axis &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The size of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.PolarDataSeries3D.html"&gt;PolarDataSeries3D&lt;/A&gt; is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.PolarDataSeries3D~setA.html"&gt;A&lt;/A&gt; – a distance from the origin to the internal edge of the polar 3D Surface 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.PolarDataSeries3D~setB.html"&gt;B&lt;/A&gt; – a distance from the origin to the external edge of the polar 3D Surface &lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Polar 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;surface3d.getWorldDimensions().assign(200, 50, 200);&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;/P&gt;
&lt;P&gt;final int sizeU = 30, sizeV = 10;&lt;/P&gt;
&lt;P&gt;final PolarDataSeries3D&amp;lt;Double, Double&amp;gt; meshDataSeries = new PolarDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, sizeU, sizeV, 0d, Math.PI * 1.75);&lt;BR&gt;meshDataSeries.setA(1d);&lt;BR&gt;meshDataSeries.setB(5d);&lt;/P&gt;
&lt;P&gt;final Random random = new Random();&lt;BR&gt;for (int u = 0; u &amp;lt; sizeU; u++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double weightU = 1d - Math.abs(2d * u / sizeU - 1d);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int v = 0; v &amp;lt; sizeV; v++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double weightV = 1d - Math.abs(2d * v / sizeV - 1d);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double offset = random.nextDouble();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; meshDataSeries.setDisplacement(u, v, offset * weightU * weightV);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="7b845aa5-353a-4f1a-9b64-b16ab21eda97" Status="New Topic" CreatedOn="2019-07-18T11:18:23.0501074Z" ModifiedOn="2019-07-22T07:25:45.1464406Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Ellipsoid 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-07-22T07:25:45.1464406Z">&lt;P&gt;Ellipsoid 3D Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D.html"&gt;EllipsoidDataSeries3D&lt;/A&gt;&amp;nbsp;type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/EllipsoidFreeSurface3D.png"&gt;&lt;/P&gt;
&lt;P&gt;The location of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D.html"&gt;EllipsoidDataSeries3D&lt;/A&gt; is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetX.html"&gt;OffsetX&lt;/A&gt; – a location of the Ellipsoid by the X-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetY.html"&gt;OffsetY&lt;/A&gt; – a location of the Ellipsoid by the Y-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetZ.html"&gt;OffsetZ&lt;/A&gt; – a location of the Ellipsoid by the Z-Axis &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The size of the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D.html"&gt;EllipsoidDataSeries3D&lt;/A&gt;&amp;nbsp;is defined by following properties:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D~setA.html"&gt;A&lt;/A&gt; – a radius of the Ellipsoid along the X-Axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D~setB.html"&gt;B&lt;/A&gt; – a radius of the Ellipsoid along the Y-Axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.EllipsoidDataSeries3D~setC.html"&gt;C&lt;/A&gt; – a radius of the Ellipsoid along the Z-Axis&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Ellipse 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;surface3d.getWorldDimensions().assign(200, 200, 200);&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(-7, 7).withAutoRangeMode(AutoRange.Never).build();&lt;/P&gt;
&lt;P&gt;final int sizeU = 40, sizeV = 20;&lt;/P&gt;
&lt;P&gt;final EllipsoidDataSeries3D&amp;lt;Double&amp;gt; meshDataSeries = new EllipsoidDataSeries3D&amp;lt;&amp;gt;(Double.class, sizeU, sizeV);&lt;BR&gt;meshDataSeries.setA(6d);&lt;BR&gt;meshDataSeries.setB(6d);&lt;BR&gt;meshDataSeries.setC(6d);&lt;/P&gt;
&lt;P&gt;final Random random = new Random();&lt;BR&gt;for (int u = 0; u &amp;lt; sizeU; u++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int v = 0; v &amp;lt; sizeV; v++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double weight = 1d - Math.abs(2d * v / sizeV - 1d);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double offset = random.nextDouble();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; meshDataSeries.setDisplacement(u, v, offset * weight);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(meshDataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="83697561-bce5-4197-bdf9-e6f17b100e65" Status="New Topic" CreatedOn="2019-07-18T11:18:38.2714988Z" ModifiedOn="2019-09-23T14:16:35.3961136Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Custom Free Surface 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:16:35.3961136Z">&lt;P&gt;Custom Free Surface 3D Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.CustomSurfaceDataSeries3D.html"&gt;CustomSurfaceDataSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/CustomFreeSurface3D.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The shape of its surface is defined by a set of user-defined functions, injected in the constructor during the instantiation. This approach allows the surface to obtain any possible shape.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomSurfaceDataSeries3D Constructor&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;public CustomSurfaceDataSeries3D(Class&amp;lt;TX&amp;gt; xType, Class&amp;lt;TY&amp;gt; yType, Class&amp;lt;TZ&amp;gt; zType, int uSize, int vSize,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;UVFunc radialDistanceFunc, UVFunc azimuthalAngleFunc, UVFunc polarAngleFunc,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ValueFunc&amp;lt;TX&amp;gt; xFunc, ValueFunc&amp;lt;TY&amp;gt; yFunc, ValueFunc&amp;lt;TZ&amp;gt; zFunc)&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;EM&gt;Radial Distance Function&lt;/EM&gt; – is a user-defined function that determines how distance from the origin to the particular point on the surface differs. 
&lt;LI&gt;&lt;EM&gt;Azimuthal Angle Function&lt;/EM&gt; – is a user-defined function that determines the azimuthal angle between the particular point and the unit vector of the X-Axis, projected on the ZX plane. 
&lt;LI&gt;&lt;EM&gt;Polar Angle Function&lt;/EM&gt; – is a user-defined function that determines inclination (or polar angle) between the particular point and the unit vector of the Y-Axis (Zenith). &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The U and V coordinates in intervals [uMin..uMax]&amp;nbsp; and [vMin..vMax] respectively are passed as the arguments to each of the three functions above.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;X Function - is a user-defined function that determines the position of the particular point on the surface by the X-Axis. 
&lt;LI&gt;Y Function - is a user-defined function that determines the position of the particular point on the surface by the Y-Axis. 
&lt;LI&gt;Z Function - is a user-defined function that determines the position of the particular point on the surface by the Z-Axis. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Radial Distance, Polar Angle, and Azimuthal Angle are passed as the arguments to each of the three functions above.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;More information about the radial distance, azimuthal and polar angle can be found here:&amp;nbsp;&lt;A href="https://en.wikipedia.org/wiki/Spherical_coordinate_system"&gt;Spherical coordinate system&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The location of the CustomFreeSurfaceSeries3D is defined by following properties:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetX.html"&gt;OffsetX&lt;/A&gt; – a location of the Custom Free Surface by the X-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetY.html"&gt;OffsetY&lt;/A&gt; – a location of the Custom Free Surface by the Y-Axis 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.freeSurface.FreeSurfaceDataSeries3D~setOffsetZ.html"&gt;OffsetZ&lt;/A&gt; – a location of the Custom Free Surface by the Z-Axis &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring the Custom Free Surface 3D Series that defines a free surface mesh&lt;/H2&gt;
&lt;P&gt;The following code will create the shape at the top of this article:&lt;/P&gt;
&lt;H3&gt;FreeSurfaceMesh Custom Mesh example&lt;/H3&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CustomFreeSurfaceMesh.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom Mesh&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc radialDistanceFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 5d + Math.sin(5 * (u + v));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc azimuthalAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return u;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc polarAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return v;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; xFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.sin(theta) * Math.cos(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&amp;nbsp;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; yFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.cos(theta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; zFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.sin(theta) * Math.sin(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new CustomSurfaceDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, 30, 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; radialDistanceFunc, azimuthalAngleFunc, polarAngleFunc,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xFunc, yFunc, zFunc,&amp;nbsp; 0d, Math.PI * 2, 0, Math.PI);&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getWorldDimensions().assign(200, 200, 200);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Declaring the Custom Free Surface 3D Series that defines the sphere with a radius of 10&lt;/H3&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/EllipseFreeSurfaceMesh.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Sphere Mesh&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc radialDistanceFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return&amp;nbsp;10d;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc azimuthalAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return u;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc polarAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return v;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; xFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.sin(theta) * Math.cos(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&amp;nbsp;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; yFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.cos(theta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; zFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return r * Math.sin(theta) * Math.sin(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new CustomSurfaceDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, 30, 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; radialDistanceFunc, azimuthalAngleFunc, polarAngleFunc,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xFunc, yFunc, zFunc,&amp;nbsp; 0d, Math.PI * 2, 0, Math.PI);&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getWorldDimensions().assign(200, 200, 200);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Declaring the Custom Free Surface 3D Series that defines the cylinder with a radius of 10 and a height of 40&lt;/H3&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CylindroidFreeSurfaceMesh.png"&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Cylinder Mesh&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withNegativeSideClipping(AxisSideClipping.None).withPositiveSideClipping(AxisSideClipping.None).build();&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc radialDistanceFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 0d;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc azimuthalAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return u;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.UVFunc polarAngleFunc = new CustomSurfaceDataSeries3D.UVFunc() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public double getValueFor(double u, double v) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return v;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; xFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 10 * Math.sin(Math.PI / 2) * Math.cos(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&amp;nbsp;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; yFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 20 * Math.cos(theta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt; zFunc = new CustomSurfaceDataSeries3D.ValueFunc&amp;lt;Double&amp;gt;() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public Double getValueFor(double r, double theta, double phi) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return 10 * Math.sin(Math.PI / 2) * Math.sin(phi);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;final CustomSurfaceDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new CustomSurfaceDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, 30, 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; radialDistanceFunc, azimuthalAngleFunc, polarAngleFunc,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xFunc, yFunc, zFunc,&amp;nbsp; 0d, Math.PI * 2, 0, Math.PI);&lt;/P&gt;
&lt;P&gt;final int[] colors = {0xFF1D2C6B, Blue, Cyan, GreenYellow, Yellow, Red, DarkRed};&lt;BR&gt;final float[] stops = {0, .1f, .3f, .5f, .7f, .9f, 1};&lt;/P&gt;
&lt;P&gt;final FreeSurfaceRenderableSeries3D rs = sciChart3DBuilder.newFreeSurfaceSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawMeshAs(DrawMeshAs.SolidWireframe)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourInterval(0.1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withContourStroke(0x77228B22)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withLightingFactor(0.8f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMeshColorPalette(new GradientColorPalette(colors, stops))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDrawBackSize(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getWorldDimensions().assign(200, 200, 200);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="7150e909-ab59-480b-b72c-542359d51d91" Status="New Topic" CreatedOn="2019-07-22T12:33:35.7241438Z" ModifiedOn="2019-09-23T14:17:25.8027236Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Free Surface 3D Chart Type" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:17:25.8027236Z">&lt;P&gt;The Free Surface 3D Chart types are a set of 3D Charts that represent the data by plotting the surface in a custom shape in 3D space.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/FreeSurface3D.png"&gt;&lt;/P&gt;
&lt;H2&gt;Common Properties&lt;/H2&gt;
&lt;P&gt;The Free Surface 3D Chart Types can be divided into two groups: constrained to its basic 3D primitive and unconstrained.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Constrained Chart Types include&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="7b845aa5-353a-4f1a-9b64-b16ab21eda97"&gt;The Spheroid 3D Chart&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f832628c-8f98-4054-bb30-a7c3f1a91411"&gt;The Cylindroid 3D Chart&lt;/A&gt; 
&lt;LI&gt;&lt;A href="d1557183-e88e-4fe3-89e9-c363a4461bbc"&gt;The Polar 3D Chart&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;STRONG&gt;Unconstrained chart type includes&lt;/STRONG&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="83697561-bce5-4197-bdf9-e6f17b100e65"&gt;The Custom Free Surface 3D Chart&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Each of constrained chart type represents its basic primitive: &lt;STRONG&gt;a sphere&lt;/STRONG&gt;, &lt;STRONG&gt;a cylinder&lt;/STRONG&gt;, or &lt;STRONG&gt;a disk&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;The surface of the free chart can be modified by the 2D Offset Array.&lt;/P&gt;
&lt;P&gt;Each particular type of constrained 3D chart specifies how the surface can be offset, e.g.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="7b845aa5-353a-4f1a-9b64-b16ab21eda97"&gt;The Ellipsoid Chart&lt;/A&gt; offsets its points on the surface in each of XYZ axes proportionality, based on the location of its origin. 
&lt;LI&gt;&lt;A href="f832628c-8f98-4054-bb30-a7c3f1a91411"&gt;The Cylindroid Chart&lt;/A&gt; offsets the surface in XZ axes, based on its Y-axis aligned origin line. 
&lt;LI&gt;&lt;A href="d1557183-e88e-4fe3-89e9-c363a4461bbc"&gt;The Polar 3D&lt;/A&gt; Chart offsets its surface in Y-axis, based on XZ axes origin plane. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;In contrast to constrained chart types,&amp;nbsp;&lt;A href="83697561-bce5-4197-bdf9-e6f17b100e65"&gt;The Custom Free Surface 3D Chart&lt;/A&gt; isn’t based on any geometric primitive. The shape of its surface is defined by a set of user-defined functions, injected in the constructor during the instantiation. This approach allows the surface to obtain any possible shape.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics>
              <Topic Id="4390d675-fd3c-45d8-8357-09b747d5071c" Status="New Topic" CreatedOn="2019-07-10T07:58:09.7294709Z" ModifiedOn="2019-09-23T14:18:23.0360154Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Scatter 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T14:18:23.0360154Z">&lt;P&gt;3D Scatter Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.scatter.ScatterRenderableSeries3D.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; type, which requires a PointMarker.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AndroidScatter3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.scatter.ScatterRenderableSeries3D.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; supports multiple pointmarkers, including:&lt;BR&gt;&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.SpherePointMarker3D.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CubePointMarker3D.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PyramidPointMarker3D.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CylinderPointMarker3D.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PixelPointMarker3D.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.QuadPointMarker3D.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.EllipsePointMarker3D.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.TrianglePointerMarker3D.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CustomPointMarker3D.html"&gt;CustomPointMarker3D&lt;/A&gt; - custom flat textured markers facing the camera at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a 3D Scatter Series&lt;/H2&gt;
&lt;P&gt;To declare a 3D Scatter Series with PointMarker use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;3D Scatter Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;final DataManager dataManager = DataManager.getInstance();&lt;BR&gt;final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; dataSeries = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;BR&gt;for (int i = 0; i &amp;lt; 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = dataManager.getGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = dataManager.getGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = dataManager.getGaussianRandomNumber(5, 1.5);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final EllipsePointMarker3D pointMarker3D = sciChart3DBuilder.newEllipsePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Coloring Individual Scatter Points&lt;/H2&gt;
&lt;P&gt;Scatter points may be colored or scaled individually using the PointMetada3D API. To do this, set a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.metadataProviders.PointMetadataProvider3D+PointMetadata3D.html"&gt;PointMetada3D&lt;/A&gt; instance at the data-point as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;MetadataProvider 3D&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final PointMetadataProvider3D metadataProvider = new PointMetadataProvider3D();&lt;/P&gt;
&lt;P&gt;final DataManager dataManager = DataManager.getInstance();&lt;/P&gt;
&lt;P&gt;final ObservableCollection&amp;lt;PointMetadataProvider3D.PointMetadata3D&amp;gt; medatata = metadataProvider.metadata;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;for (int i = 0; i &amp;lt; 250; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int color = dataManager.getRandomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float scale = dataManager.getRandomScale();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; medatata.add(new PointMetadataProvider3D.PointMetadata3D(color, scale));&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMetadataProvider(metadataProvider)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="07c999cf-2895-4b49-ae5f-77d283a51741" Status="New Topic" CreatedOn="2019-07-10T07:58:54.1113574Z" ModifiedOn="2019-09-23T14:18:52.8939162Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Bubble 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T14:18:52.8939162Z">&lt;P&gt;3D Bubble Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.scatter.ScatterRenderableSeries3D.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/AndroidBubble3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.scatter.ScatterRenderableSeries3D.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; supports multiple pointmarkers, including:&lt;BR&gt;&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.SpherePointMarker3D.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CubePointMarker3D.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PyramidPointMarker3D.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CylinderPointMarker3D.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PixelPointMarker3D.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.QuadPointMarker3D.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.EllipsePointMarker3D.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.TrianglePointerMarker3D.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CustomPointMarker3D.html"&gt;CustomPointMarker3D&lt;/A&gt; - custom flat textured markers facing the camera at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a 3D Scatter Series with custom Sizes &amp;amp; Colors&lt;/H2&gt;
&lt;P&gt;To declare a 3D Scatter Series with individual sizes &amp;amp; colors, use the following code.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Bubble 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final DataManager dataManager = DataManager.getInstance();&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; xyzDataSeries3D = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;BR&gt;final PointMetadataProvider3D metadataProvider = new PointMetadataProvider3D();&lt;/P&gt;
&lt;P&gt;final ObservableCollection&amp;lt;PointMetadataProvider3D.PointMetadata3D&amp;gt; medatata = metadataProvider.metadata;&lt;BR&gt;for (int i = 0; i &amp;lt; 250; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = dataManager.getGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = dataManager.getGaussianRandomNumber(5, 1.5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = dataManager.getGaussianRandomNumber(5, 1.5);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyzDataSeries3D.append(x, y, z);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int color = dataManager.getRandomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float scale = dataManager.getRandomScale();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; medatata.add(new PointMetadataProvider3D.PointMetadata3D(color, scale));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final SpherePointMarker3D pointMarker = sciChart3DBuilder.newSpherePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(xyzDataSeries3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMetadataProvider(metadataProvider)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="0d1597ec-182f-4bee-afa9-03cec47f403e" Status="New Topic" CreatedOn="2019-07-10T07:59:07.0301576Z" ModifiedOn="2019-09-23T13:46:10.2429865Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The PointLine 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:46:10.2429865Z">&lt;P&gt;3D Point-Line Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.pointLine.PointLineRenderableSeries3D.html"&gt;PointLineRenderableSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/AndroidPointLines3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.pointLine.PointLineRenderableSeries3D.html"&gt;PointLineRenderableSeries3D&lt;/A&gt;&amp;nbsp;supports multiple pointmarkers, including:&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.SpherePointMarker3D.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CubePointMarker3D.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PyramidPointMarker3D.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CylinderPointMarker3D.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point&lt;/P&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PixelPointMarker3D.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.QuadPointMarker3D.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.EllipsePointMarker3D.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.TrianglePointerMarker3D.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CustomPointMarker3D.html"&gt;CustomPointMarker3D&lt;/A&gt; - custom flat textured markers facing the camera at each point&lt;/P&gt;
&lt;H2&gt;Declaring a 3D Point Line Series&lt;/H2&gt;
&lt;P&gt;To declare a 3D Point Line Series with individual sizes &amp;amp; colors, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;PointLine 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final DataManager dataManager = DataManager.getInstance();&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; xyzDataSeries3D = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;BR&gt;final PointMetadataProvider3D metadataProvider = new PointMetadataProvider3D();&lt;/P&gt;
&lt;P&gt;final ObservableCollection&amp;lt;PointMetadataProvider3D.PointMetadata3D&amp;gt; medatata = metadataProvider.metadata;&lt;BR&gt;for (int i = 0; i &amp;lt; 100; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = 5 * Math.sin(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = 5 * Math.cos(i);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyzDataSeries3D.append(x, y, z);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final int color = dataManager.getRandomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final float scale = dataManager.getRandomScale();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; medatata.add(new PointMetadataProvider3D.PointMetadata3D(color, scale));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final SpherePointMarker3D pointMarker = sciChart3DBuilder.newSpherePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.Red)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(5f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;final PointLineRenderableSeries3D rs = sciChart3DBuilder.newPointLinesSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(xyzDataSeries3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.Green)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsAntialiased(false)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsLineStrips(true)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withMetadataProvider(metadataProvider)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Property IsLineStrips&lt;/H2&gt;
&lt;P&gt;The Point Line 3D Series also allows you to split the line at every other point. useful if you want to use it to draw a free-form grid. To enable this behaviour, set the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.pointLine.PointLineRenderableSeries3D~setIsLineStrips.html"&gt;IsLineStrips&lt;/A&gt; property. This property is used in the 3D Charts &amp;gt;&amp;nbsp;Series Tooltips 3D Chart example.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AndroidPointLine3DChartLineStrips.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="44b29ec3-b3ab-4517-9990-8efa8c93f3e3" Status="New Topic" CreatedOn="2019-07-10T07:59:21.1348656Z" ModifiedOn="2019-09-23T13:47:31.9723171Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Column 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:47:31.9723171Z">&lt;P&gt;3D Column Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.columns.ColumnRenderableSeries3D.html"&gt;ColumnRenderableSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/AndroidColumn3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;
&lt;H2&gt;Declaring a 3D Column Chart&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.columns.ColumnRenderableSeries3D.html"&gt;ColumnRenderableSeries3D&lt;/A&gt;&amp;nbsp;accepts either&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.xyz.XyzDataSeries3D.html"&gt;XyzDataSeries3D&lt;/A&gt; for sparse points, or&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D.html"&gt;UniformGridDataSeries3D&lt;/A&gt; for an NxM array of points.&lt;/P&gt;
&lt;P&gt;The above graph is rendered with the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Column 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final UniformGridDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new UniformGridDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, COUNT, COUNT);&lt;/P&gt;
&lt;P&gt;for (int x = 0; x &amp;lt; COUNT; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; COUNT; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = Math.sin(x * .25) / ((z + 1) * 2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(x, z, y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0, 0.5).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;final ColumnRenderableSeries3D rs = sciChart3DBuilder.newColumnSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.DodgerBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Single Row Column 3D Charts&lt;/H2&gt;
&lt;P&gt;By changing a few parameters, it is possible to get a column chart to look like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SingleRowColumn3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;The code to achieve the above is as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Single Row Column 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final UniformGridDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new UniformGridDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, COUNT, 1);&lt;/P&gt;
&lt;P&gt;for (int x = 0; x &amp;lt; COUNT; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; 1; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = Math.sin(x * .25) / ((z + 1) * 2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(x, z, y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0, 0.5).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withDrawLabels(false).build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;final ColumnRenderableSeries3D rs = sciChart3DBuilder.newColumnSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.DodgerBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getWorldDimensions().assign(200, 100, 20);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;3D Column Shapes&lt;/H2&gt;
&lt;P&gt;The column shape can be defined by one of several pointmarkers, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.SpherePointMarker3D.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CubePointMarker3D.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PyramidPointMarker3D.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CylinderPointMarker3D.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point Apply the Type of point marker to the ColumnRenderableSeries3D.ColumnShape property to change the column shape. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;BR&gt;
&lt;H2&gt;Setting Column Sizes&lt;/H2&gt;
&lt;P&gt;Column sizes are set as a ratio of the available space between the neighbouring points.&lt;/P&gt;
&lt;P&gt;Setting the properties&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.columns.ColumnRenderableSeries3D~setDataPointWidth.html"&gt;DataPointWidth&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.columns.ColumnRenderableSeries3D~setDataPointWidthX.html"&gt;DataPointWidthX&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.columns.ColumnRenderableSeries3D~setDataPointWidthZ.html"&gt;DataPointWidthZ&lt;/A&gt; changes the ratio of space allocated to the column in the X &amp;amp; Z direction.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6d6181dc-3fed-4962-b0f4-a482bb51e1b2" Status="New Topic" CreatedOn="2019-07-10T07:59:32.4968518Z" ModifiedOn="2019-09-23T13:48:38.7153226Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Impulse 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T13:48:38.7153226Z">&lt;P&gt;3D Impulse or Stem Charts are provided by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.impulse.ImpulseRenderableSeries3D.html"&gt;ImpulseRenderableSeries3D&lt;/A&gt; type.&lt;/P&gt;
&lt;P&gt;A stem chart is visualized by small stems pointing up or down to a value with a sphere or marker at the top.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/AndroidImpulse3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;
&lt;H2&gt;Declaring a 3D Impulse Chart&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.impulse.ImpulseRenderableSeries3D.html"&gt;ImpulseRenderableSeries3D&lt;/A&gt; accepts either&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.xyz.XyzDataSeries3D.html"&gt;XyzDataSeries3D&lt;/A&gt; for sparse points, or&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.grid.UniformGridDataSeries3D.html"&gt;UniformGridDataSeries3D&lt;/A&gt; for an NxM array of points.&lt;/P&gt;
&lt;P&gt;The above graph is rendered with the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Impulse 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final UniformGridDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new UniformGridDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, COUNT, COUNT);&lt;/P&gt;
&lt;P&gt;for (int x = 0; x &amp;lt; COUNT; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; COUNT; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = Math.sin(x * .25) / ((z + 1) * 2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(x, z, y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0, .5).withGrowBy(.1, .1).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;final ImpulseRenderableSeries3D rs = sciChart3DBuilder.newImpulseSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.DodgerBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(sciChart3DBuilder.newSpherePointMarker3D().withSize(5).withFill(ColorUtil.DodgerBlue).build())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;However it could be just as easily created with an&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.model.dataSeries.xyz.XyzDataSeries3D.html"&gt;XyzDataSeries3D&lt;/A&gt; as the DataSeries for sparse columns.&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;SPAN class=NewStyle2&gt;Single Row Impulse 3D Charts&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;By changing a few parameters, it is possible to get a column chart to look like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SingleRowImpulse3DChart.png"&gt;&lt;/P&gt;
&lt;P&gt;The code to achieve the above is as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Single Row Impulse 3D Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final UniformGridDataSeries3D&amp;lt;Double, Double, Double&amp;gt; ds = new UniformGridDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class, COUNT, 1);&lt;/P&gt;
&lt;P&gt;for (int x = 0; x &amp;lt; COUNT; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int z = 0; z &amp;lt; 1; z++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = Math.sin(x * .25) / ((z + 1) * 2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ds.updateYAt(x, z, y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().build();&lt;BR&gt;final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0, 0.5).build();&lt;BR&gt;final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withDrawLabels(false).build();&lt;/P&gt;
&lt;P&gt;final ImpulseRenderableSeries3D rs = sciChart3DBuilder.newImpulseSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(ds)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(ColorUtil.DodgerBlue)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStrokeThicknes(1f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(sciChart3DBuilder.newSpherePointMarker3D().withSize(5).withFill(ColorUtil.DodgerBlue).build())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getWorldDimensions().assign(200, 100, 20);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;3D Impulse Shapes&lt;/H2&gt;
&lt;P&gt;The shape at the top of the stem can be defined by one of several pointmarkers, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.SpherePointMarker3D.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CubePointMarker3D.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.PyramidPointMarker3D.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.pointMarkers.CylinderPointMarker3D.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point Apply the Type of point marker to the ColumnRenderableSeries3D.ColumnShape property to change the column shape. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Apply the Type of point marker to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.BaseRenderableSeries3D~setPointMarker.html"&gt;PointMarker&lt;/A&gt; property to change the shape.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="c23f4a6a-f3e6-4765-b11c-43a4d0dcd48d" AutoIndex="false">
            <Caption m="2019-07-22T13:15:51.9019692Z">ChartModifie3D API</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="d1f8ce98-2a8e-4938-9762-2f8c184ab016" AutoIndex="false">
                <Caption m="2019-07-22T13:16:35.2406484Z">ZoomingPanning</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" Status="New Topic" CreatedOn="2019-07-22T13:17:51.5313463Z" ModifiedOn="2019-09-23T14:20:20.4762071Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OrbitModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:20:20.4762071Z">&lt;P&gt;Zooming and Panning a Chart in SciChart3D is achieved by moving the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple panning of the camera to the chart then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.OrbitModifier3D.html"&gt;OrbitModifier3D&lt;/A&gt; performs orbital motion of the camera giving the appearance of the chart rotating.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/OrbitModifier3D.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring an OrbitModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring an&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.OrbitModifier3D.html"&gt;OrbitModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final OrbitModifier3D orbitModifier3D = new OrbitModifier3D();&lt;/P&gt;
&lt;P&gt;orbitModifier3D.setIsEnabled(true);&lt;BR&gt;orbitModifier3D.setExecuteOnPointerCount(1);&lt;BR&gt;orbitModifier3D.setReceiveHandledEvents(true);&lt;BR&gt;orbitModifier3D.setDegreesPerPixelSensitivity(0.2f);&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(orbitModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" Status="New Topic" CreatedOn="2019-07-22T13:18:02.3361727Z" ModifiedOn="2019-09-23T14:20:45.0649353Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="FreeLookModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle m="2019-07-22T13:21:49.3095094Z">Free Look Modifier 3D</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:20:45.0649353Z">&lt;P&gt;Zooming and Panning a Chart in SciChart3D is achieved by moving the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple mvement of the camera (imagine free-look in a computer game) then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.FreeLookModifier3D.html"&gt;FreelookModifier3D&lt;/A&gt; moves camera in the Left/Right/Up/Down direciton giving the appearance of rotation camera in&amp;nbsp;the 3D World&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/FreeLookModifier3D.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring an FreelookModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring an&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.FreeLookModifier3D.html"&gt;FreelookModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt;&amp;nbsp;property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The following code will allow to rotate camera by scrolling with two fingers:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final FreeLookModifier3D freeLookModifier3D = new FreeLookModifier3D();&lt;/P&gt;
&lt;P&gt;freeLookModifier3D.setIsEnabled(true);&lt;BR&gt;freeLookModifier3D.setDegreesPerPixelSensitivity(0.2f);&lt;BR&gt;freeLookModifier3D.setExecuteOnPointerCount(2);&lt;BR&gt;freeLookModifier3D.setReceiveHandledEvents(true);&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(freeLookModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" Status="New Topic" CreatedOn="2019-07-22T13:18:37.0670368Z" ModifiedOn="2019-09-23T14:21:03.3452261Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PinchZoomModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:21:03.3452261Z">&lt;P&gt;Zooming and Panning a Chart in SciChart3D is achieved by moving the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt;&amp;nbsp;to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple panning of the camera to the chart then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.PinchZoomModifier3D.html"&gt;PinchZoomModifier3D&lt;/A&gt; performs movement the camera forwards/backwards when the user pinches a touch screen giving the appearance of zooming the 3D world.&lt;BR&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/PinchZoomModifier3D.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring a PinchZoomModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring an&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.PinchZoomModifier3D.html"&gt;PinchZoomModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt;&amp;nbsp;property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final PinchZoomModifier3D pinchZoomModifier3D = new PinchZoomModifier3D();&lt;/P&gt;
&lt;P&gt;pinchZoomModifier3D.setIsEnabled(true);&lt;BR&gt;pinchZoomModifier3D.setScaleFactor(2f);&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(pinchZoomModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0f31338f-c416-4129-8e9b-cc357faf1082" Status="New Topic" CreatedOn="2019-07-22T13:18:56.2971418Z" ModifiedOn="2019-09-23T14:21:39.9411657Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ZoomExtentsModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:21:39.9411657Z">&lt;P&gt;Zooming and Panning a Chart in SciChart3D is achieved by moving the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt;&amp;nbsp;to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you get lost and want to quickly zoom to fit the 3D Chart to the available space, you can use the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ZoomExtentsModifier3D.html"&gt;ZoomExtentsModifier3D&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;With this modifier enabled: Double-tap on the chart to zoom to fit.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/ZoomExtentsModifier3D.gif"&gt;&lt;/P&gt;
&lt;H2&gt;How does it work?&lt;/H2&gt;
&lt;P&gt;There are two modes of operation for the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ZoomExtentsModifier3D.html"&gt;ZoomExtentsModifier3D&lt;/A&gt;.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Attempt to AutoFit the 3D scene into the viewport by setting&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ZoomExtentsModifier3D~setAutoFitRadius.html"&gt;ZoomExtentsModifier3D.AutoFitRadius&lt;/A&gt; = true. 
&lt;LI&gt;You specify precise coordinates for the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getTarget.html"&gt;Camera.Target&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getPosition.html"&gt;Position&lt;/A&gt; when&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ZoomExtentsModifier3D~setAutoFitRadius.html"&gt;ZoomExtentsModifier3D.AutoFitRadius&lt;/A&gt;&amp;nbsp;= false. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a ZoomExtentsModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ZoomExtentsModifier3D.html"&gt;ZoomExtentsModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The following code will reset the camera position to 200,200,200 and target to 0,0,0 on double tap on screen.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final ZoomExtentsModifier3D zoomExtentsModifier3D = new ZoomExtentsModifier3D();&lt;/P&gt;
&lt;P&gt;zoomExtentsModifier3D.setIsEnabled(true);&lt;BR&gt;zoomExtentsModifier3D.setExecuteOn(ExecuteOn.DoubleTap);&lt;BR&gt;zoomExtentsModifier3D.setAutoFitRadius(false);&lt;BR&gt;zoomExtentsModifier3D.setResetPosition(new Vector3(200, 200, 200));&lt;BR&gt;zoomExtentsModifier3D.setResetTarget(new Vector3(0, 0, 0));&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(zoomExtentsModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="7a500011-ed7b-43fe-922b-1fabfc61ff6a" AutoIndex="false">
                <Caption m="2019-07-22T13:16:17.711584Z">Tooltips</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="7915ac64-f37b-4acd-a5c7-521a0259d63c" Status="New Topic" CreatedOn="2019-07-22T13:17:38.0598147Z" ModifiedOn="2019-09-23T14:58:11.9153935Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TooltipModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:58:11.9153935Z">&lt;P&gt;Tooltips in SciChart3D are performed by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier3D&lt;/A&gt;. This is a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ChartModifierBase3D.html"&gt;ChartModifierBase3D&lt;/A&gt; derived type which executes on touch over the data point and&amp;nbsp;shows tooltips for the data-points under the pointer.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/TooltipModifier3d1.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Declaring a TooltipModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt;&amp;nbsp;property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final TooltipModifier3D tooltipModifier3D = new TooltipModifier3D();&lt;/P&gt;
&lt;P&gt;tooltipModifier3D.setIsEnabled(true);&lt;BR&gt;tooltipModifier3D.setExecuteOnPointerCount(1);&lt;BR&gt;tooltipModifier3D.setCrosshairMode(CrosshairMode.Lines);&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(tooltipModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling the Tooltip Item&lt;/H2&gt;
&lt;P&gt;The tooltip item can be customized by&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.IRenderableSeries3D~setSeriesInfoProvider.html"&gt;setting&lt;/A&gt; custom&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.hitTest.ISeriesInfo3DProvider.html"&gt;ISeriesInforProvider3D&lt;/A&gt;&amp;nbsp;which returns&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.renderableSeries.tooltips.ISeriesTooltip3D.html"&gt;tooltip&lt;/A&gt; with desired appearance&amp;nbsp;for desired 3D renderable series. For ScatterRenderableSeries3D code will look like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Extend DefaultXyzSeriesInfo3DProvider&amp;nbsp;with custom&amp;nbsp;tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomSeriesInfo3DProvider extends DefaultXyzSeriesInfo3DProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected ISeriesTooltip3D getSeriesTooltipInternal(Context context, XyzSeriesInfo3D&amp;lt;? extends XyzRenderableSeries3DBase&amp;gt; seriesInfo, Class&amp;lt;?&amp;gt; modifierType) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(modifierType == TooltipModifier3D.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomXyzSeriesTooltip3D(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return super.getSeriesTooltipInternal(context, seriesInfo, modifierType);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private static class CustomXyzSeriesTooltip3D extends XyzSeriesTooltip3D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomXyzSeriesTooltip3D(Context context, XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalUpdate(XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SpannableStringBuilder sb = new SpannableStringBuilder();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("This is Custom Tooltip").append(NEW_LINE);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("VertexId: ").append(Integer.toString(seriesInfo.vertexId)).append(NEW_LINE);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("X: ").append(seriesInfo.getFormattedXValue()).append(NEW_LINE);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Y: ").append(seriesInfo.getFormattedYValue()).append(NEW_LINE);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Z: ").append(seriesInfo.getFormattedZValue());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setText(sb);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setSeriesColor(seriesInfo.seriesColor);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then just need to set it for renderable series:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting of custom SeriesInfor3DProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final ScatterRenderableSeries3D scatterRenderableSeries3D = new ScatterRenderableSeries3D();&lt;/P&gt;
&lt;P&gt;scatterRenderableSeries3D.setSeriesInfoProvider(new CustomSeriesInfo3DProvider());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling the Tooltip Container Style&lt;/H2&gt;
&lt;P&gt;The tooltip container&amp;nbsp;can be customized by passing layout file which contains custom&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.modifiers.behaviors.ITooltipContainer.html"&gt;ITooltipContainer&lt;/A&gt; as root element into&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier3D&lt;/A&gt; constructor:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declare custom container&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class CustomTooltipModifierTooltipContainer extends TooltipModifierTooltip {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomTooltipModifierTooltipContainer(Context context) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomTooltipModifierTooltipContainer(Context context, AttributeSet attrs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, attrs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomTooltipModifierTooltipContainer(Context context, AttributeSet attrs, int defStyleAttr) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, attrs, defStyleAttr);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then create XML layout with this custom container:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example_custom_tooltip_container.xml&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;com.scichart.examples.fragments.CustomTooltipModifierTooltipContainer xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="wrap_content"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:background="@drawable/example_custom_tooltip_background"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="wrap_content"/&amp;gt;&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;And finally use it to create&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier3D&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom modifier definition&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final TooltipModifier3D tooltipModifier3D = new TooltipModifier3D(new CrossDrawableBehavior&amp;lt;&amp;gt;(TooltipModifier3D.class), R.layout.example_custom_tooltip_container);&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="7255c88f-abce-425e-9c21-4b50da1d9490" AutoIndex="false">
                <Caption m="2019-07-22T13:16:40.4006076Z">Selection</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="e70c80b0-c167-4aa8-8a0d-823752caa406" Status="New Topic" CreatedOn="2019-07-22T13:16:43.3261815Z" ModifiedOn="2019-09-23T14:59:03.3346216Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="VertexSelectionModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2019-09-23T14:59:03.3346216Z">&lt;P&gt;Ther&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.VertexSelectionModifier3D.html"&gt;VertexSelectionModifier3D&lt;/A&gt; allows you to perform selection of points on a 3D Chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/VertexSelectionModifier3D.gif"&gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;
&lt;H2&gt;Declaring a VertexSelectionModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.VertexSelectionModifier3D.html"&gt;VertexSelectionModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getChartModifiers.html"&gt;SciChart3DSurface.ChartModifiers&lt;/A&gt;&amp;nbsp;property. This can be done as a single modifier, or as part of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring Modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final VertexSelectionModifier3D vertexSelectionModifier3D = new VertexSelectionModifier3D();&lt;/P&gt;
&lt;P&gt;vertexSelectionModifier3D.setIsEnabled(true);&lt;BR&gt;vertexSelectionModifier3D.setDrawCross(true);&lt;BR&gt;vertexSelectionModifier3D.setOffset(0f);&lt;/P&gt;
&lt;P&gt;surface3d.getChartModifiers().add(new ModifierGroup3D(vertexSelectionModifier3D));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics />
          </TopicCategory>
          <TopicCategory Id="e54cd013-f39f-4da3-9c8d-4e0df473d2fe" AutoIndex="false">
            <Caption m="2019-08-04T13:24:13.9029458Z">SciChart3D Basics</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1" Status="New Topic" CreatedOn="2019-08-04T13:24:21.2822269Z" ModifiedOn="2019-09-23T15:00:32.6059052Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The SciChartSurface Camera" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T15:00:32.6059052Z">&lt;P&gt;The property&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt; defines an&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController.html"&gt;ICameraController&lt;/A&gt; instance. By default this interface is implemented&amp;nbsp;in&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.Camera3D.html"&gt;Camera3D&lt;/A&gt;&amp;nbsp;class.&lt;/P&gt;
&lt;P&gt;By default, the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt; is set to a new&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.Camera3D.html"&gt;Camera3D&lt;/A&gt;&amp;nbsp;instance which defines the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getPosition.html"&gt;Position&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getTarget.html"&gt;Target&lt;/A&gt; (in world coordinates) of the camera, and whether the camera is in Perspective or Orthogonal projection modes.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Camera3DExplanation.png"&gt;&lt;/P&gt;
&lt;P&gt;Above: the representation of a Camera in 3D Space. The camera is attached to the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.ISciChartSurface3D~getCamera.html"&gt;SciChart3DSurface.Camera&lt;/A&gt;&amp;nbsp;property and is defined by a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getPosition.html"&gt;Position&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getTarget.html"&gt;Target&lt;/A&gt;, plus other properties which define the properties of the viewport.&lt;/P&gt;
&lt;H2&gt;Camera Position, Target&lt;/H2&gt;
&lt;P&gt;The camera is defined by a&amp;nbsp;&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getPosition.html"&gt;Position&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getTarget.html"&gt;Target&lt;/A&gt; which are XYZ vectors in World Coordinates.&lt;/P&gt;
&lt;P&gt;Other properties which define the viewport as seen by the camera include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getPosition.html"&gt;Position&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getTarget.html"&gt;Target&lt;/A&gt; which define the position and target of the camera in World Coordinates. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getOrbitalPitch.html"&gt;OrbitalPitch&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getOrbitalYaw.html"&gt;OrbitalYaw&lt;/A&gt; which define the pitch and yaw around the target in Radians 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getRadius.html"&gt;Radius&lt;/A&gt; which is the distance of the Camera Position to the Camera Target 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getAspectRatio.html"&gt;AspectRatio&lt;/A&gt; which defines the aspect ratio. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~setProjectionMode.html"&gt;ProjectionMode&lt;/A&gt; which defines whether the camera is&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.CameraProjectionMode~Perspective.html"&gt;Perspective&lt;/A&gt; or&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.CameraProjectionMode~Orthogonal.html"&gt;Orthogonal&lt;/A&gt; 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~setOrthoWidth.html"&gt;OrthoWidth&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getOrthoHeight.html"&gt;OrthoHeight&lt;/A&gt;, which define the width, height of the projected viewport when in ProjectionMode Orthogonal. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~setFieldOfView.html"&gt;FieldOfView&lt;/A&gt; which is the FOV of the camera in radians. 
&lt;LI&gt;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~setNearClip.html"&gt;NearClip&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.camera.ICameraController~getFarClip.html"&gt;FarClip&lt;/A&gt; which define when clipping of close or far objects should occur. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ModifyCamera3DProperties.gif"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;"Modify Camera3D Properties" example&amp;nbsp;shows how to manipulate the camera, and how to switch between perspective and orthoginal modes.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="01b31f4f-bced-419a-a232-e11ae17a7255" Status="New Topic" CreatedOn="2019-08-05T08:01:00.2329662Z" ModifiedOn="2019-09-23T15:01:22.5353955Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your first SciCharSurface3D" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T15:01:22.5353955Z">&lt;P&gt;The root 3D Chart control is called the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;. This is the&amp;nbsp;Android View which you will be adding to your applications wherever you need a 3D chart. You can add more than one&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;, you can configure them independently, you can link them together.&lt;/P&gt;
&lt;P&gt;Let’s start by declaring one!&lt;/P&gt;
&lt;H2&gt;Declaring a SciChart3DSurface Instance&lt;/H2&gt;
&lt;P&gt;After Referencing the SciChart3D library locally, from Maven repository or SciChart3D Source from Github, a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;&amp;nbsp;can be declared as folows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring chart in layout&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;XML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;LinearLayout xmlns:android="&lt;A href="http://schemas.android.com/apk/res/android"&gt;http://schemas.android.com/apk/res/android&lt;/A&gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="match_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:orientation="vertical"&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart3d"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_width="fill_parent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:layout_height="fill_parent" /&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then in code you need to find it by Id and add a (numeric) X,Y and Z Axis and add two zoom behaviours:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;final SciChartSurface3D surface3d = findViewById(R.id.chart3d);&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(new NumericAxis3D());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(new NumericAxis3D());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(new NumericAxis3D());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(new ModifierGroup3D(new OrbitModifier3D(), new ZoomExtentsModifier3D()));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Congratulations! You have just declared your first&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="0a96bb3a-89bf-4886-9ad9-e11ad6f32c4e" Status="New Topic" CreatedOn="2019-08-05T08:43:36.5689615Z" ModifiedOn="2019-09-23T15:05:50.2878264Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Coordinates in 3D Space" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-23T15:05:50.2878264Z">&lt;H2&gt;Coordinate Systems&lt;/H2&gt;
&lt;H3&gt;The Left Handed Coordinate System (LHS)&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt; by default renders a 3D world using the Left Handed Coordinate system or LHS (as is common to DirectX). In the LHS X and Z form the horizontal plane, and Y is always up YDirection=(0,1,0). It is helpful to think of the 3D world as a 2D Chart in X-Y and Z goes ‘into the screen’.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CoordinateSystem.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LeftHandedCoordinateSystem.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Left handed coordinate system. X-Z is a horizontal plane, Y is up.&lt;/STRONG&gt;&lt;/P&gt;
&lt;H3&gt;Switching to Right Handed Coordinate System (RHS)&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;&amp;nbsp;can also be rendered in the Right Handed Coordiante System (RHS) as is common to OpenGL and some CAD / Engineering packages.&lt;/P&gt;
&lt;P&gt;To switch between the two, simply call&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~setIsLeftHandedCoordinateSystem.html"&gt;SciChartSurface3D.setIsLeftHandedCoordinateSystem()&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Switch to RHS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.setIsLeftHandedCoordinateSystem(false);&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;World Coordinates&lt;/H2&gt;
&lt;P&gt;World Coordinates is the term used to describe coordinates in the 3D World. These are the raw X,Y,Z coordinates of a vertex. By default the origin (0,0,0) is in the centre, bottom of the chart.&lt;/P&gt;
&lt;H3&gt;WorldDimensions and the Axis Cube&lt;/H3&gt;
&lt;P&gt;The box in the chart is called the Axis Cube. The AxisCube size is defined by the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~getWorldDimensions.html"&gt;SciChartSurface3D.WorldDimensions&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;The WorldDimensions is a single Vector3 with X,Y,Z size, but defines the size of a cube as follows:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WorldCoordinates.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;How WorldDimensions Relates to the AxisCube in SciChart3D&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Therefore…&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The size of the AxisCube in the X Direction extends from -WorldDimensions.X/2 to +WorldDimensions.X/2 
&lt;LI&gt;The size of the AxisCube in the Y Direction extends from 0 to +WorldDimensions.Y 
&lt;LI&gt;The size of the AxisCube in the Z Direction extends from -WorldDimensions.Z/2 to +WorldDimensions.Z/2 &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: By default, SciChart3DSurface.WorldDimensions property is set to X=300, Y=200, Z=300.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H3&gt;Setting the WorldDimensions Property&lt;/H3&gt;
&lt;P&gt;To set the WorldDimensions Property, simply use the following code to define a Vector3 (3-component vector):&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting WorldDimensions&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.getWorldDimensions().assign(200, 200, 200);&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Data Coordinates&lt;/H2&gt;
&lt;P&gt;By contrast to WorldCoordinates, which are absolute coordinates in the 3D World, in SciChart 3D there is the concept of Data Coordinates.&lt;/P&gt;
&lt;P&gt;Data Coordinates are measured on an Axis, for example, the YAxis (which is UP) might have a size of 200 in the World Coordinates, but might display a VisibleRange of 0...10. Therefore, Data which falls int he range 0...10 will be spaced on this axis from 0...200 World Coordinates.&lt;/P&gt;
&lt;P&gt;The difference between World Coordinates, Data Coordinates is shown in the following example:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/DataVsWorldCoordinates.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;How WorldDimensions Relates to the AxisCube in SciChart3D&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;Converting from World to Data Coordinates&lt;/H2&gt;
&lt;P&gt;The conversion between Data Coordinates and World Coordinates is done by the Axis. For example. the follwoing code converts from Data to World Coordinates on the&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D~getXAxis.html"&gt;SciChartSurface3D.XAxis&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Converting Data to World coordinates&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;NumericAxis xAxis = ...;&lt;/P&gt;
&lt;P&gt;final ICoordinateCalculator coordCalc = xAxis.getCurrentCoordinateCalculator();&lt;/P&gt;
&lt;P&gt;// get world coordinate. getCoordinate() expects double value so you need to cast to double if your data is integer&lt;BR&gt;final float worldCoord = coordCalc.getCoordinate(1.23d);&lt;/P&gt;
&lt;P&gt;// convert back to data value&lt;BR&gt;final double dataValue = coordCalc.getDataValue(worldCoord);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1166d665-4a40-4ee8-8ec8-b40a1db4d7c5" Status="New Topic" CreatedOn="2019-08-13T10:53:13.5002512Z" ModifiedOn="2019-08-13T11:58:48.7966745Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart 3D Builders Helper Classes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-13T11:58:48.7966745Z">&lt;P&gt;Like&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;2D Chart&lt;/A&gt; SciChart Android 3D&amp;nbsp;provides Builder API for creation and configuring of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;. They follow the &lt;STRONG&gt;XXXBuilder&lt;/STRONG&gt; naming pattern and allow to initialize virtually anything in an easier and more convenient way. Different property of classes can be preset via the &lt;STRONG&gt;withXXX(…)&lt;/STRONG&gt; methods&amp;nbsp;of the&amp;nbsp;helpers, a.k.a. "&lt;EM&gt;chart&lt;/EM&gt; &lt;EM&gt;builders&lt;/EM&gt;".&lt;/P&gt;
&lt;H2&gt;Referencing SciChart Builders&lt;/H2&gt;
&lt;P&gt;SciChart builders for&amp;nbsp;3D charts&amp;nbsp;provided as seperate library which is called 'extensions3d'. If you&amp;nbsp;want to use&amp;nbsp;then you'll need to&amp;nbsp;add it into your project as&amp;nbsp;dependency. This is available from our&amp;nbsp;&lt;A href="https://www.myget.org/feed/abtsoftware/package/maven/com.scichart.library/extensions" target=_blank&gt;Maven feed&lt;/A&gt;, or in the Android Charts SDK at &lt;A href="http://www.scichart.com/downloads"&gt;www.scichart.com/downloads&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding extension library&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;Gradle&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart3D libraries as module dependencies&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'charting-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'charting3d-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'drawing-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'data-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'core-release', ext:'aar'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Declare SciChart extension library as module dependency&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation (name:'extensions-release', ext:'aar')&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart3D extension library as module dependency&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'extensions3d-release', ext:'aar')&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using Chart Builders in Code&lt;/H2&gt;
&lt;P&gt;The main chart builder class is called &lt;STRONG&gt;SciChart3DBuilder&lt;/STRONG&gt;. It acts as a factory&amp;nbsp;of builders of other types, representing different&amp;nbsp;chart aspects.&lt;/P&gt;
&lt;P&gt;Using chart builders,&amp;nbsp;the code snippet for chart initialization from the section above can be rewritten as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;@Override&lt;BR&gt;public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Inflate the layout from “base_scichart_layout.xml”&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; View view = inflater.inflate(R.layout.base_scichart_layout, container, false);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // find the surface by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d = view.findViewById(R.id.chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // need to init SciChart3DBuilder class with application context before using&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChart3DBuilder.init(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // obtain the SciChart3DBuilder instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChart3DBuilder sciChart3dBuilder = SciChart3DBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D xAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D yAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(0, 100)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a numeric Z axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D zAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(0, 100)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup3D chartModifiers = sciChart3dBuilder.newModifierGroupWithDefaultModifiers().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set axes for 3D chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface3d.getChartModifiers(), chartModifiers);&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return view;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Usually this approach to chart&amp;nbsp;initialization&amp;nbsp;results in more concise and elegent code. It is preferred for the vast majority of examples from the&amp;nbsp;&lt;A href="http://www.scichart.com/android-chart-examples/"&gt;Android Examples Suite&lt;/A&gt;. We would recommend using it in applications too. However, it doesn't give any other benefits except those stated above, so the standard way of objects initialization is equally fine.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
    </TopicCategories>
    <CustomTopicPropertyDefinitions />
    <PropertyDefinitionValues />
    <AutoNameDigits>0</AutoNameDigits>
    <AutoNameLastNumber>0</AutoNameLastNumber>
    <AutoNameEnabled>false</AutoNameEnabled>
    <AutoNamePrefix></AutoNamePrefix>
    <IncludeTopicNameInTitle>false</IncludeTopicNameInTitle>
    <TopicEditorState>
      <Attributes>
        <Attribute key="dtscrollpos" valuetype="integer">0</Attribute>
        <Attribute key="scrollPosition" valuetype="integer">1196</Attribute>
      </Attributes>
    </TopicEditorState>
  </TopicsProjectPlugin>
  <WidgetsProjectPlugin>
    <WidgetTypes Version="2011.1" />
  </WidgetsProjectPlugin>
  <TemplateFileFeaturesProjectPlugin />
  <ProjectSearchProjectPlugin>
    <ProjectSearchDefinitions />
  </ProjectSearchProjectPlugin>
  <ContentSources>
    <DefaultQuipAccessToken></DefaultQuipAccessToken>
  </ContentSources>
  <ShortFileNames IsSaveMappingsEnabled="true" MappingProvider="DEFAULT" IsLengthLimitationEnabled="true" LengthLimit="170" />
  <VersionsAndEditions>
    <ContentDiscoveryUrl></ContentDiscoveryUrl>
    <NavigationUrl></NavigationUrl>
    <Versions Id="version">
      <Caption m="2019-01-31T16:32:58.9033696Z">Version</Caption>
      <VersionDefinitions />
    </Versions>
    <Editions Id="edition">
      <Caption m="2019-01-31T16:32:58.9033696Z">Edition</Caption>
      <VersionDefinitions />
    </Editions>
  </VersionsAndEditions>
  <Publishing />
  <ProjectProfiles>
    <ProjectProfile Id="6b2cfb6d-7340-49af-9cfb-d31ec7a4a0d5" Name="Online and CHM">
      <DefaultItemQualifiedName></DefaultItemQualifiedName>
      <StripMetadata>true</StripMetadata>
      <AlwaysCopyTemplateFiles>true</AlwaysCopyTemplateFiles>
      <OutputFileExtension>.html</OutputFileExtension>
      <Title />
      <ClearOutputDirectoryBeforeBuild>true</ClearOutputDirectoryBeforeBuild>
      <IsNewIndicatorEnabled>false</IsNewIndicatorEnabled>
      <IsNewDateTime></IsNewDateTime>
      <PublishingTargets />
      <PropertyDefinitionValues>
        <PropertyDefinitionValue PropertyDefinitionId="f9e699b0-25d1-488a-8da8-38cd78e87918">
          <PropertyValue m="2011-11-29T17:23:16.9964319Z" />
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="d6063a70-1b08-4745-82fe-e59caa2d54bf">
          <PropertyValue m="2011-11-29T17:23:19.7157909Z" />
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="4762301e-2f7f-49ae-a6d9-51a79750d8b3">
          <PropertyValue m="2019-10-28T12:58:28.8388964Z">SciChart_Android_v3_SDK_User_Manual.html</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="31a70858-084a-43e7-a307-43e2cdae0808">
          <PropertyValue m="2019-11-27T17:07:35.3795898Z">https://www.scichart.com/documentation/android/current/</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="c58acc35-6e43-42f0-bf51-b3afa633f0cc">
          <PropertyValue m="2019-02-11T11:11:52.1212139Z">https://www.scichart.com/android-charts/</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="d50d68a0-b78a-435c-aa4a-79a1a79209c5">
          <PropertyValue m="2019-02-11T11:11:42.2800084Z">Android</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="dffa9b8e-bb62-4b2f-be87-ccd1375cf6b9">
          <PropertyValue m="2019-10-28T12:58:18.3386003Z">v3.x</PropertyValue>
        </PropertyDefinitionValue>
      </PropertyDefinitionValues>
      <DefaultTemplateName>Material</DefaultTemplateName>
      <IsTidyXhtmlEnabled>false</IsTidyXhtmlEnabled>
      <CommunityOptions UseLocalProxyUrl="false" Enabled="false">
        <ServerType>PublicEvaluation</ServerType>
        <LocalProxyUrl></LocalProxyUrl>
        <HostingAccessKey></HostingAccessKey>
        <PrivateServerUrl></PrivateServerUrl>
        <PrivateServerAccessKey></PrivateServerAccessKey>
        <ProjectKey />
      </CommunityOptions>
      <CommunityProjectProfilePlugin IsEnabled="false">
        <IsCompiledHelpReadinessWarningDisabled>false</IsCompiledHelpReadinessWarningDisabled>
      </CommunityProjectProfilePlugin>
      <DotNet>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <IncludeSystemObjectMembers>false</IncludeSystemObjectMembers>
        <InterfacesToIgnoreInSyntax>System.*</InterfacesToIgnoreInSyntax>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <LinkToExternalDocs>true</LinkToExternalDocs>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <UseExternalXmlCommentFiles>false</UseExternalXmlCommentFiles>
        <NoInheritedMemberTopicsExternal>true</NoInheritedMemberTopicsExternal>
        <NoInheritedInLists>false</NoInheritedInLists>
        <ExcludeEditorBrowsable>true</ExcludeEditorBrowsable>
        <ExcludeBrowsableFalse>false</ExcludeBrowsableFalse>
        <ExcludeObsolete>false</ExcludeObsolete>
        <ExcludeCompilerGenerated>false</ExcludeCompilerGenerated>
        <ExcludeDebuggerNonUserCode>false</ExcludeDebuggerNonUserCode>
        <GenerateXmlCommentFile>false</GenerateXmlCommentFile>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeAssemblyBreadcrumb>false</IncludeAssemblyBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <IncludeAttributes>true</IncludeAttributes>
        <AttributeFilterType>Exclude</AttributeFilterType>
        <AttributeFilter></AttributeFilter>
        <XmlIsland></XmlIsland>
        <IdentifyAccessInTitles>false</IdentifyAccessInTitles>
        <XmlCommentUsage>UseIfBlank</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="3" ShareSize="false">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>6</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="16" />
            </CommonStyle>
            <ObjectItemStyle Font="Verdana" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FF99CCFF" BorderBrush="#FFFFFFFF" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Verdana" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFFFCC66" BorderBrush="#FF000000" BorderThickness="-0" EndCap="Point" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>PropertiesOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <IncludeVbNetDefaultConstructor>false</IncludeVbNetDefaultConstructor>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootAssemblyName></RootAssemblyName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>false</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>false</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <SyntaxSectionStyle>TemplateDefault</SyntaxSectionStyle>
        <IsVbSyntaxMerged>false</IsVbSyntaxMerged>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <IncludeExtensionMethods>false</IncludeExtensionMethods>
        <UseContentFromBaseMember>false</UseContentFromBaseMember>
        <IsEnumValuesEnabled>false</IsEnumValuesEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
        <ExcludedLanguages>
          <ExcludedLanguage>Delphi</ExcludedLanguage>
          <ExcludedLanguage>JScript</ExcludedLanguage>
          <ExcludedLanguage>CPP</ExcludedLanguage>
        </ExcludedLanguages>
      </DotNet>
      <Javascript>
        <IsBrowserCompatibilityIncluded>true</IsBrowserCompatibilityIncluded>
        <IsBrowserCompatibilityIncludedOnEveryPage>true</IsBrowserCompatibilityIncludedOnEveryPage>
        <UseDollarPrefix>true</UseDollarPrefix>
        <WrapInDomReady>false</WrapInDomReady>
        <IsIncludeParametersInUsageSyntaxEnabled>true</IsIncludeParametersInUsageSyntaxEnabled>
        <IsGenerateTypeMemberPagesEnabled>false</IsGenerateTypeMemberPagesEnabled>
        <SyntaxIndentParametersLength>60</SyntaxIndentParametersLength>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Javascript>
      <Ajax>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Classic</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
      </Ajax>
      <Java>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="3" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>MethodsOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>SciChart 2019 Java</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Java>
      <Com>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <UseHelpStrings>true</UseHelpStrings>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <HelpStringUsage>Merge</HelpStringUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="3" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Com>
      <Database>
        <TemplateName>Material</TemplateName>
        <IncludeSqlServerSystemObjects>false</IncludeSqlServerSystemObjects>
        <IncludeSourceForViews>true</IncludeSourceForViews>
        <IncludeSourceForTriggers>true</IncludeSourceForTriggers>
        <IncludeSourceForUserDefinedFunctions>true</IncludeSourceForUserDefinedFunctions>
        <IncludeSourceForStoredProcedures>true</IncludeSourceForStoredProcedures>
        <IncludeScriptForTables>true</IncludeScriptForTables>
        <IncludeScriptForOtherItems>true</IncludeScriptForOtherItems>
        <RemoveTaggedCommentsFromSource>true</RemoveTaggedCommentsFromSource>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeSchemaInformation>true</IncludeSchemaInformation>
        <CheckAllExtendedProperties>false</CheckAllExtendedProperties>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <MaximumDependencyLevel>5</MaximumDependencyLevel>
        <UseSqlServerDataTypeNames>true</UseSqlServerDataTypeNames>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Database>
      <Xsd>
        <TemplateName>Material</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <IncludeOverview>true</IncludeOverview>
        <IncludeOverviewReferencedChildren>false</IncludeOverviewReferencedChildren>
        <OverviewLevels>5</OverviewLevels>
        <DiagramStyle>
          <DefaultTextOptions></DefaultTextOptions>
          <Options></Options>
        </DiagramStyle>
        <IncludeAttributesInDiagrams>true</IncludeAttributesInDiagrams>
        <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
        <DiagramItemMaxExtendedRecurse>3</DiagramItemMaxExtendedRecurse>
        <DiagramItemMaxRecurse>3</DiagramItemMaxRecurse>
        <GenerateDiagrams>true</GenerateDiagrams>
        <IsOverrideTemplateDiagramStyleEnabled>false</IsOverrideTemplateDiagramStyleEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Xsd>
      <Filters />
      <WebService>
        <TemplateName>Material</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <GroupExamples>true</GroupExamples>
        <IncludeRequestBodyDiagram>true</IncludeRequestBodyDiagram>
        <IncludeResponseBodyDiagram>true</IncludeResponseBodyDiagram>
        <IncludeRequestBodyOverview>true</IncludeRequestBodyOverview>
        <IncludeResponseBodyOverview>true</IncludeResponseBodyOverview>
        <IncludeRequestBodySampleData>true</IncludeRequestBodySampleData>
        <IncludeResponseBodySampleData>true</IncludeResponseBodySampleData>
        <IsSampleDataColorized>true</IsSampleDataColorized>
        <ImplyJsonSchemas>true</ImplyJsonSchemas>
        <IsGroupedByResource>false</IsGroupedByResource>
        <IncludeFullResourceUriInOperationPages>true</IncludeFullResourceUriInOperationPages>
        <UseAbsolutePathForResourcePaths>true</UseAbsolutePathForResourcePaths>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </WebService>
      <HelpCompiler CompileHelpFile="false" IsWebOutputEnabled="true" IsMarkOfTheWebEnabled="false">
        <MarkOfTheWebDomain>(0014)about:internet</MarkOfTheWebDomain>
        <HelpFileVersion>Help2</HelpFileVersion>
        <Help2Namespace>newprojecttest1</Help2Namespace>
        <Help2FileId>Default</Help2FileId>
        <Help2PluginToNamespaces></Help2PluginToNamespaces>
        <Help2Plugin>false</Help2Plugin>
        <RuntimeMerge></RuntimeMerge>
        <IncludeTextPopupFile>false</IncludeTextPopupFile>
        <Help3BuildIdentifier></Help3BuildIdentifier>
        <Help3VendorName></Help3VendorName>
        <Help3CatalogName>VS</Help3CatalogName>
        <Help3CatalogVersion>100</Help3CatalogVersion>
        <Help3CatalogLocaleText>en-US</Help3CatalogLocaleText>
        <Help3TemplateName></Help3TemplateName>
        <Help3ProductName></Help3ProductName>
        <Help3BookName></Help3BookName>
        <IsHelp3CreateRegistrationScriptEnabled>true</IsHelp3CreateRegistrationScriptEnabled>
        <IsHelp3RegisterLocallyEnabled>true</IsHelp3RegisterLocallyEnabled>
        <IsHelp3SigningEnabled>false</IsHelp3SigningEnabled>
        <IsHelp3ValidationEnabled>false</IsHelp3ValidationEnabled>
        <IsHelp3KeywordsEnabled>false</IsHelp3KeywordsEnabled>
        <BrowserHelpTemplateName>SciChart 2019</BrowserHelpTemplateName>
        <IsCustomHtmlHelpWindowSettings>false</IsCustomHtmlHelpWindowSettings>
        <CustomHtmlHelpWindowSettings>
          <IsExpandVisible>true</IsExpandVisible>
          <IsBackVisible>true</IsBackVisible>
          <IsForwardVisible>true</IsForwardVisible>
          <IsStopVisible>false</IsStopVisible>
          <IsRefreshVisible>false</IsRefreshVisible>
          <IsHomeVisible>false</IsHomeVisible>
          <IsLocateVisible>true</IsLocateVisible>
          <IsOptionsVisible>true</IsOptionsVisible>
          <IsPrintVisible>true</IsPrintVisible>
          <IsZoomVisible>false</IsZoomVisible>
          <IsPreviousVisible>false</IsPreviousVisible>
          <IsNextVisible>false</IsNextVisible>
          <NavigationPaneWidth>200</NavigationPaneWidth>
          <IsNavigationPaneInitiallyClosed>false</IsNavigationPaneInitiallyClosed>
          <IsAutoSyncWithTocEnabled>true</IsAutoSyncWithTocEnabled>
          <IsSearchTabVisible>true</IsSearchTabVisible>
          <IsHistoryTabVisible>false</IsHistoryTabVisible>
          <IsFavoritesTabVisible>true</IsFavoritesTabVisible>
          <DefaultTab>Contents</DefaultTab>
          <IsSaveUserWindowSettingsEnabled>true</IsSaveUserWindowSettingsEnabled>
          <WindowSizeHeight>400</WindowSizeHeight>
          <WindowSizeWidth>600</WindowSizeWidth>
          <WindowLocationLeft>0</WindowLocationLeft>
          <WindowLocationTop>0</WindowLocationTop>
        </CustomHtmlHelpWindowSettings>
        <IsWebOutputRootPageLinkEnabled>true</IsWebOutputRootPageLinkEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
        <HelpFileName></HelpFileName>
      </HelpCompiler>
      <RuleEngine>
        <Rules MatchType="All" Caption="" IsReadOnly="false" Id="root">
          <Rules>
            <RuleGroup MatchType="All" Caption="" IsReadOnly="false" Id="standard">
              <Rules>
                <Rule MatchType="All" Caption="" IsReadOnly="false" Id="outputtype">
                  <Conditions>
                    <RuleCondition Caption="" IsReadOnly="false" BuildFlagMatchType="None" Id="4c7ca296-f253-4ae9-9d90-ef8cb42183a8" Designer="BUILDFLAGS">
                      <BuildFlags>{46CEF21D-3301-4517-A875-A0906828390E}</BuildFlags>
                    </RuleCondition>
                  </Conditions>
                </Rule>
              </Rules>
            </RuleGroup>
            <RuleGroup MatchType="All" Caption="" IsReadOnly="false" Id="custom">
              <Rules />
            </RuleGroup>
          </Rules>
        </Rules>
      </RuleEngine>
      <ShortFileNames GenerateShortFileNames="true" />
      <TopicsProjectProfilePlugin>
        <TemplateName>SciChart 2019 Topics</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <AutoGenerateTopicIndexEntries>true</AutoGenerateTopicIndexEntries>
        <AutoGenerateCategoryIndexEntries>true</AutoGenerateCategoryIndexEntries>
        <IncludeOnlyCompletedTopics>false</IncludeOnlyCompletedTopics>
        <IsNewSource>CreationDateTime</IsNewSource>
        <IsNewCustomTopicPropertyId></IsNewCustomTopicPropertyId>
        <IsAnchorParsingEnabled>false</IsAnchorParsingEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </TopicsProjectProfilePlugin>
      <BookletsProjectProfilePlugin>
        <TemplateName></TemplateName>
      </BookletsProjectProfilePlugin>
      <WidgetsProjectProfilePlugin>
        <IsIncludeInThisTopicWidgetEnabled>false</IsIncludeInThisTopicWidgetEnabled>
        <InThisTopicWidgetHeadingsMinimum>5</InThisTopicWidgetHeadingsMinimum>
        <InThisTopicWidgetTagName>H1</InThisTopicWidgetTagName>
        <InThisTopicWidgetPrefix>$$In_This_Topic$$</InThisTopicWidgetPrefix>
        <WidgetTypes Version="2011.1" />
      </WidgetsProjectProfilePlugin>
      <OtherFiles>
        <IsLogoEnabled>true</IsLogoEnabled>
        <LogoOtherFileName>images\scichart-logo1.png</LogoOtherFileName>
        <IsGoogleAnalyticsEnabled>false</IsGoogleAnalyticsEnabled>
        <GoogleAnalyticsId></GoogleAnalyticsId>
        <IsOtherHeadContentEnabled>true</IsOtherHeadContentEnabled>
        <OtherHeadContent>&lt;meta name="keywords" content="Android,Chart, Charting, Android Chart, Android Charting, Android Realtime Chart, Android High Performance Chart, Fast Android Charts, Best Android Charts, Fastest Android Chart"/&gt;
&lt;meta property="og:locale" content="en_US"/&gt;
&lt;meta property="og:type" content="article"/&gt;
&lt;meta property="og:description" content="Android Chart Documentation for the SciChart Android v3.x SDK. Featuring 20+ Android and Xamarin.Android Chart Types, you can create rich charting apps with our powerful API"/&gt;
&lt;meta name="twitter:card" content="summary"/&gt;
&lt;meta name="twitter:description" content="Android Chart Documentation for the SciChart Android v2.x SDK. Featuring 20+ Android and Xamarin.Android Chart Types, you can create rich charting apps with our powerful API"/&gt;
&lt;meta name="twitter:site" content="@scichart"/&gt;
&lt;meta name="twitter:creator" content="@scichart"/&gt;</OtherHeadContent>
      </OtherFiles>
      <VersionsAndEditions>
        <EditionId></EditionId>
      </VersionsAndEditions>
      <Publishing />
      <OutputDirectory>..\..\..\..\SCDocsOutput_A</OutputDirectory>
    </ProjectProfile>
  </ProjectProfiles>
  <HelpContextIDHeaderFile></HelpContextIDHeaderFile>
  <PrimaryLocale CultureId="-">
    <ExportDateTime></ExportDateTime>
    <Dictionary></Dictionary>
    <Notes></Notes>
    <PhraseCultureId></PhraseCultureId>
    <EncodingCulture></EncodingCulture>
    <IsEnhancedWordBreakAnalysisEnabled>false</IsEnhancedWordBreakAnalysisEnabled>
  </PrimaryLocale>
  <IsNewProject>false</IsNewProject>
</DocumentXProject>