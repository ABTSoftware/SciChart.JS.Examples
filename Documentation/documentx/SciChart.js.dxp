<?xml version="1.0" encoding="utf-8"?>
<DocumentXProject Id="c94c9758-3b1d-470c-8461-0129a7e01e41" Version="2018.1">
  <Features />
  <SeparateFiles>false</SeparateFiles>
  <Flags>
    <Flag Id="{46CEF21D-3301-4517-A875-A0906828390E}" HighlightColor="#FFA1FFD0">Exclude from Online</Flag>
    <Flag Id="{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" HighlightColor="#FFFFFFA1">Exclude from Booklet</Flag>
  </Flags>
  <PropertyDefinitions>
    <PropertyDefinition Id="4762301e-2f7f-49ae-a6d9-51a79750d8b3" Name="DocumentationHome" Description="" PropertyType="Text" />
    <PropertyDefinition Id="31a70858-084a-43e7-a307-43e2cdae0808" Name="DocumentationRoot" Description="" PropertyType="Text" />
    <PropertyDefinition Id="c58acc35-6e43-42f0-bf51-b3afa633f0cc" Name="PlatformInfoHome" Description="" PropertyType="Text" />
    <PropertyDefinition Id="d50d68a0-b78a-435c-aa4a-79a1a79209c5" Name="PlatformName" Description="" PropertyType="Text" />
    <PropertyDefinition Id="dffa9b8e-bb62-4b2f-be87-ccd1375cf6b9" Name="PlatformVersion" Description="" PropertyType="Text" />
  </PropertyDefinitions>
  <PropertyDefinitionValues />
  <Title />
  <ContentFiles />
  <AutoDocFiles />
  <ContentFromProjectPlugin />
  <Filters>
    <ExcludedItems>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing_namespace</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Credentials</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Decoder</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.Decoder+LicenseType</ExcludedItem>
      <ExcludedItem>SciChart.Core~com.scichart.core.licensing.ILicenseProvider</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+attr</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+dimen</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+drawable</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+id</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+layout</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+style</ExcludedItem>
      <ExcludedItem>SciChart.Charting~com.scichart.charting.R+styleable</ExcludedItem>
    </ExcludedItems>
  </Filters>
  <JavascriptProjectPlugin />
  <ComProjectPlugin />
  <AjaxProjectPlugin />
  <JavaProjectPlugin />
  <DotNetAssemblies />
  <DatabaseProjectPlugin>
    <Databases />
  </DatabaseProjectPlugin>
  <XsdProjectPlugin>
    <XsdSchemas />
  </XsdProjectPlugin>
  <GlossaryProjectPlugin>
    <IsGlossaryOutputEnabled>true</IsGlossaryOutputEnabled>
    <Glossary>
      <GlossaryItems />
      <Title />
    </Glossary>
  </GlossaryProjectPlugin>
  <WebServiceProjectPlugin>
    <WebServices />
  </WebServiceProjectPlugin>
  <HelpProjectPlugin ShowGettingStartedPage="false" />
  <OtherFilesProjectPlugin>
    <OtherFiles>
      <OtherFile Id="a68b76d0-866c-4231-86eb-3bfc330b85c2" FileName="stylesheets\customstyles.css" SourceData="" BuildFlags="" />
      <OtherFile Id="6aadccda-fd68-4d1c-a5a9-f78eb19ca22b" FileName="images\can-i-use-wasm.png" SourceData="" BuildFlags="" />
      <OtherFile Id="02c1ca17-41c0-472e-a192-b7f9d7c6dbcb" FileName="images\can-i-use-webgl1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="76a25f3e-4e15-4bfb-8547-08d5298edd3b" FileName="images\can-i-use-webgl2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="14e43d0b-ddfa-448c-ba9b-39a8ff7f7961" FileName="images\Tutorial-01-npminit.PNG" SourceData="" BuildFlags="" />
      <OtherFile Id="88870a86-9838-4efb-9d00-85b57c260545" FileName="images\Tutorial-01-npminstallscichart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9d583844-8079-4c32-ace8-ef8283fbd83a" FileName="images\Tutorial-01-npminstallwebpack.png" SourceData="" BuildFlags="" />
      <OtherFile Id="640ec6b7-4459-49c8-98ff-1dc7247d3b93" FileName="images\Tutorial-01-packagejson.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3159c20d-cf2b-4f9f-ae19-75d2231fc112" FileName="images\Tutorial-01-webpack-config-js.png" SourceData="" BuildFlags="" />
      <OtherFile Id="82a9696b-782f-4749-9729-0d8af4877423" FileName="images\Tutorial-01-scichart-js.png" SourceData="" BuildFlags="" />
      <OtherFile Id="05c7de98-dbf5-487e-a6e7-adb9d1ace18e" FileName="images\Tutorial-02-Simple-Line-Chart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8676baa1-495e-4546-b1fe-0332d160bfb7" FileName="images\Tutorial-02-1-Million-Points.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4915f46a-79bb-4600-89be-84132be23a54" FileName="images\tutorial-03-zoom-pan.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="35235148-8e86-41b3-8fd2-c2fbdd7d1adb" FileName="images\tutorial-03-zoom-pan-2.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="cf90399f-0881-497d-b7ee-f8eec1d1936b" FileName="images\SciChartBasics_RenderableSeriesUml.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6a774644-d9e3-4c31-870b-1e63ae1efe11" FileName="images\SciChartBasics_AxisUml.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0d4023ba-98cf-472d-a158-9206157a64a2" FileName="images\SciChartBasics_AnnotationsUml.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f087bed4-fac7-42d8-8862-c9f786c3e648" FileName="images\SciChartBasics_ModifiersUml.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fa9f62b3-cc7a-46d8-8c68-b160d318a7ba" FileName="images\Axis_visibleRange.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3bfde819-69bf-4a5d-a576-1664276a7449" FileName="images\AxisTicks-majorminorticks.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b868a43f-e1d2-4e62-b0d3-ad48d6044cc2" FileName="images\Axis_MultiAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dbc75e56-f104-4a02-ac3b-c6a6a26bbbc2" FileName="images\Axis_MultiAxis_WithSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="561eb6f5-61ab-48f3-b34a-4671874b1bd6" FileName="images\Axis_VerticalChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0d290cba-1d3b-46bb-9c39-21c2cec3f1c4" FileName="images\Axis_VerticalChart_Flipped.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4889ea85-3259-4fea-a316-ed129b2a2446" FileName="images\Axis_styling.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2da123d7-c5c6-4b7a-bdae-54759fea591b" FileName="images\Axis_Styling2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8ed52829-1d4d-44db-9f01-7b5b029de447" FileName="images\Axis_pixel_coordinates.png" SourceData="" BuildFlags="" />
      <OtherFile Id="137e0495-0737-4202-8ed5-70edcc6a05d0" FileName="images\Axis_Series_ViewRect.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4177ab10-6e0e-4d58-bb26-3b32aa8cf9bb" FileName="images\RenderSeries_LineChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cf1c0bef-7cac-455e-a908-470ab7b01e76" FileName="images\RenderSeries_LineChart_NaNs.png" SourceData="" BuildFlags="" />
      <OtherFile Id="80840464-3b92-40b8-af86-31fc6bec5c02" FileName="images\RenderSeries_LineChart_PointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dbc3de98-abbb-462e-b30a-edd4df0324f0" FileName="images\RenderSeries_LineChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bd4e68f7-3ffd-40ab-b110-37aa0eaab1b3" FileName="images\RenderSeries_ScatterChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c607f0a8-3aba-487f-a166-588053407fa1" FileName="images\RenderSeries_ScatterChart_Nans.png" SourceData="" BuildFlags="" />
      <OtherFile Id="be39010f-d189-4e67-a6a1-5245c6a66417" FileName="images\RenderSeries_ScatterChart_PointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="76e07422-4360-4285-a154-7c1fd0f17581" FileName="images\RenderSeries_MountainChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6cd3ba93-8b9f-491d-9d7a-30780c84cdaf" FileName="images\RenderSeries_MountainChart_NaNs.png" SourceData="" BuildFlags="" />
      <OtherFile Id="46c0cddb-139b-49a8-b783-81bda1913e3b" FileName="images\RenderSeries_MountainChart_PointMarker.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c1884636-d2ea-4bfb-b298-d7182b839451" FileName="images\RenderSeries_MountainChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ffb65af8-7604-4987-a587-6a57ebf838d3" FileName="images\RenderSeries_ColumnChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fed017ca-9a7e-4b8c-9ed0-0c55cbe81778" FileName="images\RenderSeries_ColumnChart_NaNs.png" SourceData="" BuildFlags="" />
      <OtherFile Id="afdbdc70-42e0-4fc6-af3c-3caf731aa5db" FileName="images\RenderSeries_ColumnChart_PointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="93c479b3-0526-4f8d-b082-14b45add1cfd" FileName="images\RenderSeries_ColumnChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4e5ffeaf-5930-45df-a387-179f95129630" FileName="images\RenderSeries_HeatmapChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1bba64ae-5535-4836-9825-a39f36a79073" FileName="images\RenderSeries_CandlestickChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8d20532f-435d-4add-bd6b-4a7c473fc40f" FileName="images\RenderSeries_OhlcChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8165e817-42e7-48d5-965d-fa4db4c4ff05" FileName="images\RenderSeries_BandChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5ed6f7ea-8666-4567-bd1d-19c36a39f5e9" FileName="images\RenderSeries_BandChart_NaN.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f14eafa8-dfdb-4fe8-932d-0f2f27be3261" FileName="images\RenderSeries_BandSeries_UseCase.png" SourceData="" BuildFlags="" />
      <OtherFile Id="774d2292-e981-4995-a3d0-f208f93ffcc6" FileName="images\RenderSeries_BandSeries_UseCase2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d6686ade-fcb9-4ac3-8ef2-626520c5982a" FileName="images\RenderSeries_BandChart_FillAboveBelowZero.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2b42dabd-7781-4ad8-8c6a-76af9f91e122" FileName="images\RenderSeries_CandlestickChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1ec42295-bac6-42e3-92c5-9af80ea69351" FileName="images\RenderSeries_OhlcChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e9ce8e36-7c1c-42a7-b010-a0a866b66257" FileName="images\RenderSeries_FanChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c0236caa-7da0-4082-8a9c-12d5947c4770" FileName="images\RenderSeries_BubbleChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a1e6057d-1576-4cc1-857d-a7f9563bd0aa" FileName="images\RenderSeries_BubbleChart_NaN.png" SourceData="" BuildFlags="" />
      <OtherFile Id="df9c0705-5813-4f52-af2f-98c6f1e5b8ee" FileName="images\RenderSeries_BubbleChart_PointMarker.png" SourceData="" BuildFlags="" />
      <OtherFile Id="546980f9-eb52-4f91-b6ca-66cc9ec9ffca" FileName="images\RenderSeries_StackedColumnChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e057f8a1-4670-4e1d-aa45-473017ee8fea" FileName="images\RenderSeries_StackedColumnChart_TwoGroups.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d2d29709-a109-43e4-8858-e1d613512dc3" FileName="images\RenderSeries_StackedColumnChart_TwoGroupsB.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7eb84af8-257e-41e0-baf7-59091f1d2e02" FileName="images\RenderSeries_StackedColumnChart_ThreeGroups.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b34ab628-4e52-4bbe-a8cf-227d57aac193" FileName="images\RenderSeries_StackedColumnChart_100Percent.png" SourceData="" BuildFlags="" />
      <OtherFile Id="46b6699b-67dc-4aea-a329-b0f5583f1f95" FileName="images\RenderSeries_StackedMountainChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8309a70b-8565-4ce2-b39a-0bef815b3b86" FileName="images\RenderSeries_StackedMountainChart_100Percent.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d5139b50-c07b-4525-8447-125ddcead3a2" FileName="images\RenderSeries_PieChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="502ba8a5-b549-4cd7-8036-6211a4b6872f" FileName="images\RenderSeries_DonutChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="271b8f1b-5632-4241-8caa-409a06a4b201" FileName="images\RenderSeries_ScatterChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7f13f4b7-7040-4dff-8d63-791c87eec5c7" FileName="images\ChartModifiers_ZoomPanModifier_24fps.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="23526f11-a6cf-42fe-8c32-e0543281a4b1" FileName="images\ChartModifiers_ZoomExtents_24Fps.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="871ff0e5-0f4f-4bd5-97c7-fc6ca669860d" FileName="images\ChartModifiers_RubberBandZoom_24Fps.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="c17162de-8da0-44d6-bc4c-a9d3b4bb76aa" FileName="images\ChartModifiers_YAxis_XAxisDragModifier.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="ada26725-26e4-4fae-bb04-dc3ecc20ff98" FileName="images\Annotations_AreEasy.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7a941fdc-8eeb-4c1d-aa95-cb142224054d" FileName="images\Annotations_AnchorPoints.png" SourceData="" BuildFlags="" />
      <OtherFile Id="01b64d42-1703-44e4-9213-2eb0c58360f5" FileName="images\Annotations_BoxAnnotation.PNG" SourceData="" BuildFlags="" />
      <OtherFile Id="cd855fa9-f178-42f8-818d-1ba1f644e57f" FileName="images\Annotations_BoxAnnotation_CoordinateMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ca90de3a-d9d0-4bf9-a2e4-609d60452b3e" FileName="images\Annotations_LineAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a485ec64-dfff-462a-b814-3e4e3d6570a8" FileName="images\Annotations_LineAnnotation_CoordinateMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="63e4622b-1d31-44e9-9dbf-72c7d59345b0" FileName="images\Annotations_TextAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="60871922-5834-4cc2-bb13-4e8b8acf008a" FileName="images\Annotations_TextAnnotation_CoordinateMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0fd24f3a-940b-4cfc-b979-953616bf9a67" FileName="images\Annotations_CustomAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a20f0144-2d42-4f13-abe2-b1bfbf9ca08f" FileName="images\Annotations_CustomAnnotation_TradeMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="55157904-fd32-4e49-b597-d310277e2b35" FileName="images\ThemeManager_DarkTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="29d5db32-c122-4877-91a5-7a17f23f24f9" FileName="images\ThemeManager_LightTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bf1d10a4-49c3-462b-8696-f239cd274f79" FileName="images\ThemeManager_CustomTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="234f381b-2143-494a-a8c2-24bb0858dd0c" FileName="images\RenderSeries_BubbleSeries_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0e632a76-e7c6-43ba-98e6-fe44585502ed" FileName="images\RenderableSeries_GlowEffect_Ghosted.png" SourceData="" BuildFlags="" />
      <OtherFile Id="12e77d86-aa09-4602-aaa3-4c0e63a7b78b" FileName="images\RenderableSeries_GlowEffect_VitalSigns.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4a9f99fc-b2e3-45c2-ba95-53dc7c01bdd0" FileName="images\scichart-js-modifiers-cursormodifier.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="c9359b7f-5004-4f7a-9c4f-541a95cb5c7e" FileName="images\ChartModifiers_RolloverModifier.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="2abf5d9b-37ed-4de0-91c8-a93126ff574c" FileName="images\ChartModifiers_RolloverModifier_VerticalLine.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0a306f45-98fa-46f2-8225-22139fa5ed59" FileName="images\ChartModifiers_MouseWheelZoomModifier.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="3e626c48-8ef5-4758-bd67-6ecae4123b9d" FileName="images\SciChartLogo.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d25faf7f-ced5-4908-aaed-8626aae5ef3d" FileName="images\ChartModifiers_RolloverModifier_CustomTooltipStyle.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0e70537f-8149-4b22-a633-239b3db4b7a7" FileName="images\ChartModifiers_RolloverModifier_CustomMarkerStyle.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e3f53ee-3bbb-48af-83cf-b8b19225bcce" FileName="images\ChartModifiers_RolloverModifier_CustomTooltipSvg.png" SourceData="" BuildFlags="" />
      <OtherFile Id="355613b4-fd7f-4641-b9af-a51263ba0723" FileName="images\ChartModifiers_RolloverModifier_CustomLegend.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6322b8e0-b937-4caf-9449-63123ffa00f1" FileName="images\ExamplesSuite_VsCode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41a5ec19-22e1-4268-b985-a9a171997de1" FileName="images\Tutorial-04-realtimeupdates-static-data.png" SourceData="" BuildFlags="" />
      <OtherFile Id="03f9e7c7-c683-41fc-80d2-b0c1ba7f382d" FileName="images\Tutorial_Realtime_JavaScript_Chart_Update.gif" SourceData="" BuildFlags="{46CEF21D-3301-4517-A875-A0906828390E},{4AAE0FD4-7313-4FEE-A25F-0785B885F736}" />
      <OtherFile Id="9b3db261-5f52-4725-9bbe-d883badfd788" FileName="videos\Tutorial-04-SciChart-js-realtime-javascript-chart.mp4" SourceData="" BuildFlags="" />
      <OtherFile Id="01956cc1-e753-4501-a636-87f61e8c6127" FileName="videos\Tutorial-04-SciChart-js-realtime-javascript-chart-appending.mp4" SourceData="" BuildFlags="" />
      <OtherFile Id="b1ce957c-547c-4c8f-b50a-cbe61b9c4bd5" FileName="videos\Tutorial-04-SciChart-js-realtime-javascript-chart-scrolling.mp4" SourceData="" BuildFlags="" />
      <OtherFile Id="1ebd3757-bc6a-473a-981c-874b79184d6d" FileName="videos\Tutorial-05-SciChart-js-zooming-realtime-javascript-chart.webm" SourceData="" BuildFlags="" />
      <OtherFile Id="b424f3d4-8d42-497b-81c3-50317c99373b" FileName="videos\Tutorial-05-SciChart-js-panning-realtime-javascript-chart.webm" SourceData="" BuildFlags="" />
      <OtherFile Id="0bcd1752-9bc1-4df7-9883-11b69bfdf051" FileName="images\tutorial-06-line-annotation.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4c6e3fb5-55ce-4c64-92a3-b94ea0a32694" FileName="images\tutorial-06-four-annotations.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="aa67cbee-6f77-4226-ab92-7c682854aba9" FileName="images\tutorial-07-5-series.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="c572f9c9-5db4-4317-8f34-1b0c2e74ff1c" FileName="images\tutorial-07-legend.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="66ff8d79-d2a9-4d1e-9bed-dce2308425c3" FileName="images\tutorial-07-cursor-modifier.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="2eb3cdc1-4114-4ed8-a794-4fada68d5573" FileName="images\tutorial-07-tooltips.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="85b35549-714b-4ba5-8e63-cbaaa52cfefa" FileName="images\tutorial-08-two-axes.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="3cfff610-5b32-4104-a030-631827ff070b" FileName="images\tutorial-08-two-axes-and-series.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="eae77cf0-e1c7-425e-acc1-318d0a3c589e" FileName="images\tutorial-08-two-axes-with-annotation.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="4ce30826-8cf2-4e68-8619-f84f8513eb17" FileName="videos\Tutorial-08-SciChart-js-multiple-axis-drag-modifier.webm" SourceData="" BuildFlags="" />
      <OtherFile Id="1540c749-1d95-4195-a2fd-0f90a666fb39" FileName="images\Tutorial-05-JavaScript-Realtime-Ticking-Stock-Chart-Example.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9bb02ecc-0676-4e62-8e05-e4fbdad8da1b" FileName="images\tutorial-09-one-chart.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="65db4c1c-5a90-4c14-96fb-eed301870da3" FileName="images\tutorial-09-two-charts.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="61a85d7e-aec5-4207-aec1-fa4b00248e4a" FileName="videos\Tutorial-09-SciChart-js-linking-charts.webm" SourceData="" BuildFlags="" />
      <OtherFile Id="e932bf70-24da-4929-a843-4a2da69cab12" FileName="images\tutorial-09-sync-width.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1d2490b7-6f76-410b-8c88-ba7f2d9f9b33" FileName="videos\Tutorial-09-SciChart-js-linking-charts-modifiers.webm" SourceData="" BuildFlags="" />
      <OtherFile Id="3ec87bd4-fdcc-437e-a6c7-25acaa293f06" FileName="images\Tutorial-08-axis-drag.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="aa4f3e3a-56ef-4a3e-bd17-4a081a09f3d7" FileName="images\tutorial-10-vertical-charts-1.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a82d5541-fe48-4aa0-be2e-1046a2202cda" FileName="images\tutorial-10-vertical-charts-2.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="90c8ffd4-0b97-4d6d-82c1-393cc1e61eff" FileName="images\RenderableSeries_ContoursChart.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="77e162d0-acd1-4a55-aad3-45540c7265be" FileName="images\SciChartSurface_Padding.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d64b313c-b61a-45af-b8ab-692b76d2c2f4" FileName="images\SciChartSurface_Padding_Zero.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d711c421-3a41-4fe9-8865-5cc67d6f876f" FileName="images\Axis_LabelPadding.png" SourceData="" BuildFlags="" />
      <OtherFile Id="11c2ba7b-daec-416a-947a-46d49bc9dec4" FileName="images\Axis_AxisTitlePadding.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3790cae4-feb1-4d8f-bd5d-534512e280c0" FileName="images\RenderSeries_DigitalLineChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="327799e9-2cce-45f0-b69f-7b1902a2092e" FileName="images\RenderSeries_DigitalLineChart_NaN.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e0022fcf-e476-4d37-8e99-4333dae8143c" FileName="images\RenderSeries_DigitalLineChart_PointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ddc499af-66c6-42c3-a0a1-efbf8e7bb9e0" FileName="images\RenderableSeries_DigitalLineChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fb16d415-3afb-47f6-acd2-bb7d565c0c10" FileName="images\RenderableSeries_DigitalMountainChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="72f7096e-3712-4ea9-92dd-7e1bfa7fe5f9" FileName="images\RenderableSeries_DigitalMountainChart_NaN.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f936f88b-89e8-4324-ad97-e6dd22171f4c" FileName="images\RenderableSeries_DigitalMountainChart_PointMarkers.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e14d114d-512b-4252-a652-f711fba52d3f" FileName="images\RenderableSeries_DigitalMountainChart_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="40ea8205-d395-47e9-9f2a-8b8c88259101" FileName="images\RenderableSeries_DigitalBandChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7ad2be48-3f1d-42a1-9525-b9fbb534b1d7" FileName="images\RenderableSeries_DigitalBandChart_NaN.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fcdcf35c-c716-40b3-8d72-68c0d7dcb83b" FileName="images\Annotations_VerticalLineAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="191a6438-c74a-42aa-89a6-b1b317d10f10" FileName="images\Annotations_HorizontalLineAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dfd8b7f6-46bd-402c-b353-c902e969a278" FileName="images\Annotations_AxisMarkerAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0bd4037e-068f-472b-9d75-8391f151472e" FileName="images\RenderableSeries_SplineLineRenderableSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7b005aac-f08c-46b6-bb12-ccff5c38b813" FileName="images\RenderableSeries_SplineMountainSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e4df60e7-ba62-4fe1-9adf-d28e50296338" FileName="images\RenderableSeries_SplineBandChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2c53453a-02b4-4c63-8dc4-6553735f5314" FileName="images\Styling_DashedLine_10_3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d5a63fb6-d60d-41b3-b24d-1b6311675dec" FileName="images\Styling_DashedLine_2_2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1dbcf7e9-7d1b-460f-89ef-c9e8ed57e6f8" FileName="images\Styling_DashedLine_5_5.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3fa2f8a5-cccf-4507-b4a2-6674a78a8713" FileName="images\Styling_DashedLine_10_25.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e232104-95d0-4286-a5d9-aa8f1bf95026" FileName="images\Styling_DashedLineStylingExampleJavascript.png" SourceData="" BuildFlags="" />
      <OtherFile Id="91c924e9-1e45-42bd-a533-bd25ca8cdf7d" FileName="images\Axis_BorderStyling.png" SourceData="" BuildFlags="" />
      <OtherFile Id="72a5bf17-17c9-4ee8-9d3a-4eea97a474bf" FileName="images\SweepAnimationBandSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="5560074f-cb77-4c4b-960f-6b2b25f5ab67" FileName="images\FadeAnimation_RenderableSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="12d7bd28-0e00-4a9a-923b-4331e09e01bf" FileName="images\ScaleAnimation_RenderableSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="0f39e860-f9ad-4f9e-aeda-1d7499607b12" FileName="images\WaveAnimation_RenderableSeries.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="2c6323b0-9fad-4f97-ab88-9261ebb9fa41" FileName="images\Annotations_VerticalLineAnnotation_SimpleExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5d816692-6a27-4983-a592-76e93610fad7" FileName="images\Annotations_VerticalLineAnnotation_LabelPlacementTopRight.png" SourceData="" BuildFlags="" />
      <OtherFile Id="10f43e56-4115-4baf-8e83-311c6a9bd977" FileName="images\Annotations_VerticalLineAnnotation_TruncatedInY.png" SourceData="" BuildFlags="" />
      <OtherFile Id="03ec99fc-6df9-48c8-b9cc-4a7abbb8dc0b" FileName="images\Annotations_HorizontalLineAnnotation_SimpleExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b56c6040-2561-4e5b-8634-cc7636ebc07f" FileName="images\Annotations_HorizontalLineAnnotation_LabelPlacement.png" SourceData="" BuildFlags="" />
      <OtherFile Id="335221cc-ef23-4134-a384-e1d7801aae37" FileName="images\Annotations_HorizontalLineAnnotation_Truncation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c7acbb18-87bf-4481-b1bd-8db943426dd4" FileName="images\Annotations_AxisMarkerAnnotation_SimpleExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="57457003-7bb3-4f6b-a9f2-3a5e31d7396f" FileName="images\ExamplesSuite_ZoomOperations.png" SourceData="" BuildFlags="" />
      <OtherFile Id="352ad1a5-2147-489c-8581-4411c62b73e6" FileName="images\ExamplesSuite_ViewSourceCode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e902bc6-f6ee-47e4-aaa4-f7c9d291e25a" FileName="images\ExamplesSuite_Github.png" SourceData="" BuildFlags="" />
      <OtherFile Id="66241e1b-5173-4267-8a0e-64a181a3f932" FileName="images\datapointselectionmodifier-1.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="1f7fd8bd-e4b9-434f-9dd8-b6f201a7662d" FileName="images\datapointselectionmodifier-2.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="55c90a0b-6643-4179-ac14-1eae68fbc1f0" FileName="images\seriesselectionmodifier-1.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="bd0365f2-426c-40ca-a805-72d09cef569d" FileName="images\seriesselectionmodifier-2.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="84221f59-2c4e-4a75-a674-26760c9774d3" FileName="images\seriesselectionmodifier-3.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="b13e97a8-b9cb-463b-9e59-e85b4b360704" FileName="images\AxisLabels_DecimalPlaces.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6130fb59-5d2e-4251-a42b-f107929a0990" FileName="images\AxisLabels_PrePostFix.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eb4dcba2-891d-4228-ae1b-2fbe10930c99" FileName="images\AxisLabels_DateFormat.png" SourceData="" BuildFlags="" />
      <OtherFile Id="18898ab8-6521-4d2d-afdd-95890b90d982" FileName="images\AxisTicks_Example1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a46ac2fd-70c9-42bf-86a7-472a0761c947" FileName="images\AxisTicks-Example2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7da401e2-88b2-4b01-b459-3b513ee32408" FileName="images\AxisTicks-Example3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1f6184b3-4a9f-4535-a1dc-9e799b200b1e" FileName="images\BuilderApi_CreateSeriesExample1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="319d6a1d-92c2-4097-9a0d-ed2162b4fe59" FileName="images\BuilderApi_CreateSeriesExample2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9517ad0a-3278-4fd7-a619-972a928eca9e" FileName="images\BuilderApi_TypeScript1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f333a67d-2e59-4395-894c-f63f74406177" FileName="images\BuilderAPI_TypeScript2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="453e44fe-8b5b-4cdf-8aa3-f360962f6917" FileName="images\BuilderAPI_TypeScript3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1b763c05-8fbf-4a9d-b796-3c0ce47fab53" FileName="images\PaletteProvider_Overview.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6ccfb4c4-c773-4a5c-ad2d-36e169cbf98c" FileName="images\PaletteProvider_Line1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="81940f00-600f-4671-bdfe-c1c219c04358" FileName="images\PaletteProvider_Line2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="44555b6b-3e16-4ca8-be62-61f380724cd4" FileName="images\PaletteProvider_Mountain1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="31e1df3b-a427-469a-8cdc-87096cba2ac2" FileName="images\PaletteProvider_Mountain2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="390631b8-68c8-4427-941e-380045e72f4d" FileName="images\PaletteProvider_Mountain3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="87ee8dfc-30d7-43eb-ac08-633724fb45f4" FileName="images\PaletteProvider_Band1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d415f138-d8d2-42ad-9065-ef2deef9b8ee" FileName="images\PaletteProvider_Band2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="41b5a155-dfbb-423f-8073-6c9003b97793" FileName="images\PaletteProvider_Bubble1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bd532a41-482f-4986-b44a-7f596291a888" FileName="images\PaletteProvider_Candle1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="93d07bc8-0b4d-4c2d-842b-ac925b498a6c" FileName="images\PaletteProvider_Column1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f7347f64-03c0-443e-8faa-5f63f65123b6" FileName="images\PaletteProvider_Scatter1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0e6e8dee-dfcd-4021-bdf4-6d2b660cc33c" FileName="images\Metadata_PaletteProvider.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c439b9f5-b796-49ca-b5f8-74a78ffd71ff" FileName="images\rollover.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="499da587-7746-4340-bb77-86ea9b4ab580" FileName="images\Animations_WaveAnimation1.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="8572b59e-20b7-46b0-8b3a-535e66bdb1b2" FileName="images\Animations_PointmarkerStyleAnimation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="87f87c2d-4a07-40dc-82fe-f43a82f96b2c" FileName="images\Animations_Column_Data_Animation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="4218f04e-8a48-4052-845d-0c3ccdfe2e7f" FileName="images\Animations-scatter-data-animation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="a47ebcc5-e3e6-4853-a600-a1723d6cd316" FileName="images\Styling_Ids.png" SourceData="" BuildFlags="" />
      <OtherFile Id="be517a13-2538-4444-84f5-69ed8c27abaa" FileName="images\Animations-scatter-data-and-style-animation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="fc537913-8370-42e5-b84f-0c616e2f3b22" FileName="images\Styling_TransparentBackground.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8c32065d-d361-4e2b-95ad-0c734fb2da7d" FileName="images\Styling_ImageBackgrounds.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ab3a4f1e-7066-41d4-b603-be8952a04575" FileName="images\Styling_BlurredBackground.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e2d5ec5-eb4d-4ef5-9b1a-ab8f06d142eb" FileName="images\Styling_WaitLoaderTheme_Default.png" SourceData="" BuildFlags="" />
      <OtherFile Id="296c1403-a8e0-4687-bbe3-19d91ebb41a8" FileName="images\Styling_WaitLoaderTheme_CustomColours.png" SourceData="" BuildFlags="" />
      <OtherFile Id="9e5f935e-f510-46b3-98a8-5a055f6e5917" FileName="images\Styling_AxisInCode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b55c5d7b-62b5-4b53-9cec-a73927176cf1" FileName="images\Styling_DarkThemev2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ac5c07d1-c0fb-411d-a499-3f1cc0140782" FileName="images\Styling_LightTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="ebb405b1-eb67-414e-a708-83655b31c83b" FileName="images\Styling_CustomTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1087381d-8210-43a9-8750-afc3788c2852" FileName="images\Styling_InheritTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e5ccbe77-3ec9-479c-b41f-78b5c69f4bd1" FileName="images\styling_custom_waitloader.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="7eb60349-d378-4d03-afd3-1073f720cb33" FileName="images\Filters_ScaleOffset.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3af6ba4f-f9e1-4f91-a386-43b41445d7ad" FileName="images\Filters_Trendline1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="59d8c5db-4f95-403e-bf4a-172412237ed6" FileName="images\Filters_Trendline2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="62f8f569-90a3-4755-881f-bc7ba45539e7" FileName="images\Filters_Trendline3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a80a7e5c-80a7-4608-8baf-970d023e5b1d" FileName="images\Filters_MovingAverage.png" SourceData="" BuildFlags="" />
      <OtherFile Id="973005af-e5d6-41f8-9e08-dd5375965191" FileName="images\movingAverage.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="559acbe9-b865-4b52-b4d5-7822050daf3e" FileName="images\Filters_Ratio.png" SourceData="" BuildFlags="" />
      <OtherFile Id="75ab4314-d99d-43ee-9cea-1dd7eca8b934" FileName="images\Filters_SimpleCustomFilter.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4be31037-2841-4b07-a6d1-58d296822900" FileName="images\Filters_Overview.png" SourceData="" BuildFlags="" />
      <OtherFile Id="00bcea44-2710-4128-91c2-1958db889563" FileName="images\HitTestApi_line-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b3deca1d-e517-4e55-9e6d-f51b2a57f6ba" FileName="images\HitTestApi_line-chart2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="204514ba-f891-47f0-a042-15b53a7d4aa1" FileName="images\BrowserZoom_Comparison1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4be8c8ad-7b45-4f04-a6e8-9b8bb5acc0ba" FileName="images\BrowserZoom_Comparison2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cc2f61e0-59df-478f-9d4c-d75518a44963" FileName="images\HitTestApi_line-chart-hittest-datapoint1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d6e0a100-c844-427f-8906-6b291b114ac0" FileName="images\HitTestApi_band-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2a48f280-39e5-41ea-8be6-a89d503213fa" FileName="images\HitTestApi_bubble-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="264a37f4-929f-4516-9a61-e2250871e159" FileName="images\HitTestApi_column-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4bff3d75-a0be-436e-8bc1-58e7456f5284" FileName="images\HitTestApi_heatmap-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c3ab3902-75d0-42fd-aa05-c1f5ae29a8e2" FileName="images\HitTestApi_metadata1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="72112346-7c47-4794-9fc9-db2a8bdb6f05" FileName="images\HitTestApi_mountain-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4095b638-7f6a-4bdf-bb29-21de29b241f6" FileName="images\HitTestApi_candlestick-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="400c68ad-4620-4452-92d3-59dc91cf14dd" FileName="images\HitTestApi_scatter-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5e16b3dd-7a29-48c3-856a-2d7da83f8f07" FileName="images\HitTestApi_stacked-column-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="03113355-0e9f-4209-9e8a-40ce367e419f" FileName="images\HitTestApi_stacked-mountain-chart1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5e2965ba-20b2-4523-92a2-5188abec5b83" FileName="images\textlabels1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dc6832ab-0987-46bd-8cba-16faaad06842" FileName="images\textlabels2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="01c92278-9f6d-4544-8e6d-41483ec6e9ef" FileName="images\textlabels3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c96e054c-fdef-46e6-a4c5-01e5f6d04b49" FileName="images\axisTitle.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7f9dc76e-0153-4721-9082-90a3f03aef98" FileName="images\rotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5eca15e1-9e89-461e-9ac2-8e2ca850b2d3" FileName="images\AxisLayout_PositionPixel.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d135d7db-8ea2-4c3f-ae78-2147ee36bf40" FileName="images\AxisLayout_InnerAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1bb7074d-239c-4b7e-b0f5-96eb0b95f214" FileName="images\AxisLayout_InnerAxesPositioning.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="54c72cf8-dcd1-4ad1-b428-8746f005bb15" FileName="images\AxisLayout_CentralAxes.png" SourceData="" BuildFlags="" />
      <OtherFile Id="72d46715-231e-4e0f-b5cc-8903d98d7c38" FileName="images\AxisLayout_CentralAxesConfigured.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d09defdc-f068-4cdb-93aa-a7a8d1dbc23d" FileName="images\AxisLayout_AxisIds.png" SourceData="" BuildFlags="" />
      <OtherFile Id="dc4118d8-ee56-42bd-8e2a-ecbbb9f866b6" FileName="images\StackedAxes_Overlapping.png" SourceData="" BuildFlags="" />
      <OtherFile Id="197fafeb-a2d0-4a59-8eb5-280853e26868" FileName="images\LogAxis_base2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="acbba8ff-3957-4da2-9925-717416ce0065" FileName="images\AxisLabels_ImageLables.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fcb700c3-2d54-4f21-9d70-006c40dcef22" FileName="images\WhatsNew_LogarithmicAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="82309a4c-c41a-4df5-a8e6-a03daaa666b6" FileName="images\WhatsNew_CentralAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d8695594-ca67-4f85-80ae-bc848cd614ac" FileName="images\WhatsNew_VerticallyStackedAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="aa85f8e0-a764-41b5-ba43-450c059ca391" FileName="images\WhatsNew_AxisImages.png" SourceData="" BuildFlags="" />
      <OtherFile Id="266658a4-ed53-4724-bcc4-2686b385a489" FileName="images\WhatsNew_AxisRotated.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4c1b81c6-00b2-48e1-9203-25ffa59f92c2" FileName="images\Overview_Basic.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4798869c-dabf-4354-8e66-0afd6eddc0f3" FileName="images\Overview_Interaction.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="fdc2c7bf-9dbd-4283-b877-ba3243cc4b66" FileName="images\Overview_CustomizedVisual.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5b3ae41b-dcaa-42b0-84b6-31c905b36a51" FileName="images\Overview_Transformed.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f3c367af-edee-4e98-967e-414244892cfe" FileName="images\Overview_Vertical.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bbe97d28-ab63-423e-8828-b44133a455fa" FileName="images\Accessibility_VoiceOverDataPoints.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="b033f32c-3d98-4b8a-a2a1-539e7bf56246" FileName="images\Accessibility_VoiceOverAxes.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="7076b354-fcbb-4873-ab20-148ee88bbcd2" FileName="images\Accessibility_VoiceOverVisisbleRange.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="01b19149-7851-45ef-b7b6-9e1db6d8a48f" FileName="images\vertically-stacked-axes.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="1c25b8d8-9563-4bbb-a56c-806748d444af" FileName="images\LegendModifier_1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d671dc70-08ca-489b-a72d-99130d5513ce" FileName="images\LegendModifier_2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="63bffd2f-3eb4-4c56-b944-910538e1c7ba" FileName="images\LegendModifier_3.png" SourceData="" BuildFlags="" />
      <OtherFile Id="688f5624-cefa-4240-b039-eecf6ccdf5c7" FileName="images\LegendModifier_4.png" SourceData="" BuildFlags="" />
      <OtherFile Id="750ad623-c7cf-4db7-898f-11cc8b5b6a45" FileName="images\Annotations_CustomAxisMarker.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4de51b6b-589d-4817-8612-79b67f668df2" FileName="images\Tutorial-01-vscode-webpack2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d1944225-97e2-41b3-aa40-6e8f0b47051d" FileName="images\BrowserBundle_HelloWorld.png" SourceData="" BuildFlags="" />
      <OtherFile Id="71a76607-5d1f-44f8-9074-00c6405760af" FileName="images\Performance_GPUMacos.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3296c637-e827-4bea-8c47-49c7df903623" FileName="images\GenericAnimations_combining.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="5c2a0cb4-0eaf-41c8-9efe-2450d3fc611f" FileName="images\GenericAnimations_data.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="f824b089-472d-4073-848f-539a92438c38" FileName="images\GenericAnimations_line-annotation-moving-animation.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="09802b8f-26a6-46be-afce-f79efc98e384" FileName="images\GenericAnimations_manipulating.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="40d4fd9a-3e98-450a-8650-ee731a09e916" FileName="images\GenericAnimations_visibleRange.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="37eb0125-bd61-4f28-b518-b3a52597ea00" FileName="images\DataResampling_10MillionBitcoinBlog.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7d56ead8-ab52-4286-8e06-c06dbf0a0ad7" FileName="images\WhatsNew21_FastestLibraryAvailable.png" SourceData="" BuildFlags="" />
      <OtherFile Id="cf54b0e4-5e20-4748-a872-7a478711c714" FileName="images\Axis_VerticallyStackedAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f252bd05-5eb7-41cc-8d6b-99950d89e2e4" FileName="images\Axis_HorizontallyStackedAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2f08eeaf-9c8e-4c60-aa1f-8f23f99be925" FileName="images\ChartModifier-axis-hover-scichart-js.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="2421ee7e-604b-4d3a-b2b6-7ef94b852d64" FileName="images\Tutorial-02-browserbundle-output.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2057365f-c4eb-455e-b17e-5fb357fb0ff9" FileName="images\RenderableSeries_Heatmap_TransparentValues.png" SourceData="" BuildFlags="" />
      <OtherFile Id="71c7d97b-fe74-4966-ae66-2aaae1f3897d" FileName="images\AxisLayout_DrawSeriesBehindAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c1858605-c0e1-4ee4-ac7e-6d63d422081c" FileName="images\AxisLayout_DrawSeriesBehindAxisFalse.png" SourceData="" BuildFlags="" />
      <OtherFile Id="51fab0fa-f43b-47a1-899e-6d7babcf3b91" FileName="images\RenderSeries_HeatmapChart.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="36d196a9-326e-43c2-be97-7a7b932188d4" FileName="images\AxisTypes_ValueAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="924e7c30-9e74-4a45-afb6-25a986c2c6a3" FileName="images\AxisTypes_CategoryAxis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="0478e03b-1ec3-417f-acfe-cd655f8afc67" FileName="images\AxisTypes_CategoryAxisExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c603b6f2-5963-471c-a9b9-e3b81b4517bb" FileName="images\RenderableSeries_JavaScriptImpulseLollipopOrStemChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="961f7cf9-126b-42f9-bbf6-9f69bcf22e20" FileName="images\PaletteProvider_Impulse1.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a736a731-a7fe-415d-9971-10fe3a1a403c" FileName="images\RenderableSeries_ErrorBars.png" SourceData="" BuildFlags="" />
      <OtherFile Id="82dd0c8f-6336-48f3-bcdf-69d7bc4656f1" FileName="images\RenderableSeries_ErrorBars_HighBars.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8e0c8b01-c8f6-44fa-a8a4-dc0302cfd3cd" FileName="images\RenderableSeries_HorizontalErrorBars.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f8c02060-4cce-4bbd-85fe-093ac361ff6d" FileName="images\RenderableSeries_ErrorBars_DashedLines.png" SourceData="" BuildFlags="" />
      <OtherFile Id="c46260c2-a17f-46fc-b758-1ff7d9310049" FileName="images\RenderableSeries_ErrorBars_andLines_PointMarker.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5021b697-24a0-4cf1-af34-361c40e337a6" FileName="images\RenderableSeries_ErrorBars_ContantWidth.png" SourceData="" BuildFlags="" />
      <OtherFile Id="6052a15a-4a37-40af-85ff-f53818a878c8" FileName="images\RenderableSeries_ErrorBars_RelativeWidth.png" SourceData="" BuildFlags="" />
      <OtherFile Id="926338b2-fad0-428a-a124-5ade89b8294f" FileName="images\RenderableSeries_ErrorBars_HidingParts.png" SourceData="" BuildFlags="" />
      <OtherFile Id="792e63bf-9c94-485f-88db-0ea756404984" FileName="images\mouse-wheel-panning-scrolling-scichartjs.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="80cd2b0a-3db2-4922-b579-b2e8cb0d690c" FileName="images\javascript-chart-export-to-image.png" SourceData="" BuildFlags="" />
      <OtherFile Id="8cc1d46a-000e-4d5a-9029-c5af64817f06" FileName="images\RenderableSeries_NonUniformHeatmap.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e84072c4-9beb-4960-bdb0-2c4f03afe2b1" FileName="images\RenderableSeries_NonUniformHeatmap_EdgeValues.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1e88c188-045b-45d5-835f-d3caf8139484" FileName="images\RenderableSeries_NonUniformHeatmap_Main.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1ff1aa50-85fe-40ce-a2fd-2f953966ed3a" FileName="images\RenderableSeries_UnformHeatmap_DataLabels.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bccaaac4-88df-4751-85ac-259d81be6759" FileName="images\DataLabels_SimpleExample.png" SourceData="" BuildFlags="" />
      <OtherFile Id="22544cf0-b0d7-4277-ab96-d0b3cca26f04" FileName="images\DataLabels_NumericPrecision.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4183273c-4ea2-40cf-b3ff-90a7766f6445" FileName="images\DataLabels_FormattingFromMetadata.png" SourceData="" BuildFlags="" />
      <OtherFile Id="146f6bd1-5728-4f5d-bf8f-b6b2cf9810d4" FileName="images\DataLabels_DataLabelProvider_getText.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1e1123c7-6978-43dc-a803-87b57982f565" FileName="images\DataLabels_SkipMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="18c12244-44e3-4e2e-9a2d-2e79b96f4932" FileName="images\RenderableSeries_LineSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d305a99c-3137-455e-8176-0a1a18ed3711" FileName="images\ThemeManager_NavyTheme.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f8cd3ef3-e335-44ea-a890-7d239479979c" FileName="images\RenderableSeries_PieChart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="322170e5-5907-4ebd-9d7a-4ffb66133264" FileName="images\scichart-home-see-new-worlds.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="422f3d6e-cb42-42a4-ab5d-c66d5396a296" FileName="images\ExamplesSuite_Homepage.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="467d52cb-c517-4a95-8a72-ae7a53804d35" FileName="images\ExamplesSuite_DemoHome.jpg" SourceData="" BuildFlags="" />
      <OtherFile Id="a33e3456-7d25-43c3-915e-cab72b5c00b2" FileName="images\RenderableSeries_NonUniformHeatmap_OffsetMapping.png" SourceData="" BuildFlags="" />
      <OtherFile Id="a143f77a-12e5-42c5-8715-aca9d66e22e9" FileName="images\RenderableSeries_UnformHeatmap.png" SourceData="" BuildFlags="" />
      <OtherFile Id="b343cce1-242f-447d-a237-d72766fc37e8" FileName="images\DataLabels_LabelPositioning.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7d156e7f-7060-4493-aee8-4a4b4e3ba446" FileName="images\DataLabels_Demo.png" SourceData="" BuildFlags="" />
      <OtherFile Id="83e535f9-de2a-485e-a26a-7600af38a2e0" FileName="images\DataLabels_PositioningMultiLabels.png" SourceData="" BuildFlags="" />
      <OtherFile Id="2912da57-7bfc-48b1-a37d-9df82c1fb221" FileName="images\DataLabels_Colouring.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4b1e6f3b-0ecf-425c-9aa2-c7335e6d5634" FileName="images\SubCharts_BasicSubchart.png" SourceData="" BuildFlags="" />
      <OtherFile Id="00126980-edcc-45ea-809a-42df53cb74c3" FileName="images\SubCharts_Transparency.png" SourceData="" BuildFlags="" />
      <OtherFile Id="fdbbc5e4-6aff-4d89-88bf-1b3ebd2fc32a" FileName="images\SubCharts_DataValueCoordinateMode.png" SourceData="" BuildFlags="" />
      <OtherFile Id="e8f6a085-4272-496b-9578-a85ede1b6de0" FileName="images\SubCharts_UpdatedPosition.png" SourceData="" BuildFlags="" />
      <OtherFile Id="149c2218-64df-468e-8898-65f1fcb91563" FileName="images\SubCharts_CustomHtml.png" SourceData="" BuildFlags="" />
      <OtherFile Id="91eae77d-3fb0-4bba-82ce-e0c47d09d8e8" FileName="images\SubCharts_MultipleCharts.png" SourceData="" BuildFlags="" />
      <OtherFile Id="88888383-1f18-4e8a-b696-34536f6a19fb" FileName="images\Axis_Native_Text_Labels.png" SourceData="" BuildFlags="" />
      <OtherFile Id="36044865-c17a-480e-9efc-0a3737f638f4" FileName="images\Axis_Native_Rotated_Labels.png" SourceData="" BuildFlags="" />
      <OtherFile Id="3c4a6f30-6d49-4aad-887a-d5ed32ab2af1" FileName="images\NativeTextAnnotation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="df909dd0-456a-4e82-885d-7bac78a755af" FileName="images\TextSeries.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f389e921-1849-41b4-826b-74bebc742e31" FileName="images\TextSeries_Customisation.png" SourceData="" BuildFlags="" />
      <OtherFile Id="67d4f7bc-6a5e-4e2b-b00a-b619c8979c64" FileName="images\textBounds.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7e459867-6377-4abd-a7a7-2a427da6d1a3" FileName="images\dragText.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="2c42cacc-d9f9-40f2-8a81-39c9fc78c03b" FileName="images\dragDiscrete.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="f488a8f8-7448-4329-babc-a4c7c8b87fac" FileName="images\DefaultAdorners.png" SourceData="" BuildFlags="" />
      <OtherFile Id="06517e1e-de4a-4a5c-b453-9f8697f35f2f" FileName="images\CustomAdornersSVG.png" SourceData="" BuildFlags="" />
      <OtherFile Id="71928bd3-cc91-40d2-8613-cd2e650cdd7d" FileName="images\CustomAdornersStyling.png" SourceData="" BuildFlags="" />
      <OtherFile Id="5c5518d0-b214-4302-82b0-83930542d06f" FileName="images\CustomDragPoints.png" SourceData="" BuildFlags="" />
      <OtherFile Id="eb17eeba-13dd-43fa-8eff-db3e0b60b027" FileName="images\InterpolatedTooltip.png" SourceData="" BuildFlags="" />
      <OtherFile Id="4ab9cf84-3530-4fc8-83ab-57b1b5436ecf" FileName="images\interpolatedTooltip.gif" SourceData="" BuildFlags="" />
      <OtherFile Id="ea929bd9-3778-4687-9a02-3ebe2a1d4563" FileName="images\AutoColoring.png" SourceData="" BuildFlags="" />
      <OtherFile Id="1fe706d8-3df8-4e3d-8fd0-8319ed63e0ee" FileName="images\AutoColorAdjust.png" SourceData="" BuildFlags="" />
      <OtherFile Id="47b3de0f-d59a-43cc-9605-f6b284043d91" FileName="images\AutoColorRemove.png" SourceData="" BuildFlags="" />
      <OtherFile Id="203695fb-1dfa-4b9d-b8d0-4ccbcdb1d829" FileName="images\AxisBase2D_InheritenceDiagram.png" SourceData="" BuildFlags="" />
      <OtherFile Id="beb87ef5-8978-4be4-b233-69169afd60eb" FileName="images\AxisLabelProviders_InheritenceDiagram.png" SourceData="" BuildFlags="" />
      <OtherFile Id="bb6bd614-72c0-4c42-b4fc-7db048eca2bf" FileName="images\TickProviders_InheritenceDiagram.png" SourceData="" BuildFlags="" />
      <OtherFile Id="f9652dfe-5d80-4629-bb59-caacaabaeeaa" FileName="images\LayoutManager_UML.png" SourceData="" BuildFlags="" />
      <OtherFile Id="186701b8-1204-49fd-89c9-32313e4bf0ce" FileName="images\chart3d_xyz_axis.png" SourceData="" BuildFlags="" />
      <OtherFile Id="64ee5888-8d2a-4c81-9dc6-06cb90d963c7" FileName="images\Chart3D_World_vs_data_coords.png" SourceData="" BuildFlags="" />
      <OtherFile Id="34c38099-93ae-40ed-80b1-c06d69ff0525" FileName="images\Chart3D_Camera.png" SourceData="" BuildFlags="" />
      <OtherFile Id="68c74ba7-7728-480e-a633-12f6d65ccc53" FileName="images\Chart3D_LeftHandCoords.png" SourceData="" BuildFlags="" />
      <OtherFile Id="d2a54cbe-e046-4eec-ac39-4a0ca20d0858" FileName="images\Chart3D_World_vs_data_coords2.png" SourceData="" BuildFlags="" />
      <OtherFile Id="adf71651-ec6f-4bc8-913b-8ec4d08a3a1b" FileName="images\Chart3D_Camera_Ortho.png" SourceData="" BuildFlags="" />
      <OtherFile Id="534a7932-383f-40a3-a2c2-bb067e0bcf1a" FileName="images\MemoryBestPractice_ReactDebug.png" SourceData="" BuildFlags="" />
      <OtherFile Id="666ccae5-1957-45c7-abf2-142dc166b538" FileName="images\MemoryBestPractice_Warning.png" SourceData="" BuildFlags="" />
      <OtherFile Id="80e3a733-d98d-4d9b-97b8-be5c29db7392" FileName="images\MemoryDebugging_LogOutput.png" SourceData="" BuildFlags="" />
      <OtherFile Id="7ff67d21-2939-4eca-bd36-9d0bee9e2179" FileName="images\MemoryDebugging_Warning.png" SourceData="" BuildFlags="" />
      <OtherFile Id="996a3beb-6d3e-474f-ac36-48370cde8d0a" FileName="images\Axis_CustomLayoutManager.png" SourceData="" BuildFlags="" />
    </OtherFiles>
    <DefaultStylesheet>stylesheets\customstyles.css</DefaultStylesheet>
    <DefaultCaptureDirectory></DefaultCaptureDirectory>
  </OtherFilesProjectPlugin>
  <SourceControlProjectPlugin />
  <TasksProjectPlugin>
    <Tasks>
      <TaskItems>
        <TaskItem Id="ae4311be-702f-49c3-be50-423c3f312818" Priority="" AssignedTo="">
          <Title>Non Uniform Heatmap page</Title>
          <AssociatedItemId>bfe9f9bd-2e26-4aac-bd61-e965fe38c8f6</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:02:02.9291232Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T14:28:31.4657784Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="3b06bd54-8450-4e89-bcdf-ccb104c9869c" Priority="" AssignedTo="">
          <Title>Data Text Labels API page </Title>
          <AssociatedItemId>7ded97cf-3870-4fdf-b8b9-b6e74e1d8225</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:02:26.4972348Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T20:00:09.4087779Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="8ac5b1ca-333e-4076-a2df-b2bd33f37ef9" Priority="" AssignedTo="">
          <Title>Update Common RenderableSeries Properties</Title>
          <AssociatedItemId>6139d2e5-f098-4674-99e5-581141312bf5</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:03:23.5803265Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T20:01:31.7413016Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>to include datalabelprovider and text stuff</Notes>
        </TaskItem>
        <TaskItem Id="dd7c2947-1c90-4069-aa45-4ffd884276cc" Priority="" AssignedTo="">
          <Title>complete 'whats new in 2.3' doc</Title>
          <AssociatedItemId>048e8b8c-3acd-4ad6-93c6-034a8d79b14a</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:05:16.3346964Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T13:42:37.4197537Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="913e274e-0df4-4245-b96a-d98c800bf1b8" Priority="" AssignedTo="">
          <Title>Add sections to builder API for Text Labels</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:10:59.9098564Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-07-08T09:53:11.4883064Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="4def3e81-64e7-48cf-8458-aae8c1b2cf3a" Priority="" AssignedTo="">
          <Title>Add sections to Builder API for Subcharts</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:11:17.1041373Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-10T19:21:47.0307358Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="f4bbc4f1-e05d-49fd-a0ae-919f080af527" Priority="" AssignedTo="">
          <Title>FastTextRenderableSeries docs</Title>
          <AssociatedItemId>e99914e3-6526-410c-a0fa-05c4f1d90573</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:11:37.8503489Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-18T09:25:32.9575622Z</ModifiedOn>
          <ModifiedBy>LAPTOP-0DV0BO7K\dave</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="41ade7b8-a703-4767-a037-9dd5e5fe9714" Priority="" AssignedTo="">
          <Title>SubCharts API Overview</Title>
          <AssociatedItemId>e7d484ca-b11c-424e-9d88-0afbabc17bde</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:12:04.6946858Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-10T19:21:44.0905221Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Note see https://abtsoftware.myjetbrains.com/youtrack/issue/SCJS-1252/Demos-for-Subcharts</Notes>
        </TaskItem>
        <TaskItem Id="4a36d134-5f98-425a-a25b-3fb546f770f5" Priority="" AssignedTo="">
          <Title>SubCharts API Tutorial </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:12:19.8081138Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-01-10T19:21:41.2207622Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Modify the Linking Multiple Charts tutorial to use Subcharts</Notes>
        </TaskItem>
        <TaskItem Id="82db99fa-5841-4827-a1d4-bb52087971b7" Priority="" AssignedTo="">
          <Title>Update performance tips article</Title>
          <AssociatedItemId>31c1fa0b-34ae-472f-b888-2de129265d50</AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2022-08-16T16:15:00.7484807Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-07-17T08:57:16.4180943Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>... to include subcharts, native text rendering, dataSeries.capacity
... mention deletion of wasm memory and link to memory document</Notes>
        </TaskItem>
        <TaskItem Id="44c9be99-5d52-42fc-b32d-ff191642a197" Priority="" AssignedTo="">
          <Title>How do I: Pan the chart with mousewheel</Title>
          <AssociatedItemId>384b299e-39bf-4806-bf38-b1e5f00ba51e</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:15:37.50048Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-17T10:41:44.1073081Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="e10ca19e-e94b-4674-a102-5e5a970f11eb" Priority="" AssignedTo="">
          <Title>How do I homepage</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-16T16:18:30.9276504Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-16T22:00:27.6324215Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes>Put a quick homepage on what is the how-do-i section
where are the customerexamples in github
how to request a feature or workaround (on forums) </Notes>
        </TaskItem>
        <TaskItem Id="2196fff8-ffdb-459b-bfea-29b5b4d1aa7f" Priority="" AssignedTo="">
          <Title>Ensure docs have JavaScript, TypeScript and Json examples</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>In Progress</Status>
          <CreatedOn>2022-08-16T16:53:11.117841Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T11:02:09.5428593Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Each code sampe should have JS, TS and Builder API (JSON) examples</Notes>
        </TaskItem>
        <TaskItem Id="279ed4d6-1e90-48ea-9be9-94d8f9f8c928" Priority="" AssignedTo="">
          <Title>How do I - Export a chart to image</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-17T08:34:43.6582112Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-17T10:50:48.7959992Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="2b5078c3-72bd-4fe6-921f-e1ed11a1bdc9" Priority="" AssignedTo="">
          <Title>Text labels on Uniform/Non-U heatmap pages</Title>
          <AssociatedItemId>d53b2f8b-665d-4804-bb72-9e19b3c84ed0</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-17T17:26:55.4409452Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-17T17:56:02.2827377Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="c7a364b0-ec47-4659-a2a3-2a7f75656e70" Priority="" AssignedTo="">
          <Title>Update column series to show gradient fill, rounded corners</Title>
          <AssociatedItemId>246d21d0-3b1b-4840-be7b-33bc0066e0e1</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-18T10:21:02.1705888Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T13:47:33.3910223Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="f964062a-9ff1-46e9-a5a5-dee788182775" Priority="" AssignedTo="">
          <Title>Update Rollover docs to show strokeDashArray on line </Title>
          <AssociatedItemId>fac601dc-5435-4c51-abec-1c267f55f193</AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2022-08-18T10:21:22.4403814Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-18T10:21:44.7479657Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="5b71b62f-a57d-4898-b605-408a6d4777e4" Priority="" AssignedTo="">
          <Title>Add chartBuilder code examples to all series articles </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-08-18T17:30:23.380493Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T11:01:59.8624676Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="6081e4c8-76de-49d7-817e-b8d07e191e56" Priority="" AssignedTo="">
          <Title>Additional draw modes for digital lines</Title>
          <AssociatedItemId>7f5a6207-a081-4a74-add0-1fb3e36b2806</AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2022-08-20T10:13:56.3256961Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-08-20T10:14:27.6399526Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="30bb03c3-707c-4ab7-959f-47feb8c615ff" Priority="Medium" AssignedTo="">
          <Title>v3.2 Add a PinchZoomModifier documentation page and update ZoomPanModifier page</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-09-23T12:03:08.164045Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-08-03T20:32:17.6165791Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>ZoomPanModifier now has pinchzoom behaviour in-built. Must be disabled if you dont want it</Notes>
        </TaskItem>
        <TaskItem Id="c2bfb0ed-5b12-4b8c-b487-10328c4d1f1e" Priority="" AssignedTo="">
          <Title>Codepens needed and updates: Hit-Test docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2022-09-26T11:03:01.45353Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:21:56.2487419Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Info for datapoints either side of the hit-test which allows you to do interpolation if you want to</Notes>
        </TaskItem>
        <TaskItem Id="268fbae8-fc75-4497-9f7d-b3dd5635744c" Priority="" AssignedTo="">
          <Title>Update HitTestRadius docs on Cursor and RolloverModifier</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-09-26T11:03:30.3503474Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:08:21.5580042Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="fd233845-06b3-44ac-a526-5f8f51c08934" Priority="" AssignedTo="">
          <Title>Add Create Custom Legend how-to article</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2022-09-28T12:53:16.8978634Z</CreatedOn>
          <CreatedBy>DESKTOP-IPPVO8O\aburn</CreatedBy>
          <ModifiedOn>2022-09-28T12:53:34.3606212Z</ModifiedOn>
          <ModifiedBy>DESKTOP-IPPVO8O\aburn</ModifiedBy>
          <Notes>see this https://codesandbox.io/s/customscichartlegendexample-32ox1s?file=/src/index.ts
and this https://www.scichart.com/questions/js/how-to-create-a-trace-setting-panel-using-custom-annotation-with-html-element-inside</Notes>
        </TaskItem>
        <TaskItem Id="ab6fab57-4f08-4547-9bae-c0d75089a3d5" Priority="" AssignedTo="">
          <Title>Add HeatmapLegend docs </Title>
          <AssociatedItemId>d53b2f8b-665d-4804-bb72-9e19b3c84ed0</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-11-01T21:22:42.3521934Z</CreatedOn>
          <CreatedBy>DESKTOP-APQBACI\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T18:30:52.3923082Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="ae6716b1-6606-460d-aa08-36c4a6d740a7" Priority="" AssignedTo="">
          <Title>Add Dynamically Updating pie chart to docs</Title>
          <AssociatedItemId>d9007373-3f18-4bbd-be21-86a97872b4ee</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-11-01T21:24:24.6452097Z</CreatedOn>
          <CreatedBy>DESKTOP-APQBACI\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T11:01:43.7292304Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="cc58e302-3183-4399-a9cd-8783f7c16e06" Priority="" AssignedTo="">
          <Title>Update Pie chart to include new properties</Title>
          <AssociatedItemId>d9007373-3f18-4bbd-be21-86a97872b4ee</AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2022-11-02T11:48:03.138714Z</CreatedOn>
          <CreatedBy>DESKTOP-APQBACI\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T11:01:39.7779988Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>new properties include:
 - ShowLabel
 - radiusAdjustment
 - label formatting</Notes>
        </TaskItem>
        <TaskItem Id="cd51739a-345b-4c9a-9da9-7b23debef93f" Priority="" AssignedTo="">
          <Title>Add Text Labels to Uniform Heatmaps</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-01-07T15:36:55.4294662Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-01-07T18:34:12.7483755Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="fc59f8bb-29e2-4dbb-8b2c-36bed015fa2b" Priority="" AssignedTo="">
          <Title>Find out how to embed code from github</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-01-07T20:01:47.326571Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-06-21T12:43:09.5168698Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Either link code from github
or embed working codesandbox.io samples
or both 

very needed to help users learn scichart!</Notes>
        </TaskItem>
        <TaskItem Id="f4b0d166-611b-4d0a-9276-6fd279959e99" Priority="" AssignedTo="">
          <Title>DateTimeNumericAxis needs more date formatting options </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-03-11T11:05:04.9407943Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-03-11T11:05:28.4098024Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>SmartDateLabelProvider seems a little rigid. How can users customise the date output?</Notes>
        </TaskItem>
        <TaskItem Id="de8b6ba3-78e9-4da9-8236-c70038f57983" Priority="" AssignedTo="">
          <Title>Multiline Labels, Titles, rotated labels</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-03-11T14:11:10.543631Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-03-24T14:15:33.4963049Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>xAxis.axisTitle = ["This is a very long axis title", "that has been split into multiple lines", "to demonstrate the new functionality"];
 // Axis titles are 24px by default.  Multi-line ones may need to be smaller
 xAxis.axisTitleStyle.fontSize = 16; 

we need to add docs to show how to rotate labels, position titles and multiline labels &amp; titles. 
image labels too </Notes>
        </TaskItem>
        <TaskItem Id="8188b08b-9247-4788-9ff0-509354cb29b5" Priority="" AssignedTo="">
          <Title>SmartDateLabelProvider timezones</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-03-14T09:58:01.6067997Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-03-14T09:58:08.1136209Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>see https://github.com/ABTSoftware/SciChart.JS.Examples/tree/dev_v2.3/Sandbox/CustomerExamples/SmartAxisLabelsWithTimezone</Notes>
        </TaskItem>
        <TaskItem Id="46e2f848-a45b-4ecf-8dcf-a0153e33093c" Priority="" AssignedTo="">
          <Title>Size postfix on labelprovider e.g. K, M, Bn (billion) on yaxis</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-03-17T13:24:40.2178749Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-06-26T18:00:35.4468805Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="7fec5ef4-1202-41a3-ab44-c344a08f50f7" Priority="" AssignedTo="">
          <Title>Formatting numerics with a comma e.g. 1,000,000</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-03-17T13:25:15.8205626Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-06-26T18:00:27.3305679Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="25dc7031-31df-4830-ac27-20fe7c467d18" Priority="" AssignedTo="">
          <Title>isPrimaryAxis in multi axis scenario</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-03-24T14:16:59.5777315Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-03-24T14:17:17.6611416Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Create demo
two left/right axis
isPrimaryAxis switched depending on mouse over </Notes>
        </TaskItem>
        <TaskItem Id="93c76f4c-5406-48f5-bac0-191a134b84cb" Priority="High" AssignedTo="">
          <Title>v3.2 Add Memory Tips &amp; Tricks doc</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:49:26.9157789Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-03T20:32:14.5316816Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>under perf tips
 - talk about Wasm memory model
 - Wasm garbage collection
 - Initialize with capacity
 - WebGL buffer sizes 
 - Add Mem Leak Debugging tools doc
</Notes>
        </TaskItem>
        <TaskItem Id="1215a6ca-6e5c-413e-a6d5-0c4addab7848" Priority="High" AssignedTo="">
          <Title>v3.2 Add Mem Leak Debugging tools doc</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:53:23.3419754Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-03T20:32:12.1527586Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="66172453-6969-40de-858f-d96b684d5956" Priority="Medium" AssignedTo="">
          <Title>v3.2 add Optional Delete on remove/clear in collections</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>In Progress</Status>
          <CreatedOn>2023-06-21T12:53:31.8802592Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-19T12:44:27.021477Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="a94fb247-ff06-409c-86ef-f660ee0ddeca" Priority="Medium" AssignedTo="">
          <Title>v3.2 Add configure WebGL Buffer sizes in Perf Tips and Tricks docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:53:42.664291Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-03T20:32:06.5907385Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="69bfebc0-86d6-40e8-a28f-74f34403ad7b" Priority="High" AssignedTo="">
          <Title>v3.2 Add PointLineRenderablerSeries 3D Docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:53:56.4584079Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-04T17:08:13.7974068Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="f039e782-9222-497f-9e57-2d7626ffc2c4" Priority="" AssignedTo="">
          <Title>v3.2 Add TooltipModifier 3D Docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:54:17.2058301Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-16T14:17:17.1267246Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="4ef4416f-7f98-4079-b7da-1bf16eab2288" Priority="" AssignedTo="">
          <Title>v3.2 add PinchZoomModifier3D docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:54:24.9003008Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-16T14:17:24.3936143Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="7b0b5583-e857-4565-96ad-105616612454" Priority="Medium" AssignedTo="">
          <Title>v3.2 add rotating axis titles to docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-06-21T12:54:32.7650988Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-19T11:45:00.5865921Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="dd64b95e-29ca-4808-833d-51b1729377a7" Priority="High" AssignedTo="">
          <Title>v3.2 add FIFO and Sweeping mode docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:54:45.4364839Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-08T14:16:32.6785141Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="87ba294e-1912-40f5-8098-247794a67626" Priority="High" AssignedTo="">
          <Title>v3.2 Refactor Dataseries docs to include realtime updates</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:54:52.7185301Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-08T14:16:39.2713059Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Must document modes of realtime:
 Append, Replace, Scroll and Sweep </Notes>
        </TaskItem>
        <TaskItem Id="0b59c288-04aa-414e-a54e-f83f29dc63a1" Priority="Medium" AssignedTo="">
          <Title>v3.2 mention Series pointmarker: lastPointOnly mode</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:55:56.1517749Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:15:34.9628169Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="fc8e13f4-09ce-49ee-aa8b-c73672715e70" Priority="" AssignedTo="">
          <Title>v3.2 Update ZoomPanModifier to mention pinch zooming</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-06-21T12:57:13.3663505Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-03T20:32:08.4856104Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="b7a3cfdc-feba-49b3-b581-663e174d52b6" Priority="" AssignedTo="">
          <Title>v3.2 Add PointLine 3D Series docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-07-08T14:17:15.8327643Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-16T12:32:23.4764779Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="322bcea5-8f73-4857-89a5-d94158d13e8d" Priority="High" AssignedTo="">
          <Title>!!! Write some 3D Chart docs!</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-07-08T14:22:17.4656787Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-18T17:05:34.8458332Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="ba1912c9-b560-46e0-9695-602fff5c3d9d" Priority="" AssignedTo="">
          <Title>Document 3D Chart hiding/showing axis walls, labels</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-07-13T15:09:14.4479007Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-13T15:09:34.317173Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Currently you cannot hide an axis wall in scichart.js 3d however should be easy to add
when done, document it</Notes>
        </TaskItem>
        <TaskItem Id="59df57fa-6d57-44ca-afb2-4a754f07bf7c" Priority="" AssignedTo="">
          <Title>Document 3D Chart styling and theming</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-07-13T15:09:48.0383349Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-13T15:10:02.1398103Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Some bugs discovered during this process</Notes>
        </TaskItem>
        <TaskItem Id="2e3625f3-285b-4b83-b0ec-211c4b3a1a39" Priority="High" AssignedTo="">
          <Title>v3.2 Browser Bundle tutorials now out of date</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-07-17T16:35:06.4644731Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-07-17T16:35:17.915024Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="a29a0369-5fdc-4090-b58e-70f2f55f3743" Priority="" AssignedTo="">
          <Title>Update PointMetadata docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-08-03T20:32:19.474043Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-04T17:07:40.7051461Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="9e5c5c4b-692a-43cf-b5f7-8909b60f9a8b" Priority="High" AssignedTo="">
          <Title>CursorModifier docs need the Codepen treatment</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-08-03T20:32:25.7664907Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:06:38.1578941Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>https://codepen.io/scichart/pen/VwVRZNL 
mode where hover a point shows a value - no crosshair. 
show how to customize tooltip
Show how to style / show / hide lines and labels
Show external placement div</Notes>
        </TaskItem>
        <TaskItem Id="4aa33c43-5f40-407c-a290-b42fc065ee9d" Priority="" AssignedTo="">
          <Title>Update Custom Layout Provider docs with examples</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Complete</Status>
          <CreatedOn>2023-08-04T10:52:08.9365343Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-04T18:00:18.6131446Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="777ed607-1468-4b69-958d-102873c8e7e4" Priority="High" AssignedTo="">
          <Title>Codepens needed: RolloverModifier</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-04T16:33:40.6063047Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:21:20.5114253Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>Update rollover docs
 - Codepens 
 - Customisation
 - External PlacementDivId
 - Line styling or hiding</Notes>
        </TaskItem>
        <TaskItem Id="abbca67f-cbf9-4a8d-9184-2ac8534ed353" Priority="" AssignedTo="">
          <Title>Add Realtime Non-uniform Heatmap to docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-04T16:34:42.1027872Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-04T16:34:48.5535055Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="4089762a-8ce4-4c66-86fb-21243cfbbbf2" Priority="" AssignedTo="">
          <Title>Codepens needed: LegendModifier </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-04T16:35:16.9010395Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:21:10.4108048Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>- Codepens
- Customisation
- Placemement
- Manual legends
- Feedback like checkboxes
- Include/exclude items from legend
</Notes>
        </TaskItem>
        <TaskItem Id="3c566677-b0d2-40b1-a662-d25404c0f426" Priority="" AssignedTo="">
          <Title>Getting Started - how to host Wasm/Js locally without NPM</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-04T16:36:09.5224828Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-04T16:36:19.7776072Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="4772c649-9513-4a9c-8d4d-8d1359ee275b" Priority="High" AssignedTo="">
          <Title>Codepens Needed: SeriesSelectionModifier </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-08T17:35:41.2083519Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:21:30.3189559Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="033d48b8-c352-4d8f-9fb9-980984fab972" Priority="High" AssignedTo="">
          <Title>Codepens needed: DataPointSelectionModifier </Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-08T17:35:55.9667486Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:20:35.0132008Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="99b080a2-7fcf-4de1-bd22-11b3cdb6bcab" Priority="" AssignedTo="">
          <Title>CustomModifiers - SimpleSeriesValueModifier</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-09T15:28:39.867838Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-09T15:28:58.773116Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>in Documentation snippets / ChartModifiers/CustomModifiers - good example here </Notes>
        </TaskItem>
        <TaskItem Id="378375cb-182a-477d-b4d3-0059f128e034" Priority="" AssignedTo="">
          <Title>Axis Layout - Fixed Aspect Ratio</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-14T15:29:46.0323826Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-14T15:31:13.4440217Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>use david's codepen AxisApis/AxisRanging/FixedAspectRatio</Notes>
        </TaskItem>
        <TaskItem Id="1f102c5d-71b7-4e21-9529-e5ce49920307" Priority="" AssignedTo="">
          <Title>Serialization/Cloning a series</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-08-18T13:20:16.2372302Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-08-18T13:20:25.3756309Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="184d22ac-ebff-4f4f-a169-434224fc5ca8" Priority="High" AssignedTo="">
          <Title>Synchronizing Multiple Charts docs</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2023-10-30T15:24:33.4663161Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2023-10-30T15:25:04.8163195Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes>1/ how to sync two charts
2/ Sync axis sizes
3/ Sync zooming, panning
4/ sync cursors
5/ Add/remove charts fro the sync
6/ Resizing Synchronized panels

 ... 

7/ Doing the same thing with subcharts API?</Notes>
        </TaskItem>
        <TaskItem Id="aa646516-38a5-43e3-b8cf-49fdfd56c9a1" Priority="High" AssignedTo="">
          <Title>Add RenderDataTransforms documentation</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2024-02-02T09:25:52.8061039Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2024-02-02T09:26:03.7138322Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="b793460b-78be-4102-b135-e69d06c8b602" Priority="High" AssignedTo="">
          <Title>Add IAdvancedPaletteProvider documentation</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2024-02-02T09:26:06.6383105Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2024-02-02T09:26:18.5018501Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="0cb64b18-227e-4527-a001-a0db1d314fe1" Priority="High" AssignedTo="">
          <Title>Add VerticalSliceModifier Documentation</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2024-02-02T09:26:22.3720312Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2024-02-02T09:26:31.8555316Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
        <TaskItem Id="c1d6634b-e95b-4dcf-a75a-eeb995bc4a39" Priority="High" AssignedTo="">
          <Title>Add IsStaticAxis Documentation</Title>
          <AssociatedItemId></AssociatedItemId>
          <Status>Not Started</Status>
          <CreatedOn>2024-02-02T09:26:34.3557426Z</CreatedOn>
          <CreatedBy>ABT-WORKHORSE\aburn</CreatedBy>
          <ModifiedOn>2024-02-02T09:26:45.3380614Z</ModifiedOn>
          <ModifiedBy>ABT-WORKHORSE\aburn</ModifiedBy>
          <Notes></Notes>
        </TaskItem>
      </TaskItems>
    </Tasks>
  </TasksProjectPlugin>
  <BookletsProjectPlugin />
  <TableOfContents>
    <TocLayout Id="c7552482-a1ae-44a2-a9fc-c757d62b5073">
      <Name />
      <Description />
      <RootNodes>
        <TocNode Name="" Id="c80f244d-54f1-4d4e-88c3-93ad6d8b57a5" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2020-08-03T15:05:07.2526778Z">SciChart.js JavaScript Charts User Manual</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="edbfc7d5-4de2-4301-88ca-1be44601225b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>d9186051-eaa4-42af-847b-342df3b8df30</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="94105210-2f98-485c-aa98-666f7ce1f589" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>010455fd-1703-4f00-aca3-05411237612c</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="eda01886-17e6-4502-bea3-ad6c250bd32b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>2af91ecd-b2a9-4699-9b71-53204a53b31a</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="d5f66b4d-0669-4319-8214-efd277447b79" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>09079101-6ba2-4cdb-9fe3-0fb603ff0486</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="89663887-5487-4431-89e9-dbf63700263b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2022-08-17T08:43:03.242732Z">Get Started: Tutorials, Examples</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="ddc59b2e-b6a6-472b-8817-1efeefe0d5c4" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2022-01-09T10:24:04.7354278Z">Tutorials (JavaScript / npm / Webpack)</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="868dd211-94c3-4f97-894e-fe4fae86e1c2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2247b20c-4be1-42cb-ad24-125310703f67</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3013d964-2f69-4822-9bc7-580eea63bd2f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>30f7b8a6-e55b-49bb-909f-998d6d24112e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="74f84040-cbd0-46df-bff0-e4b2b89f2c14" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2c5fca53-4e1c-426d-826b-966b97ed42b0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="e2a8ba7a-4d7d-4d5c-9691-f3f510eb80dc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>86dd9073-5257-4f09-b47a-9e1e7ee6cec8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="2b044fdc-7324-4686-a917-1467694b5777" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>69d624c9-d928-4331-957b-7d1b9e070b3e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="67f49698-9a40-4213-beb6-a0be7d5bf66b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b295f570-3b57-4bf8-8467-71b41908c024</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d6d4b056-1451-41e7-a688-daa16b680592" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>103afbcf-5d52-4774-96f0-0af4e7d4823d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="389abae6-6366-4ad9-85df-a0989506aaf1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="dac167af-a106-40dc-89d3-c9909151b11e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5cdfe58-f742-4e91-8ee7-f39b850743d7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c60c5ca2-d7f3-49d0-856e-0fdf2ec33018" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>aff2fef2-ec11-48dd-a310-82845d0388fa</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="7117caf3-8109-4622-9f15-2e07d65db5b7" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2022-01-09T10:24:31.2790998Z">Tutorials (Vanilla JS)</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="63e42b5a-90d1-415a-ac66-23c6421ae996" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>38afdac0-306d-40d9-b056-b1b8f2a3ae61</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="41259274-f2ea-46e9-9042-7f7d8d9b2f71" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4f597daa-dd65-4d3b-b9f5-65b66c82485d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="c82685ed-30a8-41f4-9681-46bcaa66295c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2023-07-24T18:12:58.8699806Z">Tutorials / React</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="84c4c9bd-0b88-44a4-a7a0-983431514e14" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a5d48d77-152d-4142-b184-811540804fde</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="c4e7c1de-d106-4ece-9c01-4a8b6d81cc24" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2022-08-16T21:24:08.1673621Z">Worked Examples</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="434e1056-bdd3-41e0-8af2-dbbba566d076" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>33c0efb1-e43e-4fb0-bd5f-e145b8c07cbb</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="84da822e-65d7-4b85-a205-99ae4036e0a4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>384b299e-39bf-4806-bf38-b1e5f00ba51e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c402b6f8-9611-44cf-bd23-d20ff34c025f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>62d0aa25-e713-442c-bd55-da924e96cca4</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="aaa1309d-08d5-47ef-8be0-c3c9b91bff16" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2020-08-03T15:09:53.9005703Z">The SciChart.js Examples Suite</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6de95ecd-6cab-4880-acdc-c355548d7cda" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>481993d4-64bd-4388-bb27-dba9b5784df7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="f2f9f6c4-f3d2-4bdd-bb6d-1fbff25de752" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2021-09-16T17:19:25.8436086Z">What's New?</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="5defab37-f654-4118-82aa-bd3dae7db2e4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>a47da469-f175-48bb-a132-1e3dd24431a7</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="9a3fb913-f8bf-4808-8d81-e373a09b779b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>5f9d6fa0-fc85-47ca-a8cb-6a71fa668413</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="2bc7e3fd-5177-45bd-a34d-674a72d82f2b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>56c7208c-32d5-4b8f-9954-21b15fb27692</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="04fd03c6-936e-4897-a618-c0770842c8c1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>048e8b8c-3acd-4ad6-93c6-034a8d79b14a</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="67771d1d-a7d7-4a4b-8536-88baf3701ee9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>7a45fe78-35ce-448b-9754-fc8cd77be464</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="f1fe20c6-cc54-4958-a986-4d9cf0a3f4dd" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>bddab365-84a3-44b1-a3f5-10ef3d2136c1</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
            <TocNode Name="" Id="2abce70a-fead-4140-8520-c6aa419358bd" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
              <CaptionTemplate />
              <ChildNodes />
              <TargetItemId>a5c46481-4865-47fe-85bd-8add4c13cece</TargetItemId>
              <TargetItemBookmark></TargetItemBookmark>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="f4eeaa28-daa7-4b9b-b8d8-60c96fe82066" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2020-08-03T15:09:05.252466Z">SciChart.js JavaScript 2D Charts API</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="2101ee97-d565-492d-bb7f-6e4c7b1b8440" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2020-08-25T17:29:16.7077786Z">The SciChartSurface (Root Chart Control)</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6a594e10-98f7-4791-93cb-97adce24186e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>c66138c0-4f3e-48cb-9660-bb30cd6e2d13</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="793383df-bac6-4b0f-af27-53d6e3422c55" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>6fec8d55-2d62-4262-ba23-beca67cfbb06</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="944fcf11-b3e6-415d-9c54-4533802ffcd4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>ec3e3be8-6e1e-4ecc-8578-bf8c62f902a6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="73d77c30-cc80-4c90-b205-b1a31b0b5b94" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e09e931b-15a2-4e8f-ac78-4c2822394a62</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="54d81eed-81f7-44d0-93da-c203a76c32e1" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-28T13:42:29.5971947Z">2D Chart Types</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="7ee92da5-492c-4186-8a84-b0f04d326531" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>172addbf-995e-4705-9f7d-535415ab322a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d7d4411c-078d-4890-941c-7239dc6636db" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-08T19:15:54.0053891Z">Common Series APIs</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="2a4716fc-291b-4af8-84f6-3612c5f199d4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>1050b696-5965-441b-a60b-7743440dd66b</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ea37486d-11d4-4d0e-8df4-1f6de08a64c2" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>58603bb5-a47d-4f69-a142-2411ff2e762c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="1347008d-f1c6-4f40-ba5f-f97dd68ea7ea" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e4122c58-e668-4ef5-8080-bb7655d289e3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="ff40fd7a-db17-4e85-a5a5-a20f966af23a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:32:31.1275168Z">Series Text DataPoint Labels API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="2d8652b9-0313-4fe6-8f8f-f6b48228c0c0" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>7ded97cf-3870-4fdf-b8b9-b6e74e1d8225</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="c3693d80-7c5e-4a5b-b1f7-7dc4f20759ec" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>57b160a9-3476-4f80-89aa-ff7182023873</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a4abf8e7-7f66-4ad6-985c-03abcb7c30c3" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>35a4bfc3-eb1d-4c83-a168-49b68f225ff4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="d4ccd633-bec0-40d4-9db2-5b4de7a25413" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>6c10b207-c6b8-4550-b2b9-5eda54932801</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="f78e1813-438b-486d-bb54-b79312c7fe0b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8c0b3ec1-a34e-4f4c-b58e-4ff6074362a0</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="6988749a-3563-4d7b-aa41-8fd8268f3ce7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b0932024-2071-49b7-be0a-d6a9a37ec6d1</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="ac455cf6-74dd-40d7-87f1-8d40e18d8213" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:32:35.9772758Z">Series PaletteProvider API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="f0331ab8-f7e8-44a5-9165-1a50e61008ce" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3fb757b4-70d4-4a57-8c0d-97485cb8b722</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="d8f6cf0e-4ff2-41ef-bbb2-9a315c97286d" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b64e932a-c0f3-4c94-9750-69745955ec39</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4cdb9e93-26ef-49eb-a878-6a57ac6b5971" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d2584e96-8697-44a9-9732-216fdfe52003</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8bc2c7dd-4545-4697-83f2-d49d9a8c3470" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>238fb82f-7bbd-4cca-99cf-400ae1b5a8c9</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="45e56407-738c-481b-bb88-7cbe87e7836b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>a0dd2ab9-e8b1-43a7-a5bf-759d2b113b2f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="b8553d0f-7809-46d8-b4d0-d958e229190f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>642d697b-5b5c-4f53-a47b-7aa02d0f74b8</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="98fe2b5d-19eb-44cb-bd9c-7b7dc6eb2450" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b3e47563-6702-41ec-b855-caa86a025f11</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7f565140-0435-4654-a0fc-daddd61d6a45" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>c36e220e-71b3-48f2-a4ab-ac1e7699b269</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ac60963c-90b1-4d0a-8e72-09c5cdee9e75" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>71c23100-837e-47c7-af5d-667c153ff3a3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="e4892202-6781-4d56-9170-c36bfd06c3a4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:31:05.0345025Z">Series Hit Test API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="cd492542-4ad6-4ae6-8a7e-561c93dc87cf" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="49ed0816-17e4-490a-b311-b70ab731e3c9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>985bd560-7f5a-4d81-8b65-aa1b4cf33256</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="6bc0e42e-2d95-431d-8445-06145809a8eb" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>309a8887-503f-42be-b7eb-4f9adf27b7b4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a25e03cb-820a-4c51-b9de-0bfe669b5bab" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2a065a28-4405-4185-bb71-d28c21e51fd9</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8a81549b-1536-4c24-be22-bfe559442070" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>00681dda-3a4d-465d-9d54-0ffae4ab3649</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="789f4a61-d063-4313-abd5-fd9d30a40828" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>34fc166c-b0dc-4749-a87f-50854a179ca8</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4890808d-3cd1-4ca4-a6ac-1f6103af14f9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>98381ce7-bffe-4157-8818-baa222f88516</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="3d28b820-89af-44aa-9cd2-69e86a15edd9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ca213a8e-8f6e-4c61-97e9-e8254f56ec41</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ac9c991c-15b7-401f-9d03-50c864fd3106" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>11195739-cff6-4237-9987-ea34bfa6179f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="fcdbd857-fd19-4fc7-b68e-338113e2db46" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>4a777396-dc5f-42fd-8145-a6ed9215a557</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ea45d30b-4d55-4d9c-a066-1f05bd2b3a24" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="d25ff225-8c00-45f6-a406-da1798eb0c89" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b7bd274d-c460-4def-aa3d-7dce881e616d</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="e194d51f-4d0f-4678-9713-d2ea37f19452" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:42:32.6940109Z">DataSeries (Data Updates) API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="1bb0e58d-e046-467d-8729-2569a8974c8a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3425a202-cb28-4349-915f-ccf122d3a766</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="0fde7cea-135f-46f3-ba3e-6b1768893e95" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>31ffd4dc-de59-4205-a9e0-f64e390e618f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2b02a042-0077-4fcb-8a37-933c728631ed" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e06d99dc-d176-4c1f-a71d-5cc54aa9e669</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="daaeb18e-8529-4516-b689-4c024a18644e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>a7a8e8a9-a153-42a0-af00-913ef6e7e06c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a9634cf8-ab4c-4a03-97a4-272a34364765" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>52beca85-ed1b-4135-bd27-72f46ff74aa0</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="29697be8-3f40-4b3c-aa42-097e71c0fd7a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>13f5705c-af26-4667-999f-6535e4e07b6c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="83cce1ea-cde5-4680-9597-c3c8dfb85ef7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:30:57.4408558Z">Data PointMetadata API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="878c131c-bd29-4f68-8ec6-7c4b536c1bb4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="86757b96-e016-4290-a330-379a538cf478" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>a939c1ec-24a9-46dd-95ca-72654dd45e42</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="601a8b9f-9b74-43cc-9f11-ba9c69bc913d" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f6efccfe-43eb-4f99-abfe-11299fdecbcc</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="de55fb83-f3d9-44f2-95f0-01731d9f09cf" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>6b3501ee-5886-476b-b661-0964a70da63a</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="2d92f30b-7030-49d7-aa4e-65f652871a28" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-08-04T12:30:49.966764Z">Data Filters (Transforms) API</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="b8c0f10e-0608-4715-a7bc-46d0ee8cfae1" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>681061b4-68ce-47a5-8b9c-920651d9dc6c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="55cab64a-01fe-4b45-8e7a-583bcabe4063" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>cce20b3a-f65b-4260-9f46-3c27aab8673b</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="914081b0-0be6-40e9-8d22-1b8cc27b0440" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4ff11d95-4759-4863-a6ca-c29a6c6b4bb6" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>68b69103-2ec3-457f-a1ab-c4b32ed72b37</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="15011118-0d95-49c1-874e-e9ed5fc55ab0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d62d3048-eecd-4e3b-85a0-7115d98a2440</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2ebabfdf-e192-4491-ac61-75dfaffa48ad" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>064a8784-a0b0-48ad-90dd-2917297856a2</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="4c741d33-9f9e-4aa6-a8fc-9c828c7b3b13" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e280ed77-6cc5-49cd-84be-ecd143139ca6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="709613aa-02fd-476e-a279-b6be6a1fb5dd" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7f5a6207-a081-4a74-add0-1fb3e36b2806</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c9ef4a06-4958-4d67-a88b-b67d4c05d638" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="02155eff-9b3f-41c7-ab09-87d104df93ed" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5693b2a-3d41-4603-b249-8594512d1604</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="cae73f75-5392-4bb1-ba12-acf6fc19e53c" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d792ff3f-5429-4186-8947-790b9d6bcee5</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="51ef5192-92ee-4804-bea1-0e02e8bd2938" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>246d21d0-3b1b-4840-be7b-33bc0066e0e1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="23ccee10-da03-47b0-b81f-59c0bd2c306f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes>
                    <TocNode Name="" Id="326b4382-43e1-496e-b585-b5e485aa0a58" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b17d4f5a-9e1d-465f-8fa4-d22fd1b0e89c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="952ca033-52b6-4bd6-a96a-c75305c87a2f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>5f664da7-9d4d-42e9-bcac-736d69110d96</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                  <TargetItemId>d53b2f8b-665d-4804-bb72-9e19b3c84ed0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="308b39a7-f609-44f7-b751-8a3951493858" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>bfe9f9bd-2e26-4aac-bd61-e965fe38c8f6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="17fe58fe-a7a6-4fc7-8e6f-f36beb2b23a8" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>42243024-7b1e-4266-b3fe-bb8f64450b04</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="594c179c-e7f8-47cb-a122-428be15ae70c" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b2fc10ad-2614-414b-a173-bed16255aa6f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b14d5765-e2a9-44a4-aa1b-cd8275a9b374" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>37dc17e0-10de-47a3-b255-dd7d6ad1cb0d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1d5837f0-302a-4bba-a4fd-588a6bae7e95" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9433151a-2281-47ec-8919-d5e43d44731b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3456a2d7-2e55-4f5f-842a-f9cca773f613" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5bcd0f1-0a90-4c63-a9ec-dc43c1846fbe</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="aa8163bd-78c2-4d6f-8fad-3ccadc7906b2" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7cf91fa8-841d-4bb8-adbd-44a9dd73b238</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a9387b69-8040-4b87-8158-83bb1beaa098" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>537e0dce-c257-4348-bcc7-240f80714eac</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4591dbac-9af9-425f-a700-a84a6e5ef094" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a53bef2b-820c-45a3-9903-ad426d572aae</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="eea0e188-c8d2-4334-933d-f7ffc5e66e0f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e627d5a1-bbcc-4265-bd91-fcf1d9a5bcf0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c534359b-9418-4eff-96f6-9b97e0070300" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>121e373b-412a-4846-8fa8-862f0e716fa2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="cb89dde5-7c86-4563-83b9-e224b8f87591" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="de406797-2bf6-41aa-be49-3df2a83957d1" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d9007373-3f18-4bbd-be21-86a97872b4ee</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="58f9934f-6c31-4b5c-acf7-2d58d0de4a16" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9bbf7021-7ef1-49d7-9904-c28029ab9a48</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="7ab15192-bb55-4bcf-8b6c-ca084655b714" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>11646318-4795-4310-8650-231db20e9026</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5082e443-5758-43d5-ae75-7c82d69f0109" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>2674e2d9-0998-4a1f-be8a-5d5bdec014aa</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6d04b645-4376-44d6-931d-48bf9bf4d41a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9c421b30-f025-4432-b235-4bd365e4545d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="bb7d91b1-ccaf-4bca-b958-a6e9f340122c" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e99914e3-6526-410c-a0fa-05c4f1d90573</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="d5ee8282-d345-4b8f-b206-92ca2aedb3ff" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2021-09-17T08:37:48.0247894Z">Builder (JSON Chart Definition) API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="47c1cb9d-ae91-42b7-b0b4-f5b7ad79dcbc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>295dec01-f48c-4caf-a4c8-5b5ed765ba9f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="312e29a9-6d5e-49f0-bd70-97b962645a17" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>12d8414b-a252-4fbc-bc7e-0595f40a66f6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="44af7ba4-ae0f-4564-b215-aabab5e67369" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b90d56c0-b80e-48db-ac14-36b8a86e899e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="abdc0f70-e8af-4ccd-b7c2-c09d5d3eabcd" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>3d5e0ccc-b961-4c7f-ac00-10289476a61f</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5fd132e5-0630-4475-a8db-01249b4623bf" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>5f6559d4-718c-4546-80ce-1ca143a12eec</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b853fbbf-43a1-4795-9eaa-7c751e4cb0f4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e2d26342-28fb-47d1-8edf-1fcaaebdc2db</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0e29e780-8e30-47b2-a5d2-a10bf75351c9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4b80afe1-5ed3-415f-9668-7f43e45c13c4</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="0607610f-6611-4900-a626-869e53120459" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-09-02T09:08:48.9843746Z">Axis APIs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="2fcd2b71-27c0-461c-8559-d95ed9033efd" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>14ab8b3e-55c7-48b9-80e0-bb545387accb</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="af4fcb39-bf3f-46e2-94d1-c2d91ced1afa" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-08T19:24:56.1908512Z">Axis Types</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="43066ee6-9d27-4ad4-bc35-c2ea72ca7d53" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>59423216-5246-4365-a936-f76b487bd181</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="26d5606a-37d6-41be-b848-9ba5adafa036" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>bf3b144b-2153-4d7c-ab74-152f839df85f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="82959648-803d-4dbc-940b-99c097e3f628" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e71de078-98d8-441a-9432-4289aa687270</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="1fcf3845-536f-492d-80f9-aa25a787a1e9" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>dbda6c22-a06d-4301-9b1d-d83b542d030f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ee99d07e-89c3-4f20-b729-6e6e3e703f66" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f602f5c0-2de4-4dd6-949d-e50ecce6b6e8</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="fe9a2718-dd61-4caa-bb3a-cffeda7e0d15" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="dd937b8c-7691-4217-b013-6765d7dd2e6b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-08T19:28:05.9816468Z">Axis Ranging, Scaling</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="d9c22388-0f05-430f-9106-79a352825951" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f43a75da-4a63-41a6-8db9-ff0ea13a5198</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="f5d5454a-0f35-4dfb-b0d1-5c94334ff161" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>dfe50e75-c34a-4d96-98c7-9ce9855956cd</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="5e06a20c-9183-41c0-886c-8001be11ea0f" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>75091468-bbf7-49ad-9841-c5d935660429</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="dca33cf6-aed0-4c87-9bef-95064cae17a5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-08T19:25:16.3641089Z">Axis Labels</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="99fbad79-269f-4efd-9a35-fe2392190d78" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>1325dcad-b236-42e7-8491-af7a8137d6e7</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="1f816952-43e1-440b-8f52-278c85d9a839" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2d75bc26-0de1-46c9-9af9-fd11696c4ee2</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="f61296b3-1615-45f2-a1f3-c0d61d4a4f2a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e9747ecc-a3cd-456b-9180-c47daead66ef</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="b09ee5bf-9123-49de-b82b-4c2ea3d7e067" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>43eff091-2936-4343-b875-8bf40d36b2c2</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="13d5a627-6ea4-4669-8cec-fd8a30976f9a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>60d1c9a4-f68a-4d26-8341-fae611c47315</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="574e069d-4c44-46bd-9464-39d63d947471" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2016bf44-40c8-4b67-a90a-6c3df8056289</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="1494f49c-926c-4f4d-ba4f-dfd56c35c324" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>96971248-32ef-4309-a9bd-bf3535cb065f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="e72858fe-66bd-4c45-b320-5adf26c05616" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3616f94c-1224-4896-8306-d6a17af11082</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="2f65b09f-ab36-4901-9e77-2dbda9bd728c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-16T21:50:29.5501471Z">Axis Tick, Label Interval</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="ae5ab11a-3cf8-4354-b09e-fac4ba8d0e36" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>463d136b-fe1f-4960-85ac-9cb15ceb1d21</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a858ffa3-824f-426b-bcc7-63696039885a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>31e819ca-a224-4e7a-8fa1-4c8301fb6108</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="83b64966-fcb3-4a15-9b85-7775af061105" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-23T17:10:56.3420526Z">Multi Axis and Layout</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="afa6ab89-0d1f-41ce-9e56-89ed655503e1" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>2294a48f-459b-464f-9504-aed96c7fda2a</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="c64cfc48-eab9-4af1-bb1a-575f2fdc6e3c" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e00ca150-579a-4496-98b9-70c83ca9a7bb</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="b1a2b9d3-e5ce-41b4-a4f8-5e2ce879fbc3" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0175a983-0786-4067-b718-206c8c41cd3b</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="0ad2da99-914a-4e88-93ac-48871c643c37" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>9dc14a09-9cff-46bc-939a-b03d6a9cb2ad</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="3e9f7a7f-bd24-4725-b618-b8900d4b1181" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>af7dd07c-7746-4a9d-a9ea-1afc4bb95701</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="c013359a-6e46-4644-ae36-437c481cae3e" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>60612d56-74d4-46c1-bdff-f31e2fe22d57</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="16b3d887-789e-468d-9b0a-916634842135" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3a1fa3f5-6ae6-4819-8100-4a382d581587</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="2c6f36a6-68cd-4912-bb79-0f3a32472a32" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-09T17:41:41.5222749Z">Axis Styling</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="d424263b-c2ad-4987-ac61-46169988a2ca" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>522bb84c-264c-4919-aa66-5f8272a72610</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2d51a7a3-e050-4e81-816e-8c458f3811b2" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8deddadd-6171-496a-ab20-7332232c4c16</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="db6fa60e-8d16-4980-b128-35bb1cc9588a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>d66c2e84-028d-4bb7-930c-df91beb840db</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="70c296a4-a222-42a1-880c-0c258bfcb23b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-03-08T19:28:18.8426858Z">Misc</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="7684f1a4-a860-4958-9411-58ed86d8af26" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>71de4b19-4e61-4f9d-be5e-9b90bb2587f3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="ee40bb8e-e1ac-44a8-bc40-9d7b1ff33a34" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2021-09-17T08:36:51.1113254Z">Animations API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="ad01594d-9664-4a87-a8f9-6edef75c4e62" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9695e2f8-bcd6-4ed4-ba36-244dc476498d</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5a22c201-a900-4486-b7bc-15438eded776" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>58192c7b-dfc3-423d-a59e-c0f2ad6444f5</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="9370b95b-20ff-4521-a101-bd1900222d14" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f876af6c-6400-450c-a8e0-86abbddceb22</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5bbd2e14-4d82-408a-a3fe-6c5aef0c8f7b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>85747712-2b51-4065-9ca9-63bfba49d2d1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="bbf67d96-2622-4230-a19e-70f7b4634e62" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>fe6c3ce9-2005-4376-9a41-24d2c4f9540c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="205cbd36-c313-4052-b772-3b70c44841fe" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-10-21T16:41:00.7107929Z">Annotations API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="d7774842-3ac8-4512-8725-7bbb537ca3f6" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>06b6036b-fbc1-41e4-905a-52ec73295788</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0c27c090-e1a1-47d2-ab81-972e8e8ef410" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>583becc5-a46d-4fdf-9b69-f6b2f973deb8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3cc34165-c631-4afc-b718-0eea8982832c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>963d03d5-c2f0-4143-9817-8b37186bfe69</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a716221c-c91b-413c-bec4-18c167f56f93" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>72e4491f-8140-49cb-8bd3-85b381967f87</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="29a64070-bf36-435d-81e6-219ab801a3bc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>24a50b9d-0b8d-4124-b5e0-db75517608bc</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d2d4e7f1-8963-46e2-ad12-3d45f6af523a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1150712d-1531-47f8-a9f7-c8fa6662edbe</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c565cfaa-c128-4716-a50e-92fecbe9b2fc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>46e0aece-c112-40af-a0e8-46c69045fd50</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="25ceb960-22eb-44de-a172-8a793164cfc7" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>463874a3-04b9-430b-be53-63863b12a39b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b90b4195-9fb7-4e21-a5cb-a739d75d7c18" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a430d22c-a6c5-4a0c-99fa-d94e200cfd60</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1eba73b8-0311-459c-83a4-978fc7222310" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f3da61af-0fe5-4804-be50-c76e30f056d2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c83ac524-7c79-43ea-b7df-276a2a67b091" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>135e80f7-4f28-45c9-a7a2-4ae99818bbef</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="fdd6b38f-c2ce-46e4-929c-0618f670517f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2016-10-19T10:09:05.620921Z">ChartModifier API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="5154a036-7200-49b2-a50b-ad9be2ad0c68" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:11:14.0114083Z">ChartModifier APIs</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="5c8eb3a7-b841-462a-bd69-bfd43968d3de" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f1ace0de-c745-4610-a766-eb59af8cf33d</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="37fda729-e5e6-4e3e-b39e-09216910287d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>c7ddb5a2-5c58-4351-9336-bafd039a556f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="08cb4a90-7f14-4634-9e20-122890dc20da" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2016-10-19T10:11:32.2300756Z">Zooming and Panning</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="e7b09ca9-1a77-4ffb-8d2e-cec50c455751" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="a463b1e0-0472-4d30-a69a-efdf4083cd28" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>4af28faf-3268-417a-8146-a3d25a8d9833</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="2e3dd468-30f9-42a3-af9c-7b38c7ae89ac" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>e4070924-5099-4e15-8a7b-81dcc7056865</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="4a84d799-128d-4bb7-88b0-7ef14d5b5d0b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3404e05e-872c-4be6-ab19-52ddac8c4f94</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="7bd5f2a6-6dac-4bd1-a99c-9b9f0086d03f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8be89d95-1b3a-4ce3-8665-1f8f18d43b32</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="88123bcf-2fd0-445e-ade5-1fc2b7085a99" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>3522c82b-989f-4d1b-bc80-be617b68af2f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="cd112d47-27fb-40ee-bbb0-c01bdad538e5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>30ee889c-86dd-41d2-bc3f-ec0415855433</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="00465dbf-734a-4a49-bdb5-7e9dababa0fc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>14f8ca37-9a7f-49bd-b8bb-66b8b4e94bce</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="e0ce4c24-48a6-44d3-a3b4-2554ef8909ca" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-09-13T15:10:20.1012793Z">CursorModifier (Crosshair + Tooltips)</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="e0d03363-ed9f-4a4c-9bc3-f9be68b653b4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="ad7a63bf-0f96-415b-b04a-0191eefaa911" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>f5e77a55-f317-420d-9781-f8de2522f889</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="914a098c-4930-4b8e-b172-974ccc5c1e18" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>b8fb3f0a-a8f1-4c2c-821c-230efc18e5b8</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="cbe199bf-1a33-4930-ae23-27c85460e1be" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>bc9cfc5a-28fb-4fd8-9649-59e5c8357e7f</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="3d651449-3789-47a5-8367-39ab70234a70" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>994b40e2-b798-4517-82fa-09b2c79a3617</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="47832a57-8e22-4bce-b477-0a493d68c8f0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-09-13T15:11:01.3255494Z">RolloverModifier (VerticalLine + Tooltips)</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="7f960da3-d741-4f1c-abd4-d7d1dda3f4ec" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>fac601dc-5435-4c51-abec-1c267f55f193</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="32edc447-ff48-45d1-a738-b731c89fd5b5" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2020-09-11T16:26:08.2716371Z">Miscellaneous Modifiers</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="d530850a-2813-4f87-a5dc-0544efe4b614" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>84ac3103-a531-43bc-8546-f275d91be35b</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="52523b3f-68ca-43ca-b47f-661cfc2683ca" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2021-09-02T07:48:10.6616479Z">Selection</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="34b81072-c0c1-400a-94d2-5f3d38db5b4f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>dc5b75d6-5475-47a1-a5c6-24310f833ba0</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="273497bc-da5e-4c25-8bcc-c4e94c797a29" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>ae9b10e1-f5ba-444e-9835-6b0f95806007</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="ce9f64b5-faf8-4ac8-a384-a74d3c2fc390" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2022-03-04T19:29:50.0259502Z">Custom Modifiers</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="27ea4481-dd13-400b-ba6d-e20b5e05bd1b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>372ca001-b07d-443b-b0a6-972158a1bfe8</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="231378c6-acd4-43fd-a8b8-df7fbadba8de" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>622aa9e7-6135-4e59-a2b0-4e6a080414aa</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="2cbf97a5-3cf1-49af-8481-53316ce430ba" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2022-08-16T11:15:13.6106437Z">Subcharts API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="6233967a-eb14-4603-bab0-beab3ea2e528" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e7d484ca-b11c-424e-9d88-0afbabc17bde</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="80e4784e-07d7-4e07-a618-84532d200556" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d078679d-8814-4e65-991a-6cd39152665e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="27e943fd-fa05-4737-976e-951079a7fb8d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d11cc9cc-62cc-4a05-a893-91175f2426f2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4728ab5c-ca97-4743-aa77-d635d6699009" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a2e07572-2c22-4151-83ed-7edd12983b21</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3d4c8d1f-63f9-4e0a-9b32-be27942fb8c2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>a89292b1-e064-4519-b956-7ced2732f8e8</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="d090de84-5217-4c28-bee4-7065a3acaa9d" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2021-09-23T10:05:26.9141711Z">Styling and Theming</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="8bc1233f-bc92-45a4-90bf-cc0425fa2483" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>5760011e-fce8-440b-bdb5-470621e85012</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="09c3d362-b606-4b87-ae86-b21a06c02115" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>b21b1ec3-6fbd-4f80-8de1-0c6647638e0a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="e6f81404-2d54-49dd-91fe-ccd84fae731b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>9d4694ea-a334-47f5-be19-2fe2f8866339</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b63bec40-5dd6-487a-888c-cc1f6832bf8e" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>6351c2d0-d53e-4a17-acbd-7c0d3554fe87</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="8912ddc5-eaa7-45ef-a394-76a28c58696f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e23972b6-27ca-4b68-aded-d48c12aa1230</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="19c765fa-b466-4b6a-aa39-275291b1eb02" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>91ecf8cb-fdb5-494c-a73e-8653cd940de0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="4b57745f-5341-4214-b351-578291e48602" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0088e945-90ec-4c22-9ebb-77ac52066462</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="cddd2faf-a15f-493e-ae98-d32fe4b91c4a" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>db673f2f-0e4d-4908-a533-10defb8e23f0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0f05b106-12df-4407-88f9-3db66a95fd55" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1a30b47b-3dfb-436a-adba-58db7b7b9aad</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5ef0dca6-76d7-490b-bb45-8d771b0f3573" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>ebbbff3e-8993-4281-8791-6c8eaad5c318</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="cd73663e-ef65-4123-afc8-4935f5bdcb93" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2021-10-08T11:02:19.1771964Z">Accessibility</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="939b5f7f-87fb-45c6-a84a-0f04032fbd08" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>ebdbfc5e-2e00-4be7-a70f-fee17836eea0</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="d0c3e0e7-f8d2-401f-956e-4d57a5fa186c" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d2217f84-91e6-420c-8729-fcee652a45b2</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0a1dbcc3-fcd5-4a28-b040-2b6f5933d2f9" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>f1e9ab82-1c46-40a1-9313-ed7bb8001734</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="ab8e1dd9-9867-4fa7-9ff0-bf85f66663dc" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>3be95a45-054e-474c-aeb3-9aa0fc83eb8a</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="fcb5ab2b-4c10-4f07-b022-8d1c0f61e8b2" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2021-09-17T08:38:37.5361172Z">Miscellaneous APIs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="2db46c38-6f40-4ee9-b101-906f7082a37f" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>d2be691e-df29-43c3-9a57-0130024efa03</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="1d806f15-5859-473d-b638-4a9ab63e5a1a" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>498f88e2-6f84-4804-9da5-426e8d72ef00</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="fb1a7864-6413-42a0-b91d-f74a9a6ac4ad" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e5a3627c-906d-4bb5-a81d-981df6e3e96b</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="de28e798-d43c-4c61-a357-cd5e20829396" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2023-07-19T12:48:16.9073597Z">Performance Tips</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="ff075725-6c6e-400f-ab66-bf27a7049a0b" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>31c1fa0b-34ae-472f-b888-2de129265d50</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="b9ba56ba-6464-4de4-8aa9-14b330ad8928" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>fe846da4-4ffb-4833-bf13-e688f8f82497</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="14cc7b79-ccce-437a-b2ba-699c6fc1105b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4658035b-e6f2-4a3a-8203-958042b96f56</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="dfdecf02-99ea-4548-aca1-b81304886af5" IconIndex="1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2020-08-03T15:09:11.0475314Z">SciChart.js JavaScript 3D Charts API</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="6a97f7dc-f8f6-45bc-9931-cae2cf470fae" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-08-05T12:25:53.424656Z">SciChart3D Basics</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="2bee0ea0-86a7-4e3d-a78b-69c65bc78fa3" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>01b31f4f-bced-419a-a232-e11ae17a7255</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="f9dd5fdb-0fce-4391-b07c-747450c530bd" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>ff022bdc-cb4d-4a6b-a941-6a84a59b0f04</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="6678f472-85c5-4509-8e44-77ade9e98441" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>0a96bb3a-89bf-4886-9ad9-e11ad6f32c4e</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="5c8aa210-1cf4-4380-800f-d5e8a26a6647" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>e3c137ff-6d4e-44e5-9542-bbb00b65e3c1</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="900eca10-1404-4915-829d-ff0e8ffb3bbd" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T12:07:53.3845788Z">Axis3D APIs</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="022adc1a-0a2c-42ad-934a-aa9c2b427977" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1d18444a-b912-4bcc-ae02-96bde1620a21</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="a50c3f69-c85b-40d6-89a0-48b1c710532b" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>1f42648d-b868-4793-8ab7-b44504f33f99</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0fc7ea28-a66a-4015-b0ca-8521c36d60fd" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>8f08a07b-da4d-4872-83de-412850826296</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3478f940-0452-49c7-9a27-dab9d39b4674" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>7e505bd8-0973-4529-a8fb-4510d84addb6</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="5af8ded8-d5df-470f-a88d-6a7846e6e3f5" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T12:04:51.5850314Z">3D Chart Types</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="878970cb-5b88-4d05-a5b7-83ab0c924fe4" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>4390d675-fd3c-45d8-8357-09b747d5071c</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="0977f735-a08f-45e8-8004-b6c266cb5bd3" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>07c999cf-2895-4b49-ae5f-77d283a51741</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="3826b76e-4673-47d6-aa9a-87e8856ee8b5" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate m="2023-07-15T10:38:58.6895342Z">The Surface Mesh 3D Chart Type</CaptionTemplate>
                  <ChildNodes />
                  <TargetItemId>e5fc78ef-475f-45ae-b38c-d42ba9e6ed50</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
                <TocNode Name="" Id="c8ed7e34-7f51-48ee-a584-62ad53663b33" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                  <CaptionTemplate />
                  <ChildNodes />
                  <TargetItemId>33cbcf3e-8a70-4e28-a69f-3132493fcec7</TargetItemId>
                  <TargetItemBookmark></TargetItemBookmark>
                </TocNode>
              </ChildNodes>
            </TocNode>
            <TocNode Name="" Id="2b840874-75eb-43b4-b6df-c8cb3b544f57" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
              <CaptionTemplate m="2019-07-22T13:19:54.0935724Z">ChartModifier 3D API</CaptionTemplate>
              <ChildNodes>
                <TocNode Name="" Id="434349a7-aefe-4284-976d-234662dccec4" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2019-07-22T13:20:10.1582387Z">Zooming and Panning</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="f7ebe0b7-33e9-4e50-be67-280214d900e5" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>02e0ff0e-aa3f-4ed3-8227-4ca9e6217352</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="8f78355d-7b70-4b2f-aea8-b52259175596" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0f6660f9-8d3a-4fa9-b228-36376c2d79d4</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="97762646-046f-4b00-aadf-c61a76886a85" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>8cc4d206-bdd4-4d42-8ff4-4c09fddcb317</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                    <TocNode Name="" Id="15a9722f-342c-4772-9643-88134ecf3887" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>0f31338f-c416-4129-8e9b-cc357faf1082</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
                <TocNode Name="" Id="5d43a765-146e-4882-8cdc-89ecce3f6aa9" IconIndex="1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
                  <CaptionTemplate m="2023-07-14T18:11:29.8730762Z">Tooltips</CaptionTemplate>
                  <ChildNodes>
                    <TocNode Name="" Id="f9060c54-9092-482b-8036-e316d45384f1" IconIndex="-1" IsNew="true" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="PROJECTITEM">
                      <CaptionTemplate />
                      <ChildNodes />
                      <TargetItemId>7915ac64-f37b-4acd-a5c7-521a0259d63c</TargetItemId>
                      <TargetItemBookmark></TargetItemBookmark>
                    </TocNode>
                  </ChildNodes>
                </TocNode>
              </ChildNodes>
            </TocNode>
          </ChildNodes>
        </TocNode>
        <TocNode Name="" Id="1c13e83a-a693-4031-94a0-df13003d6ee0" IconIndex="-1" IsNew="false" Target="" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="NOLINK">
          <CaptionTemplate m="2016-06-21T08:22:54.2836035Z">API Documentation</CaptionTemplate>
          <ChildNodes>
            <TocNode Name="" Id="ab66fb7c-54cd-4672-8d5d-6beadf29069e" IconIndex="-1" IsNew="false" Target="https://www.scichart.com/documentation/js/current/typedoc/index.html" DependsOnItemTypeName="" DependsOnItemTypeFilter="" DependsOnMinimumCount="0" DependsOnStillProcessChildNodes="false" BuildFlags="" NodeType="URL">
              <CaptionTemplate m="2020-10-09T14:02:42.9136848Z">TypeDoc API Documentation</CaptionTemplate>
              <ChildNodes />
            </TocNode>
          </ChildNodes>
        </TocNode>
      </RootNodes>
    </TocLayout>
  </TableOfContents>
  <TopicsProjectPlugin>
    <TopicCategories>
      <TopicCategory Id="-" AutoIndex="false">
        <Caption m="2009-09-11T10:57:19.7639331Z">(Un-categorized)</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="4a03e8a7-a1ce-4677-a2a7-f1233b22f4c4" Status="New Topic" CreatedOn="2023-03-22T16:51:39.6282895Z" ModifiedOn="" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="NewTopic" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-03-22T16:51:39.6282895Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="b19c17c4-bf1d-4ee4-9902-0ec43e10e7e8" Status="New Topic" CreatedOn="2023-06-21T12:26:26.5395847Z" ModifiedOn="" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="NewTopic2" BuildFlags="">
            <Title />
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-06-21T12:26:26.5395847Z">&lt;p&gt; &lt;/p&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="CONTENTSNIPPETS" AutoIndex="false">
        <Caption m="2011-11-29T17:13:19.1489878Z">Content Snippets</Caption>
        <ChildTopicCategories />
        <Topics />
      </TopicCategory>
      <TopicCategory Id="0e0bdef4-9f15-4750-b5ff-6e8d9f518ad5" AutoIndex="false">
        <Caption m="2020-08-03T15:26:57.7868646Z">SciChart.js User Manual</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="d9186051-eaa4-42af-847b-342df3b8df30" Status="New Topic" CreatedOn="2016-06-20T20:37:35.1758693Z" ModifiedOn="2023-03-11T08:52:27.9284691Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChart_JS_User_Manual" BuildFlags="">
            <Title m="2020-11-25T18:23:56.9147101Z">SciChart.js JavaScript Charts User Manual</Title>
            <ContentsTitle m="2023-01-07T13:39:44.8341092Z">SciChart.js JavaScript Charts User Manual</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BODYTEXT">
                <Content m="2023-03-11T08:52:27.9284691Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H1&gt;What is SciChart.js?&lt;/H1&gt;
&lt;P&gt;SciChart.js is a&amp;nbsp;&lt;A href="https://www.scichart.com/javascript-chart-features" target=_blank&gt;High-Performance Real-time 2D and 3D JavaScript Charting Library&lt;/A&gt;. Designed for use in scientific, financial, trading, engineering, medical and business apps where you require extreme speed, rich interactivity and depth of features and flexibility in a&amp;nbsp;&lt;A href="https://www.scichart.com/javascript-chart-features" target=_blank&gt;JavaScript chart&lt;/A&gt;.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/scichart-home-see-new-worlds.jpg"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Across&amp;nbsp;&lt;A href="https://www.scichart.com/wpf-chart-features" target=_blank&gt;Windows&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/ios-charts" target=_blank&gt;iOS/macOS&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/android-charts" target=_blank&gt;Android&lt;/A&gt; and now&amp;nbsp;&lt;A href="https://scichart.com/javascript-chart-features" target=_blank&gt;JavaScript&lt;/A&gt;, the SciChart Family is now in its 7th generation, and provides an extremely rich, fast and interactive JavaScript charting experience with a wide array of chart types, and the&amp;nbsp;&lt;A href="https://www.scichart.com/javascript-chart-features" target=_blank&gt;JavaScript Charting Library&lt;/A&gt; is the newest edition to our portfolio, bringing high-performance, realtime charts to web browsers and JavaScript applications.&lt;/P&gt;
&lt;P&gt;The SciChart family is used by thousands of customers in over&amp;nbsp;80 countries worldwide, in sectors ranging from Defence to Medical, Financial and Trading to Oil &amp;amp; Gas, Process Management to Formula 1.&lt;/P&gt;
&lt;P&gt;When you become a SciChart customer, you join a community of developers support by a world-class &lt;STRONG&gt;JavaScript&lt;/STRONG&gt;, &lt;STRONG&gt;WebGL&lt;/STRONG&gt; and &lt;STRONG&gt;WebAssembly&lt;/STRONG&gt; graphics &amp;amp; visualisation team and domain-experts around scientific visualisation, performance optimisation and low-level software techniques.&lt;/P&gt;
&lt;P&gt;We want you to enjoy using our products as much as we enjoy making them, as well as to succeed, so if you have any feedback good or bad, please get in touch as &lt;STRONG&gt;we want to hear from you&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;The following document serves as a reference and an overview of the features in the SciChart.js JavaScript SDK. For a complete code reference, see the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html"&gt;TypeDoc API Documentation&lt;/A&gt; and the&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;SciChart.js Examples Suite&lt;/A&gt;, which contains many code samples you can run, export and modify for yourself.&lt;/P&gt;
&lt;H1&gt;Table of Contents&lt;/H1&gt;
&lt;P style='WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: 13px "Segoe UI", Verdana, Arial; WIDOWS: 1; LETTER-SPACING: normal; TEXT-INDENT: 0px; font-size-adjust: none; font-stretch: normal; -webkit-text-stroke-width: 0px'&gt;Below you can find a table of Contents for the SciChart.js JavaScript Chart SDK User Manual. Also you can use the&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;links on the left&lt;/STRONG&gt;&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;to navigate the user manual.&lt;/P&gt;
&lt;H3&gt;Intro to the SciChart.js JavaScript Chart SDK&lt;/H3&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;c80f244d-54f1-4d4e-88c3-93ad6d8b57a5&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;The SciChart.js Examples Suite&lt;/H3&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;6de95ecd-6cab-4880-acdc-c355548d7cda&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;SciChart.js 2D Charts Quickstart Guide&lt;/H3&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;89663887-5487-4431-89e9-dbf63700263b&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;SciChart.js 2D Chart Documentation&lt;/H3&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;f4eeaa28-daa7-4b9b-b8d8-60c96fe82066&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;SciChart.js 3D Chart Documentation Coming soon&lt;/H3&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;dfdecf02-99ea-4548-aca1-b81304886af5&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;TypeDoc Documentation for SciChart.js&lt;/H3&gt;
&lt;P style="COLOR: rgb(0,0,0)"&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html"&gt;TypeDoc documentation for SciChart.js can also be found here&lt;/A&gt;, or by clicking on API Documentation in the Treeview on the left.&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="010455fd-1703-4f00-aca3-05411237612c" Status="New Topic" CreatedOn="2020-08-03T15:27:12.2159991Z" ModifiedOn="2023-03-11T08:52:27.9370255Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Minimum-Browser-Requirements" BuildFlags="">
            <Title m="2020-11-25T18:23:00.9055152Z">Minimum Browser Requirements</Title>
            <ContentsTitle m="2023-01-07T13:39:47.2087838Z">Minimum Browser Requirements</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-03-11T08:52:27.9370255Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;SciChart.js is a cutting-edge next-generation JavaScript Chart Library. As a result, we are using the latest technologies to draw our fast, real-time and interactive JavaScript charts.&lt;/P&gt;
&lt;P&gt;Minimum requirement for deployment of an application with SciChart.js is &lt;STRONG&gt;your browser must support WebAssembly (wasm) and WebGL 1 (preferably WebGL 2).&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;A full table of which browsers are supported can be found at the&amp;nbsp;&lt;A href="https://caniuse.com/" target=_blank&gt;caniuse.com&lt;/A&gt;&amp;nbsp;website.&lt;/P&gt;
&lt;H2&gt;WebAssembly (wasm) Minimum Browser Support&lt;/H2&gt;
&lt;P&gt;According to&amp;nbsp;&lt;A href="https://caniuse.com/#search=webassembly" target=_blank&gt;caniuse.com&lt;/A&gt;, 95.12% of web&amp;nbsp;modern&amp;nbsp;browsers worldwide can use WebAssembly. This includes all major browsers: Chrome, Edge, Firefox, Safari, Opera on Windows, macOS, Linux as well as Android, iOS devices.&lt;/P&gt;
&lt;P&gt;This compatibility % is set to increase as wasm becomes a standard across browsers, led by Google Chrome and adopted by others.&lt;/P&gt;
&lt;P&gt;Minimum versions are found below:&lt;/P&gt;
&lt;P&gt;&lt;A href="https://caniuse.com/#search=webassembly" target=_blank&gt;&lt;IMG border=0 alt="" src="images/can-i-use-wasm.png"&gt;&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;WebAssembly is supported on&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;IE Edge v16 or later 
&lt;LI&gt;Firefox v52 or later 
&lt;LI&gt;Chrome v57 or later 
&lt;LI&gt;Safari v11 or later 
&lt;LI&gt;Opera v44 or later. 
&lt;LI&gt;Almost all modern mobile and desktop browsers support WebAssembly. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;WebAssembly can be enabled in some earlier browsers can by adjusting settings. See&amp;nbsp;&lt;A href="https://caniuse.com/#search=webassembly" target=_blank&gt;caniuse.com&lt;/A&gt; for more information.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note: WebAssembly support is not available on Internet Explorer 11, but is available on IE Edge 16 or later, Google Chrome, FireFox and Safari&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;WebGL 1 Minimum Browser Support&lt;/H2&gt;
&lt;P&gt;According to&amp;nbsp;&lt;A href="https://caniuse.com/#search=webgl" target=_blank&gt;caniuse.com&lt;/A&gt;, 97.94% of web browsers worldwide support WebGL 1. SciChart achieves the best performance with a WebGL 2 browser support, but all features are available on WebGL 1.&lt;/P&gt;
&lt;P&gt;Minimum versions can be found below&lt;/P&gt;
&lt;P&gt;&lt;A href="https://caniuse.com/#search=webgl" target=_blank&gt;&lt;IMG border=0 alt="" src="images/can-i-use-webgl1.png"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;WebGL 1 is supported on&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;IE Edge v12 or later 
&lt;LI&gt;Firefox v4 or later 
&lt;LI&gt;Chrome v8 or later 
&lt;LI&gt;Safari v5 or later 
&lt;LI&gt;Opera v12 or later. 
&lt;LI&gt;Almost all modern mobile and desktop browsers support WebGL 1 &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;WebGL 2 Minimum Browser Support&lt;/H2&gt;
&lt;P&gt;According to&amp;nbsp;&lt;A href="https://caniuse.com/#search=webgl" target=_blank&gt;caniuse.com&lt;/A&gt;, 92.85% of web browsers worldwide now support WebGL 2. SciChart achieves superior performance with WebGL 2, but will automatically drop down to WebGL 1 where this latest API is not available.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;A href="https://caniuse.com/#search=webgl2" target=_blank&gt;&lt;IMG border=0 alt="" src="images/can-i-use-webgl2.png"&gt;&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;WebGL 2&amp;nbsp;is supported on&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;IE Edge v79 or later 
&lt;LI&gt;Firefox v51 or later 
&lt;LI&gt;Chrome v56 or later 
&lt;LI&gt;Safari iOS v 15 or later 
&lt;LI&gt;Safari mac v15 or later 
&lt;LI&gt;Firefox for Android v107 
&lt;LI&gt;Android Browser v108 
&lt;LI&gt;Opera mobile v72 &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note: WebGL 2 support is not available on earlier versions of Safari (Desktop or mobile), but in cases where WebGL 2 is not available SciChart.js will automatically downgrade to WebGL 1.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="2af91ecd-b2a9-4699-9b71-53204a53b31a" Status="New Topic" CreatedOn="2016-06-20T20:50:38.5400924Z" ModifiedOn="2023-03-11T08:52:27.9405814Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Online-Resources-and-Help" BuildFlags="">
            <Title m="2023-01-10T21:56:35.9778359Z">Online Resources and Help</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-03-11T08:52:27.9405814Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Online Resources &amp;amp; Help&lt;/H2&gt;
&lt;P&gt;There are several online reosurces to help you get the best out of SciChart Android. These can be found at the following locations:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Getting started guide at &lt;A href="https://www.scichart.com/getting-started/scichart-javascript" target=_blank&gt;www.scichart.com/getting-started-with-scichart-js&lt;/A&gt;&amp;nbsp; 
&lt;LI&gt;SciChart.js&amp;nbsp;forums at &lt;A href="https://www.scichart.com/questions/categories/js" target=_blank&gt;www.scichart.com/questions-js&lt;/A&gt; 
&lt;LI&gt;API Documentation at &lt;A href="https://www.scichart.com/javascript-chart-documentation"&gt;www.scichart.com/javascript-chart-documentation&lt;/A&gt; 
&lt;LI&gt;Support tickets (licensed customers only) at &lt;A href="https://support.scichart.com" target=_blank&gt;https://support.scichart.com&lt;/A&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;The SciChart.js Online Demo at &lt;A href="https://demo.scichart.com"&gt;https://demo.scichart.com&lt;/A&gt; 
&lt;LI&gt;Source code for the SciChart.JS.Examples at &lt;A href="https://github.com/abtsoftware/scichart.js.examples"&gt;https://github.com/abtsoftware/scichart.js.examples&lt;/A&gt; 
&lt;LI&gt;Tutorials at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials"&gt;https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials&lt;/A&gt; &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="09079101-6ba2-4cdb-9fe3-0fb603ff0486" Status="New Topic" CreatedOn="2016-06-20T21:10:43.7177795Z" ModifiedOn="2024-03-13T11:03:29.7161343Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Licensing SciChart.js" BuildFlags="">
            <Title />
            <ContentsTitle m="2020-10-12T10:15:57.1777442Z">Licensing SciChart.js</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2024-03-13T11:03:29.7161343Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H1&gt;SciChart.js Licensing&lt;/H1&gt;
&lt;H2&gt;Community&amp;nbsp;License&lt;/H2&gt;
&lt;P&gt;Starting from version 3.2 SciChart.js starts with a FREE,&amp;nbsp;fully featured,&amp;nbsp;community license.&amp;nbsp;&amp;nbsp;No need to sign up, start a trial, or enter a license key. This is for non-commercial use, and limited time commercial evaluation. For all the details on community licensing, including who can use it, features and restrictions, check out the&amp;nbsp;&lt;A href="https://www.scichart.com/community-licensing/" target=_blank&gt;community licensing&lt;/A&gt; page.&amp;nbsp; The main thing to be aware of is that any version of SciChart.js is only valid for community use for 6 months from the date of it's release, so you need to update your application regularly.&lt;/P&gt;
&lt;P&gt;To use SciChart.js in commercial applications without a watermark, and without the need to regularly update it, purchase a full license from&amp;nbsp;&lt;A href="https://store.scichart.com" target=_blank&gt;store.scichart.com&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Once you purchased licenses, the license is perpetual with optional renewal to keep up to date (get support and get later builds).&lt;/P&gt;
&lt;H2&gt;Activating a Purchased License&lt;/H2&gt;
&lt;P&gt;If you have purchased licenses to SciChart, full instructions to license can be found on the web at&amp;nbsp;&lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;If your license has been applied correctly, you should be able to run your application on devices and without seeing the "SciChart" watermark.&lt;/P&gt;
&lt;H2&gt;Troubleshooting Licensing&lt;/H2&gt;
&lt;P&gt;Please see the troubleshooting section at&amp;nbsp;&lt;A href="http://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&amp;nbsp; If you contact support with a licensing issue, we will ask you to enable license debug mode.&amp;nbsp; This is done by setting a local storage key called LICENSE_DEBUG with value 1.&amp;nbsp; Reload the page and the console will output detailed licensing information.&amp;nbsp; Please copy this log from the very beginning - it starts with the scichart version number.&lt;/P&gt;
&lt;P&gt;If you have trouble with licensing or activation, please contact&amp;nbsp;&lt;A href="https://support.scichart.com/index.php?/Tickets/Submit" target=_blank&gt;SciChart.js Support&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="9583097e-c7b0-4c58-a766-e8e2eb144cdf" AutoIndex="false">
        <Caption m="2019-02-11T15:57:38.5250057Z">Quick Start Guide</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="06d80915-b1f5-40f3-87e4-e7a43e9f77b3" AutoIndex="false">
            <Caption m="2022-01-09T10:25:03.7513485Z">JS Webpack npm Tutorials</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="2247b20c-4be1-42cb-ad24-125310703f67" Status="New Topic" CreatedOn="2017-03-09T09:48:40.4008937Z" ModifiedOn="2023-02-02T16:00:48.4268272Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 01 - Setting up a Project with SciChart.js" BuildFlags="">
                <Title m="2022-01-09T10:24:17.1136681Z">Tutorial 01 - Setting up a npm Project with SciChart.js</Title>
                <ContentsTitle m="2023-02-02T16:00:48.4268272Z">Tutorial 01 - Setting up a npm Project with SciChart.js</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-18T12:33:00.4276571Z">&lt;H2&gt;Creating a New SciChart.js Project&lt;/H2&gt;
&lt;P&gt;In this tutorial we will create a simple line chart with SciChart.js. We'll show you how to&amp;nbsp;create a new JavaScript project in&amp;nbsp;&lt;A href="https://code.visualstudio.com/" target=_blank&gt;VSCode&lt;/A&gt; and adding SciChart libraries as dependencies to it.&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;PFYpCrZwqwU&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Pre-requisites&lt;/H2&gt;
&lt;H3&gt;VSCode&lt;/H3&gt;
&lt;P&gt;If you haven't done so already go ahead and download VSCode from&amp;nbsp;&lt;A href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/A&gt;. We will be using this for tutorials, but you can equally use&amp;nbsp;&lt;A href="https://www.jetbrains.com/webstorm/" target=_blank&gt;WebStorm&lt;/A&gt;&amp;nbsp;or any other IDE or text editor of your choice.&lt;/P&gt;
&lt;H3&gt;NPM / Node.js&lt;/H3&gt;
&lt;P&gt;You will also need to have npm installed. You can get npm from here:&amp;nbsp;&lt;A href="https://www.npmjs.com/get-npm"&gt;https://www.npmjs.com/get-npm&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Creating the Project&lt;/H2&gt;
&lt;P&gt;Go ahead and open up VSCode and enter the terminal. Create a&amp;nbsp;directory to host your tutorial, and type in the following command.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm init&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Choose defaults, I have named it tutorial1 and I want to use &lt;STRONG&gt;index.js&lt;/STRONG&gt; for my package.json. SciChart.js supports both TypeScript and JavaScript ES6, however for the purposes of these tutorials we're going to be using plain JavaScript.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminit.PNG"&gt;&lt;/P&gt;
&lt;H2&gt;Installing SciChart via npm&lt;/H2&gt;
&lt;P&gt;SciChart.js is hosted on npm.org, so to install the package to your poject simply use the command npm install scichart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm install scichart&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminstallscichart.png"&gt;&lt;/P&gt;
&lt;H2&gt;Configuring Webpack&lt;/H2&gt;
&lt;P&gt;We're going to use webpack to make the smallest possible node.js JavaScript application for our tutorials. To install this, add the following commands.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm install --save-dev webpack&lt;BR&gt;&amp;gt; npm install --save-dev webpack-dev-server&lt;BR&gt;&amp;gt; npm install --save-dev webpack-cli&lt;BR&gt;&amp;gt; npm install --save-dev copy-webpack-plugin&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminstallwebpack.png"&gt;&lt;/P&gt;
&lt;H2&gt;Add Scripts to Package.json&lt;/H2&gt;
&lt;P&gt;Our package.json should look something&amp;nbsp;like this.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Package.json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;{&lt;BR&gt;&amp;nbsp; "name": "tutorial1",&lt;BR&gt;&amp;nbsp; "version": "1.0.0",&lt;BR&gt;&amp;nbsp; "description": "First Tutorial with SciChart.js",&lt;BR&gt;&amp;nbsp; "main": "index.js",&lt;BR&gt;&amp;nbsp; "scripts": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "build": "webpack",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "start": "webpack-dev-server"&lt;BR&gt;&amp;nbsp; },&lt;BR&gt;&amp;nbsp; "author": "",&lt;BR&gt;&amp;nbsp; "license": "MIT",&lt;BR&gt;&amp;nbsp; "dependencies": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart": "^2.0.0"&lt;BR&gt;&amp;nbsp; },&lt;BR&gt;&amp;nbsp; "devDependencies": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "copy-webpack-plugin": "^9.0.1",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack": "^5.58.2",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack-cli": "^4.9.0",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack-dev-server": "^4.3.1"&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Let's add a few more items to it so we can build the application.&lt;/P&gt;
&lt;H2&gt;Creating webpack.config.js&lt;/H2&gt;
&lt;P&gt;Add a file to your project called webpack.config.js, and paste in the following code.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;Note, the following highlighted&amp;nbsp;lines are required to copy SciChart's WebAssembly files to your build directory.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Package.json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const path = require("path");&lt;BR&gt;const CopyPlugin = require("copy-webpack-plugin");&lt;/P&gt;
&lt;P&gt;module.exports = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; mode: "production",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; entry: "./src/index.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; performance: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hints: false&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; module: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rules: []&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; resolve: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; extensions: [".js"]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; output: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; filename: "bundle.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; path: path.resolve(__dirname, "build")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; plugins: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new CopyPlugin({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; patterns: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "src/index.html", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;STRONG&gt;{ from: "node_modules/scichart/_wasm/scichart2d.data", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "node_modules/scichart/_wasm/scichart2d.wasm", to: "" }&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;};&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Your project with webpack.config.js should look like this. In particular, &lt;STRONG&gt;notice the two lines which copy scichart2d.data and scichart2d.wasm to the output folder&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-vscode-webpack2.png"&gt;&lt;/P&gt;
&lt;H2&gt;Creating Index.js / Index.html&lt;/H2&gt;
&lt;P&gt;We're going to create a simple Index.js / Index.html. Create and add these two files to the root of your project, and add this code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;src/index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 1&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we setup webpack, scichart and create a simple chart with one X and Y axis&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;SciChart.js simply needs a Div in your application to host the chart. We've added one above and given it the id=scichart-root.&lt;/P&gt;
&lt;P&gt;Next we're going to add index.js, where we initialize and create a&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;src/index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from https://www.scichart.com/licensing-scichart-js/&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at https://www.scichart.com/profile&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // That's it! You just created your first SciChartSurface!&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The SciChart.js API is pretty simple. In the code sample above we declare an instance of a SciChartSurface like this.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring a SciChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This function returns a&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt; instance and a wasmContext (WebAssembly Context). You will need this context for all chart parts related to this chart. &lt;STRONG&gt;Don't share the wasmContext between charts!&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Next, we add a single X,Y Axis. We do this by creating a new&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt;, and adding it to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#xaxes"&gt;SciChartSurface.xAxes&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#yaxes"&gt;SciChartSurface.yAxes&lt;/A&gt; collections.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring a SciChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Don't forget you will need to add a license to use SciChart.js. You can do this once in code as follows. You can create a trial license by following instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js"&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;src/index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from https://www.scichart.com/licensing-scichart-js/&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;/P&gt;
&lt;P&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;That's it! You have just created your first SciChartSurface using SciChart.js!&lt;/P&gt;
&lt;H2&gt;Building and Running the App&lt;/H2&gt;
&lt;P&gt;Ok now that we've set that all up, building and running should be pretty easy!&lt;/P&gt;
&lt;P&gt;In the command line, simply type the following command.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Running the Tutorial&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;gt; npm start&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now visit &lt;A href="http://localhost:8080"&gt;http://localhost:8080&lt;/A&gt; in your browser and voila! You should see a SciChart.js Chart!&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-scichart-js.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e67785c9-5957-4a63-b1fa-41865d529aed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="30f7b8a6-e55b-49bb-909f-998d6d24112e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="30f7b8a6-e55b-49bb-909f-998d6d24112e" Status="New Topic" CreatedOn="2017-03-09T10:05:20.6789382Z" ModifiedOn="2022-03-10T17:21:15.5132121Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 02 - Adding Series and Data" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-03-10T17:21:15.5132121Z">&lt;P&gt;In the &lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;previous tutorial&lt;/A&gt; we explained how to setup a project with a simple chart using SciChart.js. In this tutorial, we are going to show you how to add some data&amp;nbsp;and a line series to the chart.&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;dQYnwPeacSA&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Series to the Chart&lt;/H2&gt;
&lt;P&gt;In SciChart, there are special classes called&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; that are responsible for drawing different chart types, such as lines (&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt;), columns (&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;FastColumnsRenderableSeries&lt;/A&gt;), candlestick series (&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt;), filled area (&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeries&lt;/A&gt;), heat maps (&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;FastUniformHeatmapRenderableSeries&lt;/A&gt;) etc...&lt;/P&gt;
&lt;H3&gt;Adding a Line Plot to the Chart&lt;/H3&gt;
&lt;P&gt;In this tutorial, we are going to add&amp;nbsp;some Line series onto the chart.&lt;/P&gt;
&lt;P&gt;First, we will add a&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt; and add this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection.&lt;/P&gt;
&lt;P&gt;Next,&amp;nbsp;we create an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt; &lt;STRONG&gt;-&lt;/STRONG&gt; which&amp;nbsp;is&amp;nbsp;the type which stores the data, and can accept dynamic updates (real-time updates) and manipulation of data. We will assign the dataseries to the FastLineRenderableSeries.&lt;/P&gt;
&lt;P&gt;Try the code below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Simple Line Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare a DataSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyDataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(1, 2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(3,4);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a line series to the SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.strokeThickness = 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.stroke = "rgba(255,0,0,1)";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.dataSeries = xyDataSeries;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // zoom to fit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.zoomExtents();&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Ensure you also have the index.html set, which must contain a div with id="scichart-root" (or whatever you pass to SciChartSurface.create)&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 2&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 100%; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You should get this result:&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="Simple JavaScript Line Chart with SciChart.js" src="images/Tutorial-02-Simple-Line-Chart.png"&gt;&lt;/P&gt;
&lt;P&gt;We've added a line series to the chart, styled it red, and added two data-points. Hardly ground-breaking, but it's a start!&lt;/P&gt;
&lt;P&gt;Let's take this up a notch in the second part of the tutorial, by adding 100 series, each with 10,000 data-points.&lt;/P&gt;
&lt;H2&gt;Adding 100 Series, with 10,000 Datapoints to the Chart&lt;/H2&gt;
&lt;P&gt;We can take this a little bit further, by adding 100 series each with 10,000 datapoints to the Chart, for a total of&amp;nbsp;one million data-points. SciChart's specialty is High Performance, Realtime Charts, and that means you can add large amounts of data to our JavaScript chart component with ease.&lt;/P&gt;
&lt;P&gt;Modify the code in index.js to the following:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;100 Series x 10k points example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create 100 dataseries, each with 10k points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let seriesCount = 0; seriesCount &amp;lt; 100; seriesCount++) {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyDataSeries = new XyDataSeries(wasmContext);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const opacity = (1 - ((seriesCount / 120))).toFixed(2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Populate with some data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 10000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(i, Math.sin(i* 0.01) * Math.exp(i*(0.00001*(seriesCount+1))));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add and create a line series with this data to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a line series&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: xyDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: `rgba(176,196,222,${opacity})`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness:2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code adds 100 series in a loop, each with 10,000 data-points using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;XyDataSeries.append&lt;/A&gt; method. The mathematical function in there is just to create a nice looking waveform.&lt;/P&gt;
&lt;P&gt;We create a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt; for each trip around the outer loop and this time use the constructor parameters to set the dataSeries, stroke and strokeThickness properties.&lt;/P&gt;
&lt;P&gt;This is the result below:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="JavaScript Chart with Big Data (1 million points) with SciChart.js" src="images/Tutorial-02-1-Million-Points.png"&gt;&lt;/P&gt;
&lt;P&gt;There you go! One million data-points in a JavaScript Chart using SciChart.js!&lt;/P&gt;
&lt;P&gt;Join us for Tutorial 3 where we will be adding zooming and panning behaviour to the chart.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ceadbd96-aa28-44b9-a3f7-2d8fbcb63399" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2c5fca53-4e1c-426d-826b-966b97ed42b0" Status="New Topic" CreatedOn="2017-03-09T10:22:13.9038861Z" ModifiedOn="2021-11-15T12:29:48.3982836Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 03 - Adding Zooming, Panning Behavior" BuildFlags="">
                <Title m="2020-08-24T18:53:53.0915188Z">Tutorial 03 - Adding Zooming, Panning Behavior</Title>
                <ContentsTitle m="2021-09-02T07:17:57.5585045Z">Tutorial 03 - Adding Zooming, Panning Behavior</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-11-15T12:29:48.3982836Z">&lt;P&gt;In the &lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;previous tutorial&lt;/A&gt; we explained how to add a line series with some data to a JavaScript Chart using SciChart.js. In this tutorial, we are going to show you how to add zooming and panning behaviour to the chart.&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;p9wRUCatMTM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The source code for this tutorial can be found at &amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Zooming and Panning&lt;/H2&gt;
&lt;P&gt;So far in the tutorial series, we have created a new chart, added an XAxis and YAxis, added some data series, and simple zoom modifiers. Now are going to extend that and add more interaction behavior with other&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifiers&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;ChartModifiers&lt;/H3&gt;
&lt;P&gt;In SciChart, chart interactions are defined by&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifiers&lt;/A&gt;. In addition to the SciChart modifiers you can write custom modifiers or extends existing ones.&lt;/P&gt;
&lt;P&gt;The provided modifiers include&amp;nbsp;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833"&gt;RubberBandXyZoomModifier&lt;/A&gt;&lt;SPAN href="RubberBandXyZoomModifier.html"&gt;,&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;&lt;SPAN href="ZoomPanModifier.html"&gt;&lt;STRONG&gt;,&lt;/STRONG&gt;&amp;nbsp;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;&lt;SPAN href="ZoomExtentsModifier.html"&gt;&lt;SPAN href="CursorModifier.html"&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier&lt;/A&gt; and more.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;Adding Chart Modifiers&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;Now we are going to create and configure a couple of new modifiers and add them to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;SciChartSurface.chartModifiers&lt;/A&gt; collection:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {RubberBandXyZoomModifier} from "scichart/Charting/ChartModifiers/RubberBandXyZoomModifier";&lt;BR&gt;import {MouseWheelZoomModifier} from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import {ZoomExtentsModifier} from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;&lt;BR&gt;// ...&lt;BR&gt;async function initSciChart() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const mouseWheelZoomModifier = new MouseWheelZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rubberBandZoomModifier = new RubberBandXyZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomExtentsModifier = new ZoomExtentsModifier();&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(zoomExtentsModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(rubberBandZoomModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(mouseWheelZoomModifier);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 3&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we add simple zoom and pan behaviour. Select the options below to enable different behaviours&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="height: 600px; width: 100%;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;&lt;SPAN&gt;&lt;SPAN class=Apple-converted-space&gt;After re-building and running the application the chart should&amp;nbsp;behave like this:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="JavaScript Chart dynamic Zooming and Panning by SciChart.js" src="images/tutorial-03-zoom-pan.gif"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;EM&gt;Above:&amp;nbsp;1 Million Datapoints in 100 Series x 10k points per series, zooming and panning smoothly in our fast JavaScript Chart component!&lt;/EM&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Enabling and Disabling ChartModifiers&lt;/H2&gt;
&lt;P&gt;Some ChartModifiers conflict, as they need the same mouse-button to execute. If you wanted to add&amp;nbsp;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833"&gt;RubberBandXyZoomModifier&lt;/A&gt; to a chart, but also wanted to pan on mouse-drag, you can use the&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;, but you will need to enable/disable it so that only one of these is active at one time.&lt;/P&gt;
&lt;P&gt;Let's extend the application to add panning behaviour, and also allow switching active modifiers.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 3&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we add simple zoom and pan behaviour. Select the options below to enable different behaviours&amp;lt;/p&amp;gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div style="margin: 10px;"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type="checkbox" id="enable-pan" checked&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;label for="enable-pan"&amp;gt;Enable Mouse-Drag to Pan&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type="checkbox" id="enable-zoom"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;label for="enable-zoom"&amp;gt;Enable Mouse-Drag to Zoom&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type="checkbox" id="enable-zoom-to-fit" checked&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;label for="enable-zoom-to-fit"&amp;gt;Enable Double-Click to Zoom to Fit&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type="checkbox" id="enable-mouse-wheel-zoom" checked&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;label for="enable-mouse-wheel-zoom"&amp;gt;Enable Mousewheel Zoom&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="height: 600px; width: 100%;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Modify the HTML of the page to add some checkboxes. These will be used to enable and disable chart modifiers in index.js.&lt;/P&gt;
&lt;P&gt;Next, add the following code to index.js. We could use React or Angular to handle these events, but for now lets just use Vanilla Javascript so we can show how easy it is to enable/disable ChartModifiers in SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {MouseWheelZoomModifier} from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import {RubberBandXyZoomModifier} from "scichart/Charting/ChartModifiers/RubberBandXyZoomModifier";&lt;BR&gt;import {ZoomPanModifier} from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import {ZoomExtentsModifier} from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create 100 dataseries, each with 10k points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let seriesCount = 0; seriesCount &amp;lt; 100; seriesCount++) {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyDataSeries = new XyDataSeries(wasmContext);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const opacity = (1 - ((seriesCount / 120))).toFixed(2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Populate with some data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 10000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(i, Math.sin(i* 0.01) * Math.exp(i*(0.00001*(seriesCount+1))));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add and create a line series with this data to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a line series&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: xyDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: `rgba(176,196,222,${opacity})`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness:2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add zoom, pan behaviours to the chart. Mousewheel zoom, panning and double-click to&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // zoom to fit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseWheelZoomModifier = new MouseWheelZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomPanModifier = new ZoomPanModifier();&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rubberBandZoomModifier = new RubberBandXyZoomModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomExtentsModifier = new ZoomExtentsModifier();&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(zoomExtentsModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(zoomPanModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(rubberBandZoomModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(mouseWheelZoomModifier);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const inputEnablePan = document.getElementById("enable-pan");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const inputEnableZoom = document.getElementById("enable-zoom");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const inputEnableZoomToFit = document.getElementById("enable-zoom-to-fit");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const inputEnableMouseWheel = document.getElementById("enable-mouse-wheel-zoom");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnablePan.addEventListener("input", (event) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zoomPanModifier.isEnabled = inputEnablePan.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandZoomModifier.isEnabled = !inputEnablePan.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnableZoom.checked = !inputEnablePan.checked;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Enabling Drag to Pan. Status: rubberBand checkbox ${inputEnableZoom.checked}, rubberBand ${rubberBandZoomModifier.isEnabled}, zoomPan checkbox ${inputEnablePan.isEnabled}, zoomPan ${zoomPanModifier.isEnabled} `);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnableZoom.addEventListener("input", (event) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandZoomModifier.isEnabled = inputEnableZoom.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zoomPanModifier.isEnabled = !inputEnableZoom.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnablePan.checked = !inputEnableZoom.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Enabling Drag to Zoom. Status: rubberBand checkbox ${inputEnableZoom.checked}, rubberBand ${rubberBandZoomModifier.isEnabled}, zoomPan checkbox ${inputEnablePan.isEnabled}, zoomPan ${zoomPanModifier.isEnabled} `);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnableZoomToFit.addEventListener("input", (event) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zoomExtentsModifier.isEnabled = inputEnableZoomToFit.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Enabling zoom extents");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; inputEnableMouseWheel.addEventListener("input", (event) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mouseWheelZoomModifier.isEnabled = inputEnableMouseWheel.checked;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Enabling Mousewheel zoom");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Enabling or disabling a ChartModifier is as easy as setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#isenabled"&gt;ChartModifierBase.isEnabled&lt;/A&gt; property. You could have a keyboard shortcut to switch from pan to zoom behaviour for example, or a toolbar button to create the desired behaviour.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="JavaScript Chart dynamic Zooming and Panning by SciChart.js" src="images/tutorial-03-zoom-pan-2.gif"&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;Above:&amp;nbsp; Switching on and off different zoom, pan behaviours in SciChart.js&lt;/EM&gt;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="86dd9073-5257-4f09-b47a-9e1e7ee6cec8" Status="New Topic" CreatedOn="2017-03-09T10:25:00.8431691Z" ModifiedOn="2021-10-13T12:28:11.7519808Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 04 - Adding Realtime Updates" BuildFlags="">
                <Title />
                <ContentsTitle m="2020-10-15T16:36:09.3367131Z">Tutorial 04 - Adding Realtime Updates</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-13T12:28:11.7519808Z">&lt;P&gt;In the &lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0"&gt;previous tutorial&lt;/A&gt; we explained how to add zooming and panning behavior to a JavaScript Chart using SciChart.js. In this tutorial, we are going to show you how to add realtime updates.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Realtime updates is where SciChart excels. Our software is designed to be ultra high-performance and really shines in circumstances where you want to manipulate data in real-time. There are a lot of options for dynamically updating data and getting rich, reactive charts. If you're interested to find out how, read on!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The source code for this tutorial can be found at&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&amp;nbsp;&amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;3TzRbpmx7T0&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Creating the Base Application&lt;/H2&gt;
&lt;P&gt;SciChart has the concept of&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt;. RenderableSeries present the data, while DataSeries hold the X,Y data and manage updates.&lt;/P&gt;
&lt;P&gt;Let's start the tutorial with some basic code like this to declare a SciChartSurface with an X,Y axis, and a two series:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Static chart code&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {XyScatterRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a Scatter series, and Line series and add to chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, { &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, { width: 7, height: 7, fill: "White", stroke: "SteelBlue" }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, { stroke: "#4083B7", strokeThickness: 2 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries, scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and populate some XyDataSeries with static data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Note: you can pass xValues, yValues arrays to constructors, and you can use appendRange for bigger datasets&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterData = new XyDataSeries(wasmContext, { dataSeriesName: "Cos(x)" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineData = new XyDataSeries(wasmContext, { dataSeriesName: "Sin(x)" });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign these dataseries to the line/scatter renderableseries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.dataSeries = scatterData;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.dataSeries = lineData;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 5 - Zooming, Panning with Realtime Updates&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we explore charts with real-time updates in SciChart.js&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code above creates a&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter series&lt;/A&gt;, a &lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line series&lt;/A&gt;, appends some static data. You should now be looking at this if you npm start and run the application:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Tutorial-04-realtimeupdates-static-data.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;You can learn more about the&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series, which requires a pointmarker here&lt;/A&gt;. Also the&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Series page&lt;/A&gt; has further information for this chart type.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2 align=left&gt;Part 1 - Updating Data Values&lt;/H2&gt;
&lt;P align=left&gt;Now let's update some data-values in JavaScript&amp;nbsp;to see real-time changes to the chart.&lt;/P&gt;
&lt;P align=left&gt;We will use setTimeout to create a timer and call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#update"&gt;xyDataSeries.update()&lt;/A&gt; to change the data. SciChart automatically redraws when the data is changed.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Static chart code&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Add the following code right before the end of initSciChart() function&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let phase = 0.0;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // update the datapoints in the dataseries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Note updateRange() passing in array is higher performance for larger datasets&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.update(i, Math.sin(i * 0.1 + phase));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.update(i, Math.cos(i * 0.1 + phase));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; phase += 0.01;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Repeat at 60Hz&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1/60);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;Breaking this down, we're using the&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries API&lt;/A&gt; to manipulate the data. Specifically,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#update" target=_blank&gt;dataSeries.update()&lt;/A&gt;, which updates a Y-value at a specific index. There are also functions to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;append&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendrange"&gt;appendRange&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insert"&gt;insert&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertrange"&gt;insertRange&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeat"&gt;remove&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removerange"&gt;removeRange&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#clear"&gt;clear&lt;/A&gt;, which will remove all data. Any changes to the DataSeries immediately reflect in the chart as SciChart is a fully reactive, dynamic JavaScript chart component.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;You can learn more about the&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;dynamic DataSeries API in SciChart here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;Now run the application, you should see this!&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_5yftwdmrb777 style="MAX-WIDTH: 100%" muted="" controls="" loop="" autoplay="" src="videos/Tutorial-04-SciChart-js-realtime-javascript-chart.mp4"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto"&gt;&lt;/DIV&gt;
&lt;H2 align=left&gt;Part 2 - Appending Data Values&lt;/H2&gt;
&lt;P align=left&gt;As well as using dataSeries.update(), you can also use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;dataSeries.append()&lt;/A&gt; to add new data-values to the end of a DataSeries. Make some changes in your updateDataFunc() as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Static chart code&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Replace the updateDataFunc right before the end of initSciChart() function&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Append another data-point to the chart. We use dataSeries.count()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // to determine the current length before appending&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const i = lineData.count();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ZoomExtents after appending data.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also see XAxis.AutoRange, and XAxis.VisibleRange for more options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.zoomExtents();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Repeat at 60Hz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1/60);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Warning, this will repeat forever, it's not best practice!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;Now run the application again. You sould see the series growing larger as new data is appended.&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_5yftwdmrb777 style="MAX-WIDTH: 100%" muted="" controls="" loop="" src="videos/Tutorial-04-SciChart-js-realtime-javascript-chart-appending.mp4"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;By default, when you append data, SciChart does not resize the viewport to fit the new data. In the code sample above we have called&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomextents"&gt;sciChartSurface.zoomExtents()&lt;/A&gt; to fit the data.&lt;/P&gt;
&lt;P&gt;Other options to manipulate the viewport&amp;nbsp;can be seen at the pages&amp;nbsp;&lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;Axis Ranging - AutoRange&lt;/A&gt; and&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Axis Ranging - Setting and Getting VisibleRange&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2 align=left&gt;Part 3 - Scrolling Realtime Charts&lt;/H2&gt;
&lt;P align=left&gt;What if you wanted to scroll as new data was appended? You have a few choices.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you simply want to scroll the viewport, you can manipulate&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;XAxis.visibleRange&lt;/A&gt; (see&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Getting and Setting VisibleRange&lt;/A&gt;)&amp;nbsp;as you append new data. 
&lt;LI&gt;If you want to be memory efficient and discard old data, you can use dataSeries.removeAt, or dataSeries.removeRange to remove old values as well. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;We're going to show you how to scroll data in a JavaScript chart below.&lt;/P&gt;
&lt;H3&gt;Scrolling the Chart via XAxis.visibleRange&lt;/H3&gt;
&lt;P&gt;To scroll in SciChart.js, all we have to do is manipulate the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;XAxis.visibleRange&lt;/A&gt;. This accepts a type:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numberrange.html"&gt;NumberRange&lt;/A&gt;, which defines a minimum and maximum value to display on the chart.&lt;/P&gt;
&lt;P&gt;Modify the updateData() function as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Replace the updateDataFunc right before the end of initSciChart() function&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Append another data-point to the chart. We use dataSeries.count()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // to determine the current length before appending&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const i = lineData.count();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ZoomExtents after appending data.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also see XAxis.AutoRange, and XAxis.VisibleRange for more options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(i-1000, i);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Repeat at 60Hz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1/60);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Warning, this will repeat forever, it's not best practice!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following.&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_5yftwdmrb777 style="MAX-WIDTH: 100%" muted="" controls="" loop="" src="videos/Tutorial-04-SciChart-js-realtime-javascript-chart-scrolling.mp4"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The above example is simple, but it never removes points from the XyDataSeries, so memory will grow forever. Consider if you are streaming lots of data-points calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeat"&gt;XyDataSeries.removeAt&lt;/A&gt;, or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removerange"&gt;removeRange&lt;/A&gt; to discard old data.&lt;/P&gt;
&lt;P&gt;Also, once you are done with a DataSeries, call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#delete"&gt;DataSeries.delete()&lt;/A&gt; to remove WebAssembly memory.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e73f0e4f-c463-4f59-9131-1c485479c575" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="69d624c9-d928-4331-957b-7d1b9e070b3e" Status="New Topic" CreatedOn="2020-10-16T17:12:05.567453Z" ModifiedOn="2021-08-26T15:03:52.3607372Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 05 - Zoom and Pan with Realtime Updates" BuildFlags="">
                <Title m="2020-10-16T17:12:24.7851314Z">Tutorial 05 - Zoom and Pan with Realtime Updates</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-08-26T15:03:52.3607372Z">&lt;P&gt;In&amp;nbsp;&lt;A href="86dd9073-5257-4f09-b47a-9e1e7ee6cec8"&gt;Tutorial 04 - Adding Realtime Updates&lt;/A&gt;, we showed you how to dynamically update DataSeries to enable Real-time updates in SciChart.js. In this tutorial, were going to show you how to allow zooming and panning while scrolling data.&lt;/P&gt;
&lt;P&gt;If you haven't read it already, also check out&amp;nbsp;&lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0"&gt;Tutorial 03 - Adding Zooming Panning Behavior&lt;/A&gt; as we will assume you have the knowledge to add zoom and pan behaviors to a SciChart.js JavaScript chart.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The source code for this tutorial can be found at&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_5_Zoom_and_Pan_With_Realtime_Updates" target=_blank&gt;SciChart.JS.Examples Github Repository&lt;/A&gt;&amp;nbsp;&amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;SYBog05NamM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2 style='BOX-SIZING: border-box; FONT-SIZE: 2.25em; MARGIN-BOTTOM: 10px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 20px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.25; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;Creating the Base Application&lt;/H2&gt;
&lt;P&gt;We're going to start off with the code we created in the previous&amp;nbsp;&lt;A href="86dd9073-5257-4f09-b47a-9e1e7ee6cec8"&gt;Tutorial 04 - Adding Realtime Updates&lt;/A&gt;. If you haven't already started that tutorial, please run through it first so you can understand the concepts.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Start with this code to begin with&lt;/STRONG&gt;. This will create a real-time chart with scrolling data, &lt;STRONG&gt;but no zooming or panning yet.&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Before Code&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {XyScatterRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a Scatter series, and Line series and add to chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, { width: 7, height: 7, fill: "White", stroke: "SteelBlue" }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, { stroke: "#4083B7", strokeThickness: 2 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries, scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create and populate some XyDataSeries with static data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Note: you can pass xValues, yValues arrays to constructors, and you can use appendRange for bigger datasets&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterData = new XyDataSeries(wasmContext, { dataSeriesName: "Cos(x)" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineData = new XyDataSeries(wasmContext, { dataSeriesName: "Sin(x)" });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i*0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assign these dataseries to the line/scatter renderableseries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.dataSeries = scatterData;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.dataSeries = lineData;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChart will now redraw with static data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Part 2: Appending data in realtime&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Append another data-point to the chart. We use dataSeries.count()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // to determine the current length before appending&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const i = lineData.count();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ZoomExtents after appending data.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also see XAxis.AutoRange, and XAxis.VisibleRange for more options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(i-1000, i);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Repeat at 60Hz&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1/60);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Warning, this will repeat forever, it's not best practice!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Before Code&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial&amp;nbsp;5 - Zooming and Panning Realtime Updates&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we explore how to zoom and pan a real-time chart with SciChart.js&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Zooming and Panning Behavior&lt;/H2&gt;
&lt;P&gt;From&amp;nbsp;&lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0"&gt;Tutorial 03 - Adding Zooming, Panning Behavior&lt;/A&gt;, we learned that we can add ChartModifiers to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers" target=_blank&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to add specific zoom, or pan behaviors to the chart.&lt;/P&gt;
&lt;P&gt;However, the code we added to scroll the chart on update is going to conflict with the user mouse-zooming behaviors. Take a look below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Zooming and Panning Step 1&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import {RubberBandXyZoomModifier} from "scichart/Charting/ChartModifiers/RubberBandXyZoomModifier";&lt;BR&gt;import {ZoomExtentsModifier} from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import {EZoomState} from "scichart/types/ZoomState";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;// Add this code to enable zooming by mouse-drag&amp;nbsp;and double-click to zoom extents&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomExtentsModifier({isAnimated: false}));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new RubberBandXyZoomModifier());&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const i = lineData.count();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;However, user-zoom will conflict with this code which scrolls the chart on update&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(i-1000, i);&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1/60);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If we want to enable user-zoom, and also scroll the chart, we need to selectively implement that scroll. To do so we can use the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomstate" target=_blank&gt;sciChartSurface.zoomState&lt;/A&gt; property.&lt;/P&gt;
&lt;H2&gt;The sciChartSurface.zoomState Property&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomstate" target=_blank&gt;sciChartSurface.zoomState&lt;/A&gt; property allows us to detect if the chart has been zoomed or panned by the user, or if the chart is at extents of the data. You can take a look at the values of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/ezoomstate.html" target=_blank&gt;EZoomState Enum here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;If we modified our code, we can selectively use this property to detect if the user is zooming and halt any automatic scrolling. For example, try modifying the updateDataFunc as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Using ZoomState&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import {RubberBandXyZoomModifier} from "scichart/Charting/ChartModifiers/RubberBandXyZoomModifier";&lt;BR&gt;import {ZoomExtentsModifier} from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import {EZoomState} from "scichart/types/ZoomState";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;STRONG&gt;// Add this code to enable zooming by mouse-drag&amp;nbsp;and double-click to zoom extents&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomExtentsModifier({isAnimated: false}));&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new RubberBandXyZoomModifier());&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const i = lineData.count();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineData.append(i, Math.sin(i * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterData.append(i, Math.cos(i * 0.1));&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Using zoomState, we only scroll if the state is not userZooming&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (sciChartSurface.zoomState !== EZoomState.UserZooming) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(i - 1000, i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Repeat at 60Hz&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateDataFunc, 1 / 60);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Warning, this will repeat forever, it's not best practice!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateDataFunc();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now run the application again, click left&amp;nbsp;mouse button and move it&amp;nbsp;to select an area. After releasing the button the chart will be zoomed in. To resume realtime updates perform double click.&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_5yftwdmrb777 style="MAX-WIDTH: 100%" muted="" controls="" loop="" autoplay="" src="videos/Tutorial-05-SciChart-js-zooming-realtime-javascript-chart.webm"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;H2&gt;Adding Panning Behavior to a Realtime Chart&lt;/H2&gt;
&lt;P&gt;In order to add&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;, update the code as follows.&amp;nbsp;Don't forget to include the same ZoomState logic as we had before.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import {ZoomPanModifier} from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import {ZoomExtentsModifier} from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import {EZoomState} from "scichart/types/ZoomState";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import { EExecuteOn } from "scichart/types/ExecuteOn";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add ZoomExtentsModifier and disable extends animation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomExtentsModifier({isAnimated: false}));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add ZoomPanModifier&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomPanModifier({ executeOn: EExecuteOn.MouseRightButton }));&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateDataFunc = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;Prevent changing visibleRange if user is zooming&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (sciChartSurface.zoomState !== EZoomState.UserZooming) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(i - 1000, i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now run the application again,&amp;nbsp;left click the chart&amp;nbsp;and move the mouse. As a result&amp;nbsp;the&amp;nbsp;chart will moving with the mouse. To pan the chart, use the right mouse button. To resume realtime updates perform double click. &lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_5yftwdmrb777 style="MAX-WIDTH: 100%" muted="" controls="" loop="" autoplay="" src="videos/Tutorial-05-SciChart-js-panning-realtime-javascript-chart.webm"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Further Examples - the Realtime Ticking Stock Chart demo&lt;/H2&gt;
&lt;P&gt;In the&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;SciChart.js Examples Suite - viewable at demo.scichart.com&lt;/A&gt;, we have an example of realtime updates with zooming &amp;amp; panning built into the chart. This is the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-realtime-ticking-stock-charts" target=_blank&gt;JavaScript Realtime Ticking Stock Charts example&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-05-JavaScript-Realtime-Ticking-Stock-Chart-Example.png"&gt;&lt;/P&gt;
&lt;P&gt;In this example we use techniques similar to the above to selectively advance the chart by one candle &lt;STRONG&gt;only if the latest data-point is inside the viewport&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;This allows you to create an intuitive user zooming, panning experience while advancing the chart or scrolling as new data comes in.&lt;/P&gt;
&lt;P&gt;You can view the demo online at &lt;A href="https://demo.scichart.com/javascript-realtime-ticking-stock-charts" target=_blank&gt;https://demo.scichart.com/javascript-realtime-ticking-stock-charts&lt;/A&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;And the Source-code for how we achieved it at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/blob/master/Examples/src/components/Examples/Charts2D/CreateStockCharts/RealtimeTickingStockCharts/index.tsx" target=_blank&gt;Github repository&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b295f570-3b57-4bf8-8467-71b41908c024" Status="New Topic" CreatedOn="2017-03-09T10:25:54.8976306Z" ModifiedOn="2021-10-13T12:50:18.1321486Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 06 - Adding Annotations" BuildFlags="">
                <Title />
                <ContentsTitle m="2020-11-16T09:22:43.3206651Z">Tutorial 06 - Adding Annotations</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-13T12:50:18.1321486Z">&lt;P&gt;In&amp;nbsp;&lt;A href="69d624c9-d928-4331-957b-7d1b9e070b3e"&gt;Tutorial 5 - Zoom and Pan with Realtime Updates&lt;/A&gt;, we showed you how to do&amp;nbsp;zooming and panning having realtime updates. In this tutorial, were going to show you how to add annotations.&lt;/P&gt;
&lt;P&gt;The annotation API allows you to add other UI&amp;nbsp;elements to a chart, like:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Lines&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Text&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Boxes&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;SVG elements&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_6_Adding_Annotations" target=_blank&gt;SciChart.JS.Examples Github Repository&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;kUsMslHD_YE&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Chart Annotations in SciChart&lt;/H2&gt;
&lt;P&gt;The SciChart annotations derive from the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotation.html"&gt;IAnnotation&lt;/A&gt; interface.&lt;/P&gt;
&lt;P&gt;This annotation types include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="583becc5-a46d-4fdf-9b69-f6b2f973deb8"&gt;BoxAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="963d03d5-c2f0-4143-9817-8b37186bfe69"&gt;LineAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="72e4491f-8140-49cb-8bd3-85b381967f87"&gt;TextAnnotation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="24a50b9d-0b8d-4124-b5e0-db75517608bc"&gt;CustomAnnotation&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Adding Annotations to the Chart&lt;/H2&gt;
&lt;P&gt;In this tutorial we will create a simple example showing how to add different annotation types to a chart. First we create a &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt;, then we add X and Y Axes and finally we add a &lt;STRONG&gt;LineAnnotation.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;The code is shown below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add line annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FF6600",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 6.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 9.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code produces this following chart with two axes and the LineAnnotation.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/tutorial-06-line-annotation.jpg"&gt;&lt;/P&gt;
&lt;P&gt;In order to add&amp;nbsp;other annotation types&amp;nbsp;to the chart pass&amp;nbsp;appropriate annotation to&amp;nbsp;&lt;STRONG&gt;sciChartSurface.annotations.add()&lt;/STRONG&gt;. In the code below we add &lt;STRONG&gt;BoxAnnotation&lt;/STRONG&gt;, &lt;STRONG&gt;TextAnnotation&lt;/STRONG&gt; and &lt;STRONG&gt;CustomAnnotation&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import { BoxAnnotation } from "scichart/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; EHorizontalAnchorPoint,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; EVerticalAnchorPoint,&lt;BR&gt;} from "scichart/types/AnchorPoint";&lt;BR&gt;import { ECoordinateMode } from "scichart/Charting/Visuals/Annotations/AnnotationBase"; 
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add line annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FF6600",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 6.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 9.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add box annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#33FF33",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(50, 255, 50, 0.3)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 6.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 9.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 6.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 9.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; )&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add text annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.25,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.75,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textColor: "yellow",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 26,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Comic Sans MS",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "TEXT ANNOTATION",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; )&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add custom SVG annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgString = `&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;svg baseProfile="full" width="200" height="200" xmlns="&lt;/STRONG&gt;&lt;A href="https://www.w3.org/2000/svg"&gt;&lt;STRONG&gt;https://www.w3.org/2000/svg&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt;"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;circle cx="100" cy="100" r="100" fill="rgba(50,50,255,0.3)" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text x="100" y="125" font-size="60" text-anchor="middle" fill="white"&amp;gt;SVG&amp;lt;/text&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 7.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/STRONG&gt;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in a&amp;nbsp;chart with four different annotation.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-06-four-annotations.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Further APIs&lt;/H2&gt;
&lt;P&gt;Annotations support the abilityt o be docked to the left/right/top/bottom of the chart viewport. You can adjust the docking using the xCoordinateMode / yCoordinateMode properties.&lt;/P&gt;
&lt;P&gt;Some annotations support verticalAnchorPoint / horizontalAnchorPoint properties. These allow you to change the control point for annotations which have a single X,Y point. A combination of anchor points and coordinate modes can allow you to create text watermarks on charts, or boxes which stretch horizontally or verically over a chart.&lt;/P&gt;
&lt;H2&gt;View our Annotations Demos online&lt;/H2&gt;
&lt;P&gt;You can find out&amp;nbsp;more about the Annotations API in the relevant section of the documentation:&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788" style="auto-update-caption: true"&gt;The Annotations API Overview&lt;/A&gt;. Also, there is a couple of examples&amp;nbsp;showcasing&amp;nbsp;annotations in our Examples Suite. See the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-annotations" target=_blank&gt;JavaScript Chart Annotations example&lt;/A&gt;&amp;nbsp;for more details.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_AreEasy.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="a1f6fc4c-aaf5-4f03-acb5-fe156bb51938" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="86dd9073-5257-4f09-b47a-9e1e7ee6cec8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="efbbdf58-a0b4-44b3-a39b-50a07acbf09b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="103afbcf-5d52-4774-96f0-0af4e7d4823d" Status="New Topic" CreatedOn="2017-03-09T10:22:57.2806666Z" ModifiedOn="2021-08-27T09:16:13.1906711Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 07 - Adding Tooltips and Legends" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-08-27T09:16:13.1906711Z">&lt;P&gt;In the &lt;A href="b295f570-3b57-4bf8-8467-71b41908c024"&gt;previous tutorial&lt;/A&gt; we explained how to add annotations to a JavaScript Chart using SciChart.js. In this tutorial, we are going to show you how to add tooltips and legends.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_7_Adding_Tooltips_and_Legends" target=_blank&gt;SciChart.JS.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;3YiQBRjzUx0&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Lets create a simple chart with 5 dataseries each having 10k points.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create 5 dataseries, each with 10k points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let seriesIndex = 0; seriesIndex &amp;lt; 5; seriesIndex++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyDataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.dataSeriesName = `Series ${seriesIndex}`&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const opacity = (1 - ((seriesIndex / 5))).toFixed(2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Populate with some data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 10000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(i, Math.sin(i* 0.01) * Math.exp(i*(0.00001*(seriesIndex*10+1))));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add and create a line series with this data to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a line series&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: xyDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: `rgba(176,196,222,${opacity})`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness:2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;So far we have created a new chart, added both X axis and Y axis and&amp;nbsp;plotted 5&amp;nbsp;data series.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-07-5-series.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Add a Legend&lt;/H2&gt;
&lt;P&gt;Now we will add a chart legend.&amp;nbsp;In SciChart, a chart legend can be created and configured via the&amp;nbsp;&lt;A href="84ac3103-a531-43bc-8546-f275d91be35b"&gt;LegendModifier&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import {LegendModifier} from "scichart/Charting/ChartModifiers/LegendModifier";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a Legend&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new LegendModifier({showCheckboxes: true}));&lt;BR&gt;}&lt;BR&gt;...&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the &lt;STRONG&gt;Legend&lt;/STRONG&gt;, which displays checkboxes to show/hide the series, series markers and series names.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-07-legend.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Add a Cursor (Crosshair)&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;CursorModifier&lt;/STRONG&gt; adds a crosshair onto a&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;. When you place the cursor over&amp;nbsp;the SciChartSurface, it shows X and Y values of the current point in tooltips over the Axes.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;...&lt;BR&gt;import {CursorModifier} from "scichart/Charting/ChartModifiers/CursorModifier";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add axis label tooltips using CursorModifier&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const cursorModifier = new CursorModifier();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cursorModifier.axisLabelsFill = "#FFFFFF";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; cursorModifier.axisLabelsStroke = "#00FF00";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(cursorModifier);&lt;BR&gt;}&lt;BR&gt;&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;It gives us the result:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-07-cursor-modifier.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Add a RolloverModifier Tooltip&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;Tooltips may be added to the&amp;nbsp;&lt;/SPAN&gt;&lt;A style='BOX-SIZING: border-box; FONT-SIZE: 16px; TEXT-DECORATION: none; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(118,181,27); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px' href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;using the&amp;nbsp;&lt;/SPAN&gt;&lt;A style='BOX-SIZING: border-box; FONT-SIZE: 16px; TEXT-DECORATION: none; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(118,181,27); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px' href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;. This is a&amp;nbsp;&lt;/SPAN&gt;&lt;A style='BOX-SIZING: border-box; FONT-SIZE: 16px; TEXT-DECORATION: none; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(118,181,27); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px' href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html"&gt;ChartModifierBase&lt;/A&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;derived type which is attached to the&amp;nbsp;&lt;/SPAN&gt;&lt;A style='BOX-SIZING: border-box; FONT-SIZE: 16px; TEXT-DECORATION: none; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(118,181,27); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px' href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;SciChartSurface.chartModifiers&lt;/A&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;property.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;Remove the previous CursorModifier from the chart. Now&amp;nbsp;add a &lt;STRONG&gt;RolloverModifier&lt;/STRONG&gt; by add this code:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;...&lt;BR&gt;import {RolloverModifier} from "scichart/Charting/ChartModifiers/RolloverModifier";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a tooltip behavior using the RolloverModifier&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tooltipModifier = new RolloverModifier(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(tooltipModifier);&lt;BR&gt;}&lt;BR&gt;&lt;BR&gt;initSciChart();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;That gives&amp;nbsp;us the chart with tooltips being displayed for each series:&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;IMG border=0 alt="" src="images/tutorial-07-tooltips.jpg"&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;To learn more about&amp;nbsp;cursors and legends&amp;nbsp;in SciChart please find&amp;nbsp;links to the corresponding documentation articles below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;Cursor Modifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Rollover Modifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="84ac3103-a531-43bc-8546-f275d91be35b" style="auto-update-caption: true"&gt;Legend Modifier&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" Status="New Topic" CreatedOn="2017-03-09T10:27:35.0141976Z" ModifiedOn="2023-12-22T13:15:41.8826655Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 08 - Adding Multiple Axis" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T13:15:41.8826655Z">&lt;P&gt;In&amp;nbsp;&lt;A href="103afbcf-5d52-4774-96f0-0af4e7d4823d"&gt;Tutorial 7 - Adding Tooltips and Legends&lt;/A&gt;, we showed you how to add tooltips and legends to a JavaScript&amp;nbsp;Chart using SciChart.js. Now we are going to learn how to add a second &lt;STRONG&gt;YAxis&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;SciChart supports unlimited axes. This unlocks different possibilities, such as &lt;STRONG&gt;rotated (vertical)&lt;/STRONG&gt; charts.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_8_Multiple_Axis" target=_blank&gt;SciChart.JS.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;XDqTYGgEDKo&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In this&amp;nbsp;tutorial, we are going to add a second &lt;STRONG&gt;YAxis&lt;/STRONG&gt; to the chart. We are going to show how to register line series and&amp;nbsp;annotations on the second axis. We are also going to show how to ensure Axis drag behavior works on both axis.&lt;/P&gt;
&lt;H2&gt;Adding a Second Y Axis&lt;/H2&gt;
&lt;P&gt;The procedure to add a second axis to a &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; is pretty much the same as with one axis with one difference. You must assign a &lt;STRONG&gt;unique string ID&lt;/STRONG&gt; to all axes if there is more than one.&lt;/P&gt;
&lt;P&gt;To see the axis to appear to the either side of a chart, you set &lt;STRONG&gt;axisAlignment&lt;/STRONG&gt; to&amp;nbsp;&lt;STRONG&gt;EAxisAlignment.Left&lt;/STRONG&gt;, &lt;STRONG&gt;EAxisAlignment.Right&lt;/STRONG&gt;, etc. &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eaxisalignment.html"&gt;EAxisAlignment&lt;/A&gt;&amp;nbsp;is an&amp;nbsp;enumeration.&lt;/P&gt;
&lt;P&gt;Let's start by placing two Y-Axis on the left and right of the chart, and two X-Axis on the top and bottom.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EAxisAlignment} from "scichart/types/AxisAlignment";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChartSurface.create("scichart-root");&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Primary XAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Bottom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis2 = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Secondary XAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: "XAxis_2",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Top,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Primary YAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis2 = new NumericAxis(wasmContext,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Secondary YAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: "YAxis_2",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis2);&lt;BR&gt;}&lt;BR&gt;&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see the primary and secondary X &amp;amp; Y axis in our application:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/tutorial-08-two-axes.jpg"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Registering RenderableSeries on an Axis&lt;/H2&gt;
&lt;P&gt;If there are several Y or X axes, you need to register other chart parts, like &lt;STRONG&gt;RenderableSeries&lt;/STRONG&gt; and &lt;STRONG&gt;Annotations&lt;/STRONG&gt;, on a particular axis to be measured against its scale.&lt;/P&gt;
&lt;P&gt;We do this by setting the RenderableSeries.xAxisId and yAxisId properties. These must match the Id set on the axis themselves. If you leave an xAxisId/yAxisId unset, it will default to DEFAULT_AXIS_ID.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create first series and bind to the first Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries1 = new FastLineRenderableSeries(wasmContext, { stroke: "#33F9FF", xAxisId: "XAxis_2" , yAxisId: "YAxis_2" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries1.dataSeries = new XyDataSeries(wasmContext, {xValues: [0, 1, 2, 3], yValues:[0, 60, 160, 300]});&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create second series and bind to the second Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries2 = new FastLineRenderableSeries(wasmContext, { stroke: "#33ff33"});&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries2.dataSeries = new XyDataSeries(wasmContext, {xValues: [0, 1, 2, 3, 4], yValues:[0, 101, 240, 500, 600]});&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the chart shown below:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/tutorial-08-two-axes-and-series.jpg"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Registering Annotations on an Axis&lt;/H2&gt;
&lt;P&gt;Annotations can also be added to a multi-axis chart, and registered with a specific axis pair. Add a TextAnnotation as follows.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;...&lt;BR&gt;import {TextAnnotation} from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Annotations on Axis!",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 200,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxisId: "XAxis_2",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxisId: "YAxis_2"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see a TextAnnotation in the&amp;nbsp;middle of the chart, bound to the Secondary X,Y axis at X,Y={1, 200}&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/tutorial-08-two-axes-with-annotation.jpg"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Adding Axis Drag Behaviour&lt;/H2&gt;
&lt;P&gt;If you want to visualize more clearly which series or annotation is bound to which axis pair, add some Axis Drag behaviours&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;import {YAxisDragModifier} from "scichart/Charting/ChartModifiers/YAxisDragModifier";&lt;BR&gt;import {XAxisDragModifier} from "scichart/Charting/ChartModifiers/XAxisDragModifier";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Add a drag modifier for Y Axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new YAxisDragModifier());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new XAxisDragModifier());&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now if we hover over&amp;nbsp;an Y Axis, click the mouse button and drag&amp;nbsp;the scaling occurs. Moreover we can notice that the scaling only affects the series and annotations attached to that axis.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Tutorial-08-axis-drag.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;Here is related documentation for further reading:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Axis APIs&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types in SciChart.js&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3d17ae15-e43d-4115-97b1-659f04c0c563" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b295f570-3b57-4bf8-8467-71b41908c024" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3300cbc0-4c17-4307-9322-70cc3e09c08b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5cdfe58-f742-4e91-8ee7-f39b850743d7" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5cdfe58-f742-4e91-8ee7-f39b850743d7" Status="New Topic" CreatedOn="2017-03-09T10:49:52.3633636Z" ModifiedOn="2021-10-13T12:52:44.0403253Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 09 - Linking Multiple Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-13T12:52:44.0403253Z">&lt;P&gt;In &lt;A href="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed"&gt;Tutorial 08 - Adding Multiple Axis&lt;/A&gt;, we showed you how to add a second &lt;STRONG&gt;YAxis&lt;/STRONG&gt;.&lt;BR&gt;Now we are going to show you how to create multiple charts and link them together.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_9_Linking_Multiple_Charts" target=_blank&gt;SciChart.JS.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding a First Chart&lt;/H2&gt;
&lt;P&gt;Let's create a first&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;with&amp;nbsp;X and Y&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt;,&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Series&lt;/A&gt;&amp;nbsp;and&amp;nbsp;data to display a sine wave. To make the chart interactive we add several chart modifiers, such as:&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;, &lt;A href="30ee889c-86dd-41d2-bc3f-ec0415855433"&gt;MouseWheelZoomModifier&lt;/A&gt;, &lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;, &lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { EAxisAlignment } from "scichart/types/AxisAlignment";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { ZoomExtentsModifier } from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import { RolloverModifier } from "scichart/Charting/ChartModifiers/RolloverModifier";&lt;BR&gt;import { EAutoRange } from "scichart/types/AutoRange";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createFirstChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-1"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { axisTitle: "X Axis" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Y Axis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; autoRange: EAutoRange.Always,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.2, 0.2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create data for line series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataForLineSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; 250; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataForLineSeries.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create line series and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataForLineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set&amp;nbsp;RolloverModifier properties&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipColor = "green";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipLabelX = "X";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipLabelY = "Y";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add several chart modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; createFirstChart();&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we can see&amp;nbsp;the&amp;nbsp;first chart.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/tutorial-09-one-chart.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Adding a Second Chart&lt;/H2&gt;
&lt;P&gt;Now we repeat the same procedure to configure the second chart with some differences. We need to use a&amp;nbsp;different div element ID and it should be present in index.html file.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where first SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root-1" style="width: 800px; height: 350px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where second SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root-2" style="width: 800px; height: 350px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Other things we&amp;nbsp;change:&amp;nbsp;align &lt;STRONG&gt;Y Axis&lt;/STRONG&gt; left, use&amp;nbsp;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;Mountain Series Type&lt;/A&gt; instead of &lt;STRONG&gt;Line Series,&lt;/STRONG&gt; populate data with &lt;STRONG&gt;cosine&lt;/STRONG&gt; function instead of &lt;STRONG&gt;sine&lt;/STRONG&gt;.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;...&lt;BR&gt;import { FastMountainRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastMountainRenderableSeries";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE SECOND CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createSecondChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-2"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Y Axis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; autoRange: EAutoRange.Always,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.2, 0.2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create data for mountain series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataForMountainSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; 250; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataForMountainSeries.append(x, Math.cos(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create mountain series, bind to primary axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mountainSeries = new FastMountainRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataForMountainSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainSeries.rolloverModifierProps.tooltipColor = "green";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(mountainSeries);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; createSecondChart();&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Our web application should now show two charts:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-09-two-charts.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Synchronizing VisibleRanges on Axes&lt;/H2&gt;
&lt;P&gt;To make both charts show the same &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; on X&amp;nbsp;axes, we subscribe to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerangechanged"&gt;AxisCore.visibleRangeChanged&lt;/A&gt; event and update &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; of the second chart if has been chaged for the first chart&amp;nbsp;and visa versa. In the begining of initSciChart() function we declare two variables and use them to store X Axis&amp;nbsp;object&amp;nbsp;for each &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt;. In the end of initSciChart() function we synchronize visible ranges.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let chart1XAxis, chart2XAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createFirstChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis = new NumericAxis(wasmContext, { axisTitle: "X Axis" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(chart1XAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE SECOND CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createSecondChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(chart2XAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;We need to await, to make sure that chart1XAxis and chart2XAxis are initialized&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;That is why we create&amp;nbsp;the first and the second charts here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const res = await Promise.all([createFirstChart(), createSecondChart()]);&amp;nbsp;&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Synchronize visible ranges&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis.visibleRangeChanged.subscribe((data1) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis.visibleRange = data1.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis.visibleRangeChanged.subscribe((data1) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis.visibleRange = data1.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now if we do&amp;nbsp;panning or zooming for one chart the other chart is being updated accordingly.&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_tutorial09_1 style="MAX-WIDTH: 100%" muted="" controls="" loop="" autoplay="" src="videos/Tutorial-09-SciChart-js-linking-charts.webm"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;H2&gt;Synchronizing Chart Widths&lt;/H2&gt;
&lt;P&gt;We've got two charts with synchronyzed X &lt;STRONG&gt;VisibleRanges&lt;/STRONG&gt;. However&amp;nbsp;it would be even&amp;nbsp;better if they had the same width and were placed exactly under each other.&lt;/P&gt;
&lt;P&gt;To achieve it&amp;nbsp;we create &lt;STRONG&gt;SciChartVerticalGroup&lt;/STRONG&gt; and add both surfaces to the group. Finally we perform&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomextents"&gt;SciChartSurface.zoomExtents()&lt;/A&gt; to redraw both charts.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import { SciChartVerticalGroup } from "scichart/Charting/LayoutManager/SciChartVerticalGroup";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const verticalGroup = new SciChartVerticalGroup();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const createFirstChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalGroup.addSurfaceToGroup(sciChartSurface);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE SECOND CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createSecondChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalGroup.addSurfaceToGroup(sciChartSurface);&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // PARALLEL CREATION OF CHARTS&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const res = await Promise.all([createFirstChart(), createSecondChart()]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Perform zoomExtends to redraw the charts&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; res.forEach((el) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; el.sciChartSurface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Results in this:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/tutorial-09-sync-width.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Linking Cursor and Other Modifiers&lt;/H2&gt;
&lt;P&gt;Next we are going to link chart modifiers.&lt;/P&gt;
&lt;P&gt;Both&amp;nbsp;charts have an array of &lt;STRONG&gt;ChartModifiers&lt;/STRONG&gt; set up to handle zooming, panning and tooltips.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new MouseWheelZoomModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new ZoomExtentsModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new RolloverModifier()&lt;BR&gt;);&lt;BR&gt;...&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If you run the applicaiton now, you will notice that you have zooming behaviour and tooltips on both charts, but the mouse events still aren't linked. To link them we need to make one small change to add &lt;STRONG&gt;modifierGroup&lt;/STRONG&gt; option:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createFirstChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier({modifierGroup: "group1"})&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createSecondChart= async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier({modifierGroup: "group1"})&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Run the application again. Now we can&amp;nbsp;see&amp;nbsp;that &lt;STRONG&gt;RolloverModifier&lt;/STRONG&gt; events are linked and&amp;nbsp;the &lt;STRONG&gt;Tooltips&lt;/STRONG&gt; are now synchronizing across the charts.&lt;BR&gt;&lt;/P&gt;
&lt;DIV style="MARGIN-LEFT: auto; MARGIN-RIGHT: auto" align=center&gt;&lt;VIDEO id=html5_video_tutorial09_2 style="MAX-WIDTH: 100%" muted="" controls="" loop="" autoplay="" src="videos/Tutorial-09-SciChart-js-linking-charts-modifiers.webm"&gt;&lt;/VIDEO&gt;&lt;/DIV&gt;
&lt;H2&gt;Final Source Code&lt;/H2&gt;
&lt;P&gt;That was a complex tutorial, so here is the final source code for the Linking Multiple Charts tutorial. Don't forget you need two div elements in the HTML with different IDs to load the two SciChartSurfaces!&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { EAxisAlignment } from "scichart/types/AxisAlignment";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { FastMountainRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastMountainRenderableSeries";&lt;BR&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { ZoomExtentsModifier } from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import { SciChartVerticalGroup } from "scichart/Charting/LayoutManager/SciChartVerticalGroup";&lt;BR&gt;import { RolloverModifier } from "scichart/Charting/ChartModifiers/RolloverModifier";&lt;BR&gt;import { EAutoRange } from "scichart/types/AutoRange"; 
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let chart1XAxis, chart2XAxis;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const verticalGroup = new SciChartVerticalGroup();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const modifierGroupId = "group1";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE FIRST CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createFirstChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can get a trial license key from &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Purchased license keys can be viewed at &lt;A href="https://www.scichart.com/profile"&gt;https://www.scichart.com/profile&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Also, once activated (trial or paid license) having the licensing wizard open on your machine&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // will mean any or all applications you run locally will be fully licensed.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the first chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-1"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { axisTitle: "X Axis" });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis = xAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Y Axis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; autoRange: EAutoRange.Always,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.2, 0.2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create data for line series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataForLineSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; 250; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataForLineSeries.append(x, Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create line series and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataForLineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipColor = "green";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipLabelX = "X";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeries.rolloverModifierProps.tooltipLabelY = "Y";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier({ modifierGroup: modifierGroupId })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalGroup.addSurfaceToGroup(sciChartSurface);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // CREATE SECOND CHART&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const createSecondChart = async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-2"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis = xAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Y Axis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; autoRange: EAutoRange.Always,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.2, 0.2),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create data for mountain series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataForMountainSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; 250; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataForMountainSeries.append(x, Math.cos(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create mountain series, bind to primary axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mountainSeries = new FastMountainRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataForMountainSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainSeries.rolloverModifierProps.tooltipColor = "green";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(mountainSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new RolloverModifier({ modifierGroup: modifierGroupId })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalGroup.addSurfaceToGroup(sciChartSurface);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface, wasmContext };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // PARALLEL CREATION OF CHARTS&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const res = await Promise.all([createFirstChart(), createSecondChart()]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; res.forEach((el) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; el.sciChartSurface.zoomExtents();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Synchronize visible ranges&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis.visibleRangeChanged.subscribe((data1) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis.visibleRange = data1.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart2XAxis.visibleRangeChanged.subscribe((data1) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; chart1XAxis.visibleRange = data1.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;Our SciChart.JS.Examples Suite contains a couple of examples that show chart synchronization techniques. For instance, take a look at the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-multi-pane-stock-charts" target=_blank&gt;JavaScript Multi-Pane Stock Charts Example&lt;/A&gt;. You can download the full&amp;nbsp;demo application from&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples" target=_blank&gt;https://github.com/ABTSoftware/SciChart.JS.Examples&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="018bde61-2d81-4309-a6ce-65df5dce8f97" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="aff2fef2-ec11-48dd-a310-82845d0388fa" Status="New Topic" CreatedOn="2020-11-26T05:58:41.1958526Z" ModifiedOn="2021-10-13T13:02:00.462628Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial 10 - Vertical Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-13T13:02:00.462628Z">&lt;P&gt;In the &lt;A href="e5cdfe58-f742-4e91-8ee7-f39b850743d7"&gt;previous tutorial&lt;/A&gt; we explained how to link multiple charts using SciChart.js. In this tutorial, we are going to show you how to add a &lt;STRONG&gt;Vertical Chart&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/2D_Chart_Tutorials_JavaScript/Tutorial_10_Vertical_Charts" target=_blank&gt;SciChart.JS.Examples&lt;/A&gt; Github Repository&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;&amp;nbsp;Adding a Chart&lt;/H2&gt;
&lt;P&gt;First let's create a simple&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Chart&lt;/A&gt;. In this example we generate a data set for sine wave and add &lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;with two&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt; to produce the&amp;nbsp;&lt;STRONG&gt;Line Chart&lt;/STRONG&gt;.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp; const { wasmContext, sciChartSurface } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-1"&lt;BR&gt;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp; // Generate a data set for sine wave&lt;BR&gt;&amp;nbsp; const xValues = [];&lt;BR&gt;&amp;nbsp; const yValues = [];&lt;BR&gt;&amp;nbsp; for (let i = 0; i &amp;lt;= 100; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const x = 0.1 * i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(x);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(Math.sin(x));&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;&lt;BR&gt;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; xAxis.axisTitleRenderer.text = "X Axis";&lt;BR&gt;&amp;nbsp; xAxis.growBy = new NumberRange(0.1, 0.1);&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; xAxis.flippedCoordinates = false;&lt;BR&gt;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; yAxis.axisTitleRenderer.text = "Y Axis";&lt;BR&gt;&amp;nbsp; yAxis.growBy = new NumberRange(0.1, 0.1);&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; yAxis.flippedCoordinates = true;&lt;BR&gt;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;BR&gt;&lt;BR&gt;&amp;nbsp; sciChartSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues, yValues }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "orange"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp; );&lt;BR&gt;&lt;BR&gt;&amp;nbsp; sciChartSurface.zoomExtents();&lt;BR&gt;}&lt;BR&gt;initSciChart();&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us this chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-10-vertical-charts-1.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;Making the Chart Vertical&lt;/H2&gt;
&lt;P&gt;In fact, just setting X&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eaxisalignment.html"&gt;Axis Alignment&lt;/A&gt; to Left/Right and Y &lt;STRONG&gt;Axis Alignment&lt;/STRONG&gt; to Top/Bottom makes the chart vertical. Moreover if the axes orientation needs to be inverted there is &lt;STRONG&gt;flippedCoordinates&lt;/STRONG&gt; property on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;AxisCore&lt;/A&gt;&amp;nbsp;class.&amp;nbsp;In order to make the chart interactive&amp;nbsp;we&amp;nbsp;add chart modifiers such as&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="30ee889c-86dd-41d2-bc3f-ec0415855433"&gt;MouseWheelZoomModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { ZoomExtentsModifier } from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import { RolloverModifier } from "scichart/Charting/ChartModifiers/RolloverModifier";&lt;BR&gt;import { EAxisAlignment } from "scichart/types/AxisAlignment";&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; // Make the chart vertical by setting X Axis Alignment to Left or Right&lt;BR&gt;&amp;nbsp; xAxis.axisAlignment = EAxisAlignment.Left;&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; xAxis.flippedCoordinates = false;&lt;BR&gt;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; // Make the chart vertical by setting Y Axis Alignment to Top or Bottom&lt;BR&gt;&amp;nbsp; yAxis.axisAlignment = EAxisAlignment.Top;&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; yAxis.flippedCoordinates = true;&lt;BR&gt;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomPanModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomExtentsModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new MouseWheelZoomModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new RolloverModifier());&lt;BR&gt;}&lt;BR&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the &lt;STRONG&gt;Vertical Chart&lt;/STRONG&gt;:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial-10-vertical-charts-2.jpg"&gt;&lt;/P&gt;
&lt;P&gt;Here's the completed source code for the vertical chart:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { EAxisAlignment } from "scichart/types/AxisAlignment";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { ZoomExtentsModifier } from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import { RolloverModifier } from "scichart/Charting/ChartModifiers/RolloverModifier";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp; const { wasmContext, sciChartSurface } = await SciChartSurface.create(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart-root-1"&lt;BR&gt;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp; // Generate a data set for sine wave&lt;BR&gt;&amp;nbsp; const xValues = [];&lt;BR&gt;&amp;nbsp; const yValues = [];&lt;BR&gt;&amp;nbsp; for (let i = 0; i &amp;lt;= 100; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const x = 0.1 * i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(x);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(Math.sin(x));&lt;BR&gt;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; // Make the chart vertical by setting X Axis Alignment to Left or Right&lt;BR&gt;&amp;nbsp; xAxis.axisAlignment = EAxisAlignment.Left;&lt;BR&gt;&amp;nbsp; xAxis.axisTitleRenderer.text = "X Axis";&lt;BR&gt;&amp;nbsp; xAxis.growBy = new NumberRange(0.1, 0.1);&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; xAxis.flippedCoordinates = false;&lt;BR&gt;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp; // Make the chart vertical by setting Y Axis Alignment to Top or Bottom&lt;BR&gt;&amp;nbsp; yAxis.axisAlignment = EAxisAlignment.Top;&lt;BR&gt;&amp;nbsp; yAxis.axisTitleRenderer.text = "Y Axis";&lt;BR&gt;&amp;nbsp; yAxis.growBy = new NumberRange(0.1, 0.1);&lt;BR&gt;&amp;nbsp; // Use this property to flip the axis orientation&lt;BR&gt;&amp;nbsp; yAxis.flippedCoordinates = true;&lt;BR&gt;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp; sciChartSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues, yValues }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "orange"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomPanModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new ZoomExtentsModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new MouseWheelZoomModifier());&lt;BR&gt;&amp;nbsp; sciChartSurface.chartModifiers.add(new RolloverModifier());&lt;/P&gt;
&lt;P&gt;&amp;nbsp; sciChartSurface.zoomExtents();&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;Here is related documentation for further reading:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Axis APIs&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Types in SciChart.js&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="525f68b8-0e0c-4c4f-9fd3-6ea272417dca" AutoIndex="false">
            <Caption m="2020-08-03T14:52:46.5340233Z">The SciChart JS Examples Suite</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="481993d4-64bd-4388-bb27-dba9b5784df7" Status="New Topic" CreatedOn="2016-06-20T20:37:35.3395416Z" ModifiedOn="2023-12-22T13:18:42.8904644Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The_SciChart_Js_Examples_Suite" BuildFlags="">
                <Title m="2020-08-03T16:14:43.2635733Z">The SciChart.js Examples Suite</Title>
                <ContentsTitle m="2020-08-03T16:43:01.3896299Z">The SciChart.js Examples Suite</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BODYTEXT">
                    <Content m="2023-12-22T13:18:42.8758203Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To make it easier to start using SciChart.js in your project, we prepared a bunch of examples demonstrating different features and their usage. These are called “SciChart.js Examples Suite” or SciChart demo.&lt;/P&gt;
&lt;P&gt;We have two places you can view the SciChart Demo online.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Option 1:&lt;/STRONG&gt; Browse all our examples at &lt;A href="https://www.scichart.com/examples/javascript-chart/" target=_blank&gt;scichart.com/examples/javascript-chart&lt;/A&gt;, where demos are embedded into our website.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://scichart.com/example/javascript-chart" target=_blank&gt;&lt;IMG border=0 alt=a src="images/ExamplesSuite_Homepage.jpg"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Option 2:&lt;/STRONG&gt; At&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;demo.scichart.com&lt;/A&gt;, where the React app is hosted. The React App demo has a counterpart Github repo here:&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;github.com/abtsoftware/scichart.js.examples&lt;/A&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;A href="https://demo.scichart.com/" target=_blank&gt;&lt;IMG border=0 alt=demo.scichart.com src="images/ExamplesSuite_DemoHome.jpg"&gt;&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: The SciChart website wraps &amp;amp; displays the React App demos inside a webpage with supplementary information. Both are good tools for exploring the feature-set of SciChart.js.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;For developers, we would recommend cloning and running the React App locally, and changing code to learn how to use SciChart.js.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;Find the full source code for the scichart demo here: &lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;github.com/abtsoftware/scichart.js.examples&lt;/A&gt;&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Clone the SciChart.js Demo Source&lt;/H2&gt;
&lt;P&gt;The SciChart.js Demo React App is hosted on Github and is open source under MIT license.&lt;/P&gt;
&lt;P&gt;Clone the repository at&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;github.com/abtsoftware/scichart.js.examples&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Follow instructions in the readme.md to compile and run the app locally.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ExamplesSuite_Github.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="0fb85d31-d4c6-4737-9903-448c57e69127" AutoIndex="false">
            <Caption m="2022-01-09T10:25:11.8358543Z">Vanilla JS Tutorials</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="38afdac0-306d-40d9-b056-b1b8f2a3ae61" Status="New Topic" CreatedOn="2022-01-09T10:25:32.4204944Z" ModifiedOn="2023-01-10T18:15:27.2737087Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial01IncludingSciChartjsHTMLPage" BuildFlags="">
                <Title m="2023-01-10T18:15:27.2727043Z">Tutorial  01 - Including SciChart.js in an HTML Page</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-03-10T17:51:36.9157669Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;If you are using npm and webpack, then see our comprehensive list of Video Tutorials for SciChart.js with npm below&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Setting up an npm Project with SciChart.js&lt;/A&gt; 
&lt;LI&gt;&lt;A href="30f7b8a6-e55b-49bb-909f-998d6d24112e"&gt;Adding Series and Data&lt;/A&gt; 
&lt;LI&gt;&lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0"&gt;Adding Zooing and Panning behaviour&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;... plus several more&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Including SciChart.js in an HTML Page&lt;/H2&gt;
&lt;P&gt;The following tutorial shows you how to include SciChart.js in an HTML page, without the need for setup of npm and a module bundler such as webpack.&lt;/P&gt;
&lt;P&gt;This methods is suitable for users who have vanilla JavaScript applications but still want to use SciChart.js to show charts &amp;amp; graphs in their applications.&lt;/P&gt;
&lt;P&gt;This method is also useful as a fallback in application frameworks like Blazor, which don't have Npm support but do need to interop with JavaScript charts in a webpage.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;How to add SciChart.Browser.js to your project&lt;/H2&gt;
&lt;OL&gt;
&lt;LI&gt;Choose what version of SciChart you want to use. To find out which versions are available, head over to &lt;A href="https://www.npmjs.com/package/scichart" target=_blank&gt;npmjs.com/package/scichart&lt;/A&gt; and click on versions. For example, the&amp;nbsp;&lt;A href="https://www.npmjs.com/package/scichart" target=_blank&gt;latest version today is 2.1.2290&lt;/A&gt; 
&lt;LI&gt;Add script pointing to a specific version into the head section of your html file. For instance to add version 2.1.2290 add this script: &lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Include SciChart.js Script&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;script src="https://cdn.jsdelivr.net/npm/scichart@3.3.577/_wasm/scichart.browser.js" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;LI&gt;Configure SciChart.js to load the wasm and data files from CDN &lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure SciChart.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// libraryVersion is a constant hard coded into the library. This ensures a match between wasm/data versions&lt;BR&gt;SciChart.SciChartSurface.configure({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.data`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; wasmUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.wasm`&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;4. Next, add some series, axis and behaviours to the SciChartSurface (more on that below) &amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: Version numbers in the call to SciChartSurface.configure()&amp;nbsp;must be the same for the Script version, Wasm and Data file. SciChart will download and cache these files in your browser.&amp;nbsp;&lt;A href="https://www.npmjs.com/package/scichart" target=_blank&gt;Find the latest version of SciChart over at npmjs&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Worked Example using SciChart.browser.js&lt;/H2&gt;
&lt;P&gt;We have a worked example over at&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-browser-global-module" target=_blank&gt;Github&lt;/A&gt; of how to use this, but for the sake of ease let's include the code below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChart.js Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;BR&gt;&amp;lt;html lang="en"&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Required meta tags --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Include SciChart.js --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; src="https://cdn.jsdelivr.net/npm/scichart@3.3.577/_wasm/scichart.browser.js"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; crossorigin="anonymous"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;Hello, SciChart.js world!&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello, SciChart.js world!&amp;lt;/h1&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- Create the Div to host the SciChartSurface --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- The JavaScript to create a SciChartSurface --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script&amp;gt;&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // In order to load data file from the CDN we need to set dataUrl&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;SciChartSurface.configure({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.data`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; wasmUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.wasm`&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a SciChartSurface inside the div&amp;nbsp;with id 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } = await &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;SciChartSurface.create("scichart-root");&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an X and a Y Axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; initSciChart();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BrowserBundle_HelloWorld.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Breaking the Code Down&lt;/H2&gt;
&lt;OL&gt;
&lt;LI&gt;We included the &amp;lt;script&amp;gt; tag to load SciChart.browser.js with a specific version&lt;BR&gt;
&lt;LI&gt;We have an async function to setup SciChart. This is necessary because SciChart itself uses async functions to load, and we don't want to block the browser loading.&lt;BR&gt;
&lt;LI&gt;Inside this async function, we call SciChart.SciChartSurface.Configure to load data &amp;amp; wasm files.&lt;BR&gt;
&lt;LI&gt;Lastly, we can use the SciChart API to create a surface, and add an X and Y Axis &lt;/LI&gt;&lt;/OL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Notice every API call is prefixed by &lt;STRONG&gt;SciChart.&lt;/STRONG&gt; when using the browser bundle. This is the global namespace for all SciChart apis, functions and types.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Further Learning&lt;/H2&gt;
&lt;P&gt;All of the SciChart APIs can be used in the Browser Bundle method where you include a script directly in HTML. The only difference is each type, function or class must be prefixed by the global namespace &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;You can therefore use any of our examples or tutorials but prefix the type with &lt;STRONG&gt;SciChart.&lt;/STRONG&gt; so that it can be loaded directly in the browser.&lt;/P&gt;
&lt;P&gt;There is no intellisense or type discovery when using the browser bundle pure javascript method. For professional or enterprise grade apps we recommend using npm and TypeScript which provides a far superior development experience.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4f597daa-dd65-4d3b-b9f5-65b66c82485d" Status="New Topic" CreatedOn="2022-03-10T16:26:21.0438741Z" ModifiedOn="2023-01-10T18:15:14.9927458Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Tutorial02AddingSeriesDataHTMLPage" BuildFlags="">
                <Title m="2023-01-10T18:15:14.9927458Z">Tutorial  02 - Adding Series and Data to an HTML Page</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-03-10T17:52:02.7362331Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;If you are using npm and webpack, then see our comprehensive list of Video Tutorials for SciChart.js with npm below&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Setting up an npm Project with SciChart.js&lt;/A&gt; 
&lt;LI&gt;&lt;A href="30f7b8a6-e55b-49bb-909f-998d6d24112e"&gt;Adding Series and Data&lt;/A&gt; 
&lt;LI&gt;&lt;A href="2c5fca53-4e1c-426d-826b-966b97ed42b0"&gt;Adding Zooing and Panning behaviour&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;... plus several more&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;How to add SciChart.Browser.js to your project&lt;/H2&gt;
&lt;P&gt;If you haven't seen our tutorial on how to add SciChart.js to a plain HTML page, then please first read&amp;nbsp;&lt;A href="38afdac0-306d-40d9-b056-b1b8f2a3ae61"&gt;Tutorial 01 - Including SciChart.js in an HTML page&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;This shows you how to reference the browser bundle script, initialize webassembly files and create your first basic chart.&lt;/P&gt;
&lt;H2&gt;Adding Series and Data to a SciChart.js Chart&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Tutorials/" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In this tutorial, we are going to add&amp;nbsp;some Line series onto the chart.&lt;/P&gt;
&lt;P&gt;First, we will add a&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt; and add this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection.&lt;/P&gt;
&lt;P&gt;Next,&amp;nbsp;we create an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt; &lt;STRONG&gt;-&lt;/STRONG&gt; which&amp;nbsp;is&amp;nbsp;the type which stores the data, and can accept dynamic updates (real-time updates) and manipulation of data. We will assign the dataseries to the FastLineRenderableSeries.&lt;/P&gt;
&lt;P&gt;Try the code below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Browser Bundle Tutorial 2&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script src="&lt;A href="https://cdn.jsdelivr.net/npm/scichart@3.3.577/_wasm/scichart.browser.js"&gt;https://cdn.jsdelivr.net/npm/scichart@3.3.577/_wasm/scichart.browser.js&lt;/A&gt;" crossorigin="anonymous"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="index.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we add series &amp;amp;amp; data to a SciChart Chart using pure JS and a CDN&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;BR&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // LICENSING //&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set your license code here. See &lt;A href="https://www.scichart.com/licensing-scichart-js/"&gt;https://www.scichart.com/licensing-scichart-js/&lt;/A&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // for instructions&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Load SciChart.js from CDN. Ensure version numbers match the script in index.html&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChart.SciChartSurface.configure({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.data`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; wasmUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${SciChart.libraryVersion}/_wasm/scichart2d.wasm`&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChartSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The SciChartSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChartSurface, wasmContext} = await SciChart.SciChartSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new SciChart.NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new SciChart.NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create 100 dataseries, each with 10k points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let seriesCount = 0; seriesCount &amp;lt; 100; seriesCount++) {&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyDataSeries = new SciChart.XyDataSeries(wasmContext);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const opacity = (1 - ((seriesCount / 120))).toFixed(2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Populate with some data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for(let i = 0; i &amp;lt; 10000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyDataSeries.append(i, Math.sin(i* 0.01) * Math.exp(i*(0.00001*(seriesCount+1))));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add and create a line series with this data to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a line series&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new SciChart.FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: xyDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: `rgba(176,196,222,${opacity})`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness:2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-02-browserbundle-output.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Breaking the Code Down&lt;/H2&gt;
&lt;OL&gt;
&lt;LI&gt;We included the &amp;lt;script&amp;gt; tag to load SciChart.browser.js with a specific version&lt;BR&gt;
&lt;LI&gt;We have an async function to setup SciChart. This is necessary because SciChart itself uses async functions to load, and we don't want to block the browser loading.&lt;BR&gt;
&lt;LI&gt;Inside this async function, we call SciChart.SciChartSurface.Configure to load data &amp;amp; wasm files.&lt;BR&gt;
&lt;LI&gt;Lastly, we can use the SciChart API to create a surface, and add an X and Y Axis and add some RenderableSeries and DataSeries. &lt;/LI&gt;&lt;/OL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Notice every API call is prefixed by &lt;STRONG&gt;SciChart.&lt;/STRONG&gt; when using the browser bundle. This is the global namespace for all SciChart apis, functions and types.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Further Learning&lt;/H2&gt;
&lt;P&gt;All of the SciChart APIs can be used in the Browser Bundle method where you include a script directly in HTML. The only difference is each type, function or class must be prefixed by the global namespace &lt;STRONG&gt;SciChart.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;You can therefore use any of our examples or tutorials but prefix the type with &lt;STRONG&gt;SciChart.&lt;/STRONG&gt; so that it can be loaded directly in the browser.&lt;/P&gt;
&lt;P&gt;There is no intellisense or type discovery when using the browser bundle pure javascript method. For professional or enterprise grade apps we recommend using npm and TypeScript which provides a far superior development experience.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-js" target=_blank&gt;www.scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="e7a544bb-308a-4c4f-a47b-f5b2adcc918e" AutoIndex="false">
            <Caption m="2023-07-24T18:13:53.6489646Z">Tutorials React</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="a5d48d77-152d-4142-b184-811540804fde" Status="New Topic" CreatedOn="2023-07-24T09:15:58.4265193Z" ModifiedOn="2024-01-12T17:24:08.5767921Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TutorialReusableReactComponent" BuildFlags="">
                <Title m="2024-01-12T17:12:32.3820528Z">Tutorial - Creating a SciChart React Component from the Ground Up</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2024-01-12T17:24:08.5767921Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;NEW! We have now published an open source&amp;nbsp;&lt;A href="https://www.scichart.com/blog/react-charts-with-scichart-js/" target=_blank&gt;scichart-react&lt;/A&gt; library&lt;/STRONG&gt; which neatly wraps up this entire tutorial and more. Handling component lifecycle, proper disposal of the SciChartSurface and with a nice API too :)&lt;/P&gt;
&lt;P&gt;Head over to the following page to learn more:&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/blog/react-charts-with-scichart-js/" target=_blank&gt;&lt;A href="https://www.scichart.com/blog/react-charts-with-scichart-js/" target=_blank&gt;React Charts with SciChart.js: Introducing the scichart-react library&lt;/A&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Also see:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://github.com/ABTSoftware/scichart-react" target=_blank&gt;SciChart-React on Github&lt;/A&gt;: official React component wrapper for SciChart.js 
&lt;LI&gt;&lt;A href="https://www.npmjs.com/package/scichart-react" target=_blank&gt;SciChart-React on npm&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="2198..2365"&gt;The idea of this tutorial is to create a reusable React component which could be used as a core setup for instantiating a SciChart.js chart and properly disposing of memory once the chart is no longer needed.&amp;nbsp;&lt;/P&gt;
&lt;P md-src-pos="2198..2365"&gt;Source code for this tutorial can be found at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/dev_v3.2/Tutorials/React/reusable-react-component" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;&lt;/P&gt;
&lt;P md-src-pos="2198..2365"&gt;Main criteria and points to consider:&lt;/P&gt;
&lt;UL md-src-pos="2366..2833"&gt;
&lt;LI md-src-pos="2366..2436"&gt;The component should be &lt;STRONG&gt;reusable&lt;/STRONG&gt; for different chart configurations 
&lt;LI md-src-pos="2437..2513"&gt;It should be possible to safely &lt;STRONG&gt;create several instances&lt;/STRONG&gt; of the component 
&lt;LI md-src-pos="2514..2579"&gt;It should be easy to &lt;STRONG&gt;add custom functionality&lt;/STRONG&gt; to the component 
&lt;LI md-src-pos="2580..2662"&gt;SciChart instantiation is an async function, thus it should be properly handled 
&lt;LI md-src-pos="2663..2759"&gt;SciChart requires a root node element where it would reside to exist before the instantiation 
&lt;LI md-src-pos="2760..2833"&gt;The chart should be &lt;STRONG&gt;properly disposed and memory deleted&lt;/STRONG&gt;&amp;nbsp;after the component is unmounted. &lt;/LI&gt;&lt;/UL&gt;
&lt;P md-src-pos="2835..2969"&gt;While creating the example we will try using tools provided in SciChart's&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;MemoryUsageHelper&lt;/A&gt;&amp;nbsp;to discover potential issues with memory leaking and bugs.&lt;/P&gt;
&lt;H2 id=basic-component md-src-pos="2971..2990"&gt;Worked Example&amp;nbsp;- a Basic React Component&lt;/H2&gt;
&lt;P md-src-pos="2991..3061"&gt;Let's start with showing an example of how to create a re-usable React Component to work with SciChart.js.&amp;nbsp;We'll start off with&amp;nbsp;a simple React component which instantiates a&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt; in useEffect but fails to delete it on unmount.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Simple React Component&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;function SciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rootElementId = 'chart';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; useEffect(() =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; createChart(rootElementId); // Note, does not delete on unmount (todo later)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return &amp;lt;div id={rootElementId} style={{width: 800, height: 600}} /&amp;gt;;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="3283..3329"&gt;where&amp;nbsp;&lt;CODE md-src-pos="3289..3302"&gt;createChart&lt;/CODE&gt;&amp;nbsp;could be defined as below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;createChart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const createChart = async (divElementId: string ) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { sciChartSurface };&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="3703..3809"&gt;So by placing a&amp;nbsp;&lt;CODE md-src-pos="3719..3732"&gt;createChart&lt;/CODE&gt;&amp;nbsp;into the&amp;nbsp;&lt;CODE md-src-pos="3742..3753"&gt;useEffect&lt;/CODE&gt;&amp;nbsp;hook with an empty list of dependencies we ensure that:&lt;/P&gt;
&lt;UL md-src-pos="3810..3959"&gt;
&lt;LI md-src-pos="3810..3848"&gt;initialization will happen only once. 
&lt;LI md-src-pos="3849..3959"&gt;and it will happen after the component render, so that it could create a chart on the rendered root element. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2 id=reusing-the-component md-src-pos="3964..3989"&gt;Reusing the component&lt;/H2&gt;
&lt;P md-src-pos="3990..4139"&gt;Now let's make it reusable by allowing to provide arbitrary initialization function and styles.&amp;nbsp;For this we could pass these via the component props.&lt;/P&gt;
&lt;P md-src-pos="4141..4471"&gt;Also,&amp;nbsp;to allow using the result of the initialization we want to expose some interface to manipulate a chart.&amp;nbsp;A common return result would contain a surface reference as&amp;nbsp;&lt;CODE md-src-pos="4311..4324"&gt;createChart&lt;/CODE&gt;&amp;nbsp;has.&amp;nbsp;To make it more generic we can defined the return type with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iscichartsurfacebase.html"&gt;ISciChartSurfaceBase&lt;/A&gt;&amp;nbsp;which is common for 2D,&amp;nbsp;3D and Pie surfaces in SciChart.&lt;/P&gt;
&lt;P md-src-pos="4473..4590"&gt;Also,&amp;nbsp;to allow placing multiple charts on the page we should provide a unique&amp;nbsp;&lt;CODE md-src-pos="4551..4566"&gt;rootElementId&lt;/CODE&gt;&amp;nbsp;per component instance.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Updated useState&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const [rootElementId] = useState(`chart-root-${generateGuid()}`);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="4676..4737"&gt;So the interface and usage of the props would look like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;React Component&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;interface IChartComponentProps {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; initChart: (rootElementId: string) =&amp;gt; Promise&amp;lt;{ sciChartSurface: ISciChartSurfaceBase }&amp;gt;;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; className?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; style?: CSSProperties;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;function SciChart(props: IChartComponentProps) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const [rootElementId] = useState(`chart-root-${generateGuid()}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; useEffect(() =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; props.initChart(rootElementId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return &amp;lt;div id={rootElementId} className={props.className} style={props.style} /&amp;gt;;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="4676..4737"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P md-src-pos="5222..5258"&gt;The usage example of such component:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;usage&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;function App() {&lt;BR&gt;&amp;nbsp; return (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div className='App'&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;SciChart initChart={createChart} style={{ width: 800, height: 600 }} /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp; );&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;HR&gt;

&lt;H2 id=testing-the-component-with-scichart-debug-tools md-src-pos="5453..5504"&gt;Testing the component with SciChart Memory Debug tools&lt;/H2&gt;
&lt;P md-src-pos="5505..5629"&gt;Now,&amp;nbsp;before going to implementing the further requirements,&amp;nbsp;let's try to test this component with SciCharts&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;Memory Debugging tools&lt;/A&gt;.&lt;/P&gt;
&lt;P md-src-pos="5631..5785"&gt;We will setup an example in which we could force the unmounting of the&amp;nbsp;&lt;CODE md-src-pos="5702..5712"&gt;SciChart&lt;/CODE&gt;&amp;nbsp;component to see if it has been properly cleaned up.&lt;BR&gt;For this we will:&lt;/P&gt;
&lt;UL md-src-pos="5786..6089"&gt;
&lt;LI md-src-pos="5786..5871"&gt;enable the debug mode with&amp;nbsp;&lt;CODE md-src-pos="5816..5868"&gt;MemoryUsageHelper.isMemoryUsageDebugEnabled = true&lt;/CODE&gt;, 
&lt;LI md-src-pos="5872..6089"&gt;hint the SciChart to automatically destroy the WebAssembly Context (if there are no surface instances using it) with&amp;nbsp;&lt;CODE md-src-pos="5991..6038"&gt;SciChartSurface.autoDisposeWasmContext = true&lt;/CODE&gt;&lt;BR&gt;(to make a full cleanup for testing purposes). &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG md-src-pos="6091..6099"&gt;NOTE&lt;/STRONG&gt;&amp;nbsp;The debug mode&amp;nbsp;(&lt;CODE md-src-pos="6116..6168"&gt;MemoryUsageHelper.isMemoryUsageDebugEnabled = true&lt;/CODE&gt;)&amp;nbsp;is only supposed to be used development mode. It will not work in the production build.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Debugging memory leaks&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;SciChartSurface.autoDisposeWasmContext = true;&lt;BR&gt;MemoryUsageHelper.isMemoryUsageDebugEnabled = true;&lt;/P&gt;
&lt;P&gt;function App() {&lt;BR&gt;&amp;nbsp; const [drawChart, setDrawChart] = useState(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp; const handleCheckbox: ChangeEventHandler&amp;lt;HTMLInputElement&amp;gt; = (e) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setDrawChart(e.target.checked);&lt;BR&gt;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp; const handleClick: MouseEventHandler&amp;lt;HTMLInputElement&amp;gt; = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const state = MemoryUsageHelper.objectRegistry.getState();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('state', state);&lt;BR&gt;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp; return (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div className='App'&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;header className='App-header'&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;SciChart.js with React&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we setup webpack, scichart, react and create a simple chart with one X and Y axis&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/header&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type='checkbox' checked={drawChart} onChange={handleCheckbox} /&amp;gt; Show Chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;br /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;input type='button' onClick={handleClick} value="Log Object Registry State"&amp;gt;&amp;lt;/input&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {drawChart ? &amp;lt;SciChart initChart={createChart} style={{ width: 800, height: 600 }} /&amp;gt; : null}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp; );&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center md-src-pos="7388..7450"&gt;&lt;IMG border=0 alt="" src="images/MemoryBestPractice_ReactDebug.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P md-src-pos="7452..7568"&gt;Now let's compare how the state of&amp;nbsp;&lt;STRONG md-src-pos="7488..7524"&gt;MemoryUsageHelper.objectRegistry&lt;/STRONG&gt;&amp;nbsp;will change after we unmount the component.&lt;/P&gt;
&lt;P md-src-pos="7570..7615"&gt;We will use this debugging steps for testingL&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Output the current state by pressing "Log Object Registry State" button. The output will be something like: &lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Console output&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;state {undeletedObjectsIds: Array(61), uncollectedObjectsIds: Array(62)}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;which is the list of SciChart related objest that could be disposed using delete method. &lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P md-src-pos="7915..8099"&gt;&lt;STRONG md-src-pos="7915..7923"&gt;NOTE&lt;/STRONG&gt;&amp;nbsp;SciChart manages the lifecycle of most of them internally. But some of those,&amp;nbsp;that were not attached to or were detached from a chart,&amp;nbsp;are supposed to be managed explicitly.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;LI&gt;To unmount the component we could click the "Show Chart" checkbox. Immediately we will get a console warning&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;DIV align=center&gt;&lt;IMG border=0 alt="" src="images/MemoryBestPractice_Warning.png"&gt; 
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;/DIV&gt;&amp;nbsp;&lt;BR&gt;It suggest that we may have forgotten to clean up the created chart when the component was unmounted (which we did).&lt;BR&gt;
&lt;LI md-src-pos="8373..8742"&gt;
&lt;P md-src-pos="8376..8742"&gt;Now, additionally, we may force the garbage collection using browser tools if available. This may help to better understand if there are leaks of JS objects caused by unreleased references based on&amp;nbsp;&lt;CODE md-src-pos="8575..8598"&gt;uncollectedObjectsIds&lt;/CODE&gt;. But more important is to focus on making sure that SciChart related entities were properly disposed and there should be&amp;nbsp;&lt;CODE md-src-pos="8720..8741"&gt;undeletedObjectsIds&lt;/CODE&gt;.&lt;BR&gt;&lt;/P&gt;
&lt;LI md-src-pos="8744..8900"&gt;
&lt;P md-src-pos="8747..8900"&gt;Pressing the "Log Object Registry State" button again will show an output similar to the previous, confirming that the chart was not cleaned up properly.&lt;BR&gt;&lt;/P&gt;&lt;/LI&gt;&lt;/OL&gt;
&lt;H2 id=adding-a-cleanup-callback md-src-pos="8906..8935"&gt;Adding a cleanup callback&lt;/H2&gt;
&lt;P md-src-pos="8936..9099"&gt;Let's try to fix an obvious issue and return a component&amp;nbsp;&lt;CODE md-src-pos="8993..9005"&gt;destructor&lt;/CODE&gt;&amp;nbsp;in the&amp;nbsp;&lt;CODE md-src-pos="9013..9024"&gt;useEffect&lt;/CODE&gt;&amp;nbsp;hook.&amp;nbsp;Here we updated the component,&amp;nbsp;but there is still an issue with it.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;React component with cleanup (1)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;function SciChart(props: IChartComponentProps) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const [sciChartSurface, setSciChartSurface] = useState&amp;lt;ISciChartSurfaceBase&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const [rootElementId] = useState(`chart-root-${generateGuid()}`);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; useEffect(() =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (async () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const res = await props.initChart(rootElementId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setSciChartSurface(res.sciChartSurface);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return () =&amp;gt; sciChartSurface?.delete();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return &amp;lt;div id={rootElementId} className={props.className} style={props.style} /&amp;gt;;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="9617..9917"&gt;After going through the debug steps again we will see that nothing has really changed. The reason for this is a wrong reference to the surface used in the destructor&amp;nbsp;&lt;CODE md-src-pos="9789..9823"&gt;() =&amp;gt; sciChartSurface?.delete();&lt;/CODE&gt;. As you may guess it will use the nullish value assigned in the initial component render.&lt;/P&gt;
&lt;P md-src-pos="9919..10088"&gt;So deal with the fact that chart initialization is an async operation we will consider handling the unresolved promise.&lt;BR&gt;So our next iteration of the component will be:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;React component with cleanup (2)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;function SciChart(props: IChartComponentProps) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const sciChartSurfaceRef = useRef&amp;lt;ISciChartSurfaceBase&amp;gt;();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const [rootElementId] = useState(`chart-root-${generateGuid()}`);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; useEffect(() =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const chartInitializationPromise = props.initChart(rootElementId).then((initResult) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurfaceRef.current = initResult.sciChartSurface;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return initResult.sciChartSurface;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const performCleanup = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurfaceRef.current.delete();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurfaceRef.current = undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // check if chart is already initialized or wait init to finish before deleting it&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurfaceRef.current ? performCleanup() : chartInitializationPromise.then(performCleanup);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return &amp;lt;div id={rootElementId} className={props.className} style={props.style} /&amp;gt;;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P md-src-pos="11031..11173"&gt;After running the debug steps again we should see an empty state returned to the output,&amp;nbsp;which means the chart was properly garbage collected.&lt;/P&gt;
&lt;P md-src-pos="11175..11445"&gt;And with this we've achieved our goal of creating a reusable chart component. This component could be a boilerplate for further improvement and customization, so consider testing corner cases with the SciChart debugging tools,&amp;nbsp;as well as tools provided by browsers.&lt;/P&gt;
&lt;P md-src-pos="11175..11445"&gt;&amp;nbsp;&lt;/P&gt;
&lt;HR&gt;

&lt;H2 id=additional-tips md-src-pos="11451..11470"&gt;Additional Tips&lt;/H2&gt;
&lt;P md-src-pos="11471..11478"&gt;React:&lt;/P&gt;
&lt;UL md-src-pos="11479..11740"&gt;
&lt;LI md-src-pos="11479..11669"&gt;To allow adding custom functionality upon a chart component (e.g. binding UI controls for chart manipulations), consider exposing a reference to the surface via&amp;nbsp;&lt;CODE md-src-pos="11642..11663"&gt;useImperativeHandle&lt;/CODE&gt;&amp;nbsp;hook. 
&lt;LI md-src-pos="11670..11740"&gt;Consider using&amp;nbsp;&lt;CODE md-src-pos="11687..11697"&gt;Suspense&lt;/CODE&gt;&amp;nbsp;for awaiting the async data/component load &lt;/LI&gt;&lt;/UL&gt;
&lt;P md-src-pos="11742..11752"&gt;Debugging:&lt;/P&gt;
&lt;UL md-src-pos="11753..11897"&gt;
&lt;LI md-src-pos="11753..11897"&gt;&lt;STRONG md-src-pos="11755..11776"&gt;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;MemoryUsageHelper&lt;/A&gt;&lt;/STRONG&gt;&amp;nbsp;exposes a number of methods for performing a cleanup. They may be useful for testing purposes but use them with caution. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="42be2c97-8bac-4658-981f-cb2ca42a30c3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fe846da4-4ffb-4833-bf13-e688f8f82497" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6e8ef3e3-818d-407a-8469-ef88e8d6e924" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4658035b-e6f2-4a3a-8203-958042b96f56" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
      <TopicCategory Id="694a43f4-e640-4be1-b01c-52e2468d9897" AutoIndex="false">
        <Caption m="2021-09-16T17:18:51.3567151Z">What's New?</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="a47da469-f175-48bb-a132-1e3dd24431a7" Status="New Topic" CreatedOn="2021-09-16T17:18:55.4463657Z" ModifiedOn="2022-01-28T17:53:23.0930099Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What's New in SciChart.js SDK v2.x" BuildFlags="">
            <Title m="2021-10-06T13:39:00.8255334Z">What's New in SciChart.js SDK v2.x</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-01-28T17:53:23.0930099Z">&lt;P&gt;SciChart.js v2.x is a huge upgrade from version 1.x. Our team has worked very hard to bring you lots of features that you requested, and improve the overall quality, reliability and performance of our WebAssembly / WebGL powered JavaScript Charts.&lt;/P&gt;
&lt;P&gt;Find out what's new in this major release below:&lt;/P&gt;
&lt;H2&gt;Style and Data Animations&lt;/H2&gt;
&lt;P&gt;As well as startup animations that sweep or fade a series when the chart is first shown, SciChart.js now features style and data animations.&lt;/P&gt;
&lt;P&gt;This let's you animate style properties on series (stroke, strokethickness, fill) as well as entire datasets.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="9695e2f8-bcd6-4ed4-ba36-244dc476498d"&gt;Animations API Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Animations-scatter-data-and-style-animation.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Builder API&lt;/H2&gt;
&lt;P&gt;A brand new API in SciChart.js - the Builder API - allows you to construct SciChartSurfaces with&amp;nbsp;a JSON or Javascript object definition.&lt;/P&gt;
&lt;P&gt;For example this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Builder api example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { EThemeProviderType } from "scichart/types/ThemeProviderType";&lt;BR&gt;import { EAxisType } from "scichart/types/AxisType";&lt;BR&gt;import { EChart2DModifierType } from "scichart/types/ChartModifierType";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EThemeProviderType.Light&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { stroke: "blue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 3, 4, 7, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [10, 6, 7, 2, 16]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxes: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Number of things",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 20),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPrecision: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifiers: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.Rollover },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.ZoomPan }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BuilderApi_CreateSeriesExample2.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="295dec01-f48c-4caf-a4c8-5b5ed765ba9f"&gt;Builder API Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;JSON Serialization / Deserialization&lt;/H2&gt;
&lt;P&gt;The Builder API also allows JSON Serialization / Deserialization. It is now possible to construct chart definitions including data server-side, and reconstruct the SciChart.js chart client side.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="4b80afe1-5ed3-415f-9668-7f43e45c13c4"&gt;JSON Serialization Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Point Metadata&lt;/H2&gt;
&lt;P&gt;SciChart.js v2.x now features a&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;PointMetadata API&lt;/A&gt;, comparable to our iOS Android and Windows charts. This API allows you to tag some or all x,y datapoints with a custom object, which can then be routed through to Tooltips, Hit-Test or PaletteProvider for dynamic colouring of chart segments.&lt;/P&gt;
&lt;P&gt;For example this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;pointmetadata example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create metadata in a DataSeries&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false, note: "This"},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false, note: "is"},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false, note: "some"},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false, note: "metadata"}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;});&lt;BR&gt;&lt;BR&gt;// Add a line series to chart&lt;BR&gt;const series = new FastLineRenderableSeries(wasmContext, { dataSeries, strokeThickness: 5 });&lt;/P&gt;
&lt;P&gt;// Define a function to show metadata in tooltips&lt;BR&gt;&amp;nbsp;const metadataTooltipDataTemplate = (seriesInfo) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const valuesWithLabels = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (seriesInfo.pointMetadata) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push("Note: " + seriesInfo.pointMetadata.note);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push("X: " + seriesInfo.formattedXValue + " Y: " + seriesInfo.formattedYValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return valuesWithLabels;&lt;BR&gt;&amp;nbsp;};&lt;/P&gt;
&lt;P&gt;// Add a tooltip&lt;BR&gt;&amp;nbsp;sciChartSurface.chartModifiers.add(new RolloverModifier({tooltipDataTemplate: metadataTooltipDataTemplate }));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rollover.gif"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;PointMetadata API Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Series Selection&lt;/H2&gt;
&lt;P&gt;We've added Series Selection on click, and Hover events to SciChart.js v2.x. With the new&amp;nbsp;&lt;A href="dc5b75d6-5475-47a1-a5c6-24310f833ba0"&gt;SeriesSelectionModifier&lt;/A&gt;, you can get notified if a user clicked or hovered a series, and make some visual changes such as changing or animating series style.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/seriesselectionmodifier-3.gif"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="dc5b75d6-5475-47a1-a5c6-24310f833ba0"&gt;SeriesSelectionModifier Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Datapoint Selection&lt;/H2&gt;
&lt;P&gt;We've also added Datapoint Selection into SciChart.js v2.x. You can now click select individual datapoints, drag to select multiple datapoints, get notified on click and display visual feedback. To use this feature, add a&amp;nbsp;&lt;A href="ae9b10e1-f5ba-444e-9835-6b0f95806007"&gt;DataPointSelectionModifier&lt;/A&gt; to your chart.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/datapointselectionmodifier-2.gif"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="ae9b10e1-f5ba-444e-9835-6b0f95806007"&gt;DatapointSelectionModifier Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Filters (Data Transforms) API&lt;/H2&gt;
&lt;P&gt;SciChart.js now features a Filters or Data Transforms API. This allows you to add data transforms such as Linear Trendlines, Moving Averages, Scale/Offset, or Ratio of two DataSeries to your chart. Filters automatically update when the underlying data changes, making it easy to apply transforms to your data.&lt;/P&gt;
&lt;P&gt;What's more, you can create custom filters easily if you wanted to add any other kind of behaviour.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Overview.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="681061b4-68ce-47a5-8b9c-920651d9dc6c"&gt;Filters API Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Transparent, Image or Blurred Backgrounds&lt;/H2&gt;
&lt;P&gt;In SciChart.js v2.x, we've completely re-written the way we composite WebGL powered JavaScript Charts onto the HTML page, allowing you to now create charts with transparent backgrounds, image backgrounds or even blurred/glass effect backgrounds.&lt;/P&gt;
&lt;P&gt;Create stunning JavaScript charts with SciChart's flexible styling &amp;amp; theming API!&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_BlurredBackground.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="91ecf8cb-fdb5-494c-a73e-8653cd940de0"&gt;Styling and Theming Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Loader Customisation&lt;/H2&gt;
&lt;P&gt;More styling &amp;amp; Theming changes in SciChart.js v2.x, you can now style the wait-loader, displayed when the chart initially starts up.&lt;/P&gt;
&lt;P&gt;Styling options include simple changing of foreground &amp;amp; background colours, right through to customizing the DOM which is displayed as the chart loads for the first time.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/styling_custom_waitloader.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="0088e945-90ec-4c22-9ebb-77ac52066462"&gt;Styling and Theming Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;SciChartOverview control&lt;/H2&gt;
&lt;P&gt;After requests from our userbase, we've added the SciChartOverview control to SciChart.js v2.x. This is a Scrollbar control which lets you see an overview of your dataset, and scroll left/right at the touch of a button.&lt;/P&gt;
&lt;P&gt;It works on vertical or horizontal charts, you can customize what series get displayed behind the overview, and customize the look&amp;nbsp;&amp;amp; feel of the scroll grips and selection rectangle too.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_Basic.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="14f8ca37-9a7f-49bd-b8bb-66b8b4e94bce"&gt;SciChartOverview Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Logarithmic Axis&lt;/H2&gt;
&lt;P&gt;Another hotly requested feature, we've added a Logarithmic Axis to SciChart.js v2! Display charts&amp;nbsp;with a&amp;nbsp;logarithmic scale, on either X or Y axis, with a user-defined base. For example Log(10) charts, Log(e) for scientific applications or Log(2) for finance &amp;amp; trading.&lt;/P&gt;
&lt;P&gt;You can specify the label format to display scientific notation with superscript, engineering notation or N-significant figures. Major and minor ticks can be displayed in linear or logarithmic scale.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WhatsNew_LogarithmicAxis.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="dbda6c22-a06d-4301-9b1d-d83b542d030f"&gt;Logarithmic Axis Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Central / Inner Axis&lt;/H2&gt;
&lt;P&gt;We've added further customisations to the axis in SciChart.js v2. You can now place an X,Y axis in the center of the chart to create oscilloscope like graphs, or inside the chart as opposed to fixed on the outside of the chart area. Placement of the axis is fully customisable.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WhatsNew_CentralAxis.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="0175a983-0786-4067-b718-206c8c41cd3b"&gt;Central / Inside Axis Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Vertically Stacked Axis&lt;/H2&gt;
&lt;P&gt;There's another axis customisation which we've added! Vertically Stacked Axis allows you to change the layout of axis panels.&lt;/P&gt;
&lt;P&gt;Instead of left to right for Y-Axis, you can now layout several axis top to bottom. This gives you layout options like this. Perfect for EEG / ECG like charts where you want to display several overlapping traces on a single SciChartSurface.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/vertically-stacked-axes.jpg"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="af7dd07c-7746-4a9d-a9ea-1afc4bb95701"&gt;Vertically Stacked Axis Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Retina and DPI Awareness / Browser Zoom&lt;/H2&gt;
&lt;P&gt;SciChart.js v2.x now supports sharp graphics on high resolution Retina displays, as well as Browser Zoom functionality.&lt;/P&gt;&lt;!-- /wp:paragraph --&gt;&lt;!-- wp:paragraph --&gt;
&lt;P&gt;Previously in SciChart.js, retina displays would look low quality, and when the browser is zoomed the image that SciChart renders to would simply be scaled. In SciChart.js v2, every element is now rendered at the native resolution and scaled down for display. This results in the following benefits:&lt;/P&gt;&lt;!-- /wp:paragraph --&gt;&lt;!-- wp:list {"ordered":true} --&gt;
&lt;OL&gt;
&lt;LI&gt;Lines, strokes, shapes now look sharper and clearer on higher DPI displays or when browser is zoomed 
&lt;LI&gt;Text is rendered at a higher resolution. Text scales with browser zoom (good for Accessibility) 
&lt;LI&gt;Stroke thickness (line pen) increases with Browser Zoom &lt;/LI&gt;&lt;/OL&gt;&lt;!-- /wp:list --&gt;&lt;!-- wp:paragraph --&gt;
&lt;P&gt;Take a look below to see some comparison images side by side of SciChart.js v1 vs. v2 at 200% Browser zoom in Chrome.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BrowserZoom_Comparison2.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="d2be691e-df29-43c3-9a57-0130024efa03"&gt;Retina / DPI / Browser Zoom Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;!-- /wp:paragraph --&gt;
&lt;H2&gt;Axis Label Customization&lt;/H2&gt;
&lt;P&gt;There are now several ways to customise axis labels in SciChart.js v2. SciChart now supports rotated axis labels, multi-line axis labels and even image labels. All this and more is possible via our Custom LabelProviders API.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WhatsNew_AxisRotated.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/WhatsNew_AxisImages.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="efc8de3f-7cbb-4577-9a42-9a4e5621156d"&gt;Custom LabelProviders Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Text Label Provider&lt;/H2&gt;
&lt;P&gt;Guess what, we've also added a way to natively put text labels onto an axis. The TextLabelProvider provides text labels rather than numeric. Specify text labels as an array with a mapping and our library displays them on the axis. This also features a rudimentary word wrapping algorithm for long labels.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/textlabels2.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="29f7d41d-5dae-4b16-9f75-a090b3f02630"&gt;TextLabelProvider Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Hit-Test Improvements&lt;/H2&gt;
&lt;P&gt;We've made multiple improvements to the Hit-Test API, allowing for greater control over what a hit (click) means on the chart.&lt;/P&gt;
&lt;P&gt;You can now listen to mouse events and clicks on the chart and&amp;nbsp;determine if the user:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Clicked on a series segment (e.g. column body, candle body, line series segment) 
&lt;LI&gt;Clicked on an X-Y data-point 
&lt;LI&gt;Finding the nearest point using X-first (for timeseries) or X-Y distance (for scatter series) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Hit-Test API returns an object which describes which points or series were under or nearest the mouse, and may be used for getting click notifications on chart series, implementing drill-downs, custom interactions or behaviours and more.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more in the&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit-Test Provider Docs&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Miscellaneous Improvements&lt;/H2&gt;
&lt;P&gt;We've made lots of improvements into SciChart.js, including improving overall reliability, helpful error messages in the JavaScript console, improvements to the usability of APIs, improvements to documentation and examples plus much more.&lt;/P&gt;
&lt;P&gt;If you're an existing user of SciChart.js or you've tried it out in the past, download SciChart.js v2 now and try it out! We would love to hear your feedback!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="d983dff0-b243-4a56-a5e0-9c399281c9fc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a5c46481-4865-47fe-85bd-8add4c13cece" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="a5c46481-4865-47fe-85bd-8add4c13cece" Status="New Topic" CreatedOn="2021-09-16T17:19:08.2804309Z" ModifiedOn="2022-05-20T08:35:43.7329286Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Breaking Changes in SciChart.js v2.x" BuildFlags="">
            <Title m="2022-05-20T08:29:51.6152718Z">Breaking Changes in SciChart.js v2.x from v1.x</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-05-20T08:35:43.7329286Z">&lt;P&gt;SciChart.js v2 is a big release with many new features and many fixes and improvements that have required some breaking changes to the api from v1.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="#FormattingEnums"&gt;Formatting Enums&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#SciChartSurface.create"&gt;SciChartSurface.create&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#SciChartPieSurface.create"&gt;SciChartPieSurface.create&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#LabelFormatting"&gt;Label Formatting&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#IThemeProvider"&gt;IThemeProvider additional fields&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#UniformHeatmapDataSeries"&gt;UniformHeatmapDataSeries constructor&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#Shadereffects"&gt;Shader effects&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#Hit-Test"&gt;Hit-Test&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#RolloverModifier"&gt;RolloverModifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#CursorModifier"&gt;CursorModifier&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#Ignorefs"&gt;Ignore fs should be removed or updated in webpack.config&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#TGridLineStyle"&gt;TGridLineStyle.strokeDasharray renamed&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#TEasing"&gt;TEasing renamed&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#ICandlestickSeriesOptions"&gt;ICandlestickSeriesOptions renamed&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#RubberBandSvgRect"&gt;RubberBandSvgRect renamed&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Formatting Enums&lt;/H2&gt;
&lt;P&gt;&lt;A id=FormattingEnums name=FormattingEnums&gt;&lt;/A&gt;Improvements to label formatting options have required a change to the &lt;STRONG&gt;ENumericFormat&lt;/STRONG&gt; Enum for numeric formatting. ENumericFormat.Decimal_0, ENumericFormat.Decimal_1, ENumericFormat.Decimal_2, ENumericFormat.Decimal_3 have been removed and there is now just ENumericFormat.Decimal. The number of decimal places is determined by the new precision property, which can be passed to the numeric axis, or set directly on the LabelProvider.&lt;/P&gt;
&lt;P&gt;Defaults for the Numeric Axis are ENumericFormat.Decimal with precision 1. To format as integer, use precision = 0;&lt;/P&gt;
&lt;H2&gt;SciChartSurface.create&lt;/H2&gt;
&lt;P&gt;&lt;A id=SciChartSurface.create name=SciChartSurface.create&gt;&lt;/A&gt;widthAspect and heightAspect are now passed in an options object, which also allows you to configure many aspects of the surface.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChartSurface.create&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// before&lt;BR&gt;SciChartSurface.create(divElementId: string,&amp;nbsp; widthAspect: number = 0,&amp;nbsp; heightAspect: number = 0);&lt;/P&gt;
&lt;P&gt;// after&lt;BR&gt;SciChartSurface.create(divElementId: string,&amp;nbsp; options?: I2DSurfaceOptions);&lt;/P&gt;
&lt;P&gt;// where&lt;BR&gt;export interface I2DSurfaceOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - the width aspect ratio of the SciChartSurface. By default SciChart will scale to fit the parent Div.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * However if height of the div is not provided it will use width/height aspect ratio to calculate the height. The default ratio is 3/2.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; widthAspect?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - the height aspect ratio of the SciChartSurface. By default SciChart will scale to fit the parent Div.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * However if height of the div is not provided it will use width/height aspect ratio to calculate the height. The default ratio is 3/2.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; heightAspect?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - The theme applied to the SciChartSurface on startup&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks see IThemeProvider for properties which can affect SciChart theme. Two default&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * themes are included out of the box&amp;nbsp; SciChartJSLightTheme and&amp;nbsp;SciChartJSDarkTheme.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Custom themes may be created by implementing&amp;nbsp;IThemeProvider&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme?: IThemeProvider | { type: string | EThemeProviderType; overrides?: IThemePartial };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Allows you to customize the loading elements or animation as part of the HTML page / DOM when a SciChartSurface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * or&amp;nbsp;SciChart3DSurface is loading WebAssembly&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loader?: ISciChartLoader | { type: string; options?: any };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - Prove a layoutManager to customise the axis layout.&amp;nbsp; Use CentralAxesLayoutManager for an easy way to configure central axes.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; layoutManager?: ILayoutManager;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - Padding between the SciChartSurface and its inner elements. Default 10&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; padding?: Thickness;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - Properties of the viewport border (where series are drawn)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; viewportBorder?: TBorder;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - Properties of the canvas border&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; canvasBorder?: TBorder;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;SciChartPieSurface.create&lt;/H2&gt;
&lt;P&gt;&lt;A id=SciChartPieSurface.create name=SciChartPieSurface.create&gt;&lt;/A&gt;Similar change to SciChartSurface.create, aspect options now passed within an options object:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChartSurface.create&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// before&lt;BR&gt;SciChartPieSurface.create(divElementId: string, widthAspect: number = 0, heightAspect: number = 0);&lt;/P&gt;
&lt;P&gt;// after&lt;BR&gt;SciChartPieSurface.create(divElementId: string, options?: IPieSurfaceOptions);&lt;/P&gt;
&lt;P&gt;// where&lt;BR&gt;export interface I2DSurfaceOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - the width aspect ratio of the SciChartPieSurface. By default SciChart will scale to fit the parent Div.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * However if height of the div is not provided it will use width/height aspect ratio to calculate the height. The default ratio is 3/2.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; widthAspect?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - the height aspect ratio of the SciChartPieSurface. By default SciChart will scale to fit the parent Div.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * However if height of the div is not provided it will use width/height aspect ratio to calculate the height. The default ratio is 3/2.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; heightAspect?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Optional - The theme applied to the SciChartPieSurface on startup&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks see IThemeProvider for properties which can affect SciChart theme. Two default&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * themes are included out of the box&amp;nbsp; SciChartJSLightTheme and&amp;nbsp;SciChartJSDarkTheme.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Custom themes may be created by implementing&amp;nbsp;IThemeProvider&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme?: IThemeProvider | { type: string | EThemeProviderType; overrides?: IThemePartial };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - whether this is a pie or donut chart. Default Pie.&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pieType?: EPieType;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - the radius of the hole for a donut chart. */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; holeRadius?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - Whether to animate the chart as it is initially drawn.&amp;nbsp; Default true */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animate?: boolean;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - how the hole radius is interpreted, either absolute, or relative to the total radius */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; holeRadiusSizingMode?: ESizingMode;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - whether to show the legend.&amp;nbsp; Default true */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegend?: boolean;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - whether to animate the appearance of the legend.&amp;nbsp; Default true */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animateLegend?: boolean;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - whether to show checkboxes on the legend.&amp;nbsp; Default false */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegendCheckBoxes?: boolean;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Optional - whether to show series markers on the legend.&amp;nbsp; Default true */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegendSeriesMarkers?: boolean;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Label Formatting&lt;/H2&gt;
&lt;P&gt;&lt;A id=LabelFormatting name=LabelFormatting&gt;&lt;/A&gt;LabelProvider.formatLabel and LabelProvider.formatCursorLabel changed from class method to property. Moreover for LabelProvider.formatLabel last optional parameter was removed.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Label Formatting method changes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypescriptScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Before&lt;BR&gt;export abstract class LabelProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public abstract formatLabel(dataValue: number, format?: ENumericFormat): string; 
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public abstract formatCursorLabel(dataValue: number): string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;}&lt;BR&gt;// After&lt;BR&gt;export type TFormatLabelFn = (dataValue: number) =&amp;gt; string;&lt;/P&gt;
&lt;P&gt;export abstract class LabelProvider {&lt;BR&gt;...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected formatLabelProperty: TFormatLabelFn;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected formatCursorLabelProperty: TFormatLabelFn;&lt;BR&gt;...&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;IThemeProvider additional fields&lt;/H2&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;A id=IThemeProvider name=IThemeProvider&gt;&lt;/A&gt;IThemeProvider additional fields&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * The background color of the loading animation dots,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * which can also be customized by overriding the {@link loader}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationBackground: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * The foreground color of the loading animation dots,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * which can also be customized by overriding the {@link loader}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationForeground: string;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This defines the background/foreground for the loader animation which is shown while loading webassembly.&lt;/P&gt;
&lt;H2&gt;UniformHeatmapDataSeries constructor&lt;/H2&gt;
&lt;P&gt;&lt;A id=UniformHeatmapDataSeries name=UniformHeatmapDataSeries&gt;&lt;/A&gt;UniformHeatmapDataSeries constructor now takes an options parameter of type IUniformHeatmapSeriesOptions which contains all the parameters which used to be passed individually.&amp;nbsp; This is to support the new bulder api.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;UniformHeatmapDataSeries constructor&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Before&lt;BR&gt;const heatmap2dArrayValues = new Array&amp;lt;number[]&amp;gt;(arraySize);&lt;BR&gt;const heatmapSeries = new UniformHeatmapDataSeries(wasmContext, 0, 1, 0, 1, heatmap2dArrayValues);&lt;/P&gt;
&lt;P&gt;// After&lt;BR&gt;const heatmapSeries = new UniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStart: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStart: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: heatmap2dArrayValues&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Shader effects&lt;/H2&gt;
&lt;P&gt;&lt;A id=Shadereffects name=Shadereffects&gt;&lt;/A&gt;There are now seperate classes for GlowEffect and ShadowEffect, which extend the now abstract ShaderEffect.&amp;nbsp; These have options interfaces specific to the effect:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GlowEffect and ShadowEffect Options&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;export interface IGlowEffectOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; intensity?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; range?: number;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;export interface IShadowEffectOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; range?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; brightness?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; offset?: Point;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Hit-Test&lt;/H2&gt;
&lt;P&gt;&lt;A id=Hit-Test name=Hit-Test&gt;&lt;/A&gt;Hit Test function signature has changed.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest changes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Before&lt;BR&gt;hitTest(point: Point, logic: ENearestPointLogic, hitTestRadius: number, interpolate: boolean): HitTestInfo;&lt;/P&gt;
&lt;P&gt;// After&lt;BR&gt;hitTest(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Additional functions have been added to handle different cases of hit-testing the actual data-points, the series body or to perform a vertical hit-test. Function signatures are below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest functions&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for series body at the specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returning a HitTestInfo type with the results&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by&amp;nbsp;DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTest(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for the data point at the specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returning a HitTestInfo type with the results&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoint(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for the vertical slice at the specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * only X value is taken into account, it is used for CursorModifier and RolloverModifier.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returns a HitTestInfo type with the results,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Only for sorted values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestXSlice(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for the DataPointSelectionModifier. This calls IHitTestProvider.hitTestDataPoint by default.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * The hitTestProvider for the renderableSeries can override this if different behaviour is desired, eg for columSeries we call hitTest instead.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returns a HitTestInfo type with the results,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Only for sorted values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestForDataPointSelectionModifier(x: number, y: number, hitTestRadius: number): HitTestInfo;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In addition, due to DPI handling in SciChart.js v2.x if you subscribe to events on the domCanvas2d, these must be scaled before passing to Hit-Test.&amp;nbsp; For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;sciChartSurface.domCanvas2D.addEventListener("mousedown", (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newHitTestsList: HitTestInfo[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dpiScaledPoint = new Point(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mouseEvent.x * DpiHelper.PIXEL_RATIO, // DpiHelper.PIXEL_RATIO = 1 by default,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mouseEvent.y * DpiHelper.PIXEL_RATIO&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ); // = 2 for retina displays. Also changes as user zooms browser&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.asArray().forEach(rs =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (rs.hitTestProvider) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = rs.hitTestProvider.hitTest(dpiScaledPoint.x, dpiScaledPoint.y, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;RolloverModifier&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A id=RolloverModifier name=RolloverModifier&gt;&lt;/A&gt;MarkerSvgAnnotation renamed to RolloverMarkerSvgAnnotation 
&lt;LI&gt;ITooltipSvgAnnotationOptions renamed to IRolloverTooltipSvgAnnotationOptions 
&lt;LI&gt;TooltipSvgAnnotation renamed to RolloverTooltipSvgAnnotation 
&lt;LI&gt;isVerticalChart removed. This is now calculated based on the orientation of the x Axis. If you have multiple xAxes, set the xAxisId property. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;tooltipTemplate API changed:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;tooltipTemplate API change&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// before&lt;BR&gt;renderableSeries.rolloverModifierProps.tooltipTemplate = (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: string,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipProps: RolloverModifierRenderableSeriesProps,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfo: SeriesInfo,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSize: (width: number, height: number) =&amp;gt; void&lt;BR&gt;) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { tooltipTitle, tooltipColor, tooltipTextColor } = tooltipProps;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSize(width, height);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // tooltip template code&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// after&lt;BR&gt;renderableSeries.rolloverModifierProps.tooltipTemplate = (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: string,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfo: SeriesInfo,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rolloverTooltip: RolloverTooltipSvgAnnotation&lt;BR&gt;) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { tooltipTitle, tooltipColor, tooltipTextColor } = rolloverTooltip.tooltipProps;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rolloverTooltip.updateSize(width, height);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // tooltip template code&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;CursorModifier&lt;/H2&gt;
&lt;P&gt;&lt;A id=CursorModifier name=CursorModifier&gt;&lt;/A&gt;CursorModifier.axisLabelsStroke renamed to CursorModifier.axisLabelStroke&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CursorModifier changes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Before&lt;BR&gt;const cursorModifier = new CursorModifier();&lt;BR&gt;cursorModifier.axisLabelsStroke = "#00FF00";&lt;/P&gt;
&lt;P&gt;// After&lt;BR&gt;const cursorModifier = new CursorModifier();&lt;BR&gt;cursorModifier.axisLabelStroke = "#00FF00";&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;&lt;A id=Ignorefs name=Ignorefs&gt;&lt;/A&gt;Ignore fs should be removed or updated&amp;nbsp;in webpack.config&lt;/H2&gt;
&lt;P&gt;In v1 it was recommended that webpack.config include&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;new webpack.IgnorePlugin(/(fs)/)&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;This is no longer required due to upgrades to our build, and may cause problems (especially with the filters api) as it ignores &lt;STRONG&gt;any&lt;/STRONG&gt; file containing the string fs.&amp;nbsp; If you do still need to ignore the fs package specifically (as some packages depend on it for node.js support but this breaks when in a browser), then use this line:&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;new webpack.IgnorePlugin(/^fs$/);&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;TGridLineStyle.strokeDasharray renamed&lt;/H2&gt;
&lt;P&gt;&lt;A id=TGridLineStyle name=TGridLineStyle&gt;&lt;/A&gt;TGridLineStyle.strokeDasharray renamed to TGridLineStyle.strokeDashArray&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;TGridLineStyle changes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Before&lt;BR&gt;xAxis.majorGridLineStyle.strokeDasharray = [4, 2];&lt;/P&gt;
&lt;P&gt;// After&lt;BR&gt;xAxis.majorGridLineStyle.strokeDashArray = [4, 2];&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;TEasing type renamed&lt;/H2&gt;
&lt;P&gt;Renamed from &lt;STRONG&gt;TEasing&lt;/STRONG&gt; to &lt;STRONG&gt;TEasingFn&lt;/STRONG&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;A id=TEasing name=TEasing&gt;&lt;/A&gt;TEasing changes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Before&lt;BR&gt;import { TEasing } from "../../Core/Animations/EasingFunctions";&lt;/P&gt;
&lt;P&gt;// After&lt;BR&gt;import { TEasingFn } from "../../Core/Animations/EasingFunctions";&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;ICandlestickSeriesOptions renamed&lt;/H2&gt;
&lt;P&gt;&lt;A id=ICandlestickSeriesOptions name=ICandlestickSeriesOptions&gt;&lt;/A&gt;Renamed from &lt;STRONG&gt;ICandlestickSeriesOptions&lt;/STRONG&gt;&amp;nbsp;to &lt;STRONG&gt;ICandlestickRenderableSeriesOptions&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;RubberBandSvgRect renamed&lt;/H2&gt;
&lt;P&gt;&lt;A id=RubberBandSvgRect name=RubberBandSvgRect&gt;&lt;/A&gt;Renamed from &lt;STRONG&gt;RubberBandRect&lt;/STRONG&gt; to &lt;STRONG&gt;RubberBandSvgRect&lt;/STRONG&gt; and moved from src/Charting/Visuals/RubberBandRect/RubberBandRect.ts to src/Charting/Visuals/RubberBandSvgRect/RubberBandSvgRect.ts&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="6b01d372-9324-434b-bab8-967c60bd4154" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a47da469-f175-48bb-a132-1e3dd24431a7" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="5f9d6fa0-fc85-47ca-a8cb-6a71fa668413" Status="New Topic" CreatedOn="2022-01-28T16:04:11.2315622Z" ModifiedOn="2022-01-28T17:53:01.2384309Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="WhatsNewInSciChart2_1" BuildFlags="">
            <Title m="2022-01-28T16:04:28.2570495Z">What's New in SciChart.js SDK v2.1</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-01-28T17:52:22.3730167Z">&lt;P&gt;SciChart.js v2.1 is minor update from&amp;nbsp;&lt;A href="a47da469-f175-48bb-a132-1e3dd24431a7"&gt;version 2.0&lt;/A&gt;. Our team has worked hard to perform a deep analysis of chart performance, and make several optimisations that have resulted in huge speed improvements to chart rendering.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v2-1-released/" target=_blank&gt;scichart.com/scichart-js-v2-1-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Major Performance Improvements&lt;/H2&gt;
&lt;P&gt;For big-data applications or dynamically updating charts, a large bottleneck was simply the time to create and update data.&lt;/P&gt;
&lt;P&gt;By looking at memory optimisation and taking advantage of low-level code optimisations in WebAssembly we’ve improved the following DataSeries operations significantly, which results in much faster, more responsive charts. Especially noticeable in dynamic or real-time contexts.&lt;/P&gt;
&lt;TABLE dir=ltr cellSpacing=0 cellPadding=7 width=583 border=1&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD bgColor=black vAlign=top width="26%"&gt;
&lt;P&gt;&lt;B&gt;DataSeries Operation&lt;/B&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;B&gt;Before&lt;/B&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;B&gt;After&lt;/B&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;B&gt;Improvement&lt;/B&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="26%"&gt;
&lt;P&gt;Create a DataSeries with 1Million Datapoints&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;35ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;10ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;3.5x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=black vAlign=top width="26%"&gt;
&lt;P&gt;Get XRange for DataSeries with unsorted data&lt;/P&gt;
&lt;P&gt;(required for auto ranging)&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;550ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;3.4ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;161x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="26%"&gt;
&lt;P&gt;Optimising DataSeries.clear() &amp;amp; append() with 1M datapoints&lt;/P&gt;
&lt;P&gt;(required for dynamically updating charts)&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;386ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;4.68ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;82x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=black vAlign=top width="26%"&gt;
&lt;P&gt;Optimising DataSeries.getNativeIndices() with 1M datapoints&lt;/P&gt;
&lt;P&gt;(required for candlestick charts)&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;367ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;22ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;16x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="26%"&gt;
&lt;P&gt;DataSeries.insertRange() with 1k datapoints&lt;/P&gt;
&lt;P&gt;(required for prepending or inserting data)&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;&amp;gt;132ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;0.69ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=#f7f6f2 vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;191x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD bgColor=black vAlign=top width="26%"&gt;
&lt;P&gt;DataSeries.removeRange() with 1k datapoints&lt;/P&gt;
&lt;P&gt;(required for removing a block of data)&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;730ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;0.33ms&lt;/P&gt;&lt;/TD&gt;
&lt;TD bgColor=black vAlign=top width="25%"&gt;
&lt;P&gt;&lt;FONT color=#1c8354 size=4&gt;2,212x faster!&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Datapoint Resampling&lt;/H2&gt;
&lt;P&gt;New to version 2.1, SciChart.js uses resampling of data to ensure the minimum viable data-set is displayed on the screen. Resampling is intended to be &lt;STRONG&gt;visually lossless, and automatic&lt;/STRONG&gt;. It occurs for RenderableSeries before the series is rendered, if required.&lt;/P&gt;
&lt;P&gt;Resampling methods make assumptions about the data in order to produce a valid output. SciChart.js provides variety of the resampling modes internally, and auto detects the most suitable one.&lt;/P&gt;
&lt;P&gt;Data-point resampling results in large performance improvements to chart types in SciChart.js. See below for a comparison of version 2.0 and version 2.1 chart rendering speed.&lt;/P&gt;
&lt;P&gt;&lt;IMG src="https://abtsoftware-wpengine.netdna-ssl.com/wp-content/uploads/2022/01/image-1.png"&gt;&lt;/P&gt;
&lt;H2&gt;Performance Comparison vs. HighCharts, Chart.js, Plotly.js&lt;/H2&gt;
&lt;P&gt;As our release focussed on performance improvements, we've also taken the time to build and run a set of demanding test cases vs. popular chart libraries, including HighCharts, Chart.js, Plotly.js. &lt;/P&gt;
&lt;P&gt;Read more at the article:&amp;nbsp;&lt;A href="https://www.scichart.com/javascript-chart-performance-comparison/" target=_blank&gt;SciChart.js - the Fastest JavaScript Chart Library available&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/javascript-chart-performance-comparison/" target=_blank&gt;&lt;IMG border=0 alt="SciChart.js - the Fastest JavaScript Library Available" src="images/WhatsNew21_FastestLibraryAvailable.png"&gt;&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Multiple minor enhancements&lt;/H2&gt;
&lt;P&gt;In SciChart.js v2.1 we've also added multiple minor enhancements including&lt;STRONG&gt; over 40 bug fixes and minor changes or improvements&lt;/STRONG&gt; to the library. &lt;/P&gt;
&lt;P&gt;Please see the &lt;A href="https://www.scichart.com/scichart-js-v2-1-released/" target=_blank&gt;full release note&lt;/A&gt; for more details.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks>
              <TopicLink Id="3d51df73-d2a9-45dc-99ec-a92d1febb028" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/scichart-js-v2-1-released/" TargetWindow="_blank" BuildFlags="">
                <Title m="2022-01-28T17:43:47.9728575Z">SciChart.js v2.1 Release Note</Title>
                <Category />
              </TopicLink>
              <TopicLink Id="cccbc262-c0de-436b-ba34-fae7a1e82408" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a47da469-f175-48bb-a132-1e3dd24431a7" BuildFlags="">
                <Title />
                <Category />
              </TopicLink>
              <TopicLink Id="6b5631ee-614b-432a-8664-914f86559ef0" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/scichart-js-v2-0-released/" TargetWindow="_blank" BuildFlags="">
                <Title m="2022-01-28T17:53:01.2075139Z">SciChart.js v2.0 Release Note</Title>
                <Category />
              </TopicLink>
            </TopicLinks>
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="56c7208c-32d5-4b8f-9954-21b15fb27692" Status="New Topic" CreatedOn="2022-05-20T08:28:52.8281096Z" ModifiedOn="2022-05-20T14:27:14.8446641Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What's New in SciChart.js SDK v2.2" BuildFlags="">
            <Title m="2022-05-20T08:29:46.3976338Z">Whats' New in SciChart.js SDK v2.2</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-05-20T14:27:14.8446641Z">&lt;P&gt;SciChart.js v2.2 is minor update which is backward compatible to &lt;A href="a47da469-f175-48bb-a132-1e3dd24431a7"&gt;version 2.0&lt;/A&gt;. Our team has added lots of minor features to improve SciChart, including more styling options, pie chart enhancements, new chart types and more.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v2-2-released/" target=_blank&gt;scichart.com/scichart-js-v2-2-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;New Oil &amp;amp; Gas Showcase Demo&lt;/H2&gt;
&lt;P&gt;We've created a showcase demo showing how SciChart.js can be used in Oil &amp;amp; Gas dashboards. Incorporating a vertical chart with many different visualisations, a trellis chart and 3d chart, this dashboard has a working code sample to show the flexibility of SciChart.js.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/WhatsNew_OilAndGasDemo.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more at the blog post:&amp;nbsp;&lt;A href="https://blog.scichart.com/datavisualization-in-oil-gas-in-javascript-wpf/" target=_blank&gt;DataVisualization in the Oil &amp;amp; Gas Industry&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;New Chart Types&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;We've added an&amp;nbsp;&lt;A href="9433151a-2281-47ec-8919-d5e43d44731b"&gt;Impulse Chart Type&lt;/A&gt; (otherwise known as Stem Chart or Impulse Chart) &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;We've also added an&amp;nbsp;&lt;A href="e5bcd0f1-0a90-4c63-a9ec-dc43c1846fbe"&gt;Error Bars type&lt;/A&gt; with Horizontal &amp;amp; Vertical Error bars, with variable errors per data-point &lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Multiple improvements to pie charts&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;Pie/Donut Animated Updates 
&lt;LI&gt;Pie/Donut Label Formatting 
&lt;LI&gt;Pie/Donut Styling &amp;amp; Configuration Improvements &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read more at the&amp;nbsp;&lt;A href="d9007373-3f18-4bbd-be21-86a97872b4ee"&gt;Pie Chart Documentation&lt;/A&gt; page&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Stacked Mountain Chart has PaletteProvider&lt;/H2&gt;
&lt;P&gt;Seen in the&amp;nbsp;&lt;A href="https://blog.scichart.com/datavisualization-in-oil-gas-in-javascript-wpf/" target=_blank&gt;Oil &amp;amp; Gas demo above&lt;/A&gt;, the Stacked Mountain chart now supports&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;, allowing you to colour individual segments based on a rule. &lt;/P&gt;
&lt;H2&gt;Axis Improvements&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;Axis can now set&amp;nbsp;&lt;A href="8deddadd-6171-496a-ab20-7332232c4c16"&gt;Background Color&lt;/A&gt; 
&lt;LI&gt;You can&amp;nbsp;&lt;A href="49949657-d7c3-48c7-93a2-2bb17f8dd8c1"&gt;Draw Series behind the axis&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Other minor improvements&lt;/H2&gt;
&lt;P&gt;Lots of minor improvements! Including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Allow placing tooltip outside chart with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#placementdivid"&gt;placementDivId&lt;/A&gt;
&lt;LI&gt;Get notification on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;series.isVisibleChanged&lt;/A&gt;, or legend row&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/legendmodifier.html#legenditemcheckedchanged"&gt;checkbox checked changed&lt;/A&gt;.
&lt;LI&gt;Added easy way to load wasm from CDN with&amp;nbsp;&lt;A href="e09e931b-15a2-4e8f-ac78-4c2822394a62"&gt;SciChartSurface.useWasmFromCDN()&lt;/A&gt;
&lt;LI&gt;Enabled SciChart.js to work in the shadow DOM by passing a DOM element to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt;
&lt;LI&gt;Allow CategoryAxis to render charts without data by setting&amp;nbsp;&lt;A href="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8"&gt;defaultXStart, defaultXStep&lt;/A&gt;.
&lt;LI&gt;Added a&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;NumericDateTimeAxis&lt;/A&gt; type 
&lt;LI&gt;Multiple bug fixes and improvements &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v2-2-released/" target=_blank&gt;scichart.com/scichart-js-v2-2-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="048e8b8c-3acd-4ad6-93c6-034a8d79b14a" Status="New Topic" CreatedOn="2022-08-15T16:39:16.1088865Z" ModifiedOn="2023-06-20T16:28:15.0473398Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What's New in SciChart.js SDK v3.0" BuildFlags="">
            <Title m="2022-12-31T00:11:48.0839808Z">What's New in SciChart.js SDK v3.0</Title>
            <ContentsTitle m="2022-12-31T00:11:50.779597Z">What's New in SciChart.js SDK v3.0</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-06-20T16:28:15.0473398Z">&lt;P&gt;SciChart.js v3.0 is major update to our JavaScript Chart Library which is mostly backward compatible to &lt;A href="a47da469-f175-48bb-a132-1e3dd24431a7"&gt;version 2.0&lt;/A&gt;. Our team has added lots of features to improve SciChart, including text data labels, text series, non-uniform heatmap, subcharts (multi-charts API) performance improvements and more.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-0-released" target=_blank&gt;scichart.com/scichart-js-v3-0-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;nvvpFmWh0Yo&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Complete re-work of the SciChart Brand, Examples and Styles&lt;/H2&gt;
&lt;P&gt;We've completely re-worked the SciChart styles in-line with our new branding. All 85 JavaScript Chart examples have been updated to look better, demonstrate features and give you a kick-start when creating new projects. The new-look examples are simply stunning, and give you a glimpse of what is possible with SciChart.js.&lt;/P&gt;
&lt;H2&gt;New Native Text Rendering engine&lt;/H2&gt;
&lt;P&gt;We've created a new&amp;nbsp;&lt;A href="e5a3627c-906d-4bb5-a81d-981df6e3e96b"&gt;native text rendering engine&lt;/A&gt; which enables features such as Series Data Labels and Text Series. Engineered entirely in WebGL and WebAssembly, our text rendering engine brings quality improvements, performance improvements, language improvements (such as ability to handle RTL text, Japanese text, Chinese, Arabic and Korean text).&lt;/P&gt;
&lt;P&gt;See&amp;nbsp;&lt;A href="3616f94c-1224-4896-8306-d6a17af11082"&gt;Native Text Axis Labels&lt;/A&gt; for details on how to enable this for axes.&lt;/P&gt;
&lt;H2&gt;DataLabels (Text Labels) API&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225"&gt;Data-labels API&lt;/A&gt; allows you to place custom text labels, or formatted data-values over charts. Powered by WebGL, data labels are fast and tens of thousands of labels may be added to charts in a performant manner.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Find out more plus links to examples, demos at &lt;A href="https://www.scichart.com/scichart-js-v3-0-released" target=_blank&gt;scichart.com/scichart-js-v3-0-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;FastTextRenderableSeries&lt;/H2&gt;
&lt;P&gt;A new series type that handles only text. This may be used to place large amounts of text labels into a chart at specific X,Y locations.&amp;nbsp; See&amp;nbsp;&lt;A href="e99914e3-6526-410c-a0fa-05c4f1d90573"&gt;The Text Series Type&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;SubCharts API&lt;/H2&gt;
&lt;P&gt;A new API allowing you to place charts in charts, link charts efficiently on a single WebGL surface and more.&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Find out what it can do at the&amp;nbsp;&lt;A href="e7d484ca-b11c-424e-9d88-0afbabc17bde"&gt;SubCharts API Documentation&lt;/A&gt;.&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;Non-Uniform Heatmap type &amp;amp; Heatmap Legend Control&lt;/H2&gt;
&lt;P&gt;A new series type to complement the uniform heatmap: see&amp;nbsp;&lt;A href="bfe9f9bd-2e26-4aac-bd61-e965fe38c8f6"&gt;The Non-Uniform Heatmap Chart Type&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Demos for this and more at &lt;A href="https://www.scichart.com/scichart-js-v3-0-released" target=_blank&gt;scichart.com/scichart-js-v3-0-released&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling and Themeing Impovements&lt;/H2&gt;
&lt;P&gt;We've added a new Navy Theme and Auto Colouring to the SciChart.js library.&amp;nbsp;Now you don't have to be a graphic designer to get incredible looking charts!&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Performance Improvements&lt;/H2&gt;
&lt;P&gt;Multiple performance improvements have been made in this release, including micro-optimisations throughout the code, specific improvements to heatmap rendering plus native WebGL text for axis labels, annotations and asynchronous label drawing.&lt;/P&gt;
&lt;H2&gt;Other Minor enhancements&lt;/H2&gt;
&lt;P&gt;Many bugs and minor improvements have been added to the library. Find out more at the release note below.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-0-released/" target=_blank&gt;scichart.com/scichart-js-v3-0-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="7a45fe78-35ce-448b-9754-fc8cd77be464" Status="New Topic" CreatedOn="2023-06-20T14:58:18.7132087Z" ModifiedOn="2023-06-20T16:34:35.4802154Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What's New in SciChart.js SDK v3.1" BuildFlags="">
            <Title m="2023-06-20T14:58:27.0964016Z">What's New in SciChart.js SDK v3.1</Title>
            <ContentsTitle m="2023-06-20T14:58:28.5235792Z">What's New in SciChart.js SDK v3.1</ContentsTitle>
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-06-20T16:34:35.4802154Z">&lt;P&gt;SciChart.js v3.1 is minor update to our JavaScript Chart Library which is backward compatible to &lt;A href="048e8b8c-3acd-4ad6-93c6-034a8d79b14a"&gt;version 3.0&lt;/A&gt;. Our team has added lots of features to improve SciChart, which are detailed below. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-1-released/" target=_blank&gt;scichart.com/scichart-js-v3-1-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;aAcIQL84SDE&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;"Just Works" (no license required) for sandbox sites&lt;/H2&gt;
&lt;P&gt;No license is required for the sandbox environments like Codepen, JSFiddle and codesandbox. SciChart.js “Just Works” with a watermark. This is a step toward Community licensing which we are also working on.&lt;/P&gt;
&lt;H2&gt;Added global exports for npm, index.min.js&lt;/H2&gt;
&lt;P&gt;We’ve also added global exports for npm and an index.min.js for JS delivr CDN. This means:&lt;/P&gt;
&lt;P&gt;All namespaces/imports are now just import { all, the, types } from “scichart”, for example: &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports when using npm&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// New syntax from 3.1 or later!&lt;BR&gt;// import { all, the, things } from "scichart"&lt;BR&gt;import {&lt;BR&gt;&amp;nbsp; SciChartSurface,&lt;BR&gt;&amp;nbsp; NumericAxis,&lt;BR&gt;&amp;nbsp; FastLineRenderableSeries,&lt;BR&gt;&amp;nbsp; XyDataSeries&lt;BR&gt;} from "scichart";&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When including SciChart.js from CDN you just need to add a script reference to &lt;A href="https://cdn.jsdelivr.net/npm/scichart/index.min.js"&gt;https://cdn.jsdelivr.net/npm/scichart/index.min.js&lt;/A&gt; and import your types like this&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports when using script&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Syntax for importing types when using vanilla JS, no npm&lt;BR&gt;const { &lt;BR&gt;&amp;nbsp; SciChartSurface,&lt;BR&gt;&amp;nbsp; NumericAxis,&lt;BR&gt;&amp;nbsp; FastLineRenderableSeries,&lt;BR&gt;&amp;nbsp; XyDataSeries &lt;BR&gt;} = SciChart;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Thus the imports are unified between npm and non-npm applications and greatly simplified. No more worrying about what the import is or searching the documentation to find an import path. &lt;/P&gt;
&lt;H2&gt;Updated 60+ documentation pages to include Builder API and codepen embeds. &lt;/H2&gt;
&lt;P&gt;There are over 200 hand-written documentation pages for SciChart.js, 80 JavaScript chart examples and thousands of auto-generated TypeDoc pages showing how to use our library. &lt;/P&gt;
&lt;P&gt;We’ve started working through these and updated around 60 out of 200 of the documentation pages to have better example code, re-checked the example code and ensured each contains a JavaScript example plus a builder-API example. Plus, a codepen embedded example which you can edit in browser.&lt;/P&gt;
&lt;H2&gt;Updated all demos to include contextual documentation and codesandbox links&lt;/H2&gt;
&lt;P&gt;If you head over to&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;demo.scichart.com&lt;/A&gt; and click on any SciChart.js demo, you’ll now see a new toolbar at the top of the page. &lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Click on the Docs button to view contextual documentation for this demo. 
&lt;LI&gt;Click on the Github button to view contextual source-code for this demo. 
&lt;LI&gt;Click on the Code Sandbox button to see some real magic. This extracts the specific source-code for this example into a stand-alone codesandbox.io project.&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Added a ChartTitle property to SciChartSurface&lt;/H2&gt;
&lt;P&gt;Many of our examples at&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;demo.scichart.com&lt;/A&gt; used Annotations to create a pseudo chart title. In SciChart.js v3.1 we’ve added a chart title property. All the demos have been updated to reflect this. &lt;/P&gt;
&lt;P&gt;See the&amp;nbsp;&lt;A href="ebbbff3e-8993-4281-8791-6c8eaad5c318"&gt;Chart Titles&lt;/A&gt; documentation page for more information.&lt;/P&gt;
&lt;H2&gt;CustomChartModifier, CustomChartModifier3D&lt;/H2&gt;
&lt;P&gt;A quick &amp;amp; Simple change, we’ve added a type CustomChartModifier2D and CustomChartModifier3D so you can create custom modifiers in codepen, or when using the index.min.js (not npm). The reason for this is ChartModifierBase type is abstract, and cannot be instantiated in vanilla javascript. &lt;/P&gt;
&lt;H2&gt;Performance Optimisations&lt;/H2&gt;
&lt;P&gt;Big Data Performance has been improved yet again by optimising two things: &lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;We've adjusted sanity checks in the SciChart.js library to allow loading big-data charts 50% - 100% faster
&lt;LI&gt;We've cached Axis titles and enabled Native-text on axis titles to improve a performance bottleneck&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Other Minor enhancements&lt;/H2&gt;
&lt;P&gt;Many bugs and minor improvements have been added to the library. Find out more at the release note below.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-1-released/" target=_blank&gt;scichart.com/scichart-js-v3-1-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="bddab365-84a3-44b1-a3f5-10ef3d2136c1" Status="New Topic" CreatedOn="2023-08-01T15:57:19.7770218Z" ModifiedOn="2023-08-02T15:01:46.7731626Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="WhatsNewSciChartJs3-2" BuildFlags="">
            <Title m="2023-08-01T15:57:41.2929299Z">What's New in SciChart.js SDKv 3.2</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2023-08-02T15:01:46.7731626Z">&lt;P&gt;SciChart.js v3.2 is minor update to our JavaScript Chart Library which is backward compatible to &lt;A href="048e8b8c-3acd-4ad6-93c6-034a8d79b14a"&gt;version 3.0&lt;/A&gt;. Our team has added lots of features to improve SciChart, which are detailed below.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/" target=_blank&gt;scichart.com/scichart-js-v3-2-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;Q52iKCn89mY&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Version 3.2 at a glance&lt;/H3&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-1"&gt;Community Licensing&lt;/A&gt;! 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-2"&gt;DataSeries FIFO (First in first out) mode&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-3"&gt;DataSeries FIFO-sweeping mode&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-4"&gt;DataSeries initialize with capacity&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-5"&gt;Series PointMarker: lastPointOnly mode&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-6"&gt;Significant WebAssembly memory improvements&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-7"&gt;Memory leak debugging tools&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-8"&gt;Optional delete on clear/remove from collections&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-9"&gt;Allow configuring WebGL Buffer sizes in low-memory environments&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-10"&gt;2D/3D Touch Interaction improvements&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-11"&gt;3D Point-Line chart (PointLineRenderableSeries3D)&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-12"&gt;3D Tooltips (TooltipModifier3D)&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-13"&gt;3D Pinch Zoom&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-14"&gt;Allow Annotations below Gridlines&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-15"&gt;New Custom Manual Legend control&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-16"&gt;Allow rotating Axis Titles&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-17"&gt;Update to Emscripten EMSDK v3.1 and Clang 17&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-18"&gt;Reduction in wasm module file size&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-19"&gt;Faster wasm module initialization&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-20"&gt;More Documentation Improvements&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-21"&gt;Multiple bugs fixed&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/#feature-22"&gt;Multiple New Examples created&lt;/A&gt; &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read the full release note at&amp;nbsp;&lt;A href="https://www.scichart.com/scichart-js-v3-2-released/" target=_blank&gt;scichart.com/scichart-js-v3-2-released&lt;/A&gt;!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
      <TopicCategory Id="36406a57-adda-4a2b-8a37-9d11942994e5" AutoIndex="false">
        <Caption m="2020-08-03T14:43:12.5826559Z">SciChart JS 2D Charts</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="4815323b-3bf9-4ed9-be5a-9313e5001efe" AutoIndex="false">
            <Caption m="2020-08-03T14:43:19.7581353Z">SciChart JS Basics</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="c66138c0-4f3e-48cb-9660-bb30cd6e2d13" Status="New Topic" CreatedOn="2016-08-04T06:56:56.504338Z" ModifiedOn="2023-03-11T08:52:27.9663585Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChartSurface" BuildFlags="">
                <Title m="2019-02-11T16:46:17.3685252Z">The SciChartSurface Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-11T08:52:27.9663585Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Are you new to SciChart? Check out our most popular pages to get started below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;SciChart.js Vanilla JavaScript Tutorials&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;The SciChartSurface Type&lt;/A&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;Series or Chart Types&lt;/A&gt; 
&lt;LI&gt;&lt;A href="14ab8b3e-55c7-48b9-80e0-bb545387accb"&gt;Axis Types and Configuration&lt;/A&gt; 
&lt;LI&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;Zooming &amp;amp; Panning&lt;/A&gt; 
&lt;LI&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;Tooltips&lt;/A&gt; 
&lt;LI&gt;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations and Markers&lt;/A&gt; 
&lt;LI&gt;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Styling and Themeing&lt;/A&gt; 
&lt;LI&gt;&lt;A href="01b31f4f-bced-419a-a232-e11ae17a7255"&gt;3D charts Basics&lt;/A&gt;&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;The basics of the SciChartSurface Type&lt;/H2&gt;
&lt;P&gt;The root 2D chart view is called the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt;. This is the JavaScript chart&amp;nbsp;control you will be adding to your applications wherever you need a chart. You can add more than one SciChartSurface to an HTML page, you can configure them independently, and you can link them together.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt; has a number of properties and functions which allow you to configure and control the chart.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Info about the properties and functions&amp;nbsp;available can be found at the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;&lt;STRONG&gt;TypeDoc API Documentation for SciChart&lt;/STRONG&gt;&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Series or Chart Types&lt;/H3&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt; has collections of&amp;nbsp;RenderableSeries (see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt;), which form the series or chart types on the chart. Each RenderableSeries must have a DataSeries&amp;nbsp;(see&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries types&lt;/A&gt;) which defines the data for that chart type.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartBasics_RenderableSeriesUml.png"&gt;&lt;/P&gt;
&lt;P&gt;Several RenderableSeries types are available in SciChart, including&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Charts&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Charts&lt;/A&gt; 
&lt;LI&gt;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;Column Charts&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;Mountain Charts&lt;/A&gt; 
&lt;LI&gt;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;Band Charts&lt;/A&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;LI&gt;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;Candlestick Charts&lt;/A&gt; 
&lt;LI&gt;&lt;A href="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d"&gt;Ohlc Charts&lt;/A&gt; and more. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information about chart types in SciChart, head over to the&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries API documentation&lt;/A&gt; or see our&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Axis and Axis Types&lt;/H3&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt; has a collection of X-Axis and&amp;nbsp;Y-Axis (see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#xaxes"&gt;sciChartSurface.xAxes&lt;/A&gt; collection). Each SciChartSurface can have unlimited, multiple X and Y Axis. SciChart is unique in that you can place axis on the left, right, top, bottom, but&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;you can also rotate the chart&lt;/A&gt; to have an XAxis on the left and YAxis on the top. It is this configurability which gives SciChart it's edge over other charting libraries.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartBasics_AxisUml.png"&gt;&lt;/P&gt;
&lt;P&gt;A few axis types are available in SciChart, such as&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Value Axis and Category Axis&lt;/A&gt;. Axis may be&amp;nbsp;configured by&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;setting gridline interval&lt;/A&gt;, gridline styling, titles,&amp;nbsp;labels and more. &amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information about Axis types and configuration in SciChart, head over to the&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis API documentation&lt;/A&gt; or see our&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Annotations and Markers&lt;/H3&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;has a collection of Annotations (see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#annotations"&gt;sciChartSurface.annotations&lt;/A&gt;&amp;nbsp;collection). Annotations are markers (text, labels, lines, custom shapes) which can be placed arbitrarily over the chart (&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;see types of annotation here&lt;/A&gt;), independent of chart types (series) or data. As the chart zooms and pans, the annotations move with the chart, however there is also an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt; property on Annotations which allows you to place watermarks, or dock annotations to the left, right, top, bottom or centre of a chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartBasics_AnnotationsUml.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information about Annotations types in SciChart, head over to the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotations API documentation&lt;/A&gt; or see our&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Interaction - Zooming, Panning and Tooltips&lt;/H3&gt;
&lt;P&gt;Zooming, Panning, interaction such as Tooltips and Legends are provided by&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifiers&lt;/A&gt;. Several modifiers exist out of the box such as the&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833"&gt;RubberBandXyZoomModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier&lt;/A&gt;. Tooltips and Legends are also provided by modifiers - see the&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="84ac3103-a531-43bc-8546-f275d91be35b"&gt;LegendModifier&lt;/A&gt;. You can also create your own modifiers and handle mouse interactions and provide custom behaviours to the chart using this powerful and flexible API.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartBasics_ModifiersUml.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information about Chart Modifier types&amp;nbsp;in SciChart, head over to the&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifier API documentation&lt;/A&gt; or see our&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Styling and Themeing&lt;/H3&gt;
&lt;P&gt;All SciChart chart parts including the SciChartSurface, Axis, Tooltips and more can be styled and themed. SciChart ships with a Light Theme and Dark Theme out of the box. You can customize the colours of a chart to fit the overall style of your application.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information about&amp;nbsp;Styling and Themeing&amp;nbsp;in SciChart, head over to the&amp;nbsp;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Section on Styling in our documentation&lt;/A&gt; or see our&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Declaring a SciChartSurface Instance&lt;/H2&gt;
&lt;P&gt;In&amp;nbsp;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Tutorial #1 - Setting up a Project with SciChart.js&lt;/A&gt;, we walk you through how to setup a new project with npm, webpack and install SciChart. In particular we show you how to copy the wasm files to the build output, a step that is necessary for our WebAssembly WebGL powered charts.&lt;/P&gt;
&lt;P&gt;If you haven't already, go and watch that tutorial quickly so that you can understand the basics of setting up a project with SciChart. The tutorial series is a great way to learn SciChart.&lt;/P&gt;
&lt;P&gt;We also have a comprehensive&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;Examples Suite&lt;/A&gt; with many examples of how to use our Fast, JavaScript Charts.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6fec8d55-2d62-4262-ba23-beca67cfbb06" Status="New Topic" CreatedOn="2022-04-06T20:24:01.267798Z" ModifiedOn="2023-07-10T15:38:06.649642Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChartSurface.create and createSingle" BuildFlags="">
                <Title m="2022-04-06T20:30:22.7446157Z">Creating a new SciChartSurface and loading Wasm</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-10T15:38:06.649642Z">&lt;P&gt;Instantiating a new SciChartSurface (a new Chart) is accomplished with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create" target=_blank&gt;SciChartSurface.create()&lt;/A&gt; function. We have some variations on this function which can be used in different scenarios. We'll go through these as well as WebAssembly (wasm) file loading below.&lt;/P&gt;
&lt;H2&gt;SciChartSurface.create()&lt;/H2&gt;
&lt;P&gt;The first function to create a chart in SciChart.js is simply&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create" target=_blank&gt;SciChartSurface.create()&lt;/A&gt;. This is an &lt;STRONG&gt;asynchronous static function&lt;/STRONG&gt; which places a SciChartSurface (a single chart with X, Y axis and one to many series) into the HTML Dom. It will also load WebAssembly files and initialise our 2D/3D WebGL engine for the first chart load.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChartSurface.create()&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart";&lt;/P&gt;
&lt;P&gt;async function initSciChart1() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assumes a div in your HTML &amp;lt;div id="scichart-div-1"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Now manipulate the SciChartSurface, adding axis, series and more&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When&amp;nbsp;you exit the page and no longer&amp;nbsp;want the chart to draw, call .delete() to free memory&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.delete();&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create" target=_blank&gt;&lt;STRONG&gt;SciChartSurface.create()&lt;/STRONG&gt;&lt;/A&gt; &lt;STRONG&gt;uses a single, shared WebGL context for all chart surfaces on the screen&lt;/STRONG&gt;. This bypasses the maximum number of WebGL contexts and you can have 10, 20, 30 or even 100 charts on an HTML page. The only limit is performance of the browser in rendering the chart surfaces. &lt;STRONG&gt;For a higher performance solution which uses one WebGL context per chart, see&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle" target=_blank&gt;&lt;STRONG&gt;SciChartSurface.createSingle()&lt;/STRONG&gt;&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Ensure that you await SciChartSurface.create().&lt;/STRONG&gt; The return type is an object containing SciChartSurface and its wasmContext (WebAssembly Context) which must be passed to other chart parts on this SciChartSurface.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;SciChartSurface.createSingle()&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle" target=_blank&gt;SciChartSurface.createSingle()&lt;/A&gt; is also an asynchronous static function which places a SciChartSurface into the DOM. However, this variation forces one WebGL context per chart. This can improve performance in multi-chart scenarios but you must obey the WebGL Context Limits per browser. More on this in our&amp;nbsp;&lt;A href="31c1fa0b-34ae-472f-b888-2de129265d50"&gt;Performance Tips&lt;/A&gt; article.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChartSurface.createsingle()&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart";&lt;/P&gt;
&lt;P&gt;async function initSciChart1() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assumes a div in your HTML &amp;lt;div id="scichart-div-1"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.createSingle("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Now manipulate the SciChartSurface, adding axis, series and more&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When you exit the page and no longer want the chart to draw, call .delete() to free memory&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.delete();&lt;BR&gt;}&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Resolving Wasm errors on load&lt;/H3&gt;
&lt;P&gt;If you get an error when loading a SciChartSurface as follows:&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Error&lt;/STRONG&gt;: Could not load SciChart WebAssembly module. Check your build process and ensure that your scichart2d.wasm, scichart2d.data and scichart2d.js files are from the same version&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please see our related article&amp;nbsp;&lt;A href="e09e931b-15a2-4e8f-ac78-4c2822394a62"&gt;Deploying Wasm or WebAssembly Data Files with your app&lt;/A&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ff540896-43a3-48f9-b15c-aee2a7c6109e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="71e0b1e7-703d-4fad-ae36-e8270f9723d6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e09e931b-15a2-4e8f-ac78-4c2822394a62" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e9d2c46d-9646-45d5-aa85-7df56bbcc286" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ec3e3be8-6e1e-4ecc-8578-bf8c62f902a6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2ca70e7c-94ac-4b13-8bb1-d2e3f4aad2bc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c66138c0-4f3e-48cb-9660-bb30cd6e2d13" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="ec3e3be8-6e1e-4ecc-8578-bf8c62f902a6" Status="New Topic" CreatedOn="2022-04-06T20:39:46.2706354Z" ModifiedOn="2022-05-05T09:43:26.2328829Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChartSurface.setRuntimeLicenseKey" BuildFlags="">
                <Title m="2022-04-06T20:40:12.0569273Z">Setting a Runtime License on a SciChartSurface</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-05-05T09:42:58.1547573Z">&lt;P&gt;Another static method which allows you to license SciChart (apply a trial or paid production or test license) is SciChartSurface.setRuntimeLicenseKey()&lt;/P&gt;
&lt;P&gt;All of our instructions for licensing can be found at the page&amp;nbsp;&lt;A href="https://scichart.com/licensing-scichart-js" target=_blank&gt;scichart.com/licensing-scichart-js&lt;/A&gt;. A quick code sample is below. Ensure that you call this function once before any SciChartSurface is shown with a valid runtime key.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChartSurface.setRuntimeLicenseKey&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;&lt;BR&gt;// Set a runtime key in JavaScript once before any SciChartSurface is created&lt;BR&gt;SciChartSurface.setRuntimeLicenseKey("YOUR_RUNTIME_KEY_HERE");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Notes on Licensing&lt;/H3&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;SciChart licensing is two-step.&lt;/STRONG&gt; We have a developer license for localhost and a runtime key for production or staging sites. 
&lt;LI&gt;The Runtime Key controls how your app works on a website (with encoded domain in the key). This applies to production and staging (test) sites. 
&lt;LI&gt;Staging (test) sites will have a watermark. This is expected &amp;amp; by design. Production sites will not have a watermark. 
&lt;LI&gt;Development activity carried out on your local PC will require an activated developer license. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Full instructions how to activate developer licenses, how to add production &amp;amp; test domains to your account and how to include Runtime keys&amp;nbsp;can be found at&amp;nbsp;&lt;A href="https://scichart.com/licensing-scichart-js" target=_blank&gt;scichart.com/licensing-scichart-js&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Resolving Wasm errors on load&lt;/H3&gt;
&lt;P&gt;If you get an error when loading a SciChartSurface as follows:&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Error&lt;/STRONG&gt;: Could not load SciChart WebAssembly module. Check your build process and ensure that your scichart2d.wasm, scichart2d.data and scichart2d.js files are from the same version&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Please see our related article&amp;nbsp;&lt;A href="e09e931b-15a2-4e8f-ac78-4c2822394a62"&gt;Deploying Wasm or WebAssembly Data Files with your app&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b62902b5-db82-4fc1-8ba6-940ced204fe8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c66138c0-4f3e-48cb-9660-bb30cd6e2d13" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="581df26d-642e-46b3-9d0e-c3b5b76ca373" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6fec8d55-2d62-4262-ba23-beca67cfbb06" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="74800cc7-2aec-4260-8254-27785f09b912" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e09e931b-15a2-4e8f-ac78-4c2822394a62" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e09e931b-15a2-4e8f-ac78-4c2822394a62" Status="New Topic" CreatedOn="2022-05-05T09:11:49.9545584Z" ModifiedOn="2023-07-10T15:50:51.5930264Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Deploying Wasm or WebAssembly and Data Files with your app" BuildFlags="">
                <Title m="2022-05-05T09:13:33.0365641Z">Deploying Wasm (WebAssembly) and Data Files with your app</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-10T15:50:51.5930264Z">&lt;H2&gt;Deploying Wasm (WebAssembly) and Data Files with your app&lt;/H2&gt;
&lt;P&gt;If you receive an error message when running your app, you may not have deployed the Wasm (WebAssembly) or data files correctly. Below are some steps on how to resolve that.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Error&lt;/STRONG&gt;: Could not load SciChart WebAssembly module. Check your build process and ensure that your scichart2d.wasm, scichart2d.data and scichart2d.js files are from the same version&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Option 1: Package Wasm &amp;amp; Data Files with WebPack (or similar)&amp;nbsp;&lt;/H3&gt;
&lt;P&gt;In our tutorials and boilerplate examples we show you how to package the Wasm &amp;amp; Data files to load them in a variety of JavaScript frameworks. Find the links to setting up a JavaScript project below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;JS Project framework&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Boilerplate Project or Setup Instructions&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;npm / webpack&lt;/TD&gt;
&lt;TD height=24&gt;&lt;A href="2247b20c-4be1-42cb-ad24-125310703f67"&gt;Tutorial - Setting up a project with WebPack&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Vanilla Javascript (no npm, webpack)&lt;/TD&gt;
&lt;TD&gt;&lt;A href="38afdac0-306d-40d9-b056-b1b8f2a3ae61"&gt;Tutorial - Including SciChart.js in an HTML Page&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;npm / webpack / react&lt;/TD&gt;
&lt;TD height=24&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-react-scichart" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;vue.js&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-vue-scichart" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;nextjs&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-nextjs" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Angular&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-angular-scichart" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;blazor via JS Interop&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-blazor" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Electron&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/demo-electron" target=_blank&gt;code sample&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See more boilerplate examples for JavaScript frameworks&amp;nbsp;at our Github repository:&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox" target=_blank&gt;github.com/abtsoftware/scichart.js.examples&lt;/A&gt; under the Sandbox folder &amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Option 2: Load Wasm from URL with SciChartSurface.configure() or useWasmFromCDN()&lt;/H3&gt;
&lt;P&gt;The easiest way for SciChart.js to load WebAssembly and Data files are to load them from our CDN&amp;nbsp;(see &lt;A href="https://www.jsdelivr.com/package/npm/scichart" target=_blank&gt;jsdelivr.com/package/npm/scichart&lt;/A&gt;). This method is particularly useful in projects or frameworks that don't have a package manager or module bundler.&lt;/P&gt;
&lt;P&gt;To do load SciChart's Wasm and Data file from CDN, call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#configure" target=_blank&gt;SciChartSurface.configure()&lt;/A&gt; once before any SciChartSurface is shown:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure Wasm and Data File URLs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface, libraryVersion } from "scichart";&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Load Wasm &amp;amp; Data files from URL&lt;BR&gt;// This URL can be anything, but for example purposes we are loading from JSDelivr CDN&lt;BR&gt;SciChartSurface.configure({&lt;BR&gt;&amp;nbsp;&amp;nbsp; dataUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${libraryVersion}/_wasm/scichart2d.data`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;wasmUrl: `https://cdn.jsdelivr.net/npm/scichart@3.3.577${libraryVersion}/_wasm/scichart2d.wasm`&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We've packaged a helpful function that automatically loads the latest &amp;amp; correct version of SciChart's Wasm &amp;amp; Data files from CDN. To use this, instead of calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#configure" target=_blank&gt;SciChartSurface.configure()&lt;/A&gt;&amp;nbsp;passing in a URL, call &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#usewasmfromcdn" target=_blank&gt;SciChartSurface.useWasmFromCDN()&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Load Wasm from CDN&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;&lt;BR&gt;export async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Call this once before any SciChartSurface is shown.&lt;BR&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;// This&amp;nbsp;is equivalent to calling SciChartSurface.configure() with the CDN URL (JSDelivr)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface.useWasmFromCDN();&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Loading Wasm for 3D Charts&lt;/H2&gt;
&lt;P&gt;The process for loading Wasm files for 3D Charts is exactly the same, except you must configure SciChart.js to load scichart3d.wasm and scichart3d.data.&lt;/P&gt;
&lt;P&gt;This can be done via Webpack/npm or a bundlers, or by calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#usewasmfromcdn"&gt;SciChart3DSurface.useWasmFromCDN()&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#configure"&gt;SciChart3DSurface.configure()&lt;/A&gt; as before.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Configure Wasm and Data File URLs&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&lt;BR&gt;// Call this once before any SciChart3DSurface is shown to load wasm from CDN&lt;BR&gt;SciChart3DSurface.useWasmFromCDN();&lt;/P&gt;
&lt;P&gt;// Alternatively, if you want to host wasm/data files and serve them locally&lt;BR&gt;// 1.) Ensure you are serving your wasm &amp;amp; data files&lt;BR&gt;// 2.) Call to SciChart3DSurface.configure specifying the relative URL of the files&lt;BR&gt;SciChart3DSurface.configure({&lt;BR&gt;&amp;nbsp;&amp;nbsp; dataUrl: `relative/path/to/scichart3d.data`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;wasmUrl: `relative/path/to/scichart3d.wasm`&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="edbc7aff-3aa5-4bc6-8694-efe3866556f5" AutoIndex="false">
            <Caption m="2016-08-04T09:00:32.249839Z">Axis APIs</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="6b28b463-7489-44c4-b330-f81127d7b7ca" AutoIndex="false">
                <Caption m="2023-03-24T15:39:12.0890957Z">Axis Layout</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="2294a48f-459b-464f-9504-aed96c7fda2a" Status="New Topic" CreatedOn="2017-10-24T17:53:49.4781408Z" ModifiedOn="2023-03-21T20:00:59.4764054Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Alignment - Setting Axis Alignment" BuildFlags="">
                    <Title m="2023-03-21T19:41:13.2592515Z">Secondary and Multiple Axis</Title>
                    <ContentsTitle m="2023-03-21T19:41:19.012894Z">Secondary and Multiple Axis</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-21T20:00:59.4764054Z">&lt;P&gt;&lt;SPAN&gt;SciChart.js supports &lt;STRONG&gt;unlimited, multiple X or Y&amp;nbsp;axis&lt;/STRONG&gt; which can be aligned to the&amp;nbsp;Right, Left, Top, Bottom sides of a chart.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-with-multiple-x-axis&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;SPAN&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-with-multiple-x-axis" target=_blank&gt;Multiple X Axis example&lt;/A&gt; in SciChart.js demo.&lt;/EM&gt;&lt;/P&gt;&lt;/SPAN&gt;
&lt;H2&gt;How to Setup a Chart with Multiple Axis&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN&gt;Axis may be placed by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisalignment"&gt;AxisBase2D.axisAlignment&lt;/A&gt; property.&lt;/SPAN&gt;
&lt;LI&gt;&lt;SPAN&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#id"&gt;Axis.Id&lt;/A&gt; identifies an axis in multi-axis scenarios&lt;/SPAN&gt;
&lt;LI&gt;&lt;SPAN&gt;Series, Annotations and some Modifiers have &lt;STRONG&gt;yAxisId&lt;/STRONG&gt;, &lt;STRONG&gt;yAxisId&lt;/STRONG&gt; properties. These are used to assign chart items to an axis in multi-axis scenarios.&lt;/SPAN&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;There's little more to it than that. However, there are many configurations in SciChart.js which we will get into later. &lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;Here's a worked example:&lt;/SPAN&gt;&lt;/P&gt;&lt;SPAN&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\MultiAxisDemo\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\MultiAxisDemo\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/SPAN&gt;&lt;SPAN&gt;
&lt;P&gt;&lt;SPAN&gt;This code results in the following configuration of axis. Also seen in our&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-with-multiple-x-axis" target=_blank&gt;Multiple Axis Demo&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;/SPAN&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/MultiAxisDemo/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;SPAN&gt;&lt;/SPAN&gt;
&lt;H2&gt;Attaching Chart Series&amp;nbsp;to an&amp;nbsp;Axis&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;Every&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries&lt;/A&gt; (the chart types in SciChart.js e.g.&amp;nbsp;Line,&amp;nbsp;Candlestick,&amp;nbsp;Column) and every&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;Annotation&lt;/A&gt; (Trendlines, text or markers laid over the chart) and some&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifiers&lt;/A&gt; (zoom,&amp;nbsp;pan behaviours) need to be attached to a particular axis.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The link between series and axis is done via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#id"&gt;AxisCore.id&lt;/A&gt;, and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#xaxisid"&gt;BaseRenderableSeries.xAxisId&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#yaxisid"&gt;BaseRenderableSeries.yAxisId&lt;/A&gt; properties.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;With a single X,Y Axis you never have to set these properties as all equal&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#default_axis_id"&gt;DEFAULT_AXIS_ID&lt;/A&gt;. All of them have a default value which attaches the series, annotation or&amp;nbsp;modifier&amp;nbsp;to the default axis.&lt;/P&gt;
&lt;P&gt;However, in a multiple axis scenario, series must be attached to an axis. To do this, ensure that you set the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#xaxisid"&gt;BaseRenderableSeries.xAxisId&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#yaxisid"&gt;BaseRenderableSeries.yAxisId&lt;/A&gt; equal to the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/axiscore.html#id"&gt;YAxis.id&lt;/A&gt; or&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/axiscore.html#id"&gt;XAxis.id&lt;/A&gt; you wish to attach to.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e00ca150-579a-4496-98b9-70c83ca9a7bb" Status="New Topic" CreatedOn="2016-08-04T12:03:28.8688363Z" ModifiedOn="2023-03-22T08:55:56.5860034Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Alignment - Create a Vertical Chart" BuildFlags="">
                    <Title m="2023-03-09T17:05:24.9854873Z">Vertical Charts (Rotate, Transpose Axis)</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-22T08:55:56.5860034Z">&lt;P&gt;It is possible to create&amp;nbsp;Vertical (Rotated) Charts&amp;nbsp;with SciChart. This transposes the entire chart, swapping X-Axis for Y and renders series top to bottom intead of left to right. Tooltips and markers also are transposed to the final effect is like a vertical chart.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-oil-and-gas-dashboard-showcase&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-chart-axis-layout-options" target=_blank&gt;&lt;A href="https://demo.scichart.com/javascript-oil-and-gas-dashboard-showcase" target=_blank&gt;JavaScript Oil and Gas Dashboard showcase&lt;/A&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing a use-case of transposing the X,Y axis to achieve&amp;nbsp;a vertical chart, visualising well drill depth.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;To&amp;nbsp;achieve this, simply set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisalignment"&gt;axis.axisAlignment&lt;/A&gt; to&amp;nbsp;Left or&amp;nbsp;Right for X Axis and&amp;nbsp;Top or&amp;nbsp;Bottom for Y Axis. And that's it - SciChart takes care of the rest:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticalCharts\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticalCharts\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output, where the XAxis is on the left, the YAxis is on the top. The chart series is rotated automatically and now draws top to bottom, rather than left to right.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/VerticalCharts/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2 align=left&gt;Flipping the Axis when Horizontal or Vertical.&lt;/H2&gt;
&lt;P align=left&gt;An Axis may be flipped when horizontal or vertical (coordinates drawn in opposite directions) by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#flippedcoordinates"&gt;AxisCore.flippedCoordinates&lt;/A&gt; property.&lt;/P&gt;
&lt;P align=left&gt;For example, taking the code sample above, and setting &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#flippedcoordinates"&gt;xAxis.flippedCoordinates&lt;/A&gt; = true, we get the following result. Notice the XAxis is now drawn in reverse and the series is now drawn from bottom to top..&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Axis_VerticalChart_Flipped.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Considerations when using Vertical Charts&lt;/H2&gt;
&lt;P align=left&gt;This Flexibility of SciChart allows for some pretty interesting configurations of charts. However, here are some considerations when using a Vertical Chart.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Tooltips,&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;Cursors&lt;/A&gt; and the&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; will also be transposed (rotated 90 degrees). When applying a RolloverModifier the cursor line is usually vertical, but in a vertical chart the cursor line will be horizontal.
&lt;LI&gt;Annotations will behave differently. For example a&amp;nbsp;&lt;A href="46e0aece-c112-40af-a0e8-46c69045fd50"&gt;HorizontalLineAnnotation&lt;/A&gt; will still draw horizontally but instead of setting the y1 property to place on the YAxis, now you must set x1 property to place on the XAxis.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cd9e35cf-56a3-4a4f-9013-0e8a95d970d4" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://demo.scichart.com/javascript-vertical-charts" BuildFlags="">
                        <Title m="2016-08-09T15:53:31.9205838Z">Vertical (Rotated) Chart Example</Title>
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0175a983-0786-4067-b718-206c8c41cd3b" Status="New Topic" CreatedOn="2021-09-16T16:43:43.3790216Z" ModifiedOn="2023-03-22T12:12:08.28649Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Layout - Inside and Central Axis" BuildFlags="">
                    <Title m="2023-03-22T11:41:41.2312464Z">Inner Axis Layout</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-22T12:12:08.28649Z">&lt;P&gt;SciChart allows you to customize how axes are placed around and within the surface.&amp;nbsp; Axes can be placed:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Outside the drawing area,&amp;nbsp;&lt;/STRONG&gt;called Outer Axes.&amp;nbsp;This is the default.&amp;nbsp;The drawing area is reduced to give space for the axes and their labels and titles. 
&lt;LI&gt;&lt;STRONG&gt;Inside the drawing area&lt;/STRONG&gt;,&amp;nbsp;called Inner Axes.&amp;nbsp;The drawing area fills the entire space of the chart.&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Inner axes can either be around the edges of the area, or bound to a coordinate so they appear in the middle of the drawing area.&amp;nbsp;These are referred to as &lt;STRONG&gt;Central Axes&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;Inner Axes&lt;/H2&gt;
&lt;P&gt;To create an Inner axis simply set&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/numericaxis.html#isinneraxis"&gt;isInnerAxis: true&lt;/A&gt; on the axis options:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\InsideAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\InsideAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now the x axis is an inner axis, while the y axis is the default outer axis.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/InsideAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;DrawSeriesBehindAxis property&lt;/H2&gt;
&lt;P&gt;SciChart.js also allows you to draw all chart series behind axis by setting a single flag on the parent SciChartSurface.&lt;/P&gt;
&lt;P&gt;The default behaviour is to draw axis on the outside of the chart area. If you need more space on the chart (if axis are taking up too much space), you can set a single flag to draw the series behind the axis and pull the axis areas inside the chart area:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\SeriesBehindAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/SeriesBehindAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="7f464e73-8ce8-4e87-bad3-8ff794ba8ace" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2294a48f-459b-464f-9504-aed96c7fda2a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2aa714f0-6279-47a0-9880-5e149051808e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1325dcad-b236-42e7-8491-af7a8137d6e7" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="24f56cac-5aec-4aea-af76-878cb8ffd87c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="af7dd07c-7746-4a9d-a9ea-1afc4bb95701" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="49949657-d7c3-48c7-93a2-2bb17f8dd8c1" Status="New Topic" CreatedOn="2022-04-12T18:38:24.4093418Z" ModifiedOn="2023-03-22T11:46:25.5276343Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AxisLayout-DrawingSeriesBehindAxis" BuildFlags="">
                    <Title m="2023-03-09T17:05:37.6512307Z">Axis Layout - Drawing Series Behind Axis</Title>
                    <ContentsTitle m="2023-03-22T11:43:33.6638582Z">Axis Layout - Drawing Series Behind Axis</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-22T11:46:25.5276343Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;This content has been moved. Please see&amp;nbsp;&lt;A href="0175a983-0786-4067-b718-206c8c41cd3b"&gt;Inner Axis Layout&lt;/A&gt; for more details.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="fe3350df-46dc-42eb-8a80-067b90033d4c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0175a983-0786-4067-b718-206c8c41cd3b" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="60612d56-74d4-46c1-bdff-f31e2fe22d57" Status="New Topic" CreatedOn="2022-01-31T18:14:15.9210806Z" ModifiedOn="2023-03-23T17:33:17.8655728Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Layout - Horizontally Stacked Axis" BuildFlags="">
                    <Title m="2023-03-22T11:43:28.9360184Z">Horizontally Stacked Axis Layout</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-23T17:33:17.8655728Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The Stacked Axis feature in SciChart allows you to specify the layout of the axis panel. Normally when you have multiple&amp;nbsp;XAxis, they are stacked vertically. However, you can switch this to stack horizontally. Custom and complex layouts are possible allowing for all kinds of chart scenarios.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the&amp;nbsp;&lt;A href="af7dd07c-7746-4a9d-a9ea-1afc4bb95701"&gt;previous article we demonstrated Vertically Stacked Axis&lt;/A&gt;. This is where you specify a layout strategy for Y Axis on the left or right of the chart to stack axis above each other.&lt;/P&gt;
&lt;H2&gt;Create a Horizontally Stacked Axis Chart&lt;/H2&gt;
&lt;H3&gt;Step 1: Create a Multi X-Axis Chart&lt;/H3&gt;
&lt;P&gt;Typically if you create a chart with several X-Axis, they are stacked on the top or bottom of the chart.&lt;/P&gt;
&lt;P&gt;The following code with&amp;nbsp;4 XAxis on the&amp;nbsp;bottom results in this output:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\HorizontallyStackedAxis-Step1\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\HorizontallyStackedAxis-Step1\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/HorizontallyStackedAxis-Step1/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Step 2: Apply the Layout Strategy&lt;/H3&gt;
&lt;P&gt;To change the behaviour of axis stacking you need to set the appropriate layoutStrategy property on the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;&amp;nbsp;with the stacked version.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;SciChart provides the following Outer Axes Layout Strategies:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/leftalignedouterverticallystackedaxislayoutstrategy.html"&gt;LeftAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/rightalignedouterverticallystackedaxislayoutstrategy.html"&gt;RightAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/topalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;TopAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Modify the code above to set this property on the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\HorizontallyStackedAxis-Step2\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now the layout is&amp;nbsp;completely changed.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/HorizontallyStackedAxis-Step2/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;&lt;BR&gt;LayoutStrategies Applicable to X-Axis&lt;/H2&gt;
&lt;P&gt;The following&amp;nbsp;horizontally stacked&amp;nbsp;layout strategies are available and may be applied to the following properties on&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Layout Strategy&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Use with&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Apply to LayoutManager prop&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Behaviour&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/topalignedouteraxislayoutstrategy.html"&gt;TopAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X&amp;nbsp;Axis&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#topinneraxeslayoutstrategy"&gt;topInnerAxisLayoutStrategy&lt;/A&gt;,&lt;BR&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#topouteraxeslayoutstrategy"&gt;topOuterAxisLayoutStrategy&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/bottomalignedouteraxislayoutstrategy.html"&gt;BottomAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X&amp;nbsp;Axis&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#bottominneraxeslayoutstrategy"&gt;bottomInnerAxisLayoutStrategy&lt;/A&gt;,&lt;BR&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#bottomouteraxeslayoutstrategy"&gt;bottomOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/topalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;TopAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X&amp;nbsp;Axis&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#rightouteraxeslayoutstrategy"&gt;&lt;/A&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#topouteraxeslayoutstrategy"&gt;topOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Horizontal stacking behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;BottomAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X&amp;nbsp;Axis&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#bottomouteraxeslayoutstrategy"&gt;bottomOuterAxisLayoutStrategy&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;Horizontal stacking behaviour&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Try experimenting with the Codepen above to see how each of the strategies behave.&lt;BR&gt;Note that a &lt;STRONG&gt;Top*LayoutStrategy&lt;/STRONG&gt;&amp;nbsp;wil require&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/numericaxis.html#axisalignment"&gt;Axis.axisAlignment&lt;/A&gt; =&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/enums/eaxisalignment.html"&gt;EAxisAlignment.Top&lt;/A&gt; and vice versa.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Customising&amp;nbsp;Axis Size when Horizontally Stacked&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#stackedaxislength"&gt;Axis.stackedAxisLength&lt;/A&gt;&amp;nbsp;property allows you to customize the size of a Horizontally Stacked Axis in SciChart.js. This property may be an absolute number, e.g. 50 pixels, or a percentage e.g. "30%". When left undefined, default equal spacing will be used.&lt;/P&gt;
&lt;P&gt;Try the following code to see how it affects stacked axis size.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;stackedAxisLength&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// This stacked axis has 100 pixel length&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis0", axisTitle: "X Axis 0", stackedAxisLength: 100&amp;nbsp;}));&lt;BR&gt;// This stacked axis occupies 50% of available space&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis1", axisTitle: "X Axis 1", stackedAxisLength:&amp;nbsp;"50%"&amp;nbsp;}));&lt;BR&gt;// These stacked axis obey default spacing&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis2", axisTitle: "X Axis 2" }));&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis3", axisTitle: "X Axis 3" }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Combining Vertical (rotated) Charts &amp;amp; Stacked Axis&lt;/H2&gt;
&lt;P&gt;Part of the magic of SciChart.js is the sheer number of combinations you can have for chart and axis layout!&lt;/P&gt;
&lt;P&gt;If we combine the&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;Vertical Chart feature&lt;/A&gt; where you set &lt;STRONG&gt;XAxis.axisAlignment&lt;/STRONG&gt; = Left and &lt;STRONG&gt;YAxis.axisAlignment&lt;/STRONG&gt; = Top with the Horizontally Stacked Axis feature where we can re-arrange the layout of axis on the top/bottom of the chart, we can achieve things like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\HorizontallyStackedAxis-Step3\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/HorizontallyStackedAxis-Step3/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="239e0085-1b15-452c-9bd0-5ebe8be9c6b5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e4489a79-987b-4a06-ac98-586190c47ec5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="fc5b6b36-df92-4e08-995a-3095e9828ee4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0175a983-0786-4067-b718-206c8c41cd3b" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="e74dcd1c-9132-4446-b3ac-3e87b9d4867b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2294a48f-459b-464f-9504-aed96c7fda2a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="af7dd07c-7746-4a9d-a9ea-1afc4bb95701" Status="New Topic" CreatedOn="2021-09-16T16:43:20.4396916Z" ModifiedOn="2023-03-23T17:16:09.7436079Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Layout - Vertically Stacked Axis" BuildFlags="">
                    <Title m="2023-03-22T11:43:25.2474828Z">Vertically Stacked Axis Layout</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-23T17:16:09.7436079Z">&lt;P&gt;The Stacked Axis feature in SciChart allows you to specify the layout of the axis panel. Normally when you have multiple&amp;nbsp;YAxis, they are stacked horizontally. However, you can switch this to stack vertically. Custom and complex layouts are possible allowing for all kinds of chart scenarios.&lt;/P&gt;&lt;innovasys:widget layout="block" type="iFrame"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-vertically-stacked-axes&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;SPAN&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-vertically-stacked-axes" target=_blank&gt;Vertically Stacked Axis example&lt;/A&gt; in SciChart.js demo.&lt;/EM&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Create a Vertically Stacked Axis Chart&lt;/H2&gt;
&lt;H3&gt;Step 1: Create a multiple Y-Axis Chart&lt;/H3&gt;
&lt;P&gt;Typically if you create a chart with several Y-Axis, they are stacked on the left or right of the chart.&lt;/P&gt;
&lt;P&gt;The following code with 8 YAxis on the&amp;nbsp;left results in this output:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticallyStackedAxis-Step1\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticallyStackedAxis-Step1\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/VerticallyStackedAxis-Step1/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Step 2: Apply the Layout Strategy&lt;/H3&gt;
&lt;P&gt;To change the behaviour of axis stacking you need to set the appropriate layoutStrategy property on the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;&amp;nbsp;with the stacked version.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;SciChart provides the following Outer Axes Layout Strategies:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/leftalignedouterverticallystackedaxislayoutstrategy.html"&gt;LeftAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/rightalignedouterverticallystackedaxislayoutstrategy.html"&gt;RightAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/topalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;TopAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Modify the code above to set this property on the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticallyStackedAxis-Step2\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now the layout is&amp;nbsp;completely changed.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/VerticallyStackedAxis-Step2/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Make sure to assign Layout Strategy to an appropriate property on the Layout Manager accordingly to Axis Alignment.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Experimenting with different Layout Strategies&lt;/H2&gt;
&lt;P&gt;The following&amp;nbsp;vertically stacked&amp;nbsp;layout strategies are available and may be applied to the following properties on&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt;:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Layout Strategy&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Use with&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Apply to LayoutManager prop&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Behaviour&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/leftalignedouteraxislayoutstrategy.html"&gt;LeftAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#leftinneraxeslayoutstrategy"&gt;leftInnerAxisLayoutStrategy&lt;/A&gt;,&lt;BR&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#leftouteraxeslayoutstrategy"&gt;leftOuterAxisLayoutStrategy&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/rightalignedouteraxislayoutstrategy.html"&gt;RightAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#rightinneraxeslayoutstrategy"&gt;rightInnerAxisLayoutStrategy&lt;/A&gt;,&lt;BR&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#rightouteraxeslayoutstrategy"&gt;rightOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/leftalignedouterverticallystackedaxislayoutstrategy.html"&gt;LeftAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#rightouteraxeslayoutstrategy"&gt;rightOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Vertical stacking behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/rightalignedouterverticallystackedaxislayoutstrategy.html"&gt;RightAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/layoutmanager.html#leftouteraxeslayoutstrategy"&gt;leftOuterAxisLayoutStrategy&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;Vertical stacking behaviour&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Try experimenting with the Codepen above to see how each of the strategies behave.&lt;BR&gt;Note that a &lt;STRONG&gt;Right*LayoutStrategy&lt;/STRONG&gt;&amp;nbsp;wil require&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/numericaxis.html#axisalignment"&gt;Axis.axisAlignment&lt;/A&gt; =&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/enums/eaxisalignment.html"&gt;EAxisAlignment.Right&lt;/A&gt; and vice versa.&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;H2&gt;Customising&amp;nbsp;Axis Size when Vertically Stacked&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#stackedaxislength"&gt;Axis.stackedAxisLength&lt;/A&gt;&amp;nbsp;property allows you to customize the size of a Vertically Stacked Axis in SciChart.js. This property may be an absolute number, e.g. 50 pixels, or a percentage e.g. "30%". When left undefined, default equal spacing will be used.&lt;/P&gt;
&lt;P&gt;Find an updated example below:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\VerticallyStackedAxis-Step3\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The layout and sizes of the Vertically Stacked Axis now updates as follows:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/VerticallyStackedAxis-Step3/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="239e0085-1b15-452c-9bd0-5ebe8be9c6b5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e4489a79-987b-4a06-ac98-586190c47ec5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="fc5b6b36-df92-4e08-995a-3095e9828ee4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0175a983-0786-4067-b718-206c8c41cd3b" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="e74dcd1c-9132-4446-b3ac-3e87b9d4867b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2294a48f-459b-464f-9504-aed96c7fda2a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3a1fa3f5-6ae6-4819-8100-4a382d581587" Status="New Topic" CreatedOn="2023-03-22T11:40:37.9981766Z" ModifiedOn="2023-08-04T17:57:24.2983327Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LayoutManagers" BuildFlags="">
                    <Title m="2023-08-04T17:09:35.7513394Z">Advanced Options - Custom Layout Managers</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-08-04T17:57:24.2983327Z">&lt;P&gt;In SciChart.js, all positioning and layout of axis are done with Layout Strategies. A list of default built-in strategies can be found below.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Layout Strategy&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Use on&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Apply to&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Behaviour&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baseaxislayoutstrategy.html"&gt;BottomAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X Axis&lt;/TD&gt;
&lt;TD&gt;Bottom side&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X Axis&lt;/TD&gt;
&lt;TD&gt;Bottom side&lt;/TD&gt;
&lt;TD&gt;Horizontal stacking behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/leftalignedouteraxislayoutstrategy.html"&gt;LeftAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;Left side&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rightalignedouteraxislayoutstrategy.html"&gt;RightAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;Right side&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/topalignedouteraxislayoutstrategy.html"&gt;TopAlignedOuterAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X Axis&lt;/TD&gt;
&lt;TD&gt;Top side&lt;/TD&gt;
&lt;TD&gt;Default behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/leftalignedouterverticallystackedaxislayoutstrategy.html"&gt;LeftAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;Left side&lt;/TD&gt;
&lt;TD&gt;Vertical stacking behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rightalignedouterverticallystackedaxislayoutstrategy.html"&gt;RightAlignedOuterVerticallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Y Axis&lt;/TD&gt;
&lt;TD&gt;Right side&lt;/TD&gt;
&lt;TD&gt;Vertical stacking behaviour&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/topalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;TopAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;X Axis&lt;/TD&gt;
&lt;TD&gt;Top side&lt;/TD&gt;
&lt;TD&gt;Horizontal stacking behaviour&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;By applying these strategies to the SciChartSurface you can achieve various layouts, such as&amp;nbsp;&lt;A href="0175a983-0786-4067-b718-206c8c41cd3b"&gt;Central Axis Layout&lt;/A&gt; or&amp;nbsp;&lt;A href="af7dd07c-7746-4a9d-a9ea-1afc4bb95701"&gt;Vertically Stacked Axis Layout&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;However, you can also create your own layout managers for custom or complex axis layouts.&lt;/P&gt;
&lt;P&gt;Here's a worked example:&lt;/P&gt;
&lt;H2&gt;Example: Custom Stacked and Normal Axis Layout&lt;/H2&gt;
&lt;P&gt;A user on the&amp;nbsp;&lt;A href="https://www.scichart.com/questions/js/is-it-possible-to-create-two-xaxis-where-one-is-normal-and-the-other-one-is-horizontally-stacked-axis-layout" target=_blank&gt;SciChart Forums&lt;/A&gt; asked us how to combine Horizontally Stacked Axis behaviour with default behaviour, to achieve a layout like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis_CustomLayoutManager.png"&gt;&lt;/P&gt;
&lt;P&gt;This is possible by creating a &lt;STRONG&gt;custom layout strategy.&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Step 1: create a class which inherits one of our default layout strategies. For this, we chose&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/A&gt;&amp;nbsp;as the base class. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CustomLayoutManager\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Breaking this code down:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bottomalignedouterhorizontallystackedaxislayoutstrategy.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;BottomAlignedOuterHorizontallyStackedAxisLayoutStrategy&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;is designed to layout axis on the bottom of the chart (x-Axis) horizontally stacked. 
&lt;LI&gt;We override&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baseaxislayoutstrategy.html#measureaxes"&gt;measureAxes&lt;/A&gt; and use the default &lt;STRONG&gt;super.measureAxes()&lt;/STRONG&gt; function to measure the last three axis. We use a &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baseaxislayoutstrategy.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;BottomAlignedOuterAxisLayoutStrategy&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;member variable to measure the final axis. 
&lt;LI&gt;We override&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baseaxislayoutstrategy.html#layoutaxes"&gt;layoutAxes&lt;/A&gt; and do the same, combining the result of two strategies. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Applying the strategy like this to a chart:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CustomLayoutManager\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You can now get the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/CustomLayoutManager/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Reversing the Order of Stacked &amp;amp; Stretched Axis&lt;/H2&gt;
&lt;P&gt;What if you wanted to swap the order of the stretched xAxis and the stacked xAxis? &lt;/P&gt;
&lt;P&gt;This is really simple, just modify the layoutAxes function like this. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CustomLayoutManagerReversed\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;BR&gt;Now the axis order are swapped, resulting in this output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/CustomLayoutManagerReversed/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="9dc14a09-9cff-46bc-939a-b03d6a9cb2ad" Status="New Topic" CreatedOn="2023-03-22T11:41:13.3815637Z" ModifiedOn="2023-03-22T15:46:48.6989626Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CentralAxisLayout" BuildFlags="">
                    <Title m="2023-03-22T11:41:21.3183218Z">Central Axis Layout</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-22T15:46:48.6989626Z">&lt;P&gt;Placing Axis in the center the chart, like an oscilloscope or spectrum analyzer is possible with SciChart.js.&lt;/P&gt;
&lt;P&gt;To do this, use the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/centralaxeslayoutmanager.html"&gt;CentralAxesLayoutManager&lt;/A&gt; applied to the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#layoutmanager"&gt;SciChartSurface.LayoutManager&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;Here's a code sample:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CentralAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CentralAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/CentralAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Configure the Position of Central Axis&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/centralaxeslayoutmanager.html"&gt;CentralAxesLayoutManager&lt;/A&gt;&amp;nbsp;has some options you can use to configure the position of the horizontal and vertical axes. &lt;/P&gt;
&lt;P&gt;The following code places an YAxis inside the chart at X=3 and an XAxis inside the chart at Y=100 pixels. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Options available in the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/enums/einneraxisplacementcoordinatemode.html"&gt;EInnerAxisPlacementCoordinateMode&lt;/A&gt; enum include: DataValue, Pixel, or Relative, which allows placement of an axis at a fraction of the viewport from 0..1.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CentralAxis-Configuration\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLayout\CentralAxis-Configuration\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLayout/CentralAxis-Configuration/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="97617a64-f5d9-4997-962f-8ecaea89d3d7" AutoIndex="false">
                <Caption m="2023-03-08T19:08:11.0073032Z">Axis Labels</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="1325dcad-b236-42e7-8491-af7a8137d6e7" Status="New Topic" CreatedOn="2016-08-04T12:05:46.0398385Z" ModifiedOn="2023-06-26T20:19:33.9230956Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Label Formatting - LabelProvider API" BuildFlags="">
                    <Title m="2023-03-16T19:08:39.0084978Z">Axis LabelProviders</Title>
                    <ContentsTitle m="2023-06-26T20:19:33.9218209Z">LabelProvider API Overview</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-06-25T14:44:16.8041229Z">&lt;P&gt;All Axis Types include the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#labelprovider"&gt;AxisCore.labelProvider&lt;/A&gt; property, which formats axis and cursor labels. Built in to SciChart.js are a number of labelProvider types, and you can even create your own.&lt;/P&gt;
&lt;P&gt;The inheritence diagram for LabelProviders in SciChart.js looks like this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/AxisLabelProviders_InheritenceDiagram.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;All of these classes&amp;nbsp;inherit LabelProviderBase2D. Below there is a mapping between which axis type has which labelprovider:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Axis Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;... Has LabelProvider type&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="bf3b144b-2153-4d7c-ab74-152f839df85f"&gt;NumericAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericlabelprovider.html"&gt;NumericLabelProvider&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e71de078-98d8-441a-9432-4289aa687270"&gt;&lt;/A&gt;&lt;A href="e71de078-98d8-441a-9432-4289aa687270"&gt;&lt;STRONG&gt;DateTimeNumericAxis&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8"&gt;CategoryAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datelabelprovider.html"&gt;DateLabelProvider&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="dbda6c22-a06d-4301-9b1d-d83b542d030f"&gt;LogarithmicAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmiclabelprovider.html"&gt;LogarithmicLabelProvider&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We've included examples of how to format labels via the built-in label providers in the above articles. Click on 'NumericAxis' or 'DateTimeNumericAxis' above for more info and a code sample.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Applying a LabelProvider to an axis&lt;/H2&gt;
&lt;P&gt;All axis (above) have a built-in LabelProvider. You can also apply a labelprovider to an axis with the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SmartDate Formatting Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { CategoryAxis, SmartDateLabelProvider &amp;nbsp;} from "scichart"; &amp;nbsp;&lt;/P&gt;sciChartSurface.xAxes.add(new CategoryAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelProvider: new SmartDateLabelProvider()&lt;BR&gt;}));&amp;nbsp;&amp;nbsp; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P align=left&gt;If you have an axis where the date range can change as the user zooms, the &lt;STRONG&gt;SmartDateLabelProvider&lt;/STRONG&gt; provides dynamic date labels which automatically adjust based on the axis range. You can also create custom dynamic labelproviders. See the rest of this article for steps how to do this.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;LabelProvider &amp;amp; LabelProviderBase2D&lt;/H2&gt;
&lt;P&gt;These&amp;nbsp;are the base classes for all labelproviders in SciChart.js. Some of the properties they include can be found below.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;The properties common to the&amp;nbsp;&lt;STRONG&gt;LabelProviderBase2D&lt;/STRONG&gt; / &lt;STRONG&gt;LabelProvider&lt;/STRONG&gt; classes can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html"&gt;TypeDoc API documentation&lt;/A&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;EM&gt;Properties&lt;/EM&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-property tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: underline; POSITION: relative; COLOR: rgb(77,166,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; PADDING-LEFT: 20px; DISPLAY: block; OUTLINE-COLOR: invert; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#asynclabels"&gt;async&lt;WBR&gt;Labels&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatcursorlabelproperty"&gt;format&lt;WBR&gt;Cursor&lt;WBR&gt;Label&lt;WBR&gt;Property&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabelproperty"&gt;format&lt;WBR&gt;Label&lt;WBR&gt;Property&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#parentaxis"&gt;parent&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#providerid"&gt;provider&lt;WBR&gt;Id&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#styleid"&gt;style&lt;WBR&gt;Id&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#textvariesforsametick"&gt;text&lt;WBR&gt;Varies&lt;WBR&gt;For&lt;WBR&gt;Same&lt;WBR&gt;Tick&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#ticktotext"&gt;tick&lt;WBR&gt;ToText&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#type"&gt;type&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usecache"&gt;use&lt;WBR&gt;Cache&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usenativetext"&gt;use&lt;WBR&gt;Native&lt;WBR&gt;Text&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-property tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usesharedcache"&gt;use&lt;WBR&gt;Shared&lt;WBR&gt;Cache&lt;/A&gt;&lt;/SPAN&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;EM&gt;Accessors&lt;/EM&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#cursornumericformat"&gt;cursor&lt;WBR&gt;Numeric&lt;WBR&gt;Format&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#cursorprecision"&gt;cursor&lt;WBR&gt;Precision&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatcursorlabel"&gt;format&lt;WBR&gt;Cursor&lt;WBR&gt;Label&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabel"&gt;format&lt;WBR&gt;Label&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#linespacing"&gt;line&lt;WBR&gt;Spacing&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#numericformat"&gt;numeric&lt;WBR&gt;Format&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#postfix"&gt;postfix&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#precision"&gt;precision&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#prefix"&gt;prefix&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#rotation"&gt;rotation&lt;/A&gt;&lt;/SPAN&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;EM&gt;Methods&lt;/EM&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#applyformat"&gt;apply&lt;WBR&gt;Format&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#attachedtoaxis"&gt;attached&lt;WBR&gt;ToAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#clearcache"&gt;clear&lt;WBR&gt;Cache&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#delete"&gt;delete&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getcachedlabeltexture"&gt;get&lt;WBR&gt;Cached&lt;WBR&gt;Label&lt;WBR&gt;Texture&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getcachedstyle"&gt;get&lt;WBR&gt;Cached&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabelheight"&gt;get&lt;WBR&gt;Label&lt;WBR&gt;Height&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabelsizesnative"&gt;get&lt;WBR&gt;Label&lt;WBR&gt;Sizes&lt;WBR&gt;Native&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabeltexture"&gt;get&lt;WBR&gt;Label&lt;WBR&gt;Texture&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabeltextureasync"&gt;get&lt;WBR&gt;Label&lt;WBR&gt;Texture&lt;WBR&gt;Async&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabelwidth"&gt;get&lt;WBR&gt;Label&lt;WBR&gt;Width&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabels"&gt;get&lt;WBR&gt;Labels&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getmaxlabelheightforhorizontalaxis"&gt;get&lt;WBR&gt;Max&lt;WBR&gt;Label&lt;WBR&gt;Height&lt;WBR&gt;For&lt;WBR&gt;Horizontal&lt;WBR&gt;Axis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getmaxlabelwidthforverticalaxis"&gt;get&lt;WBR&gt;Max&lt;WBR&gt;Label&lt;WBR&gt;Width&lt;WBR&gt;For&lt;WBR&gt;Vertical&lt;WBR&gt;Axis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getnativelabelinfo"&gt;get&lt;WBR&gt;Native&lt;WBR&gt;Label&lt;WBR&gt;Info&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#invalidateparent"&gt;invalidate&lt;WBR&gt;Parent&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#onbeginaxisdraw"&gt;on&lt;WBR&gt;Begin&lt;WBR&gt;Axis&lt;WBR&gt;Draw&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#tojson"&gt;toJSON&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;There are many options to format axis labels in SciChart.js via the labelProvider. Above is a list of the common properties and functions on the base class.&lt;/P&gt;
&lt;P&gt;In particular:&lt;/P&gt;
&lt;P&gt;SciChart.js calls&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabel"&gt;axis.labelProvider.formatLabel(dataValue)&lt;/A&gt; to format each label on the axis and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatcursorlabel"&gt;axis.labelProvider.formatCursorLabel(dataValue)&lt;/A&gt; to format each cursor label.&lt;/P&gt;
&lt;P&gt;The built-in implementation of formatLabel provides text formatting based on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#numericformat"&gt;labelProvider.numericFormat&lt;/A&gt; &amp;amp;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#cursornumericformat"&gt;labelProvider.cursorNumericFormat&lt;/A&gt; properties.&lt;/P&gt;
&lt;P&gt;The number of decimal places (if applicable numericFormat is chosen) is specified by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#precision"&gt;labelProvider.precision&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;A string prefix and postfix are provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#prefix"&gt;labelProvider.prefix&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#postfix"&gt;labelProvider.postFix&lt;/A&gt; properties.&lt;/P&gt;
&lt;P&gt;A rotation angle may be specified by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#rotation"&gt;labelProvider.rotation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Caching and native text (WebGL enabled text) may be turned on or off via the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usecache"&gt;labelProvider.useCache&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usenativetext"&gt;useNativeText&lt;/A&gt; property.&lt;/P&gt;
&lt;H2&gt;Setting LabelProvider properties&lt;/H2&gt;
&lt;P&gt;LabelProvider properties can be set either on the labelProvider itself, or, in many cases can be set via the axis constructor options. The following code is equivalent:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderProperties\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderProperties\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code sample configures label providers on the X &amp;amp; Y axis with exactly the same properties:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/LabelProviderProperties/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Overriding&amp;nbsp;the formatLabel function&lt;/H2&gt;
&lt;P&gt;Say you wanted further customisation in the axis labels than what&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#numericformat"&gt;axis.labelProvider.numericFormat&lt;/A&gt; offers, you can start by overriding the formatLabel and formatCursorLabel functions.&lt;/P&gt;
&lt;P&gt;Take a look at the code sample below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderFormatLabel\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderFormatLabel\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The function formatLabel is overridden and called for each label on the xAxis. In this function we return a string format as hexadecimal to show how to customise labels even further.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/LabelProviderFormatLabel/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Axis labels are formatted by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html#formatlabel"&gt;formatLabel&lt;/A&gt;. Tooltip values are formated by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html#formatcursorlabel"&gt;formatCursorLabel&lt;/A&gt;. This allows you to have different label formats for tooltips and axis.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Custom LabelProviders&lt;/H2&gt;
&lt;P&gt;See the following sections with worked examples on how to create custom label providers:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="7cf79670-263f-4fc7-8fd1-d050e0036a5e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e4489a79-987b-4a06-ac98-586190c47ec5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="3176ed65-8021-48c5-a10c-f5678c0b70d8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="29f7d41d-5dae-4b16-9f75-a090b3f02630" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="80f312fd-a16e-4bf8-bd5c-dd70f7c64ea1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="efc8de3f-7cbb-4577-9a42-9a4e5621156d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="2d75bc26-0de1-46c9-9af9-fd11696c4ee2" Status="New Topic" CreatedOn="2023-06-25T14:41:35.4163528Z" ModifiedOn="2023-06-25T14:51:39.5727153Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomLabelProvider_DynamicDates" BuildFlags="">
                    <Title m="2023-06-25T14:51:39.5711581Z">Custom LabelProviders: Dynamic Dates on Zoom</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-06-25T14:51:32.2770169Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Customisation in SciChart.js can go a level deeper than built-in label formatting by creating a custom labelprovider class.&lt;/P&gt;
&lt;P&gt;In this page we're going to show a worked example of how we can create a custom label provider to handle dynamic date formatting&amp;nbsp;on zoom.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To create a custom labelprovider to handle dynamic dates, first a class which inherits one of the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider classes listed here&lt;/A&gt; and override&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabel"&gt;formatLabel&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatcursorlabel"&gt;formatCursorLabel&lt;/A&gt;. &lt;/P&gt;
&lt;P&gt;Inside the &lt;STRONG&gt;formatLabel&lt;/STRONG&gt; function, &lt;STRONG&gt;parentAxis.visibleRange&lt;/STRONG&gt; can be accessed to determine the visibleRange or zoom level of the axis.&lt;/P&gt;
&lt;P&gt;Here we can provide some dynamic formatting of labels depending on the zoom level. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderClass\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, apply the custom LabelProvider to an axis as follows:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderClass\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderClass\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;At default zoom level the format DD/MM/YYYY is chosen
&lt;LI&gt;Zooming in and format changes to HH:mm
&lt;LI&gt;Zooming further still and format changes to HH:mm:ss
&lt;LI&gt;Once the axis range is less than a few minutes, label format changes to show minutes, seconds and milliseconds&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/LabelProviderClass/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Zoom IN on the above example using the mousewheel to see dynamic label formatting&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e9747ecc-a3cd-456b-9180-c47daead66ef" Status="New Topic" CreatedOn="2023-06-25T14:42:12.3268904Z" ModifiedOn="2023-06-26T17:52:03.3595134Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomLabelProvider_Numeric" BuildFlags="">
                    <Title m="2023-06-25T14:42:56.0575121Z">Custom LabelProviders: Readable Numbers</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-06-26T17:52:03.3595134Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Customisation in SciChart.js can go a level deeper than built-in label formatting by creating a custom labelprovider class.&lt;/P&gt;
&lt;P&gt;In this page we're going to show a worked example of how we can create a custom label provider to handle formatting of numbers with thousands/millions commas, or to format large numbers such as 1,000 as 1K, 1,000,000 as 1M and 1,000,000,000 as 1Bn&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To create a custom labelprovider to handle dynamic dates, first a class which inherits one of the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider classes listed here&lt;/A&gt; and override&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabel"&gt;formatLabel&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatcursorlabel"&gt;formatCursorLabel&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Inside the &lt;STRONG&gt;formatLabel&lt;/STRONG&gt; function, determine which formatting to apply based&amp;nbsp;on properties and format the label value.&lt;/P&gt;
&lt;P&gt;In this example below, we show two ways to format large numeric values in SciChart.js.&lt;/P&gt;
&lt;H3&gt;Method 1: K,M,B,T formatting&lt;/H3&gt;
&lt;P&gt;Large numbers are formatted as follows:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;1,000 = 1K
&lt;LI&gt;1,000,000 = 1M
&lt;LI&gt;1,000,000,000 = 1B
&lt;LI&gt;1,000,000,000,000 = 1T&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Label prefix and postfix, decimal places are supported by passing&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ilabel2doptions.html"&gt;ILabel2DOptions&lt;/A&gt; to the constructor of&amp;nbsp;&lt;STRONG&gt;CustomNumericLabelProvider&lt;/STRONG&gt;, which in turn passes to the base class constructor&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericlabelprovider.html"&gt;NumericLabelProvider&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Method 2: Comma formatting&lt;/H3&gt;
&lt;P&gt;Large numbers are formatted as follows:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;1000 =&amp;gt; 1,000
&lt;LI&gt;1000000 =&amp;gt; 1,000,000
&lt;LI&gt;1000000000 =&amp;gt; 1,000,000,000&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;etc...&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderNumeric\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Applying the Custom LabelProvider to an Axis&lt;/H3&gt;
&lt;P&gt;Next, apply the custom LabelProvider to an axis as follows:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderNumeric\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelProviderNumeric\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;When the property formatOptions = "Default", default numeric formatting is chosen 
&lt;LI&gt;When the property formatOptions = "Commas", numbers are formatted with comma separators, e.g. 1,000,000 
&lt;LI&gt;When the property formatOptions = "KMBT", large numbers are formatted as 1k, 1M, 1B &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/LabelProviderNumeric/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The above example showcases how to apply custom or complex formatting to labels in SciChart.js.&lt;/P&gt;
&lt;P&gt;Any formatting (dynamic or static) that you can think of can be applied using the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Custom labelproviders can then be set on individual X,Y axis of any type.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="91ffbb0e-d5c2-4606-9b1e-e839dfcae79a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1325dcad-b236-42e7-8491-af7a8137d6e7" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="29f7d41d-5dae-4b16-9f75-a090b3f02630" Status="New Topic" CreatedOn="2021-10-04T10:44:29.7729424Z" ModifiedOn="2023-03-16T21:48:04.2076713Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Label Formatting - TextLabelProvider" BuildFlags="">
                    <Title m="2021-10-04T10:44:55.7055164Z">Axis Label Formatting - TextLabelProvider</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T21:48:04.193421Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;This content has been moved. Please see the&amp;nbsp;&lt;A href="f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb"&gt;Text / String Axis&lt;/A&gt;&amp;nbsp;article&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="55beeaa0-e069-4903-9202-cf5295cf4b41" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="efc8de3f-7cbb-4577-9a42-9a4e5621156d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="efc8de3f-7cbb-4577-9a42-9a4e5621156d" Status="New Topic" CreatedOn="2021-09-16T16:44:19.3377614Z" ModifiedOn="2023-03-16T21:48:19.8298728Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Label Formatting - Custom LabelProviders" BuildFlags="">
                    <Title m="2021-10-05T11:44:31.222106Z">Axis Label Formatting - Custom LabelProviders</Title>
                    <ContentsTitle m="2021-10-05T11:44:34.3558301Z">Axis Label Formatting - Custom LabelProviders</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T21:45:26.3868019Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;This content has been moved. Please see the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis LabelProviders&lt;/A&gt; article&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="96191076-07af-4c5f-9879-83924f62bd2a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="29f7d41d-5dae-4b16-9f75-a090b3f02630" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3616f94c-1224-4896-8306-d6a17af11082" Status="New Topic" CreatedOn="2023-01-11T15:44:34.4307643Z" ModifiedOn="2023-03-20T20:38:29.9700459Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Labels - Native Text" BuildFlags="">
                    <Title m="2023-03-16T21:48:59.4089794Z">Performance Considerations - Native Text Axis Labels</Title>
                    <ContentsTitle m="2023-03-16T21:49:05.617894Z">Performance Considerations - Native Text Axis Labels</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-20T20:38:29.9700459Z">&lt;P&gt;Starting in version 3.0 SciChart supports rendering axis labels using&amp;nbsp;a new&amp;nbsp;&lt;A href="e5a3627c-906d-4bb5-a81d-981df6e3e96b"&gt;native text api&lt;/A&gt;.&amp;nbsp; This uses our in-house WebGL text rendering engine and&amp;nbsp;offers performance benefits in situations where you have many axes with many labels. Rotated and multiline support is better with native text than with&amp;nbsp;standard text, but there are also some important limitations you need to be aware of.&lt;/P&gt;
&lt;H2&gt;Enabling Native Text&amp;nbsp; Labels&lt;/H2&gt;
&lt;P&gt;If you are not using any custom fonts&amp;nbsp;in&amp;nbsp;your axes, then you can just enable native text as the default for all axes by doing the following once at the start of your app:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Enable native text&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartDefaults } from "scichart";&lt;BR&gt;&lt;BR&gt;SciChartDefaults.useNativeText = true;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You can&amp;nbsp;control it for a particular axis by setting the useNativeText option when creating the axis, or by setting the&amp;nbsp;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#usenativetext"&gt;axis.labelProvider.useNativeText&lt;/A&gt; property.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Caution Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To use any font other than Arial you will need ensure that font is available on your server (as fontname.ttf), or registered using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#registerfont"&gt;sciChartSurface.registerFont()&lt;/A&gt; if coming from a remote url.&amp;nbsp; See&amp;nbsp;&lt;A href="e5a3627c-906d-4bb5-a81d-981df6e3e96b#FontLoading"&gt;Native Text Font Loading&lt;/A&gt;&amp;nbsp;for more details.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;All the normal options in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#labelstyle"&gt;labelStyle&lt;/A&gt; are supported except for &lt;STRONG&gt;fontStyle&lt;/STRONG&gt; and &lt;STRONG&gt;fontWeight&lt;/STRONG&gt;.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The example below creates axes using both native and standard text.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\NativeText\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\NativeText\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/NativeText/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Rotated and Multiline Native Text Labels&lt;/H2&gt;
&lt;P&gt;The standard axis labels supported rotation, but the positioning is poor for angles outside the 0 to 90 range.&amp;nbsp;With native text labels, this is fixed.&amp;nbsp;Note that rotation is a property on the labelProvider, not the axis itself.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;When using angles that are not a multiple of 90, you probably want to set&amp;nbsp;&lt;STRONG&gt;hideOverlappingLabels: false&lt;/STRONG&gt; as the overlap is calculated using the bounding rectangle of the text.&amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Multiline labels are supported simply by using newline characters (\n)&amp;nbsp;in the label text.&amp;nbsp; lineSpacing is a property on the labelProvider.&amp;nbsp; The alignment property on labelStyle also affects the alignment for multiple lines.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: for more info about&amp;nbsp;&lt;A href="60d1c9a4-f68a-4d26-8341-fae611c47315"&gt;Text and MultiLine labels see this article&lt;/A&gt;. &lt;BR&gt;For rotation of labels&amp;nbsp;&lt;A href="43eff091-2936-4343-b875-8bf40d36b2c2"&gt;see this article&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="7cf79670-263f-4fc7-8fd1-d050e0036a5e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e4489a79-987b-4a06-ac98-586190c47ec5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="3176ed65-8021-48c5-a10c-f5678c0b70d8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="29f7d41d-5dae-4b16-9f75-a090b3f02630" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="80f312fd-a16e-4bf8-bd5c-dd70f7c64ea1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="efc8de3f-7cbb-4577-9a42-9a4e5621156d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="c92e1f24-b8c3-411d-9c22-c9b19d57d69c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5a3627c-906d-4bb5-a81d-981df6e3e96b" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="463d136b-fe1f-4960-85ac-9cb15ceb1d21" Status="New Topic" CreatedOn="2016-09-01T05:16:13.4388368Z" ModifiedOn="2023-03-21T18:39:27.5348889Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ticks - Gridline and Label Spacing (Interval)" BuildFlags="">
                    <Title m="2023-03-21T18:34:07.4689534Z">Gridline and Label Spacing (Interval)</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-21T18:39:27.5348889Z">&lt;H2&gt;Axis Ticks, Labels and Grid Lines&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In SciChart.js, the &lt;STRONG&gt;Ticks&lt;/STRONG&gt; are small marks around the chart on an axis.&amp;nbsp;There are &lt;STRONG&gt;Minor&lt;/STRONG&gt; and &lt;STRONG&gt;Major&lt;/STRONG&gt; &lt;STRONG&gt;Ticks&lt;/STRONG&gt;,&amp;nbsp;where Minor Ticks are placed in between&amp;nbsp;Major&amp;nbsp;ones. &lt;SPAN&gt;&lt;STRONG&gt;Axis Labels&lt;/STRONG&gt; appears for every Major Tick, and &lt;SPAN&gt;&lt;SPAN&gt;&lt;STRONG&gt;Grid Lines&lt;/STRONG&gt; correspond to &lt;STRONG&gt;Ticks&lt;/STRONG&gt; on an axis.&amp;nbsp;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;In SciChart,&amp;nbsp;&lt;STRONG&gt;axes are responsible&lt;/STRONG&gt; not only for drawing Ticks and Labels, but also &lt;STRONG&gt;for&amp;nbsp;the chart grid&lt;/STRONG&gt;. So if you want to change the spacing of gridlines, labels or tick marks, you need to use the APIs to change Axis Tick spacing.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="images/AxisTicks-majorminorticks.png"&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Automatic&amp;nbsp;Gridline, Label or Tick&amp;nbsp;Spacing&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In SciChart.js, the&amp;nbsp;difference between two Major Gridlines is defined by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majordelta"&gt;axisCore.MajorDelta&lt;/A&gt;. The difference between two minor gridlines is defined by &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minordelta"&gt;axisCore.MinorDelta&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;By default, &lt;STRONG&gt;MajorDelta&lt;/STRONG&gt; and &lt;STRONG&gt;MinorDelta&lt;/STRONG&gt; values &lt;SPAN&gt;are calculated automatically&amp;nbsp;when&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autoticks"&gt;axis.autoTicks&lt;/A&gt;&amp;nbsp;= true. Major/Minor deltas are calculated dynamically according to&amp;nbsp;the&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;VisibleRange&lt;/A&gt;&lt;/SPAN&gt;&amp;nbsp;and size of&amp;nbsp;an axis in pixels. This means as you zoom and pan, these properties are updated and you get a dynamic gridline spacing effect.&lt;/P&gt;
&lt;H3&gt;&lt;SPAN&gt;&lt;SPAN&gt;Configuring Automatic Tick Spacing&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;If you want to congigure Automatic Tick Spacing, do the following:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;set &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autoticks"&gt;axis.autoTicks&lt;/A&gt; = true&lt;/SPAN&gt;&lt;/SPAN&gt; 
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;set &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#maxautoticks"&gt;axis.maxAutoTicks&lt;/A&gt; = a numeric value (e.g. 10)&lt;/SPAN&gt;&lt;/SPAN&gt; 
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorspermajor"&gt;axis.minorsPerMajor&lt;/A&gt; property = a numeric value (e.g. 5)&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;With a configuration like the above, SciChart.js will calculate tick spacing on the axis with up to 10 major gridlines / labels and 5 minor gridlines per major.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#maxautoticks"&gt;axis.maxAutoTicks&lt;/A&gt;&amp;nbsp;is a hint. The axis will not output this exact number of ticks, but rather dynamically vary gridline spacing depending on zoom up to this amount.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\AutoTicks\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\AutoTicks\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTicks/AutoTicks/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;&lt;SPAN&gt;&lt;SPAN&gt;Specifying Major &amp;amp; Minor Deltas&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;There are two methods to control gridline &amp;amp; label spacing in SciChart.js. The first is the simplest, by specifying axis major &amp;amp; minor delta.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;set &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autoticks"&gt;axis.autoTicks&lt;/A&gt; = &lt;STRONG&gt;false&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; 
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;set &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#maxautoticks"&gt;axis.majorDelta&lt;/A&gt; = a numeric value (e.g. 2)&lt;/SPAN&gt;&lt;/SPAN&gt; 
&lt;LI&gt;&lt;SPAN&gt;&lt;SPAN&gt;set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorspermajor"&gt;axis.minorDelta&lt;/A&gt; = a numeric value (e.g. 0.4)&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;&lt;SPAN&gt;With a configuration like the above, SciChart.js will calculate tick spacing on the axis exactly an interval of 2 between major gridlines / labels and 0.4 between minor gridlines.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\AutoTicksFalse\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\AutoTicksFalse\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;&lt;SPAN&gt;This results in the following output:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTicks/AutoTicksFalse/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: that Major/Minor Delta behaves differently for the Logarithmic Axis.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Dynamic Control of Gridline, Label &amp;amp; Tick Spacing on Zoom&lt;/H2&gt;
&lt;P&gt;The above method&amp;nbsp;of setting Major/Minor Delta could be dynamic if you combine with&amp;nbsp;&lt;A href="75091468-bbf7-49ad-9841-c5d935660429"&gt;Listening to Axis Range Changes&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;However, if you want to have finer grained control over axis gridline, label or minor gridline spacing, then read&amp;nbsp;&lt;A href="31e819ca-a224-4e7a-8fa1-4c8301fb6108"&gt;The Tick Provider API Documentation&lt;/A&gt;.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="31e819ca-a224-4e7a-8fa1-4c8301fb6108" Status="New Topic" CreatedOn="2023-03-08T20:55:37.715538Z" ModifiedOn="2023-03-21T19:08:50.7306316Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AxisTicks-GridLineAndLabelSpacingProgrammatically" BuildFlags="">
                    <Title m="2023-03-21T18:34:18.3550103Z">The TickProvider API</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-21T19:08:50.7306316Z">&lt;P&gt;If you want to have absolute control over the gridlines, labels and minor gridline spacing in SciChart.js, you can use the &lt;STRONG&gt;TickProvider API&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Every axis implementation has an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#tickprovider"&gt;axisCore.tickProvider&lt;/A&gt; property. This accepts a class which inherits&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/tickprovider.html"&gt;TickProvider&lt;/A&gt;. Several classes are built-in such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numerictickprovider.html"&gt;NumericTickProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmictickprovider.html"&gt;LogarithmicTickProvider&lt;/A&gt; which SciChart uses internally.&lt;/P&gt;
&lt;P&gt;The inheritence diagram for TickProviders in SciChart.js looks like this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/TickProviders_InheritenceDiagram.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;You can create your own TickProvider if you want to have absolute control over the axis gridlines and label spacing. This API allows you to create some pretty advanced customisations with SciChart.js that are hard to achieve otherwise.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Example 1: Our NumericTickProvider &amp;nbsp;&lt;/H2&gt;
&lt;P&gt;Below here how our&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numerictickprovider.html"&gt;NumericTickProvider&lt;/A&gt;&amp;nbsp;is implemented. This code is shared for example purposes so you can see the inner workings of this class. &lt;STRONG&gt;For a worked example, scroll down&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In the code below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The method&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numerictickprovider.html#getmajorticks"&gt;getMajorTicks()&lt;/A&gt; returns&amp;nbsp;an array of values where you want to place major gridlines and labels.
&lt;LI&gt;The method&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numerictickprovider.html#getminorticks"&gt;getMinorTicks()&lt;/A&gt; returns an array of values where you want to place minor gridlines.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Both arrays are in data-coordinates, not pixels. E.g. if your Chart has data between 0..10 then you want to set major gridlines at 2,4,6,8 then return [2, 4, 6, 8] as an array from getMajorTicks.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Definition of NumericTickProvider from the SciChart.js source code.&lt;BR&gt;export class NumericTickProvider extends TickProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly minDeltaValue: number = 1e-13;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private webAssemblyContext: TSciChart | TSciChart3D;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(webAssemblyContext: TSciChart | TSciChart3D) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.webAssemblyContext = webAssemblyContext;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&amp;nbsp;Gets an array of minor ticks (data-values values where SciChart will place minor gridlines).&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public getMinorTicks(minorDelta: number, majorDelta: number, visibleRange: NumberRange): number[] {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const deltaRange = new NumberRange(minorDelta, majorDelta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tickRange = visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!this.isParamsValid(tickRange, deltaRange)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.calculateTicks(tickRange, deltaRange.min, deltaRange.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Gets an array of major ticks (data-values values where SciChart will place labels and major gridlines).&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public getMajorTicks(minorDelta: number, majorDelta: number, visibleRange: NumberRange): number[] {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const deltaRange = new NumberRange(minorDelta, majorDelta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tickRange = visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!this.isParamsValid(tickRange, deltaRange)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.calculateTicks(tickRange, deltaRange.max, deltaRange.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @summary Performs sanity checks to see if parameters are valid.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected isParamsValid(visibleRange: NumberRange, deltaRange: NumberRange): boolean {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Guard.notNull(visibleRange, "visibleRange");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Guard.notNull(deltaRange, "deltaRange");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isRealNumber(visibleRange.min) &amp;amp;&amp;amp; isRealNumber(visibleRange.max) &amp;amp;&amp;amp; deltaRange.min &amp;gt; 0 &amp;amp;&amp;amp; deltaRange.max &amp;gt; 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @summary Performs the Numeric tick calculation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected calculateTicks(visibleRange: NumberRange, delta: number, majorDelta: number): number[] {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const results: number[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const min = visibleRange.min;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const max = visibleRange.max;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let current = min;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const calcMajorTicks = delta === majorDelta;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const numberUtil = this.webAssemblyContext.NumberUtil;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!numberUtil.IsDivisibleBy(current, delta)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; current = numberUtil.RoundUp(current, delta);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const start = current;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let tickCount = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; while (current &amp;lt;= max) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // TRUE if major ticks are calculated &amp;amp;&amp;amp; Current is divisible by MajorDelta&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // or if minor ticks are calculated &amp;amp;&amp;amp; Current is NOT divisible by MajorDelta&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!(numberUtil.IsDivisibleBy(current, majorDelta) !== calcMajorTicks)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; results.push(current);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; current = start + ++tickCount * delta;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return results;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Example 2: Custom TickProvider&lt;/H2&gt;
&lt;P&gt;Below we've included a worked example of a custom tickprovider. This is a very simplistic implementation that returns hard-coded spacings for major &amp;amp; minor gridlines. However, it could be easily customised to behave dynamically based on the minorDelta, majorDelta and visibleRange passed into the getMajorTicks/getMinorTicks functions.&lt;/P&gt;
&lt;P&gt;First, create the TickProvider class and implement getMajorTicks/getMinorTicks:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\TickProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then, apply the TickProvider to an axis like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\TickProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTicks\TickProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in an uneven spacing of ticklines or gridlines in SciChart which looks like this:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTicks/TickProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;You can customize TickProviders further and even return dynamic arrays. For example, if you wanted to ensure an equally sized grid independent of zoom level, or to dynamically change the number of gridlines on screen, you can do it with the TickProvider API. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="43eff091-2936-4343-b875-8bf40d36b2c2" Status="New Topic" CreatedOn="2023-03-16T21:46:58.5751564Z" ModifiedOn="2023-03-20T18:00:47.7653685Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RotatingAxisLabels" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-20T18:00:47.7653685Z">&lt;P&gt;SciChart.js supports rotation of labels&amp;nbsp;for all 2D axis types and&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProviders&lt;/A&gt;. This lets you display longer labels, or pack more labels onto an x axis.&lt;/P&gt;
&lt;P&gt;To use rotated labels on a chart, or vertical labels, use this code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\RotatingLabels\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\RotatingLabels\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/RotatingLabels/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For an example of using rotation with text labels see the&amp;nbsp;&lt;A href="http://demo.scichart.com/javascript-multiline-labels" target=_blank&gt;Multiline and Rotated Text Labels&lt;/A&gt; demo in our examples suite.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Further notes on Label Culling &amp;amp; Spacing&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;An axis with rotated labels obeys other rules of axis tick spacing and label culling. Take a look at the section on&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Gridline and Label Spacing (Interval)&lt;/A&gt; for some more information how this works.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When working with rotated labels that are not horizontal or vertical, it may be necessary to turn off&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisrenderer.html#hideoverlappinglabels"&gt;axis.axisRenderer.hideOverlappingLabels&lt;/A&gt;&amp;nbsp;as the bounding box of a partially rotated label is much larger than the text itself.This property may also be set via the axis constructor option&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iaxisbase2doptions.html#hideoverlappinglabels"&gt;hideOverlappingLabels&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;To do this, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hideOverlappingLabels &amp;nbsp;Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Either&lt;BR&gt;const xAxis = new NumericAxis(wasmContext, {&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;Allow labels to overlap&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hideOverlappingLabels : false&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// Or&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;// Allow rotated labels to overlap&lt;BR&gt;xAxis.axisRenderer.hideOverlappingLabels = false;&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="60d1c9a4-f68a-4d26-8341-fae611c47315" Status="New Topic" CreatedOn="2023-03-16T21:47:11.680057Z" ModifiedOn="2023-03-17T12:29:49.5055809Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MultiLineLabels" BuildFlags="">
                    <Title m="2023-03-17T12:13:02.3901776Z">Text and Multi-Line Labels</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-17T12:29:49.5055809Z">&lt;P&gt;Text Labels and Multi-Line can be achieved in SciChart.js using the TextLabelProvider type. &lt;/P&gt;
&lt;P&gt;For more info, see the&amp;nbsp;&lt;A href="f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb"&gt;Text / String Axis article&lt;/A&gt; under Axis Types. &lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/TextAxis-Multiline/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The multi-line text labels example taken from&amp;nbsp;&lt;/EM&gt;&lt;A href="f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb"&gt;&lt;EM&gt;Text / String Axis article&lt;/EM&gt;&lt;/A&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="2016bf44-40c8-4b67-a90a-6c3df8056289" Status="New Topic" CreatedOn="2023-03-16T21:49:15.94384Z" ModifiedOn="2023-03-20T18:19:52.5708626Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ImageLabels" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-20T18:19:52.5708626Z">&lt;P&gt;In additional to all the label formatting options by SciChart.js,&amp;nbsp;it is possible to go further and override the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#getlabeltexture"&gt;LabelProvider.getLabelTexture()&lt;/A&gt;&lt;STRONG&gt; &lt;/STRONG&gt;function&amp;nbsp;which converts the label text that is produced by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html#formatlabel"&gt;LabelProvider.formatLabel()&lt;/A&gt; into a texture that can be drawn by WebGL.&amp;nbsp;This gives you total control over the appearance of your labels so that you can use images, complex text, or a combination.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;code below&amp;nbsp;is taken from our online &lt;A href="http://demo.scichart.com/javascript-image-labels" target=_blank&gt;Image Labels example&lt;/A&gt;. The key part is to pass an HtmlImageElement to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/texturemanager.html#createtexturefromimage"&gt;TextureManager.createTextureFromImage()&lt;/A&gt;. Everything else here is about mapping the data to the images.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\ImageLabels\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/ImageLabels/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Textures created this way are automatically cached for performance, and disposed of (deleted) when the chart is deleted.&lt;/P&gt;
&lt;P&gt;Normally, the size of the texture returned is used as the width and height for layout purposes.&amp;nbsp; Depending on the shape of your images, you may also want to override the &lt;STRONG&gt;getLabelWidth&lt;/STRONG&gt; and &lt;STRONG&gt;getLabelHeight&lt;/STRONG&gt; methods on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelproviderbase2d.html"&gt;LabelProviderBase2D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For an example of how to do this with TypeScript, React and npm / webpack to import images, see our&amp;nbsp;&lt;A href="http://demo.scichart.com/javascript-image-labels" target=_blank&gt;Image Labels example&lt;/A&gt;, part of the SciChart Demo.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="96971248-32ef-4309-a9bd-bf3535cb065f" Status="New Topic" CreatedOn="2023-03-20T18:34:00.818397Z" ModifiedOn="2023-03-20T19:55:11.1527989Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LabelAlignmentPositioning" BuildFlags="">
                    <Title m="2023-03-20T18:52:52.2915557Z">Label Style, Alignment and Positioning</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-20T19:55:11.1527989Z">&lt;H2&gt;The LabelStyle property&lt;/H2&gt;
&lt;P&gt;The Axis includes a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#labelstyle"&gt;LabelStyle&lt;/A&gt; property. This may be set in the&amp;nbsp;constructor options or set on the axis itself. Apply a labelStyle as follows to an axis:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Label Style&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { NumericAxis, ELabelAlignment, Thickness&amp;nbsp;} from "scichart";&lt;BR&gt;&lt;BR&gt;const axis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelStyle: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; alignment: ELabelAlignment.Auto,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 16,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; color: "White",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; } // type TTextStyle&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The type for LabelStyle is&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#ttextstyle"&gt;TTextStyle&lt;/A&gt;. The Definition for TTextStyle is found below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;TTextStyle definition&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;/**&lt;BR&gt;&amp;nbsp;* A type class to contain information about Axis Label text styles&lt;BR&gt;&amp;nbsp;* @remarks&lt;BR&gt;&amp;nbsp;* - Set the fontFamily as a string to set the font&lt;BR&gt;&amp;nbsp;* - Set the fontSize as you would in HTML/CSS&lt;BR&gt;&amp;nbsp;* - Set the fontWeight and fontStyle as you would in HTML/CSS&lt;BR&gt;&amp;nbsp;* - Set the color as an HTML Color code to define the color&lt;BR&gt;&amp;nbsp;*/&lt;BR&gt;export type TTextStyle = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontWeight?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontStyle?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; color?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Padding is left 4, right 4, top 2, bottom 0 by default.&amp;nbsp;This is because there is natural space below the text baseline.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * If you are using text labels rather than just numbers, or when using native text, &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * you may want to increase the bottom padding.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; padding?: Thickness;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Horizontal label alignment for vertical axes.&amp;nbsp; Default Auto */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; alignment?: ELabelAlignment;&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Label Alignment &amp;amp; Padding&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;labelStyle&lt;/STRONG&gt; option on an axis contains &lt;STRONG&gt;padding&lt;/STRONG&gt; and &lt;STRONG&gt;alignment&lt;/STRONG&gt; which can be used to adjust the positioning of axis labels.&lt;/P&gt;
&lt;P&gt;Padding refers to the space around the label.&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;By default, a label will not be displayed if if would overlap with the previous label, and this overlap includes padding.&amp;nbsp;
&lt;LI&gt;By default the padding is 4 pixels left and&amp;nbsp;right, 2 pixels top,&amp;nbsp;and 0 bottom padding.&amp;nbsp;This is because the font height includes space below the baseline of the text.&amp;nbsp;
&lt;UL&gt;
&lt;LI&gt;For numbers this usually results in nicely centered labels for a vertical axis, but depending on your font size and style, or if you are using text, you may want to adjust the padding to improve the vertical alignment, or to fit in labels that would otherwise be hidden.&lt;/LI&gt;&lt;/UL&gt;
&lt;LI&gt;Alignment is an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elabelalignment.html"&gt;ELabelAlignment&lt;/A&gt; which can be one of the options below.&amp;nbsp; Auto is the default.&amp;nbsp;&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;KeepLabelsWithinAxis property&lt;/H2&gt;
&lt;P&gt;Another property which defines label placement is keepLabelsWithinAxis. &lt;/P&gt;
&lt;P&gt;By default the first and last labels on an axis are shifted so that they stay within the bounds of the axis itself.&amp;nbsp; If you want to turn this off so that all labels are centered, you can disable&amp;nbsp;&lt;STRONG&gt;keepLabelsWithinAxis&lt;/STRONG&gt; as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;keepLabelsWithinAxis Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Either&lt;BR&gt;const xAxis = new NumericAxis(wasmContext, {&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; //&amp;nbsp;Allow labels to overlap&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; keepLabelsWithinAxis: false&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// Or&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;// Allow rotated labels to overlap&lt;BR&gt;xAxis.axisRenderer.keepLabelsWithinAxis= false;&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Worked Example: Alignment of labels &lt;/H2&gt;
&lt;P&gt;In the example below we show how to apply the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elabelalignment.html"&gt;ELabelAlignment&lt;/A&gt;&amp;nbsp;enum to an axis. We've chosen&amp;nbsp;&lt;A href="dbda6c22-a06d-4301-9b1d-d83b542d030f"&gt;LogarithmicAxis&lt;/A&gt; for this demo to get different length labels, such as "10", "100", "1000". Try editing the label alignment in the sandbox below to see how it affects the chart.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelAlignment\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisLabels\LabelAlignment\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisLabels/LabelAlignment/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note: Label alignment only applies to vertical axis.&amp;nbsp;&amp;nbsp;Labels for horizontal axes&amp;nbsp;are always centered horizontally.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="c9d93975-f77e-4f54-8524-8321db1b7d36" AutoIndex="false">
                <Caption m="2023-03-08T19:08:58.8254678Z">Axis Range, Scaling</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="f43a75da-4a63-41a6-8db9-ff0ea13a5198" Status="New Topic" CreatedOn="2016-08-04T11:58:52.0955062Z" ModifiedOn="2023-03-14T16:47:12.3334519Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - AutoRange" BuildFlags="">
                    <Title m="2023-03-14T16:47:12.0902529Z">Axis Ranging - AutoRange</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-14T16:47:12.3334519Z">&lt;P&gt;At the outset,&amp;nbsp;the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;Axis.visibleRange&lt;/A&gt; is adjusted to be equal to the&amp;nbsp;data range&amp;nbsp;of an axis. However, an axis won't adjust its VisibleRange&amp;nbsp;automatically when data changes, unless it&amp;nbsp;is configured to do this.&amp;nbsp;The default&amp;nbsp;behavior&amp;nbsp;can be changed&amp;nbsp;using different&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autorange"&gt;AutoRange&lt;/A&gt; modes.&lt;/P&gt;
&lt;H2&gt;AutoRange Once&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;This is the&lt;STRONG&gt;&amp;nbsp;default setting&lt;/STRONG&gt;. The axis will attempt to autorange once to fit the data as you start the chart. This is an one-time action - the VisibleRange&amp;nbsp;won't adjust to any data changes in future.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: Specifying&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;axis.visibleRange&lt;/A&gt; at startup will set that as the first default range. AutoRange.Once is ignored when a visibleRange is set&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Once\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Once\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;AutoRange Always&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;In this mode, the axis will attempt to autorange always to fit the data every time the chart is drawn. The &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt; &lt;STRONG&gt;will adjust&lt;/STRONG&gt; to data changes correspondingly.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN&gt;Please be aware that this &lt;STRONG&gt;setting will override any other ranging&lt;/STRONG&gt;, including zooming and panning by modifiers, but is useful in situations where you always want to view the extents of the data.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;To combine AutoRanging and user-zooming you need to use &lt;STRONG&gt;ZoomState&lt;/STRONG&gt; - a special technique we will talk about later. &lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;SPAN&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Always\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Once\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/SPAN&gt;
&lt;H2&gt;AutoRange Never&lt;/H2&gt;&lt;SPAN&gt;&lt;A id=OLE_LINK53 name=OLE_LINK53&gt;&lt;/A&gt;&lt;/SPAN&gt;
&lt;P&gt;The &lt;STRONG&gt;axis will never autorange&lt;/STRONG&gt;. With this option, you would need to set the VisibleRange manually. The &lt;STRONG&gt;VisibleRange&lt;/STRONG&gt;&amp;nbsp;&lt;STRONG&gt;won't adjust&lt;/STRONG&gt; to any data changes.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Never\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-Never\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Padding or Spacing with GrowBy&lt;/H2&gt;
&lt;P&gt;Also, it is possible to&amp;nbsp;&lt;STRONG&gt;add spacing&lt;/STRONG&gt; or padding to the visibleRange when the chart autoranges via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#growby"&gt;GrowBy&lt;/A&gt; property. It allows to specify two fractions which will be always applied to the&amp;nbsp;Min,&amp;nbsp;Max values of visibleRange :&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-GrowBy\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\AutoRange-GrowBy\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Programatically Ranging an Axis&lt;/H2&gt;
&lt;P&gt;See the section on&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Setting and Getting VisibleRange&lt;/A&gt; for more details.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="dfe50e75-c34a-4d96-98c7-9ce9855956cd" Status="New Topic" CreatedOn="2017-10-24T16:15:42.5610104Z" ModifiedOn="2023-03-16T09:16:47.6454144Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - Setting and Getting VisibleRange" BuildFlags="">
                    <Title m="2023-03-14T16:52:32.3041679Z">Axis Ranging - Set Range and Zoom to Fit</Title>
                    <ContentsTitle m="2023-03-14T16:52:38.1453647Z">Axis Ranging - Set Range and Zoom to Fit</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T09:16:47.6454144Z">&lt;H2&gt;What is VisibleRange?&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;VisibleRange&lt;/A&gt;&lt;/STRONG&gt; is an actual&amp;nbsp;axis range, measured&amp;nbsp;in chart units.&amp;nbsp;This is a part&amp;nbsp;of a chart&amp;nbsp;that is currently visible in a viewport.&lt;/P&gt;
&lt;P&gt;This is a different concept to the Data Range, which is the extents of the data on the chart.&lt;/P&gt;
&lt;P&gt;The diagram below explains the concept of the VisibleRange:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="Adjusting XAxis and YAxis visible range in a JavaScript Chart" src="images/Axis_visibleRange.png"&gt;&lt;/P&gt;
&lt;H2&gt;Setting Axis.VisibleRange Programmatically&lt;/H2&gt;
&lt;P&gt;To programmatically range an axis, set the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;AxisCore.visibleRange&lt;/A&gt; property&amp;nbsp;with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numberrange.html"&gt;NumberRange&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\SetGetVisibleRange\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\SetGetVisibleRange\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisRanging/SetGetVisibleRange/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Click the button above to update yAxis.visibleRange. View the codepen in full to see how this works.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note the&amp;nbsp;&lt;A href="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8"&gt;CategoryAxis&lt;/A&gt;&amp;nbsp;is treated as a special case. Although it has the same property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html#visiblerange"&gt;CategoryAxis.visibleRange&lt;/A&gt; of type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numberrange.html"&gt;NumberRange&lt;/A&gt;, it expects values to be indices, not data-values.&lt;/P&gt;
&lt;P&gt;The reason for this is that&amp;nbsp;this axis type works with with&amp;nbsp;&lt;STRONG&gt;data indexes, not actual data values.&lt;/STRONG&gt; So a&amp;nbsp;&lt;STRONG&gt;NumberRange&lt;/STRONG&gt; should be applied instead, with lower data index as Min and Upper data index as Max.&lt;/P&gt;
&lt;P&gt;To learn more about &lt;STRONG&gt;how to convert values&lt;/STRONG&gt; from Data-values to Indexes and back in a CategoryAxis, please refer to the&amp;nbsp;&lt;A href="71de4b19-4e61-4f9d-be5e-9b90bb2587f3"&gt;Convert Pixels to Data Coordinates&lt;/A&gt; article.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Zooming to fit&amp;nbsp;all the Data&lt;/H2&gt;
&lt;P&gt;Sometimes it is required to&amp;nbsp;make&amp;nbsp;an axis to &lt;STRONG&gt;show the full&amp;nbsp;extent of&amp;nbsp;the data&lt;/STRONG&gt;&amp;nbsp;associated with it. There are several ways to achieve this in code:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Set the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#visiblerange"&gt;visibleRange&lt;/A&gt; equal to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getmaximumrange"&gt;axis.getMaximumRange()&lt;/A&gt; 
&lt;LI&gt;Configure&amp;nbsp;the axis to auto adjust&amp;nbsp;correspondingly to&amp;nbsp;data changes. See the article&amp;nbsp;&lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;AxisRanging - AutoRange&lt;/A&gt;. 
&lt;LI&gt;call the&amp;nbsp;functions from&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomextents"&gt;ZoomExtents()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomextentsy"&gt;ZoomExtentsY()&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#zoomextentsx"&gt;ZoomExtentsX()&lt;/A&gt;&amp;nbsp;to force a zoom to fit operation once. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Try this example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\ZoomExtents\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\ZoomExtents\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisRanging/ZoomExtents/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;What if you want to allow the user to zoom to fit using the mouse? All the zooming, panning operations via mouse or touch are handled by ChartModifiers in SciChart.js. See the&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;,&amp;nbsp;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt; for information.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="9df3f70b-952c-4819-8871-985bd4de45e5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f43a75da-4a63-41a6-8db9-ff0ea13a5198" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="3dad88b3-2190-414b-b370-6e416dac05f5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="75091468-bbf7-49ad-9841-c5d935660429" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="75091468-bbf7-49ad-9841-c5d935660429" Status="New Topic" CreatedOn="2017-10-24T16:16:39.0850588Z" ModifiedOn="2023-03-16T09:16:47.6519335Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Ranging - How to Listen to VisibleRange Changes" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T09:16:47.6519335Z">&lt;H2&gt;How to&amp;nbsp;listen to VisibleRange changes&lt;/H2&gt;
&lt;P&gt;It is possible to subscribe to listening to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;AxisCore.visibleRange&lt;/A&gt; changes using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerangechanged"&gt;AxisCore.visibleRangeChanged&lt;/A&gt; event.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\VisibleRangeChanged\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisRanging\VisibleRangeChanged\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisRanging/VisibleRangeChanged/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The most typical use for this callback is to perform some kind of operation when the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;AxisCore.visibleRange&lt;/A&gt;&amp;nbsp;changes, such as updating UI.&lt;/P&gt;
&lt;P&gt;It is also possible to use this callback to restrict the VisibleRange in some way, e.g set a bounded or clipped range onto&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;AxisCore.visibleRange&lt;/A&gt; when the range changes outside of a desired area.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="2f06eab1-6fe9-4f09-bb89-7d92e56aa281" AutoIndex="false">
                <Caption m="2023-03-08T19:09:45.6183578Z">Misc</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="71de4b19-4e61-4f9d-be5e-9b90bb2587f3" Status="New Topic" CreatedOn="2016-08-10T16:53:27.1832552Z" ModifiedOn="2022-04-12T19:39:21.4777887Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis APIs - Convert Pixel to Data Coordinates" BuildFlags="">
                    <Title />
                    <ContentsTitle m="2022-04-12T19:39:21.4777887Z">Axis APIs - Convert Pixel to Data Coordinates</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2022-04-06T20:30:38.6375226Z">&lt;P&gt;&lt;SPAN&gt;SciChart.js provides a clean and simple API to transform pixels to data-values and vice versa via the CoordinateCalculator API&lt;/SPAN&gt;&lt;SPAN&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;Where Pixel Coordinates are measured from&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;It is important to note when converting Pixels to Data Coordinates and vice versa that pixels are measured from the top-left inside corner of the series area of the chart known as the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#viewrect"&gt;viewRect&lt;/A&gt;. So, the pixel coordinate (0,0) corresponds to the data-value at [xAxis.visibleRange.min, yAxis.visibleRange.max] and the pixel coordinate (Width, Height) corresponds to the data-value at [xAxis.visibleRange.max, yAxis.visibleRange.min].&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;Learn about Axis.VisibleRange and how to get/set this property at the page:&amp;nbsp;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Axis Ranging - Setting and Getting VisibleRange&lt;/A&gt;&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="Converting pixel coordinates to data coordinates using SciChart.js Fast Realtime JavaScript Charts" src="images/Axis_pixel_coordinates.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Converting between Pixels and Data Coordinates&lt;/H2&gt;
&lt;P&gt;To convert between pixel and data coordinates, you must first get a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/coordinatecalculatorbase.html"&gt;CoordinateCalculator&lt;/A&gt; instance. This is retrieved with the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Getting a CoordinateCalculator&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const xAxis = sciChartSurface.xAxes.get(0); // Type AxisBase2D&lt;BR&gt;const coordCalc = xAxis.getCurrentCoordinateCalculator(); // Type CoordinateCalculatorBase&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Data-values are converted to pixel coordinates via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/coordinatecalculatorbase.html#getcoordinate"&gt;coordinateCalculator.getCoordinate()&lt;/A&gt; method. Also, Coordinates in pixels are converted back to chart data-values via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/coordinatecalculatorbase.html#getdatavalue"&gt;coordinateCalculator.getDataValue()&lt;/A&gt;&amp;nbsp;method. It expects a coordinate in pixels and returns the closest data value to that coordinate.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;All coordinates are relative to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#viewrect"&gt;viewRect&lt;/A&gt; - the area where series are drawn inside the axis on the&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You can find some examples how to do the conversions below.&lt;/P&gt;
&lt;H3&gt;Converting NumericAxis Data to Pixels&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eaxistype.html#numericaxis"&gt;NumericAxis&lt;/A&gt; is a&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Value-Axis&lt;/A&gt; which uses data-values for measurement. It can be used to display numbers, or dates (stored as unix time stamps) formatted as date/time using the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider&lt;/A&gt; feature.&lt;/P&gt;
&lt;P&gt;To convert between pixel-coordinates relative to viewRect and data-values on a NumericAxis, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const xAxis = sciChartSurface.xAxes.get(0); // Type AxisBase2D&lt;BR&gt;const coordCalc = xAxis.getCurrentCoordinateCalculator(); // Type CoordinateCalculatorBase&lt;/P&gt;
&lt;P&gt;// Gets the pixel coordinate relative to viewRect for data-value 1.23 &lt;STRONG&gt;on this axis only&lt;/STRONG&gt;&lt;BR&gt;const coord = coordCalc.getCoordinate(1.23);&lt;BR&gt;&lt;BR&gt;// Converts a pixel coordinate back to dataValue&lt;BR&gt;const dataValue= coordCalc.getDataValue(coord);&lt;BR&gt;&lt;BR&gt;// dataValue should === 1.23&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Converting CategoryAxis Data to/from Pixels&lt;/H3&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eaxistype.html#categoryaxis"&gt;CategoryAxis&lt;/A&gt; are treated slightly differently. This axis type can also be&amp;nbsp;used to display numbers, or dates (stored as unix time stamps) but we must perform an extra step to convert between data-value, index and pixel coordinate.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;A&amp;nbsp;Category Axis uses the index to data not the data-value itself&amp;nbsp;for measurement. Learn more about Category Axis at the page&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Axis Types in SciChart.js&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Category Coordinate conversion&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {CategoryCoordinateCalculator} from "scichart/Charting/Numerics/CoordinateCalculators/CategoryCoordinateCalculator";&lt;BR&gt;import {CategoryAxis} from "scichart/Charting/Visuals/Axis/CategoryAxis";&lt;BR&gt;&lt;BR&gt;const xAxis = new CategoryAxis(wasmContext);&lt;BR&gt;// Get the CoordinateCalculator&lt;BR&gt;const coordCalc = xAxis.getCurrentCoordinateCalculator();&lt;BR&gt;// OR TypeScript only, cast as CategoryCoordinateCalculator&lt;BR&gt;const coordCalc = xAxis.getCurrentCoordinateCalculator() as CategoryCoordinateCalculator;&lt;/P&gt;
&lt;P&gt;// Get the pixel coordinate at index=10&lt;BR&gt;const coord = coordCalc.getCoordinate(10);&lt;/P&gt;
&lt;P&gt;// Convert a coordinate back to index&lt;BR&gt;const index = coordCalc.getDataValue(coord);&lt;/P&gt;
&lt;P&gt;// Convert an index to data-value&lt;BR&gt;const dataValue = coordCalc.transformIndexToData(index);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Transforming Pixels to the ViewRect&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;Functions exist to translate a point from the parent canvas of the chart to the viewRect. This is useful if you want to transform a mouse-coordinate on the parent canvas into a data-value on the chart. For more info about his, se the&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit-Test API section&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;SPAN&gt;&lt;IMG border=0 alt="" src="images/Axis_Series_ViewRect.png"&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The SciChartSurface sits on a canvas in the DOM. The viewRect is the inner area which draws the series.&lt;/EM&gt;&lt;/P&gt;
&lt;P align=left&gt;To transform a point on the parent SciChartSurface to the viewRect, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Transforming Points from viewRect&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { Point } from "../../Core/Point";&lt;BR&gt;import { Rect } from "../../types/Rect";&lt;BR&gt;import { translateFromCanvasToSeriesViewRect } from "../../utils/translate";&lt;BR&gt;&lt;BR&gt;const sciChartSurface; // Assuming a SciChartSurface instance&lt;BR&gt;const point = new Point(100, 200);&lt;BR&gt;const viewRectPoint =&amp;nbsp;translateFromCanvasToSeriesViewRect(point, sciChartSurface.seriesViewRect);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="fdd060ae-f96e-4807-a996-0b4a44bcc3f2" AutoIndex="false">
                <Caption m="2023-03-08T19:07:54.2107432Z">Axis Types</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8" Status="New Topic" CreatedOn="2022-04-13T18:08:23.4605987Z" ModifiedOn="2023-03-16T21:53:07.2912626Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CategoryAxis" BuildFlags="">
                    <Title m="2023-03-09T17:52:50.5313296Z">The Category Axis</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T21:53:07.2912626Z">&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html"&gt;CategoryAxis&lt;/A&gt;&amp;nbsp;treats values a little differently. This is a special axis type which uses the X-Index not the X-Value to measure chart series.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Learn more about the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;commonalities between axis here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Difference between CategoryAxis and NumericAxis&lt;/H2&gt;
&lt;P&gt;Imagine you want to plot the data:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Age (XAxis)&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Cats&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Dogs&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Fish&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;1&lt;/TD&gt;
&lt;TD&gt;7&lt;/TD&gt;
&lt;TD&gt;7&lt;/TD&gt;
&lt;TD&gt;8&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;9&lt;/TD&gt;
&lt;TD&gt;6&lt;/TD&gt;
&lt;TD&gt;5&lt;/TD&gt;
&lt;TD&gt;7&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;10&lt;/TD&gt;
&lt;TD&gt;5&lt;/TD&gt;
&lt;TD&gt;4&lt;/TD&gt;
&lt;TD&gt;3&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;20&lt;/TD&gt;
&lt;TD&gt;4&lt;/TD&gt;
&lt;TD&gt;3&lt;/TD&gt;
&lt;TD&gt;2&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;A standard&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt; (which is a value-axis) and the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html"&gt;CategoryAxis&lt;/A&gt; would display the data differently.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/CategoryAxisValueAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Here's the code to setup the chart.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;category-axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\CategoryAxisValueAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;value-axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\CategoryAxisValueAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Why is this important? &lt;STRONG&gt;In the case where you are plotting stock market data, you want to use a&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html"&gt;&lt;STRONG&gt;CategoryAxis&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;&lt;EM&gt;This is because&amp;nbsp;stock market data has gaps in it (consider the stock market has data on Monday, Tuesday, Wednesday, Thursday, Friday but not weekends). The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html"&gt;&lt;EM&gt;CategoryAxis&lt;/EM&gt;&lt;/A&gt;&lt;EM&gt;&amp;nbsp;collapses the gaps and treats each datapoint as equidistant, ignoring the X-Value.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using and Configuring a CategoryAxis&lt;/H2&gt;
&lt;P&gt;The Category Axis won't draw without either:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;At least one&amp;nbsp;series with some data&lt;/STRONG&gt; on the chart, 
&lt;LI&gt;or, &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html#defaultxstart"&gt;CategoryAxis.defaultXStart&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html#defaultxstep"&gt;defaultXStep&lt;/A&gt;&amp;nbsp;(allows a chart without any series) 
&lt;LI&gt;or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html#defaultxvalues"&gt;CategoryAxis.defaultXValues&lt;/A&gt;&amp;nbsp;(allows a chart without any series) &lt;/LI&gt;&lt;/OL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Because the CategoryAxis measures xValues using index, you need to have data on the chart to calculate x-coordinate from data index. However, we can still create a chart by specifying some defaults with the properties above.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Creating a CategoryAxis (without Data) using Defaults&lt;/H2&gt;
&lt;P&gt;The first example we're going to show uses the default properties on the CategoryAxis to display a chart without data.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\CategoryAxisWithDefaults\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\CategoryAxisWithDefaults\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/CategoryAxisWithDefaults/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the above code sample we set the CategoryAxis.defaultXStart = unix timestamp for March 1st 2023, and defaultXStep = number of seconds in one day. This tells SciChart.js to default the index calculation to 1-datapoint = 1 day and to start the xAxis from 1st March.&lt;/P&gt;
&lt;P&gt;Once you apply data to the CategoryAxis these properties will be ignored. They are only required to create and show a chart using CategoryAxis without data.&lt;/P&gt;
&lt;H2&gt;Creating a CategoryAxis with Financial Data&lt;/H2&gt;
&lt;P&gt;Let's create a chart with CategoryAxis by supplying some data below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\CategoryAxisFinancialData\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/CategoryAxisFinancialData/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The above example makes a web call to Binance to fetch Bitcoin/USD prices. If you see a blank chart, check the Js console as this web call may be blocked. You can always edit the Codepen to substitute your own data!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="dbda6c22-a06d-4301-9b1d-d83b542d030f" Status="New Topic" CreatedOn="2021-10-05T14:59:02.4598929Z" ModifiedOn="2023-12-22T13:57:40.934037Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Logarithmic Axis" BuildFlags="">
                    <Title m="2023-03-09T17:52:46.65006Z">The Logarithmic Axis</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-12-22T13:57:40.934037Z">&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html"&gt;LogarithicAxis&lt;/A&gt; is a Value axis similar to the normal NumericAxis, but where the tick values increase exponentially. Plotting data on such an axis is equivalent to plotting the log of that data. You can set the logarithmic base using the logBase property. eg logBase: 10 (the default) will result in ticks like 1, 10, 100, 1000. logBase 2 will result in ticks like 2, 4, 8, 16, 32.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Learn more about the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;commonalities between axis here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;&lt;SPAN&gt;Create and Configure a LogarithmicAxis&lt;/SPAN&gt;&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;LogarithmicAxis, use the following code:&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\LogarithmicAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\LogarithmicAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;This results in the following output:&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/LogarithmicAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Configuration Options for Log Axis&lt;/H2&gt;
&lt;H3&gt;labelFormat property&lt;/H3&gt;
&lt;P&gt;When using logarithmicAxis and the labelFormat&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat.Scientific&lt;/A&gt;, the logBase of the axis will be used as the base for the label. This is NOT the case for&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat.Exponential&lt;/A&gt; which is always base 10.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const logAxis = new LogarithmicAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Format with&amp;nbsp;Scientific notation e.g. 1x10^3&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelFormat: ENumericFormat.Scientific,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPrecision: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minorsPerMajor: 10,&lt;BR&gt;&amp;nbsp; });&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Plotting Negative Numbers&lt;/H3&gt;
&lt;P&gt;LogarithmicAxis cannot show both positive and negative numbers on the same axis, so if your data is negative you need to set isNegative on the axis.&amp;nbsp; If you need to show positive and negative log data, you need to split it into positive and negative sets and plot them on seperate&amp;nbsp;&lt;A href="af7dd07c-7746-4a9d-a9ea-1afc4bb95701"&gt;vertically stacked axes&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Minor&amp;nbsp;Tick Mode&lt;/H3&gt;
&lt;P&gt;By default, Major gridlines are spaced logarithmically, and Minor gridlines are spaced linearly between them. If your visible range is extremely large, you may want to switch to logarithmic spacing for minor gridlines, which you can do with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html#minortickmode"&gt;LogarithmicAxis.minorTickMode&lt;/A&gt; property which is an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elogarithmicmajortickmode.html"&gt;ELogarithmicMinorTickMode&lt;/A&gt;&amp;nbsp;which can be Logarithmic, Linear or Auto&lt;/P&gt;
&lt;P&gt;Auto mode means&amp;nbsp;it switches from linear to Logarithmic when the visible range is such that the first linear minor tick would be more than 70% of the major tick&lt;/P&gt;
&lt;H3&gt;Major Tick Mode - Financial Log Charts&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;For financial charts you often want base 2, with a relatively small range, but you don't want your tick labels to be powers of 2. In this case set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/logarithmicaxis.html#majortickmode"&gt;LogarithmicAxis.majorTickMode&lt;/A&gt; to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elogarithmicmajortickmode.html"&gt;ELogarithmicMajorTickMode.RoundNumbers&lt;/A&gt;. This will give you labels with nice round numbers, at the expense of gridlines that are not exactly equally spaced.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H3&gt;LabelFormat&lt;/H3&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;labelFormat:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat.SignificantFigures&lt;/A&gt;&lt;/STRONG&gt; is also helpful as it retains precision for very small values, while not resulting in unnecessary decimal places for large values.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Worked Example - LogAxis Configuration Options&lt;/H2&gt;
&lt;P&gt;Here's a worked example that combines some of the techniques above.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\LogarithmicAxisConfiguration\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\LogarithmicAxisConfiguration\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This produces something like this.&amp;nbsp; If you want even more control over the tick values and gridlines see&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Axis Ticks&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/LogarithmicAxisConfiguration/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="a147f355-d7f6-4731-b67f-38c1d2334c27" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="463d136b-fe1f-4960-85ac-9cb15ceb1d21" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="671c0173-629f-4521-b111-f7491f4d893b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="af7dd07c-7746-4a9d-a9ea-1afc4bb95701" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="a2426023-d535-46a2-9d53-89dbf180708b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="463d136b-fe1f-4960-85ac-9cb15ceb1d21" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="bf3b144b-2153-4d7c-ab74-152f839df85f" Status="New Topic" CreatedOn="2023-03-09T17:52:18.6637476Z" ModifiedOn="2023-03-29T17:17:19.7182183Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="NumericAxis" BuildFlags="">
                    <Title m="2023-03-09T17:52:35.3276177Z">The Numeric Axis</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-29T17:17:19.7182183Z">&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;is a Value axis and is suitable for X and Y Axis when the data on that axis is numeric (e.g. number in TypeScript). It is not suitable for non-numeric data types.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Learn more about the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;commonalities between axis here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Create and Configure a NumericAxis&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;There are lots of options that can be passed to the constructor of a NumericAxis to configure it. Some of these are in the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;common AxisBase2D type&lt;/A&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;SPAN&gt;To create and configure&amp;nbsp;a&amp;nbsp;NumericAxis, use the following code:&amp;nbsp;&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\NumericAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\NumericAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;SPAN&gt;This results in the following output:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Codepen Embed from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/NumericAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Label Formatting with ENumericFormat enum&lt;/H2&gt;
&lt;P&gt;You'll notice in the code sample above labels are formatted by passing in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat&lt;/A&gt;&amp;nbsp;to the constructor options of the axis. What's actually happening here is parameters are being passed to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#labelprovider"&gt;AxisCore.labelProvider&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;NumericAxis is quite versatile, it can format decimals with label prefix and postfix to any number of decimal places or significant figures. It can even format numbers as dates (assuming number is a unix stamp). You can find out all the options of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat&lt;/A&gt;&amp;nbsp;enum below, or on our&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;TypeDoc&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;ENumericFormat&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// import {ENumericFormat} from "scichart/types/NumericFormat";&lt;/P&gt;
&lt;P&gt;export declare enum ENumericFormat {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** No format, return the string representation unchanged */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; NoFormat = "NoFormat",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format to a specified number of decimal places */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Decimal = "Decimal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format to a specified number of significant figures */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SignificantFigures = "SignificantFigures",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format as a date in format DD/MM/YYYY&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Date_DDMMYYYY = "Date_DDMMYYYY",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format as a date in format DD/MM/YY */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Date_DDMMYY = "Date_DDMMYY",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format as a date in format DD/MM HH:MM */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Date_DDMMHHMM = "Date_DDMMHHMM",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format as a date in format DD/MM&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Date_DDMM = "Date_DDMM",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /** Format as a date in format HH:MM */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Date_HHMM = "Date_HHMM",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Format using Exponential notation to a specified number of significant figures eg 1.0E0, 1.5E1, 2.7E2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Note that this will ALWAYS be base 10, even when used on a Logarithmic axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Exponential = "Exponential",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Format using Scientific notation to a specified number of significant figures eg 1.0x10^1, 1.5x10^2, 2.7x10^3&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; * On a Logarithmic axis, the base will be the same as the axis logarithmic base&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Scientific = "Scientific"&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Further enhancement of the NumericAxis labels including custom formatting, string formatting or dynamic formatting can be achieved with the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider API&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e71de078-98d8-441a-9432-4289aa687270" Status="New Topic" CreatedOn="2023-03-09T17:53:22.618449Z" ModifiedOn="2023-03-29T17:17:49.2749469Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DateTimeNumericAxis" BuildFlags="">
                    <Title m="2023-03-09T17:53:36.7894876Z">The DateTimeNumericAxis</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-29T17:17:49.2749469Z">&lt;P&gt;&lt;SPAN&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimenumericaxis.html"&gt;DateTimeNumericAxis&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;is a Value axis (subclass of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis.html"&gt;NumericAxis&lt;/A&gt;) and has some extra formatting options and features for handling date formatting.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Learn more about the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;commonalities between axis here&lt;/A&gt;.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Create and Configure a DateTimeNumericAxis&lt;/H2&gt;
&lt;P&gt;&lt;SPAN&gt;Dates in SciChart.js are treated as Linux timestamps divided by 1000 (to get seconds from milliseconds). e.g. to create a DateTimeNumericAxis in SciChart.js, use the following code:&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\DateTimeNumericAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\DateTimeNumericAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/DateTimeNumericAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Two fundamental differences of DateTimeNumericAxis and NumericAxis are that a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt; is applied to the labelProvider property and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimedeltacalculator.html"&gt;DateTimeDeltaCalculator&lt;/A&gt; is applied to the deltaCalculator property. This allows for more intuitive date formatting &amp;amp; handling when zooming the chart. Try it!&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Date / Label Formatting Options&lt;/H2&gt;
&lt;H3&gt;Configuring Default behaviour with the SmartDateLabelProvider&lt;/H3&gt;
&lt;P&gt;You'll notice above the Date formatting is quite intuitive out of the box, and dynamically changes on zoom. The more zoomed in you are, the finer grained the date labels e.g. Month/Day becomes Day/Hour, and Day/Hour becomes Hour/Minute. This behaviour is provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt;&amp;nbsp;which is assigned to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#labelprovider"&gt;Axis.LabelProvider&lt;/A&gt; property by default.&lt;/P&gt;
&lt;P&gt;This behaviour is pretty fixed, however some options of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt;&amp;nbsp;are below:&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;The properties on SmartDateLabelProvider can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;TypeDoc API documentation&lt;/A&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: underline; POSITION: relative; COLOR: rgb(77,166,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; PADDING-LEFT: 20px; DISPLAY: block; OUTLINE-COLOR: invert; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#cursornumericformat"&gt;cursor&lt;WBR&gt;Numeric&lt;WBR&gt;Format&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#cursorprecision"&gt;cursor&lt;WBR&gt;Precision&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#formatcursorlabel"&gt;format&lt;WBR&gt;Cursor&lt;WBR&gt;Label&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#formatlabel"&gt;format&lt;WBR&gt;Label&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#linespacing"&gt;line&lt;WBR&gt;Spacing&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#numericformat"&gt;numeric&lt;WBR&gt;Format&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#postfix"&gt;postfix&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#precision"&gt;precision&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#prefix"&gt;prefix&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#rotation"&gt;rotation&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html#showwiderdateonfirstlabel"&gt;show&lt;WBR&gt;Wider&lt;WBR&gt;Date&lt;WBR&gt;OnFirst&lt;WBR&gt;Label&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Further customising the DateTimeNumericAxis Label Output&lt;/H3&gt;
&lt;P&gt;There isn't much option at the moment for customising the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimenumericaxis.html"&gt;DateTimeNumericAxis&lt;/A&gt; label formatting when using the default&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt;, however, it is possible to substitute the simpler&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datelabelprovider.html"&gt;DateLabelProvider&lt;/A&gt;&amp;nbsp;which doesn't have dynamic updating labels on zoom, and to specify your own formats.&lt;/P&gt;
&lt;P&gt;It is also possible to create a custom labelprovider class and have complete control over axis label output. More on that in the&amp;nbsp;&lt;A href="efc8de3f-7cbb-4577-9a42-9a4e5621156d"&gt;Custom Label Providers documentation page&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Here's a quick example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\DateTimeNumericAxisLabelFormatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\DateTimeNumericAxisLabelFormatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This code example above shows how you can swap the default&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/smartdatelabelprovider.html"&gt;SmartDateLabelProvider&lt;/A&gt;&amp;nbsp;on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimenumericaxis.html"&gt;DateTimeNumericAxis&lt;/A&gt;&amp;nbsp;for a simpler&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datelabelprovider.html"&gt;DateLabelProvider&lt;/A&gt;, then subscribe to axis.visibleRangeChanged to dynamically change the labelformat.&lt;/P&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/DateTimeNumericAxisLabelFormatting/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Other options are available, such as implementing a&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&amp;nbsp;&lt;A href="efc8de3f-7cbb-4577-9a42-9a4e5621156d"&gt;custom LabelProvider&lt;/A&gt;&lt;/SPAN&gt;. Overriding&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html#formatlabel"&gt;LabelProvider.formatLabel&lt;/A&gt; and formatCursorLabel allows for complete control over axis labels.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="59423216-5246-4365-a936-f76b487bd181" Status="New Topic" CreatedOn="2023-03-16T11:47:30.8754102Z" ModifiedOn="2023-03-16T19:09:37.8069012Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CommonAxisBaseType" BuildFlags="">
                    <Title m="2023-03-16T11:48:28.2269458Z">Common Axis Base Type and Options</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T19:09:37.8069012Z">&lt;P&gt;&lt;SPAN&gt;All the axis types in SciChart inherit from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;AxisCore&lt;/A&gt; - a common type shared across both 2D and 3D Charts - and all 2D Axis inherit&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html"&gt;AxisBase2D&lt;/A&gt;&lt;/STRONG&gt;.&lt;/SPAN&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The inheritence diagram for Axis in SciChart.js looks like this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/AxisBase2D_InheritenceDiagram.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Common Properties on an Axis&lt;/H2&gt;
&lt;P&gt;Common properties on an axis allow you to configure the following things:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Showing/hiding and styling of Gridlines&amp;nbsp; 
&lt;LI&gt;Showing/hiding and styling of labels 
&lt;LI&gt;Alignment of the axis 
&lt;LI&gt;Formatting of labels 
&lt;LI&gt;Getting / setting visibleRange or padding 
&lt;LI&gt;Getting / setting ID - used in multi-axis scenarios 
&lt;LI&gt;Styling border, background 
&lt;LI&gt;Setting axis title &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;See a list of the available properties below.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN&gt;&lt;SPAN&gt;The properties common to the&amp;nbsp;&lt;STRONG&gt;AxisBase2D&lt;/STRONG&gt; / &lt;STRONG&gt;AxisCore&lt;/STRONG&gt; classes can be found in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html"&gt;TypeDoc API documentation&lt;/A&gt;.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#allowfastmath"&gt;allow&lt;WBR&gt;Fast&lt;WBR&gt;Math&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#animatedvisiblerange"&gt;animated&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#autorange"&gt;auto&lt;WBR&gt;Range&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#autorangeanimation"&gt;auto&lt;WBR&gt;Range&lt;WBR&gt;Animation&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#autoticks"&gt;auto&lt;WBR&gt;Ticks&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisalignment"&gt;axis&lt;WBR&gt;Alignment&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisbandsfill"&gt;axis&lt;WBR&gt;Bands&lt;WBR&gt;Fill&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisborder"&gt;axis&lt;WBR&gt;Border&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axislength"&gt;axis&lt;WBR&gt;Length&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisrenderer"&gt;axis&lt;WBR&gt;Renderer&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axistitle"&gt;axis&lt;WBR&gt;Title&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axistitlestyle"&gt;axis&lt;WBR&gt;Title&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#backgroundcolor"&gt;background&lt;WBR&gt;Color&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#cursortextformatting"&gt;cursor&lt;WBR&gt;Text&lt;WBR&gt;Formatting&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#deltacalculator"&gt;delta&lt;WBR&gt;Calculator&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#dpiadjustedaxistitlestyle"&gt;dpi&lt;WBR&gt;Adjusted&lt;WBR&gt;Axis&lt;WBR&gt;Title&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#dpiadjustedlabelstyle"&gt;dpi&lt;WBR&gt;Adjusted&lt;WBR&gt;Label&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawlabels"&gt;draw&lt;WBR&gt;Labels&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawmajorbands"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Bands&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawmajorgridlines"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawmajorticklines"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Tick&lt;WBR&gt;Lines&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawminorgridlines"&gt;draw&lt;WBR&gt;Minor&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawminorticklines"&gt;draw&lt;WBR&gt;Minor&lt;WBR&gt;Tick&lt;WBR&gt;Lines&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#flippedcoordinates"&gt;flipped&lt;WBR&gt;Coordinates&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#growby"&gt;grow&lt;WBR&gt;By&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#id"&gt;id&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isaxisflipped"&gt;is&lt;WBR&gt;Axis&lt;WBR&gt;Flipped&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#iscategoryaxis"&gt;is&lt;WBR&gt;Category&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#ishorizontalaxis"&gt;is&lt;WBR&gt;Horizontal&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isinneraxis"&gt;is&lt;WBR&gt;Inner&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isprimaryaxis"&gt;is&lt;WBR&gt;Primary&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isstackedaxis"&gt;is&lt;WBR&gt;Stacked&lt;WBR&gt;Axis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isverticalchart"&gt;is&lt;WBR&gt;Vertical&lt;WBR&gt;Chart&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isvisible"&gt;is&lt;WBR&gt;Visible&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isxaxis"&gt;isXAxis&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#labelprovider"&gt;label&lt;WBR&gt;Provider&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#labelstyle"&gt;label&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#majordelta"&gt;major&lt;WBR&gt;Delta&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#majorgridlinestyle"&gt;major&lt;WBR&gt;Grid&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#majorticklinestyle"&gt;major&lt;WBR&gt;Tick&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#maxautoticks"&gt;max&lt;WBR&gt;Auto&lt;WBR&gt;Ticks&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#minordelta"&gt;minor&lt;WBR&gt;Delta&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#minorgridlinestyle"&gt;minor&lt;WBR&gt;Grid&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#minorticklinestyle"&gt;minor&lt;WBR&gt;Tick&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#minorspermajor"&gt;minors&lt;WBR&gt;Per&lt;WBR&gt;Major&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#offset"&gt;offset&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#stackedaxislength"&gt;stacked&lt;WBR&gt;Axis&lt;WBR&gt;Length&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#textformatting"&gt;text&lt;WBR&gt;Formatting&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#tickcoordinatesprovider"&gt;tick&lt;WBR&gt;Coordinates&lt;WBR&gt;Provider&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#tickprovider"&gt;tick&lt;WBR&gt;Provider&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#visiblerange"&gt;visible&lt;WBR&gt;Range&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#visiblerangelimit"&gt;visible&lt;WBR&gt;Range&lt;WBR&gt;Limit&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#visiblerangesizelimit"&gt;visible&lt;WBR&gt;Range&lt;WBR&gt;Size&lt;WBR&gt;Limit&lt;/A&gt;&lt;/SPAN&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;SPAN&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#zoomextentsrange"&gt;zoom&lt;WBR&gt;Extents&lt;WBR&gt;Range&lt;/A&gt;&lt;/SPAN&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Specific Axis Types&lt;/H2&gt;
&lt;P&gt;The following sections go into further details for specific axis types, as well as giving code samples on how to configure and use each axis.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Axis Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Value or Category Axis&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="bf3b144b-2153-4d7c-ab74-152f839df85f"&gt;NumericAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis / Numeric Types&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e71de078-98d8-441a-9432-4289aa687270"&gt;&lt;STRONG&gt;DateTimeNumericAxis&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis with additional features for Dates and Time formatting&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8"&gt;CategoryAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Category Axis&amp;nbsp;- measures using index -&amp;nbsp;Numeric Types or Dates&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="dbda6c22-a06d-4301-9b1d-d83b542d030f"&gt;LogarithmicAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Logarithmic Axis supporting Base2, BaseE, Base10 with or without scientific notation&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb" Status="New Topic" CreatedOn="2023-03-16T21:46:15.3442669Z" ModifiedOn="2023-03-17T17:16:36.2632571Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TextStringAxis" BuildFlags="">
                    <Title m="2023-03-16T21:46:23.9463948Z">Text / String Axis</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-17T17:16:36.2632571Z">&lt;P&gt;There is no specific Text / String Axis in SciChart.js, however, with a combination of&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;the LabelProvider API&lt;/A&gt; and the&amp;nbsp;&lt;A href="bf3b144b-2153-4d7c-ab74-152f839df85f"&gt;NumericAxis&lt;/A&gt;, it's possible to create one. &lt;/P&gt;
&lt;P&gt;Use this technique if you want to use strings instead of numbers for the axis labels.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Learn more about the&amp;nbsp;&lt;A href="59423216-5246-4365-a936-f76b487bd181"&gt;commonalities between axis here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Create and Configure a Text Axis&lt;/H2&gt;
&lt;P&gt;To create a string axis in SciChart.js, we're going to use a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html"&gt;TextLabelProvider&lt;/A&gt;&amp;nbsp;on an ordinary&amp;nbsp;&lt;A href="bf3b144b-2153-4d7c-ab74-152f839df85f"&gt;NumericAxis&lt;/A&gt;. This allows you to transform numbers [0, 1, 2, 3, 4] into string labels.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/TextAxis/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Controlling the Order of Labels&lt;/H2&gt;
&lt;P&gt;If you want to control the order of labels with data, pass the labels as an object, using numbers as fields:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis-LabelOrder\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis-LabelOrder\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;With the same data as before, the label order is reversed.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/TextAxis-LabelOrder/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Multiline Text Labels&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html"&gt;TextLabelProvider&lt;/A&gt; has a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html#maxlength"&gt;maxLength&lt;/A&gt; option which if greater than 0 will do basic word-wrap to that number of characters. The text will only be split at spaces. Words will not be split.&lt;/P&gt;
&lt;P&gt;You can ensure the lines appear exactly as you want by passing them as an array. Note that this can be used in conjunction with word wrap using maxLength. A label given as text will be split according to the maxLength, but one passed as an array will be displayed exactly as given, as shown in the following example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis-Multiline\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisTypes\TextAxis-Multiline\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisTypes/TextAxis-Multiline/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Note the difference between the way the first three labels are wrapped, compared to the second three.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;You can provide an alternative wrapping function by overriding the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html#wraptext"&gt;TextLabelProvider.wrapText&lt;/A&gt; method which takes the label text and returns an array of lines.&lt;/P&gt;
&lt;P&gt;When using multiline, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textlabelprovider.html#linespacing"&gt;TextLabelProvider.lineSpacing&lt;/A&gt; option controls the line spacing. It is expressed as a fraction of the normal line height and defaults to 1.1, ie 10% spacing between lines.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Further notes on Label Culling &amp;amp; Spacing&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The TextLabelProvider obeys other rules of axis tick spacing and label culling. Take a look at the section on&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Gridline and Label Spacing (Interval)&lt;/A&gt; for some more information how this works.&lt;/P&gt;
&lt;P&gt;Finally, the property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisrenderer.html#hideoverlappinglabels"&gt;axis.axisRenderer.hideOverlappingLabels&lt;/A&gt; may be set to false if you wish to disable culling of labels which overlap. This property may also be set via the axis constructor option&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iaxisbase2doptions.html#hideoverlappinglabels"&gt;hideOverlappingLabels&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="2b60466f-fbe0-4ea9-8737-922542d8e10d" AutoIndex="false">
                <Caption m="2023-03-24T15:39:39.1596262Z">Axis Styling</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="522bb84c-264c-4919-aa66-5f8272a72610" Status="New Topic" CreatedOn="2016-08-12T10:20:48.9449549Z" ModifiedOn="2023-10-13T13:14:29.980916Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Styling - Title, Labels, Gridlines and Axis Bands" BuildFlags="">
                    <Title m="2023-03-24T15:37:59.8446771Z">Title, Labels, Gridlines and Axis Band Style</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-10-13T13:14:29.980916Z">&lt;P&gt;An Axis is responsible for drawing its labels, title but also the gridlines facing away from it. Gridlines are subdivided into four categories:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Major Gridlines (aligned with labels) 
&lt;LI&gt;Minor Gridlines (between labels) 
&lt;LI&gt;Major Ticks (small marks, outside the axis, aligned with labels) 
&lt;LI&gt;Minor Ticks (small marks, outside the axis, between labels) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;In addition to this an axis has:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Axis Labels (positioned at every major gridline) 
&lt;LI&gt;Axis Title (positioned once, central on the axis) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis_Styling2.png"&gt;&lt;/P&gt;
&lt;P&gt;Every aspect of the axis can be styled, including major and minor gridlines, tick lines,&amp;nbsp;axis labels and the title. An outline of the chart parts can be found below:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis_styling.png"&gt;&lt;/P&gt;
&lt;H2&gt;Styling Axis Gridlines, Labels and Titles&lt;/H2&gt;
&lt;P&gt;To recreate the image above, we can use the following code. We've chosen colours deliberately so you can see what parts are styled by which lines of code!&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Gridlines support dashed line via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majorgridlinestyleproperty.strokedasharray" target=_blank&gt;majorGridLineStyle.strokeDashArray&lt;/A&gt; and&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorgridlinestyleproperty.strokedasharray" target=_blank&gt;minorGridLineStyle.strokeDashArray&lt;/A&gt; &lt;EM&gt;property. For more info about stroke dash to create dotted or dashed line patterns, see&amp;nbsp;&lt;/EM&gt;&lt;A href="e23972b6-27ca-4b68-aded-d48c12aa1230"&gt;&lt;EM&gt;Series Styling - Dash Line Patterns&lt;/EM&gt;&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; All colors in SciChart.js are strings, which are HTML color codes. Supported values are 6-digit hex codes e.g. "#ADFF2F", 8-digit hex codes in RGBA format where the last two digits are opacity e.g. "#AAFF2F33" and rgba CSS color codes e.g. "rgba(173, 255, 47, 0.3)" as well as "Red", "White" etc...&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\TitleGridlineAxisBands\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\TitleGridlineAxisBands\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisStyling/TitleGridlineAxisBands/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Rotation on labels and titles can be achieved by setting&amp;nbsp;the&amp;nbsp;rotation&amp;nbsp;property. For more info read&amp;nbsp;&lt;A href="43eff091-2936-4343-b875-8bf40d36b2c2"&gt;Rotating Axis Labels&lt;/A&gt;&lt;/P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;Finally, when using Axis NativeText for performance reasons, there are other considerations about fonts. Read the&amp;nbsp;&lt;A href="3616f94c-1224-4896-8306-d6a17af11082"&gt;Native Text article&lt;/A&gt; for more info.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="503601bb-13ba-48d2-814b-7564a65e6c17" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://demo.scichart.com/javascript-chart-styling-theming-in-code" BuildFlags="">
                        <Title m="2020-10-08T17:40:48.3699442Z">Styling a JavaScript Chart in code</Title>
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="8deddadd-6171-496a-ab20-7332232c4c16" Status="New Topic" CreatedOn="2021-03-29T19:05:40.5473177Z" ModifiedOn="2023-03-24T15:38:04.6806897Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Styling - Axis Borders" BuildFlags="">
                    <Title m="2023-03-24T15:38:04.6801818Z">Axis Borders and Background</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-24T15:36:54.3649854Z">&lt;P&gt;In SciChart.js we have properties to let you style the axis border and background. This is the line between the axis and the main SciChartSurface and the background area of the axis itself.&lt;/P&gt;
&lt;P&gt;To style the axis border and background, use this code.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\BordersBackgrounds\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\BordersBackgrounds\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisStyling/BordersBackgrounds/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; All colors in SciChart.js are strings, which are HTML color codes. Supported values are 6-digit hex codes e.g. "#ADFF2F", 8-digit hex codes in RGBA format where the last two digits are opacity e.g. "#AAFF2F33" and rgba CSS color codes e.g. "rgba(173, 255, 47, 0.3)" as well as "Red" or "White"&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;The Axis Background&lt;/H2&gt;
&lt;P&gt;The background of the axis can also be set to a solid color using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#backgroundcolor" target=_blank&gt;AxisBase2D.backgroundColor&lt;/A&gt; property. This supports an HTML color code as above.&lt;/P&gt;
&lt;H2&gt;The TBorderType&lt;/H2&gt;
&lt;P&gt;Axis Borders can be set on the Left, Right, Bottom or Top of the Axis. The thickness of the border can be set individually on each side of the axis. For more information, see the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#axisborder" target=_blank&gt;AxisBase2D.axisBorder&lt;/A&gt; property, which is type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tborder" target=_blank&gt;TBorder&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="d66c2e84-028d-4bb7-930c-df91beb840db" Status="New Topic" CreatedOn="2023-03-24T15:39:47.852384Z" ModifiedOn="2023-03-24T17:48:32.0835566Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AxisVisibility" BuildFlags="">
                    <Title m="2023-03-24T15:40:10.1049312Z">Visibility of Axis Elements</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-24T17:48:32.0835566Z">&lt;P&gt;In SciChart.js all the elements of an axis may be hidden or shown invidually, with the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\AxisVisibility\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\AxisVisibility\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisStyling/AxisVisibility/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;A hidden axis still behaves like an axis with all the scaling that comes with it, just without the visual elements like labels and gridlines.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using Hidden Axis to Scale a Series to Viewport&lt;/H2&gt;
&lt;P&gt;Other than styling, a hidden axis is very useful to scale a series to a viewport. &lt;/P&gt;
&lt;P&gt;Say you had a chart with two series on the same Y-Axis, and with different amplitudes. You want to click a button to maximise a series to the viewport. You can do this with a hidden axis. &lt;/P&gt;
&lt;P&gt;Here's a code sample below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\AxisApis\AxisStyling\DynamicAxisVisibility\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/AxisApis/AxisStyling/DynamicAxisVisibility/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics>
              <Topic Id="14ab8b3e-55c7-48b9-80e0-bb545387accb" Status="New Topic" CreatedOn="2023-03-08T19:14:48.9553709Z" ModifiedOn="2023-12-22T13:49:20.0160078Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="StartHere-AxisOverview" BuildFlags="">
                <Title m="2023-03-08T19:27:53.6712242Z">Start Here - Axis Overview in SciChart.js</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T13:49:20.0160078Z">&lt;innovasys:widget type="In This Topic List" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Prefix"&gt;$$In_This_Topic$$&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Tag"&gt;H2&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;SciChart.js has a rich and configurable axis API. We believe you won't find a JavaScript Chart in the world with as many options for axis as SciChart!&lt;/P&gt;
&lt;P&gt;This page we're going to give you an overview of what the Axis APIs can do and then show you where to look next for more detail.&lt;/P&gt;
&lt;H1&gt;What can SciChart.js Do with Axis?&lt;/H1&gt;
&lt;P&gt;Heres a quick list of what SciChart.js can do with axis configuration, and where to go next.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-axis-layout-options&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-chart-axis-layout-options" target=_blank&gt;&lt;A href="https://demo.scichart.com/javascript-chart-axis-layout-options" target=_blank&gt;JavaScript Axis Layout Options example&lt;/A&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing a variety of axis configurations in SciChart.js.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;1. Many Axis Types&lt;/H2&gt;
&lt;P&gt;There are several axis types&amp;nbsp;in SciChart.js. Although they all&amp;nbsp;differ in&amp;nbsp;types of data values&amp;nbsp;that can be rendered,&amp;nbsp;the most fundamental difference is in their&amp;nbsp;behavior.&lt;/P&gt;
&lt;P&gt;By that, the axes can be divided into two groups, Category and Value axis types.&lt;/P&gt;
&lt;P&gt;The axis types provided by SciChart.js are listed below:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Axis Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Value or Category Axis&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="bf3b144b-2153-4d7c-ab74-152f839df85f"&gt;NumericAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis / Numeric Types&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e71de078-98d8-441a-9432-4289aa687270"&gt;&lt;A href="e71de078-98d8-441a-9432-4289aa687270"&gt;&lt;STRONG&gt;DateTimeNumericAxis&lt;/STRONG&gt;&lt;/A&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Value Axis with additional features for Dates and Time formatting&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="f602f5c0-2de4-4dd6-949d-e50ecce6b6e8"&gt;CategoryAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Category Axis&amp;nbsp;- measures using index -&amp;nbsp;Numeric Types or Dates&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;&lt;A href="dbda6c22-a06d-4301-9b1d-d83b542d030f"&gt;LogarithmicAxis&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Logarithmic Axis supporting Base2, BaseE, Base10 with or without scientific notation&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="f6e4c6ce-1cf1-4c2e-8b9f-feab6bf41edb"&gt;&lt;STRONG&gt;Text / String Axis&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Use LabelProviders to format axis labels as text&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-axis-types&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-axis-types" target=_blank&gt;Axis Types example&lt;/A&gt; in SciChart.js demo.&lt;/EM&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the axis types, click one of the article links in the table above.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;2. Axis Layout (Multiple Axis, Axis Alignment)&lt;/H2&gt;
&lt;P&gt;Many axis configurations are possible, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="2294a48f-459b-464f-9504-aed96c7fda2a"&gt;Aligning Axis&lt;/A&gt; on the Left, Right 
&lt;LI&gt;&lt;A href="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed"&gt;Adding a Secondary Axis&lt;/A&gt; 
&lt;LI&gt;&lt;A href="1e32bbdd-e4dd-4a96-9ac3-5fdeb821d3ed"&gt;Adding Multiple X and Y Axis&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;Rotating a chart 90 degrees&lt;/A&gt; (Vertical charts) 
&lt;LI&gt;&lt;A href="49949657-d7c3-48c7-93a2-2bb17f8dd8c1"&gt;Drawing Series behind axis&lt;/A&gt; 
&lt;LI&gt;&lt;A href="0175a983-0786-4067-b718-206c8c41cd3b"&gt;Placing axis in the centre of a chart&lt;/A&gt;, or inside a chart surface 
&lt;LI&gt;&lt;A href="af7dd07c-7746-4a9d-a9ea-1afc4bb95701"&gt;Vertically Stacking Axis&lt;/A&gt; - to create complex layouts 
&lt;LI&gt;&lt;A href="60612d56-74d4-46c1-bdff-f31e2fe22d57"&gt;Horizontally Stacking Axis&lt;/A&gt;&amp;nbsp;- more complex layouts &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-with-multiple-x-axis&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-with-multiple-x-axis" target=_blank&gt;Multiple X Axis example&lt;/A&gt; in SciChart.js demo.&lt;/EM&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the axis layout options see the pages in the list above.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;3. Axis Label Configuration&lt;/H2&gt;
&lt;P&gt;SciChart.js has a number of label APIs, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Formatting labels the easy way&lt;/A&gt; (using built-in flags) 
&lt;LI&gt;&lt;A href="efc8de3f-7cbb-4577-9a42-9a4e5621156d"&gt;Formatting labels - using custom code&lt;/A&gt; (fine grained label format) 
&lt;LI&gt;&lt;A href="29f7d41d-5dae-4b16-9f75-a090b3f02630"&gt;Having a text axis&lt;/A&gt; e.g. "Apples" "Pears" "Oranges" not 1, 2, 3 
&lt;LI&gt;&lt;A href="3616f94c-1224-4896-8306-d6a17af11082"&gt;Turning native (WebGL) text labels on or off&lt;/A&gt; 
&lt;LI&gt;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Spacing gridlines and labels&lt;/A&gt; the easy way 
&lt;LI&gt;&lt;A href="31e819ca-a224-4e7a-8fa1-4c8301fb6108"&gt;Spacing gridlines and labels - using custom code&lt;/A&gt; (fine grained control) 
&lt;LI&gt;&lt;A href="43eff091-2936-4343-b875-8bf40d36b2c2"&gt;Rotating Labels&lt;/A&gt;&amp;nbsp;/&amp;nbsp;&lt;A href="60d1c9a4-f68a-4d26-8341-fae611c47315"&gt;Multiline Labels&lt;/A&gt;&amp;nbsp;/&amp;nbsp;&lt;A href="2016bf44-40c8-4b67-a90a-6c3df8056289"&gt;Image Labels&lt;/A&gt; 
&lt;LI&gt;&lt;A href="96971248-32ef-4309-a9bd-bf3535cb065f"&gt;Label Style, Alignment, Positioning&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-multiline-labels&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-multiline-labels" target=_blank&gt;Multiline Axis Labels example&lt;/A&gt; in SciChart.js demo.q&lt;/EM&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the axis labelling options see&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis Label Formatting&lt;/A&gt;&amp;nbsp;and related pages&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;4. Axis Ranging and Scaling&lt;/H2&gt;
&lt;P&gt;It's possible to programmatically control axis ranging, scaling and auto-fitting of data.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;AutoRange&lt;/A&gt; (auto fitting of data) 
&lt;LI&gt;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Setting/Getting range programatically&lt;/A&gt; 
&lt;LI&gt;&lt;A href="75091468-bbf7-49ad-9841-c5d935660429"&gt;Listening to axis range changes&lt;/A&gt; (callbacks on zoom) &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/zoom-pan-multiple-modifiers&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the axis labelling options see&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis Label Formatting&lt;/A&gt;&amp;nbsp;and related pages&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Zooming and panning of Axis (such as mouse-drag, or mousewheel zoom) is handled by the ChartModiifers. See sections in the&amp;nbsp;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ChartModifier API&lt;/A&gt; for more details.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;5. Axis Styling&lt;/H2&gt;
&lt;P&gt;Finally, SciChart.js supports Axis styling, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Styling of Gridlines, Labels, Titles and Bands&lt;/A&gt; 
&lt;LI&gt;&lt;A href="8deddadd-6171-496a-ab20-7332232c4c16"&gt;Styling of Axis Borders and Background&lt;/A&gt; 
&lt;LI&gt;Showing or Hiding of Axis parts &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-styling-theming-in-code&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the axis styling options see&amp;nbsp;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Axis Styling&lt;/A&gt;&amp;nbsp;and related pages&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="29ad58ab-4973-4c28-b9c9-7b17a52919a4" AutoIndex="false">
            <Caption m="2016-09-02T09:12:07.2958535Z">2D Chart Types</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="b8ff5657-2f4f-472a-80c0-35af00c032d4" AutoIndex="false">
                <Caption m="2016-09-02T09:12:51.2631221Z">Renderable Series APIs</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="db2eb47f-739c-4d34-b8d1-49d5f1836842" Status="New Topic" CreatedOn="2020-09-10T18:14:56.6584272Z" ModifiedOn="2022-08-19T13:30:05.2841729Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Glow and DropShadow Shader Effects" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2022-08-19T13:30:05.2841729Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;SciChart.js features WebGL shader-based&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/gloweffect.html"&gt;GlowEffect&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/shadoweffect.html"&gt;ShadowEffect&lt;/A&gt; effects which may be added onto chart types throughout our library.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="WebGL Shader effects applied to JavaScript Charts to achieve glow and dropshadow" src="images/RenderableSeries_GlowEffect_Ghosted.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: WebGL GlowEffect added to the Real-time Ghosted Traces example&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2 align=left&gt;Adding Glow Effects to Series&lt;/H2&gt;
&lt;P align=left&gt;A glow shader effect can be added to series to give it an oscilloscope / VDU style effect.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;GlowEffect example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { GlowEffect } from "scichart/Charting/Visuals/RenderableSeries/GlowEffect";&lt;BR&gt;import { Point } from "scichart/Core/Point";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;&lt;BR&gt;sciChartSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FFFF00",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; effect: new GlowEffect(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; range: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; intensity: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; color: "#333333",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; offset: new Point(10, 10)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;This results in the following (visible in the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-vital-signs-ecg-medical-chart-example"&gt;Vital Signs monitor&lt;/A&gt; example).&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="WebGL Shader effects applied to JavaScript Charts to achieve glow and dropshadow" src="images/RenderableSeries_GlowEffect_VitalSigns.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2 align=left&gt;Adding Shadow Effect to Series&lt;/H2&gt;
&lt;P align=left&gt;Drop-shadow effects are also in development, and an example will be provided soon.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="172addbf-995e-4705-9f7d-535415ab322a" Status="New Topic" CreatedOn="2016-09-02T09:34:03.7440005Z" ModifiedOn="2023-03-16T16:59:56.8644849Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What is a RenderableSeries" BuildFlags="">
                    <Title m="2023-03-09T19:07:52.246146Z">Start Here - RenderableSeries Overview</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T16:59:56.8644849Z">&lt;innovasys:widget type="In This Topic List" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Prefix"&gt;$$In_This_Topic$$&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Tag"&gt;H2&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The&amp;nbsp;RenderableSeries&lt;SPAN class=Apple-converted-space&gt;&amp;nbsp;&lt;/SPAN&gt;in SciChart are visual representations of &lt;STRONG&gt;X,Y Numeric&lt;/STRONG&gt; or &lt;STRONG&gt;Date&lt;/STRONG&gt; data. Other libraries call them 'Chart Types'.&lt;/P&gt;
&lt;P&gt;Some RenderableSeries render simple X,Y values (2D points in space), while some render additional information (such as X,Y0,Y1 values, or X,Y,Z values).&lt;/P&gt;
&lt;H2&gt;1. Chart Types in SciChart.js&lt;/H2&gt;
&lt;P&gt;SciChart.js supports a number of 2D &amp;amp; 3D Chart types. These include:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ExamplesSuite_DemoHome.jpg"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;Uniform Heatmap Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="7f5a6207-a081-4a74-add0-1fb3e36b2806"&gt;Digital (Step) Line Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="bfe9f9bd-2e26-4aac-bd61-e965fe38c8f6"&gt;Non-Uniform Heatmap Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="11646318-4795-4310-8650-231db20e9026"&gt;Spline Line Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="42243024-7b1e-4266-b3fe-bb8f64450b04"&gt;Heatmap Contours Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;Mountain (Area) Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;Candlestick Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="d792ff3f-5429-4186-8947-790b9d6bcee5"&gt;Digital (Step) Mountain Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d"&gt;OHLC Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="2674e2d9-0998-4a1f-be8a-5d5bdec014aa"&gt;Spline Mountain Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="9433151a-2281-47ec-8919-d5e43d44731b"&gt;Lollipop (Impulse or Stem) Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;Column Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="e5bcd0f1-0a90-4c63-a9ec-dc43c1846fbe"&gt;Error Bars Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="121e373b-412a-4846-8fa8-862f0e716fa2"&gt;Stacked Column Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="e627d5a1-bbcc-4265-bd91-fcf1d9a5bcf0"&gt;Fan Charts&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="121e373b-412a-4846-8fa8-862f0e716fa2"&gt;Grouped Column Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="d9007373-3f18-4bbd-be21-86a97872b4ee"&gt;Pie Charts&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="121e373b-412a-4846-8fa8-862f0e716fa2"&gt;100% Stacked Column Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="9bbf7021-7ef1-49d7-9904-c28029ab9a48"&gt;Donut Charts&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1"&gt;Stacked Mountain Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;Band (High-Low Fill) Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1"&gt;100% Stacked Mountain Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="537e0dce-c257-4348-bcc7-240f80714eac"&gt;Digital Band Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="e99914e3-6526-410c-a0fa-05c4f1d90573"&gt;Text Series&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Click on the links above to see documentation and live embedded code snippets for each of the chart types in SciChart.js&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;2. Common&amp;nbsp;2D Chart&amp;nbsp;Features&lt;/H2&gt;
&lt;P&gt;As well as just render 2D Data, a number of chart types support additional properties and features.&lt;/P&gt;
&lt;P&gt;For example, most 2D Chart types in SciChart.js support:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;SciChart.js Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Dynamic Data Updates&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;All SciChart.js chart types support dynamic updates to data out of the box. Insert, append, update, delete - modify data and the chart updates FAST. See the&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries API documentation&lt;/A&gt; for more details.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Per-point coloring&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;SciChart.js chart types support per-point coloring based on a rule. Xy values over/under a threshold, values with a property can be colored individually. See the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;&amp;nbsp;for more details.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Data-point markers&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;SciChart.js chart types support adding a pointmarker (circle, square, triangle, cross marker) at data-points. See the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;PointMarkers documentation&lt;/A&gt; for more details.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Data-point Text Labels&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;SciChart.js supports fast, WebGL based&amp;nbsp;text labels at datapoints, which can be customised. See the&amp;nbsp;&lt;A href="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225"&gt;DataLabels API&lt;/A&gt; for more details.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Showing / hiding series&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;You can show/hide series in SciChart.js as well as be notified when a series is hidden. See the&amp;nbsp;&lt;A href="1050b696-5965-441b-a60b-7743440dd66b"&gt;isVisibleChanged documentation&lt;/A&gt; for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Select series&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Using a ChartModifier (an attached behaviour) you can add Series Selection, Hover callbacks and styling into SciChart.js. See the&amp;nbsp;&lt;A href="dc5b75d6-5475-47a1-a5c6-24310f833ba0"&gt;SeriesSelectionModifier documentation&lt;/A&gt;&amp;nbsp;for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Select data-points&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Using a ChartModifier (attached behaviour), you can add data-point selection detection, callbacks and styling into SciChart.js See the&amp;nbsp;&lt;A href="ae9b10e1-f5ba-444e-9835-6b0f95806007"&gt;DataPointSelectionModifier&lt;/A&gt; docs for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Tooltips and Cursors&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;Of course, SciChart.js supports customisable tooltips and cursors using ChartModifiers (attached behaviour). See the&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; or&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; docs for more details.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Nulls (Gaps) in Data&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;For line charts, mountain charts and 2D cartesian chart types you can draw nulls (gaps) in data, or even change style in the line using a technique we have. See the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Drawing Gaps in Series&lt;/A&gt; documentation for more details.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We are continually improving and adding features to SciChart.js. Some of the things on the roadmap are: more chart types, more interactions &amp;amp; even allowing custom drawing.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;3. The RenderableSeries Class&lt;/H2&gt;
&lt;P&gt;All 2D Chart types in SciChart.js are derived from the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html"&gt;BaseRenderableSeries&lt;/A&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;type. This is a JavaScript class which is added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt; collection and is rendered using our own proprietary&amp;nbsp;WebAssembly / WebGL&amp;nbsp;based rendering engine.&lt;/P&gt;
&lt;P&gt;Each RenderableSeries is rendered to the screen, displaying the data from an associated&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Renderable Series Properties&lt;/H3&gt;
&lt;P&gt;The properties common to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html"&gt;BaseRenderableSeries class&lt;/A&gt; are listed below.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;BaseRenderableSeries&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;STRONG&gt;property&lt;/STRONG&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#datalabelprovider"&gt;dataLabelProvider&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;New to SciChart.js v3.0! The dataLabelprovider allows creation of per &lt;STRONG&gt;data-point text labels&lt;/STRONG&gt;. Please see the&amp;nbsp;&lt;A href="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225"&gt;Data Labels API&lt;/A&gt; section for a complete walk-through of text labels on chart series.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#dataseries"&gt;dataSeries&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The DataSeries is the data-source for the RenderableSeries. Please see&amp;nbsp; &lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries API&lt;/A&gt; section for a complete walk-through of the DataSeries API&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#drawnanas"&gt;drawNanAs&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;How to treat NAN (Not a number) values in the input dataSeries. See&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elinedrawmode.html"&gt;ELineDrawMode&lt;/A&gt; for a list of values.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;pointMarker&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html"&gt;PointMarker&lt;/A&gt; is used to draw an &lt;STRONG&gt;optional point-marker at each data-point&lt;/STRONG&gt;. Applicable to some series types only.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#stroke"&gt;stroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A Stroke for lines, outlines and edges of this RenderableSeries.&amp;nbsp;Acceptable values include RGB format e.g. "#FF0000", RGBA format e.g. "#FF000077" and RGBA format e.g. "rgba(255,0,0,0.5)"&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The Stroke Thickness for lines, outlines and edges of this RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html#strokedasharray"&gt;strokeDashArray&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Some chart types which support lines (e.g. Line series, Spline Line series, Mountain Series) support dashed lines. This property accepts an array which defines [dot, dash] length in pixels&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#opacity"&gt;opacity&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;An Opacity factor of the Series that controls its semi-transparency level, where value 1 means the Series is opaque; 0&amp;nbsp;means transparent.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#xaxisid"&gt;xAxisId&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The XAxisId of the series allows you to attach a series to a specific axis. If you only have single X and Y Axis you can leave this default.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#yaxisid"&gt;yAxisId&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The YAxisId of the series allows you to attach a series to a specific axis. If you only have single X and Y Axis you can leave this default.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisible"&gt;isvisible&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, the series is visible. To hide a series, set IsVisible = false.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;isVisibleChanged&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;An&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/eventhandler.html"&gt;EventHandler&lt;/A&gt; allowing you to subscribe to isVisible changed callbacks&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#effect"&gt;effect&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=24&gt;An optional&amp;nbsp;&lt;A href="db2eb47f-739c-4d34-b8d1-49d5f1836842"&gt;ShaderEffect&lt;/A&gt; for modifying the render output of a RenderableSeries.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#paletteprovider"&gt;paletteProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The PaletteProvider API &lt;STRONG&gt;allows changing the color of a series on a per-point basis&lt;/STRONG&gt;. For more details about the PaletteProvider API see the individual examples for&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;Line Series&lt;/A&gt;,&amp;nbsp;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;Column Series&lt;/A&gt; etc...&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#hittestprovider"&gt;hitTestProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ihittestprovider.html"&gt;HitTestProvider&lt;/A&gt; exposes the&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit-Test API&lt;/A&gt;, used to &lt;STRONG&gt;determine whether a series has been clicked on, hovered&lt;/STRONG&gt; or find the nearest Xy datapoint to a mouse coordinate.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Constructor options on RenderableSeries&lt;/H3&gt;
&lt;P&gt;Every RenderableSeries has a set of constructor options allowing for fast initialization and setup by passing in a javascript object. Each property reflected on the series has an optional constructor option parameter.&lt;/P&gt;
&lt;P&gt;For example this code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting properties of series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const lineSeries = new FastLineRenderableSeries(wasmContext);&lt;BR&gt;lineSeries.stroke = "Red";&lt;BR&gt;lineSeries.strokeThickness = 3;&lt;BR&gt;lineSeries.dataSeries = new XyDataSeries(wasmContext, {xValues, yValues});&lt;BR&gt;lineSeries.isVisible = true;&lt;BR&gt;lineSeries.opacity = 0.7;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;is equivalent to this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Constructor parameters of series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {xValues, yValues}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isVisible: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.7&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;4. Where Next?&lt;/H2&gt;
&lt;P&gt;To learn about a specific chart type, and to find out how to configure them, visit the following pages:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;The Line Series Type&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;The Scatter Series Type&lt;/A&gt; 
&lt;LI&gt;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;The Mountain Series Type&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;etc...&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="965a5ee6-ff7d-40b4-9ff8-198c73bbaeee" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e280ed77-6cc5-49cd-84be-ecd143139ca6" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1353ea76-0fcb-4f1c-ad30-cb74085eea2b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="7638b057-5d02-474b-8642-d232115f0ead" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="246d21d0-3b1b-4840-be7b-33bc0066e0e1" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="4fac0b05-882b-4a04-9d99-019dbd5c822d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5693b2a-3d41-4603-b249-8594512d1604" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="f83a131d-1767-4062-b118-fbbad3ab4c91" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b2fc10ad-2614-414b-a173-bed16255aa6f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2b99a8ee-26f5-4c68-a538-72440ef96be0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="dd63d4b4-6253-41cc-80bd-280109b59aae" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="6139d2e5-f098-4674-99e5-581141312bf5" Status="New Topic" CreatedOn="2016-09-02T09:36:54.0487028Z" ModifiedOn="2023-03-09T19:08:03.1125978Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common RenderableSeries Features" BuildFlags="">
                    <Title m="2020-09-06T15:16:18.1704642Z">Common RenderableSeries Properties</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-09T19:08:03.1125978Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;This content has been moved&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;Please see&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries - Start Here&lt;/A&gt; for more information.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="47a46dc7-10e8-4b30-83a0-819cf287b620" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                        <Title />
                        <Category m="2016-09-06T17:47:27.7344459Z">Renderable Series APIs</Category>
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="1050b696-5965-441b-a60b-7743440dd66b" Status="New Topic" CreatedOn="2022-04-13T14:22:12.7971242Z" ModifiedOn="2023-03-16T09:04:29.3508511Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Series isVisible and isVisibleChanged API" BuildFlags="">
                    <Title m="2022-04-13T14:22:27.4731286Z">Series isVisible and isVisibleChanged API</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T09:04:29.3508511Z">&lt;P&gt;Each RenderableSeries has an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisible"&gt;isVisible&lt;/A&gt; property. This defines whether the series is included in rendering or not.&lt;/P&gt;
&lt;P&gt;isVisible can be set programmatically, or is also set by SciChart.js when checking or unchecking a Legend row checkbox (see&amp;nbsp;&lt;A href="84ac3103-a531-43bc-8546-f275d91be35b"&gt;LegendModifier API&lt;/A&gt;).&lt;/P&gt;
&lt;P&gt;You can listen to isVisible changes via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;BaseRenderableSeries.isVisibleChanged&lt;/A&gt; event. Listen to the event (get a callback) using the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\Apis\isVisible\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This can be used to get feedback about the current visibility state of a series, as in the following demo:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/Apis/isVisible/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;See the onIsVisibleChanged parameter in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ibaserenderableseriesoptions.html#onisvisiblechanged"&gt;IBaseRenderableSeriesOptions.onIsVisibleChanged&lt;/A&gt; for type information.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;BaseRenderableSeries.isVisibleChanged&lt;/A&gt; event handler also has args of type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/seriesvisiblechangedargs.html"&gt;SeriesVisibleChangedArgs&lt;/A&gt;. In TypeScript, the code would look like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Typescript isVisibleChanged&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp; series.isVisibleChanged.subscribe((args: SeriesVisibleChangedArgs) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`isVisibleChanged handler: Series ${args.sourceSeries.type} was set to isVisible=${args.isVisible}`);&lt;BR&gt;&amp;nbsp; });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="b196cf35-43b3-4533-b686-b0959f81d6c0" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ibaserenderableseriesoptions.html#onisvisiblechanged" BuildFlags="">
                        <Title m="2023-03-02T19:10:00.4248863Z">onIsVisibleChanged option</Title>
                        <Category />
                      </TopicLink>
                      <TopicLink Id="3fa9bf83-08b6-42da-a6ff-852782d73cc7" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://www.scichart.com/documentation/js/current/typedoc/interfaces/irenderableseries.html#isvisiblechanged" BuildFlags="">
                        <Title m="2023-03-02T19:10:27.1062164Z">RenderableSeries.isVisibleChanged</Title>
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="58603bb5-a47d-4f69-a142-2411ff2e762c" Status="New Topic" CreatedOn="2023-03-06T13:07:46.3929496Z" ModifiedOn="2023-03-16T09:06:43.5993235Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DrawingGapsInSeries" BuildFlags="">
                    <Title m="2023-03-06T13:08:02.9198367Z">Drawing Gaps in Series (null data)</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-03-16T09:06:43.5993235Z">&lt;P&gt;It is possible to have null points or gaps in multiple series types by passing a data point with Y = NaN (Not a Number). The following chart (series) types support NaN gaps.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Line Series - with gaps or closed-lines where NaN is found 
&lt;LI&gt;Scatter Series 
&lt;LI&gt;Mountain Series - with gaps or closed-lines 
&lt;LI&gt;Column Series 
&lt;LI&gt;Candlestick/Ohlc Series 
&lt;LI&gt;Bubble Series &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Drawing Null points with NaN&lt;/H2&gt;
&lt;P&gt;The following example shows you how to draw null points by setting Y=NaN.&lt;/P&gt;
&lt;P&gt;Setting Y=NaN is considered a 'null point' in SciChart.js and will allow you to hide areas of the data.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note Line-based series such as Line, Mountain, Band and Spline may also be drawn as a closed-line when Y=NaN by setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#drawnanas" target=_blank&gt;BaseRenderableSeries.drawNaNAs&lt;/A&gt; =&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elinedrawmode.html"&gt;ELineDrawMode.PolyLine&lt;/A&gt;. This property will be ignored for certain series types like Scatter.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's an example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\Gaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\Gaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/MountainCharts/Gaps/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Closing Lines with NaN&lt;/H2&gt;
&lt;P&gt;Lines may also be closed when Y=NaN by setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#drawnanas" target=_blank&gt;BaseRenderableSeries.drawNaNAs&lt;/A&gt; =&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elinedrawmode.html"&gt;ELineDrawMode.PolyLine&lt;/A&gt;. This property will be ignored for certain series types like Scatter.&lt;/P&gt;
&lt;H2&gt;Having Different Styles in the Same Series&lt;/H2&gt;
&lt;P&gt;Sometimes it is asked 'can we have a different line-color, or dashed line style when Y=NaN'.&lt;/P&gt;
&lt;P&gt;Not using the above API, but a workaround can be achieved by simply using two series, e.g. with the following data.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\GapsDifferentStyle\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\GapsDifferentStyle\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This approach results in some nice visualisations to represent null data (or inaccurate data) like this.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/MountainCharts/GapsDifferentStyle/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e4122c58-e668-4ef5-8080-bb7655d289e3" Status="New Topic" CreatedOn="2023-03-06T13:09:12.7560319Z" ModifiedOn="2023-10-30T15:15:00.0038801Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DrawingPointMarkersOnSeries" BuildFlags="">
                    <Title m="2023-03-06T13:11:22.9051662Z">Drawing PointMarkers on Series (Scatter markers)</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-10-30T15:15:00.0038801Z">&lt;P&gt;Every data point of a Scatter, Line, Bubble, Mountain, Spline, Error or Column Series&amp;nbsp;may be marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;. So, not just limited to scatter series, you can apply a pointmarker to line series, or error bars to display a repeated marker at the X,Y point.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Simply set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;BaseRenderableSeries.pointMarker&lt;/A&gt; = new&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html"&gt;EllipsePointMarker()&lt;/A&gt; to apply a scatter point to most series types.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Several different types of PointMarker are available in SciChart.js:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ellipsepointmarker.html"&gt;EllipsePointMarker&lt;/A&gt; - Renders a circle at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/squarepointmarker.html"&gt;SquarePointMarker&lt;/A&gt; - Renders a square at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/trianglepointmarker.html"&gt;TrianglePointMarker&lt;/A&gt; - Renders a triangle at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/crosspointmarker.html"&gt;CrossPointMarker&lt;/A&gt; - Renders a plus sign '+' at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xpointmarker.html"&gt;XPointMarker&lt;/A&gt; - Renders an 'x' at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spritepointmarker.html"&gt;SpritePointMarker&lt;/A&gt; - Allows an image to be used at each point to create custom pointmarkers &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Below we're going to show some options how to use different types of PointMarker in SciChart.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\PointMarkers\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\PointMarkers\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ScatterCharts/PointMarkers/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;IsLastPointOnly mode for Pointmarkers&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3.2! The PointMarker type has a property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html#lastpointonly" target=_blank&gt;isLastPointOnly&lt;/A&gt;. When true, only the last point of a scatter series is drawn. This can be useful to highlight a point in say a sweeping ECG chart.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Additional Tips for PointMarkers&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Custom markers can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spritepointmarker.html"&gt;SpritePointMarker&lt;/A&gt;&amp;nbsp;type, which allows loading a custom image as a marker. This uses the helper function&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#createimageasync"&gt;createImageAsync&lt;/A&gt; which allows loading of a PNG file either from URL, or locally hosted / imported image.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For a TypeScript / npm &amp;amp; webpack example you can see the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-custom-pointmarkers" target=_blank&gt;JavaScript Custom PointMarkers Chart&lt;/A&gt; example in the SciChart.js demo.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics>
              <Topic Id="e280ed77-6cc5-49cd-84be-ecd143139ca6" Status="New Topic" CreatedOn="2016-09-02T11:58:47.2034614Z" ModifiedOn="2023-03-16T16:59:55.9363002Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Line Series Type" BuildFlags="">
                <Title m="2023-01-11T15:15:35.8236261Z">The Line Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-16T16:59:55.9363002Z">&lt;P&gt;Line Series can be created using the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;JavaScript Line Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-line-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;EM&gt;JavaScript Line Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing a variety of line options in SciChart.js.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;Javascript Line Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\LineCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\LineCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the&amp;nbsp;following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/LineCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt; instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness properties 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Line Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Line Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Line Series via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Line Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="b64e932a-c0f3-4c94-9750-69745955ec39"&gt;PaletteProvider - Per-point colouring of Line Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3fe44ead-6897-4cb1-a0d1-04d4317921f9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb757b4-70d4-4a57-8c0d-97485cb8b722" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="9c01f04f-53e8-46f0-aea1-6ddb74763a91" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b64e932a-c0f3-4c94-9750-69745955ec39" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="11646318-4795-4310-8650-231db20e9026" Status="New Topic" CreatedOn="2021-03-09T16:30:45.9321242Z" ModifiedOn="2023-03-15T21:03:44.8435754Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Spline (Smoothed) Line Series Type" BuildFlags="">
                <Title />
                <ContentsTitle m="2023-01-07T12:51:02.198774Z">The Spline (Smoothed) Line Series Type</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:03:44.8435754Z">&lt;P&gt;Spline Line or Smoothed Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html" target=_blank&gt;SplineLineRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-spline-line-chart" target=_blank&gt;JavaScript Spline Line Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-spline-line-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-spline-line-chart" target=_blank&gt;&lt;EM&gt;JavaScript Spline Line Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Spline Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-spline-line-chart" target=_blank&gt;Javascript Spline Line Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineLine\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineLine\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Spline Line Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness properties 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. 
&lt;LI&gt;We set the number of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;interpolationPoints&lt;/A&gt; - how many points between real Xy data points will be interpolated using a Spline interpolation algorithm. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/SplineLine/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Performance Tips in Spline Lines&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;SplineLineRenderableSeries.interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set to zero, then this series renders and displays exactly like a FastLineRenderableSeries.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set to another number, e.g. 10, then SciChart.js will calculate 10 points for each Xy datapoint you add to the XyDataSeries. This means you will be displaying 10x the number of datapoints.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;SciChart.js can handle millions of datapoints, but this is something to be aware of. You might want to adjust down the interpolationPoints depending on amount of data on the chart, or zoom level.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Spline Line Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Line Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Spline Line Series can be marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;. To add Point Markers to the Spline Line Series, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;PointMarkers API Documentation&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; PointMarkers are only applied to the original data-points, not the spline interpolated points which are for display purposes only.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Spline Line Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="b64e932a-c0f3-4c94-9750-69745955ec39"&gt;PaletteProvider - Per-point colouring of Line Charts&lt;/A&gt; documentation page. The same technique applies to spline line charts.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="8f55582a-2d9a-452c-86fc-f20855e74ac3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e280ed77-6cc5-49cd-84be-ecd143139ca6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c" Status="New Topic" CreatedOn="2016-09-02T11:59:08.5079453Z" ModifiedOn="2023-10-30T15:14:59.9948889Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Scatter Series Type" BuildFlags="">
                <Title />
                <ContentsTitle m="2023-03-02T17:14:05.5232176Z">The Scatter Series Type</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-10-30T15:14:59.9948889Z">&lt;P&gt;Scatter Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html"&gt;XyScatterRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;JavaScript Scatter Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="iFrame"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-scatter-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;EM&gt;JavaScript Scatter Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Scatter Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;Javascript Scatter Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Scatter Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;. Several types such as Ellipse, Triangle, Cross and Custom are available (&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;see here for more info&lt;/A&gt;) 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ScatterCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Scatter Series&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a&amp;nbsp;Scatter Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Or, by simply skipping a point if using a value-axis. Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Drawing Last Point only in a Scatter Series&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3.2! The PointMarker type has a property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html#lastpointonly" target=_blank&gt;isLastPointOnly&lt;/A&gt;. When true, only the last point of a scatter series is drawn. This can be useful to highlight a point in say a sweeping ECG chart.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Different Point-Markers on a Scatter Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Scatter Series&amp;nbsp;is marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;. Several different types of PointMarker are available in SciChart.js.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There is also a TypeScript example of custom pointmarkers in the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-custom-pointmarkers" target=_blank&gt;SciChart.js Demo.&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;Finally, there is&amp;nbsp;a dedicated&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options such as per-point sizing.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Scatter Points with Different Colors&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of PointMarkers individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="c36e220e-71b3-48f2-a4ab-ac1e7699b269"&gt;PaletteProvider - Per-point colouring of Scatter Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="494a3792-d04c-49c8-97b4-3be542c4ea64" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="246d21d0-3b1b-4840-be7b-33bc0066e0e1" Status="New Topic" CreatedOn="2016-09-02T11:59:21.5554478Z" ModifiedOn="2023-03-15T20:53:40.4592473Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Column Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:53:40.4592473Z">&lt;P&gt;Column Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html"&gt;FastColumnRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;JavaScript Column Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-column-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;&lt;EM&gt;JavaScript Column Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Column Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;Javascript Column Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ColumnCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ColumnCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Column Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness and fill&amp;nbsp;properties 
&lt;LI&gt;We set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html#datapointwidth"&gt;FastColumnRenderableSeries.dataPointWidth&lt;/A&gt; - which defines the fraction of width to occupy 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html#dataseries"&gt;FastColumnRenderableSeries.dataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ColumnCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Column Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a&amp;nbsp;Column Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Column Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Column Series via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting&amp;nbsp;Columns with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of column stroke &amp;amp; fill individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="b3e47563-6702-41ec-b855-caa86a025f11"&gt;PaletteProvider - Per-point colouring of Column Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="91641c0f-d313-403c-a4d1-21d0b66c83d1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c0430a75-d54b-4c40-b041-306576cc738d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b2fc10ad-2614-414b-a173-bed16255aa6f" Status="New Topic" CreatedOn="2016-09-02T11:59:42.2308832Z" ModifiedOn="2023-03-15T20:55:52.6581396Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Candlestick Series type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:55:52.6581396Z">&lt;P&gt;Candlestick Series or JavaScript Stock Charts can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html"&gt;FastCandlestickRenderableSeries type&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;JavaScript Candlestick Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-candlestick-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;&lt;EM&gt;JavaScript Candlestick Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Candlestick Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;Javascript Candlestick Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/CandlestickCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; The above example makes a web call to Binance to fetch Bitcoin/USD prices. If you see a blank chart, check the Js console as this web call may be blocked. You can always edit the Codepen to substitute your own data!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the example above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Candlestick Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;This requires a special dataseries type:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ohlcdataseries.html"&gt;OhlcDataSeries&lt;/A&gt;, which accepts X, Open, High, Low, Close values as arrays of values. 
&lt;LI&gt;We set the up/down stroke and fill colors via properties&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#brushup"&gt;brushUp&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#brushdown"&gt;brushDown&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#strokeup"&gt;strokeUp&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#strokedown"&gt;strokeDown&lt;/A&gt; properties&lt;STRONG&gt;.&lt;/STRONG&gt; 
&lt;LI&gt;We set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#datapointwidth"&gt;dataPointWidth&lt;/A&gt; - which defines the fraction of width to occupy 
&lt;LI&gt;We use a special axis type called the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html"&gt;CategoryAxis&lt;/A&gt; which removes gaps in stock market data. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html"&gt;CategoryAxis&lt;/A&gt; see the page on&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Value Axis vs. CategoryAxis&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/categoryaxis.html"&gt;CategoryAxis&lt;/A&gt;&amp;nbsp;is necessary&amp;nbsp;if you have Forex or Stock market data which includes weekend or overnight gaps, as this axis type measures by x-index, not by x-value. For CryptoCurrency data the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimenumericaxis.html"&gt;DateTimeNumericAxis&lt;/A&gt; can be used as these are 24/7 markets.&lt;/P&gt;
&lt;P&gt;You can format the date labels on the XAxis by following the instructions on the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis Label Formatting&lt;/A&gt; page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Volume Bars to a Candlestick Chart&lt;/H2&gt;
&lt;P&gt;In the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;SciChart.js demo - Candlestick Charts&lt;/A&gt; - volume bars are docked to the bottom of the chart. Here's how to do this with SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\VolumeBars\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\VolumeBars\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's how the example looks now:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/CandlestickCharts/VolumeBars/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting&amp;nbsp;Candles with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of specific OHLC Bars using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="642d697b-5b5c-4f53-a47b-7aa02d0f74b8"&gt;PaletteProvider - Per-point colouring of Candlestick/Ohlc Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="c7c14ec5-8e0d-4ea2-82d4-577867a1a660" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f783c60f-0b3f-4d2e-82d9-47ea56786aaf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5693b2a-3d41-4603-b249-8594512d1604" Status="New Topic" CreatedOn="2016-09-02T11:59:58.7264025Z" ModifiedOn="2023-03-15T20:52:16.6513811Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Mountain (Area) Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:52:16.6513811Z">&lt;P&gt;Mountain (or Area) Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;JavaScript Mountain Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-mountain-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;&lt;EM&gt;JavaScript Mountain Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;Javascript Mountain Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Mountain Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness and fill&amp;nbsp;properties 
&lt;LI&gt;ZeroLineY defines where the zero crossing is. The default is 0.0 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/MountainCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Mountain Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Mountain Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Mountain Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Mountain Series via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Mountain Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments as well as mountain fills individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="d2584e96-8697-44a9-9732-216fdfe52003"&gt;PaletteProvider - Per-point colouring of Mountain Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="bdd9723e-ba27-4f57-8681-e6c81aed787c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="96b54301-c0da-4a46-b387-183ccfcac299" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7f5a6207-a081-4a74-add0-1fb3e36b2806" Status="New Topic" CreatedOn="2019-02-12T17:47:58.7917386Z" ModifiedOn="2023-03-15T20:51:38.9673232Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Digital (Step) Line Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:51:38.9673232Z">&lt;P&gt;Digital, or Step Line Series can be created using the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-digital-line-chart" target=_blank&gt;JavaScript Digital Line Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-digital-line-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-digital-line-chart" target=_blank&gt;&lt;EM&gt;JavaScript Digital Line Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Digital (Step) Line Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-digital-line-chart" target=_blank&gt;JavaScript Digital Line Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalLineCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalLineCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Line Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness properties 
&lt;LI&gt;We set the isDigitalLine property 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Codepen Embed from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/DigitalLineCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Digital (Step) Line Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a&amp;nbsp;Digital Line Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Digital (Step) Line Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Digital Line via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Digital Line Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="b64e932a-c0f3-4c94-9750-69745955ec39"&gt;PaletteProvider - Per-point colouring of Line Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d792ff3f-5429-4186-8947-790b9d6bcee5" Status="New Topic" CreatedOn="2019-02-12T17:52:23.4565607Z" ModifiedOn="2023-03-15T20:53:40.4485385Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Digital (Step) Mountain Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:53:40.4485385Z">&lt;P&gt;A Digital (Step) Mountain or area Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-digital-mountain-chart" target=_blank&gt;JavaScript Digital Mountain Chart Example&lt;/A&gt;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&amp;nbsp;&lt;/SPAN&gt;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-digital-mountain-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-digital-mountain-chart" target=_blank&gt;&lt;EM&gt;JavaScript Digital Mountain Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Digital Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-digital-mountain-chart" target=_blank&gt;Javascript Digital Mountain Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalMountainCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalMountainCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Mountain Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness and fill&amp;nbsp;properties 
&lt;LI&gt;ZeroLineY defines where the zero crossing is. The default is 0.0 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/DigitalMountainCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Digital Mountain Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Digital Mountain Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Digital Mountain Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Digital Mountain via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Mountain Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments as well as mountain fills individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="d2584e96-8697-44a9-9732-216fdfe52003"&gt;PaletteProvider - Per-point colouring of Mountain Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2674e2d9-0998-4a1f-be8a-5d5bdec014aa" Status="New Topic" CreatedOn="2021-03-10T12:25:56.6179869Z" ModifiedOn="2023-03-15T21:04:27.2004042Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Spline (Smoothed) Mountain Series Type" BuildFlags="">
                <Title m="2021-03-10T12:26:10.082594Z">The Spline (Smoothed) Mountain Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:04:27.2004042Z">&lt;P&gt;Spline Mountain or Smoothed Area Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html" target=_blank&gt;SplineMountainRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-spline-mountain-chart" target=_blank&gt;JavaScript Spline Mountain Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-spline-mountain-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-spline-mountain-chart" target=_blank&gt;&lt;EM&gt;JavaScript Spline Mountain Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Spline Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-spline-mountain-chart" target=_blank&gt;Javascript Spline Mountain Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineMountain\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineMountain\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Spline Mountain Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokethickness properties 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries&lt;/A&gt; - which stores the Xy data to render. 
&lt;LI&gt;We set the number of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;interpolationPoints&lt;/A&gt; - how many points between real Xy data points will be interpolated using a Spline interpolation algorithm. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/SplineMountain/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Performance Tips in Spline Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;SplineMountainRenderableSeries.interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set to zero, then this series renders and displays exactly like a FastLineRenderableSeries.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set&lt;/EM&gt; &lt;EM&gt;to another number, e.g. 10, then SciChart.js will calculate 10 points for each Xy datapoint you add to the XyDataSeries. This means you will be displaying 10x the number of datapoints.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;SciChart.js can handle millions of datapoints, but this is something to be aware of. You might want to adjust down the interpolationPoints depending on amount of data on the chart, or zoom level.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Spline Mountain Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Mountain Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Spline Line Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Spline Mountain Series can be marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;.&amp;nbsp;To add Point Markers to the Spline Mountain Series, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;PointMarkers API Documentation&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; PointMarkers are only applied to the original data-points, not the spline interpolated points which are for display purposes only.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Painting Spline Mountain Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line and mountain&amp;nbsp;segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="d2584e96-8697-44a9-9732-216fdfe52003"&gt;PaletteProvider - Per-point colouring of Mountain Charts&lt;/A&gt; documentation page. The same technique applies to spline line charts.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="8f55582a-2d9a-452c-86fc-f20855e74ac3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e280ed77-6cc5-49cd-84be-ecd143139ca6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9433151a-2281-47ec-8919-d5e43d44731b" Status="New Topic" CreatedOn="2022-05-05T08:19:44.3969637Z" ModifiedOn="2023-03-15T20:57:29.3780547Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Lollipop (Impulse or Stem) Chart Type" BuildFlags="">
                <Title m="2022-05-05T16:58:43.7873416Z">The Lollipop (Impulse or Stem) Chart Type</Title>
                <ContentsTitle m="2023-03-15T20:57:06.3933225Z">The Lollipop (Impulse or Stem) Chart Type</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:57:29.3780547Z">&lt;P&gt;Lollipop Charts, otherwise known as Impulse or Stem charts,&amp;nbsp;can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastimpulserenderableseries.html"&gt;FastImpulseRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-impulse-chart" target=_blank&gt;JavaScript Impulse Series Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-impulse-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-impulse-chart" target=_blank&gt;&lt;EM&gt;JavaScript Impulse Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create an Impulse Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-impulse-chart" target=_blank&gt;Javascript Impulse Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ImpulseCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ImpulseCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ImpulseCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A Impulse Series instance is created and added to the SciChartSurface.renderableSeries collection. 
&lt;LI&gt;We set the &lt;STRONG&gt;fill&lt;/STRONG&gt; property that controls the color of connector and point of each dataset 
&lt;LI&gt;We can update the size of each point by updating &lt;STRONG&gt;size&lt;/STRONG&gt; property (default value is 10.0) 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastimpulserenderableseries.html#dataseries" target=_blank&gt;FastImpulseRenderableSeries.dataSeries&lt;/A&gt; - which stores the Xy data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Setting the PointMarker on an Impulse Series&lt;/H2&gt;
&lt;P&gt;Every data point of an Impulse Series is marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;. To change the pointmarker type, or size, use the following code. Note that the fill, size property on FastImpulseRenderableSeries overrides the width, height, fill, stroke on the TrianglePointMarker.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;JavaScript Line Chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const impulseSeries = new FastImpulseRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#26c6da",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new TrianglePointMarker(wasmContext }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; size: 10,&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Different pointmarkers are supported including Ellipse, Box, Triangle, Cross or custom markers. See the&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Chart documentation&lt;/A&gt; for more information on supported pointmarkers.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in an Impulse Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a&amp;nbsp;Impulse Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Impulse Series Points with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour&amp;nbsp;individual datapoints differently using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="71c23100-837e-47c7-af5d-667c153ff3a3"&gt;PaletteProvider - Per-point colouring of Impulse Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5bcd0f1-0a90-4c63-a9ec-dc43c1846fbe" Status="New Topic" CreatedOn="2022-05-05T16:59:05.8496505Z" ModifiedOn="2023-03-15T20:58:09.9167306Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Error Bars Chart Type" BuildFlags="">
                <Title m="2022-05-05T16:59:21.986593Z">The Error Bars Chart Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:58:09.9167306Z">&lt;P&gt;Error Bars can be added to a SciChart.js chart using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html"&gt;FastErrorBarsRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-error-bars-chart" target=_blank&gt;JavaScript Error Bars Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-scatter-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-error-bars-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-error-bars-chart" target=_blank&gt;&lt;EM&gt;JavaScript Error Bars Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Creating Error Bars Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-error-bars-chart" target=_blank&gt;Javascript Error Bars Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ErrorBars\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ErrorBars\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;We define&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/hlcdataseries.html"&gt;HlcDataSeries&lt;/A&gt;, passing arrays with X, Y, High, and Low values 
&lt;LI&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html"&gt;FastErrorBarsRenderableSeries&lt;/A&gt; is created with dataSeries option and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;Alternatively we can assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#dataseries"&gt;FastErrorBarsRenderableSeries.dataSeries&lt;/A&gt; property, which stores the HLC data to render. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ErrorBars/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Error Mode&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#errormode"&gt;FastErrorBarsRenderableSeries.errorMode&lt;/A&gt; property defines whether high and low caps should be displayed on error bars. Available values are defined by enum&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eerrormode.html"&gt;EErrorMode&lt;/A&gt;. We can set this property either via the series itself, or passing in to constructor options (see type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifasterrorbarsrenderableseriesoptions.html"&gt;IFastErrorBarsRenderableSeriesOptions&lt;/A&gt;).&lt;/P&gt;
&lt;P&gt;The following example shows how to use only high error on bars.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;High error bars only&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; errorMode: EErrorMode.High,&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_HighBars.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Horizontal Error Bars&lt;/H2&gt;
&lt;P&gt;It is possible to change the direction of Error Bars to horizontal using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#errordirection"&gt;FastErrorBarsRenderableSeries.errorDirection&lt;/A&gt; property. In this case the High &amp;amp; Low values in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/hlcdataseries.html"&gt;HlcDataSeries&lt;/A&gt;&amp;nbsp;are applied in the X-direction.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Horizontal Error Bars&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EErrorDirection } from "scichart";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const xValues = [0, 1, 2, 2.5, 4.5, 5, 6, 7, 8];&lt;BR&gt;const yValues = [2.5, 3.5, 3.7, 4.0, 5.0, 5.5, 5.0, 4.0, 3.0];&lt;BR&gt;const lowValues = [-0.5, 0.6, 1.1, 2.3, 4.0, 4.9, 5.8, 6.8, 7.5];&lt;BR&gt;const highValues = [0.4, 1.2, 2.1, 3.0, 4.7, 5.7, 6.5, 7.3, 8.9];&lt;/P&gt;
&lt;P&gt;const hlcDataSeries = new HlcDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // High, Low becomes left-right as absolute values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; highValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowValues&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; errorDirection: EErrorDirection.Horizontal,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_HorizontalErrorBars.png"&gt;&lt;/P&gt;
&lt;H2&gt;Error Bars Advanced Properties&lt;/H2&gt;
&lt;H3&gt;Setting Stroke, StrokeThickness and StrokeDash&lt;/H3&gt;
&lt;P&gt;Error Bars in SciChart.js support setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#stroke"&gt;stroke&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#strokethickness"&gt;strokeThickness&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#strokeddasharray"&gt;strokeDashArray&lt;/A&gt; to set a dashed line style.&lt;/P&gt;
&lt;P&gt;For example, this code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Error Bars Line Styles&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Aqua",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeDashArray: [4, 2],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 4,&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_DashedLines.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tip! Learn more about Dashed Line Styling at this&amp;nbsp;&lt;A href="e23972b6-27ca-4b68-aded-d48c12aa1230"&gt;documentation page&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Drawing a Line and PointMarker through Error Bars&lt;/H3&gt;
&lt;P&gt;You can add a PointMarker to highlight the Y-value of an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/hlcdataseries.html"&gt;HlcDataSeries&lt;/A&gt;. The data can also be used twice to display both lines / scatter points and error bars.&lt;/P&gt;
&lt;P&gt;Try this code out:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Lines and ErrorBars&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { FastLineRenderableSeries, FastErrorBarsRenderableSeries, HlcDataSeries, EllipsePointMarker &amp;nbsp;} from "scichart";&lt;BR&gt;&lt;BR&gt;// Many RenderableSeries can share one DataSeries in SciChart&lt;BR&gt;// Use the HlcDataSeries on a FastLineRenderableSeries, it will render XY value&lt;BR&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { dataSeries: hlcDataSeries, stroke: "SteelBlue" });&lt;BR&gt;&lt;BR&gt;// Use the same HlcDataSeries on a FastErrorBarsRenderableSeries. It will render high/lows for error bars&lt;BR&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.77,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#333"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;sciChartSurface.renderableSeries.add(lineSeries);&lt;BR&gt;sciChartSurface.renderableSeries.add(errorBarsSeries);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the folllowing output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_andLines_PointMarker.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Setting the Width of Error Bars Whiskers&lt;/H3&gt;
&lt;P&gt;You can define the width of Error Bars using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#datapointwidth"&gt;dataPointWidth&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#datapointwidthmode"&gt;dataPointWidthMode&lt;/A&gt;&amp;nbsp;which supports values from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatapointwidthmode.html"&gt;EDataPointMode&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For example. setting dataPointWidthMode to Absolute and dataPointWidth to 50 ensures 50 pixels always.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;dataPointWidth on ErrorBars&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 50,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidthMode: EDataPointWidthMode.Absolute,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(errorBarsSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_ContantWidth.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The alternative mode is&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatapointwidthmode.html"&gt;EDataPointWidthMode.Relative&lt;/A&gt;. In this mode a dataPointWidth value of 0.0 - 1.0 occupies 0% to 100% of the available space as calculated by SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;dataPointWidth on ErrorBars (2)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidthMode: EDataPointWidthMode.Relative,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(errorBarsSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_RelativeWidth.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Showing/Hiding Error Bars Connector or Whiskers&amp;nbsp;&lt;/H3&gt;
&lt;P&gt;You can specify which parts of an Error Bar should be visible using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#drawconnector"&gt;drawConnector&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasterrorbarsrenderableseries.html#drawwhiskers"&gt;drawWhiskers&lt;/A&gt; and finally;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hiding ErrorBar Parts&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const errorBarsSeries = new FastErrorBarsRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: hlcDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawConnector: false, // Draw the horizontal connector&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawWhiskers: true,&amp;nbsp;&amp;nbsp; // Draw the top/bottom whiskers&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(errorBarsSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderableSeries_ErrorBars_HidingParts.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" Status="New Topic" CreatedOn="2016-09-02T12:00:20.1263227Z" ModifiedOn="2023-03-15T20:53:40.4874979Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The-Uniform-Heatmap-Chart-Type" BuildFlags="">
                <Title m="2023-01-10T21:37:55.6723478Z">The Uniform Heatmap Chart Type</Title>
                <ContentsTitle m="2023-03-03T12:20:01.4014706Z">The Uniform Heatmap Chart Type</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:53:40.4874979Z">&lt;P&gt;Uniform Heatmaps can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmaprenderableseries.html"&gt;UniformHeatmapRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;JavaScript Heatmap Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-heatmap-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;&lt;EM&gt;JavaScript&amp;nbsp;Heatmap Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Uniform Heatmap&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;Uniform heatmaps are extremely fast, lightweight series types for rendering two dimensional data as a heatmap or spectrogram. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmaprenderableseries.html"&gt;UniformHeatmapRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&amp;nbsp;type should be used in conjunction with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&amp;nbsp;when you simply want to specify a Step in the X,Y direction (each cell is the same size).&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;Javascript Heatmap Chart&lt;/A&gt;&amp;nbsp;with SciChart.js, use the following code:&lt;/P&gt;
&lt;H3&gt;Creating the Imports&lt;/H3&gt;
&lt;P&gt;First, let's setup the imports that we need for the heatmap type.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Creating Heatmap ZValues[][] Array&lt;/H3&gt;
&lt;P&gt;Next, we want to create a 2-dimensional array of data. Heatmap data is a 2D number array (type number[][] in Typescript) which contains the heat values. These are later mapped to colours in the heatmap.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The dimensions of the zValues 2D array are [height][width]&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Creating the Heatmap Instance&lt;/H3&gt;
&lt;P&gt;Finally, we create the&amp;nbsp;UniformHeatmapRenderableSeries type, which has both a&amp;nbsp;UniformHeatmapDataSeries for the data and a&amp;nbsp;HeatmapColorMap to map zValues to colors.&lt;/P&gt;
&lt;P&gt;Here's a full example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleD&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/UniformHeatmap/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Click &lt;STRONG&gt;'Edit on CodePen'&lt;/STRONG&gt; in the example above to see the full example in your browser!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Data Labels (Text Labels) to Heatmap Cells&lt;/H2&gt;
&lt;P&gt;In SciChart.js v3 and above, you can now add data labels (text labels) to heatmap cells. To do this, you specify the HeatmapRenderableSeries.dataLabels property.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Data labels&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;&amp;nbsp;const heatmapSeries = new UniformHeatmapRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: heatmapDataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataLabels: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; style: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 16,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; color: appTheme.ForegroundColor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;});&lt;/P&gt;
&lt;P&gt;&amp;nbsp;// ...&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Data Labels will automatically hide if the cell size is too small. If you can't see a data label, zoom in to ensure that it shows.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Max Heatmap Size and Tiling Heatmaps&lt;/H2&gt;
&lt;P&gt;In SciChart.js the maximum heatmap size (NxM size of the 2-dimensional array) is determined by&amp;nbsp;&lt;A href="https://stackoverflow.com/a/46109824" target=_blank&gt;WebGL gl.MAX_TEXTURE_SIZE&lt;/A&gt;. This will be a different value depending on the GPU hardware, the browser and operating system. On a Windows PC Running in Chrome gl.MAX_TEXTURE_SIZE is 16,384 x 16,384 but could be as low as 2048 x 2048 on other devices.&lt;/P&gt;
&lt;P&gt;For viewing massive heatmaps, SciChart.js allows tiling of heatmaps by placing multiple UniformHeatmapRenderableSeries onto the same SciChartSurface. Each heatmap can be positioned using xStart, xStep, yStart, yStep constructor parameters. This allows you to render very large datasets in browser and is how one of our users achieved this output: medical imaging using SciChart's heatmap feature.&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;M8CSdWlceWM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0648619c-054f-4c48-8efb-61f14f6b5465" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c7e8f244-ad74-48fc-9dd8-1d48c1e524ca" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b17d4f5a-9e1d-465f-8fa4-d22fd1b0e89c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b17d4f5a-9e1d-465f-8fa4-d22fd1b0e89c" Status="New Topic" CreatedOn="2023-03-03T12:18:20.9298982Z" ModifiedOn="2023-03-15T20:54:14.1614179Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Updating-Uniform-Heatmaps" BuildFlags="">
                <Title m="2023-03-03T12:57:44.7565451Z">Updating (Realtime) Heatmaps</Title>
                <ContentsTitle m="2023-03-15T20:53:48.2903722Z">Updating (Realtime) Heatmaps</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:54:14.1614179Z">&lt;P&gt;The heatmap is supposed to be fully dynamic, enabling real-time graphics. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmaprenderableseries.html"&gt;UniformHeatmapRenderableSeries&lt;/A&gt;&amp;nbsp;however does not support append, insert, update, remove functions like other DataSeries do.&lt;/P&gt;
&lt;P&gt;You can however update the data and force a refresh simply by updating the data passed in by calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html#setzvalues"&gt;heatmapDataSeries.setZValues()&lt;/A&gt;&amp;nbsp;with a new 2-dimensional array, or by modifying part of the existing&amp;nbsp;the 2d array and calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html#notifydatachanged"&gt;heatmapDataSeries.notifyDataChanged()&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Update part of heatmap&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an empty 2D array of size height &amp;amp; width&lt;BR&gt;const initialZValues = zeroArray2D([height, width]);&lt;BR&gt;// Create a Heatmap Data-series. Pass the heatValues as a number[][] to the UniformHeatmapDataSeries&lt;BR&gt;const heatmapDataSeries = new UniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStart: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStart: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: initialZValues&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;// Later, update the data&lt;BR&gt;initialZValues[5][6] = 123.4;&lt;/P&gt;
&lt;P&gt;// Tell SciChart the data has changed&lt;BR&gt;heatmapDataSeries.notifyDataChanged();&lt;BR&gt;&lt;BR&gt;// You can also load an entirely new array with the function UniformHeatmapDataSeries.setZValues&lt;BR&gt;const newZValues // type&amp;nbsp;number[][]&lt;BR&gt;heatmapDataSeries.setZValues(newZValues);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's a full working example below:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/UniformHeatmap/UpdatingData/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Click &lt;STRONG&gt;'Edit on CodePen'&lt;/STRONG&gt; in the example above to see the full example in your browser!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The source-code for that example can be found below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\UpdatingData\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Updating the XStep, XStart, YStep, YStart or changing the size of heatmap&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;At the time of writing we have no way to update the xStep, xStart, yStep, yStart properties of a UniformHeatmapDataSeries once it has been created, but a&amp;nbsp;&lt;A href="https://www.scichart.com/questions/js/how-to-change-the-startx-on-a-uniformheatmapdataseries" target=_blank&gt;workaround was posted at the SciChart Forum&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="5f664da7-9d4d-42e9-bcac-736d69110d96" Status="New Topic" CreatedOn="2023-03-03T12:23:09.609587Z" ModifiedOn="2023-12-22T14:35:59.0047222Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Uniform-Heatmap-Colormaps" BuildFlags="">
                <Title m="2023-03-03T13:03:51.7580192Z">Heatmap ColorMaps and Legends</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T14:35:59.0047222Z">&lt;H2&gt;Converting Data-Values to Colors (Defining a Color Map)&lt;/H2&gt;
&lt;P style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 10px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;Conversion of data value into color is defined by the property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmaprenderableseries.html#colormap"&gt;UniformHeatmapRenderableSeries.colorMap&lt;/A&gt;. The ColorMap is&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html"&gt;type HeatmapColorPalette&lt;/A&gt;.&amp;nbsp;You can define a custom Color Palette&amp;nbsp;in JavaScript as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\ColorMaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;What this means:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The GradientStop at Offset = 0 with Color = "Transparent" corresponds to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html#minimum"&gt;HeatmapColorMap.minimum&lt;/A&gt; value of 0 
&lt;LI&gt;The GradientStop at Offset = 1 with Color = "#EC0F6C" corresponds to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html#maximum"&gt;HeatmapColorMap.maximum&lt;/A&gt; value of 200. 
&lt;LI&gt;Data within this range will be blended according to the gradient stops between 0 and 1 
&lt;LI&gt;Data outside this range will be clamped to the minimum or maximum colors in the&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html"&gt;HeatmapColorMap&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Defining how Data-values outside of ColorMap range are drawn&lt;/H3&gt;
&lt;P&gt;By default when defining a&amp;nbsp;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html"&gt;HeatmapColorMap&lt;/A&gt;&amp;nbsp;any values that fall outside the range are clipped to the edges of the colormap. e.g. in the above example data falling outside of the range 0-200 is clipped to color "#000000" and "#EC0F6C" respectively.&lt;/P&gt;
&lt;P&gt;There is also a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baseheatmaprenderableseries.html#fillvaluesoutofrange"&gt;fillValuesOutOfRange&lt;/A&gt; property which defines how the values outside the range are treated. Either clamped to the min/max color or drawn as transparent.&lt;/P&gt;
&lt;H2&gt;Heatmap Legends&lt;/H2&gt;
&lt;P&gt;A heatmap legend may be generated with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html"&gt;HeatmapLegend&lt;/A&gt; class. It is placed in a element just like a SciChartSurface. It will expand to fit the parent div.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/UniformHeatmap/ColorMaps/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The constructor accepts&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iheatmaplegendoptions.html"&gt;IHeatmapLegendOptions&lt;/A&gt; which lets you specify theme, colorMap and yAxisOptions. This allows configuration of the appearance of the heatmap legend.&amp;nbsp;See these are the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iheatmaplegendoptions.html"&gt;TypeDoc documentation&lt;/A&gt; for this type.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Here's a full code sample below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\ColorMaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Defining the ColorMap on the HeatmapLegend control&amp;nbsp;&lt;/H3&gt;
&lt;P&gt;ColorMaps obey similar rules to&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;Heatmap series&lt;/A&gt;&amp;nbsp;(see above).&lt;/P&gt;
&lt;H3&gt;Styling the Axis on the HeatmapLegend control&lt;/H3&gt;
&lt;P&gt;yAxisOptions is type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iaxisbase2doptions.html"&gt;IAxisBase2dOptions&lt;/A&gt;. This is the same type that is passed to an Axis in SciChart.&lt;/P&gt;
&lt;P&gt;To Style the HeatmapLegend is very similar to styling an axis in SciChart. See more at the page&amp;nbsp;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Axis Styling&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Updating ColorMaps Dynamically&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html"&gt;HeatmapColorMaps&lt;/A&gt; can be updated dynamically by changing their properties. All the properties such as minimum, maximum, gradientStops are fully reactive and when set, the chart will redraw.&lt;/P&gt;
&lt;P&gt;Below we've created a demo to show how to update&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapcolormap.html#gradientstops"&gt;HeatmapColorMap.gradientStops&lt;/A&gt; dynamically by adding interactivity to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html"&gt;HeatmapLegend&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\UniformHeatmap\DynamicColorMaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/UniformHeatmap/DynamicColorMaps/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html"&gt;HeatmapLegend&lt;/A&gt;&amp;nbsp;is implemented internally using a SciChartSurface. You can access the surface via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html#innerSciChartSurface"&gt;innerSciChartSurface&lt;/A&gt; property. After that, you can configure the axis, series, annotations just like you would any other SciChartSurface.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="bfe9f9bd-2e26-4aac-bd61-e965fe38c8f6" Status="New Topic" CreatedOn="2022-08-16T11:18:48.539435Z" ModifiedOn="2023-03-15T20:55:52.6324454Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The-Non-Uniform-Heatmap-Chart-Type" BuildFlags="">
                <Title m="2022-08-16T11:19:04.4000194Z">The Non-Uniform Heatmap Chart Type</Title>
                <ContentsTitle m="2023-03-08T14:38:35.8324999Z">The Non-Uniform Heatmap Chart Type</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:55:52.6324454Z">&lt;P&gt;A complementary type to the Uniform Heatmap is the Non-Uniform Heatmap, new to SciChart.js v2.3.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-non-uniform-heatmap-chart" target=_blank&gt;JavaScript Non-Uniform Heatmap Chart Example&lt;/A&gt;&lt;SPAN style="COLOR: rgb(0,0,0)"&gt;&amp;nbsp;&lt;/SPAN&gt;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Create a&amp;nbsp;Non-Uniform Heatmap&lt;/H2&gt;
&lt;P&gt;Non-Uniform heatmaps are a variation on Uniform heatmaps, where you can specify independent sizes for heatmap rows and columns.&lt;/P&gt;
&lt;P&gt;The cell sizes are specified either by an array of X,Y cell coordinates or a mapping function passed to the constructor options of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmapdataseries.html" target=_blank&gt;NonUniformHeatmapDataSeries&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For example, you can create a Non-uniform Heatmap with the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\NonUniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\NonUniformHeatmap\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/NonUniformHeatmap/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; The Non-Uniform Heatmap allows you to have uneven sizes for columns &amp;amp; rows in a javascript heatmap. In the case where you have equal cell sizes, use the&amp;nbsp;&lt;/EM&gt;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;&lt;EM&gt;Uniform Heatmap&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;for faster performance.&amp;nbsp;&lt;/EM&gt;&amp;nbsp;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;DIV align=left&gt;In the code above: &lt;/DIV&gt;
&lt;UL&gt;
&lt;LI&gt;We create a 2D array (type number[][]). This is filled with heat values of the heatmap. 
&lt;LI&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmapdataseries.html"&gt;NonUniformHeatmapDataSeries&lt;/A&gt; instance is created with xCellOffsets = [ ] and yCellOffsets = [ ]. This defines the position of the heatmap in X,Y space as well as the position of each column/row. 
&lt;LI&gt;We set the Colormap, which maps colors to heat values in the dataseries. 
&lt;LI&gt;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmaprenderableseries.html"&gt;NonUniformHeatmapRenderableSeries&lt;/A&gt;&lt;/SPAN&gt; instance is created with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/inonuniformheatmaprenderableseriesoptions.html#dataseries"&gt;INonUniformHeatmapRenderableSeriesOptions.dataSeries&lt;/A&gt; and&amp;nbsp;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/inonuniformheatmaprenderableseriesoptions.html#colormap"&gt;INonUniformHeatmapRenderableSeriesOptions.colorMap&lt;/A&gt;&lt;/SPAN&gt; options and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;Alternatively we can assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmaprenderableseries.html#dataseries"&gt;NonUniformHeatmapRenderableSeries.dataSeries&lt;/A&gt; property separately. &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Updating Heatmap Values&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="b17d4f5a-9e1d-465f-8fa4-d22fd1b0e89c"&gt;Uniform Heatmap documentation - Updating Heatmaps&lt;/A&gt;&amp;nbsp;shows how you can update a heatmap dynamically, by using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmapdataseries.html#setzvalues"&gt;setZValues()&lt;/A&gt; function. The mechanism for the Non-uniform heatmap is the same.&lt;/P&gt;
&lt;H3&gt;Heatmap Color&amp;nbsp;Maps&amp;nbsp;&lt;/H3&gt;
&lt;P style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 10px; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&amp;nbsp;&lt;A href="5f664da7-9d4d-42e9-bcac-736d69110d96"&gt;Uniform Heatmap documentation - ColorMaps and Legends&lt;/A&gt;&amp;nbsp;shows how you can modify a heatmaps color mapping, which maps zValues to cell colors, by using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmaprenderableseries.html#colormap"&gt;colorMap&lt;/A&gt; property. The mechanism for the Non-uniform heatmap is the same.&lt;/P&gt;
&lt;H3&gt;Adding Text in Cell to a Non-Uniform Heatmap&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;Uniform Heatmap documentation&lt;/A&gt; shows how you can add text-in cell to a heatmap via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmaprenderableseries.html#dataLabelProvider"&gt;dataLabelProvider&lt;/A&gt; property. The mechanism for the Non-uniform heatmap is the same.&lt;/P&gt;
&lt;H3&gt;Adding a Heatmap Legend to&amp;nbsp;a Non-Uniform Heatmap&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="5f664da7-9d4d-42e9-bcac-736d69110d96"&gt;Uniform Heatmap documentation - ColorMaps and Legends&lt;/A&gt; shows how you can a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html"&gt;HeatmapLegend&lt;/A&gt; with colorMap to the heatmap chart. The mechanism for the Non-uniform heatmap is the same.&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Defining the x,y cell positions&lt;/H2&gt;
&lt;P&gt;As well as passing an array of x/yCellOffsets as a mapping function, it is possible to pass just arrays via&amp;nbsp;&amp;nbsp;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/inonuniformheatmapseriesoptions.html#xcelloffsets"&gt;INonUniformHeatmapSeriesOptions.xCellOffsets&lt;/A&gt;&lt;/SPAN&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/inonuniformheatmapseriesoptions.html#ycelloffsets"&gt;INonUniformHeatmapSeriesOptions.yCellOffsets&lt;/A&gt;. T&lt;/P&gt;
&lt;P&gt;The function should generate cell offsets based on the index. This feature is useful when dataSeries are updated dynamically with&amp;nbsp;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/nonuniformheatmapdataseries.html#setZValues"&gt;NonUniformHeatmapDataSeries.setZValues&lt;/A&gt;&lt;/SPAN&gt;, which will trigger recalculation of the offsets.&lt;/P&gt;
&lt;P&gt;Both the following two code examples are valid:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Passing Cell offsets (1)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Passing just cell Offset Arrays&lt;BR&gt;const xRangeOffsetsSource = [0, 10, 20, 26, 36, 60, 72, 84];&lt;BR&gt;const yRangeOffsetsSource = [100, 250, 390, 410, 600]; 
&lt;P&gt;const dataSeries = new NonUniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCellOffsets: xRangeOffsetsSource,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCellOffsets: yRangeOffsetsSource&lt;BR&gt;});&lt;/P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;as well as this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Passing Cell offsets (1)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Passing just cell Offset Arrays&lt;BR&gt;const xRangeOffsetsSource = [0, 10, 20, 26, 36, 60, 72, 84];&lt;BR&gt;const yRangeOffsetsSource = [100, 250, 390, 410, 600]; 
&lt;P&gt;const dataSeries = new NonUniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCellOffsets: i =&amp;gt; xRangeOffsetsSource[i],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCellOffsets: i =&amp;gt; yRangeOffsetsSource[i]&lt;BR&gt;}); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="a6799457-c7f8-400e-8818-3f69e304f158" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="42243024-7b1e-4266-b3fe-bb8f64450b04" Status="New Topic" CreatedOn="2020-12-14T13:53:12.9391136Z" ModifiedOn="2023-03-15T20:55:52.6426048Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Contours Series Type" BuildFlags="">
                <Title m="2020-12-14T13:53:19.1112006Z">The Contours Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:55:52.6426048Z">&lt;P&gt;Contour maps or Contour-plots can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformcontoursrenderableseries.html"&gt;UniformContoursRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart-with-contours" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart-with-contours" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart-with-contours" target=_blank&gt;JavaScript Contours Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-heatmap-chart-with-contours&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart-with-contours" target=_blank&gt;&lt;EM&gt;JavaScript&amp;nbsp;Contours Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Contours Plot&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;SciChart's Contour series is an extremely fast, lightweight chart types for rendering two dimensional data as a contour plot. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformcontoursrenderableseries.html"&gt;UniformContoursRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&amp;nbsp;type should be used in conjunction with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&amp;nbsp;when you simply want to specify a Step in the X,Y direction (each cell is the same size).&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-heatmap-chart-with-contours" target=_blank&gt;Javascript Contours Chart&lt;/A&gt;&amp;nbsp;with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ContourCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ContourCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;We create an empty 2D array (number[][]) using the helper function &lt;STRONG&gt;zeroArray2D&lt;/STRONG&gt;. This is filled with values in the generateData function 
&lt;LI&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;&amp;nbsp;instance is created with xStart, xStep, yStart, yStep values = 0, 1, 0, 1. This means the heatmap starts at X,Y =&amp;nbsp;0,0 and each cell is 1 on the axis. 
&lt;LI&gt;We set the contour Stroke and StrokeThickness. 
&lt;LI&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformcontoursrenderableseries.html"&gt;UniformContoursRenderableSeries&lt;/A&gt;&amp;nbsp;instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt; collection. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ContourCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Updating Data in a Contour map&lt;/H2&gt;
&lt;P&gt;The contour map is supposed to be fully dynamic, enabling real-time graphics. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformcontoursrenderableseries.html"&gt;Contours Series&lt;/A&gt;&amp;nbsp;however does not support append, insert, update, remove functions like other DataSeries do. You can however update the data and force a refresh simply by updating the data passed in. To do this, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { UniformHeatmapDataSeries, zeroArray2D &amp;nbsp;} from "scichart";&lt;BR&gt;&lt;BR&gt;// Create an empty&amp;nbsp;2D array of size height &amp;amp; width&lt;BR&gt;const initialZValues: number[][] = zeroArray2D([height, width]);&lt;/P&gt;
&lt;P&gt;// Create a Heatmap Data-series. Pass the heatValues as a number[][] to the UniformHeatmapDataSeries&lt;BR&gt;const heatmapDataSeries = new UniformHeatmapDataSeries(wasmContext, 0, 1, 0, 1, initialZValues);&lt;BR&gt;&lt;BR&gt;// ...&lt;BR&gt;&lt;BR&gt;// Later, update the data&lt;BR&gt;initialZValues[5][6] = 123.4;&lt;BR&gt;&lt;BR&gt;// Tell SciChart the data has changed&lt;BR&gt;heatmapDataSeries.notifyDataChanged()&lt;BR&gt;&lt;BR&gt;// You can also load an entirely new array with the function UniformHeatmapDataSeries.setZValues&lt;BR&gt;const newZValues; // type&amp;nbsp;number[][]&lt;BR&gt;heatmapDataSeries.setZValues(newZValues);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more details, including a live example of how to update 2D array data for heatmaps and contours, see the&amp;nbsp;&lt;A href="b17d4f5a-9e1d-465f-8fa4-d22fd1b0e89c"&gt;Uniform Heatmap documentation - Updating Heatmaps&lt;/A&gt;&amp;nbsp;documentation page. The mechanism for contour plots is the same.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9cd2c1ad-7fcb-4248-9d17-62bbcfcf8e5e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d53b2f8b-665d-4804-bb72-9e19b3c84ed0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7cf91fa8-841d-4bb8-adbd-44a9dd73b238" Status="New Topic" CreatedOn="2016-09-02T12:00:42.7014721Z" ModifiedOn="2023-03-15T20:59:08.1124406Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Band Series type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:59:08.1124406Z">&lt;P&gt;A Band Series, or High-Low Fill between two lines can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html"&gt;FastBandRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;JavaScript Band Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-band-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;JavaScript Band Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Band Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;Javascript Band Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BandSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BandSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Band Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, fill properties for when Y1 &amp;gt; Y2 and&amp;nbsp;vice versa&amp;nbsp;(more info over at&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html"&gt;FastBandRenderableSeries&lt;/A&gt; in TypeDoc). 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html#dataseries"&gt;DataSeries&lt;/A&gt; - in this case an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyydataseries.html"&gt;XyyDataSeries&lt;/A&gt; which stores X, Y1, Y2 data. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/BandSeries/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Band Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Band Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2 align=left&gt;Add Point Markers onto a Band Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Band Series via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Band Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9"&gt;PaletteProvider - Per-point colouring of Band Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2 align=left&gt;Use Cases&lt;/H2&gt;
&lt;H3 align=left&gt;Displaying horizontal thresholds&lt;/H3&gt;
&lt;P&gt;The Band Series Chart can be used to display a mountain or area with a horizontal threshold. For example, if you want to see a series which has a green mountain above zero and red below, to track PnL or profit and loss, you can also use a band series.&lt;/P&gt;
&lt;P&gt;For instance, the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BandSeries\Threshold\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BandSeries\Threshold\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/BandSeries/Threshold/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3 align=left&gt;Bollinger Bands &amp;amp; MACD Indicators&lt;/H3&gt;
&lt;P align=left&gt;The Band Series chart primary use is in financial markets, when you want to display things like Bollinger Bands, MACD. For example, our Create Multi Pane Stock Charts demo has a band series for the MACD indicator, which you can see below.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderSeries_BandSeries_UseCase.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P align=left&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/RenderSeries_BandSeries_UseCase2.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: a complex visualisation using Band Series. This image is taken from a SciChart WPF sample but all the features are available in SciChart.js as well.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="eb43be02-4df3-49cc-b76e-c163585b0492" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f7e58fac-9aaf-4ce1-91fb-df763f2bedc3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="121e373b-412a-4846-8fa8-862f0e716fa2" Status="New Topic" CreatedOn="2016-09-02T12:02:15.7015902Z" ModifiedOn="2023-03-15T21:01:26.202746Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Stacked Column Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:01:26.202746Z">&lt;P&gt;Stacked Column Charts can be created by a combination of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumncollection.html"&gt;StackedColumnCollection type&lt;/A&gt;. StackedColumnRenderableSeries&amp;nbsp;share many properties with the&amp;nbsp;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;added feature that columns automatically stack vertically or side by side&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-column-chart" target=_blank&gt;JavaScript Stacked Column Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-stacked-column-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-stacked-column-chart" target=_blank&gt;JavaScript Stacked Column Chart example&lt;/A&gt; from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a Stacked Column Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-column-chart" target=_blank&gt;JavaScript Stacked Column Chart&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/StackedColumn/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;We created 5&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt; and added them to a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumncollection.html"&gt;StackedColumnCollection&lt;/A&gt; 
&lt;LI&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumncollection.html"&gt;StackedColumnCollection&lt;/A&gt; itself is added to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt; collection, not the individual column series. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;How the Stacking and Grouping Works for Column Series&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt; have a property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt; which defines how columns are grouped and stacked.&lt;/P&gt;
&lt;P&gt;When two&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;&amp;nbsp;have a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;&amp;nbsp;set the grouping behaves differently.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Here's an example below to visualize how this stackedGroupId. Code samples can be found in the following sections.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/StackedColumn/GroupingOptions/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;A: Stacked Column Mode&lt;/H3&gt;
&lt;P&gt;By default, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;&amp;nbsp;is undefined. When this is unset, or, &lt;STRONG&gt;when set to the same value, columns stack vertically&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\GroupingOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3 align=left&gt;B: Grouped (Side by Side) Mode&lt;/H3&gt;
&lt;P&gt;&lt;STRONG&gt;When&lt;/STRONG&gt; &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;&lt;STRONG&gt;stackedGroupId&lt;/STRONG&gt;&lt;/A&gt;&lt;STRONG&gt;&amp;nbsp;is different on two columns, then the columns are grouped&lt;/STRONG&gt;. This allows you to have multiple stacked groups.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\GroupingOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3 align=left&gt;C: Mixed (Stacked &amp;amp; Grouped) Mode&lt;/H3&gt;
&lt;P&gt;To demonstrate the purpose of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;, below we have set one column to one&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;, and two other columns to another&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;. This creates two stacked groups, one with Orange/Red series (which have the same&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html#stackedgroupid"&gt;stackedGroupId&lt;/A&gt;) and another with the blue series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\GroupingOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;D:&amp;nbsp;100% Stacked Column Chart Mode&lt;/H3&gt;
&lt;P&gt;SciChart.js also supports a &lt;STRONG&gt;100% Stacked Column chart, which can be enabled by setting a single flag&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumncollection.html#isonehundredpercent"&gt;StackedColumnCollection.isOneHundredPercent&lt;/A&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedColumn\GroupingOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-column-chart"&gt;JavaScript 100% Stacked Column chart&lt;/A&gt; where&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumncollection.html#isonehundredpercent"&gt;StackedColumnCollection.isOneHundredPercent&lt;/A&gt; is true&lt;/EM&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1" Status="New Topic" CreatedOn="2016-09-02T12:03:50.8610912Z" ModifiedOn="2023-03-15T21:02:04.8923098Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Stacked Mountain Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:02:04.8923098Z">&lt;P&gt;Stacked Mountain Charts can be created by a combination of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountainrenderableseries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountaincollection.html"&gt;StackedMountainCollection&lt;/A&gt;&amp;nbsp;types.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountainrenderableseries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt; share many properties with the&amp;nbsp;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;added feature that columns automatically stack vertically or side by side&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;.&lt;/SPAN&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;JavaScript Stacked Mountain Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-stacked-mountain-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;JavaScript Stacked Mountain Chart example&lt;/A&gt; from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a Stacked Mountain Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;JavaScript Stacked Mountain Series&lt;/A&gt;, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedMountain\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedMountain\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;We created 3&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountainrenderableseries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt; and added them to a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountaincollection.html"&gt;StackedMountainCollection&lt;/A&gt; 
&lt;LI&gt;The StackedMountainCollection itself is added to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;sciChartSurface.renderableSeries&lt;/A&gt; collection, not the individual mountain series. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/StackedMountain/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Creating 100% Stacked Mountain Charts&lt;/H2&gt;
&lt;P&gt;SciChart.js also supports a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart" target=_blank&gt;JavaScript 100% Stacked Mountain chart&lt;/A&gt;, which can be enabled by setting a single flag:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountaincollection.html#isonehundredpercent"&gt;StackedMountainCollection.isOneHundredPercent&lt;/A&gt;&lt;STRONG&gt;.&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\StackedMountain\GroupingOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Setting this flag results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/StackedMountain/GroupingOptions/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stacked-mountain-chart"&gt;JavaScript 100% Stacked Mountain chart&lt;/A&gt; when&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountaincollection.html#isonehundredpercent"&gt;StackedMountainCollection.isOneHundredPercent&lt;/A&gt; is true&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d" Status="New Topic" CreatedOn="2016-09-02T12:04:47.7566372Z" ModifiedOn="2023-03-15T20:57:01.5569636Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The OHLC Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:57:01.5569636Z">&lt;P&gt;Ohlc Series or JavaScript Stock Charts can be created using the&amp;nbsp;&lt;STRONG&gt;FastOhlcRenderableSeries&lt;/STRONG&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-ohlc-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-ohlc-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;JavaScript Ohlc Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-candlestick-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;&lt;EM&gt;JavaScript Candlestick Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, which allows switching between candle &amp;amp; OHLC.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create an Ohlc Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-ohlc-chart" target=_blank&gt;Javascript Ohlc Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\OhlcCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\OhlcCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/OhlcCharts/Basic/&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Ohlc Series instance is created and added to the &lt;STRONG&gt;SciChartSurface.renderableSeries&lt;/STRONG&gt; collection. 
&lt;LI&gt;This requires a special dataseries type: OhlcDataSeries, which accepts X, Open, High, Low, Close values 
&lt;LI&gt;We set the up/down stroke color via properties &lt;STRONG&gt;strokeUp&lt;/STRONG&gt;, &lt;STRONG&gt;strokeDown&lt;/STRONG&gt;. 
&lt;LI&gt;We set &lt;STRONG&gt;dataPointWidth&lt;/STRONG&gt; - which defines the fraction of width to occupy 
&lt;LI&gt;We use a special axis type called the CategoryAxis which removes gaps in stock market data.&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the &lt;STRONG&gt;CategoryAxis&lt;/STRONG&gt; see the page on&amp;nbsp;&lt;A href="e4489a79-987b-4a06-ac98-586190c47ec5"&gt;Value Axis vs. CategoryAxis&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;A &lt;STRONG&gt;CategoryAxis&lt;/STRONG&gt;&amp;nbsp;is necessary&amp;nbsp;if you have Forex or Stock market data which includes weekend or overnight gaps, as this axis type measures by x-index, not by x-value. For CryptoCurrency data the &lt;STRONG&gt;NumericAxis&lt;/STRONG&gt; can be used as these are 24/7 markets.&lt;/P&gt;
&lt;P&gt;You can format the date labels on the XAxis by following the instructions on the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis Label Formatting&lt;/A&gt; page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Volume Bars to an OHLC Chart&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;Candlestick Chart example&lt;/A&gt; shows a technique to add volume bars docked to the bottom of the chart. The technique is the same for OHLC series so please see the&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;candlestick docs&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Painting&amp;nbsp;Ohlc bars with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of specific OHLC Bars using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="642d697b-5b5c-4f53-a47b-7aa02d0f74b8"&gt;PaletteProvider - Per-point colouring of Candlestick/Ohlc Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="7b54a698-3302-4969-919c-828ca5f03afb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3e1e5127-18a5-4013-9652-c222cb4e3e62" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a53bef2b-820c-45a3-9903-ad426d572aae" Status="New Topic" CreatedOn="2017-06-01T09:43:50.9488113Z" ModifiedOn="2023-03-15T21:00:17.3512775Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Bubble Series Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:00:17.3512775Z">&lt;P&gt;Bubble Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbubblerenderableseries.html"&gt;FastBubbleRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-bubble-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-bubble-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-bubble-chart" target=_blank&gt;JavaScript Bubble Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-bubble-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-bubble-chart" target=_blank&gt;JavaScript Bubble Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Bubble Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-bubble-chart" target=_blank&gt;Javascript Bubble Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Bubble Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html"&gt;PointMarker&lt;/A&gt; with a width, height = 64&lt;STRONG&gt;.&lt;/STRONG&gt; Note that this pointmarker will be scaled up or down relative to bubble size. Having&amp;nbsp;a strokeThickness of 0 can create a better visual. 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basedataseries.html"&gt;DataSeries&lt;/A&gt; - which stores the Xyz data to render, where X,Y is position and Z is scale factor. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/BubbleCharts/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Because the Bubble Series renders a single point-market but scales for each point, &lt;STRONG&gt;it is advisable not to use a Stroke on the PointMarker&lt;/STRONG&gt;, as this could get pixellated when the bubble is scaled up or down. This approach of ours results in extremely high performance charts - hundreds of thousands of data-points are possible with SciChart.js.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Scaling Bubble sizes per-point&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The Bubble chart sizes are scaled using the zValue on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries.html"&gt;XyzDataSeries&lt;/A&gt;. By default, the z-value is pixels.&lt;/P&gt;
&lt;P&gt;You can scale up/down the entire bubble series by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbubblerenderableseries.html#zmultiplier"&gt;FastBubbleRenderableSeries.zMultiplier&lt;/A&gt; property. Default value=1.&lt;/P&gt;
&lt;P&gt;You can modify or edit sizes by adjusting the zValues via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries.html#updatexyz"&gt;xyzDataSeries.updateXyz()&lt;/A&gt; or similar. See the&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;DataSeries Documentation&lt;/A&gt; pages for more info about data updates.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Bubble sizes can be scaled using the DataSeries zValue, or the zMultiplier property (see above). What if you wanted to scale a bubble series depending on the zoom level of the viewport? Here's a quick worked example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\ScaleBasedOnZoom\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/BubbleCharts/ScaleBasedOnZoom/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Bubble Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a&amp;nbsp;Bubble Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Or, by simply skipping a point if using a value-axis. Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Different Point-Markers on a Bubble Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Bubble Series&amp;nbsp;is marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basepointmarker.html"&gt;PointMarker&lt;/A&gt;. Several different types of PointMarker are available in SciChart.js:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ellipsepointmarker.html"&gt;EllipsePointMarker&lt;/A&gt; - Renders a circle at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/squarepointmarker.html"&gt;SquarePointMarker&lt;/A&gt; - Renders a square at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/trianglepointmarker.html"&gt;TrianglePointMarker&lt;/A&gt; - Renders a triangle at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/crosspointmarker.html"&gt;CrossPointMarker&lt;/A&gt; - Renders a plus sign '+' at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xpointmarker.html"&gt;XPointMarker&lt;/A&gt; - Renders an 'x' at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spritepointmarker.html"&gt;SpritePointMarker&lt;/A&gt; - Allows an image to be used at each point to create custom pointmarkers &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Any of these can be used to create a bubble chart.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There is also a TypeScript example of custom pointmarkers in the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-custom-pointmarkers" target=_blank&gt;SciChart.js Demo.&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Painting Bubbles with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of PointMarkers individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="c36e220e-71b3-48f2-a4ab-ac1e7699b269"&gt;PaletteProvider - Per-point colouring of Scatter Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6d291a82-3990-4a2e-9156-3c71562adc4a" Status="New Topic" CreatedOn="2016-09-02T09:36:32.533794Z" ModifiedOn="2020-04-08T14:30:43.15267Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Custom RenderableSeries API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-04-08T14:30:43.15267Z">&lt;H2&gt;Creating your Own Series&lt;/H2&gt;
&lt;P&gt;If the built-in chart types in SciChart are not enough, you can create your own RenderableSeries! CustomRenderableSeries&amp;nbsp;should extend&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt; if you want to provide some custom data or one of predefined base classes if you want to display data from one of&amp;nbsp;&lt;A href="3425a202-cb28-4349-915f-ccf122d3a766"&gt;default DataSeries implementations&lt;/A&gt;.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=273&gt;Base class for CustomRenderableSeries&lt;/TD&gt;
&lt;TD&gt;When to use&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyRenderableSeriesBase.html"&gt;XyRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;XyDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyyRenderableSeriesBase.html"&gt;XyyRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyyDataSeries.html"&gt;XyyDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.HlRenderableSeriesBase.html"&gt;HlRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.HlDataSeries.html"&gt;HlDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.OhlcRenderableSeriesBase.html"&gt;OhlcRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;OhlcDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=273&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.XyzRenderableSeriesBase.html"&gt;XyzRenderableSeriesBase&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;XyzDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries.html"&gt;BaseRenderableSeries&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If&amp;nbsp;default DataSeries implementations aren't suitable for data which should be dispayed and&amp;nbsp;you want to create custom DataSeries type&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;For example let's try to create a series which draws&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~getPointMarker.html"&gt;PointMarker&lt;/A&gt; at specified (x, y) coordinates:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomRenderableSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomRenderableSeries extends XyRenderableSeriesBase {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates a new instance of &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; XyRenderableSeriesBase} class&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomRenderableSeries() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // In default constructor we use:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - XyRenderPassData which will store points to draw ( If you need to store some additional data for drawing you can extend it and add additional fields )&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - PointMarkerHitProvider which performs hit checks on points rendered by series. In our case we just check if point marker is hit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - NearestXyPointProvider allows to locate nearest (x, y) point to specified point on screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this(new XyRenderPassData(), new PointMarkerHitProvider(), new NearestXyPointProvider());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Creates a new instance of &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; XyRenderableSeriesBase} class&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param currentRenderPassData The render pass data instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitProvider&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; The hit provider instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param nearestPointProvider&amp;nbsp; The nearest point provider instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected CustomRenderableSeries(XyRenderPassData currentRenderPassData, IHitProvider hitProvider, INearestPointProvider nearestPointProvider) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(currentRenderPassData, hitProvider, nearestPointProvider);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Draws the series using the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; IRenderContext2D}, the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; IAssetManager2D} and the &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; ISeriesRenderPassData} passed in&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderContext&amp;nbsp; The render context. This is a graphics object which has methods to draw lines, quads and polygons to the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param assetManager&amp;nbsp;&amp;nbsp; The asset manager. This is manager for graphic assets which has method for creation pens, brushes and textures&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param renderPassData The render pass data which contain a resampled point series, the index range of point on the screen&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; *&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; and the current coordinate calculator of XAxis and YAxis to convert data-point to screen points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalDraw(IRenderContext2D renderContext, IAssetManager2D assetManager, ISeriesRenderPassData renderPassData) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we cast render pass data to type of render pass data which we created in constructor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyRenderPassData renderPassDataToDraw = (XyRenderPassData) renderPassData;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// here we need to draw something using specified renderContext!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // use helper method to draw data as point markers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; drawPointMarkers(renderContext, assetManager, renderPassDataToDraw.xCoords, renderPassDataToDraw.yCoords);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;CustomRenderableSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Xamarin&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 
&lt;P&gt;class CustomRenderableSeries : XyRenderableSeriesBase&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomRenderableSeries() : this(new XyRenderPassData(), new PointMarkerHitProvider(), new NearestXyPointProvider())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // In default constructor we use:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - XyRenderPassData which will store points to draw ( If you need to store some additional data for drawing you can extend it and add additional fields )&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - PointMarkerHitProvider which performs hit checks on points rendered by series. In our case we just check if point marker is hit&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // - NearestXyPointProvider allows to locate nearest (x, y) point to specified point on screen&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected CustomRenderableSeries(XyRenderPassData currentRenderPassData, IHitProvider hitProvider, INearestPointProvider nearestPointProvider) : base(currentRenderPassData, hitProvider, nearestPointProvider)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected override void InternalDraw(IRenderContext2D renderContext, IAssetManager2D assetManager, ISeriesRenderPassData renderPassData)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we cast render pass data to type of render pass data which we created in constructor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; XyRenderPassData renderPassDataToDraw = (XyRenderPassData)renderPassData;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we need to draw something using specified renderContext!&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // use helper method to draw data as point markers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; DrawPointMarkers(renderContext, assetManager, renderPassDataToDraw.XCoords, renderPassDataToDraw.YCoords);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;IRenderContext2D and IAssetManager2D&amp;nbsp;– the Immediate Mode Graphics&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D.html"&gt;IRenderContext2D&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D.html"&gt;IAssetManager2D&lt;/A&gt;&amp;nbsp;passed into the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~internalDraw.html"&gt;internalDraw()&lt;/A&gt; method&amp;nbsp;are parts of&amp;nbsp;the graphics context for this render pass. Use this to draw to the screen.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Note Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: For a full walk-through of the RenderContext API, see the&amp;nbsp;&lt;A href="2e02ad3c-378c-4512-9b05-49a6b0f0fa61"&gt;section on Immediate Mode RenderContext API&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;ISeriesRenderPassData – the current Data to Draw&lt;/H2&gt;
&lt;P&gt;The data to draw is contained in the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt; passed in to the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.BaseRenderableSeries~internalDraw.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;internalDraw()&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; method. Using the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt;&amp;nbsp;you can access the data values and coordinates&amp;nbsp;to draw, the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~xPointRange.html"&gt;PointRange&lt;/A&gt;&amp;nbsp;(the indices of the data to draw, inclusive), the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~getXCoordinateCalculator.html"&gt;XCoordinateCalculator&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.SeriesRenderPassData~getYCoordinateCalculator.html"&gt;YCoordinateCalculator&lt;/A&gt; (which transforms data to pixel coordinates).&lt;/P&gt;
&lt;P&gt;Depending on DataSeries type&amp;nbsp;you can have a different&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.ISeriesRenderPassData.html"&gt;ISeriesRenderPassData&lt;/A&gt;&amp;nbsp;type and different ways to access the data to draw.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;SeriesRenderPassData type&lt;/TD&gt;
&lt;TD&gt;DataSeries type&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyRenderPassData.html"&gt;XyRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyyRenderPassData.html"&gt;XyyRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyyDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyyDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.XyzRenderPassData.html"&gt;XyzRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.XyzDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;XyzDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.OhlcRenderPassData.html"&gt;OhlcRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.OhlcDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;OhlcDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.HlRenderPassData.html"&gt;HlRenderPassData&lt;/A&gt;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.HlDataSeries.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;HlDataSeries&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.renderableSeries.data.UniformHeatmapRenderPassData.html"&gt;UniformHeatmapRenderPassData&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If you want to use&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.model.dataSeries.UniformHeatmapDataSeries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt; as data source for custom&amp;nbsp;RenderableSeries&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;The types above could be extended to add some additional information which is required for rendering ( e.g. ColumnRenderPassData extends XyRenderPassData and adds fields for caching of column width in pixels and coordinate of zero line ).&lt;/P&gt;
&lt;H2&gt;Example: SplineRoundedColumnRenderableSeries&lt;/H2&gt;
&lt;P&gt;We have a full worked&amp;nbsp;&lt;A href="https://www.scichart.com/example/android-chart-custom-series-spline-line/"&gt;example&lt;/A&gt;,&amp;nbsp;which shows how to create a&amp;nbsp;rounded column&amp;nbsp;series with this powerful API.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="2D_Chart_Types_files/Rounded-Columns.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d9007373-3f18-4bbd-be21-86a97872b4ee" Status="New Topic" CreatedOn="2019-02-12T17:53:49.6433146Z" ModifiedOn="2023-03-15T21:03:03.5455215Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Pie Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:03:03.5455215Z">&lt;P&gt;In SciChart.js, the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-pie-chart" target=_blank&gt;JavaScript Pie Chart&lt;/A&gt;&amp;nbsp;type is represented by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html"&gt;SciChartPieSurface&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-pie-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-pie-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-pie-chart" target=_blank&gt;JavaScript Pie Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-pie-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-pie-chart" target=_blank&gt;JavaScript Pie Chart example&lt;/A&gt; from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The Pie Chart represents data in a form of circle divided into triangular wedges called segments. A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; represents a percentage that corresponds to a particular value. This value appears drawn on every segment and can be set&amp;nbsp;in code. A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; can be selected by clicking either on it or on the corresponding item in the Legend. This action provides a visual feedback on the chart and the Legend.&lt;/P&gt;
&lt;H2&gt;Create a Pie Chart&lt;/H2&gt;
&lt;P&gt;To create a Pie Chart, you have to create a number of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; instances and add them to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html#piesegments"&gt;SciChartPieSurface.pieSegments&lt;/A&gt; collection.&lt;/P&gt;
&lt;P&gt;Each&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; has properties for &lt;STRONG&gt;value&lt;/STRONG&gt;, &lt;STRONG&gt;text&lt;/STRONG&gt; and &lt;STRONG&gt;color&lt;/STRONG&gt;, or alternatively &lt;STRONG&gt;colorLinearGradient&lt;/STRONG&gt; if you wish to specify a gradient fill. The property &lt;STRONG&gt;isSelected&lt;/STRONG&gt; denotes whether the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;is in the selected state or not.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\PieChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\PieChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/PieChart/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Dynamically Updating a Pie Chart&lt;/H2&gt;
&lt;P&gt;Pie Charts can be dynamically updated by setting the PieSegment.value property. When SciChartPieSurface.animate is true, updates to the pie chart will be animated.&lt;/P&gt;
&lt;P&gt;Try this code below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\PieChart\DynamicUpdates\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/PieChart/DynamicUpdates/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Formatting Pie Chart Labels&lt;/H2&gt;
&lt;P&gt;Several options for formatting Pie Chart labels are possible with SciChart.js.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Set &lt;STRONG&gt;SciChartPieSurface.seriesSpacing&lt;/STRONG&gt; to put a padding in between pie segments. 
&lt;LI&gt;Set &lt;STRONG&gt;SciChartPieSurface.labelStyle&lt;/STRONG&gt; to set a global label font size, color and family 
&lt;LI&gt;Override &lt;STRONG&gt;SciChartPieSurface.labelProvider.getSegmentText&lt;/STRONG&gt; to set a general label text override 
&lt;LI&gt;Set &lt;STRONG&gt;PieSegment.labelOffset&lt;/STRONG&gt; to move labels further away from the pie segment. 
&lt;LI&gt;Set &lt;STRONG&gt;PieSegment.labelStyle&lt;/STRONG&gt; to set individual pie segment font and color 
&lt;LI&gt;Set &lt;STRONG&gt;PieSegment.radiusAdjustment&lt;/STRONG&gt; to make the pie segment larger or smaller. 
&lt;LI&gt;LabelProviders are also available on individual &lt;STRONG&gt;PieSegment.labelProvider&lt;/STRONG&gt; property &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Below, an example combines several of these techniques:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\PieChart\FormatOptions\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/PieChart/FormatOptions/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9bbf7021-7ef1-49d7-9904-c28029ab9a48" Status="New Topic" CreatedOn="2019-02-12T17:53:56.0583001Z" ModifiedOn="2023-03-15T21:03:23.7063538Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Donut Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:03:23.7063538Z">&lt;P&gt;In SciChart.js, the JavaScript Donut Chart type is represented by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html"&gt;SciChartPieSurface&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-donut-chart" target=_blank&gt;JavaScript Donut Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-donut-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-donut-chart" target=_blank&gt;JavaScript Donut Chart example&lt;/A&gt; from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The Donut Chart represents data in a form of circle divided into segments called PieSegments. A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; represents a percentage that corresponds to a particular value. This value appears drawn on every segment and can be set&amp;nbsp;in code. A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; can be selected by clicking either on it or on the corresponding item in the Legend. This action provides a visual feedback on the chart and the Legend.&lt;/P&gt;
&lt;H2&gt;Create a Donut Chart&lt;/H2&gt;
&lt;P&gt;To create a Donut Chart, you have to create a number of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt; instances and add them to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html#piesegments"&gt;SciChartPieSurface.pieSegments&lt;/A&gt; collection. Set the property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html#pietype"&gt;sciChartPieSurface.pieType = EPieType.Donut&lt;/A&gt; to enable a donut chart. Then the property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartpiesurface.html#holeradius"&gt;sciChartPieSurface.holeRadius&lt;/A&gt; is obeyed to create the donut.&lt;/P&gt;
&lt;P&gt;Each&amp;nbsp;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;has properties for &lt;STRONG&gt;value&lt;/STRONG&gt;, &lt;STRONG&gt;text&lt;/STRONG&gt; and &lt;STRONG&gt;color&lt;/STRONG&gt;, or alternatively &lt;STRONG&gt;colorLinearGradient&lt;/STRONG&gt; if you wish to specify a gradient fill. The property isSelected denotes whether the&amp;nbsp;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/piesegment.html"&gt;PieSegment&lt;/A&gt;&amp;nbsp;is in the selected state or not.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DonutChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DonutChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/DonutChart/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling Donut Chart Segments &amp;amp; Formatting Labels&lt;/H2&gt;
&lt;P&gt;Detailed documentation on how to style pie / donut chart segments and format labels can be found at the&amp;nbsp;&lt;A href="d9007373-3f18-4bbd-be21-86a97872b4ee"&gt;Pie Chart Documentation page&lt;/A&gt;.&lt;/P&gt;
&lt;P style="COLOR: rgb(255,0,0)"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e627d5a1-bbcc-4265-bd91-fcf1d9a5bcf0" Status="New Topic" CreatedOn="2019-08-09T06:29:04.0123113Z" ModifiedOn="2023-03-15T21:00:37.8836675Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Fan Charts Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:00:37.8836675Z">&lt;P&gt;Fan Charts are provided by using multiple&amp;nbsp;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;Band Series&lt;/A&gt; on the same chart.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-fan-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-fan-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-fan-chart" target=_blank&gt;JavaScript Fan Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-fan-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-fan-chart" target=_blank&gt;JavaScript Fan Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Fan Chart&lt;/H2&gt;
&lt;P&gt;There is no Fan Chart type out of the box in SciChart.js, but it is easy to create one using multiple Band series. Start with the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\FanChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\FanChart\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/FanChart/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In the example above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Some variance data is first created and returned as an array of objects. 
&lt;LI&gt;A Line series is created to display the actual X,Y value 
&lt;LI&gt;Several Band Series&amp;nbsp;are&amp;nbsp;created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection to render the variance bands. 
&lt;LI&gt;We set the stroke, fill properties&amp;nbsp;and opacity of each series&amp;nbsp;(more info over at&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html"&gt;FastBandRenderableSeries in TypeDoc&lt;/A&gt;). 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/basedataseries.html"&gt;DataSeries&lt;/A&gt; - in this case an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyydataseries.html"&gt;XyyDataSeries&lt;/A&gt; which stores X, Y1, Y2 data for bands, and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt; for lines. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="537e0dce-c257-4348-bcc7-240f80714eac" Status="New Topic" CreatedOn="2021-02-02T17:06:04.7640706Z" ModifiedOn="2023-03-15T20:59:29.819911Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DigitalBandSeriesType" BuildFlags="">
                <Title m="2021-02-02T17:06:12.8819727Z">The Digital (Step) Band Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T20:59:29.819911Z">&lt;P&gt;A Digital Band Series, or High-Low Fill between two Digital or Step lines can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html"&gt;FastBandRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-band-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-digital-band-chart" target=_blank&gt;JavaScript Digital Band Chart Example&lt;/A&gt;&amp;nbsp;can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-digital-band-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The &lt;A href="https://demo.scichart.com/javascript-digital-band-chart" target=_blank&gt;JavaScript Digital Band Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Digital Band Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-digital-band-chart" target=_blank&gt;Javascript Digital Band Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalBandSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\DigitalBandSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Band Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries"&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, fill properties for when Y1 &amp;gt; Y2 and&amp;nbsp;vice versa&amp;nbsp;(more info over at&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html"&gt;FastBandRenderableSeries&lt;/A&gt; in TypeDoc). 
&lt;LI&gt;We set the &lt;STRONG&gt;isDigitalLine&lt;/STRONG&gt; property to true. 
&lt;LI&gt;We assign a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html#dataseries"&gt;DataSeries&lt;/A&gt; - in this case an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyydataseries.html"&gt;XyyDataSeries&lt;/A&gt; which stores X, Y1, Y2 data. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/DigitalBandSeries/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Digital Band Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Digital Band Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2 align=left&gt;Add Point Markers onto a Band Series&lt;/H2&gt;
&lt;P&gt;It is possible to put scatter point markers of varying type (Ellipse, Square, Triangle, Cross, Custom) onto a Band Series via the PointMarker API. To learn more, see the documentation page&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Drawing PointMarkers on Series&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Painting Band Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of band segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9"&gt;PaletteProvider - Per-point colouring of Band Charts&lt;/A&gt; documentation page.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="72e715df-34e7-4835-8395-9e447df208e2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7cf91fa8-841d-4bb8-adbd-44a9dd73b238" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9c421b30-f025-4432-b235-4bd365e4545d" Status="New Topic" CreatedOn="2021-03-24T18:07:09.3177819Z" ModifiedOn="2023-03-15T21:04:27.2187257Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Spline (Smoothed) Band Series Type" BuildFlags="">
                <Title m="2021-03-24T18:07:20.9167879Z">The Spline (Smoothed) Band Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-15T21:04:27.2187257Z">&lt;P&gt;Spline Band or Smoothed High/Low Fill Series can be created using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinebandrenderableseries.html" target=_blank&gt;SplineBandRenderableSeries&lt;/A&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-spline-band-chart" target=_blank&gt;JavaScript Spline Band Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-spline-band-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-spline-band-chart" target=_blank&gt;&lt;EM&gt;JavaScript Spline Band Chart example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Create a&amp;nbsp;Spline Band Series&lt;/H2&gt;
&lt;P&gt;To create a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinebandrenderableseries.html" target=_blank&gt;Javascript Spline Band Chart&lt;/A&gt; with SciChart.js, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineBand\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\SplineBand\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the code above:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;A&amp;nbsp;Spline Band Series instance is created and added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#renderableseries" target=_blank&gt;SciChartSurface.renderableSeries&lt;/A&gt; collection. 
&lt;LI&gt;We set the stroke, strokeY1,&amp;nbsp;strokethickness properties 
&lt;LI&gt;We assign an&amp;nbsp;XyyDataSeries - which stores the Xyy data to render. 
&lt;LI&gt;We set the number of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinebandrenderableseries.html#interpolationpoints" target=_blank&gt;interpolationPoints&lt;/A&gt; - how many points between real Xy data points will be interpolated using a Spline interpolation algorithm. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/SplineBand/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Performance Tips in Spline Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;SplineBandRenderableSeries.interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set to zero, then this series renders and displays exactly like a FastLineRenderableSeries.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;When the&amp;nbsp;&lt;/EM&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinelinerenderableseries.html#interpolationpoints" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/splinemountainrenderableseries.html#interpolationpoints" target=_blank&gt;&lt;EM&gt;interpolationPoints&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;property is set&lt;/EM&gt; &lt;EM&gt;to another number, e.g. 10, then SciChart.js will calculate 10 points for each Xy datapoint you add to the XyDataSeries. This means you will be displaying 10x the number of datapoints.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;SciChart.js can handle millions of datapoints, but this is something to be aware of. You might want to adjust down the interpolationPoints depending on amount of data on the chart, or zoom level.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Render&amp;nbsp;a Gap&amp;nbsp;in a Spline Band Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to have null points or&amp;nbsp;gaps&amp;nbsp;in a Spline Band Series by passing a&amp;nbsp;data point with a &lt;STRONG&gt;NaN&lt;/STRONG&gt; value&amp;nbsp;as the &lt;STRONG&gt;Y&lt;/STRONG&gt; value.&amp;nbsp;Please refer to the&amp;nbsp;&lt;A href="58603bb5-a47d-4f69-a142-2411ff2e762c"&gt;Common Series Features - Draw Gaps in Series&lt;/A&gt;&amp;nbsp;article for more details.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Add Point Markers onto a Spline Band Series&lt;/H2&gt;
&lt;P&gt;Every data point of a Spline Band Series can be marked with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#pointmarker"&gt;PointMarker&lt;/A&gt;.&amp;nbsp;To add Point Markers to the Spline Mountain Series, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;PointMarkers API Documentation&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; PointMarkers are only applied to the original data-points, not the spline interpolated points which are for display purposes only.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;To learn more about the types of Point Marker in SciChart.js, see the&amp;nbsp;&lt;A href="e4122c58-e668-4ef5-8080-bb7655d289e3"&gt;Point Markers API documentation&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;There&amp;nbsp;is also a dedicated&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;Scatter Series type&lt;/A&gt;&amp;nbsp;and a&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;Bubble Series type&lt;/A&gt;&amp;nbsp;with some more options.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Painting Spline Band Segments with Different Colors&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;It is possible to define the colour of line and band segments individually using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;For more info on how to do this, see the&amp;nbsp;&lt;A href="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9"&gt;PaletteProvider - Per-point colouring of Band Charts&lt;/A&gt; documentation page. The same technique applies to spline line charts.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e99914e3-6526-410c-a0fa-05c4f1d90573" Status="New Topic" CreatedOn="2022-08-16T15:56:57.9246269Z" ModifiedOn="2023-12-22T13:28:21.1404871Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TheTextSeriesType" BuildFlags="">
                <Title m="2022-08-16T15:57:07.7806988Z">The Text Series Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T13:28:21.1404871Z">&lt;P&gt;There are several ways to add text to a SciChart.js chart. These include the TextAnnotation, series DataLabels and also the FastTextRenderableSeries (Text Series).&lt;/P&gt;
&lt;P&gt;Text Series should be used when you want to render a lot of text, not necessarily at X,Y positions of other chart series.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-text-chart"&gt;JavaScript Text / Word Cloud Chart Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-text-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-text-chart" target=_blank&gt;&lt;EM&gt;JavaScript Text Series example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo.&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;Creating a Text Series&lt;/H2&gt;
&lt;P&gt;To create a chart using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/FastTextRenderableSeries.html"&gt;FastTextRenderableSeries&lt;/A&gt; use the following code.&amp;nbsp; Note that it is required to set a style with fontFamily and size in the dataLabels property in order for text to be drawn.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;FastTextRenderableSeries uses the special&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xytextdataseries.html"&gt;XyTextDataSeries&lt;/A&gt; which allows you to supply&amp;nbsp;text values directly on the dataSeries, rather than having to use metadata.&amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\TextSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\TextSeries\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/TextSeries/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Customising the Text Series&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasttextrenderableseries.html"&gt;FastTextRenderableSeries&lt;/A&gt;&amp;nbsp;uses&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textdatalabelprovider.html"&gt;TextDataLabelProvider&lt;/A&gt; for the generation and drawing of text, which has a slightly reduced api compared with the full DataLabels api.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;It has&amp;nbsp;&lt;STRONG&gt;getPosition&lt;/STRONG&gt; and &lt;STRONG&gt;getColor&lt;/STRONG&gt; functions, but text is always taken from the &lt;STRONG&gt;XyTextDataSeries&lt;/STRONG&gt;, and there is no label skipping - all labels are drawn even if they overlap.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;There is however an &lt;STRONG&gt;onAfterGenerate&lt;/STRONG&gt; function that is called with the dataLabels before they are drawn which you can use to perform additional adjustments.&amp;nbsp; If you need to rely on the label sizes in this function, make sure to set &lt;STRONG&gt;calculateTextBounds:&amp;nbsp;true&lt;/STRONG&gt; in dataLabels.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fasttextrenderableseries.html"&gt;FastTextRenderableSeries&lt;/A&gt;&amp;nbsp;supports pointmarkers and also&amp;nbsp;&lt;STRONG&gt;horizontalTextPosition&lt;/STRONG&gt; and &lt;STRONG&gt;verticalTextPosititon&lt;/STRONG&gt; dataLabels options.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Text is drawn using Native Text rendering, so to use any font other than arial you will need ensure that font is available on your server (as fontname.ttf), or registered using &lt;STRONG&gt;sciChartSurface.registerFont&lt;/STRONG&gt; if coming from a remote url.&amp;nbsp;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\TextSeries\Customisation\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/TextSeries/Customisation/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="f328c8b3-8938-4db4-9ffd-cecbf006aad6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="e9434bfa-ad33-4ed5-a634-942029097f55" AutoIndex="false">
            <Caption m="2016-08-04T13:46:49.4131783Z">ChartModifier API</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="d9cfccc2-e487-4f4b-a53d-1257836f50e5" AutoIndex="false">
                <Caption m="2016-10-07T15:59:13.1267024Z">ChartModifier APIs</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="f1ace0de-c745-4610-a766-eb59af8cf33d" Status="New Topic" CreatedOn="2016-08-04T13:47:17.7297161Z" ModifiedOn="2021-10-08T13:50:22.6375081Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What is the ChartModifier API" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2021-10-08T13:50:22.5495051Z">&lt;P&gt;Within the SciChart.js JavaScript Chart SDK, ChartModifiers are the classes which can be added to a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt; to give it a &lt;STRONG&gt;certain&lt;/STRONG&gt; &lt;STRONG&gt;behavior&lt;/STRONG&gt;. For instance, all &lt;STRONG&gt;zooming, panning operations&lt;/STRONG&gt;, &lt;STRONG&gt;tooltips&lt;/STRONG&gt;, &lt;STRONG&gt;legends&lt;/STRONG&gt; and even &lt;STRONG&gt;selection&lt;/STRONG&gt; of points or lines are handled by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html"&gt;ChartModifierBase&lt;/A&gt; derived classes in the SciChart codebase.&lt;/P&gt;
&lt;P&gt;There are many different ChartModifiers provided by SciChart and each one deserves an article by itself! This article is concerned with simply giving an overview of the modifiers and where you can find the examples in our Examples Suite which demonstrate them.&lt;/P&gt;
&lt;P&gt;There are also several individual articles on the ChartModifiers and how to configure them in the SciChart.js Documentation. Please find them at the bottom of this page.&lt;/P&gt;
&lt;H2&gt;Zoom, Pan Modifiers&lt;/H2&gt;
&lt;P&gt;The following modifiers&amp;nbsp;can be used if you want to add scrolling or zooming behavior to a chart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=271&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3"&gt;ZoomPanModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;
&lt;TD height=19&gt;&lt;SPAN&gt;&lt;STRONG&gt;Pans&lt;/STRONG&gt; the chart in X, Y or both directions&amp;nbsp;with&amp;nbsp;inertia via finger&amp;nbsp;sliding.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="30ee889c-86dd-41d2-bc3f-ec0415855433"&gt;&lt;STRONG&gt;MouseWheelZoomPanModifier&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Zooms&lt;/STRONG&gt; the chart in or out on mouse-wheel (or two finger scroll).&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG style="COLOR: rgb(255,0,0)"&gt;&lt;A href="3522c82b-989f-4d1b-bc80-be617b68af2f"&gt;XAxisDragModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Scales&lt;/STRONG&gt; or pans an X Axis via mouse-drag.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG style="COLOR: rgb(255,0,0)"&gt;&lt;A href="8be89d95-1b3a-4ce3-8665-1f8f18d43b32"&gt;YAxisDragModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Scales&lt;/STRONG&gt; or pans an&amp;nbsp;Y Axis via mouse-drag.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;&lt;A href="4af28faf-3268-417a-8146-a3d25a8d9833"&gt;RubberBandXyZoomModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;&lt;STRONG&gt;Zooms&lt;/STRONG&gt; a chart&amp;nbsp;inside a rectangle or horizontal section that is drawn on the chart with a finger.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;&lt;A href="3404e05e-872c-4be6-ab19-52ddac8c4f94"&gt;ZoomExtentsModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN&gt;&lt;STRONG&gt;Resets the zoom&lt;/STRONG&gt; to the&amp;nbsp;data&amp;nbsp;extents via double-tapping.&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="14f8ca37-9a7f-49bd-b8bb-66b8b4e94bce"&gt;&lt;STRONG&gt;SciChartOverview&lt;/STRONG&gt;&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Creates an&lt;STRONG&gt; overview chart&lt;/STRONG&gt; that allows you to&lt;STRONG&gt; zoom and pan&lt;/STRONG&gt; the main chart&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Interactivity, Tooltips, Cursor Modifiers&lt;/H2&gt;
&lt;P&gt;These&amp;nbsp;modifiers&amp;nbsp;allow to interact with chart series or inspect them:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides a &lt;STRONG&gt;vertical slice cursor with tooltips&lt;/STRONG&gt; and markers rolling over a series.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG style="COLOR: rgb(255,0,0)"&gt;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Provides a &lt;STRONG&gt;crosshairs&lt;/STRONG&gt; with a tooltip and axis labels.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Miscellaneous Modifiers&lt;/H2&gt;
&lt;P&gt;Modifiers below are used as helpers and can be a useful addition to a chart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;Modifier Name&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=271&gt;&lt;STRONG&gt;&lt;A href="LegendModifier.html"&gt;LegendModifier&lt;/A&gt;&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN&gt;Allows&amp;nbsp;creation&amp;nbsp;and configuration a &lt;STRONG&gt;Legend&lt;/STRONG&gt; for a chart.&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about ChartModifiers API, please read the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt; article. To find out about a specific ChartModifier type, please refer to a corresponding article about this Modifier type.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="68b2810a-0062-4df0-8ef8-1aee896543da" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1fb37b67-2824-41eb-b735-174ae4f37b3f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="7534c459-3efb-4429-ac2f-d6186a541a5b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fac601dc-5435-4c51-abec-1c267f55f193" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="9ed76765-1e2c-4a01-b9dd-5b12ae5b813b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="d64a8807-f1d8-447b-b8df-a528953d466f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3404e05e-872c-4be6-ab19-52ddac8c4f94" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="25eb0a70-7616-4e61-abdf-66bbbcd77ac1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4af28faf-3268-417a-8146-a3d25a8d9833" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="30951493-a633-43c5-afe0-62074a06d043" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8be89d95-1b3a-4ce3-8665-1f8f18d43b32" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="fdf5b778-0561-4355-94e5-fd4703b80404" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3522c82b-989f-4d1b-bc80-be617b68af2f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="927ef68f-d5f6-41e9-be6b-95ea70d37c67" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="14f8ca37-9a7f-49bd-b8bb-66b8b4e94bce" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="c7ddb5a2-5c58-4351-9336-bafd039a556f" Status="New Topic" CreatedOn="2016-09-28T13:41:33.8227108Z" ModifiedOn="2020-10-13T10:54:18.1717058Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Common ChartModifiers Features" BuildFlags="">
                    <Title m="2016-10-07T16:00:02.5606327Z">Common ChartModifiers Features</Title>
                    <ContentsTitle m="2020-09-11T10:45:29.6512498Z">Common ChartModifiers Features</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2020-10-13T10:54:16.3420697Z">&lt;P&gt;All the ChartModifiers provided by SciChart.js implement the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ichartmodifierbase.html"&gt;IChartModifierBase interface&lt;/A&gt; and&amp;nbsp;derive from&amp;nbsp;the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html"&gt;ChartModifierBase&lt;/A&gt; class. These provide a powerful API which&amp;nbsp;gives&amp;nbsp;the full access to internals of a chart, axes, series, annotations, mouse, touch events and more.&lt;/P&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;What is a ChartModifier&lt;/A&gt;&amp;nbsp;article for the complete&amp;nbsp;list of all the Chart&amp;nbsp;Modifiers available out of the box in SciChart.&lt;/P&gt;
&lt;H2&gt;Common&amp;nbsp;Features of Chart Modifiers&lt;/H2&gt;
&lt;H3&gt;ChartModifierBase type&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html"&gt;ChartModifierBase type&lt;/A&gt; has the following public API.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Refer to our&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html"&gt;TypeDoc Documentation&lt;/A&gt; for up to date and commented / annotated functions and properties available on this type.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Feature&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#parentsurface"&gt;.parentSurface&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A property to get the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt; when the modifier is attached.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#isenabled"&gt;.isEnabled&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A property which determines if the current modifier is enabled or not&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#isattached"&gt;.isAttached&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, the modifier is attached to a parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#receivehandledevents"&gt;.receiveHandledEvents&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, the modifier will receive all events even if that event is marked as handled by a previous modifier. When false (default), the modifier will not receive events if they are handled.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#onattach"&gt;onAttach()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when the modifier is attached to a&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#onparentsurfacerendered"&gt;onParentSurfaceRendered()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;is rendered.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermousedown"&gt;modifierMouseDown()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse or touch-down event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermousemove"&gt;modifierMouseMove()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse or touch-move event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermouseup"&gt;modifierMouseUp()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse or touch-up event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermousewheel"&gt;modifierMouseWheel()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse wheel event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifierdoubleclick"&gt;modifierDoubleClick()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse or touch double-click event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermouseenter"&gt;modifierMouseEnter()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse-enter event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase.html#modifiermouseleave"&gt;modifierMouseLeave()&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A function (which may be overridden) which is called when a mouse-leave event occurs on the parent&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurface&lt;/A&gt;.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H3&gt;ChartModifierBase2D Type&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase2d.html"&gt;ChartModifierBase2D&lt;/A&gt; type provides a base class for all modifiers on 2D&amp;nbsp;&lt;A href="c66138c0-4f3e-48cb-9660-bb30cd6e2d13"&gt;SciChartSurfaces&lt;/A&gt;. Use this type when creating custom modifiers for 2D Charts.&lt;/P&gt;
&lt;H3&gt;ChartModifierBase3D Type&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase3d.html"&gt;ChartModifierBase3D&lt;/A&gt; type provides a base class for all modifiers on &lt;STRONG&gt;SciChart3DSurfaces&lt;/STRONG&gt;. Use this type when creating custom modifiers for 3D Charts.&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="da3f16c0-fcd7-4c5b-81f8-0e9a14ff5c40" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="e6dfa8ce-495c-4d6d-aab1-978dcc58bf2f" AutoIndex="false">
                <Caption m="2016-08-04T13:47:03.3171627Z">Zooming And Panning</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="ffe63a68-26a7-4dac-91d7-ea3e3ba97ef3" Status="New Topic" CreatedOn="2016-10-10T11:47:18.4493252Z" ModifiedOn="2023-07-19T11:41:37.6358043Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ZoomPanModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:44.3317812Z">ZoomPanModifier</Title>
                    <ContentsTitle m="2020-09-11T16:13:35.0715774Z">ZoomPanModifier</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-19T11:41:37.6358043Z">&lt;P&gt;SciChart.js provides an scrolling / panning&amp;nbsp;behavior via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoompanmodifier.html"&gt;ZoomPanModifier type&lt;/A&gt;, available out of the box.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;As of SciChart.js v3.2, &lt;STRONG&gt;ZoomPanModifier&lt;/STRONG&gt; now inherits &lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt;, allowing you to configure zooming, panning and touch-to-zoom interaction via a single modifier.&lt;/P&gt;
&lt;P&gt;All the properties for the&amp;nbsp;&lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt; may be set to control vertical/horizontal zooming, include/exclude axis from pinch zooming etc..&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoompanmodifier.html"&gt;ZoomPanModifier&lt;/A&gt;&amp;nbsp;allows to&amp;nbsp;&lt;STRONG&gt;restrict scrolling&lt;/STRONG&gt; to the horizontal or vertical direction only, via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoompanmodifier.html#xydirection"&gt;xyDirection property&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;ZoomPanModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A ZoomPanModifier can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable panning behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\ZoomPanModifier\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\ZoomPanModifier\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior:&lt;/P&gt;
&lt;DIV align=left&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/ZoomPanModifier/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/DIV&gt;
&lt;H2&gt;Additional Properties&lt;/H2&gt;
&lt;H3&gt;Allow Panning in only one direction (X or Y)&lt;/H3&gt;
&lt;P&gt;Panning can be restricted to X or Y by setting the &lt;STRONG&gt;ZoomPanModifier.xyDirection&lt;/STRONG&gt; property.&lt;/P&gt;
&lt;H3&gt;Allow Panning on only one X/Y axis&lt;/H3&gt;
&lt;P&gt;Panning can be restricted to a single X or Y axis by setting the &lt;STRONG&gt;ZoomPanModifier.xAxisId&lt;/STRONG&gt; or &lt;STRONG&gt;yAxisId&lt;/STRONG&gt; properties.&lt;/P&gt;
&lt;H3&gt;Adjust Pinch Zooming&amp;nbsp;/ Scale Factor&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The following is inherited from &lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Horizontal and vertical pinch zoom scale factor can be adjusted via the following properties. The default value is set to 0.005.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;ZoomPanModifier.horizontalGrowFactor&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;STRONG&gt;ZoomPanModifier&lt;/STRONG&gt;.verticalGrowFactor&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Include/Exclude Certain Axis from Pinch Zoom &lt;/H3&gt;
&lt;P&gt;The ZoomPanModifier allows you to include or exclude certain axis by axis.id from the pinch zoom operation. &lt;/P&gt;
&lt;P&gt;By default all axis are included, to exclude one or more X or Y axis, set the following property:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Exclude Axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Exclude a specific axis from the pinch zoom operation&lt;BR&gt;zoomPanModifier.includeXAxis(axisXInstance, false);&lt;BR&gt;zoomPanModifier.includeYAxis(axisYInstance, false);&lt;BR&gt;&lt;BR&gt;// Include specific axis from the pinch zoom operation&lt;BR&gt;zoomPanModifier.includeXAxis(axisXInstance, true);&lt;BR&gt;zoomPanModifier.includeYAxis(axisYInstance, true);&lt;BR&gt;&lt;BR&gt;// Reset flags&lt;BR&gt;zoomPanModifier.includeAllAxes();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Allow Pinch Zoom in only one direction&lt;/H3&gt;
&lt;P&gt;If you want to enable pinch zooming in only one direction,&amp;nbsp; e.g. horizontal only, modify the &lt;STRONG&gt;ZoomPanModifier.verticalGrowFactor&lt;/STRONG&gt; to equal 0.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3404e05e-872c-4be6-ab19-52ddac8c4f94" Status="New Topic" CreatedOn="2016-10-10T12:02:54.7541082Z" ModifiedOn="2021-10-04T16:39:06.3719173Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ZoomExtentsModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:40.9523374Z">ZoomExtentsModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2021-10-04T16:39:06.3719173Z">&lt;P&gt;SciChart.js provides the ability to Zoom Extents the entire chart (zoom to fit data) by double-clicking the chart area with&amp;nbsp;the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;allows animated zooming via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#isanimated"&gt;isAnimated&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#animationduration"&gt;animationDuration&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#easingfunction"&gt;easingFunction&lt;/A&gt; properties.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;ZoomExtentsModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html"&gt;ZoomExtentsModifier&lt;/A&gt;&amp;nbsp;can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable zoom to fit behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Add Zoom Extents behavior&lt;BR&gt;const zoomExtentsModifier = new ZoomExtentsModifier({&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isAnimated: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp; animationDuration: 400,&lt;BR&gt;&amp;nbsp;&amp;nbsp; easingFunction: easing.outExpo&lt;BR&gt;});&lt;BR&gt;sciChartSurface.chartModifiers.add(zoomExtentsModifier );&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior when double-clicking the chart:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_ZoomExtents_24Fps.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Zoom to a Preset Range&lt;/H2&gt;
&lt;P&gt;If you would like the double-click to zoom to some preset range, rather than the data range, you can set zoomExtentsRange on the axes.&amp;nbsp; In addition, if you are setting an initial visibleRange on an axis and would like zoomExtents to return to this range, you can just set&amp;nbsp;zoomExtentsToInitialRange true, which will set zoomExtentsRange to the visibleRange passed in.&lt;/P&gt;
&lt;P&gt;If you just want to have some space around your data, set growBy instead.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="4af28faf-3268-417a-8146-a3d25a8d9833" Status="New Topic" CreatedOn="2016-10-10T12:41:02.0257475Z" ModifiedOn="2020-10-13T10:58:04.7696766Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RubberBandXyZoomModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:27.5784463Z">RubberBandXyZoomModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2020-10-13T10:58:04.7696766Z">&lt;P&gt;SciChart.js provides the ability to Drag an area to zoom the&amp;nbsp;chart (known as Rubber-band zoom)&amp;nbsp;using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;&amp;nbsp;allows animated zooming via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#isanimated"&gt;isAnimated&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#animationduration"&gt;animationDuration&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/zoomextentsmodifier.html#easingfunction"&gt;easingFunction&lt;/A&gt; properties. The drag rectangle can be styled via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html#fill"&gt;fill&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html#stroke"&gt;stroke&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html#strokethickness"&gt;strokeThickness&lt;/A&gt; properties.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;RubberBandXyZoomModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rubberbandxyzoommodifier.html"&gt;RubberBandXyZoomModifier&lt;/A&gt;&amp;nbsp;can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable zoom to fit behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding RubberBand Zoom behavior to a chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Add Zoom Extents behavior&lt;BR&gt;const rubberBandXyZoomModifier = new RubberBandXyZoomModifier({&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;isAnimated: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp; animationDuration: 400,&lt;BR&gt;&amp;nbsp;&amp;nbsp; easingFunction: easing.outExpo,&lt;BR&gt;&amp;nbsp;&amp;nbsp; fill: "#FFFFFF33",&lt;BR&gt;&amp;nbsp;&amp;nbsp; stroke: "#FFFFFF77",&lt;BR&gt;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;});&lt;BR&gt;sciChartSurface.chartModifiers.add(rubberBandXyZoomModifier);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior when dragging the chart:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RubberBandZoom_24Fps.gif"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="8be89d95-1b3a-4ce3-8665-1f8f18d43b32" Status="New Topic" CreatedOn="2016-10-10T12:41:22.9621791Z" ModifiedOn="2020-10-13T10:58:50.5371024Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="YAxisDragModifier" BuildFlags="">
                    <Title m="2016-10-10T12:42:33.8262338Z">YAxisDragModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2020-10-13T10:58:50.5371024Z">&lt;P&gt;SciChart.js provides an zooming / panning&amp;nbsp;behavior when dragging the Axis via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/yaxisdragmodifier.html"&gt;YAxisDragModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/yaxisdragmodifier.html"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;allows you to choose&amp;nbsp;panning or scaling via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/yaxisdragmodifier.html#dragmode"&gt;dragMode property&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;YAxisDragModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/yaxisdragmodifier.html"&gt;YAxisDragModifier&lt;/A&gt;&amp;nbsp;can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable scaling or panning behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;&lt;BR&gt;// Add YAxis Drag behavior&lt;BR&gt;sciChartSurface.chartModifiers.add(new YAxisDragModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dragMode: EDragMode.Scaling,&lt;BR&gt;}));&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_YAxis_XAxisDragModifier.gif"&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="3522c82b-989f-4d1b-bc80-be617b68af2f" Status="New Topic" CreatedOn="2016-10-11T16:31:27.4427274Z" ModifiedOn="2020-10-13T10:59:18.1726317Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="XAxisDragModifier" BuildFlags="">
                    <Title m="2016-10-11T16:31:39.8581013Z">XAxisDragModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2020-10-13T10:59:11.7452336Z">&lt;P&gt;SciChart.js provides an zooming / panning&amp;nbsp;behavior when dragging the Axis via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xaxisdragmodifier.html"&gt;XAxisDragModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xaxisdragmodifier.html"&gt;XAxisDragModifier&lt;/A&gt; allows you to choose&amp;nbsp;panning or scaling via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/yaxisdragmodifier.html#dragmode"&gt;dragMode property&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;XAxisDragModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xaxisdragmodifier.html"&gt;XAxisDragModifier&lt;/A&gt; can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable scaling or panning behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;&lt;BR&gt;// Add XAxis Drag behavior&lt;BR&gt;sciChartSurface.chartModifiers.add(new XAxisDragModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dragMode: EDragMode.Scaling,&lt;BR&gt;}));&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_YAxis_XAxisDragModifier.gif"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="cb3356f9-21a0-4438-b083-3426a858781f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2add5cd7-0610-4269-9b97-d3e292f3cd8f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="30ee889c-86dd-41d2-bc3f-ec0415855433" Status="New Topic" CreatedOn="2020-10-13T10:40:07.9196578Z" ModifiedOn="2020-10-13T11:24:17.7411732Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MouseWheelZoomModifier" BuildFlags="">
                    <Title m="2020-10-13T10:44:50.9955225Z">MouseWheelZoomModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2020-10-13T11:24:17.7411732Z">&lt;P&gt;SciChart.js provides an zooming / panning&amp;nbsp;behavior when scrolling the mouse-wheel, or two-finger drag on touch devices via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier type&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier type&lt;/A&gt;&amp;nbsp;allows you to specify how fast the chart zooms in or out via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#growfactor"&gt;growFactor property&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;MouseWheelZoomModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier&lt;/A&gt;&amp;nbsp;can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable scaling or panning behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;&lt;BR&gt;// Add&amp;nbsp;MouseWheel Zoom&amp;nbsp;behavior&lt;BR&gt;sciChartSurface.chartModifiers.add(new MouseWheelZoomModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growFactor: 0.001; // each mousewheel click zooms 0.1%&lt;BR&gt;}));&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_MouseWheelZoomModifier.gif"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="14f8ca37-9a7f-49bd-b8bb-66b8b4e94bce" Status="New Topic" CreatedOn="2021-09-29T11:46:45.9622841Z" ModifiedOn="2021-10-07T16:43:49.4571139Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SciChartOverview" BuildFlags="">
                    <Title m="2021-10-07T16:43:18.6876957Z">Easy Overview charts with SciChartOverview</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2021-10-07T16:43:43.8222319Z">&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartoverview.html"&gt;SciChartOverview&lt;/A&gt; Control is a component which can be used for navigating&amp;nbsp;a 2D chart. It behaves like a minimap of the chart. The SciChartOverview is a separate chart which uses the original chart for configuration and displays the full range of it's data.&lt;/P&gt;
&lt;P&gt;Benefits of the SciChartOverview:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Displays an overview of the whole chart 
&lt;LI&gt;Allows you&amp;nbsp;to select the visible range that should be displayed by dragging &amp;amp; resizing an element on the overview control 
&lt;LI&gt;Allows instantly scrolling to a specified range by clicking on the overview 
&lt;LI&gt;Has an ability to transform renderable series copied from the original chart before displaying &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Using the SciChartOverview Control&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;SciChartOverview&lt;/STRONG&gt; uses a separate html element for displaying and behaves like a usual chart. So to create an instance of the &lt;STRONG&gt;SciChartOverview&lt;/STRONG&gt; we need to pass a reference to the main surface and an id of the container element to the &lt;STRONG&gt;SciChartOverview.create()&lt;/STRONG&gt; method:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create a SciChartOverview&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartOverview } from "scichart/Charting/Visuals/SciChartOverview";&lt;BR&gt;&lt;BR&gt;SciChartOverview.create(sciChartSurface, overviewDivElementId)&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the following sections we will show how to add a basic SciChartOverview control and how to customize it.&lt;/P&gt;
&lt;H2&gt;Basic Setup&lt;/H2&gt;
&lt;P&gt;Lets define 2 chart containers on the HTML page. Make sure to specify their ids.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HTML for the scichartoverview&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;lt;div id="scichart-div-1" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;!-- the Div where the SciChartOverview will reside --&amp;gt;&lt;BR&gt;&amp;lt;div id="scichart-div-2" style="width: 800px; height: 100px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, let's instantiate a basic chart and add some dataseries:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { SciChartOverview } from "scichart/Charting/Visuals/SciChartOverview";&lt;/P&gt;
&lt;P&gt;const divElementId1 = 'scichart-div-1';&lt;BR&gt;const divElementId2 = 'scichart-div-2';&lt;/P&gt;
&lt;P&gt;//...&lt;/P&gt;
&lt;P&gt;const generateDataSeries = (dataSeries) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp; const numberOfPoints = 10000;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; const xValues = new Array(numberOfPoints);&lt;BR&gt;&amp;nbsp;&amp;nbsp; const yValues = new Array(numberOfPoints);&lt;BR&gt;&amp;nbsp;&amp;nbsp; let prevYValue = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; numberOfPoints; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const curYValue = Math.random() * 10 - 5;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues[i] = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues[i] = prevYValue + curYValue;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; prevYValue += curYValue;&lt;BR&gt;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; dataSeries.appendRange(xValues, yValues);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// ...&lt;BR&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId);&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;generateDataSeries(dataSeries);&lt;BR&gt;const rendSeries = new FastLineRenderableSeries(wasmContext, { dataSeries });&lt;BR&gt;sciChartSurface.renderableSeries.add(rendSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { SciChartOverview } from "scichart/Charting/Visuals/SciChartOverview";&lt;/P&gt;
&lt;P&gt;const divElementId1 = 'scichart-div-1';&lt;BR&gt;const divElementId2 = 'scichart-div-2';&lt;/P&gt;
&lt;P&gt;//...&lt;/P&gt;
&lt;P&gt;const generateDataSeries = (dataSeries: XyDataSeries): void =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp; const numberOfPoints = 10000;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; const xValues = new Array(numberOfPoints);&lt;BR&gt;&amp;nbsp;&amp;nbsp; const yValues = new Array(numberOfPoints);&lt;BR&gt;&amp;nbsp;&amp;nbsp; let prevYValue = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; numberOfPoints; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const curYValue = Math.random() * 10 - 5;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues[i] = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues[i] = prevYValue + curYValue;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; prevYValue += curYValue;&lt;BR&gt;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; dataSeries.appendRange(xValues, yValues);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// ...&lt;BR&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId);&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;generateDataSeries(dataSeries);&lt;BR&gt;const rendSeries = new FastLineRenderableSeries(wasmContext, { dataSeries });&lt;BR&gt;sciChartSurface.renderableSeries.add(rendSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now that we have an empty chart with axis and data, let's bind a SciChartOverview to it:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding the&amp;nbsp;SciChartOverview&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartOverview } from "scichart/Charting/Visuals/SciChartOverview";&lt;BR&gt;&lt;BR&gt;SciChartOverview.create(sciChartSurface, overviewDivElementId)&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;At this point we should get a working example of the Overview control.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_Basic.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;By default the overview will&amp;nbsp;clone the original renderable series on the associated chart to the overview, but both series share the same dataSeries, so&amp;nbsp;data updates will apply to both charts. Check&amp;nbsp;&lt;A href="#OptionalParameters"&gt;Optional Parameters for creating SciChartOverview&lt;/A&gt; section for info on how to override this behavior.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding Zoom / Pan Modifiers to demonstrate the overview&lt;/H2&gt;
&lt;P&gt;Dragging or resizing the selection area on the overview will automatically update the visible range of the main chart, and zooming/panning the main chart will update the selection on the overview.&lt;/P&gt;
&lt;P&gt;To demonstrate this, let's add some zoom / pan modifiers to the chart.&amp;nbsp; Modify your code to add the following interactivity modifiers:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add modifiers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;BR&gt;import { MouseWheelZoomModifier } from 'scichart/Charting/ChartModifiers/MouseWheelZoomModifier';&lt;BR&gt;import { ZoomExtentsModifier } from 'scichart/Charting/ChartModifiers/ZoomExtentsModifier';&lt;/P&gt;
&lt;P&gt;//...&lt;/P&gt;
&lt;P&gt;sciChartSurface.chartModifiers.add(new ZoomPanModifier(), new ZoomExtentsModifier(), new MouseWheelZoomModifier());&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Notice how the selected area rectangle on the Overview Control updates when you zoom or scroll the main chart horizontally:&lt;/P&gt;
&lt;P style="COLOR: rgb(255,0,0)" align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_Interaction.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Customizing the Overview Control&lt;/H2&gt;
&lt;H3&gt;Positioning&lt;/H3&gt;
&lt;P&gt;Since the control is using a separate element for displaying, you can place and style this container element as you would normally do with HTML elements.&lt;/P&gt;
&lt;H3&gt;Modifying the Overview Chart&lt;/H3&gt;
&lt;P&gt;The &lt;STRONG&gt;SciChartOverview.create()&lt;/STRONG&gt; method returns an instance of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartoverview.html"&gt;SciChartOverview&lt;/A&gt;&lt;STRONG&gt;,&lt;/STRONG&gt; which exposes properties for accessing and customizing the underlying chart.&amp;nbsp; The most important is &lt;STRONG&gt;overviewSciChartSurface&lt;/STRONG&gt; which is the actual&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt; used by the overview.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;modified overview chart&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartJSLightTheme } from 'scichart/Charting/Themes/SciChartJSLightTheme';&lt;BR&gt;import { Thickness } from 'scichart/Core/Thickness';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;// add styling to the overview component&lt;BR&gt;overview.applyTheme(new SciChartJSLightTheme());&lt;BR&gt;// Default padding is 10&lt;BR&gt;overview.overviewSciChartSurface.padding = Thickness.fromNumber(0);&lt;BR&gt;// overviewXAxis provides a shortcut to overviewSciChartSurface.xAxes.get(0)&lt;BR&gt;overview.overviewXAxis.isVisible = true;&lt;BR&gt;overview.overviewXAxis.isInnerAxis = true;&lt;BR&gt;overview.overviewXAxis.drawMinorGridLines = false;&lt;BR&gt;overview.overviewXAxis.labelProvider.precision = 0;&lt;BR&gt;// Setting an id on the series makes it easier to get and customise it on the overview&lt;BR&gt;overview.overviewSciChartSurface.renderableSeries.getById("MainSeries").stroke = "#0a6fc2";&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Customizing the Selection and Range Annotations&lt;/H3&gt;
&lt;P&gt;SciChart Overview also allows to specify custom SVGs for the selection control using properties of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/overviewrangeselectionmodifier.html"&gt;OverviewRangeSelectionModifier&lt;/A&gt;, which can be accessed via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartoverview.html#rangeselectionmodifier"&gt;SciChartOverview.rangeSelectionModifier&lt;/A&gt; property:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Customized selection annotation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Customize the selected area&lt;BR&gt;overview.rangeSelectionModifier.rangeSelectionAnnotation.svgString =&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; `&amp;lt;svg width="50" height="50" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect width="100%" height="100%" style="fill: rgb(142, 238, 195)"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/rect&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;/P&gt;
&lt;P&gt;// Customize the unselected area&lt;BR&gt;overview.rangeSelectionModifier.unselectedsvgString =&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; `&amp;lt;svg width="50" height="50" preserveAspectRatio="none" xmlns="http://www.w3.org/2000/svg"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect width="100%" height="100%" style="fill:transparent"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/rect&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`&lt;/P&gt;
&lt;P&gt;// Custom SVG template function for grab handles of the selection control&lt;BR&gt;overview.rangeSelectionModifier.rangeSelectionAnnotation.adornerSvgStringTemplate =&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; (x1: number, y1: number, x2: number, y2: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const ADORNER_GRIP_RADIUS = 10;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return `&amp;lt;svg xmlns="http://www.w3.org/2000/svg"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;line x1="${x2}" y1="${y1 + delta}" x2="${x2}" y2="${y2 - delta}" stroke="rgb(85, 158, 218)" stroke-width="6" stroke-linecap="round" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;line x1="${x1}" y1="${y1 + delta}" x2="${x1}" y2="${y2 - delta}" stroke="rgb(85, 158, 218)" stroke-width="6" stroke-linecap="round" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;circle cx="${x1}" cy="${y1 / 2 + y2 / 2}" r="${ADORNER_GRIP_RADIUS}" fill="rgb(142, 238, 195)" stroke="rgb(85, 158, 218)"/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;circle cx="${x2}" cy="${y1 / 2 + y2 / 2}" r="${ADORNER_GRIP_RADIUS}" fill="rgb(142, 238, 195)" stroke="rgb(85, 158, 218)"/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_CustomizedVisual.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Optional Parameters for creating SciChartOverview&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A id=OptionalParameters name=OptionalParameters&gt;&lt;/A&gt;SciChartOverview.create()&lt;/STRONG&gt; accepts optional params object described in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ioverviewoptions.html"&gt;IOverviewOptions&lt;/A&gt;. These params allow to specify axis ids which should be used for binding &lt;STRONG&gt;AxisBase2D.visibleRange&lt;/STRONG&gt; updates to the overview control via &lt;STRONG&gt;IOverviewOptions.mainAxisId&lt;/STRONG&gt; and &lt;STRONG&gt;IOverviewOptions.secondaryAxisId&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note: specifying the &lt;STRONG&gt;IOverviewOptions.mainAxisId&lt;/STRONG&gt; and &lt;STRONG&gt;IOverviewOptions.secondaryAxisId&lt;/STRONG&gt; is required when you are using custom axis ids (as in case when you have multiple X or Y axes).&lt;/P&gt;
&lt;P&gt;You should only specify X axis as &lt;STRONG&gt;IOverviewOptions.mainAxisId&lt;/STRONG&gt; and Y axis as &lt;STRONG&gt;IOverviewOptions.secondaryAxisId&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Another important parameter is &lt;STRONG&gt;IOverviewOptions.transformRenderableSeries&lt;/STRONG&gt;, which is used to set a transform function for projecting the renderable series from the main chart to the overview control.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;If you want to use SciChartOverview for scrolling a vertical axis check out the &lt;STRONG&gt;Overview for Vertical Chart&lt;/STRONG&gt; section below.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Worked Example: Using Optional Parameters with the SciChartOverview&lt;/H3&gt;
&lt;P&gt;Here we will demonstrate an example of using optional params mentioned above.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;optional parameters&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TYPEscript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { XyScatterRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries';&lt;BR&gt;import { EllipsePointMarker } from 'scichart/Charting/Visuals/PointMarkers/EllipsePointMarker';&lt;BR&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;BR&gt;import { SciChartOverview } from "scichart/Charting/Visuals/SciChartOverview";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId);&lt;BR&gt;const xAxis = new NumericAxis(wasmContext, { id: "xAxis" });&lt;BR&gt;const yAxis = new NumericAxis(wasmContext, { id: "yAxis", axisAlignment: EAxisAlignment.Left });&lt;BR&gt;const yAxis2 = new NumericAxis(wasmContext, { id: "yAxis2", axisAlignment: EAxisAlignment.Right });&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis, yAxis2);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;generateDataSeries(dataSeries);&lt;BR&gt;const rendSeries = new FastLineRenderableSeries(wasmContext, { dataSeries });&lt;/P&gt;
&lt;P&gt;const dataSeries2 = new XyDataSeries(wasmContext);&lt;BR&gt;generateDataSeries(dataSeries2);&lt;BR&gt;const rendSeries2 = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataSeries2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext)&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// Set the axis ids for the series&lt;BR&gt;rendSeries.xAxisId = xAxis.id;&lt;BR&gt;rendSeries.yAxisId = yAxis.id;&lt;BR&gt;rendSeries2.xAxisId = xAxis.id;&lt;BR&gt;rendSeries2.yAxisId = yAxis2.id;&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(rendSeries, rendSeries2);&lt;/P&gt;
&lt;P&gt;// A function to filter and convert renderable series for the overview&lt;BR&gt;const customTransformFunction = (renderableSeries: IRenderableSeries) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // return undefined to skip series not on the main axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (renderableSeries.xAxisId !== xAxis.id || renderableSeries.yAxisId !== yAxis.id) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Convert to a different Renderable Series type&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new FastMountainRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: renderableSeries.dataSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Create a SciChartOverview with&amp;nbsp;custom axis Ids and transform&lt;BR&gt;const overview = await SciChartOverview.create(sciChartSurface, overviewDivElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; mainAxisId: xAxis.id,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; secondaryAxisId: yAxis.id,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; transformRenderableSeries: customTransformFunction,&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This produces the following:&lt;/P&gt;
&lt;P style="COLOR: rgb(255,0,0)" align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_Transformed.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Using the SciChartOverview in a Vertical Chart&lt;/H2&gt;
&lt;P&gt;The SciChartOverview supports Vertical Chart automatically. So to get a working example of the overview for Vertical Chart we can simply update the code from the Basic Setup section above by changing the axes definitions as following:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;vertical chart overview&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const xAxis = new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Left });&lt;BR&gt;const yAxis = new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Bottom });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will make the chart vertical and as a result the overview will now be resizable and movable in vertical direction. Also you may have to position the container HTML element according to your needs.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Overview_Vertical.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="e4070924-5099-4e15-8a7b-81dcc7056865" Status="New Topic" CreatedOn="2023-07-19T09:50:20.4709099Z" ModifiedOn="2023-07-19T11:22:47.5407216Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PinchZoomModifier" BuildFlags="">
                    <Title m="2023-07-19T09:50:43.6409936Z">PinchZoomModifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-19T11:22:47.5407216Z">&lt;P&gt;SciChart.js provides Pinch zooming on touch devices via the &lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;As of SciChart.js v3.2, &lt;STRONG&gt;ZoomPanModifier&lt;/STRONG&gt; now inherits &lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt;, allowing you to configure zooming, panning and touch-to-zoom interaction via a single modifier.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Adding a PinchZoomModifier to a Chart&lt;/H2&gt;
&lt;P&gt;A &lt;STRONG&gt;PinchZoomModifier&lt;/STRONG&gt; may be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; colletion to enable pinch to zoom behaviour. For example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\PinchZoom\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\PinchZoom\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/PinchZoom/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Additional Properties&lt;/H2&gt;
&lt;H3&gt;Adjust Zooming&amp;nbsp;/ Scale Factor&lt;/H3&gt;
&lt;P&gt;Horizontal and vertical zoom scale factor can be adjusted via the following properties. The default value is set to 0.005.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;PinchZoomModifier.horizontalGrowFactor&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;PinchZoomModifier.verticalGrowFactor&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Include/Exclude Certain Axis from Pinch Zoom &lt;/H3&gt;
&lt;P&gt;The PinchZoomModifier allows you to include or exclude certain axis by axis.id from the zoom operation. &lt;/P&gt;
&lt;P&gt;By default all axis are included, to exclude one or more X or Y axis, set the following property:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Exclude Axis&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Exclude a specific axis from the pinch zoom operation&lt;BR&gt;pinchZoomModifier.includeXAxis(axisXInstance, false);&lt;BR&gt;pinchZoomModifier.includeYAxis(axisYInstance, false);&lt;BR&gt;&lt;BR&gt;// Include specific axis from the pinch zoom operation&lt;BR&gt;pinchZoomModifier.includeXAxis(axisXInstance, true);&lt;BR&gt;pinchZoomModifier.includeYAxis(axisYInstance, true);&lt;BR&gt;&lt;BR&gt;// Reset flags&lt;BR&gt;pinchZoomModifier.includeAllAxes();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Allow Pinch Zoom in only one direction&lt;/H3&gt;
&lt;P&gt;If you want to enable pinch zooming in only one direction,&amp;nbsp; e.g. horizontal only, modify the &lt;STRONG&gt;PinchZoomModifier.verticalGrowFactor&lt;/STRONG&gt; to equal 0.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="5d3d5308-b11a-4f4f-9264-2de81d8d0971" AutoIndex="false">
                <Caption m="2016-10-17T15:24:55.8524474Z">Cursors and Tooltips</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" Status="New Topic" CreatedOn="2016-10-07T16:13:08.8825627Z" ModifiedOn="2023-10-30T15:08:54.4821607Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CursorModifier" BuildFlags="">
                    <Title m="2023-09-13T15:20:42.6901303Z">The CursorModifier Type</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-10-30T15:08:54.4821607Z">&lt;P&gt;SciChart.js provides a cursors / crosshairs&amp;nbsp;behavior via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html"&gt;CursorModifier&lt;/A&gt;, available out of the box. Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html"&gt;CursorModifier&lt;/A&gt; allows to&amp;nbsp;you to:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Place a crosshair (cursor) on the&amp;nbsp;chart which tracks the&amp;nbsp;mouse&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;Place a single aggregated tooltip for all series at the crosshair site&lt;/STRONG&gt; 
&lt;LI&gt;Optionally show/hide and style vertical/horizontal line in the crosshair 
&lt;LI&gt;Optionally show/hide axis labels on the X,Y axis 
&lt;LI&gt;Format the axis labels 
&lt;LI&gt;Allow customisation of the tooltip style and contents 
&lt;LI&gt;Place a legend at an external &amp;lt;div&amp;gt; with tooltip info 
&lt;LI&gt;Configure when the tooltip is shown (always, only on hover of a point) 
&lt;LI&gt;Configure which series react to the Tooltip (all, some, or specific series) &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The &lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-chart-cursormodifier-crosshairs" target=_blank&gt;Using CursorModifier Example&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="iFrame"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-cursormodifier-crosshairs&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-chart-cursormodifier-crosshairs" target=_blank&gt;Using CursorModifier Example&lt;/A&gt;&lt;/EM&gt; &lt;EM&gt;from the SciChart.js Demo, showing various options of the CursorModifier in SciChart.js.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;CursorModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A CursorModifier can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable crosshair/cursor behavior. For example, this code adds a crosshair, enables default&amp;nbsp;tooltips and axis labels.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\Basic\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/Basic/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Many of the properties here are optional - they have been included to show the configuration possibilities for the cursor. See&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/icursormodifieroptions.html"&gt;ICursorModifierOptions&lt;/A&gt; for more.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="44858cc9-7856-4d2f-8bd4-bfe3b89b1c9b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f5e77a55-f317-420d-9781-f8de2522f889" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="c6e31d3b-d2b9-4681-bac7-ff79c88e8ef4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bc9cfc5a-28fb-4fd8-9649-59e5c8357e7f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="f5e77a55-f317-420d-9781-f8de2522f889" Status="New Topic" CreatedOn="2023-09-13T15:35:07.8301221Z" ModifiedOn="2023-09-13T15:50:57.7141689Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CursorModifier_Formatting" BuildFlags="">
                    <Title m="2023-09-13T15:38:43.9743309Z">Formatting CursorModifier Tooltip Items</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-09-13T15:49:49.3527462Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&lt;/P&gt;
&lt;P&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;The CursorModifier Type&lt;/A&gt;&amp;nbsp;which will show you how to setup a CursorModifier with default options for tooltips. This article goes into further detail on customising the tooltip items (formatting, text content)&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Basic CursorModifier Tooltip Formatting Options&lt;/H2&gt;
&lt;P&gt;Tooltip and Axis Label formatting comes from the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html#formatcursorlabel"&gt;axis.labelprovider.formatCursorLabel()&lt;/A&gt; function&amp;nbsp;and is axis-specific. You can read more about the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis.LabelProvider API here&lt;/A&gt;, including how to specify formats from Enums and override formatting programmatically.&lt;/P&gt;
&lt;P&gt;Below we're going to show you how to apply cursor formatting to enable four-decimal places on tooltips.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\Formatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\Formatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's a &lt;STRONG&gt;Codepen&lt;/STRONG&gt; which shows the effect of these properties on the axis on cursor tooltips.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/Formatting/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For further customisation on a per-axis basis, consider using the&amp;nbsp;&lt;A href="e9747ecc-a3cd-456b-9180-c47daead66ef"&gt;LabelProvider feature&lt;/A&gt; to create a custom labelprovider, and override formatCursorLabel.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Tooltip DataTemplates&lt;/H2&gt;
&lt;P&gt;Further customisation of tooltip content can be achieved with the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#tooltipdatatemplate"&gt;CursorModifier.tooltipDataTemplate&lt;/A&gt; property. This defines the content inside the tooltip e.g. what values are shown (x, y, values from metadata), if the series name is shown and so on.&lt;/P&gt;
&lt;P&gt;This property expects a function in the following format (see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tcursortooltipdatatemplate"&gt;TCursorTooltipDataTemplate&lt;/A&gt;):&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;tooltipDataTemplateFunction&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;export type TCursorTooltipDataTemplate = (seriesInfos: SeriesInfo[], tooltipTitle: string) =&amp;gt; string[];&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The&amp;nbsp;input/output parameters are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Input&lt;/STRONG&gt;: an array of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/seriesinfo.html"&gt;SeriesInfo&lt;/A&gt;: a data object which stores info about the series under the mouse. 
&lt;LI&gt;&lt;STRONG&gt;Input&lt;/STRONG&gt;: a tooltipTitle (string) which comes from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifierrenderableseriesprops.html#tooltiptitle"&gt;renderableSeries.rolloverModifierProps.tooltipTitle&lt;/A&gt;. 
&lt;LI&gt;&lt;STRONG&gt;Output&lt;/STRONG&gt;:&amp;nbsp;an array of strings, each one corresponding to a line in the tooltip. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Let's create a simple example which shows you how to access properties on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyseriesinfo.html"&gt;XySeriesInfo&lt;/A&gt; and output to tooltips.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\DataTemplate\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\DataTemplate\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/DataTemplate/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Accessing Metadata in Tooltip DataTemplates&lt;/H2&gt;
&lt;P&gt;In the above example we access properties of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyseriesinfo.html"&gt;XySeriesInfo&lt;/A&gt; to format lines in the CursorModifier tooltip.&lt;/P&gt;
&lt;P&gt;You can also access metadata to store any custom object in your X,Y data, then read that data out in tooltips.&lt;/P&gt;
&lt;P&gt;For a worked example see&amp;nbsp;&lt;A href="f6efccfe-43eb-4f99-abfe-11299fdecbcc"&gt;PointMetadata API - Metadata and Tooltips&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="b8d52726-51a8-421a-83d1-c14599a5e9b5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bc9cfc5a-28fb-4fd8-9649-59e5c8357e7f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="8e4bc2a1-cc51-403b-a0e7-d0792ec7d7fc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b8fb3f0a-a8f1-4c2c-821c-230efc18e5b8" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="fac601dc-5435-4c51-abec-1c267f55f193" Status="New Topic" CreatedOn="2016-10-07T16:13:17.6740431Z" ModifiedOn="2023-01-24T14:32:50.2084143Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RolloverModifier" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-01-23T17:05:38.8037061Z">&lt;P&gt;SciChart.js provides a&amp;nbsp;mouse-over tooltips&amp;nbsp;behavior via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html"&gt;RolloverModifier&lt;/A&gt;, available out of the box.&lt;/P&gt;
&lt;P&gt;Besides common features which are inherited from the&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;ChartModifierBase&lt;/A&gt; class, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html"&gt;RolloverModifier&lt;/A&gt; allows adding custom or standard tooltips to a chart (per series), and consuming the tooltip data in another area of your UI (custom legends).&lt;/P&gt;
&lt;H2&gt;Adding a&amp;nbsp;RolloverModifier&amp;nbsp;to a Chart&lt;/H2&gt;
&lt;P&gt;A RolloverModifier can be added to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#chartmodifiers"&gt;sciChartSurface.chartModifiers&lt;/A&gt; collection to enable tooltip behavior. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;&lt;BR&gt;// Add RolloverModifier behavior&lt;BR&gt;sciChartSurface.chartModifiers.add(new RolloverModifier());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behavior:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier.gif"&gt;&lt;/P&gt;
&lt;P align=left&gt;This is a basic implementation of the tooltip. You will notice that the text color on the White series is not visible. We will describe how to customise the tooltip including style and appearance below.&lt;/P&gt;
&lt;H2&gt;Customizing the Rollover Appearance&lt;/H2&gt;
&lt;H3&gt;Styling the Vertical Line&lt;/H3&gt;
&lt;P&gt;The Rollover Line itself can be styled by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#rolloverlinestrokethickness"&gt;rolloverLineStrokeThickness&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#rolloverlinestroke"&gt;rolloverLineStroke&lt;/A&gt; properties as follows. It can also be hidden with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#showrolloverline"&gt;showRolloverLine property&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the RolloverLine&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const rolloverModifier = new RolloverModifier();&lt;BR&gt;rolloverModifier.rolloverLineStroke = "SteelBlue";&lt;BR&gt;rolloverModifier.rolloverLineStrokeThickness = 5;&lt;BR&gt;rolloverModifier.showRolloverLine = true;&lt;BR&gt;sciChartSurface.chartModifiers.add(rolloverModifier);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Which results in the following.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier_VerticalLine.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H3&gt;Styling the Tooltip&lt;/H3&gt;
&lt;P&gt;The Tooltip itself can be styled by setting the properties as follows.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the Tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, { dataSeries, strokeThickness: 2 });&lt;BR&gt;rendSeries.rolloverModifierProps.tooltipTextColor = "SteelBlue";&lt;BR&gt;rendSeries.rolloverModifierProps.tooltipColor = "Pink";&lt;BR&gt;rendSeries.rolloverModifierProps.tooltipLabelX = "X"; // X value will be hidden if X label is not set&lt;BR&gt;rendSeries.rolloverModifierProps.tooltipLabelY = "Label Y";&lt;/P&gt;
&lt;P&gt;// For Band series in order to set Y1 Tooltip use&amp;nbsp; rolloverModifierProps1 like&lt;BR&gt;rendSeries.rolloverModifierProps1.width = 70; // here you can set the width manually&lt;BR&gt;rendSeries.rolloverModifierProps1.tooltipLabelY = "Y1";&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier_CustomTooltipStyle.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H3&gt;Placing the tooltip outside the chart&lt;/H3&gt;
&lt;P&gt;The tooltip can be placed anywhere on the chart by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#placementdivid"&gt;RolloverModifier.placementDivId&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;Simply add this code when declaring the rollover:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the Tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;new RolloverModifier({ placementDivId: "tooltip-div-id" });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Styling the Series RolloverMarker&lt;/H3&gt;
&lt;P&gt;The RolloverMarker is the small dot which intersects the rollover line and the series itself. By default this is set to the series stroke color.&lt;/P&gt;
&lt;P&gt;You can change the market color by setting the property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifierrenderableseriesprops.html#markercolor"&gt;renderableSeries.rolloverModifierProps.markerColor&lt;/A&gt; to an HTML color code. e.g.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the Tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, { dataSeries, strokeThickness: 2 });&lt;BR&gt;rendSeries.rolloverModifierProps.markerColor = "Orange";&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier_CustomMarkerStyle.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;H3&gt;Customizing the Tooltip Content&lt;/H3&gt;
&lt;P&gt;The Tooltip Content can be customised in the RolloverModifier. There are two levels of this.&amp;nbsp; You can customise just the content for the tooltip, or you can supply your own svg to customise the appearance as well.&lt;/P&gt;
&lt;P&gt;To customise the content, create a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#tooltipdatatemplate"&gt;tooltipDataTemplate&lt;/A&gt;.&amp;nbsp; This is a function which takes a seriesInfo (which is the results of the hit-test) and returns an array of strings which are the lines that will appear in the tooltip.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Tooltip Content&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypescriptScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tooltipDataTemplate: TRolloverTooltipDataTemplate = (seriesInfo: XySeriesInfo): string[] =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const valuesWithLabels: string[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Line Series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xySeriesInfo = seriesInfo as XySeriesInfo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push(`X: ${xySeriesInfo.formattedXValue} Y: ${xySeriesInfo.formattedYValue}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return valuesWithLabels;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You can apply this template function to the rolloverModifier itself, in which case it will apply to all series, or you can set it per-series using renderableSeries.rolloverModifierProps.tooltipDataTemplate = tooltipDataTemplate;&lt;/P&gt;
&lt;P&gt;To&amp;nbsp;change the shape and layout of the tooltip, you can create an SVG element to be hosted inside the tooltip:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the Tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { stroke: EColor.Orange });&lt;/P&gt;
&lt;P&gt;lineSeries.rolloverModifierProps.tooltipTemplate = (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: string,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipProps: RolloverModifierRenderableSeriesProps,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfo: SeriesInfo,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSize: (width: number, height: number) =&amp;gt; void&lt;BR&gt;) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { tooltipTitle, tooltipColor, tooltipTextColor } = tooltipProps;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = 120;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSize(width, height);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return `&amp;lt;svg width="${width}" height="${height}"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;circle cx="50%" cy="50%" r="50%" fill="${tooltipColor}"/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;svg width="100%"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text y="40" font-size="13" font-family="Verdana" dy="0" fill="${tooltipTextColor}"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;tspan x="15" dy="1.2em"&amp;gt;${tooltipTitle}&amp;lt;/tspan&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;tspan x="15" dy="1.2em"&amp;gt;x: ${seriesInfo.formattedXValue} y: ${seriesInfo.formattedYValue}&amp;lt;/tspan&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/text&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;&lt;BR&gt;&amp;lt;/svg&amp;gt;`;&lt;BR&gt;};&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier_CustomTooltipSvg.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Consuming Tooltip Data in a Legend&lt;/H3&gt;
&lt;P&gt;Rollover data can also be consumed in a custom legend in the top-left of the chart. Try some code like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Styling the Tooltip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { stroke: EColor.Orange });&lt;/P&gt;
&lt;P&gt;lineSeries.rolloverModifierProps.tooltipLegendTemplate = (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipProps: RolloverModifierRenderableSeriesProps,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfo: SeriesInfo&lt;BR&gt;) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return `&amp;lt;svg width="340" height="25"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect width="100%" height="100%" fill="#000000DD" stroke="grey" stroke-width="2" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;svg width="100%"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text x="8" y="16" font-size="13" font-family="Verdana" fill="red"&amp;gt;Custom Legend Tooltip&amp;lt;/text&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text x="180" y="16" font-size="13" font-family="Verdana" fill="lightblue"&amp;gt;X: ${seriesInfo.formattedXValue}&amp;lt;/text&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text x="260" y="16" font-size="13" font-family="Verdana" fill="green"&amp;gt;Y: ${seriesInfo.formattedYValue}&amp;lt;/text&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;};&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following active-legend which updates as you move the mouse over the chart.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifiers_RolloverModifier_CustomLegend.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Getting tooltips for the nearest point only&lt;/H2&gt;
&lt;P&gt;By default, RolloverModifier returns data for all series at the x-value the mouse is over, regardless of y-value.&amp;nbsp; If you want to only see information for the points that are near the cursor in both x and y, then set the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/rollovermodifier.html#hittestradius"&gt;hitTestRadius&lt;/A&gt; property to a non-zero value, either on the modifier instance, or in the constructor options.&amp;nbsp; This will cause it to report only on points that number of pixels away from the cursor.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="808790b3-82df-456a-a82c-5e07cd43df9b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="80babbd5-095c-421e-a2dc-e219b7773622" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="ac019305-5cd5-478b-ba00-111a24c6619a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="994b40e2-b798-4517-82fa-09b2c79a3617" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="994b40e2-b798-4517-82fa-09b2c79a3617" Status="New Topic" CreatedOn="2023-01-23T17:20:18.0560453Z" ModifiedOn="2023-09-13T15:10:31.5997903Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="InterpolatedTooltipValues" BuildFlags="">
                    <Title />
                    <ContentsTitle m="2023-09-13T15:10:31.5997903Z">Interpolated Tooltip Values</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-01-24T14:30:58.6535741Z">&lt;P&gt;In SciChart.JS v3 we added some additional properties to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/hittestinfo.html"&gt;hitTestInfo&lt;/A&gt; object so you can now get full information about the points either side of the hit-test location.&amp;nbsp; This allows you to do interpolation for your tooltip values rather than just showing values at the actual data points.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;xValue and yValue are always the values nearest the cursor.&amp;nbsp; point2xValue and point2vValue are the points on the other side of the cursor.&amp;nbsp; The interpolate function does linear interpoltion to find the y value for the x coordinate of the line between those points.&lt;/P&gt;
&lt;P&gt;This example uses a CursorModifier, but the same principle would apply to RolloverModifier.&amp;nbsp; The difference is that the CursorModifier tooltipDataTemplate takes an array of seriesInfo because it is one tooltip for all series, whereas RolloverModifier does one tooltip per series.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Interpolated ToolTip&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const interpolate = (x1: number, x2: number, y1: number, y2: number, x: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return y1 + ((y2 - y1) * (x - x1)) / (x2 - x1);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const interpolatedTooltipDataTemplate: TCursorTooltipDataTemplate = (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfos: SeriesInfo[],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipTitle: string&lt;BR&gt;) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const valuesWithLabels: string[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesInfos.forEach((si, index) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (si.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (index === 0) valuesWithLabels.push("X: " + si.getXCursorFormattedValue(si.hitTestPointValues.x));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xySeriesInfo = si as XySeriesInfo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValue = interpolate (&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xySeriesInfo.xValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xySeriesInfo.point2xValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xySeriesInfo.yValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xySeriesInfo.point2yValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xySeriesInfo.hitTestPointValues.x&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const seriesTitle = si.seriesName ? si.seriesName : `Series #${index + 1}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push(seriesTitle);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push(`&amp;nbsp; Nearest: ${xySeriesInfo.formattedYValue}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; valuesWithLabels.push(`&amp;nbsp; Interpolated: ${xySeriesInfo.getYCursorFormattedValue(yValue)}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return valuesWithLabels;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Apply this to a cursorModifier&lt;BR&gt;const cursorModifier = new CursorModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; crosshairStroke: "#ff6600",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; crosshairStrokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipContainerBackground: "#F48420",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showTooltip: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "#F48420",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelStroke: "#fff",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipDataTemplate: interpolatedTooltipDataTemplate&amp;nbsp;&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/interpolatedTooltip.gif"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="b612dea4-7ada-4f99-849a-0d460065621a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2102c976-1fd3-4004-84cd-b95e376567a8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fac601dc-5435-4c51-abec-1c267f55f193" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="bc9cfc5a-28fb-4fd8-9649-59e5c8357e7f" Status="New Topic" CreatedOn="2023-09-13T15:37:07.961403Z" ModifiedOn="2023-10-30T15:01:15.6821535Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CursorModifier_CustomisingContainer" BuildFlags="">
                    <Title m="2023-09-13T15:37:43.2538476Z">Customizing the Tooltip Container Appearance</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-10-30T15:01:15.6821535Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&lt;/P&gt;
&lt;P&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;The CursorModifier Type&lt;/A&gt;&amp;nbsp;which will show you how to setup a CursorModifier with default options for tooltips. This article goes into further detail on customising the tooltip items (formatting, text content)&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Basic customisation of the cursor and tooltip appearance can be made through the following properties.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The crosshair line thickness and stroke color can be changed with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#crosshairstrokethickness"&gt;crosshairStrokeThickness&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#crosshairstroke"&gt;crosshairStroke&lt;/A&gt; properties. 
&lt;LI&gt;Axis labels can be turned on/off via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#showaxislabels"&gt;showAxisLabels&lt;/A&gt; property. 
&lt;LI&gt;The tooltip can be turned on/off (to have a simple cursor) with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#showtooltip"&gt;showTooltip&lt;/A&gt; property. 
&lt;LI&gt;Axis Label backgrounds and text color can be changed with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#axislabelstroke"&gt;axisLabelStroke&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#axislabelfill"&gt;axisLabelFill&lt;/A&gt; properties. 
&lt;LI&gt;The tooltip background and text color can be changed with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#tooltipcontainerbackground"&gt;tooltipContainerBackground&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#tooltiptextstroke"&gt;tooltipTextStroke&lt;/A&gt; properties. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Deeper customisation of the tooltip appearance can be achieved via the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#tooltipsvgtemplate"&gt;tooltipSvgTemplate&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;This defines the actual SVG used to host the tooltip container. This property expects a function in the following format (see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tcursortooltipsvgtemplate"&gt;TCursorTooltipSvgTemplate&lt;/A&gt;):&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;cursotTooltipSvgTemplate function&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;(seriesInfos: SeriesInfo[], svgAnnotation: CursorTooltipSvgAnnotation) =&amp;gt; string&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The&amp;nbsp;input/output parameters are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Input&lt;/STRONG&gt;: an array of&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/seriesinfo.html"&gt;SeriesInfo&lt;/A&gt;: a data object which stores info about the series under the mouse. 
&lt;LI&gt;&lt;STRONG&gt;Input&lt;/STRONG&gt;: svgAnnotation (&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tcursortooltipsvgtemplate"&gt;CursorTooltipSvgAnnotation&lt;/A&gt;) which is the current tooltip SVG annotation 
&lt;LI&gt;&lt;STRONG&gt;Output&lt;/STRONG&gt;:&amp;nbsp;string, containing the new SVG to define the tooltip container. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Let's create a simple example which shows you how to customize the tooltip container.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\Svgtemplate\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/SvgTemplate/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="b8fb3f0a-a8f1-4c2c-821c-230efc18e5b8" Status="New Topic" CreatedOn="2023-09-13T15:38:00.9396188Z" ModifiedOn="2023-10-30T15:03:19.6377728Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CursorModifier_PlaceTooltipLegendExternally" BuildFlags="">
                    <Title m="2023-09-15T12:37:57.8610822Z">Active Legends - CursorModifier output into a legend</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-10-30T15:03:19.6377728Z">&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&lt;/P&gt;
&lt;P&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;The CursorModifier Type&lt;/A&gt;&amp;nbsp;which will show you how to setup a CursorModifier with default options for tooltips. This article goes into further detail on customising the tooltip items (formatting, text content)&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;CursorModifier tooltipLegendTemplates&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;supports a tooltipLegendTemplate property which allows you to specify a function to transform CursorModifier content into a legend which can be placed in the top left of the chart. This active legend updates with series values as you move the mouse.&lt;/P&gt;
&lt;P&gt;Perhaps the best example of this is in financial charts, which require placing a legend in the top left of the chart to show the current hovered candle or series.&lt;/P&gt;
&lt;P&gt;Here's a worked example below, which extends our&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;Candlestick Chart - Volume Bars&lt;/A&gt; example with an active legend provided by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html"&gt;CursorModifier&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\ActiveLegend\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/ActiveLegend/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using External placementDivId with the CursorModifier&lt;/H2&gt;
&lt;P&gt;Another way you can control the placement of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;tooltip is using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#placementdivid"&gt;placementDivId&lt;/A&gt; property. This places the standard CursorModifier tooltip into a div of your choice (which can be anywhere on the app).&lt;/P&gt;&lt;innovasys:widget layout="block" type="Tip Box"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note, it does not currently work with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cursormodifier.html#tooltiplegendtemplate"&gt;tooltipLegendTemplate&lt;/A&gt;, however we are working on more options for styling, placement and configuration of tooltips soon.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Try the following code in your application:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code From File (Tab Style)"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\ChartModifiers\CursorModifier\PlacementDiv\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Content from Web Page"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/ChartModifiers/CursorModifier/PlacementDiv/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="c8d367f0-c314-4669-9f43-b1d5a74f209a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f5e77a55-f317-420d-9781-f8de2522f889" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="afaaeefa-b871-4a67-8f24-0ce417feb778" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bc9cfc5a-28fb-4fd8-9649-59e5c8357e7f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="3342b94a-ce83-459e-aeda-788b30ccddfe" AutoIndex="false">
                <Caption m="2020-10-05T15:36:58.7498357Z">Legends</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="84ac3103-a531-43bc-8546-f275d91be35b" Status="New Topic" CreatedOn="2020-10-05T15:37:01.7478734Z" ModifiedOn="2022-05-19T12:26:57.4364842Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LegendModifier" BuildFlags="">
                    <Title m="2021-10-11T15:40:35.6690156Z">Legend Modifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2022-05-19T12:26:57.4364842Z">&lt;P&gt;&lt;STRONG&gt;SciChart.js&lt;/STRONG&gt; features a rich, customisable legend API which is based on our powerful&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;ChartModifier API&lt;/A&gt;. To add a Legend to a chart use &lt;STRONG&gt;LegendModifier&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;SciChart legends support the following:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Placement of the&amp;nbsp;Legend inside the chart&amp;nbsp;top-left, top-right, bottom-left or&amp;nbsp;bottom-right aligned 
&lt;LI&gt;Horizontal or Vertical orientation of the&amp;nbsp;Legend 
&lt;LI&gt;Showing data series name, line color/marker, visibility checkboxes 
&lt;LI&gt;Allowing full customization of the Legend using auto-generated classes&amp;nbsp;&lt;STRONG&gt;scichart__legend&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;scichart__legend-item&lt;/STRONG&gt; 
&lt;LI&gt;Placing the Legend anywhere&amp;nbsp;outside the chart &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Showing a Legend&lt;/H2&gt;
&lt;P&gt;In order to show a legend add the &lt;STRONG&gt;LegendModifier&lt;/STRONG&gt; to the chart.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.chartModifiers.add(new LegendModifier());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The full example code you will find below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { LegendModifier } from 'scichart/Charting/ChartModifiers/LegendModifier';&lt;/P&gt;
&lt;P&gt;export async function legendModifierJs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine1Values = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine2Values = [1, 1.1, 1.4, 1.3, 1.05, 0.8, 0.6, 0.5, 0.4];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'red',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Red Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine1Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Green Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine2Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Show the legend by adding a LegendModifier to the SciChartSurface.chartModifiers collection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new LegendModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showCheckboxes: false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showSeriesMarkers: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegend: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { LegendModifier } from 'scichart/Charting/ChartModifiers/LegendModifier';&lt;/P&gt;
&lt;P&gt;export async function legendModifierTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine1Values = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine2Values = [1, 1.1, 1.4, 1.3, 1.05, 0.8, 0.6, 0.5, 0.4];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'red',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Red Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine1Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Green Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine2Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Show the legend by adding a LegendModifier to the SciChartSurface.chartModifiers collection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new LegendModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showCheckboxes: false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showSeriesMarkers: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegend: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the line chart with the legend placed in the left top corner.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LegendModifier_1.png"&gt;&lt;/P&gt;
&lt;H2&gt;Showing visibility checkboxes&lt;/H2&gt;
&lt;P&gt;In order to show&amp;nbsp;visibility checkboxes pass&amp;nbsp;&lt;STRONG&gt;showCheckboxes&lt;/STRONG&gt; option into the&amp;nbsp;&lt;STRONG&gt;LegendModifier&lt;/STRONG&gt; constructor.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.chartModifiers.add(new LegendModifier({ showCheckboxes: true }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will draw the legend with checkboxes.&lt;/P&gt;
&lt;P&gt;Now check/uncheck the checkboxes to show/hide renderable series.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LegendModifier_3.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: the Checkbox is bound to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisible"&gt;BaseRenderableSeries.isVisible&lt;/A&gt;. You can subscribe to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;BaseRenderableSeries.isVisibleChanged&lt;/A&gt; by following steps in this&amp;nbsp;&lt;A href="1050b696-5965-441b-a60b-7743440dd66b"&gt;documentation page&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Subscribing to Checkbox Checked Changed&lt;/H2&gt;
&lt;P&gt;As well as subscribing to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#isvisiblechanged"&gt;BaseRenderableSeries.isVisibleChanged&lt;/A&gt;, you can now subscribe to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/legendmodifier.html#ischeckedchanged"&gt;LegendModifier.isCheckedChanged&lt;/A&gt; event. This can be done either in the constructor options to LegendModifier or after creation.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const legend = new LegendModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showCheckboxes: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showSeriesMarkers: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegend: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Subscribe to checked changed here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isCheckedChangedCallback: (series, isChecked) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Option 1: Legend item ${series.type} isChecked=${isChecked}`);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;BR&gt;// Or here after instantiation&lt;BR&gt;legend.isCheckedChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Option 2: Legend item ${args.series.type} isChecked=${args.isChecked}`);&lt;BR&gt;});&lt;BR&gt;// Add the legend to the chart&lt;BR&gt;sciChartSurface.chartModifiers.add(legend);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const legend = new LegendModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showCheckboxes: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showSeriesMarkers: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLegend: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Subscribe to checked changed here&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isCheckedChangedCallback: (series: IRenderableSeries, isChecked: boolean) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Option 1: Legend item ${series.type} isChecked=${isChecked}`);&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;BR&gt;// Or here after instantiation&lt;BR&gt;legend.isCheckedChanged.subscribe((args: TCheckedChangedArgs) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`Option 2: Legend item ${args.series.type} isChecked=${args.isChecked}`);&lt;BR&gt;});&lt;BR&gt;// Add the legend to the chart&lt;BR&gt;sciChartSurface.chartModifiers.add(legend);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Placing the Legend outside the chart&lt;/H2&gt;
&lt;P&gt;It is possible to place the &lt;STRONG&gt;Legend&lt;/STRONG&gt; anywhere on the HTML page. In order to do that create a div element with some &lt;STRONG&gt;Id&lt;/STRONG&gt;,&amp;nbsp;the &lt;STRONG&gt;Id&lt;/STRONG&gt; will be used to find this div element and to append the Legend. When creating the Legend pass&amp;nbsp;&lt;STRONG&gt;placementDivId&lt;/STRONG&gt; property into the constructor.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.chartModifiers.add(new LegendModifier({ placementDivId: "legend-div-id" }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The full example code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;div style="padding: 20px;"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;Legend Modifier Example&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-div-id"&amp;nbsp; style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;lt;div id="legend-div-id" style="margin-top: 10px; width: 200px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;/div&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { LegendModifier } from 'scichart/Charting/ChartModifiers/LegendModifier';&lt;/P&gt;
&lt;P&gt;export async function legendModifierTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine1Values = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine2Values = [1, 1.1, 1.4, 1.3, 1.05, 0.8, 0.6, 0.5, 0.4];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries1 = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'red',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Red Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine1Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries2 = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Green Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine2Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // External placement&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new LegendModifier({ placementDivId: "legend-div-id" }));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { LegendModifier } from 'scichart/Charting/ChartModifiers/LegendModifier';&lt;/P&gt;
&lt;P&gt;export async function legendModifierTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine1Values = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLine2Values = [1, 1.1, 1.4, 1.3, 1.05, 0.8, 0.6, 0.5, 0.4];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries1 = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'red',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Red Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine1Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries2 = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'Green Series',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xLineValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yLine2Values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // External placement&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new LegendModifier({ placementDivId: "legend-div-id" }));&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The result will be.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/LegendModifier_4.png"&gt;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="aeaaee36-14d1-44ab-9efa-3a97e1f21362" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c7ddb5a2-5c58-4351-9336-bafd039a556f" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="16b231ad-5162-4abc-a90b-bf4d292fb28c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1ace0de-c745-4610-a766-eb59af8cf33d" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="2cb11e8f-3f2f-4c22-85c6-aff293c362b3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="172addbf-995e-4705-9f7d-535415ab322a" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                      <TopicLink Id="1364b7e9-1a43-4e1c-ab65-629f79afd39a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="6139d2e5-f098-4674-99e5-581141312bf5" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="e8fb326c-172a-41f0-b4f2-5061118b0627" AutoIndex="false">
                <Caption m="2021-09-02T07:48:56.6132714Z">Selection</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="dc5b75d6-5475-47a1-a5c6-24310f833ba0" Status="New Topic" CreatedOn="2021-09-02T07:48:59.156513Z" ModifiedOn="2021-10-11T10:15:58.9539884Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SeriesSelection" BuildFlags="">
                    <Title />
                    <ContentsTitle m="2021-09-02T08:09:09.9051894Z">Series Selection</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2021-10-11T10:15:58.9539884Z">&lt;P&gt;SciChart now features a native &lt;STRONG&gt;ChartModifier&lt;/STRONG&gt; called the &lt;STRONG&gt;SeriesSelectionModifier&lt;/STRONG&gt; which allows you to click-select series via the mouse, or programmatically. The &lt;STRONG&gt;SeriesSelectionModifier&lt;/STRONG&gt; allows you to do&amp;nbsp;two things:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Be notified via the selectionChanged event when the user selects one or more series. 
&lt;LI&gt;Be notified via the hoverChanged event when a user hovers one or more series 
&lt;LI&gt;Get a list of currently selected or currently hovered series &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Find an example below&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SeriesSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {SeriesSelectionModifier } from "scichart/Charting/ChartModifiers/SeriesSelectionModifier";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a chart with line series with a point-marker&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Subscribe to onSelected to change the visual of the series when isSelected = true&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue"}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // using onSelectedChanged callback, change the style of the series on selection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onSelectedChanged: sourceSeries =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sourceSeries.stroke = sourceSeries.isSelected ? "white" : "SteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sourceSeries.pointMarker.fill = sourceSeries.isSelected ? "white" : "SteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sourceSeries.pointMarker.stroke = sourceSeries.isSelected ? "white" : "LightSteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the DatapointSelectionModifier to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new SeriesSelectionModifier());&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/seriesselectionmodifier-1.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Getting Notified on Series Hovered / Selected&lt;/H2&gt;
&lt;P&gt;The SeriesSelectionModifier has two events: &lt;STRONG&gt;SeriesSelectionModifier.selectionChanged&lt;/STRONG&gt; and &lt;STRONG&gt;SeriesSelectionModifier.hoverChanged&lt;/STRONG&gt;. These provide callbacks to user code when a series is selected or deselected.&lt;/P&gt;
&lt;P&gt;The constructor options for the SeriesSelectionModifier also have onSelectionChanged and onHoverChanged functions.&lt;/P&gt;
&lt;P&gt;Finally, series themselves have selected and hovered events and functions in the constructor.&lt;/P&gt;
&lt;P&gt;Here are the four possible ways you can get notified when selection changes in SciChart.js&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SeriesSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import {SeriesSelectionModifier} from "scichart/Charting/ChartModifiers/SeriesSelectionModifier";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Method 1: Pass onSelectionChanged and onHoverChanged to SeriesSelectionModifier constructor options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const seriesSelectionModifier = new SeriesSelectionModifier( {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableHover: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableSelection: true,&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onSelectionChanged: (args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("1 seriesSelectionModifier constructor onSelectionChanged");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onHoverChanged: (args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("1 seriesSelectionModifier constructor onHoverChanged");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Method 2: Use the hoverChanged and selectionChanged events&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesSelectionModifier.hoverChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("2 seriesSelectionModifier.hoverChanged event");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; seriesSelectionModifier.selectionChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("2 seriesSelectionModifier.selectionChanged event");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Method 3: Use the onSelectedChanged functions on the series itself&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const series = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onSelectedChanged: (sourceSeries, isSelected) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("3 FastLineRenderableSeries constructor onSelectedChanged");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onHoveredChanged: (sourceSeries, isHovered)&amp;nbsp; =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("3 FastLineRenderableSeries constructor onSelectedChanged");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Method 4: use the selected and hovered events on the series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.hovered.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("4 FastLineRenderableSeries.hovered event");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.stroke = series.isSelected ? "White" : series.isHovered ? "Orange" : "SteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.selected.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("4 FastLineRenderableSeries.selected event");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.stroke = series.isSelected ? "White" : series.isHovered ? "Orange" : "SteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the modifier and series to chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(seriesSelectionModifier);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(series);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Customizing Selection Visuals&lt;/H2&gt;
&lt;H3&gt;Colour a series when selected&lt;/H3&gt;
&lt;P&gt;When a series is selected or hovered, you can use one of the callback methods (above) to change it's style. Any property may be changed, such as stroke, strokeThickness, pointMarker type or colours. Below is a simple code sample showing how to get a tri-state style on series selected, hovered, or selected and hovered.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SeriesSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import {SeriesSelectionModifier} from "scichart/Charting/ChartModifiers/SeriesSelectionModifier";&lt;BR&gt;import {LineAnimation} from "scichart/Charting/Visuals/RenderableSeries/Animations/LineAnimation";&lt;BR&gt;import {easing} from "scichart/Core/Animations/EasingFunctions";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const defaultStroke = "SteelBlue";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const defaultFill = "LightSteelBlue";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const applyStyle = (series, isSelected, isHovered) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.stroke = isSelected &amp;amp;&amp;amp; isHovered ? "#FFBB99" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected ? "#FFF" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHovered ? "#FF7733" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.pointMarker.stroke = series.stroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.pointMarker.fill = isSelected &amp;amp;&amp;amp; isHovered ? "#FFBB99" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected ? "#FFF" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHovered ? "#FF7733" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a chart with line series with a point-marker&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: defaultStroke,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: defaultStroke,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: defaultFill}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply a style to the series on selected and hovered&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onSelectedChanged: sourceSeries =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applyStyle(sourceSeries, sourceSeries.isSelected, sourceSeries.isHovered);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onHoveredChanged: sourceSeries =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applyStyle(sourceSeries, sourceSeries.isSelected, sourceSeries.isHovered);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the DatapointSelectionModifier to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new SeriesSelectionModifier( {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableSelection: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; enableHover: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;This results in the following behaviour when hovering or selecting the series.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/seriesselectionmodifier-2.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Animating Selection State Changes&lt;/H3&gt;
&lt;P&gt;Using the Animations API built into SciChart, it is also possible to animate between style state changes on a RenderableSeries.&lt;/P&gt;
&lt;P&gt;Update the code above to use the Animations API to call&amp;nbsp;&lt;STRONG&gt;BaseRenderableSeries.enqueueAnimation&lt;/STRONG&gt;&amp;nbsp;as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SeriesSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {LineAnimation} from "scichart/Charting/Visuals/RenderableSeries/Animations/LineAnimation";&lt;BR&gt;import {easing} from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import {EPointMarkerType} from "scichart/types/PointMarkerType";&lt;BR&gt;&lt;BR&gt;// Update function applyStyle to use Animations API&lt;BR&gt;const applyStyle = (series, isSelected, isHovered) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const stroke = isSelected &amp;amp;&amp;amp; isHovered ? "#FFBB99" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected ? "#FFF" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHovered ? "#FF7733" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fill = isSelected &amp;amp;&amp;amp; isHovered ? "#FFBB99" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected ? "#FFF" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHovered ? "#FF7733" :&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const strokeThickness = isHovered ? 4 : 2;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.enqueueAnimation(new LineAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; styles: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EPointMarkerType.Ellipse&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 250,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.outQuad&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This now results in the following animated style-transition&amp;nbsp;behaviour when hovering or selecting the series.&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;&lt;IMG border=0 alt="" src="images/seriesselectionmodifier-3.gif"&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Multiple properties can be animated in SciChart.js, including stroke, fill, strokethickness, pointmarker size, type, opacity and more. For more information about how to animate between styles or datasets, see the &lt;STRONG&gt;Animations API Documentation&lt;/STRONG&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Programmatically Getting/Setting Selected Series&lt;/H2&gt;
&lt;P&gt;Series may also be selected and deselected programmatically. Simply set the &lt;STRONG&gt;BaseRenderableSeries.isSelected&lt;/STRONG&gt; property to trigger this action. SciChart will automatically redraw, and &lt;STRONG&gt;selectedChanged&lt;/STRONG&gt; callbacks will be called, where you can update the style.&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="9a32c411-74ef-42c9-ad10-ca8be11c6304" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ae9b10e1-f5ba-444e-9835-6b0f95806007" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="ae9b10e1-f5ba-444e-9835-6b0f95806007" Status="New Topic" CreatedOn="2021-09-02T07:49:13.3492557Z" ModifiedOn="2021-09-08T16:07:26.1373589Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataPointSelection" BuildFlags="">
                    <Title m="2021-09-02T07:49:22.7532015Z">DataPoint Selection</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2021-09-08T16:07:26.1373589Z">&lt;P&gt;SciChart now features a native ChartModifier called the &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt; which allows individual data-points to be selected via the mouse, or programmatically.&lt;/P&gt;
&lt;P md-src-pos="23..82"&gt;&lt;SPAN md-src-pos="23..26"&gt;The&lt;/SPAN&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN md-src-pos="56..81"&gt;allows you to do&amp;nbsp;two things&lt;/SPAN&gt;:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Be notified via the &lt;STRONG&gt;onSelectionChanged event&lt;/STRONG&gt; when the user selects one or more points. 
&lt;LI&gt;Change the rendering of the selected points using a &lt;STRONG&gt;PaletteProvider&lt;/STRONG&gt; &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;Enabling the DataPointSelectionModifier&lt;/H2&gt;
&lt;P&gt;To enable Data-point selection, you must do the following:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Add a &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt; to the &lt;STRONG&gt;SciChartSurface.chartModifier&lt;/STRONG&gt; collection 
&lt;LI&gt;(Optional) Create and add &lt;STRONG&gt;IPointMetadata&lt;/STRONG&gt; for each data-point you wish to programmatically select. If you do not do this, &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt;&amp;nbsp;will do it for you. 
&lt;LI&gt;(Optional) Add a &lt;STRONG&gt;DataPointSelectionPaletteProvider&lt;/STRONG&gt; to series if you want visual feedback on selection. If you do not do this, points will be selected but without visual feedback. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&lt;STRONG&gt;Find an example below&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataPointSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {DataPointSelectionModifier } from "scichart/Charting/ChartModifiers/DataPointSelectionModifier";&lt;BR&gt;import {DataPointSelectionPaletteProvider} from "scichart/Charting/Model/DataPointSelectionPaletteProvider";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;export async function datapointSelectionExample1() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a chart with line series with a point-marker&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue"}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Adding the DataPointSelectionPaletteProvider will change the fill/stroke of the pointmarker on selection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; paletteProvider: new DataPointSelectionPaletteProvider({ fill: "white", stroke: "white" })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add the DatapointSelectionModifier to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new DataPointSelectionModifier());&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/datapointselectionmodifier-1.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Getting Notifications on Datapoint Selection&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt; has an event, &lt;STRONG&gt;selectionChanged&lt;/STRONG&gt;, which allows you to subscribe to a callback when points are selected or deselected. The&amp;nbsp;&lt;STRONG&gt;onSelectionChanged&lt;/STRONG&gt; function may also be passed into the &lt;STRONG&gt;constructor options&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Here are two ways you can be notified when datapoint selection changes in SciChart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataPointSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { DataPointSelectionModifier } from "scichart/Charting/ChartModifiers/DataPointSelectionModifier";&lt;BR&gt;&lt;BR&gt;// Option 1, pass onSelectionChanged callback when creating the DataPointSelectionModifier&lt;BR&gt;sciChartSurface.chartModifiers.add(new DataPointSelectionModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; onSelectionChanged: (args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`${args.selectedDataPoints.length} datapoints selected!`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}));&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Option 2, multiple subscribers can listen to the selectionChanged event as well&lt;BR&gt;const dataPointSelectionModifier = new DataPointSelectionModifier();&lt;BR&gt;dataPointSelectionModifier.selectionChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`${args.selectedDataPoints.length} datapoints selected!`);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;DIV&gt;
&lt;P&gt;For more info about the arguments to the selectionChanged event or onSelectionChanged callback, please see the following items in our TypeDoc documentation.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;DataPointSelectionModifier.selectChanged&lt;/STRONG&gt; event 
&lt;LI&gt;&lt;STRONG&gt;DataPointSelectionChangedArgs&lt;/STRONG&gt; type 
&lt;LI&gt;&lt;STRONG&gt;DataPointInfo&lt;/STRONG&gt; type &lt;/LI&gt;&lt;/UL&gt;&lt;/DIV&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Multi-select, Invert-selection and Replace-selection&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt; supports multi-selection by holding the &lt;STRONG&gt;CTRL&lt;/STRONG&gt; key while clicking on datapoints. This option is available when &lt;STRONG&gt;DataPointSelectionModifier.allowClickSelect&lt;/STRONG&gt; = true.&lt;/P&gt;
&lt;P&gt;Holding the &lt;STRONG&gt;SHIFT&lt;/STRONG&gt; key inverts a selection. Use this to deselect a single point on the chart.&lt;/P&gt;
&lt;P&gt;Without CTRL or SHIFT pressed, the default behaviour is to replace a selection, e.g. a new point clicked will replace a previously clicked point.&lt;/P&gt;
&lt;P&gt;To customize this behaviour you can pass a &lt;STRONG&gt;getSelectionMode&lt;/STRONG&gt; function into the constructor options of DataPointSelectionModifier, or, override the getSelectionMode function. For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {DataPointSelectionModifier, ESelectionMode, TModifierKeys} from "scichart/Charting/ChartModifiers/DataPointSelectionModifier";&lt;BR&gt;&lt;BR&gt;const dataPointSelectionModifier = new DataPointSelectionModifier({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Override getSelectionMode behaviour&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; getSelectionMode: (modifierKeys, isAreaSelection) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (modifierKeys.ctrlKey) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Union when area selection and CTRL else Inverse&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ESelectionMode.Union;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else if (modifierKeys.shiftKey) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When shift Inverse&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ESelectionMode.Inverse;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Default mode is Replace&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return ESelectionMode.Replace;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Rectangle Select DataPoints&lt;/H2&gt;
&lt;P&gt;Datapoints may be selected by dragging a rectangle on the chart. This option is available when &lt;STRONG&gt;DataPointSelectionModifier.allowDragSelect&lt;/STRONG&gt; = true.&lt;/P&gt;
&lt;P&gt;Drag to Select rectangle can be customised by setting the properties&amp;nbsp;&lt;STRONG&gt;DataPointSelectionModifier.selectionStroke&lt;/STRONG&gt;, &lt;STRONG&gt;DatapointSelectionModifier.selectionFill&lt;/STRONG&gt; and&amp;nbsp;&lt;STRONG&gt;DataPointSelectionModifier.selectionStrokeThickness&lt;/STRONG&gt; properties&lt;STRONG&gt;.&lt;/STRONG&gt; This may also be customizable in the themes by setting &lt;STRONG&gt;IThemeProvider.rubberBandFillBrush&lt;/STRONG&gt; and &lt;STRONG&gt;IThemeProvider.rubberBandStrokeBrush&lt;/STRONG&gt; properties.&lt;/P&gt;
&lt;P&gt;Multi-select behaviour is also configurable via the getSelectionMode function.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/datapointselectionmodifier-2.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Customizing the Visual of Datapoint Selection&lt;/H2&gt;
&lt;P&gt;By default there is no visual feedback that a datapoint is selected or deselected. To add this behaviour, you can add a &lt;STRONG&gt;PaletteProvider&lt;/STRONG&gt; to each series you want to show visual feedback. We've created one out of the box for you to simplify this process.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataPointSelectionModifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Create a chart with line series with a point-marker&lt;BR&gt;sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue"}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Adding the DataPointSelectionPaletteProvider will change the fill/stroke of the pointmarker on selection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; paletteProvider: new DataPointSelectionPaletteProvider({ fill: "white", stroke: "white" })&lt;BR&gt;}));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The &lt;STRONG&gt;DataPointSelectionPaletteProvider&lt;/STRONG&gt; checks for &lt;STRONG&gt;IPointMetadata.isSelected&lt;/STRONG&gt; to return a fill/stroke for point-markers that are selected. Our implementation looks like this. You can either use our default implementation or create your own based on this.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataPointSelectionPaletteProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { TPalletProviderDefinition } from "../../Builder/buildSeries";&lt;BR&gt;import { EPaletteProviderType } from "../../types/PaletteProviderType";&lt;BR&gt;import { parseArgbToHtmlColor, parseColorToUIntArgb } from "../../utils/parseColor";&lt;BR&gt;import { IRenderableSeries } from "../Visuals/RenderableSeries/IRenderableSeries";&lt;BR&gt;import {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; EFillPaletteMode,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; EStrokePaletteMode,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IFillPaletteProvider,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IPointMarkerPaletteProvider,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; IStrokePaletteProvider,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; TPointMarkerArgb&lt;BR&gt;} from "./IPaletteProvider";&lt;BR&gt;import { IPointMetadata } from "./IPointMetadata";&lt;BR&gt;&lt;BR&gt;export interface ISelectedPointOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * The fill of the point-marker as an HTML color code&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill?: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * The stroke of the point-marker as an HTML color code&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke?: string;&lt;BR&gt;}&lt;BR&gt;&lt;BR&gt;export class DataPointSelectionPaletteProvider implements IPointMarkerPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public selectedPointMarker: TPointMarkerArgb;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public selectedStroke: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public selectedFill: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public strokePaletteMode: EStrokePaletteMode = EStrokePaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public fillPaletteMode: EFillPaletteMode = EFillPaletteMode.SOLID;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options: ISelectedPointOptions) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (options?.stroke) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.selectedStroke = parseColorToUIntArgb(options?.stroke);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (options?.fill) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.selectedFill = parseColorToUIntArgb(options?.fill);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.selectedPointMarker = { stroke: this.selectedStroke, fill: this.selectedFill };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onAttached(parentSeries: IRenderableSeries): void {}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onDetached(): void {}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overridePointMarkerArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity?: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata?: IPointMetadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ): TPointMarkerArgb {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (metadata?.isSelected) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.selectedPointMarker;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information on how to style data-points, see the &lt;STRONG&gt;PaletteProvider Documentation&lt;/STRONG&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Programmatically Selecting Points&lt;/H2&gt;
&lt;P&gt;If you want to select or deselect datapoints in code, you can do this through the &lt;STRONG&gt;IPointMetadata.isSelected&lt;/STRONG&gt; property. After setting this property don't forget to call &lt;STRONG&gt;sciChartSurface.invalidateElement()&lt;/STRONG&gt; to force a redraw of the chart!&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataPointSelectionPaletteProvider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a DataSeries with x,y values and metadata&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [4.3, 5.3, 6, 6.3, 6, 5.2, 4.5, 4.6, 5, 6, 7, 8],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata: [{ isSelected: false }, { isSelected: false }, { isSelected: false },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false }, { isSelected: false }, { isSelected: false },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false }, { isSelected: false }, { isSelected: false },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { isSelected: false }, { isSelected: false }, { isSelected: false }]&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Now set isSelected programmatically on some datapoints&lt;BR&gt;dataSeries.getMetadataAt(3).isSelected = true;&lt;BR&gt;dataSeries.getMetadataAt(4).isSelected = true;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This code will programmatically set all points to deselected, except for points at index 3 and 4.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more information on how to manipulate PointMetadata, see the &lt;STRONG&gt;PointMetadata API Documentation&lt;/STRONG&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks>
                      <TopicLink Id="95e1a46e-50a7-481d-909c-487b729d05c6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dc5b75d6-5475-47a1-a5c6-24310f833ba0" BuildFlags="">
                        <Title />
                        <Category />
                      </TopicLink>
                    </TopicLinks>
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="dbb54b00-f9d0-447f-8159-4532e6c2dc2d" AutoIndex="false">
                <Caption m="2022-03-04T19:14:58.0244213Z">CustomModifiers</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="372ca001-b07d-443b-b0a6-972158a1bfe8" Status="New Topic" CreatedOn="2022-03-04T19:15:05.6191137Z" ModifiedOn="2022-03-04T19:29:56.6991095Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomChartModifierAPI" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2022-03-04T19:29:56.6991095Z">&lt;P&gt;The ChartModifierBase API is one of the most powerful APIs in the SciChart library. &lt;/P&gt;
&lt;P&gt;Using this API you can create behaviours which you can attach to a chart to perform custom Zooming, Panning, Annotation &amp;amp; Markers, Legend output and much much more. Any time you want to do something in JavaScript or Typescript code to alter the behaviour of a SciChartSurface you should be thinking about creating a custom modifier to do it. &lt;/P&gt;
&lt;H2&gt;The ChartModifierBase2D Type&lt;/H2&gt;
&lt;P&gt;The ChartModifierBase2D provides a base class for all of the ChartModifiers within SciChart. All of our built-in modifiers such as ZoomPanModifier, RolloverModifier, TooltipModifier, YAxisDragModifier inherit ChartModifierBase2D.&lt;/P&gt;
&lt;P&gt;You can create your own ChartModifiers by inheriting this class. For example, this code sample shows how to declare a custom ChartModifier class in JavaScript ES6 or TypeScript.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {ChartModifierBase2D} from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import {EChart2DModifierType} from "scichart/types/ChartModifierType";&lt;/P&gt;
&lt;P&gt;export class SimpleChartModifierJs extends ChartModifierBase2D {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.type = EChart2DModifierType.Custom;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseDown(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseDown(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseDown at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseMove(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseMove(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseMove at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseUp(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseUp(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseUp at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierDoubleClick(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierDoubleClick(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`DoubleClick at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseWheel(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseWheel(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseWheel delta=${args.mouseWheelDelta} at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseEnter(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseEnter(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseEnter!`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifierMouseLeave(args) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseLeave(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseLeave!`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {ChartModifierBase2D} from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import {EChart2DModifierType} from "scichart/types/ChartModifierType";&lt;BR&gt;import {ModifierMouseArgs} from "scichart/Charting/ChartModifiers/ModifierMouseArgs";&lt;/P&gt;
&lt;P&gt;export class SimpleChartModifierTs extends ChartModifierBase2D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; readonly type: EChart2DModifierType = EChart2DModifierType.Custom;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseDown(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseDown(args);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseDown at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseMove(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseMove(args);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseMove at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseUp(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseUp(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseUp at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierDoubleClick(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierDoubleClick(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`DoubleClick at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseWheel(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseWheel(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseWheel delta=${args.mouseWheelDelta} at point ${args.mousePoint.x}, ${args.mousePoint.y}`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseEnter(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseEnter(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseEnter!`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseLeave(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseLeave(args);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`MouseLeave!`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="622aa9e7-6135-4e59-a2b0-4e6a080414aa" Status="New Topic" CreatedOn="2022-03-04T19:36:07.2616705Z" ModifiedOn="2022-03-05T13:26:43.2971369Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DetectingClicksOnChartParts" BuildFlags="">
                    <Title m="2022-03-04T19:36:28.0949712Z">Detecting Clicks On Chart Parts with a Custom Modifier</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2022-03-05T13:26:43.2971369Z">&lt;P&gt;One of the uses of the custom ChartModifier API is to allow you to create custom behaviours and add them onto a SciChartSurface. These behaviours can be simple or complex, and perform zooming, panning operations or more.&lt;/P&gt;
&lt;P&gt;Below we give an example of how to detect clicks on chart parts using the ChartModifier API. This results in the following output on mouse over.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ChartModifier-axis-hover-scichart-js.gif"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Detecting Click or MouseOver on Axis, RenderableSeries&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;In the sample below we've created a custom chartmodifier which allows us to detect whether the mouse is over chart parts such as XAxis, YAxis and RenderableSeries. &lt;/P&gt;
&lt;P&gt;The process to create a chart modifier is by extending ChartModifierBase2D and overridding one or more of the functions or callbacks that are called when we interact with the chart.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {ChartModifierBase2D} from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import {EChart2DModifierType} from "scichart/types/ChartModifierType";&lt;BR&gt;import {ModifierMouseArgs} from "scichart/Charting/ChartModifiers/ModifierMouseArgs";&lt;BR&gt;import {testIsInBounds} from "scichart/utils/pointUtil";&lt;BR&gt;import {Rect} from "scichart/Core/Rect";&lt;BR&gt;import {RubberBandSvgRect} from "scichart/Charting/Visuals/RubberBandSvgRect/RubberBandSvgRect";&lt;/P&gt;
&lt;P&gt;// A custom modifier which detects clicks on chart parts&lt;BR&gt;export class DetectClicksOnChartPartsModifier extends ChartModifierBase2D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; readonly type: EChart2DModifierType = EChart2DModifierType.Custom;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private debugRect: RubberBandSvgRect;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onAttach();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Rectangle used to show visually what chart part you clicked&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect = new RubberBandSvgRect(this.parentSurface.domSvgAdornerLayer, "#FF000033", "Transparent", 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onDetach();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.delete();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseMove(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseMove(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!this.isAttached) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Error("Should not call DetectClicksOnChartPartsModifier.modifierMouseDown if not attached");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mousePoint = args.mousePoint;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(undefined);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over A YAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.yAxes.asArray().forEach(yAxis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = yAxis.viewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over YAxis ID=" + yAxis.id);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(yAxis.viewRect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over an XAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.xAxes.asArray().forEach(xAxis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = xAxis.viewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over XAxis ID=" + xAxis.id);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(xAxis.viewRect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over the main chart area&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = this.parentSurface?.seriesViewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over main Chart area");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(this.parentSurface?.seriesViewRect);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over any series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.renderableSeries.asArray().forEach(rSeries =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = rSeries.hitTestProvider.hitTest(mousePoint.x, mousePoint.y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`RenderableSeries with seriesname=${rSeries.dataSeries.dataSeriesName} was hovered`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rSeries.isHovered = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rSeries.isHovered = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private updateDebugRectangle(rect: Rect) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!rect) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.x1 = rect.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.y1 = rect.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.x2 = rect.x + rect.width;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.y2 = rect.y + rect.height;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {ChartModifierBase2D} from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import {EChart2DModifierType} from "scichart/types/ChartModifierType";&lt;BR&gt;import {ModifierMouseArgs} from "scichart/Charting/ChartModifiers/ModifierMouseArgs";&lt;BR&gt;import {testIsInBounds} from "scichart/utils/pointUtil";&lt;BR&gt;import {Rect} from "scichart/Core/Rect";&lt;BR&gt;import {RubberBandSvgRect} from "scichart/Charting/Visuals/RubberBandSvgRect/RubberBandSvgRect";&lt;/P&gt;
&lt;P&gt;// A custom modifier which detects clicks on chart parts&lt;BR&gt;export class DetectClicksOnChartPartsModifier extends ChartModifierBase2D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; readonly type: EChart2DModifierType = EChart2DModifierType.Custom;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private debugRect: RubberBandSvgRect;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onAttach();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Rectangle used to show visually what chart part you clicked&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect = new RubberBandSvgRect(this.parentSurface.domSvgAdornerLayer, "#FF000033", "Transparent", 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onDetach();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.delete();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; override modifierMouseMove(args: ModifierMouseArgs) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.modifierMouseMove(args);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!this.isAttached) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Error("Should not call DetectClicksOnChartPartsModifier.modifierMouseDown if not attached");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mousePoint = args.mousePoint;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(undefined);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over A YAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.yAxes.asArray().forEach(yAxis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = yAxis.viewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over YAxis ID=" + yAxis.id);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(yAxis.viewRect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over an XAxis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.xAxes.asArray().forEach(xAxis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = xAxis.viewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over XAxis ID=" + xAxis.id);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(xAxis.viewRect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over the main chart area&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { left, right, top, bottom } = this.parentSurface?.seriesViewRect;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (testIsInBounds(mousePoint.x, mousePoint.y, left, bottom, right, top)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Mouse is over main Chart area");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.updateDebugRectangle(this.parentSurface?.seriesViewRect);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check if the mouse was over any series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface?.renderableSeries.asArray().forEach(rSeries =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = rSeries.hitTestProvider.hitTest(mousePoint.x, mousePoint.y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`RenderableSeries with seriesname=${rSeries.dataSeries.dataSeriesName} was hovered`);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rSeries.isHovered = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rSeries.isHovered = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private updateDebugRectangle(rect: Rect) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!rect) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.x1 = rect.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.y1 = rect.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.x2 = rect.x + rect.width;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.y2 = rect.y + rect.height;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.debugRect.isHidden = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Above: we create a custom chartmodifier by extending ChartModifierBase2D.&lt;/P&gt;
&lt;P&gt;We override onModifierMouseMove (you could easily override onModifierMouseDown, MouseUp, MouseDoubleClick).&lt;/P&gt;
&lt;P&gt;Next, we perform a series of tests to see if the mouse pointer is over an axis, or a series.&lt;/P&gt;
&lt;P&gt;Try the above code with the following test harness:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;using the custom modifier&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import {NumericAxis} from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import {DetectClicksOnChartPartsModifierJs} from "./DetectClicksOnChartPartsModifier";&lt;BR&gt;import {EAxisAlignment} from "scichart/types/AxisAlignment";&lt;BR&gt;import {FastLineRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {SimpleChartModifierJs} from "./SimpleChartModifierJS";&lt;/P&gt;
&lt;P&gt;export async function customModifiersSandboxJs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('customModifier typescript example');&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis_0", axisTitle: "XAxis 0", axisAlignment: EAxisAlignment.Top}));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { id: "XAxis_1", axisTitle: "XAxis 1", axisAlignment: EAxisAlignment.Bottom}));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { id: "YAxis_0", axisTitle: "YAxis 0", axisAlignment: EAxisAlignment.Left}));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { id: "YAxis_1", axisTitle: "YAxis 1", axisAlignment: EAxisAlignment.Right}));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new DetectClicksOnChartPartsModifierJs());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.chartModifiers.add(new SimpleChartModifierJs());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from(Array(25).keys())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = xValues.map(x =&amp;gt; Math.sin(x * 0.1));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(yValues);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues, yValues }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Yellow",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxisId: "YAxis_0",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxisId: "XAxis_0",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onHoveredChanged: sourceSeries =&amp;gt; sourceSeries.strokeThickness = sourceSeries.isHovered ? 7 : 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Find the full code sample for detecting clicks or mouse-over chart parts at &lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/dev_v2.x/Sandbox/DocumentationSnippets/ChartModifierAPI/src" target=_blank&gt;github.com/ABTSoftware/SciChart.JS.Examples/tree/dev_v2.x/Sandbox/DocumentationSnippets/ChartModifierAPI&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
            </ChildTopicCategories>
            <Topics />
          </TopicCategory>
          <TopicCategory Id="934a005f-39fb-4091-95b3-4b29c366fd22" AutoIndex="false">
            <Caption m="2021-09-17T08:48:56.2968118Z">Miscellaneous APIs</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="2e02ad3c-378c-4512-9b05-49a6b0f0fa61" Status="New Topic" CreatedOn="2016-09-08T12:18:01.5318743Z" ModifiedOn="2019-08-14T11:23:25.9501772Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="RenderContext API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-14T11:23:25.9501772Z">&lt;P&gt;The secret to SciChart’s speed is a bespoke, immediate-mode raster drawing engine. This means that all drawing in SciChart is done ‘immediately’ to the screen, and is cleared and redrawn each time the chart is updated.&lt;/P&gt;
&lt;P&gt;Now in SciChart you can take advantage of our immediate-mode drawing API, to create custom RenderableSeries, custom Point-Markers, Draw on top of the chart, or even create your own immediate-mode drawing applications.&lt;/P&gt;
&lt;H2&gt;The IRenderContext2D Interface&lt;/H2&gt;
&lt;P&gt;All the drawing to the separate layer is achieved with the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D.html"&gt;IRenderContext2D&lt;/A&gt; interface. All drawing is done to the&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface.html"&gt;RenderSurface&lt;/A&gt;, using either a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.canvas.RenderSurface.html"&gt;Canvas API&lt;/A&gt;, or&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.opengl.RenderSurfaceGL.html"&gt;OpenGL&lt;/A&gt; depending on your RenderSurface.&lt;/P&gt;
&lt;P&gt;Using this interface, you can:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawLine.html"&gt;draw&lt;/A&gt;&amp;nbsp;lines of variable stroke width 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawRect.html"&gt;draw&lt;/A&gt; a rectangle 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawEllipse.html"&gt;draw&lt;/A&gt; an ellipse shape 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawTrianglesStrip.html"&gt;fill&lt;/A&gt; an area with a brush 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~fillRect.html"&gt;fill&lt;/A&gt; a rectangle area 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawText.html"&gt;draw&lt;/A&gt; some text to the render surface 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~drawSprite.html"&gt;draw&lt;/A&gt;&amp;nbsp;sprite 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~setClipRect.html"&gt;set&lt;/A&gt; clip rect which prevents drawing outside specified bounds 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~rotate.html"&gt;rotate&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~scale.html"&gt;scale&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderContext2D~translate.html"&gt;translate&lt;/A&gt; RenderContext&amp;nbsp; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Believe it or not, you can achieve a lot with just those!&lt;/P&gt;
&lt;H2&gt;The IAssetManager2D interface&lt;/H2&gt;
&lt;P&gt;The second part RenderContext API is IAssetManager2D interface which is responsible for creation and storing of RenderSurface specific resources from Style classes.&lt;/P&gt;
&lt;P&gt;Using this interface, you can&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createPen.html"&gt;create&lt;/A&gt; pens to draw stroke with 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createBrush.html"&gt;create&lt;/A&gt; brushes to fill rects, ellipses with 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~createTexture.html"&gt;create textures&lt;/A&gt;&amp;nbsp;from Bitmap 
&lt;LI&gt;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~storeResource.html"&gt;store&lt;/A&gt; and&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IAssetManager2D~getResource.html"&gt;get&lt;/A&gt;&amp;nbsp;some heavy&amp;nbsp;resources which should be reused during drawing (e.g. textures, sprites ) &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Example of using RenderContext API&lt;/H2&gt;
&lt;P&gt;For example we'll create a simple example of&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurfaceRenderer.html"&gt;IRenderSurfaceRenderer&lt;/A&gt; which can be&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.IRenderSurface~setRenderer.html"&gt;set as renderer for RenderSurface&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom RenderSurface Renderer&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;private class TestRenderSurfaceRenderer implements IRenderSurfaceRenderer{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final RectF sprite2Rect = new RectF(0,0, 0.5f, 0.5f);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final RectF sprite3Rect = new RectF(0.25f,0.25f, 0.75f, 0.75f);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle solidStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle linearGradient;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final BrushStyle radialGradient;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final TextureBrushStyle textureStyle;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle simpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle aaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle texturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle texturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle thickTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickSimpleLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickAaLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickTexturedLine;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final PenStyle dashedThickTexturedAaLine;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FontStyle fontStyle;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final FontStyle customFontStyle;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final Bitmap texture;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final float[] xAxisArrow = {0,0, 50, 0, 30, -10, 50, 0, 30, 10, 50, 0};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final float[] yAxisArrow = {0,0, 0, 50, -10, 30, 0, 50, 10, 30, 0, 50};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private float degrees, dx, dy, opacity;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public TestRenderSurfaceRenderer(Bitmap texture) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; solidStyle = new SolidBrushStyle(ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; linearGradient = new LinearGradientBrushStyle(0, 0, 1, 1, ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8), ColorUtil.argb(0xEE, 0x13, 0x24, 0xA5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; radialGradient = new RadialGradientBrushStyle(0.5f, 0.5f, 0.5f, 0.5f, ColorUtil.argb(0xEE, 0xFF, 0xC9, 0xA8), ColorUtil.argb(0xEE, 0x13, 0x24, 0xA5));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textureStyle = new TextureBrushStyle(texture);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontStyle = new FontStyleBuilder(getActivity()).withTextSize(32).withTextColor(ColorUtil.Red).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customFontStyle = new FontStyleBuilder(getActivity()).withTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD_ITALIC)).withTextSize(23).withTextColor(ColorUtil.Yellow).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; simpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Red).withAntiAliasing(false).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; aaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Green).withAntiAliasing(true).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; texturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; texturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(1f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Blue).withAntiAliasing(false).withThickness(1f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Magenta).withAntiAliasing(true).withThickness(1f).withStrokeDashArray(new float[]{10, 5, 10, 5}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withStrokeDashArray(new float[]{5, 10, 5, 10}).withThickness(1f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withStrokeDashArray(new float[]{10, 5, 10, 5}).withThickness(1f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Red).withAntiAliasing(false).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Green).withAntiAliasing(true).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(10f).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; thickTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(10f).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickSimpleLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Blue).withAntiAliasing(false).withThickness(20f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickAaLine = new SolidPenStyleBuilder(getActivity()).withColor(ColorUtil.Magenta).withAntiAliasing(true).withThickness(20f).withStrokeDashArray(new float[]{0, 20, 10, 5}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickTexturedLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(false).withThickness(20f).withStrokeDashArray(new float[]{5, 10, 5, 10}).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dashedThickTexturedAaLine = new TexturePenStyleBuilder(getActivity()).withTextureBrush(textureStyle).withAntiAliasing(true).withThickness(20).withStrokeDashArray(new float[]{0, 20, 10, 5}).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.texture = texture;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceAttached(IRenderSurface surface) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceDetached(IRenderSurface surface) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onSurfaceSizeChanged(int width, int height, int oldWidth, int oldHeight) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void setTransform(float degrees, float dx, float dy, float opacity){&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.degrees = degrees;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.dx = dx&amp;nbsp; - translateX.getMax() / 2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.dy = dy - translateY.getMax() / 2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.opacity = opacity;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onDraw(IRenderContext2D renderContext, IAssetManager2D assetManager) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(dx, dy);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.rotate(degrees);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D solidBrushPerScreen = assetManager.createBrush(solidStyle, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D radialGradientBrushPerScreen = assetManager.createBrush(radialGradient, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D linearGradientBrushPerScreen = assetManager.createBrush(linearGradient, TextureMappingMode.PerScreen, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D textureBrushPerScreen = assetManager.createBrush(textureStyle, TextureMappingMode.PerScreen, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D solidBrushPerPrimitive = assetManager.createBrush(solidStyle, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D radialGradientBrushPerPrimitive = assetManager.createBrush(radialGradient, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D linearGradientBrushPerPrimitive = assetManager.createBrush(linearGradient, TextureMappingMode.PerPrimitive, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IBrush2D textureBrushPerPrimitive = assetManager.createBrush(textureStyle, TextureMappingMode.PerPrimitive, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D simpleLine = assetManager.createPen(this.simpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D aaLine = assetManager.createPen(this.aaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedSimpleLine = assetManager.createPen(this.dashedSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedAaLine = assetManager.createPen(this.dashedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickSimpleLine = assetManager.createPen(this.thickSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickAaLine = assetManager.createPen(this.thickAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickSimpleLine = assetManager.createPen(this.dashedThickSimpleLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickAaLine = assetManager.createPen(this.dashedThickAaLine, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D texturedLine = assetManager.createPen(this.texturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D texturedAaLine = assetManager.createPen(this.texturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedTexturedLine = assetManager.createPen(this.dashedTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedTexturedAaLine = assetManager.createPen(this.dashedTexturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickTexturedLine = assetManager.createPen(this.thickTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D thickTexturedAaLine = assetManager.createPen(this.thickTexturedAaLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickTexturedLine = assetManager.createPen(this.dashedThickTexturedLine, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IPen2D dashedThickTexturedAaLine = assetManager.createPen(this.dashedThickTexturedAaLine, opacity);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IFont font = assetManager.createFont(this.fontStyle);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IFont customFont = assetManager.createFont(this.customFontStyle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite1 = assetManager.createTexture(texture);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite2 = assetManager.createTexture(texture, sprite2Rect);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ITexture2D sprite3 = assetManager.createTexture(texture, sprite3Rect);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLines(xAxisArrow, 0, xAxisArrow.length, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLines(yAxisArrow, 0, yAxisArrow.length, aaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.save();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(10, 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 0, 80, 80, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 0, 180, 80, aaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 0, 280, 80, dashedSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 0, 380, 80, dashedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 100, 80, 180, thickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 100, 180, 180, thickAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 100, 280, 180, dashedThickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 100, 380, 180, dashedThickAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 0, 80, 80, texturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 0, 180, 80, texturedAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 0, 280, 80, dashedTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 0, 380, 80, dashedTexturedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(0, 100, 80, 180, thickTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(100, 100, 180, 180, thickTexturedAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(200, 100, 280, 180, dashedThickTexturedLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawLine(300, 100, 380, 180, dashedThickTexturedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(0, 0, 80, 80, simpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(100, 0, 180, 80, aaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(200, 0, 280, 80, dashedSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(300, 0, 380, 80, dashedAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(0, 100, 80, 180, thickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(100, 100, 180, 180, thickAaLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(200, 100, 280, 180, dashedThickSimpleLine);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawRect(300, 100, 380, 180, dashedThickAaLine);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(0, 0, 80, 80, solidBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(100, 0, 180, 80, linearGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(200, 0, 280, 80, radialGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(300, 0, 380, 80, textureBrushPerScreen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(0, 100, 80, 180, solidBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(100, 100, 180, 180, linearGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(200, 100, 280, 180, radialGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.fillRect(300, 100, 380, 180, textureBrushPerPrimitive);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 200);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(50, 50, 80, 80, simpleLine, solidBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(150, 50, 80, 80, aaLine, linearGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(250, 50, 80, 80, dashedSimpleLine, radialGradientBrushPerScreen);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(350, 50, 80, 80, dashedAaLine, textureBrushPerScreen);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(50, 150, 80, 80, thickSimpleLine, solidBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(150, 150, 80, 80, thickAaLine, linearGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(250, 150, 80, 80, dashedThickSimpleLine, radialGradientBrushPerPrimitive);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawEllipse(350, 150, 80, 80, dashedThickAaLine, textureBrushPerPrimitive);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.restore();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.save();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(500, 0);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 0, fontStyle.textColor, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 50, fontStyle.textColor, "abcdefghijklmnopqrstuvwxyz");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(font, 0, 100, fontStyle.textColor, "&lt;A href="mailto:1234567890~!@#$%^&amp;amp;*()-+=/|\\'\"&gt;1234567890~!@#$%^&amp;amp;*()-+=/|\\'\&lt;/A&gt;"");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 150, customFontStyle.textColor, "ABCDEFGHIJKLMNOPQRSTUVWXYZ");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 200, customFontStyle.textColor, "abcdefghijklmnopqrstuvwxyz");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawText(customFont, 0, 250, customFontStyle.textColor, "&lt;A href="mailto:1234567890~!@#$%^&amp;amp;*()-+=/|\\'\"&gt;1234567890~!@#$%^&amp;amp;*()-+=/|\\'\&lt;/A&gt;"");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, 300);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite1, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite1.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite2, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite2.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.drawSprite(sprite3, 0, 0, opacity);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; renderContext.translate(0, sprite3.getHeight() + 10);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite1.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite2.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sprite3.dispose();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="498f88e2-6f84-4804-9da5-426e8d72ef00" Status="New Topic" CreatedOn="2019-08-16T13:05:59.2168225Z" ModifiedOn="2022-05-17T19:44:53.434353Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Batching updates or Temporary Suspending Drawing" BuildFlags="">
                <Title />
                <ContentsTitle m="2021-03-29T19:59:44.1127187Z">Batching updates or Temporary Suspending Drawing</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-05-17T19:44:53.434353Z">&lt;P&gt;In SciChart.js, every update that you make to the chart will potentially trigger a redraw. For example:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Calling DataSeries.append() 
&lt;LI&gt;Setting Axis.visibleRange 
&lt;LI&gt;Adding a new series to the sciChartSurface.renderableSeries collection &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;All of these operations potentially trigger a redraw of the SciChartSurface. This may not be desirable in all cases, and there is an API to allow you to temporarily suspend or pause drawing while making multiple updates.&lt;/P&gt;
&lt;H2&gt;The SuspendUpdates() API&lt;/H2&gt;
&lt;P&gt;The SuspendUpdates() api should be used when you want to temporarily stop drawing on a SciChartSurface. This helps to improve performance and reduce visual artefacts when making many changes at once.&lt;/P&gt;
&lt;P&gt;To use it, call the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Using UpdateSuspender API&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Method 1: use try/finally statement&lt;/P&gt;
&lt;P&gt;const s =&amp;nbsp;surface.suspendUpdates(); // This locks the surface and prevents further drawing&lt;BR&gt;try {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;dataSeries.append(x1, y1); // Multiple changes would normally trigger a redraw&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x2, y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x3, y4);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;} finally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;s.resume(); // Resume updates and perform a single redraw here&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// Method 2: or use UpdateSuspender.using() which does the same thing&lt;/P&gt;
&lt;P&gt;UpdateSuspender.using(surface,&amp;nbsp;() =&amp;gt;&amp;nbsp;{&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x1, y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x2, y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x3, y4);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface.yAxes.add(yAxis);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;});&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P class=NewStyle3&gt;Nested Calls to SuspendUpdates are permitted, however if you call sciChartSurface.suspendUpdates() more than once, you will need to call .resume() &lt;STRONG&gt;on all IUpdateSuspender instances&lt;/STRONG&gt; returned to resume updates on the chart.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Troubleshooting&lt;/H2&gt;
&lt;P&gt;If you use this API and your chart freezes, it could be because you have forgotten to call &lt;STRONG&gt;IUpdateSuspender.resume().&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Make sure every instance of IUpdateSuspender (returned from sciChartSurface.suspendUpdates()) is resumed. The chart should start to respond to mouse-input and data or property changes.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d2be691e-df29-43c3-9a57-0130024efa03" Status="New Topic" CreatedOn="2021-09-16T17:07:44.7980484Z" ModifiedOn="2021-09-30T09:22:43.1932107Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Retina Support and Browser Zoom" BuildFlags="">
                <Title m="2021-09-30T09:22:43.1921988Z">Retina Support and Browser Zoom</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-30T09:22:30.6838868Z">&lt;P&gt;SciChart.js v2.x now supports sharp graphics on high resolution Retina displays, as well as Browser Zoom functionality.&lt;/P&gt;
&lt;P&gt;Previously in SciChart.js, retina displays would look low quality, and when the browser is zoomed the image that SciChart renders to would simply be scaled.&lt;/P&gt;
&lt;P&gt;In SciChart.js v2, every element is now rendered at the native resolution and scaled down for display. This results in the following benefits:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Lines, strokes, shapes now look sharper and clearer on higher DPI displays or when browser is zoomed 
&lt;LI&gt;Text is rendered at a higher resolution. Text scales with browser zoom (good for Accessibility) 
&lt;LI&gt;Stroke thickness (line pen) increases with Browser Zoom &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Take a look below to see some comparison images side by side of SciChart.js v1 vs. v2 at 200% Browser zoom in Chrome.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BrowserZoom_Comparison1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;amp;nbsp;&lt;/P&gt;
&lt;P&gt;In particular, notice the quality of text, lines and gridlines&amp;amp;nbsp;difference between version 1 and version 2 when at 200% browser zoom:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BrowserZoom_Comparison2.png"&gt;&lt;/P&gt;
&lt;H2&gt;Enabling &amp;amp; Disabling Retina DPI / Browser Zoom Support&lt;/H2&gt;
&lt;P&gt;By default, Retina &amp;amp;amp; high DPI support is built in, you don't have to do anything to enable it.&lt;/P&gt;
&lt;P&gt;However, if you wanted to disable automatic scaling with DPI then you can use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Disable DPI scaling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { DpiHelper} from "scichart/Charting/Visuals/TextureManager/DpiHelper";&lt;BR&gt;&lt;BR&gt;// Note: you will need to call this before any SciChartSurface is created&lt;BR&gt;DpiHelper.IsDpiScaleEnabled = false;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Performance Considerations when Dpi Scaling&lt;/H2&gt;
&lt;P&gt;When SciChart.js is used on a high resolution display such as Retina, the chart will be rendered at 4x the number of pixels visible on screen. For example a 1,000 x 1,000 chart (1M Pixels) will be rendered at 2,000 x 2,000 (4M Pixels) before scaling down to the correct size.&lt;/P&gt;
&lt;P&gt;Higher number of pixels means more work for the browser to display the chart. If you notice any performance degredation on your application you can disable Dpi scaling using the code above.&lt;/P&gt;
&lt;P&gt;Also, we recommend use of Google Chrome browser as this has by far the best performance metrics, compared to Safari or Firefox, which both struggle to render large canvases.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="31c1fa0b-34ae-472f-b888-2de129265d50" Status="New Topic" CreatedOn="2021-09-16T17:07:56.3277122Z" ModifiedOn="2023-07-19T14:02:11.3196454Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Performance Tips" BuildFlags="">
                <Title m="2022-01-10T14:59:03.3113614Z">Performance Tips &amp; Tricks</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-19T14:02:11.3196454Z">&lt;P&gt;SciChart.js is a High Performance WebGL / WebAssembly chart library. Out of the box SciChart.js can&amp;nbsp;achieve incredible performance vs. other JavaScript Chart Libraries on the market, capable of rendering millions of datapoints. However, if you want to get the best possible performance out of SciChart.js then read on!&lt;/P&gt;
&lt;H2&gt;DataSeries Optimisations&lt;/H2&gt;
&lt;H3&gt;Data is Sorted in X (TimeSeries Data) is Faster than Unsorted (Scatter Data)&lt;/H3&gt;
&lt;P&gt;SciChart.js uses a number of optimised algorithms when your data is sorted in the X-direction.&lt;/P&gt;
&lt;P&gt;Algorithms such as Hit-Test (used by cursors, tooltips), indexing and drawing have a faster path when the data is sorted in X vs. unsorted.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We recommend to ensure time-series data is sorted in X for the best performance, but SciChart.js will still draw charts&amp;nbsp;with big data with unsorted (scatter) data just fine!&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Specify Data Distribution &amp;amp; Properties&lt;/H3&gt;
&lt;P&gt;SciChart will automatically detect the distribution of your data&amp;nbsp;&amp;amp; properties to choose the right algorithms for fastest and most accurate drawing. For example, properties that SciChart detects include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Data is Sorted in X direction 
&lt;LI&gt;Data contains NaN (Not a Number) 
&lt;LI&gt;Data spacing in X is evenly spaced &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;These properties allow us to choose the best &amp;amp; fastest algorithms for drawing, but detecting these properties takes some CPU time.&lt;/P&gt;
&lt;P&gt;You can tell SciChart.js these properties in advance to save the time when creating dataseries, and appending and updating data.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create Dataseries with Flags&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const count = 1_000_000;&lt;BR&gt;const xValues = Array.from(Array(count).keys());&lt;BR&gt;const yValues =&amp;nbsp;Array.from(Array(count).keys());&lt;BR&gt;&lt;BR&gt;// Test 1: Create DataSeries with 1 Million points without flags&lt;BR&gt;console.time("create series 1M points without Flags");&lt;BR&gt;const series = new XyDataSeries(webAssemblyContext, { xValues, yValues });&lt;BR&gt;console.timeEnd("create series 1M points without Flags");&lt;BR&gt;&lt;BR&gt;// Test 2: Create DataSeries with 1 Million points with flags&lt;BR&gt;console.time("create series 1M points with Flags");&lt;BR&gt;const series2 = new XyDataSeries(webAssemblyContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataIsSortedInX: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataEvenlySpacedInX: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; containsNaN: false&lt;BR&gt;});&lt;BR&gt;console.timeEnd("create series 1M points with Flags");&lt;/P&gt;
&lt;P&gt;// Results&lt;BR&gt;//&lt;BR&gt;// Time to create 1 Million points without flags: 55ms&lt;BR&gt;// Time to create 1 Million points with flags specified: 11ms&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Specify Data Distribution properties &lt;STRONG&gt;containsNaN&lt;/STRONG&gt;, &lt;STRONG&gt;dataSortedInX&lt;/STRONG&gt;, &lt;STRONG&gt;dataEvenlySpacedInX&lt;/STRONG&gt; when creating a DataSeries to save CPU time. Note you will need to update these flags if the data properties change.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Enable Resampling&lt;/H3&gt;
&lt;P&gt;We've enabled drawing optimisations which allow for faster rendering / drawing path in Line, Column, Candlestick, Mountain and Band Series by using data-point resampling.&lt;/P&gt;
&lt;P&gt;Set the property &lt;STRONG&gt;FastLineRenderableSeries.resamplingMode&lt;/STRONG&gt; = &lt;STRONG&gt;EResamplingMode.Auto&lt;/STRONG&gt; to take advantage of this faster drawing path.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;enable resampling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartDefaults, EResamplingMode &amp;nbsp;} from "scichart";&lt;/P&gt;
&lt;P&gt;// Creates a line series and explicitly enables resampling (default is AUTO)&lt;BR&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { resamplingMode: EResamplingMode.Auto} );&lt;BR&gt;&lt;BR&gt;// Disables resampling&lt;BR&gt;lineSeries.resamplingMode = EResamplingMode.None;&lt;BR&gt;&lt;BR&gt;// Enable or disable globally&lt;BR&gt;SciChartDefaults.enableResampling = false;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Set the property&amp;nbsp;&lt;STRONG&gt;FastLineRenderableSeries.resamplingMode&lt;/STRONG&gt; = &lt;STRONG&gt;EResamplingMode.Auto&lt;/STRONG&gt; to enable new drawing optimisations. Note this property is enabled by default.&lt;/P&gt;
&lt;P&gt;To read further about this property see the page on&amp;nbsp;&lt;A href="52beca85-ed1b-4135-bd27-72f46ff74aa0"&gt;Data Resampling&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;Batch Updates to DataSeries&lt;/H3&gt;
&lt;P&gt;SciChart DataSeries have functions like append(), insert(), update(), removeAt() where you can modify the data that the chart is showing. This allows you to achieve real-time updates in SciChart.&lt;/P&gt;
&lt;P&gt;It is faster to update the DataSeries in batches aka using functions appendRange(), insertRange(), removeRange() where you modify an array of data than to use single-point changes.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataSeries Batch Updates&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Test 1: Append 100k points one at a time&lt;BR&gt;const series = new XyDataSeries(webAssemblyContext, { dataIsSortedInX: true, containsNaN: false });&lt;BR&gt;const count = 100_000;&lt;/P&gt;
&lt;P&gt;console.time("dataseries.append(x,y) 100k points");&lt;BR&gt;for (let i = 0; i &amp;lt; count; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.append(i, i);&lt;BR&gt;}&lt;BR&gt;console.timeEnd("dataseries.append(x,y) 100k points");&lt;/P&gt;
&lt;P&gt;// Test 2: Append 100k points using AppendRange&lt;BR&gt;const series2 = new XyDataSeries(webAssemblyContext, { dataIsSortedInX: true, containsNaN: false });&lt;BR&gt;const xValues: number[] = Array.from(Array(count).keys());&lt;BR&gt;const yValues: number[] = Array.from(Array(count).keys());&lt;BR&gt;console.time("dataseries.appendRange(xValues,yValues) 100k points");&lt;BR&gt;series.appendRange(xValues, yValues);&lt;BR&gt;console.timeEnd("dataseries.appendRange(xValues,yValues) 100k points");&lt;BR&gt;&lt;BR&gt;// Results&lt;BR&gt;//&lt;BR&gt;// Append(x,y) 100,000 times: 69ms&lt;BR&gt;// AppendRange(xValues, yValues) with 100,000 points: 1ms&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;appendRange()&lt;/STRONG&gt;, &lt;STRONG&gt;insertRange()&lt;/STRONG&gt; and &lt;STRONG&gt;removeRange()&lt;/STRONG&gt; are much more performant than append(), insert() and remove(). This performance difference is more noticeable with insert &amp;amp; remove.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Initialize DataSeries with Capacity &lt;/H3&gt;
&lt;P&gt;Internally, SciChart DataSeries use a geometric resizing algorithm which reserves more memory than needed as you call &lt;STRONG&gt;append()&lt;/STRONG&gt;, &lt;STRONG&gt;appendRange()&lt;/STRONG&gt;. Starting with a new DataSeries and calling &lt;STRONG&gt;.append()&lt;/STRONG&gt; many times may result in several resizes of the underlying vector as the DataSeries grows. &lt;/P&gt;
&lt;P&gt;To avoid this, and reduce unnecessary allocations, if the size is known ahead of time you can initialize a DataSeries with capacity.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;DataSeries Batch Updates&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; capacity: 10000 // Reserves memory for 10,000 elements&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Multi Chart Optimisations&lt;/H2&gt;
&lt;H3&gt;Use One WebGL Context per SciChartSurface&lt;/H3&gt;
&lt;P&gt;The function &lt;STRONG&gt;SciChartSurface.create()&lt;/STRONG&gt; uses a single shared WebGL context for all chart surfaces. This allows us to have multiple charts (up to hundreds of charts) in a single webpage.&lt;/P&gt;
&lt;P&gt;The function &lt;STRONG&gt;SciChartSurface.createSingle()&lt;/STRONG&gt; creates one WebGL Context per SciChartSurface. This gives faster drawing&amp;nbsp;performance but will quickly hit the limit of WebGL contexts in a webpage.&lt;/P&gt;
&lt;P&gt;Approximate WebGL Context Limits per browser can be found below.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Browser&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Max WebGL Contexts per Page&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Firefox (Windows, macOS)&lt;/TD&gt;
&lt;TD&gt;300&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Chrome (Windows, macOS)&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;16&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Edge (Windows)&lt;/TD&gt;
&lt;TD&gt;16&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Safari (macOS)&lt;/TD&gt;
&lt;TD&gt;16&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Safari (iOS)&lt;/TD&gt;
&lt;TD&gt;16&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;Chrome (Android)&lt;/TD&gt;
&lt;TD&gt;8&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Individual WebGL contexts per SciChartSurface will give faster performance than a shared WebGL context. This is more noticeable in &lt;STRONG&gt;FireFox&lt;/STRONG&gt; or &lt;STRONG&gt;Safari&lt;/STRONG&gt; than Chrome which performs very well for shared WebGL contexts.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Sharing WebGL Drawing with SubCharts&lt;/H3&gt;
&lt;P style="COLOR: rgb(255,0,0)"&gt;TODO SUBCHARTS&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Text Label Optimisations&lt;/H2&gt;
&lt;H3&gt;Native Text Labels&lt;/H3&gt;
&lt;P style="COLOR: rgb(255,0,0)"&gt;TODO NATIVE TEXT &lt;/P&gt;
&lt;H3&gt;Shared Label Cache&lt;/H3&gt;
&lt;P&gt;Previously labels were cached per axis, but it is now possible to reuse cached labels across axes and across charts. This improves label drawing performance in multi-chart scenarios.&lt;/P&gt;
&lt;P&gt;You can enable this globally by setting:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;useSharedCache&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;SciChartDefaults.useSharedCache = true&lt;STRONG&gt;;&lt;/STRONG&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Or you can enable it for a particular axis by setting useSharedCache = true on the axis options, or directly on the axis labelProvider.&lt;/P&gt;
&lt;P&gt;This will give significant benefit if you have multiple charts with very similar sets of labels, even if they are not on screen at the same time. Labels are retained in the cache for a minute, so switching to a different chart that has some or all of the same labels will reuse the labels, saving a few hundred ms.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Using shared label cache gives significant performance benefits if you have multiple charts with very similar sets of labels, even if they are not on screen at the same time.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;useSharedCache is not enabled by default. If you are overriding getLabelTexture, it is important to ensure that the combination of text and label style is unique for each label texture. See the documentation for getLabelTexture for some ways to handle this.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Async Labels&lt;/H3&gt;
&lt;P&gt;Async labels was available in earlier versions of ScIChart.js, but has been deprecated in favour of Native text labels below.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Misc Optimisations&lt;/H2&gt;
&lt;H3&gt;Use the Fastest Browser!&lt;/H3&gt;
&lt;P&gt;By far, the fastest browser for WebGL, WebAssembly and JavaScript is &lt;STRONG&gt;Google Chrome&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Browsers such as Safari, Firefox have slower execution of JavaScript code. Please bear this in mind when comparing performance or when making recommendations to your customers!&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Use Google Chrome for the best performance with SciChart.js&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Retina macOS Performance&lt;/H3&gt;
&lt;P&gt;When SciChart.js is used on a high resolution display such as Retina, the chart will be rendered at 4x the number of pixels visible on screen. For example a 1,000 x 1,000 chart (1M Pixels) will be rendered at 2,000 x 2,000 (4M Pixels) before scaling down to the correct size.&lt;/P&gt;
&lt;P&gt;Higher number of pixels means more work for the browser to display the chart. If you notice any performance degredation on your application you can disable Dpi scaling using the code below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Disable DPI scaling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { DpiHelper} from "scichart/Charting/Visuals/TextureManager/DpiHelper";&lt;BR&gt;&lt;BR&gt;// Note: you will need to call this before any SciChartSurface is created&lt;BR&gt;DpiHelper.IsDpiScaleEnabled = false;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, we recommend use of Google Chrome browser as this has by far the best performance metrics, compared to Safari or Firefox, which both struggle to render large canvases.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See&amp;nbsp;&lt;A href="d2be691e-df29-43c3-9a57-0130024efa03"&gt;Related Article on Retina DPI Support and Browser Zoom&lt;/A&gt;&amp;nbsp;for further information. Use Google Chrome on macOS for best performance. You can also disable retina high precision in code.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Dual GPU machines or Macbook Pro&lt;/H3&gt;
&lt;P&gt;Some Windows PCs and many macOS computers such as Macbook Pro&amp;nbsp;have dual GPUs. A slower integrated GPU which uses less battery power, and a faster dedicated GPU which has better rendering performance.&lt;/P&gt;
&lt;P&gt;When using a browser (Safari or Chrome) on macOS, the operating system by default picks the slower, integrated GPU. Here's how you can check and force the dedicated GPU.&lt;/P&gt;
&lt;H3&gt;Checking which GPU you are using on macOS or Windows&lt;/H3&gt;
&lt;P&gt;In Chrome on macOS you can navigate to chrome://gpu in the address bar to inspect which GPU the browser is currently using.&lt;/P&gt;
&lt;P&gt;Scroll down to GL_RENDERER. On the right you can see the current GPU e.g. 'AMD Radeon Pro 5500M' or 'Intel UHD 630'&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Performance_GPUMacos.png"&gt;&lt;/P&gt;
&lt;H3&gt;Forcing the Faster GPU on macOS&lt;/H3&gt;
&lt;P&gt;If you are using the integrated GPU and want to force the faster GPU on macOS, you can use an application called&amp;nbsp;&lt;A href="https://gfx.io/" target=_blank&gt;gfxCardStatus&lt;/A&gt; to force switching to the faster and more powerful GPU. Restart your browser and do the test again. This will improve WebGL performance!&lt;/P&gt;
&lt;H3&gt;Forcing the Faster GPU on Windows&lt;/H3&gt;
&lt;P&gt;There are applications which will allow you to&amp;nbsp;&lt;A href="https://www.addictivetips.com/windows-tips/force-app-to-use-dedicated-gpu-windows/" target=_blank&gt;switch GPU on Windows&lt;/A&gt; as well. Make sure you restart your browser and do the GL_RENDERER test again.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Some computers such as Macbook Pro and certain Windows Laptops have dual-GPUs. Ensure the more powerful GPU is being utilised by your browser to get the best performance from SciChart.js.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Keep Up to Date!&lt;/H2&gt;
&lt;P&gt;We are always working on improving performance of the overall charting engine.&lt;/P&gt;
&lt;P&gt;Staying up to date helps to ensure you have the latest algorithms and optimisations for fast, efficient charting with SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;We improve performance and optimise SciChart.js all the time. Stay up to date to ensure you have the latest optimisations!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Still Need Help?&lt;/H2&gt;
&lt;P&gt;If after all that, do you still need help?&lt;/P&gt;
&lt;P&gt;If you have a performance question about SciChart.js or need further improvements and you are a paid (licensed) customer, then&amp;nbsp;&lt;A href="https://www.scichart.com/contact-us" target=_blank&gt;contact-us&lt;/A&gt; and our team will do their best to help!&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5a3627c-906d-4bb5-a81d-981df6e3e96b" Status="New Topic" CreatedOn="2021-09-16T17:08:17.8047838Z" ModifiedOn="2023-01-18T15:56:13.6476627Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Native Text Api" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-18T15:56:13.6476627Z">&lt;P&gt;The Native Text api is new in SciChart v3.&amp;nbsp; It uses industry standard font libraries compiled into webassembly to render text directly using webGL, supporting all types of fonts including right to left text, shaped fonts such as Arabic and Chinese.&amp;nbsp; This first version of the api is not complete and we welcome your feedback to shape it going forward.&lt;/P&gt;
&lt;H2&gt;&lt;A id=FontLoading name=FontLoading&gt;&lt;/A&gt;Font Loading&lt;/H2&gt;
&lt;P&gt;Only Arial is included in the webassembly data as standard.&amp;nbsp; Other fonts must either be hosted on your server, or registered if coming from a remote location.&amp;nbsp; In either case, fonts are only downloaded once, and are then cached in the browser (in indexdb).&lt;/P&gt;
&lt;H3&gt;Hosting fonts on your server&lt;/H3&gt;
&lt;P&gt;If you simply specify a font other than arial&amp;nbsp;for native axis labels, dataLabels or NativeTextAnnotation, SciChart will look for a file with that name .ttf on your server.&amp;nbsp; For example, the following annotation will cause SciChart to&amp;nbsp;request /jokerman.ttf&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Hosted font&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const nativeTextHostedFont = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; font: "jokerman",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "This text uses a hosted font",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 18&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;To serve fonts using webpack dev server you need a rule for .ttf files which specifies the correct mimetype, and you need to copy the font file itself to the root of the output location:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;webpack.config.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const path = require("path");&lt;BR&gt;const CopyPlugin = require("copy-webpack-plugin");&lt;BR&gt;const webpack = require("webpack");&lt;/P&gt;
&lt;P&gt;module.exports = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; mode: "development",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; entry: "./src/index.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; module: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rules: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Serve .ttf files&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; test: /\.ttf$/,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; use: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loader: "url-loader",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { mimetype: "application/font-ttf" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; resolve: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; extensions: [".js"]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; output: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; filename: "bundle.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; path: path.resolve(__dirname, "build")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; plugins: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new CopyPlugin({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; patterns: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "src/index.html", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Copy the font to the root of the output location&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "src/jokerman.ttf", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "node_modules/scichart/_wasm/scichart2d.data", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "node_modules/scichart/_wasm/scichart2d.wasm", to: "" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;};&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Registering Remote Fonts&lt;/H3&gt;
&lt;P&gt;Use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/webframe.html#SciChartSurface.html"&gt;sciChartSurface.registerFont&lt;/A&gt; to provide a remote url to load a font file from.&amp;nbsp; Note that this requires a sciChartSurface instance - it is not a static method.&amp;nbsp; The method returns a promise which resolves once the file is downloaded.&amp;nbsp; If you do not await this method, the text will render using Arial until the font is available.&amp;nbsp; There is a timeout (set by SciChartDefaults.nativeFontTimeout, default 2000ms) after which SciChart will fall back to Arial and stop trying to load the custom font.&amp;nbsp; You might need to increase this if you need to load fonts over a slow connection, but in general it is better to await the registerFont method.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;There is currently a limitation in that the font fetching from webassembly will not follow a http 302 redirection, so you need to pass the url to the actual file.&amp;nbsp; For instance, when downloading from github,&amp;nbsp;&lt;A href="https://github.com/google/fonts/raw/main/ofl/notoserif/NotoSerif-Regular.ttf"&gt;https://github.com/google/fonts/raw/main/ofl/notoserif/NotoSerif-Regular.ttf&lt;/A&gt;&amp;nbsp;redirects to&amp;nbsp;&lt;A href="https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf"&gt;https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf&lt;/A&gt; so you need to use the githubusercontent.com link.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Registering a font&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;await sciChartSurface.registerFont(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&lt;A href="https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf"&gt;https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf&lt;/A&gt;"&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;const nativeTextRemote = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "This text uses a font from the internet",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Native Text API&lt;/H2&gt;
&lt;P&gt;The following sections describe some of the native text api methods and concepts which you may need if you want to develop custom annotations, dataLabels or series using native text.&amp;nbsp; In summary, using the native text api goes like this:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Call renderContext.getFont to get a font instance.&amp;nbsp; Fonts are cached and shared within webassembly, so there is no need to cache them in JS. 
&lt;LI&gt;If necessary call getTextBounds and pass it to font.CalculateStringBounds to get information on the size of your text so you can adjust drawing coordinates. 
&lt;LI&gt;Call font.DrawString, or font.DrawStringAdvanced &lt;/LI&gt;&lt;/OL&gt;
&lt;H3&gt;getFont&lt;/H3&gt;
&lt;P&gt;getFont is a method on webGLRenderContext2D which is passed to the drawing methods (eg to&amp;nbsp;RenderContextAnnotationBase.drawWithContext) as renderContext. If you plan to use rotation or scaling,&amp;nbsp;set the&amp;nbsp;advanced parameter true.&amp;nbsp; Requesting an advanced font actually means&amp;nbsp;SciChart will generate a Signed Distance Field font which gives much better rendering for rotated and scaled text, and in the future&amp;nbsp;will allow for more advanced text effects.&amp;nbsp; However, if you don't need this, normal fonts use less memory and are slightly faster to first frame.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;There is no need to call font.Begin() - this is done by getFont.&amp;nbsp; Set the drawEarly parameter&amp;nbsp;true&amp;nbsp;if you are planning to call font.End() early so other elements&amp;nbsp;can draw over the text.&amp;nbsp; This is not stricly required, but it causes SciChart to give you a separate font instance so you don't mess with other text that might be drawing with the same font.&lt;/P&gt;
&lt;P&gt;Do not call nativeContext.AquireFont directly.&amp;nbsp; There is no need to delete the font to free memory.&lt;/P&gt;
&lt;H3&gt;TextBounds&lt;/H3&gt;
&lt;P&gt;Call getTextBounds from scichart/Charting/Visuals/Helpers/NativeObject, to get a TSRTextBounds instance.&amp;nbsp; Each call to this method returns the same cached instance.&amp;nbsp; Do not call delete on it.&lt;/P&gt;
&lt;P&gt;Call&amp;nbsp;font.CalculateStringBounds which populates the TSRTextBounds with the size of your desired text.&amp;nbsp; The image below shows how the properties on textBounds relate to the text.&amp;nbsp; Text is anchored at the left on the baseline.&amp;nbsp; The origin is top, left (for consistency with canvas coordinates) so to have the text anchored at the top, you need to add&amp;nbsp;&amp;nbsp;textBounds.GetLineBounds(0).m_fHeight to your y coordinate.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/textBounds.png"&gt;&lt;/P&gt;
&lt;P&gt;For multi line text, m_fHeight is the height of the entire text block, but text is still anchored at the baseline of the first line.&lt;/P&gt;
&lt;H3&gt;Drawing Text&lt;/H3&gt;
&lt;P&gt;Call font.DrawString, or font.DrawStringAdvanced.&amp;nbsp; DrawString is just text, colour, x, y whereas DrawStringAdvanced also allows you&amp;nbsp;to specify rotation, multiline alignment and spacing.&amp;nbsp;&amp;nbsp;The only difference is the options available.&amp;nbsp; You do not have to have created the font with advanced: true to use DrawStringAdvanced if you are just doing multiline, but for rotated text you will get much nicer rendering with advanced: true.&lt;/P&gt;
&lt;P&gt;Note that text is not actually drawn immediately.&amp;nbsp; This happens when font.End() is called.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;SciChart automatically calls font.End on all fonts at the end of the render cycle.&amp;nbsp; If you want the native text to draw earlier so other chart elements can draw over it, you can call font.End yourself, but for optimum performance you want to do this as little as possible.&lt;/P&gt;
&lt;H3&gt;Rotation&lt;/H3&gt;
&lt;P&gt;To get a rotation vector use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Rotation vector&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { getVector4 } from "scichart/Charting/Visuals/Helpers/NativeObject"&lt;/P&gt;
&lt;P&gt;const rotationVector = getVector4(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; webAssemblyContext2D,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotationCenterX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotationCenterY,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotationInRadians,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Like textBounds this returns a single shared instance so you do not need to delete it.&lt;/P&gt;
&lt;H3&gt;Scaling&lt;/H3&gt;
&lt;P&gt;You can adjust the size of text by calling font.SetScale, which will multiply the font size by the value&amp;nbsp;you set.&amp;nbsp; This only applies to subsequent&amp;nbsp;DrawString/DrawStringAdvanced calls.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4c3d883c-f851-4267-971a-51802407d9d6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3616f94c-1224-4896-8306-d6a17af11082" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="709922a5-430d-46bb-be27-e7381efd4b86" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f3da61af-0fe5-4804-be50-c76e30f056d2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2de183e3-ba91-47a6-bb8c-68719a03a4ef" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4658035b-e6f2-4a3a-8203-958042b96f56" Status="New Topic" CreatedOn="2023-07-19T11:59:42.6049307Z" ModifiedOn="2023-09-12T09:55:16.045842Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MemoryLeakDebugging" BuildFlags="">
                <Title m="2023-07-19T12:01:10.6491675Z">Memory Leak Debugging</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-09-12T09:55:16.045842Z">&lt;P&gt;In SciChart.js v3.2 we've introduced a set of Memory Leak debugging tools. Read this guide to find out how to enable Memory Leak Debugging in your app in Dev mode.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Read the setion in&amp;nbsp;&lt;A href="fe846da4-4ffb-4833-bf13-e688f8f82497"&gt;Memory Best Practices - Deletable Entities&lt;/A&gt; for background info on which types need to be explictly deleted in SciChart.js and how failure to do this can cause a memory leak.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Enabling Memory Debugging tools&lt;/H2&gt;
&lt;P&gt;Enabling memory leak debugging is possible by setting the static property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/memoryusagehelper.html#ismemoryusagedebugenabled"&gt;MemoryUsageHelper.isMemoryUsageDebugEnabled&lt;/A&gt; = true.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { MemoryUsageHelper } from "scichart";&lt;BR&gt;&lt;BR&gt;MemoryUsageHelper.isMemoryUsageDebugEnabled = true;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;After enabling memory usage helper you should see a message in the console output like this:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/MemoryDebugging_Warning.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note this will only work in development mode: the environment variable process.env.NODE_ENV must not equal "prod" or "production"&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Tracking Undeleted objects&lt;/H2&gt;
&lt;P&gt;Once&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/memoryusagehelper.html"&gt;MemoryUsageHelper&lt;/A&gt; is enabled, the memory usage debugging tool has two features:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;It adds helpful warnings to the JS Console when executing actions which may result in a potential memory leak or undesirable behaviour. 
&lt;LI&gt;It wraps objects implementing&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html"&gt;IDeletable&lt;/A&gt; interface and native entites created in WebAssembly into a proxy - and will keep records of them in an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/objectregistry.html"&gt;ObjectRegistry&lt;/A&gt; instance -&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/memoryusagehelper.html#objectregistry"&gt;MemoryUsageHelper.objectRegistry&lt;/A&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Examining the ObjectRegistry State&lt;/H3&gt;
&lt;P&gt;The registry state can be examined at any time by calling&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { MemoryUsageHelper } from "scichart";&lt;BR&gt;&lt;BR&gt;// Log out current objectRegistry state&lt;BR&gt;MemoryUsageHelper.objectRegistry.log();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will output several collections and their contents to the JS console. From the output we can define a lifecycle state of an object and it's type.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/MemoryDebugging_LogOutput.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;undeletedObjectsMap&lt;/STRONG&gt; - objects that were created but .delete() was not called. 
&lt;LI&gt;&lt;STRONG&gt;uncollectedObjectsMap&lt;/STRONG&gt; = objects that are not yet garbage collected by the JavaScript Garbage Collector 
&lt;LI&gt;&lt;STRONG&gt;collectedNotDeleted&lt;/STRONG&gt; - objects that have been garbage collected but .delete() was omitted 
&lt;LI&gt;&lt;STRONG&gt;deletedNotCollected&lt;/STRONG&gt; - objects that had .delete() called by were not collected by the JavaScript Garbage Collector 
&lt;LI&gt;&lt;STRONG&gt;weakMap&lt;/STRONG&gt; - another collection that could be used to see if an object was GC'd. Additionally tracks referenes to proxies of deleted objects. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;What to do if you find a Leak&lt;/H2&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;deletedNotCollected&lt;/STRONG&gt;: your application code called &lt;STRONG&gt;.delete()&lt;/STRONG&gt; on an object but there is still a reference to it somewhere in JavaScript&amp;nbsp;preventing it from being GC'd.&amp;nbsp;Use the Chrome memory tools to identify the GC roots to determine the cause of the leak (&lt;A href="https://developer.chrome.com/docs/devtools/memory-problems/" target=_blank&gt;find out how&lt;/A&gt;). 
&lt;LI&gt;&lt;STRONG&gt;collectedNotDeleted&lt;/STRONG&gt;: your application code GC'd the object but you forgot to call &lt;STRONG&gt;.delete()&lt;/STRONG&gt;. This can cause a WebAssembly memory leak. Ensure this object has &lt;STRONG&gt;.delete()&lt;/STRONG&gt; called before it falls out of scope. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Tracking Arbitrary objects&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/memoryusagehelper.html"&gt;MemoryUsageHelper&lt;/A&gt;&lt;/STRONG&gt; automatically tracks all objects created within SciChart itself. If you want to use our tools to track abitrary objects in your application. you can use the following functions:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Register an arbitrary object&lt;BR&gt;MemoryUsageHelper.register(yourObject, "identifier");&lt;BR&gt;&lt;BR&gt;// Unregister an arbitrary object&lt;BR&gt;MemoryUsageHelper.unregister("identifier");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="dddc380a-e9ae-4071-b606-77535f3a8e4a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="31c1fa0b-34ae-472f-b888-2de129265d50" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="57227e1f-397a-4a7c-b29b-d1ae6bfb9b8c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fe846da4-4ffb-4833-bf13-e688f8f82497" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="fe846da4-4ffb-4833-bf13-e688f8f82497" Status="New Topic" CreatedOn="2023-07-19T12:43:37.0872429Z" ModifiedOn="2023-12-22T14:26:15.308726Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MemoryBestPractices" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T14:25:56.0268102Z">&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Related to&amp;nbsp;&lt;A href="31c1fa0b-34ae-472f-b888-2de129265d50"&gt;Performance Tips&lt;/A&gt;, this article covers Memory Best Practices in SciChart.js.&lt;/P&gt;
&lt;H2&gt;Wasm Memory vs. JavaScript Memory Model&lt;/H2&gt;
&lt;P&gt;SciChart.js uses WebAssembly, also known as Wasm, to achieve high performance 2D/3D chart rendering in the browser. Using Wasm, we've compiled our in-house C++ codebase, tested in enterprise and embedded environments for many years on Windows and mobile into a JavaScript friendly library.&lt;/P&gt;
&lt;P&gt;A key difference between Wasm and JavaScript is that JS has a garbage collector and Wasm does not. Any type created in WebAssembly must be expliclty deleted to reclaim memory. Below we have some guidelines on how to do that, and what to do to detect problems.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Failure to call .delete() on a WebAssembly type can result in a memory leak. But don't worry, we have&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;memory debugging tools&lt;/A&gt; to help track that.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Deletable Entities in SciChart.js&lt;/H3&gt;
&lt;P&gt;A number of types in SciChart.js implement the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html"&gt;IDeletable&lt;/A&gt; interface. This has a single function:&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;.delete()&lt;/A&gt;&lt;/STRONG&gt; which deletes underlying WebAssembly memory.&lt;/P&gt;
&lt;P&gt;The following types implement IDeletable in SciChart.js:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;SciChart3DSurface&lt;/STRONG&gt; 
&lt;LI&gt;Axis types e.g &lt;STRONG&gt;NumericAxis&lt;/STRONG&gt;, &lt;STRONG&gt;CategoryAxis&lt;/STRONG&gt; 
&lt;LI&gt;Series types e.g. &lt;STRONG&gt;FastLineRenderableSeries&lt;/STRONG&gt; 
&lt;LI&gt;DataSeries types e.g. &lt;STRONG&gt;XyDataSeries&lt;/STRONG&gt; 
&lt;LI&gt;Annotations e.g. &lt;STRONG&gt;LineAnnotation&lt;/STRONG&gt; 
&lt;LI&gt;Miscellaneous types e.g. &lt;STRONG&gt;EllipsePointMarker&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;When calling delete on a parent, all child items are deleted so to properly clean-up an entire chart, you must only call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#delete"&gt;sciChartSurface.delete()&lt;/A&gt; once. The best place to do this is component unmount in React, Vue or onDestroy in Angular.&lt;/P&gt;
&lt;H2&gt;Best Practices to call .delete()&lt;/H2&gt;
&lt;H3&gt;Deleting Charts on Component Unmount&lt;/H3&gt;
&lt;P&gt;Deleting a ScIChartSurface by calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#delete"&gt;sciChartSurface.delete()&lt;/A&gt; once on component unmount will cascade down to all child objects such as DataSeries, Annotations and RenderableSeries.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;React, Vue and Angular all have component unmount or onDestroy callbacks. In our React, Vue and Angular boilerplates at&amp;nbsp;&lt;A href="https://www.scichart.com/getting-started/scichart-javascript/" target=_blank&gt;scichart.com/getting-started-scichart-js&lt;/A&gt; we show you how to do this. We've also created a &lt;A href="a5d48d77-152d-4142-b184-811540804fde"&gt;Tutorial for Creating a Reusable React Component&lt;/A&gt; showing you how to correctly delete the chart on unmount.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Deleting DataSeries memory&lt;/H3&gt;
&lt;P&gt;If&amp;nbsp;you remove or re-assign a DataSeries from a chart (use case: adding or removing chart series), don't forget to call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;series.delete()&lt;/A&gt;. This frees WebAssembly native memory and releases it back to the browser.&lt;/P&gt;
&lt;P&gt;For some examples of how to do this, see the article&amp;nbsp;&lt;A href="13f5705c-af26-4667-999f-6535e4e07b6c"&gt;Deleting DataSeries Memory&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Deleting RendeableSeries, Annotations or Modifiers&lt;/H3&gt;
&lt;P&gt;RenderableSeries, Annotations and Axis&amp;nbsp;must also be deleted in the case where you remove, or reassign series on a chart. Some code examples of how to do this can also&amp;nbsp;be seen in the page&amp;nbsp;&lt;A href="13f5705c-af26-4667-999f-6535e4e07b6c"&gt;Deleting DataSeries Memory&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Detecting Leaks by forgetting to call .delete()&lt;/H3&gt;
&lt;P&gt;Suspect a memory leak? If you forget to call .delete(), don't worry! We have a set of tools to detect memory leaks and inform you of which objects need to be properly cleaned up. See the article&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;Memory Leak Debugging&lt;/A&gt; for more info.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Other Memory Optimisations / Footnotes&lt;/H2&gt;
&lt;H3&gt;Memory Differences between create() and createSingle()&lt;/H3&gt;
&lt;P&gt;There are two factory functions to create a chart:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle"&gt;SciChartSurface.createSingle()&lt;/A&gt;.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;When&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt; is called, a single shared instance of our WebGL graphics engine is instantiated with a single one-time memory cost. 
&lt;LI&gt;When&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle"&gt;SciChartSurface.createSingle()&lt;/A&gt; is called, one instance of our WebGL engine is instantiated per-chart, which uses additional RAM per chart. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Therefore,&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Charts created with &lt;STRONG&gt;create()&lt;/STRONG&gt; have lower memory usage but marginally slower drawing performance. 
&lt;LI&gt;Charts created with &lt;STRONG&gt;createSingle()&lt;/STRONG&gt; have higher memory usage but faster drawing performance. They are also subject to WebGL context limits&amp;nbsp;&lt;A href="31c1fa0b-34ae-472f-b888-2de129265d50"&gt;specified here&lt;/A&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Completely Releasing Memory back to the OS&lt;/H3&gt;
&lt;P&gt;When deleting charts created with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle"&gt;SciChartSurface.createSingle()&lt;/A&gt;, and when the last reference to sciChartSurface falls out of scope, the JavaScript Garbage Collector releases all memory held by WebAssembly and JavaScript for this chart back to the host OS.&lt;/P&gt;
&lt;P&gt;When deleting charts created with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt;, and when the last reference to &lt;U&gt;all SciChartSurfaces&lt;/U&gt; fall out of scope, the JavaScript Garbage Collector will release all JS/Wasm memory only if the following flag is set.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Set static properties to define memory cleanup behaviour after the last chart is garbage collected&lt;BR&gt;&lt;BR&gt;SciChartSurface.autoDisposeWasmContext = true; // default false&lt;BR&gt;SciChartSurface.wasmContextDisposeTimeout = 100; // default 0 mlliseconds&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This default behaviour is there to avoid unintential garbage collection and re-instanitation of our WebGL engine on switching page in a Single Page Application. Setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#autodisposewasmcontext"&gt;SciChartSurface.autoDisposeWasmContext&lt;/A&gt; to true and a suitable non-zero timeout gives SPA apps change to switch page before automatically cleaning up WebAssembly memory.&lt;/P&gt;
&lt;H4&gt;Summary of Options to Force Wasm Context disposal&lt;/H4&gt;
&lt;P&gt;The Wasm engine can be disposed in several ways to release memory back to the host OS.&lt;/P&gt;
&lt;UL md-src-pos="73..592"&gt;
&lt;LI md-src-pos="73..216"&gt;for charts instantiated with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle"&gt;SciChartSurface.createSingle()&lt;/A&gt; wasmContext is destroyed automatically upon surface deletion and nullifying all of the references to the SciChartSurface/wasmContext. 
&lt;LI md-src-pos="217..592"&gt;for charts instantiated with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt; wasmContext is not destroyed automatically by default; to destroy it 
&lt;UL&gt;
&lt;LI md-src-pos="217..592"&gt;call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#disposesharedwasmcontext"&gt;SciChartSurface.disposeSharedWasmContext()&lt;/A&gt; 
&lt;LI md-src-pos="217..592"&gt;or enable auto disposal after a specified timeout using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#autodisposewasmcontext"&gt;SciChartSurface.autoDisposeWasmContext&lt;/A&gt;&amp;nbsp;flag and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#wasmcontextdisposetimeout"&gt;SciChartSurface.wasmContextDisposeTimeout&lt;/A&gt;&amp;nbsp;property. &lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Setting WebGL Buffer Sizes&lt;/H3&gt;
&lt;P&gt;We're into esoteric memory improvements here, but this small optimisation is worth mentioning.&lt;/P&gt;
&lt;P&gt;If you are operating in an extremely memory constrained environment and every megabyte counts, you can trade drawing performance for lower memory by adjusting maximum WebGL buffer size. To do this, set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartdefaults.html#wasmbuffersizeskb"&gt;SciChartDefaults.wasmBufferSizesKb&lt;/A&gt; once in your app before showing a chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Specifies the maximum buffer size to use PER PRIMITIVE TYPE&lt;BR&gt;// If all chart types are shown in application, theoretical maximum = 8 x wasmBufferSizesKb&lt;BR&gt;SciChartDefaults.wasmBufferSizesKb = 1024;&lt;BR&gt;&lt;BR&gt;// minimum = 1024 kb&lt;BR&gt;// default = 8192 kb&lt;BR&gt;// maximum = 32,768 kb&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Debugging Memory Leaks when using SciChart.js&lt;/H3&gt;
&lt;P&gt;We've created a set of tools and a guide on how to debug and eliminate memory leaks in your application when using SciChart.js. Find out more at&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;Memory Leak Debugging&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Best Practies when using SciChart.js in React Components&lt;/H3&gt;
&lt;P&gt;Additional guidelines on the best practices including memory cleanup when using SciChart.js in React Components can be found at the page&amp;nbsp;&lt;A href="a5d48d77-152d-4142-b184-811540804fde"&gt;Tutorial - Creating a Reusable React Component&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="6f709290-a0f5-4fd7-a944-9180795038df" AutoIndex="false">
            <Caption m="2016-10-21T10:20:42.4974424Z">Annotations API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="06b6036b-fbc1-41e4-905a-52ec73295788" Status="New Topic" CreatedOn="2016-10-21T10:34:26.4092461Z" ModifiedOn="2023-01-20T13:57:29.7740806Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Annotations API Overview" BuildFlags="">
                <Title m="2020-09-24T15:42:14.8123688Z">The Annotations API Overview</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-20T13:57:29.7740806Z">&lt;P&gt;SciChart.js features a rich Annotations API, that allows you to place&amp;nbsp;annotations (boxes, markers, text labels and custom shapes) over a chart:&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-annotations&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Annotations can provide &lt;STRONG&gt;interactive&lt;/STRONG&gt; event/news bullets, horizontal/vertical lines (thresholds), text/callouts as well as measurements such as Peak-to-peak or cycle duration. Annotations can be edited by click &amp;amp; drag,&amp;nbsp;added by touching a screen, or, simply created programmatically. SciChart provides a number of built-in annotations, but you can also create your own. To find out more about annotations features, please&amp;nbsp;see&amp;nbsp;the&amp;nbsp;Common Annotations Features article.&lt;/P&gt;
&lt;H2&gt;Annotation Types&lt;/H2&gt;
&lt;P&gt;The following annotation types are&amp;nbsp;available out of the box in SciChart:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;STRONG&gt;Type&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=481&gt;&lt;A href="583becc5-a46d-4fdf-9b69-f6b2f973deb8"&gt;BoxAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Draws&amp;nbsp;a &lt;STRONG&gt;rectangle&lt;/STRONG&gt; at&amp;nbsp;specific X1, X2, Y1, Y2&amp;nbsp;coordinates.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=19 width=481&gt;&lt;A href="963d03d5-c2f0-4143-9817-8b37186bfe69"&gt;LineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=19&gt;Draws&amp;nbsp;a &lt;STRONG&gt;line&lt;/STRONG&gt;&amp;nbsp;between X1, Y1 and X2, Y2 positions.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="46e0aece-c112-40af-a0e8-46c69045fd50"&gt;HorizontalLineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws a horizontal line at a given y position, with various labelling options&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="1150712d-1531-47f8-a9f7-c8fa6662edbe"&gt;VerticalLineAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws a&amp;nbsp;vertical line at a given&amp;nbsp;x position, with various labelling options&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="72e4491f-8140-49cb-8bd3-85b381967f87"&gt;TextAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Allows to place a piece of &lt;STRONG&gt;text&lt;/STRONG&gt; at a specific location on a chart.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="f3da61af-0fe5-4804-be50-c76e30f056d2"&gt;NativeTextAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Draws text natively rather than using svg, supporting rotation, multiline, wordwrap and scaling&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD width=481&gt;&lt;A href="24a50b9d-0b8d-4124-b5e0-db75517608bc"&gt;CustomAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Allows to place any&amp;nbsp;SVG Content at a specific location on a chart.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="a430d22c-a6c5-4a0c-99fa-d94e200cfd60"&gt;CustomAxisMarkerAnnotation&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Uses an image instead of text for an axis marker&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To learn more about any annotation type, please refer to the corresponding article.&lt;/P&gt;
&lt;H2&gt;Adding an Annotation to a Chart&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html"&gt;SciChartSurface&lt;/A&gt;&amp;nbsp;stores all&amp;nbsp;its annotations in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#annotations"&gt;SciChartSurface.annotations&lt;/A&gt; collection. The following code can be used to add an annotation to a chart:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {BoxAnnotation} from "../../../../../../../src/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import {CustomAnnotation} from "../../../../../../../src/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import {LineAnnotation} from "../../../../../../../src/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import {TextAnnotation} from "../../../../../../../src/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import {NumericAxis} from "../../../../../../../src/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartSurface} from "../../../../../../../src/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumberRange} from "../../../../../../../src/Core/NumberRange";&lt;BR&gt;import {EHorizontalAnchorPoint, EVerticalAnchorPoint} from "../../../../../../../src/types/AnchorPoint";&lt;BR&gt;import {ECoordinateMode} from "../../../../../../../src/Charting/Visuals/Annotations/AnnotationBase";&lt;BR&gt;&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 2.0, x2: 8.0, y1: 3.0, y2: 7.0 }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FF3333",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(255,50,50,0.3)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 8.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7.0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#33FF33",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(50, 255, 50, 0.3)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 9.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 8.0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.Pixel,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textColor: "yellow",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 26,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Times New Roman",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "TEXT ANNOTATION",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Individual Annotation features are discussed in greater detail in the following pages:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The&amp;nbsp;&lt;A href="583becc5-a46d-4fdf-9b69-f6b2f973deb8"&gt;BoxAnnotation&lt;/A&gt; Type 
&lt;LI&gt;The&amp;nbsp;&lt;A href="963d03d5-c2f0-4143-9817-8b37186bfe69"&gt;LineAnnotation&lt;/A&gt; Type 
&lt;LI&gt;The&amp;nbsp;&lt;A href="72e4491f-8140-49cb-8bd3-85b381967f87"&gt;TextAnnotation&lt;/A&gt; Type 
&lt;LI&gt;The&amp;nbsp;&lt;A href="24a50b9d-0b8d-4124-b5e0-db75517608bc"&gt;CustomAnnotation&lt;/A&gt; Type &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Common Annotation Properties&lt;/H2&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;All annotations in SciChart.js are derived from the&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html"&gt;AnnotationBase&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;B style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 700; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;type. Individual Annotations have additional properties however the following&amp;nbsp;common properties of the&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html"&gt;AnnotationBase&lt;/A&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;class listed below can be used to control all annotation types.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;AnnotationBase Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#annotationlayer"&gt;annotationLayer&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Determines which canvas the annotation should be placed on.&lt;/P&gt;
&lt;P&gt;The default is&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eannotationlayer.html"&gt;EAnnotationLayer.AboveChart&lt;/A&gt;, where annotations are displayed above the chart series.&lt;/P&gt;
&lt;P&gt;Setting this property to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eannotationlayer.html"&gt;EAnnotationLayer.BelowChart&lt;/A&gt; places an annotation below series and gridlines, and is useful for watermarks.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;Determines how coordinates x1,y2,x2,y2 are used when placing the annotation. X/YCoordinateMode should be used to place watermarks, or annotations anchored to the top or bottom of the viewport etc…&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&amp;nbsp;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;The default is&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/ecoordinatemode.html"&gt;ECoordinateMode.DataValue&lt;/A&gt;&lt;/SPAN&gt;. In this mode, x1,y2,x2,y2 correspond to Data-values and the annotion position will update as you zoom and pan the chart.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/ecoordinatemode.html"&gt;ECoordinateMode.Relative&lt;/A&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;means that coordinates are relative to the viewport. The annotation does not update position as you zoom and pan. E.g. x1=0.0 and y1=0.0 means the annotation will be placed in the top-left corner of the Viewport and x1=1.0, y1=1.0 corresponds to the bottom-left corner of the viewport always (regardless of Zoom or Pan).&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/ecoordinatemode.html"&gt;ECoordinateMode.Pixel&lt;/A&gt;&lt;/SPAN&gt; means that coordinates are pixel values relative to the top-left of the viewport. These are also useful to dock annotations to a specific&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/svgannotationbase.html#horizontalanchorpoint"&gt;horizontalAnchorPoint&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/svgannotationbase.html#verticalanchorpointproperty"&gt;verticalAnchorPoint&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The horizontalAnchorPoint, verticalAnchorPoint properties are used to adjust the alignment of certain annotations.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_AnchorPoints.png"&gt;&lt;/P&gt;
&lt;P&gt;Above: HorizontalAnchorPoint, VerticalAnchorPoint when applied to a TextAnnotation&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ishidden"&gt;isHidden&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;isHidden can be set to show or hide an annotation.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#x1"&gt;x1&lt;/A&gt;,&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#x2"&gt;x2&lt;/A&gt;,&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#y1"&gt;y1&lt;/A&gt;,&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#y2"&gt;y2&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;x1,x2,y1,y2 properties are set to define the position of the annotation on the parent chart.&lt;/P&gt;
&lt;P&gt;Note that annotation position is also defined by the xCoordinateMode, yCoordinateMode properties, which allow you to place annotations using data-values, relative to the viewport or absolute pixel coordinates.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xaxisid"&gt;xAxisId&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#yaxisid"&gt;yAxisId&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;In a multiple-axis scenario, AnnotationBase.xAxisId or yAxisId property is used to bind the annotation to a specific X or Y-Axis.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;/P&gt;
&lt;DIV class="i-box i-box-note" style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); PADDING-BOTTOM: 16px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 16px; PADDING-LEFT: 16px; ORPHANS: 2; WIDOWS: 2; MARGIN: 8px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 16px; BACKGROUND-COLOR: rgb(245,245,245); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;P class=MsoNormal style="BOX-SIZING: border-box; MARGIN: 0px 0px 0pt; LINE-HEIGHT: normal"&gt;&lt;B style="BOX-SIZING: border-box; FONT-WEIGHT: 700"&gt;&lt;I style="BOX-SIZING: border-box"&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;NOTE:&lt;/SPAN&gt;&lt;/I&gt;&lt;/B&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;I style="BOX-SIZING: border-box"&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;This value must be supplied if you have axis with non-default Axis Ids.&lt;/SPAN&gt;&lt;/I&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#iseditable"&gt;isEditable&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;If true, this annotation can be selected and dragged/resized.&amp;nbsp; See&amp;nbsp;&lt;A href="135e80f7-4f28-45c9-a7a2-4ae99818bbef"&gt;Editable Annotations&lt;/A&gt; for more details&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#clicked"&gt;clicked&lt;/A&gt;&amp;nbsp;/&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#onclick"&gt;onClick&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;clicked is an event on the annotation which you can subscribe to to be notified when the annotation is clicked.&amp;nbsp; This is fired for both editable and non-editable annotations.&amp;nbsp; You can pass a callback for this using the onClick property of the IAnnotationBaseOptions.&amp;nbsp; The event arguments contain a point which gives the coordinates of where on the annotation it was clicked, relative to the top left corner.&lt;/P&gt;
&lt;DIV class="i-box i-box-note" style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); PADDING-BOTTOM: 16px; FONT-STYLE: normal; TEXT-ALIGN: left; PADDING-TOP: 16px; PADDING-LEFT: 16px; ORPHANS: 2; WIDOWS: 2; MARGIN: 8px 0px; LETTER-SPACING: normal; PADDING-RIGHT: 16px; BACKGROUND-COLOR: rgb(245,245,245); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;P class=MsoNormal style="BOX-SIZING: border-box; MARGIN: 0px 0px 0pt; LINE-HEIGHT: normal"&gt;&lt;B style="BOX-SIZING: border-box; FONT-WEIGHT: 700"&gt;&lt;I style="BOX-SIZING: border-box"&gt;&lt;SPAN lang=EN-GB style="BOX-SIZING: border-box" xml:lang="EN-GB"&gt;NOTE:&lt;/SPAN&gt;&lt;/I&gt;&lt;/B&gt;&lt;SPAN&gt;&amp;nbsp; If and editable&amp;nbsp;annotation is already selected, clicking on it will fire dragStarted, but not clicked&lt;/SPAN&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="210540cc-5e46-4f64-ab54-3b211027664f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="583becc5-a46d-4fdf-9b69-f6b2f973deb8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c3cbd76d-1db8-4fa2-ba4f-a2f2243b30f3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="963d03d5-c2f0-4143-9817-8b37186bfe69" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="cb7f6ea5-f6b9-4721-8c4f-b9608d9efa9d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="24a50b9d-0b8d-4124-b5e0-db75517608bc" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f1e5b335-80a8-49aa-a447-d46fac4cefed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="72e4491f-8140-49cb-8bd3-85b381967f87" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="463874a3-04b9-430b-be53-63863b12a39b" Status="New Topic" CreatedOn="2016-10-21T13:19:00.2595246Z" ModifiedOn="2021-10-14T09:56:14.0432402Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AxisMarkerAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:14.1901827Z">AxisMarkerAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-14T09:56:14.0432402Z">&lt;P&gt;The&amp;nbsp;AxisMarkerAnnotation allows you to add a label on to the Axis at a specific X or Y value.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_AxisMarkerAnnotation.png"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring a AxisMarkerAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare an AxisMarkerAnnotation add it&amp;nbsp;to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import {EAnnotationLayer} from "scichart/Charting/Visuals/Annotations/IAnnotation";&lt;BR&gt;import {ELabelPlacement} from "scichart/types/LabelPlacement";&lt;BR&gt;import {AxisMarkerAnnotation} from "scichart/Charting/Visuals/Annotations/AxisMarkerAnnotation";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new AxisMarkerAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5.2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 12,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontStyle: "Bold",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in the following output:&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_AxisMarkerAnnotation_SimpleExample.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Styling the AxisMarkerAnnotation&lt;/H2&gt;
&lt;P&gt;The following properties can be set to style the AxisMarkerAnnotation:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axismarkerannotation.html#backgroundColor"&gt;backgroundColor&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The box fill color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axismarkerannotation.html#color"&gt;color&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The text-color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axismarkerannotation.html#fontfamily"&gt;fontFamily&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=24&gt;The font family for the axis label text&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axismarkerannotation.html#fontSize"&gt;fontSize&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font size for the axis label text&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axismarkerannotation.html#fontStyle"&gt;fontStyle&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font style, e.g. Bold or Italic for the axis label text&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="77df5af4-d080-4e3d-83bc-f4f11f1748d1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="583becc5-a46d-4fdf-9b69-f6b2f973deb8" Status="New Topic" CreatedOn="2016-10-21T13:19:27.8616755Z" ModifiedOn="2020-10-13T12:48:32.4100244Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="BoxAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:34.9265961Z">BoxAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-10-13T12:48:32.4100244Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px"&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;IMG border=0 alt="" src="images/Annotations_BoxAnnotation.PNG"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/boxannotation.html"&gt;BoxAnnotation type&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;draws a rectangle at x1,y1,x2,y2 where coordinates are data-values. The BoxAnnotation supports&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/boxannotation.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/boxannotation.html#stroke"&gt;stroke&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; and fill properties.&lt;/P&gt;
&lt;P&gt;Coordinates may be relative or absolute according to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Declaring a BoxAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a number of BoxAnnotations and add them to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { BoxAnnotation } from "scichart/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({ fontSize: 12, text: "Draw Boxes", x1: 3.3, y1: 6.3 }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({ fill: "#279B2755", stroke: "#279B27", strokeThickness: 1, x1: 3.5, x2: 5, y1: 4, y2: 5 }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#FF191955",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FF1919",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 5.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 5.5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({ fill: "#1964FF55", stroke: "#1964FF", strokeThickness: 1, x1: 4.5, x2: 6, y1: 5, y2: 6 }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Aligning a BoxAnnotation with x/yCoordinateModes&lt;/H2&gt;
&lt;P&gt;To position a BoxAnnotation so that it stretches horizontally or vertically across the viewport, use x/yCoordinateMode. e.g. the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({text: "Horizontally Stretched Box uses xCoordinateMode.Relative", x1: 0.1, y1: 2.5}),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#279B2755", strokeThickness: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({text: "Vertcally Stretched Box uses yCoordinateMode.Relative", x1: 2.1, y1: 9.2}),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#FF191955",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 1.0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_BoxAnnotation_CoordinateMode.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0e683fda-7ae5-43ea-83d9-0d03133651aa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="46e0aece-c112-40af-a0e8-46c69045fd50" Status="New Topic" CreatedOn="2016-10-21T13:19:42.7029317Z" ModifiedOn="2021-04-01T16:58:30.9661977Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="HorizontalLineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:19:54.5452128Z">HorizontalLineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-04-01T16:58:30.9661977Z">&lt;P&gt;The&amp;nbsp;HorizontalLineAnnotation allows to&amp;nbsp;draw a &lt;STRONG&gt;horizontal line&lt;/STRONG&gt;&amp;nbsp;between X1, X2 coordinates at Y1.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_HorizontalLineAnnotation.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Declaring a HorizontalLineAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a&amp;nbsp;HorizontalLineAnnotation and add it to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { HorizontalLineAnnotation } from "scichart/Charting/Visuals/Annotations/HorizontalLineAnnotation";&lt;BR&gt;&lt;BR&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Horizontal line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new HorizontalLineAnnotation ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.Axis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_HorizontalLineAnnotation_SimpleExample.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Changing Label Position or Label Value&lt;/H2&gt;
&lt;P&gt;The label may be placed on the line, or on the axis. Placemement of the label is controlled by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/horizontallineannotation.html#labelplacement"&gt;HorizontalLineAnnotation.labelPlacement&lt;/A&gt; property, which expects an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elabelplacement.html"&gt;ELabelPlacement&lt;/A&gt; enum.&lt;/P&gt;
&lt;P&gt;Valid settings are &lt;STRONG&gt;Axis&lt;/STRONG&gt;, &lt;STRONG&gt;Bottom&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;BottomLeft&lt;/STRONG&gt;, &lt;STRONG&gt;BottomRight&lt;/STRONG&gt;, &lt;STRONG&gt;Top&lt;/STRONG&gt;, &lt;STRONG&gt;TopLeft&lt;/STRONG&gt;, &lt;STRONG&gt;TopRight&lt;/STRONG&gt;, &lt;STRONG&gt;Left&lt;/STRONG&gt; and &lt;STRONG&gt;Right&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;For example, &lt;STRONG&gt;setting labelPlacement to ELabelPlacement.TopLeft&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { HorizontalLineAnnotation } from "scichart/Charting/Visuals/Annotations/HorizontalLineAnnotation";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Horizontal line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new HorizontalLineAnnotation ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.TopLeft,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisFontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in the label being placed on the top left of the line.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_HorizontalLineAnnotation_LabelPlacement.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tip!&amp;nbsp;Labels on HorizontalLineAnnotations may be placed on the &lt;STRONG&gt;Axis&lt;/STRONG&gt;, or at &lt;STRONG&gt;Bottom&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;BottomLeft&lt;/STRONG&gt;, &lt;STRONG&gt;BottomRight&lt;/STRONG&gt;, &lt;STRONG&gt;Top&lt;/STRONG&gt;, &lt;STRONG&gt;TopLeft&lt;/STRONG&gt;, &lt;STRONG&gt;TopRight&lt;/STRONG&gt;, &lt;STRONG&gt;Left&lt;/STRONG&gt; or &lt;STRONG&gt;Right&lt;/STRONG&gt; of the line.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;HorizontalAlignment Stretch and Partially Drawn Lines&lt;/H2&gt;
&lt;P&gt;HorizontalLineAnnotations may be drawn to stretch vertically across the viewport, or to a specific Y-value. To truncate a VerticalLineAnnotation simply specify a y1 coordinate.&lt;/P&gt;
&lt;P&gt;For example, the two options are shown below in code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { HorizontalLineAnnotation } from "scichart/Charting/Visuals/Annotations/HorizontalLineAnnotation";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Horizontal line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new HorizontalLineAnnotation ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Horizontal line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new HorizontalLineAnnotation ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.TopLeft,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Orange",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Orange",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisFontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Result in this output.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_HorizontalLineAnnotation_Truncation.png"&gt;&lt;/P&gt;
&lt;DIV align=center&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Styling the HorizontalLineAnnotation&lt;/H2&gt;
&lt;P&gt;The following properties can be set to style the HorizontalLineAnnotation:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#labelplacement"&gt;labelPlacement&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;An enumeration defining where the vertical line label is placed. Default is on axis.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#labelvalue"&gt;labelValue&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The label value. By default this will equal the x1 value with text formatting applied by the axis. However it can be overridden to any string&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#showlabel"&gt;showLabel&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, a label is shown&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#stroke"&gt;stroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke color of the vertical line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#strokedasharray"&gt;strokeDashArray&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=24&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke thickness of the vertical line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axislabelfill"&gt;axisLabelFill&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The box fill color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axislabelstroke"&gt;axisLabelStroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The text-color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axisfontfamily"&gt;axisFontFamily&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font family for the axis label text&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axisfontsize"&gt;axisFontSize&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font size for the axis label text&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="fbe4766e-403a-4597-8375-f03c6a4aaad5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1150712d-1531-47f8-a9f7-c8fa6662edbe" Status="New Topic" CreatedOn="2016-10-21T13:20:00.0315864Z" ModifiedOn="2021-03-31T16:07:54.815952Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="VerticalLineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:09.8829093Z">VerticalLineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-03-31T16:07:54.815952Z">&lt;P&gt;The&amp;nbsp;VerticalLineAnnotation allows to&amp;nbsp;draw a &lt;STRONG&gt;vertical line&lt;/STRONG&gt;&amp;nbsp;between Y1, Y2 coordinates at X1.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_VerticalLineAnnotation.png"&gt;&lt;/P&gt;
&lt;H2&gt;Declaring a VerticalLineAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a&amp;nbsp;VerticalLineAnnotation and add it to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { VerticalLineAnnotation } from "scichart/Charting/Visuals/Annotations/VerticalLineAnnotation";&lt;BR&gt;&lt;BR&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Vertically line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new VerticalLineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.Axis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_VerticalLineAnnotation_SimpleExample.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Changing Label Position or Label Value&lt;/H2&gt;
&lt;P&gt;The label may be placed on the line, or on the axis. Placemement of the label is controlled by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#labelplacement"&gt;VerticalLineAnnotation.labelPlacement&lt;/A&gt; property, which expects an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/elabelplacement.html"&gt;ELabelPlacement&lt;/A&gt; enum.&lt;/P&gt;
&lt;P&gt;Valid settings are &lt;STRONG&gt;Axis&lt;/STRONG&gt;, &lt;STRONG&gt;Bottom&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;BottomLeft&lt;/STRONG&gt;, &lt;STRONG&gt;BottomRight&lt;/STRONG&gt;, &lt;STRONG&gt;Top&lt;/STRONG&gt;, &lt;STRONG&gt;TopLeft&lt;/STRONG&gt;, &lt;STRONG&gt;TopRight&lt;/STRONG&gt;, &lt;STRONG&gt;Left&lt;/STRONG&gt; and &lt;STRONG&gt;Right&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;For example, &lt;STRONG&gt;setting labelPlacement to ELabelPlacement.TopRight&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { VerticalLineAnnotation } from "scichart/Charting/Visuals/Annotations/VerticalLineAnnotation";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Vertically line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new VerticalLineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.TopRight,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Red",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisFontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in the label being placed on the top right of the line.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_VerticalLineAnnotation_LabelPlacementTopRight.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tip!&amp;nbsp;Labels on VerticalLineAnnotations may be placed on the &lt;STRONG&gt;Axis&lt;/STRONG&gt;, or at &lt;STRONG&gt;Bottom&lt;/STRONG&gt;,&amp;nbsp;&lt;STRONG&gt;BottomLeft&lt;/STRONG&gt;, &lt;STRONG&gt;BottomRight&lt;/STRONG&gt;, &lt;STRONG&gt;Top&lt;/STRONG&gt;, &lt;STRONG&gt;TopLeft&lt;/STRONG&gt;, &lt;STRONG&gt;TopRight&lt;/STRONG&gt;, &lt;STRONG&gt;Left&lt;/STRONG&gt; or &lt;STRONG&gt;Right&lt;/STRONG&gt; of the line.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;VerticalAlignment Stretch and Partially Drawn Lines&lt;/H2&gt;
&lt;P&gt;VerticalLineAnnotations may be drawn to stretch vertically across the viewport, or to a specific Y-value. To truncate a VerticalLineAnnotation simply specify a y1 coordinate. &lt;/P&gt;
&lt;P&gt;For example, the two options are shown below in code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { ELabelPlacement } from "scichart/types/LabelPlacement";&lt;BR&gt;import { VerticalLineAnnotation } from "scichart/Charting/Visuals/Annotations/VerticalLineAnnotation";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Vertically line stretched across the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new VerticalLineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPlacement: ELabelPlacement.Axis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisFontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // VerticalLineAnnotation truncates at Y=4&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new VerticalLineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; showLabel: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Orange",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisLabelFill: "Orange",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisFontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Result in this output. &lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_VerticalLineAnnotation_TruncatedInY.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;&amp;nbsp;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Styling the VerticalLineAnnotation&lt;/H2&gt;
&lt;P&gt;The following properties can be set to style the verticalLineAnnotation:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#labelplacement"&gt;labelPlacement&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;An enumeration defining where the vertical line label is placed. Default is on axis.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#labelvalue"&gt;labelValue&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The label value. By default this will equal the x1 value with text formatting applied by the axis. However it can be overridden to any string&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#showlabel"&gt;showLabel&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, a label is shown&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#stroke"&gt;stroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke color of the vertical line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=24&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#strokedasharray"&gt;strokeDashArray&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=24&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke thickness of the vertical line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axislabelfill"&gt;axisLabelFill&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The box fill color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axislabelstroke"&gt;axisLabelStroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The text-color for the axis label&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axisfontfamily"&gt;axisFontFamily&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font family for the axis label text&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/verticallineannotation.html#axisfontsize"&gt;axisFontSize&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The font size for the axis label text&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4e9845da-032d-487c-9436-b8a00338f44b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="963d03d5-c2f0-4143-9817-8b37186bfe69" Status="New Topic" CreatedOn="2016-10-21T13:20:16.7134683Z" ModifiedOn="2020-10-13T12:49:53.827241Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LineAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:23.4144267Z">LineAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-10-13T12:49:53.827241Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px"&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;IMG border=0 alt="" src="images/Annotations_LineAnnotation.png"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineannotation.html"&gt;LineAnnotation&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt; &lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;draws a line of variable thickness&amp;nbsp;from x1,y1 to x2,y2 where coordinates are data-values. The LineAnnotation supports&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineannotation.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;B style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 700; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;,&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineannotation.html#stroke"&gt;stroke&lt;/A&gt;&amp;nbsp;properties.&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/B&gt;&lt;/P&gt;
&lt;P&gt;Coordinates may be relative or absolute according to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Declaring a LineAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a number of LineAnnotations and add them to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { BoxAnnotation } from "scichart/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({ fontSize: 12, text: "You can draw lines", x1: 0.3, y1: 6.3 }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({ stroke: "#555555", strokeThickness: 3, x1: 1, x2: 2, y1: 4, y2: 6 }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({ stroke: "#555555", strokeThickness: 3, x1: 1.2, x2: 2.5, y1: 3.8, y2: 6 }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Aligning a LineAnnotation with x/yCoordinateModes&lt;/H2&gt;
&lt;P&gt;To position a LineAnnotation so that it stretches horizontally or vertically across the viewport, use x/yCoordinateMode. e.g. the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({text: "Horizontally Stretched Line uses xCoordinateMode.Relative", x1: 0.1, y1: 2.5}),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#279B27", strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({text: "Vertically Stretched Line uses yCoordinateMode.Relative", x1: 2.1, y1: 9.2}),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new LineAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#FF1919",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 1.0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;results in this output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_LineAnnotation_CoordinateMode.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="fc7e1299-d2f3-430a-8c3f-63a284a1a49e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7b100b94-ef0c-4cc9-a73a-7ee728f7208d" Status="New Topic" CreatedOn="2016-10-21T13:20:27.3476479Z" ModifiedOn="2019-02-12T19:29:13.2383473Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="LineArrowAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:20:37.00524Z">LineArrowAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-02-12T19:29:13.2383473Z">&lt;P&gt;The&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt; allows to draw&amp;nbsp;an&amp;nbsp;&lt;STRONG&gt;arrow&lt;/STRONG&gt;&amp;nbsp;from X1,Y1&amp;nbsp;to X2,Y2 position:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="SciChart_Android_Annotations/ArrowAnnotations_framed.png"&gt;&lt;/P&gt;
&lt;H2&gt;LineAnnotation Features&lt;/H2&gt;
&lt;P&gt;Please refer to the&amp;nbsp;&lt;A href="867a28ee-2d60-436c-9f9f-c046f0a3a9b0"&gt;Common Annotation Features&lt;/A&gt; to learn more about the ones&amp;nbsp;inherited from the base class. The Stroke color can be applied via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineAnnotationBase~setStroke.html"&gt;&lt;EM&gt;setStroke()&lt;/EM&gt;&lt;/A&gt; method, which expects&amp;nbsp;a&amp;nbsp;&lt;A href="SciChart.Drawing~com.scichart.drawing.common.PenStyle.html"&gt;PenStyle&lt;/A&gt; object. Please refer to the&amp;nbsp;&lt;A href="72c98c63-fe53-4c4b-8d96-3a09c48ce831"&gt;Styling and Theming&lt;/A&gt; section to learn more about pens and brushes in SciChart.&lt;/P&gt;
&lt;P&gt;Size of the arrow's head can be changed via the&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation~setHeadLength.html"&gt;setHeadLength(),&lt;/A&gt;&lt;/EM&gt;&amp;nbsp;&lt;EM&gt;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation~setHeadWidth.html"&gt;setHeadWidth()&lt;/A&gt;&lt;/EM&gt; methods.&lt;/P&gt;
&lt;H2&gt;Position LineAnnotation&lt;/H2&gt;
&lt;P&gt;A&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;is placed on a chart&amp;nbsp;at the position determined by its&amp;nbsp;&lt;STRONG&gt;X1,Y1 and X2,Y2&amp;nbsp;coordinates&lt;/STRONG&gt;, which&amp;nbsp;specify the two line ends. It can be set via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setX1.html"&gt;&lt;EM&gt;setX1()&lt;/EM&gt;&lt;/A&gt;, &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setY1.html"&gt;&lt;EM&gt;setY1()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setX2.html"&gt;&lt;EM&gt;setX2()&lt;/EM&gt;&lt;/A&gt;,&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.AnnotationBase~setY2.html"&gt;&lt;EM&gt;setY2()&lt;/EM&gt;&lt;/A&gt;&amp;nbsp;methods. The arrow's &lt;STRONG&gt;head is placed at X2,Y2&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In&amp;nbsp;a&amp;nbsp;&lt;A href="e00ca150-579a-4496-98b9-70c83ca9a7bb"&gt;multi-axis scenario&lt;/A&gt;, or if you changed the Ids of your axes, both &lt;STRONG&gt;XAxisId and YAxisId&lt;/STRONG&gt; must be set. This can be done via the&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setXAxisId.html"&gt;&lt;EM&gt;setAxisId()&lt;/EM&gt;,&lt;/A&gt; &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.IAnnotation~setYAxisId.html"&gt;&lt;EM&gt;setYAxisId()&lt;/EM&gt;&lt;/A&gt; methods.&lt;/P&gt;
&lt;H2&gt;Create LineAnnotation&lt;/H2&gt;
&lt;P&gt;A &lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;can be added onto a chart using the following code:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// assume the surface&amp;nbsp;has been&amp;nbsp;created and configured before&lt;/P&gt;
&lt;P&gt;ISciChartSurface surface;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// create an LineAnnotation&lt;/P&gt;
&lt;P&gt;LineArrowAnnotation lineArrowAnnotation = new LineArrowAnnotation(getActivity());&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;a PenStyle for the&amp;nbsp;Stroke&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setStroke(new SolidPenStyle(0xFF0000FF, true, 4, null));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// allow to interact with the&amp;nbsp;annotation in run-time&lt;BR&gt;lineArrowAnnotation.setEditable(true);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// in a multi-axis scenario, specify the XAxisId and YAxisId&lt;BR&gt;lineArrowAnnotation.setXAxisId("Top_X_Axis");&lt;BR&gt;lineArrowAnnotation.setYAxisId("Left_Y_Axis");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify&amp;nbsp;size&amp;nbsp;for the arrow's head&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setHeadLength(20f);&lt;BR&gt;lineArrowAnnotation.setHeadWidth(20f);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// specify a desired position by setting coordinates&lt;/P&gt;
&lt;P&gt;// the arrow's head is located at X2,Y2&lt;BR&gt;lineArrowAnnotation.setX1(1d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setY1(4.6d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setX2(10d);&lt;/P&gt;
&lt;P&gt;lineArrowAnnotation.setY2(9.1d);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;// add the annotation to the Annotations collection of the surface&lt;/P&gt;
&lt;P&gt;Collections.addAll(surface.getAnnotations(), lineArrowAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, a&amp;nbsp;&lt;A href="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation.html"&gt;LineArrowAnnotation&lt;/A&gt;&amp;nbsp;can be created using&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;Chart Builders&lt;/A&gt;:&lt;/P&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;LineAnnotation lineAnnotation = sciChartBuilder.newLineAnnotation()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPosition(1d, 4d, 2d, 6d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withStroke(2f, 0xFF555555)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withIsEditable(true)&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withXAxisId(X_TOP_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.withYAxisId(Y_LEFT_AXIS)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To learn more about other annotation types, available out of the box in SciChart, please find the comprehensive list in the&amp;nbsp;&lt;A href="06b6036b-fbc1-41e4-905a-52ec73295788"&gt;What Is an Annotation&lt;/A&gt; article.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="89146db9-9df1-46ab-8339-bca506955111" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8b91c093-8a55-495d-8128-4a4e582b0337" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="867a28ee-2d60-436c-9f9f-c046f0a3a9b0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="85b7bda9-7dd0-458f-8cf7-e0e140ccaa03" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="SciChart.Charting~com.scichart.charting.visuals.annotations.LineArrowAnnotation" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="72e4491f-8140-49cb-8bd3-85b381967f87" Status="New Topic" CreatedOn="2016-10-21T13:22:54.5131458Z" ModifiedOn="2020-10-13T12:51:50.0401447Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TextAnnotation" BuildFlags="">
                <Title m="2016-10-21T13:23:00.5519906Z">TextAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-10-13T12:51:50.0401447Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px"&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;IMG border=0 alt="" src="images/Annotations_TextAnnotation.png"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html"&gt;TextAnnotation&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp;type &lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;draws a text label&amp;nbsp;at the x1,y1 location&amp;nbsp;where coordinates are data-values. The TextAnnotation supports&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#text"&gt;text&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#fontsize"&gt;fontSize&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#fontweight"&gt;fontWeight&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#fontfamily"&gt;fontFamily&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#textcolor"&gt;textColor&lt;/A&gt; properties.&lt;/P&gt;
&lt;P&gt;Coordinates may be relative or absolute according to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Declaring a TextAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a number of TextAnnotations and add them to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add TextAnnotations in the top left of the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({ text: "Annotations are Easy!", fontSize: 24, x1: 0.3, y1: 9.7 }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({ text: "You can create text", fontSize: 18, x1: 1, y1: 9 }),&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add TextAnnotations with anchor points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Anchor Center (X1, Y1)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Bottom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 8&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Anchor Right",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Top,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 8&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "or Anchor Left",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Top,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 8&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Positioning a TextAnnotation with horizontal/vertical Anchor Points&lt;/H2&gt;
&lt;P&gt;A TextAnnotation only requires coordinates x1,y1 to be set. The alignment of the text around this coordinate is controlled by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#horizontalanchorpoint"&gt;horizontalAnchorPoint&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#verticalanchorpoint"&gt;verticalAnchorPoint&lt;/A&gt; properties.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_AnchorPoints.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Above: Set the horizontalAnchorPoint, and verticalAnchorPoint property to determine which anchor point (horizontal: left, center, right or vertical: top, center, bottom) the x1,y2 coordinate is bound to.&lt;/P&gt;
&lt;H2&gt;Aligning a LineAnnotation with x/yCoordinateModes&lt;/H2&gt;
&lt;P&gt;Like other annotation types, the TextAnnotation can be positioned relatively or absolute using xCoordinateMode, yCoordinateMode property.&lt;/P&gt;
&lt;P&gt;For example. To create a watermark in the centre of the chart, use this code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {TextAnnotation} from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import {EHorizontalAnchorPoint, EVerticalAnchorPoint} from "scichart/types/AnchorPoint";&lt;BR&gt;import {ECoordinateMode} from "scichart/Charting/Visuals/Annotations/AnnotationBase";&lt;BR&gt;import {LineAnnotation} from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import {EAnnotationLayer} from "scichart/Charting/Visuals/Annotations/IAnnotation";&lt;BR&gt;&lt;BR&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Watermark with CoordinateMode Relative&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Create Watermarks",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 56,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontWeight: "Bold",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textColor: "#FFFFFF22",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationLayer: EAnnotationLayer.BelowChart,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_TextAnnotation_CoordinateMode.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0ef14cd2-d624-419f-a816-d1bf3c2746a5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="24a50b9d-0b8d-4124-b5e0-db75517608bc" Status="New Topic" CreatedOn="2016-10-21T13:20:40.4463196Z" ModifiedOn="2020-11-15T12:58:49.4037047Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomAnnotation" BuildFlags="">
                <Title m="2020-11-15T12:58:49.4007063Z">CustomAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2020-10-13T13:12:47.6514955Z">&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; BORDER-TOP-WIDTH: 0px"&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;&lt;IMG border=0 alt="" src="images/Annotations_CustomAnnotation.png"&gt;&lt;/SPAN&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;The&lt;SPAN&gt;&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/customannotation.html"&gt;CustomAnnotation type&lt;/A&gt;&lt;/SPAN&gt;&lt;/SPAN&gt;&amp;nbsp;&lt;SPAN style='FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; DISPLAY: inline !important; LETTER-SPACING: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;draws a custom shape defined by SVG at the x1,y1 location&amp;nbsp;where coordinates are data-values.&lt;/SPAN&gt;&lt;/P&gt;
&lt;P&gt;Coordinates may be relative or absolute according to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#xcoordinatemode"&gt;xCoordinateMode&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ycoordinatemode"&gt;yCoordinateMode&lt;/A&gt;.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Declaring a CustomAnnotation in code&lt;/H2&gt;
&lt;P&gt;The following code will declare a CustomAnnotation in the shape of a small arrow and adds it to the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;// Create a SciChartSurface&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Create an XAxis and YAxis&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;xAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;yAxis.visibleRange = new NumberRange(0, 10);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Top,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;svg id="Capa_1" xmlns="&lt;A href="http://www.w3.org/2000/svg%22%3E'"&gt;http://www.w3.org/2000/svg"&amp;gt;'&lt;/A&gt; +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;g transform="translate(-53.867218,-75.091687)"&amp;gt;' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;path style="fill:#1cb61c;fill-opacity:0.34117647;stroke:#00b400;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'd="m 55.47431,83.481251 c 7.158904,-7.408333 7.158904,-7.408333 7.158904,-7.408333 l 7.158906,7.408333 H 66.212668 V 94.593756 H 59.053761 V 83.481251 Z"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "/&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/g&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/svg&amp;gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Notice that the SVG string is&amp;nbsp;&lt;A href="https://www.w3.org/Graphics/SVG/" target=_blank&gt;W3C compliant SVG&lt;/A&gt;. We generated this ourselves using InkScape -&amp;nbsp;a tool that can be used to create and export vector graphics in SVG format.&lt;/P&gt;
&lt;H2&gt;Positioning a CustomAnnotation with horizontal/vertical Anchor Points&lt;/H2&gt;
&lt;P&gt;A CustomAnnotation only requires coordinates x1,y1 to be set. The alignment of the annotation around this coordinate is controlled by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#horizontalanchorpoint"&gt;horizontalAnchorPoint&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textannotation.html#verticalanchorpoint"&gt;verticalAnchorPoint&lt;/A&gt; properties.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_AnchorPoints.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Above: Set the horizontalAnchorPoint, and verticalAnchorPoint property to determine which anchor point (horizontal: left, center, right or vertical: top, center, bottom) the x1,y2 coordinate is bound to.&lt;/P&gt;
&lt;H2&gt;Aligning a CustomAnnotation with x/yCoordinateModes&lt;/H2&gt;
&lt;P&gt;Like other annotation types, the CustomAnnotation can be positioned relatively or absolute using xCoordinateMode, yCoordinateMode property.&lt;/P&gt;
&lt;P&gt;For example. The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-stock-chart-buy-sell-markers" target=_blank&gt;TradeMarkers demo in the SciChart.js Examples Suite&lt;/A&gt; places a number of custom annotations for buy/sell markers, but also places news bullet annotations at the bottom of the chart using yCoordinateMode.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {TextAnnotation} from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import {EHorizontalAnchorPoint, EVerticalAnchorPoint} from "scichart/types/AnchorPoint";&lt;BR&gt;import {ECoordinateMode} from "scichart/Charting/Visuals/Annotations/AnnotationBase";&lt;BR&gt;import {LineAnnotation} from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import {EAnnotationLayer} from "scichart/Charting/Visuals/Annotations/IAnnotation";&lt;BR&gt;&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// Add an XAxis, YAxis&lt;BR&gt;sciChartSurface.xAxes.add(new CategoryAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1), labelFormat: ENumericFormat.Decimal_4 })&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;// Add a Candlestick series with some values to the chart&lt;BR&gt;const { dateValues, openValues, highValues, lowValues, closeValues } = ExampleDataProvider.getTradingData(200);&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastCandlestickRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new OhlcDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: dateValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; openValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; highValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; closeValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;// Add some trades to the chart using the Annotations API&lt;BR&gt;for (let i = 0; i &amp;lt; dateValues.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Every 10th bar, add a buy annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (i % 10 === 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(buyMarkerAnnotation(i, lowValues[i]));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Every 10th bar between buys, add a sell annotation&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((i + 5) % 10 === 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(sellMarkerAnnotation(i, highValues[i]));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Every 25th bar, add a news bullet&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (i % 25 === 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(newsBulletAnnotation(i));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Returns a CustomAnnotation that represents a buy marker arrow&lt;BR&gt;// The CustomAnnotation supports SVG as content. Using Inkscape or similar you can create SVG content for annotations&lt;BR&gt;const buyMarkerAnnotation = (x1: number, y1: number): CustomAnnotation =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Top,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;svg id="Capa_1" xmlns="&lt;A href="http://www.w3.org/2000/svg%22%3E'"&gt;http://www.w3.org/2000/svg"&amp;gt;'&lt;/A&gt; +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;g transform="translate(-53.867218,-75.091687)"&amp;gt;' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;path style="fill:#1cb61c;fill-opacity:0.34117647;stroke:#00b400;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'd="m 55.47431,83.481251 c 7.158904,-7.408333 7.158904,-7.408333 7.158904,-7.408333 l 7.158906,7.408333 H 66.212668 V 94.593756 H 59.053761 V 83.481251 Z"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "/&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/g&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/svg&amp;gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Returns a CustomAnnotation that represents a sell marker arrow&lt;BR&gt;// The CustomAnnotation supports SVG as content. Using Inkscape or similar you can create SVG content for annotations&lt;BR&gt;const sellMarkerAnnotation = (x1: number, y1: number): CustomAnnotation =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Bottom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;svg id="Capa_1" xmlns="&lt;A href="http://www.w3.org/2000/svg%22%3E'"&gt;http://www.w3.org/2000/svg"&amp;gt;'&lt;/A&gt; +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;g transform="translate(-54.616083,-75.548914)"&amp;gt;' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;path style="fill:#b22020;fill-opacity:0.34117648;stroke:#990000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 'd="m 55.47431,87.025547 c 7.158904,7.408333 7.158904,7.408333 7.158904,7.408333 L 69.79212,87.025547 H 66.212668 V 75.913042 h -7.158907 v 11.112505 z"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "/&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/g&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/svg&amp;gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const newsBulletAnnotation = (x1: number): CustomAnnotation =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.99, // using YCoordinateMode.Relative and 0.99, places the annotation at the bottom of the viewport&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordinateMode: ECoordinateMode.Relative,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Bottom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;lt;svg id="Capa_1" xmlns="&lt;A href="http://www.w3.org/2000/svg%22%3E'"&gt;http://www.w3.org/2000/svg"&amp;gt;'&lt;/A&gt; +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;g" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; inkscape:label="Layer 1"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; inkscape:groupmode="layer"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id="layer1"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; transform="translate(-55.430212,-77.263552)"&amp;gt;' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; style="fill:#C0D4EE;fill-opacity:1;stroke:#333333;stroke-width:0.26458332;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:0.66666667"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id="rect4528"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width="13.229166"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height="15.875"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x="55.562504"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y="77.395844"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rx="2"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ry="2" /&amp;gt;' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;text" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xml:space="preserve"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; style="font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#333333;fill-opacity:1;stroke:none;stroke-width:0.26458332"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x="57.688622"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y="89.160347"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id="text4540"&amp;gt;&amp;lt;tspan' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sodipodi:role="line"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id="tspan4538"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x="57.688622"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; '&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y="89.160347"' +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-family:sans-serif;-inkscape-font-specification:'sans-serif Bold';fill:#333333;fill-opacity:1;stroke-width:0.26458332\"&amp;gt;N&amp;lt;/tspan&amp;gt;&amp;lt;/text&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;/g&amp;gt;" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/svg&amp;gt;"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;BR&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Annotations_CustomAnnotation_TradeMarkers.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="52165a5b-a9d3-466b-b063-6a2ec206dd08" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a430d22c-a6c5-4a0c-99fa-d94e200cfd60" Status="New Topic" CreatedOn="2021-09-30T08:59:01.5667508Z" ModifiedOn="2021-10-14T10:25:16.3056574Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CustomAxisLabelAnnotation" BuildFlags="">
                <Title m="2021-10-14T10:17:21.753649Z">Custom AxisMarkerAnnotation</Title>
                <ContentsTitle m="2021-10-14T10:17:29.0887367Z">Custom AxisMarkerAnnotation</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-14T10:25:16.3056574Z">&lt;P&gt;SciChart.js allows to create &lt;STRONG&gt;custom axis marker annotations&lt;/STRONG&gt; on axes. This is done by creating&amp;nbsp;&lt;A href="463874a3-04b9-430b-be53-63863b12a39b"&gt;AxisMarkerAnnotation&lt;/A&gt; and passing an&amp;nbsp;&lt;STRONG&gt;image&lt;/STRONG&gt; option into the constructor.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;const customAxisMarkerAnnotation = new AxisMarkerAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; image: htmlImageElement,&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The full example code is below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import customAxisMarkerImage from './img/CustomAxisMarkerImage.png';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { createImageAsync } from 'scichart/utils/imageUtil';&lt;BR&gt;import { AxisMarkerAnnotation } from 'scichart/Charting/Visuals/Annotations/AxisMarkerAnnotation';&lt;/P&gt;
&lt;P&gt;export async function customAxisMarkerAnnotationTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const htmlImageElement = await createImageAsync(customAxisMarkerImage);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // pass imageWidth and imageHeight options to specify annotation width and height&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAxisMarkerAnnotation = new AxisMarkerAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; image: htmlImageElement,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // imageWidth: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // imageHeight: 100&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(customAxisMarkerAnnotation);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import customAxisMarkerImage from './img/CustomAxisMarkerImage.png';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { createImageAsync } from 'scichart/utils/imageUtil';&lt;BR&gt;import { AxisMarkerAnnotation } from 'scichart/Charting/Visuals/Annotations/AxisMarkerAnnotation';&lt;/P&gt;
&lt;P&gt;export async function customAxisMarkerAnnotationTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const htmlImageElement = await createImageAsync(customAxisMarkerImage);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // pass imageWidth and imageHeight options to specify annotation width and height&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAxisMarkerAnnotation = new AxisMarkerAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; image: htmlImageElement,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // imageWidth: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // imageHeight: 100&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(customAxisMarkerAnnotation);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In this example we are using &lt;STRONG&gt;webpack&amp;nbsp;url-loader&lt;/STRONG&gt; to load &lt;STRONG&gt;customAxisMarkerImage &lt;/STRONG&gt;and &lt;STRONG&gt;createImageAsync &lt;/STRONG&gt;helper function to create &lt;STRONG&gt;htmlImageElement&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;This give us a chart with just two axes and an annotation.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Annotations_CustomAxisMarker.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;On the chart we can see a cloud-shaped custom axis label annotation. The annotation is draggable along the X Axis.&lt;/P&gt;
&lt;P&gt;It is also possible to set width and height using &lt;STRONG&gt;imageWidth&lt;/STRONG&gt; and &lt;STRONG&gt;imageHeight&lt;/STRONG&gt; options.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;const customAxisMarkerAnnotation = new AxisMarkerAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; image: htmlImageElement,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; imageWidth: 100,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; imageHeight: 100&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="55692459-52c1-4091-9534-04235630c831" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="9c2e128d-35b1-44ca-b358-c064def11817" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="463874a3-04b9-430b-be53-63863b12a39b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6c45dc8d-7778-4bff-a9e1-0c2c3e764087" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="24a50b9d-0b8d-4124-b5e0-db75517608bc" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f3da61af-0fe5-4804-be50-c76e30f056d2" Status="New Topic" CreatedOn="2023-01-12T13:40:19.9583997Z" ModifiedOn="2023-01-18T15:57:41.4529081Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="NativeTextAnnotation" BuildFlags="">
                <Title m="2023-01-12T13:40:44.2340376Z">NativeTextAnnotation</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-18T15:57:41.4529081Z">&lt;P&gt;&amp;nbsp;NativeTextAnnotation works almost exactly like the normal TextAnnotation but draws using the native text api that is new in SciChart.JS v3.&amp;nbsp; This&amp;nbsp;allows for some significant benefits:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Performance - you can draw hundreds or even thousands of text labels without significant slowdown. 
&lt;LI&gt;Multi-line text is much easier.&amp;nbsp; Separate lines with the newline (/n) character, and adjust lineSpacing and multiLineAlignment if needed. 
&lt;LI&gt;Rotated text is much easier.&amp;nbsp; If you try and rotate svg text, you will often find it gets clipped by its own viewbox.&amp;nbsp; NativeText does not.&amp;nbsp; You can control the center of rotation if need be. 
&lt;LI&gt;Text wrapping is much easier.&amp;nbsp; NativeTextAnnotation can wrap to the chart area, or to the width you set for it.&amp;nbsp; If you make the annotation editable you can see the wrapping change as you resize. 
&lt;LI&gt;Scale property allows text to be drawn at different sizes without creating a new font. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;There are also some limitations compared to&amp;nbsp;svg text:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Font style and font weight are not supported.&amp;nbsp; Fonts other than Arial&amp;nbsp;must be ttf and either be hosted on your server or registered if coming from the internet.&amp;nbsp; See&amp;nbsp;&lt;A href="e5a3627c-906d-4bb5-a81d-981df6e3e96b#FontLoading"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;Native Text Font Loading&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;The example below demonstrates the various features of NativeTextAnnotation.&lt;/P&gt;&lt;innovasys:widget layout="block" type="Example Code Tab Strip"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;NativeTextAnnotation Labels&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import { EWrapTo, NativeTextAnnotation } from "scichart/Charting/Visuals/Annotations/NativeTextAnnotation";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;/P&gt;
&lt;P&gt;export async function nativeTextAnnotationExample(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 10) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const nativeText1 = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "The default font is Arial, which does not need to be hosted or registered",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize:&amp;nbsp;18&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(nativeText1);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; await sciChartSurface.registerFont(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const nativeText2 = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "This text uses a font from the internet",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(nativeText2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const nativeText3 = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text supports\nmultiline and rotation",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotation: 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textColor: "orange"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(nativeText3);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const nativeText4 = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text can automatically wrap to the chart area or the annotation width.&amp;nbsp; ",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; wrapTo: EWrapTo.ViewRect&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(nativeText4);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const nativeText5 = new NativeTextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text can be scaled\nwithout changing the font size",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 16,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(nativeText5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scaleAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;lt; 0.5) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; nativeText5.scale = 1 + progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; nativeText5.scale = 1 + (1 - progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; { scaleAnimation.reset() }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(scaleAnimation);&lt;/P&gt;
&lt;P&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;NativeTextAnnotation&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { EWrapTo } from "scichart/Charting/Visuals/Annotations/NativeTextAnnotation";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { EAnnotationType } from "scichart/Charting/Visuals/Annotations/IAnnotation";&lt;/P&gt;
&lt;P&gt;export async function nativeTextAnnotationBuilderAPIExample(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotations: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EAnnotationType.RenderContextNativeTextAnnotation, options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "The default font is Arial, which does not need to be hosted or registered",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize:&amp;nbsp;18&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EAnnotationType.RenderContextNativeTextAnnotation, options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "This text uses a font from the internet",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EAnnotationType.RenderContextNativeTextAnnotation, options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text supports\nmultiline and rotation",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rotation: 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textColor: "orange"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EAnnotationType.RenderContextNativeTextAnnotation, options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text can automatically wrap to the chart area or the annotation width.&amp;nbsp; ",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; wrapTo: EWrapTo.ViewRect&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EAnnotationType.RenderContextNativeTextAnnotation, options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: "scaleAnnotation",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Native text can be scaled\nwithout changing the font size",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 16,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // This only needs to be done once in the application.&amp;nbsp; The font is cached locally.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // It does not even need to be done before the font is used.&amp;nbsp; SciChart will redraw until the font is available.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; await sciChartSurface.registerFont(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "notoserif",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "https://raw.githubusercontent.com/google/fonts/main/ofl/notoserif/NotoSerif-Regular.ttf"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scaleAnnotation = sciChartSurface.annotations.getById("scaleAnnotation");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scaleAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;lt; 0.5) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scaleAnnotation.scale = 1 + progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scaleAnnotation.scale = 1 + (1 - progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; { scaleAnimation.reset() }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(scaleAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/NativeTextAnnotation.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="242c3cc2-c9a9-44ec-b74f-a52373b227a5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e5a3627c-906d-4bb5-a81d-981df6e3e96b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="354cc739-47d0-43a1-a411-000377fab2ed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="135e80f7-4f28-45c9-a7a2-4ae99818bbef" Status="New Topic" CreatedOn="2023-01-19T16:23:30.4348112Z" ModifiedOn="2023-01-23T14:43:34.4413468Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="EditableAnnotations" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-23T14:43:20.2804921Z">&lt;P&gt;The annotations API allows you to mark any annotation as editable by setting isEditable true.&amp;nbsp; Editable annotations can be selected and dragged, and some can be resized.&amp;nbsp; This page describes how you can respond to a user's interaction with an annotation, and how to&amp;nbsp;&lt;A href="#StylingSelected"&gt;customise the style of the selected view&lt;/A&gt; of the annotation.&lt;/P&gt;
&lt;H2&gt;Annotation Interactions&lt;/H2&gt;
&lt;P&gt;All annotations have the following properties and&amp;nbsp;events which can be used to run code on user interaction:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;AnnotationBase Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#isselected"&gt;isSelected&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;Set true when&amp;nbsp;an editable annotation is clicked.&amp;nbsp; This causes the selection box and the drag points to be shown.&amp;nbsp; These are known as the adorners.&amp;nbsp; Setting this programatically is not advised&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#selectedchanged"&gt;selectedChanged&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P class=MsoNormal style='BOX-SIZING: border-box; FONT-SIZE: 16px; FONT-FAMILY: Roboto, "Helvetica Neue", Helvetica, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(33,33,33); FONT-STYLE: normal; TEXT-ALIGN: left; ORPHANS: 2; WIDOWS: 2; MARGIN: 0px 0px 0pt; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-style: initial; text-decoration-color: initial'&gt;An event that is fired when isSelected changes.&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#dragstarted"&gt;dragStarted&lt;/A&gt; /&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#ondragstarted"&gt;onDragStarted&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;dragStarted is an event which fires on mouseDown of an editable annotation.&amp;nbsp; This is fired by the call to onDragStarted which is overridden in various annotations to determine which dragging point is being used, setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#adornerdraggingpoint"&gt;adornerDraggingPoint&lt;/A&gt; property.&amp;nbsp; If this is not set, dragging will not be performed.&amp;nbsp; You can pass a callback for the event via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#ondragstarted"&gt;onDragStarted&lt;/A&gt; property of the IAnnotationsBase options object when constructing.&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#dragdelta"&gt;dragDelta&lt;/A&gt; /&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#onDragAdorner"&gt;onDragAdorner&lt;/A&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;dragDelta is&amp;nbsp;the event which fires during dragging.&amp;nbsp; This is fired by the call to onDragAdorner which translates the mouse point to xy coordinates and calls&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#calcdragdistance"&gt;calcDragDistance&lt;/A&gt;, which is where the coordinates of the annotation are updated.&amp;nbsp; You can pass a callback for the event via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#ondragstarted"&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#ondrag"&gt;onDrag&lt;/A&gt; property of the IAnnotationsBase options object when constructing.&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#dragended"&gt;dragEnded&lt;/A&gt; /&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/annotationbase.html#onDragEnded"&gt;onDragEnded&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;dragDelta is&amp;nbsp;an event which is fires on mouseUp when dragging has finished.&amp;nbsp; This is fired by the call to onDragEnded.&amp;nbsp; You can pass a callback for the event via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#ondragstarted"&gt;&lt;/A&gt;&lt;U&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html#ondragended"&gt;onDragEnded&lt;/A&gt;&lt;/U&gt; property of the IAnnotationsBase options object when constructing.&amp;nbsp;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;You usually want to either get or set some properties of the annotation being dragged in the callback.&amp;nbsp; It is possible to do this even when passing the callback as a constructor option, thanks to the way arrow functions capture their context.&amp;nbsp; Don't use "this"!&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Get Annotation values while dragging&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const textAnnotationDrag = new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: "Moveable TextAnnotation",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onDrag: (args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotationDrag.text = `I was dragged to ${textAnnotationDrag.x1.toFixed(2)}, ${textAnnotationDrag.y1.toFixed(2)}`&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/dragText.gif"&gt;&lt;/P&gt;
&lt;H3&gt;Dragging to discrete values&lt;/H3&gt;
&lt;P&gt;Sometimes you want an annotation to snap to particular values as you drag.&amp;nbsp; The way to do this is to override onDragAdorner and convert to discete points there, then pass these to calcDragDistance.&amp;nbsp;Here is an example of an axis marker that can only take discrete values, from our&amp;nbsp;&lt;A href="https://www.scichart.com/example/javascript-chart/javascript-heatmap-interactions/"&gt;Rich Interactions Demo&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Discrete dragging&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;export class DiscreteAxisMarker extends AxisMarkerAnnotation {&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public stepSize = 500;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public minValue = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public maxValue = 30000;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onDragAdorner(args: ModifierMouseArgs): void {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xyValues = this.getValuesFromCoordinates(args.mousePoint, true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xyValues) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let { x, y } = xyValues;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.x1 !== undefined) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x = Math.floor(x / this.stepSize) * this.stepSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else if (this.y1 !== undefined) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y = Math.floor(y / this.stepSize) * this.stepSize;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.calcDragDistance(new Point(x, y));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.x1 !== undefined) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.x1 = Math.min(Math.max(this.x1, this.minValue), this.maxValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else if (this.y1 !== undefined) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.y1 = Math.min(Math.max(this.y1, this.minValue), this.maxValue);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.dragDelta.raiseEvent(new AnnotationDragDeltaEventArgs());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/dragDiscrete.gif"&gt;&lt;/P&gt;
&lt;H2&gt;&lt;A id=StylingSelected name=StylingSelected&gt;&lt;/A&gt;Styling Selected Annotations&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;Annotations API allows to customize the interaction adorners style of an editable annotation. This includes:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;specifying the grip points that could be used for interaction with the annotation 
&lt;LI&gt;specifying the radius of the grip points 
&lt;LI&gt;setting a custom svg template for the grips &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;There is a number of common properties which could be used to customize the look and behavior of interactive annotations. They could be passed as constructor options, which are described by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/iannotationbaseoptions.html"&gt;IAnnotationBaseOptions&lt;/A&gt;. And the relevant properties are defined as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Discrete dragging&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;/** The direction in which the annotation is allowed to be resized or dragged */&lt;BR&gt;resizeDirections?: EXyDirection;&lt;BR&gt;/** The stroke color for the adorner drag handle */&lt;BR&gt;annotationsGripsStroke?: string;&lt;BR&gt;/** The fill color for the adorner drag handle */&lt;BR&gt;annotationsGripsFill?: string;&lt;BR&gt;/** The radius of the adorner drag handle */&lt;BR&gt;annotationsGripsRadius?: number;&lt;BR&gt;/** The stroke color for the adorner selection box */&lt;BR&gt;selectionBoxStroke?: string;&lt;BR&gt;/** How much bigger the selection box is than the bounding box of the annotation, in pixels */&lt;BR&gt;selectionBoxDelta?: number;&lt;BR&gt;/** The thickness of the selection box line */&lt;BR&gt;selectionBoxThickness?: number;&lt;BR&gt;/** The dragPoints that should be enabled for this annotation */&lt;BR&gt;dragPoints?: readonly EDraggingGripPoint[];&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Also, the same properties could be modified using the properties on an annotation instance:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;AnnotationBase.resizeDirections 
&lt;LI&gt;AnnotationBase.annotationsGripsStroke 
&lt;LI&gt;AnnotationBase.annotationsGripsFill 
&lt;LI&gt;AnnotationBase.annotationsGripsRadius 
&lt;LI&gt;AnnotationBase.selectionBoxStroke 
&lt;LI&gt;AnnotationBase.selectionBoxDelta 
&lt;LI&gt;AnnotationBase.selectionBoxThickness 
&lt;LI&gt;AnnotationBase.dragPoints &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Default Adorners Style&lt;/H3&gt;
&lt;P&gt;We will start by creating a BoxAnnotation on a surface and will use it as a boilerplate for further examples (other types of annotations could be modified similarly). In order to make the annotation interactable, we will set &lt;STRONG&gt;IAnnotationBaseOptions.isEditable&lt;/STRONG&gt; flag. Also we will set &lt;STRONG&gt;IAnnotationBaseOptions.isSelected&lt;/STRONG&gt; to display adorners of the annotation.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Default Adorners Style&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart';&lt;BR&gt;import { BoxAnnotation } from 'scichart/Charting/Visuals/Annotations/BoxAnnotation';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;
&lt;P&gt;const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(boxAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;Default Adorners Style&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from 'scichart/Builder/chartBuilder';&lt;BR&gt;import { EAnnotationType } from 'scichart/Charting/Visuals/Annotations/IAnnotation';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotations: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAnnotationType.RenderContextBoxAnnotation,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;As you can see the adorners consist of the outlining &lt;STRONG&gt;selection box&lt;/STRONG&gt; used for highlighting a selected annotation, and &lt;STRONG&gt;dragging grip points&lt;/STRONG&gt; - used to resize or move an annotation when dragged by a cursor.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/DefaultAdorners.png"&gt;&lt;/P&gt;
&lt;H3&gt;Custom Adorners Style&lt;/H3&gt;
&lt;P&gt;Here we will demonstrate how to apply custom styles for the adorners. So in this example we changed the colors and sizes of the selection box and grip points.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom&amp;nbsp;Adorners Style&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add custom styling&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsStroke: 'Blue',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsFill: 'Black',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxStroke: 'Green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsRadius: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxDelta: 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxThickness: 9,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;Custom Adorners Style&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotations: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAnnotationType.RenderContextBoxAnnotation,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add custom styling&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsStroke: 'Blue',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsFill: 'Black',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxStroke: 'Green',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsRadius: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxDelta: 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; selectionBoxThickness: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/CustomAdornersStyling.png"&gt;&lt;/P&gt;
&lt;H3&gt;&amp;nbsp;Modifying Dragging Grip Points&lt;/H3&gt;
&lt;P&gt;&amp;nbsp;By default, an annotation uses all of the predefined grip points for interactions (corners and body), but this can be changed to allow dragging and resizing only using specific ones. For this we will use the &lt;STRONG&gt;IAnnotationBaseOptions.dragPoints&lt;/STRONG&gt; (or &lt;STRONG&gt;AnnotationBase.dragPoints&lt;/STRONG&gt;) property.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Modifying Dragging Grip Points&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EDraggingGripPoint } from 'scichart/Charting/Visuals/Annotations/AnnotationBase';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // custom drag points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dragPoints: [EDraggingGripPoint.Body, EDraggingGripPoint.x2y1],&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;Modifying Dragging Grip Points&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EDraggingGripPoint } from 'scichart/Charting/Visuals/Annotations/AnnotationBase';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotations: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAnnotationType.RenderContextBoxAnnotation,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // custom drag points&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dragPoints: [EDraggingGripPoint.Body, EDraggingGripPoint.x2y1],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CustomDragPoints.png"&gt;&lt;/P&gt;
&lt;H3&gt;Resize Direction &lt;/H3&gt;
&lt;P&gt;Another property of interactable annotation is the dimension where it can be moved or resized. By default it is possible to move a BoxAnnotation towards each side of the chart. In the next example we will demonstrate a usage of the &lt;STRONG&gt;IAnnotationBaseOptions.resizeDirections&lt;/STRONG&gt; (or &lt;STRONG&gt;AnnotationBase.resizeDirections&lt;/STRONG&gt;) property. We will limit the annotation to resize and move only along the X Axis.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Resize Direction&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EXyDirection } from 'scichart/types/XyDirection';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // custom resize direction&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; resizeDirections: EXyDirection.XDirection,&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;Resize Direction&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EXyDirection } from 'scichart/types/XyDirection';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotations: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAnnotationType.RenderContextBoxAnnotation,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // custom resize direction&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resizeDirections: EXyDirection.XDirection,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Custom Adorners SVG &lt;/H3&gt;
&lt;P&gt;&amp;nbsp;More advanced option to customize the adorners is to override the SVG template for the selection box and grips. To do this we can create a derived annotation class, which in this case extends &lt;STRONG&gt;BoxAnnotation&lt;/STRONG&gt;. In the class we are overriding the &lt;STRONG&gt;AnnotationBase.getAnnotationGripSvg&lt;/STRONG&gt; and &lt;STRONG&gt;AnnotationBase.svgStringAdornerTemplate&lt;/STRONG&gt; methods, which are used to create the adorners.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom Adorners SVG&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomBoxAnnotation extends BoxAnnotation {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; getAnnotationGripSvg(x, y) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const size = this.annotationsGripsRadius;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return `&amp;lt;rect x="${x - size / 2}" y="${y - size / 2}" width="${size}" height="${size}" fill="${&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.annotationsGripsFill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }" stroke="${this.annotationsGripsStroke}"/&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgStringAdornerTemplate(x1, y1, x2, y2) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = x2 - x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = y2 - y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let svg = `&amp;lt;svg xmlns="http://www.w3.org/2000/svg"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style type="text/css"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; line { stroke: #474747;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;defs&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;pattern id="grid1" patternUnits="userSpaceOnUse" width="10" height="10"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;line x1="0" y1="0" x2="10" y2="10" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/pattern&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/defs&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect x="${x1}" y="${y1}" width="${width}" height="${height}" fill="url(#grid1)"/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const grips = this.getAdornerAnnotationBorders(false, true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x1y1)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x1, grips.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x2y2)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x2, grips.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x2y1)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x2, grips.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x1y2)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x1, grips.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += '&amp;lt;/svg&amp;gt;';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return svg;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;
&lt;P&gt;Custom Adorners SVG&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Typescript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class CustomBoxAnnotation extends BoxAnnotation {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public getAnnotationGripSvg(x: number, y: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const size = this.annotationsGripsRadius;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return `&amp;lt;rect x="${x - size / 2}" y="${y - size / 2}" width="${size}" height="${size}" fill="${&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.annotationsGripsFill&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }" stroke="${this.annotationsGripsStroke}"/&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public svgStringAdornerTemplate(x1: number, y1: number, x2: number, y2: number): string {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = x2 - x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = y2 - y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let svg = `&amp;lt;svg xmlns="http://www.w3.org/2000/svg"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style type="text/css"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; line { stroke: #474747;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;defs&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;pattern id="grid1" patternUnits="userSpaceOnUse" width="10" height="10"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;line x1="0" y1="0" x2="10" y2="10" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/pattern&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/defs&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect x="${x1}" y="${y1}" width="${width}" height="${height}" fill="url(#grid1)"/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; `;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const grips = this.getAdornerAnnotationBorders(false, true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x1y1)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x1, grips.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x2y2)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x2, grips.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x2y1)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x2, grips.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.canDragPoint(EDraggingGripPoint.x1y2)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += this.getAnnotationGripSvg(grips.x1, grips.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svg += '&amp;lt;/svg&amp;gt;';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return svg;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then simply create and use an instance of the customized annotation:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Custom Adorners SVG&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// use extended class for creating the annotation&lt;BR&gt;const boxAnnotation = new CustomBoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSelected: true,&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/CustomAdornersSVG.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ea28c268-d51d-4362-a463-9bb6e3304db2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="928abdb3-658e-4a91-aa13-a41dd08833ed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="583becc5-a46d-4fdf-9b69-f6b2f973deb8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="60b7ec9e-8855-447c-9b4e-9d28aa408b27" AutoIndex="false">
            <Caption m="2016-09-06T17:55:19.1631326Z">DataSeries API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="3425a202-cb28-4349-915f-ccf122d3a766" Status="New Topic" CreatedOn="2016-09-06T17:55:46.885991Z" ModifiedOn="2023-07-08T12:16:21.0057338Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The DataSeries API" BuildFlags="">
                <Title m="2023-06-02T16:01:36.0597371Z">The DataSeries API</Title>
                <ContentsTitle m="2023-06-02T16:02:03.5019982Z">The DataSeries API</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T12:16:21.0057338Z">&lt;H2&gt;What can you do with the DataSeries in SciChart?&lt;/H2&gt;
&lt;P&gt;Most chart libraries are geared towards loading a chart with static data and never modifying it. &lt;/P&gt;
&lt;P&gt;With SciChart.js, you can:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Create a chart initially with X, Y data and optional metadata (objects) per-point
&lt;LI&gt;Store values in floating-point 64 bit numbers
&lt;LI&gt;modify the data: appending new data, removing, inserting
&lt;LI&gt;Update values
&lt;LI&gt;Animate changes of data or new values
&lt;LI&gt;Replace all values - like in a spectrum analyzer
&lt;LI&gt;Scroll values&amp;nbsp; - real-time monitoring scenarios
&lt;LI&gt;Sweep values - wrap around as data reaches the right edge of the viewport. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;DataSeries allow you to have fine-grained control over the chart data &amp;amp; enable dynamic updates. &lt;/P&gt;
&lt;H2&gt;DataSeries Types&lt;/H2&gt;
&lt;P&gt;The following DataSeries types exist in SciChart.js. All DataSeries types store memory in WebAssembly and implement the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html"&gt;IDeletable&lt;/A&gt; interface. You must call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;IDeletable.delete()&lt;/A&gt;&amp;nbsp;when discarding a&amp;nbsp;DataSeries to free memory.&lt;/P&gt;
&lt;P&gt;Internally the DataSeries&amp;nbsp;wrap the&amp;nbsp;&lt;A href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number#:~:text=The%20JavaScript%20Number%20type%20is,arithmetic%20is%20subject%20to%20rounding."&gt;JavaScript number type, which is a double-precision 64-bit floating-point number&lt;/A&gt; and expect numeric values. You can also store Dates and render strings on chart axis, more on that below.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;DataSeries type&lt;/TD&gt;
&lt;TD&gt;Series Applicable&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataseries&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y Data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;
&lt;P&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html"&gt;FastColumnRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyydataseries.html"&gt;XyyDataSeries&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y1,Y2 data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastBandRenderableSeries (required).&amp;nbsp;&lt;/SPAN&gt; 
&lt;P&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;Can also apply to&amp;nbsp;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html"&gt;FastColumnRenderableSeries&lt;/A&gt;. In this case only the X,Y1 value is chosen&lt;/SPAN&gt;&lt;/SPAN&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries.html"&gt;XyzDataSeries&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Stores X,Y,Z data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;FastBubbleRenderableSeries (required).&lt;BR&gt;&lt;BR&gt;Can also apply to&amp;nbsp;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html"&gt;FastColumnRenderableSeries&lt;/A&gt;.&lt;/SPAN&gt; In this case only the X,Y value is chosen&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ohlcdataseries.html"&gt;OhlcDataseries&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Stores X, Open, High, Low, Close data&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html"&gt;FastCandlestickRenderableSeries&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastohlcrenderableseries.html"&gt;FastOhlcRenderableSeries&lt;/A&gt; (required)&lt;BR&gt;&lt;BR&gt;Can also apply to&amp;nbsp;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html"&gt;FastLineRenderableSeries&lt;/A&gt;&lt;/SPAN&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html"&gt;FastMountainRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html"&gt;XyScatterRenderableSeries&lt;/A&gt;,&amp;nbsp;&lt;BR&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html"&gt;FastColumnRenderableSeries&lt;/A&gt;.&lt;/SPAN&gt; In this case only the X,Y (Close) value is chosen&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;P&gt;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Stores Z-values as 2-dimensional array numbers. The Y,X positions of heatmap cells are computed from the Start and Step values&lt;/P&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;SPAN lang=EN-GB xml:lang="EN-GB"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmaprenderableseries.html"&gt;UniformHeatmapRenderableSeries&lt;/A&gt; (required)&lt;BR&gt;&lt;BR&gt;This DataSeries type is not applicable to any other RenderableSeries&lt;/SPAN&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Creating, Assigning a DataSeries&lt;/H2&gt;
&lt;P&gt;A DataSeries can be created with a single line of code, once you have a wasmContext (WebAssembly Context). The WebAssembly Context is created when you call the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create"&gt;SciChartSurface.create()&lt;/A&gt; function, and the context should be used for elements on that chart only.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\IntroApi\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\IntroApi\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Once the DataSeries has been created, it can be assigned to a RenderableSeries by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#dataseries"&gt;BaseRenderableSeries.dataSeries&lt;/A&gt; property. This is true for both the classic JavaScript API or the Builder API. More info on this in the section on&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;RenderableSeries&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Once you are finished with the DataSeries, don't forget to call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;IDeletable.delete()&lt;/A&gt;. This frees WebAssembly native memory and releases it back to the operating system. For more info see the related article&amp;nbsp;&lt;A href="13f5705c-af26-4667-999f-6535e4e07b6c"&gt;Best Practices when Deleting DataSeries&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Setting Data Distribution Flags&lt;/H2&gt;
&lt;P&gt;For optimal drawing and correct operation, SciChart.js needs to know the distribution of your data, whether sorted in the x-direction and whether the data contains NaN (Not a Number). These flags will be computed automatically, but can be specified for improved performance.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DataDistributionFlags\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DataDistributionFlags\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;When you don't specify Data Distribution Flags, SciChart.js will compute them automatically as data is updated. This adds a small performance overhead, only noticeable with very big data.&lt;/P&gt;
&lt;P&gt;If you specify flags manually, make sure they are correct, and update them as your data updates. If you don't, undefined behaviour can occur.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Getting the DataSeries XRange and YRange&lt;/H2&gt;
&lt;P&gt;All DataSeries types expose the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#xrange"&gt;XRange&lt;/A&gt; and YRange (via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getwindowedyrange"&gt;getWindowedYRange&lt;/A&gt;) of the underlying series. If you need to know the min and max of the DataSeries in the X or Y direction, then call one of these properties:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const xyDataSeries = new XyDataSeries(webAssemblyContext);&lt;BR&gt;xyDataSeries.appendRange([1, 2, 3], [10, 20, 30]);&lt;BR&gt;&lt;BR&gt;// XRange will choose the first/last value if isSorted=true, else it will iterate over all values&lt;BR&gt;const xRange = xyDataSeries.xRange; // Type NumberRange&lt;BR&gt;console.log(`XRange: ${xRange.toString()}`);&lt;BR&gt;// yRange requires a window of x-values. To get the entire yRange, pass in xRange&lt;BR&gt;const yRange = xyDataSeries.getWindowedYRange(xRange, true, false);&lt;BR&gt;console.log(`YRange: ${yRange.toString()}`);&lt;BR&gt;&lt;BR&gt;// Outputs to console&lt;BR&gt;// XRange: NumberRange (1, 3)&lt;BR&gt;// YRange: NumberRange (10, 30)&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Storing Date &amp;amp;&amp;nbsp;String&amp;nbsp;values in DataSeries&lt;/H2&gt;
&lt;P&gt;All DataSeries store&amp;nbsp;64-bit double precision numeric values. However, if you want to display a date or a string on an axis, you need to do a small conversion first.&lt;/P&gt;
&lt;H3&gt;Storing Dates&amp;nbsp;on DataSeries&amp;nbsp;in SciChart&lt;/H3&gt;
&lt;P&gt;DataSeries don't support dates, but you can store values as a unix timestamp and render them as a date on the axis. The process is:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Store Dates as Unix timestamps in the DataSeries. 
&lt;LI&gt;Format the Date using our built-in&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider&lt;/A&gt;, or create your own &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;Examples can be found in the&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;SciChart.js examples suite&lt;/A&gt;, or in our documentation on the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Label Formatting page&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Storing Strings in DataSeries in SciChart&lt;/H3&gt;
&lt;P&gt;Similarly, DataSeries don't support strings, but if you want to render strings, then it's advisable to use X values as sequential integers e.g. 0,1,2,3... and use the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider feature&lt;/A&gt; to format labels as strings.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="09697fa2-3a0a-4712-852e-f757dcdb0f7f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="31ffd4dc-de59-4205-a9e0-f64e390e618f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="86012c28-e900-42fd-985a-76a12a148335" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e06d99dc-d176-4c1f-a71d-5cc54aa9e669" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="31ffd4dc-de59-4205-a9e0-f64e390e618f" Status="New Topic" CreatedOn="2023-06-02T14:53:57.1314904Z" ModifiedOn="2023-07-08T13:34:30.979413Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_AppendInsertUpdateRemove" BuildFlags="">
                <Title m="2023-06-21T12:26:57.7124873Z">Append, Insert, Update, Remove</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T13:34:30.979413Z">&lt;P&gt;SciChart.js is designed to be a highly dynamic chart library for frequently updating data. Once you have created a chart with a RenderableSeries / DataSeries pair, you can manipulate the data in any way and the chart will redraw&amp;nbsp;/ update.&lt;/P&gt;
&lt;P&gt;Data Updates are handled in a reactive way and are 'debounced' so that the chart only draws 1/60th of a second regardless of how many changes to data you make.&lt;/P&gt;
&lt;H2&gt;The DataSeries Append, Update, Insert, Remove functions&lt;/H2&gt;
&lt;P&gt;Here's an table from the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;TypeDoc for XyDataSeries&lt;/A&gt; showing functions available for updating the data.&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;&lt;STRONG&gt;append&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendmetadata"&gt;append&lt;WBR&gt;Metadata&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendmetadatarange"&gt;append&lt;WBR&gt;Metadata&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendrange"&gt;&lt;STRONG&gt;append&lt;WBR&gt;Range&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#clear"&gt;&lt;STRONG&gt;clear&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#count"&gt;&lt;STRONG&gt;count&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#delete"&gt;delete&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getindicesrange"&gt;get&lt;WBR&gt;Indices&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getisdeleted"&gt;get&lt;WBR&gt;IsDeleted&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getmetadataat"&gt;get&lt;WBR&gt;Metadata&lt;WBR&gt;At&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getmetadatalength"&gt;get&lt;WBR&gt;Metadata&lt;WBR&gt;Length&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getnativeindexes"&gt;get&lt;WBR&gt;Native&lt;WBR&gt;Indexes&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getnativexvalues"&gt;get&lt;WBR&gt;NativeXValues&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getnativeyvalues"&gt;get&lt;WBR&gt;NativeYValues&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getwindowedyrange"&gt;get&lt;WBR&gt;WindowedYRange&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getxrange"&gt;getXRange&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getxvalues"&gt;getXValues&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#hasmetadatagenerator"&gt;has&lt;WBR&gt;Metadata&lt;WBR&gt;Generator&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insert"&gt;&lt;STRONG&gt;insert&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertmetadata"&gt;insert&lt;WBR&gt;Metadata&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertmetadatarange"&gt;insert&lt;WBR&gt;Metadata&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertrange"&gt;&lt;STRONG&gt;insert&lt;WBR&gt;Range&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#notifydatachanged"&gt;notify&lt;WBR&gt;Data&lt;WBR&gt;Changed&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeat"&gt;&lt;STRONG&gt;remove&lt;WBR&gt;At&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removemetadataat"&gt;remove&lt;WBR&gt;Metadata&lt;WBR&gt;At&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removemetadatarange"&gt;remove&lt;WBR&gt;Metadata&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removerange"&gt;&lt;STRONG&gt;remove&lt;WBR&gt;Range&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#setfinalanimationvectors"&gt;set&lt;WBR&gt;Final&lt;WBR&gt;Animation&lt;WBR&gt;Vectors&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#setinitialanimationvectors"&gt;set&lt;WBR&gt;Initial&lt;WBR&gt;Animation&lt;WBR&gt;Vectors&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#setmetadata"&gt;set&lt;WBR&gt;Metadata&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#setmetadataat"&gt;set&lt;WBR&gt;Metadata&lt;WBR&gt;At&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#setmetadatagenerator"&gt;set&lt;WBR&gt;Metadata&lt;WBR&gt;Generator&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#tojson"&gt;toJSON&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#update"&gt;&lt;STRONG&gt;update&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#updateanimationproperties"&gt;update&lt;WBR&gt;Animation&lt;WBR&gt;Properties&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#updatexy"&gt;&lt;STRONG&gt;update&lt;WBR&gt;Xy&lt;/STRONG&gt;&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#validateanimationvectors"&gt;validate&lt;WBR&gt;Animation&lt;WBR&gt;Vectors&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#validateindex"&gt;validate&lt;WBR&gt;Index&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;All chart series updates are done via the DataSeries API using the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;append()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insert"&gt;insert()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#update"&gt;update()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeat"&gt;remove()&lt;/A&gt; functions. There are also variations such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendrange"&gt;appendRange()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertrange"&gt;insertRange()&lt;/A&gt; etc... which accept an array of data.&lt;/P&gt;
&lt;P&gt;Note that different dataSeries such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries.html"&gt;XyzDataSeries&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyydataseries.html"&gt;XyyDataSeries&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ohlcdataseries.html"&gt;OhlcDataSeries&lt;/A&gt; have slightly different function signatures for append/update functions. Click the links above to the Typedoc for more info.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here are some common operations:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Append, Update, Insert, Remove&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const xyDataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;xyDataSeries.append(1, 10); // Appends X=1, Y=10&lt;BR&gt;xyDataSeries.append(2, 20); // Appends X=2, Y=20&lt;BR&gt;xyDataSeries.appendRange([3, 4, 5], [30, 40, 50]); // Appends X=3,4,5 and Y=30,40,50&lt;BR&gt;xyDataSeries.removeAt(0); // removes the 0th xy point&lt;BR&gt;xyDataSeries.removeRange(0, 2); // Removes 2 points from index 0 onwards&lt;BR&gt;xyDataSeries.insert(0, 100, 200); // Inserts X=100, Y=200 at index 0&lt;BR&gt;//xyDataSeries.insertRange(...)&lt;BR&gt;xyDataSeries.update(0, 22); // Updates the Y-value at index 0&lt;BR&gt;xyDataSeries.clear(); // Clears the dataseries. NOTE: Does not free memory&lt;BR&gt;xyDataSeries.delete(); // Deletes WebAssembly memory. The series is no longer usable.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; &lt;STRONG&gt;For the best possible performance, when modifying large datasets&lt;/STRONG&gt;, use the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendrange"&gt;appendRange&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insertrange"&gt;insertRange&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removerange"&gt;removeRange&lt;/A&gt; functions. These accept an array of values and are considerably faster than appending point-by-point.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Failing to call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;IDeletable.delete()&lt;/A&gt; on a DataSeries when it is no longer needed can result in a memory leak.&lt;/P&gt;
&lt;P&gt;To simplify your code, if you do not change DataSeries instances, you can call delete on the parent SciChartSurface once. This will delete all child objects that hold native memory.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Examples of Dynamic Updates&lt;/H2&gt;
&lt;P&gt;There are a number of worked examples of how to apply dynamic updates to the chart over at the page&amp;nbsp;&lt;A href="a7a8e8a9-a153-42a0-af00-913ef6e7e06c"&gt;DataSeries Realtime Updates&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e06d99dc-d176-4c1f-a71d-5cc54aa9e669" Status="New Topic" CreatedOn="2023-06-21T12:34:02.9288815Z" ModifiedOn="2023-07-08T13:34:47.8232467Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_GetSetatIndex" BuildFlags="">
                <Title m="2023-06-21T12:34:22.2185494Z">DataSeries Get Set value at Index</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T13:34:47.8232467Z">&lt;P&gt;Memory in SciChart.js is stored in WebAssembly (Wasm) buffers via the type &lt;STRONG&gt;SCRTDoubleVector&lt;/STRONG&gt;. It cannot be treated like a JavaScript array, however it is possible to bulk write/read to these arrays or to get/set at index.&lt;/P&gt;
&lt;P&gt;You can access values on a DataSeries by getting the internal WebAssembly native arrays via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getnativexvalues"&gt;getNativeXValues()&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#getnativeyvalues"&gt;getNativeYValues()&lt;/A&gt;. These return&amp;nbsp;&lt;STRONG&gt;SCRTDoubleVector&lt;/STRONG&gt; - a webassembly buffer type which stores underlying data as Float64 array.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Accessing Values from DataSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const xyDataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;xyDataSeries.appendRange([1,2,3], [10,20,30]);&lt;BR&gt;const xValues = xyDataSeries.getNativeXValues();&lt;BR&gt;const yValues = xyDataSeries.getNativeYValues();&lt;BR&gt;for(let i = 0; i &amp;lt; xyDataSeries.count(); i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(`index=${i}, xy = ${xValues.get(i)}, ${yValues.get(i)}`);&lt;BR&gt;}&lt;BR&gt;&lt;BR&gt;// Will output to console&lt;BR&gt;// index=0, xy=1, 10&lt;BR&gt;// index=1, xy=2, 20&lt;BR&gt;// index=2, xy=3, 30&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: point by point access to the DataSeries native values is slow when you're dealing with millions of points.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Examples of Dynamic Updates&lt;/H2&gt;
&lt;P&gt;There are a number of worked examples of how to apply dynamic updates to the chart over at the page&amp;nbsp;&lt;A href="a7a8e8a9-a153-42a0-af00-913ef6e7e06c"&gt;DataSeries Realtime Updates&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71" Status="New Topic" CreatedOn="2021-09-16T16:49:42.0547354Z" ModifiedOn="2023-08-04T12:51:57.0735517Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries PointMetaData Api" BuildFlags="">
                <Title m="2023-08-04T12:42:57.6266742Z">DataSeries PointMetaData API</Title>
                <ContentsTitle m="2023-06-02T15:06:13.8906498Z">DataSeries PointMetaData Api</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-08-04T12:51:57.0735517Z">&lt;P&gt;The PointMetadata API in SciChart.js allows you to:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Tag any X,Y point in a DataSeries with a custom JavaScript object&lt;/STRONG&gt; 
&lt;LI&gt;It can be used with the&amp;nbsp;&lt;A href="ae9b10e1-f5ba-444e-9835-6b0f95806007"&gt;DataPoint Selection Modifier&lt;/A&gt;&amp;nbsp;to enable per-point &lt;STRONG&gt;selection&lt;/STRONG&gt; 
&lt;LI&gt;It can be used with&amp;nbsp;the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt; to provide &lt;STRONG&gt;custom colouring&lt;/STRONG&gt; of data-points in a series. 
&lt;LI&gt;It can be used with &lt;STRONG&gt;tooltips&lt;/STRONG&gt; such as&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to display extra data or info inside a tooltip 
&lt;LI&gt;Finally, it can be used in the&amp;nbsp;result of any&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit-Test operation&lt;/A&gt; where X,Y,Metadata can be queried on click &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Adding Metadata to Charts&lt;/H2&gt;
&lt;P&gt;Metadata is optional and can be set when a dataseries is first created, or whenever data is added or updated. Metadata is just a JavaScript object and can contain any properties, objects, even functions.&lt;/P&gt;
&lt;P&gt;See the example below for how to create metadata when constructing an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt; and how to consume it in a&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\AddingMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\AddingMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/AddingMetadata/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note:&amp;nbsp;You do not have to set metadata on every point. The structure of the metadata does not have to be the same for every point.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;In TypeScript,&amp;nbsp;all metadata must implement the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata.html"&gt;IPointMetadata&lt;/A&gt; interface, ie&amp;nbsp; &lt;SPAN style="FONT-FAMILY: consolas"&gt;{ isSelected: boolean }&lt;/SPAN&gt;. For JavaScript, this property can be omitted.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Metadata Templates&lt;/H2&gt;
&lt;P&gt;If you just need to set the same metadata on every point, you can supply a single metadata object and it will be used as a template and be cloned onto each datapoint. For example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataTemplates\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataTemplates\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/MetadataTemplates/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Metadata Generators&lt;/H2&gt;
&lt;P&gt;If you want to set complex metadata using the&amp;nbsp;&lt;A href="295dec01-f48c-4caf-a4c8-5b5ed765ba9f"&gt;Builder Api&lt;/A&gt; you have the option to take control of how the metadata is deserialized and serialized by passing a &lt;STRONG&gt;MetadataGenerator&lt;/STRONG&gt;. This is a class that should accept raw data in its constructor and have a &lt;STRONG&gt;getMetadata&lt;/STRONG&gt; method that returns a metadata array.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataGenerators\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Before this class can be used with the builder api it must be registered. Then, it can be used like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataGenerators\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataGenerators\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/MetadataGenerators/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: for more info about the Builder API, please see the section in&amp;nbsp;&lt;A href="295dec01-f48c-4caf-a4c8-5b5ed765ba9f"&gt;our documentation here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="52beca85-ed1b-4135-bd27-72f46ff74aa0" Status="New Topic" CreatedOn="2022-01-18T14:36:10.8880066Z" ModifiedOn="2023-06-21T12:41:00.1587287Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_Resampling" BuildFlags="">
                <Title />
                <ContentsTitle m="2023-06-02T15:04:52.0211446Z">Data Resampling</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-06-21T12:35:30.8710408Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;New to SciChart.js v2.1!&lt;/STRONG&gt; Resampling in SciChart.js enables&amp;nbsp;&lt;/EM&gt;&lt;A href="https://blog.scichart.com/surpassing-limits-javascript-bigdata-webassembly/" target=_blank&gt;&lt;EM&gt;tens of millions of data-points&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;to be displayed in a JavaScript chart, or insane levels of high performance such as ten million candlesticks, enough for the entire history of Bitcoin to be displayed in a 1-minute chart.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;By default, SciChart.js uses resampling of data to ensure the minimum viable data-set is displayed on the screen. SciChart.js resampling algorithm is &lt;STRONG&gt;visually lossless, and automatic&lt;/STRONG&gt;. It occurs for RenderableSeries before the series is rendered, if required.&lt;/P&gt;
&lt;P&gt;Resampling methods make assumptions about the data in order to produce a valid output. SciChart.js provides variety of the resampling modes internally, and auto detects the most suitable one.&lt;/P&gt;
&lt;H2&gt;Disabling Resampling or Setting Mode&lt;/H2&gt;
&lt;P&gt;By default &lt;STRONG&gt;EResamplingMode.Auto&lt;/STRONG&gt; is applied to DataSeries. you can also disable resampling on a per-series basis&amp;nbsp;by setting &lt;STRONG&gt;BaseRenderableSeries.resamplingMode&lt;/STRONG&gt; = &lt;STRONG&gt;EResamplingMode.None&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting ResamplingModes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { EResamplingMode } from "scichart";&lt;BR&gt;&lt;BR&gt;// By default, EResamplingMode.Auto enables resampling (where available)&lt;BR&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { resamplingMode: EResamplingMode.Auto } );&lt;BR&gt;&lt;BR&gt;// Setting the property to none disables resampling for this series&lt;BR&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, { resamplingMode: EResamplingMode.None } );&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Other resampling modes are also available in the &lt;STRONG&gt;EResamplingMode&lt;/STRONG&gt; enumeration. We suggest leaving these to Auto or None unless directed to by SciChart.js&amp;nbsp;support.&lt;/P&gt;
&lt;H2&gt;Globally enabling or Disabling Resampling&lt;/H2&gt;
&lt;P&gt;In SciChart.js v2.1 and above, it is possible to globally enable or disable resampling for all series by setting the&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartdefaults.html"&gt;SciChartDefaults.enableResampling&lt;/A&gt;&lt;/STRONG&gt; property.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Globally disabling resampling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartDefaults } from "scichart";&lt;BR&gt;SciChartDefaults.enableResampling = false;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Data Distribution&lt;/H2&gt;
&lt;P&gt;For correct resampling, the data distribution matters. For example. SciChart.js uses different drawing algorithms if the data is evenly spaced in X vs not evenly spaced, for unsorted vs. sorted data and for when the yValues contain NaN (not a number) or not. All this is to balance optimal performance while maintaining visual accuracy.&lt;/P&gt;
&lt;P&gt;Unless specified, SciChart.js will calculate:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If your data is sorted in the X-direction or not 
&lt;LI&gt;If your data is uniformly spaced in the X-direction or not 
&lt;LI&gt;If your data contains NaN (Not a Number - used to render gaps) in the Y-values or not &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;When specified SciChart.js will not calculate these flags. This improves performance on data append/update/insert/remove operations.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Specify Data and Flags when constructing&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface, XyDataSeries } from "scichart"; &lt;/P&gt;
&lt;P&gt;&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Optional: pass data distribution properties (this improves performance)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // else SciChart.js will auto-detect these properties as you update data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataIsSortedInX: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataEvenlySpacedInX: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; containsNaN: false,&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// These properties may also be set after the dataseries has been created&lt;BR&gt;dataSeries.isSorted = true;&lt;BR&gt;dataSeries.containsNaN = true;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;When specified in the constructor options of a DataSeries, SciChart.js will not calculate &lt;STRONG&gt;dataIsSortedInX&lt;/STRONG&gt; and &lt;STRONG&gt;containsNaN&lt;/STRONG&gt;. This improves performance on data append/update/insert/remove operations by a factor of 5.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Resampling effect on Performance&lt;/H2&gt;
&lt;P&gt;For smaller datasets Resampling will have no effect on performance. SciChart.js is already very highly optimised for datasets up to 1 million datapoints.&lt;/P&gt;
&lt;P&gt;For larger datasets, Resampling has a linear trade-off by dynamically reducing the data to the minimum viable set for visually identical drawing on the fly. You will start to see performance improvements from around 100,000 datapoints or more.&lt;/P&gt;
&lt;P&gt;With SciChart.js resampling, we were able to render&amp;nbsp;&lt;A href="https://blog.scichart.com/javascript-chart-performance-plotting-10-million-datapoints/" target=_blank&gt;10,000,000 (ten million) data-points&lt;/A&gt; in under 25 milliseconds:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;gZIivKIpaO4&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;We were also able to achieve 10,000,000 (10 million) candles in a Candlestick Chart,&amp;nbsp;enough to draw the entire history of Bitcoin BTC/USD in a 1-minute chart!&amp;nbsp;&lt;A href="https://blog.scichart.com/javascript-candlestick-charts-plotting-years-1-minute-data/" target=_blank&gt;Read more in the article below&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://blog.scichart.com/javascript-candlestick-charts-plotting-years-1-minute-data/" target=_blank&gt;&lt;IMG border=0 alt="How SciChart.js Transforms Trading Performance" src="images/DataResampling_10MillionBitcoinBlog.png"&gt;&amp;nbsp;&lt;/A&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Read further info on how to get the best performance from SciChart.js&amp;nbsp;on our&amp;nbsp;&lt;A href="31c1fa0b-34ae-472f-b888-2de129265d50"&gt;performance tips &amp;amp; tricks&lt;/A&gt; page.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0861e3a0-da03-4f37-bd79-0793a29824a7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3425a202-cb28-4349-915f-ccf122d3a766" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8a7c1c56-38c7-4363-b50f-aae261166134" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="31c1fa0b-34ae-472f-b888-2de129265d50" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a8ebf6c3-a18d-4bea-bf43-2297088791fd" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="https://blog.scichart.com/javascript-candlestick-charts-plotting-years-1-minute-data/" TargetWindow="_blank" BuildFlags="">
                    <Title m="2022-01-28T15:49:24.6916344Z">How SciChart.js Transforms Trading Performance</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="13f5705c-af26-4667-999f-6535e4e07b6c" Status="New Topic" CreatedOn="2023-06-02T17:17:20.9201704Z" ModifiedOn="2023-07-24T19:03:15.06579Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_DeletingMemory" BuildFlags="">
                <Title m="2023-06-21T12:38:45.3321585Z">Deleting DataSeries Memory</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-24T19:03:15.06579Z">&lt;P&gt;SciChart.js stores memory in WebAssembly. This allows us to achieve our incredible performance, and also provide a unfied experience across SciChart platforms (Windows, iOS, Android and JavaScript).&lt;/P&gt;
&lt;P&gt;Unlike JavaScript which has built-in garbage collection, WebAssembly requires that you delete memory that you have allocated. Think of it as similar to closing a WebSocket connection if you want to close the connection and free memory.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See related articles:&amp;nbsp;&lt;A href="fe846da4-4ffb-4833-bf13-e688f8f82497"&gt;Memory Usage Best Practices&lt;/A&gt; which has some further info on optimising memory usage with SciChart.js, and&amp;nbsp;&lt;A href="4658035b-e6f2-4a3a-8203-958042b96f56"&gt;Memory Leak Debugging&lt;/A&gt;&amp;nbsp;which introduces our new tools to identify and fix memory leaks.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Examples of how to use Delete()&lt;/H2&gt;
&lt;P&gt;Once you are finished with the DataSeries, don't forget to call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;IDeletable.delete()&lt;/A&gt;. This frees WebAssembly native memory and releases it back to the host.&lt;/P&gt;
&lt;P&gt;Below are a few examples of best-practices when deleting dataSeries, renderableSeries and sciChartSurfaces.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example 1 - dataseries delete()&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DeletingSeries\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example 2 - reassign dataseries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DeletingSeries\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example 3 - deleting renderableseries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DeletingSeries\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example 4 - deleting scichartsurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DeletingSeries\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleD&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Failing to call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ideletable.html#delete"&gt;IDeletable.delete()&lt;/A&gt; on a DataSeries or it's parent SciChartSurface when it is no longer needed can result in a memory leak.&lt;/P&gt;
&lt;P&gt;To simplify your code, if you do not change DataSeries instances, you can call delete on the parent SciChartSurface once. This will delete all child objects that hold native memory.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3fd729d3-bbbf-46a0-9b16-6131c6740aaf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fe846da4-4ffb-4833-bf13-e688f8f82497" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="cf7b7040-bf84-42c5-9ea4-4679d971c495" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4658035b-e6f2-4a3a-8203-958042b96f56" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a7a8e8a9-a153-42a0-af00-913ef6e7e06c" Status="New Topic" CreatedOn="2023-06-21T12:35:45.5920292Z" ModifiedOn="2023-07-08T14:07:46.7921736Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_RealtimeUpdates" BuildFlags="">
                <Title m="2023-06-21T12:35:53.6119457Z">DataSeries Realtime Updates</Title>
                <ContentsTitle m="2023-06-21T12:39:30.7987217Z">DataSeries Realtime Updates</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T14:07:46.7921736Z">&lt;P&gt;As previously covered any modification to the DataSeries e.g. via calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#append"&gt;append()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#insert"&gt;insert()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#update"&gt;update()&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeat"&gt;remove()&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#clear"&gt;clear()&lt;/A&gt; will trigger a redraw on the chart. &lt;/P&gt;
&lt;P&gt;Redraws are throttled so that a redraw only occurs every 1/60th of a second, no matter how often you update data. &lt;/P&gt;
&lt;P&gt;Below we're going to talk about the four modes of DataSeries Realtime updates and how to achieve them in SciChart.js.&lt;/P&gt;
&lt;H2&gt;Appending Data&lt;/H2&gt;
&lt;P&gt;Appending data is a&amp;nbsp;dynamic chart&amp;nbsp;scenario where you start off with 0..N X,Y values then append a new batch of X,Y values via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendRange"&gt;dataSeries.appendRange()&lt;/A&gt;. With the correct flags on the axis the chart will grow to fit all data. Memory grows until you stop appending or you reset the chart via calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#clear"&gt;dataSeries.clear()&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Here's an example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DynamicUpdates\Appending\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataSeriesApi/DynamicUpdates/Appending/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Replacing Data&lt;/H2&gt;
&lt;P&gt;Replacing data is a real-time scenario which would allow you to make a spectral-analyzer type chart, where all data is replaced every time the chart is updated. &lt;/P&gt;
&lt;P&gt;In SciChart.js, we achieve this by using&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#clear"&gt;dataSeries.clear()&lt;/A&gt; followed by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendRange"&gt;dataSeries.appendRange()&lt;/A&gt;. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DynamicUpdates\Replacing\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataSeriesApi/DynamicUpdates/Replacing/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Scrolling Data&lt;/H2&gt;
&lt;P&gt;Scrolling data can be achieved by appending then removing data so that a fixed number of points remains in the dataSeries. This can be achieved via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeRange"&gt;dataSeries.removeRange()&lt;/A&gt; then&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendRange"&gt;dataSeries.appendRange()&lt;/A&gt; but also you can use the new fifoCapacity flag available in SciChart.js v3.2. &lt;/P&gt;
&lt;P&gt;Below we have an example of each:&lt;/P&gt;
&lt;H3&gt;Scrolling using appendRange() removeRange()&lt;/H3&gt;
&lt;P&gt;Here's an example of how to use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#removeRange"&gt;dataSeries.removeRange()&lt;/A&gt; then&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html#appendRange"&gt;dataSeries.appendRange()&lt;/A&gt;&amp;nbsp; to scroll a chart.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DynamicUpdates\ScrollingAppendRemove\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataSeriesApi/DynamicUpdates/ScrollingAppendRemove/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Scrolling using fifoCapacity&lt;/H3&gt;
&lt;P&gt;Since SciChart.js v3.2, we've introduced a much more efficient way to auto-discard old points. By setting &lt;STRONG&gt;dataSeries.fifoCapacity &lt;/STRONG&gt;= N, when the capacity is exceeded, old points are discarded. FIFO series are a special case and are internally handled as a circular buffer. They cannot be resized. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DynamicUpdates\ScrollingFifo\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataSeriesApi/DynamicUpdates/ScrollingFifo/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Sweeping Data&lt;/H2&gt;
&lt;P&gt;Another mode that we've added in SciChart.js v3.2, and the last real-time update mode is Fifo Sweeping. &lt;/P&gt;
&lt;P&gt;With &lt;STRONG&gt;dataSeries.fifoCapacity&lt;/STRONG&gt; set, also setting &lt;STRONG&gt;dataSeries.fifoSweeping&lt;/STRONG&gt; = true, setting an optional&amp;nbsp;&lt;STRONG&gt;dataSeries.fifoSweepingGap&lt;/STRONG&gt; and having the correct type of xAxis or modulation of x-data,&amp;nbsp;you can achieve allowing the chart to wrap-around once the trace reaches the right edge of the viewport. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataSeriesApi\DynamicUpdates\SweepingFifo\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataSeriesApi/DynamicUpdates/SweepingFifo/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Note: Sweeping requires a few special conditions. &lt;STRONG&gt;fifoCapacity&lt;/STRONG&gt; must be set and &lt;STRONG&gt;fifoSweeping&lt;/STRONG&gt; = true. Next, you must either use a &lt;STRONG&gt;CategoryAxis&lt;/STRONG&gt; on the xAxis, or, modulate your data.&lt;/P&gt;
&lt;P&gt;You can use &lt;STRONG&gt;NumericAxis&lt;/STRONG&gt;&amp;nbsp;but you must modulate your data. X must range from 0...fifoCapacity. In the example above we set &lt;STRONG&gt;xValue[i] = i % fifoCapacity&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;See a worked example at the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-vital-signs-ecg-medical-chart-example" target=_blank&gt;ECG/Vital Signs monitor demo&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a939c1ec-24a9-46dd-95ca-72654dd45e42" Status="New Topic" CreatedOn="2023-08-03T19:34:34.9846898Z" ModifiedOn="2023-08-04T14:14:48.1638068Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_PointMetadata_PaletteProviders" BuildFlags="">
                <Title m="2023-08-03T19:36:16.4441801Z">Metadata and PaletteProviders</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-08-04T14:14:48.1638068Z">&lt;P&gt;Using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;&amp;nbsp;you can control the colour of data-points, line segments or columns / bars based on a programatic rule, e.g. if Y&amp;gt;5 or index &amp;lt; 100.&lt;/P&gt;
&lt;P&gt;By combining this with Metadata now you can control the point colour based on any javascript object. Useful if you want to host additional data in your chart such as validity of data or alarm/alert values alongside x-y points.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;DataSeries PointMetadata API&lt;/A&gt;&amp;nbsp;which will show you how to setup a DataSeries with point metadata (javascript objects). 
&lt;LI&gt;Also take a look at the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;&amp;nbsp;docs to find out how to programmatically change series-color on a per-point basis. &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Example: Metadata + PaletteProviders&lt;/H2&gt;
&lt;P&gt;Below is a worked example showing how to store series point colours in metadata and render them using a custom paletteprovider.&lt;/P&gt;
&lt;P&gt;Let's start off by creating the PaletteProvider:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataPaletteProviders\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;By inheriting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/defaultpaletteprovider.html"&gt;DefaultPaletteProvider&lt;/A&gt; we can override functions like&amp;nbsp;overrideStrokeArgb, overrideFillArgb and overridePointMarkerArgb. Returning a colour code in Uint ARGB format overrides the colour for that data-point. Returning undefined uses the default series colour.&lt;/P&gt;
&lt;P&gt;Next, we can apply the PaletteProvider and metadata to a chart like this.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataPaletteProviders\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataPaletteProviders\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/MetadataPaletteProviders/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;To learn more about the PaletteProvider API, see the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;documentation pages here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f6efccfe-43eb-4f99-abfe-11299fdecbcc" Status="New Topic" CreatedOn="2023-08-03T19:36:26.5003077Z" ModifiedOn="2023-08-04T16:12:11.3527954Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_PointMetadata_Tooltips" BuildFlags="">
                <Title m="2023-08-03T19:36:47.9302575Z">Metadata and Tooltips</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-08-04T16:12:11.3527954Z">&lt;P&gt;Using the ChartModifier API you can add tooltips and cursors to a SciChartSurface. By Combining this with Metadata you can include additional properties or data other than x,y in your tooltip labels. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;DataSeries PointMetadata API&lt;/A&gt;&amp;nbsp;which will show you how to setup a DataSeries with point metadata (javascript objects). 
&lt;LI&gt;Also take a look at the&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;&amp;nbsp;docs to find out how to add tooltips to charts. &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Example: Metadata + RolloverModifier &lt;/H2&gt;
&lt;P&gt;Maybe you want certain property from Metadata to appear in tooltips. If so, you can use some code like this:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\AddingMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\AddingMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/AddingMetadata/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Example: Metadata + CursorModifier &lt;/H2&gt;
&lt;P&gt;The CursorModifier is very similar, however a different template is used to convert an array of SeriesInfo into tooltip lines. &lt;/P&gt;
&lt;P&gt;Modify the above code like this to make metadata work with the CursorModifier. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataCursorModifier\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataCursorModifier\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's the output from the above:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/MetadataCursorModifier/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6b3501ee-5886-476b-b661-0964a70da63a" Status="New Topic" CreatedOn="2023-08-03T19:36:51.0676683Z" ModifiedOn="2023-08-04T17:00:48.1451169Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataSeries_PointMetadata_HitTest" BuildFlags="">
                <Title m="2023-08-03T19:37:05.1995807Z">Metadata and HitTest</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-08-04T17:00:48.1451169Z">&lt;P&gt;The Hi-Test API is a low level API used to extract information about chart series under the mouse. Our own in-house RolloverModifier and CursorModifier are based on this API. You can use it too to create Drill-downs and custom data-inspections. &lt;/P&gt;
&lt;P&gt;This article purpose is to keep it brief and show you how to store and retrieve Metadata from datapoints during a Hit-Test operation. Further reading about these APIs can be found below. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Background reading:&amp;nbsp;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you haven't already, read the article&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;DataSeries PointMetadata API&lt;/A&gt;&amp;nbsp;which will show you how to setup a DataSeries with point metadata (javascript objects). 
&lt;LI&gt;Also take a look at the&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit-Test API&lt;/A&gt;&amp;nbsp;docs to describe how to perform chart hit-testing (inspection on click, hover) &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Example: Metadata + HitTest&lt;/H2&gt;
&lt;P&gt;Here's a code sample showing how to extract metadata from a HitTest result. This is as simple as getting HitTestInfo.metadata&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\PointMetadata\MetadataHitTest\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Click on the data-points in the example below to see the Hit-Test result.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/PointMetadata/MetadataHitTest/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="2fdb84d8-d0f7-43f8-a0e7-aef3e873ab33" AutoIndex="false">
            <Caption m="2021-09-16T16:51:33.1501953Z">Filters API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="681061b4-68ce-47a5-8b9c-920651d9dc6c" Status="New Topic" CreatedOn="2021-09-16T16:51:38.2924818Z" ModifiedOn="2021-09-29T11:46:24.5723678Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="What is the Filters API" BuildFlags="">
                <Title m="2021-09-29T09:41:27.2003482Z">What is the Filters API</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T11:46:24.5723678Z">&lt;P&gt;The Filters and Transforms API was added to SciChart.js v2.x&amp;nbsp;as a way to create derived data, filters, indicators or perform functions on your data easily and simply.&lt;/P&gt;
&lt;P&gt;SciChart comes with a number of filters built-in. The Filters API can be used easily where you want to:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Add a Linear Trendline to a chart 
&lt;LI&gt;Perform a Moving Average on an underlying DataSeries 
&lt;LI&gt;Offset and Scale a data-series 
&lt;LI&gt;Calculate the ratio of&amp;nbsp;two DataSeries 
&lt;LI&gt;Apply a custom function to each datapoint, allowing you to do high-pass, low-pass or any other kind of filtering or per-point transformation &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The Filters API is also extremely configurable and allow you to create custom filters - the possibilities of this API really are endless!&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Overview.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: See the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-trend-ma-ratio" target=_blank&gt;Trendline, Moving Average and Ratio Filters example&lt;/A&gt; in the SciChart.Js.Examples&lt;/P&gt;
&lt;H2&gt;Filters Built-in to SciChart.js&lt;/H2&gt;
&lt;P&gt;For each kind of filter, there may be multiple types specific to the type of DataSeries that it will be attached to. These are listed below.&lt;/P&gt;
&lt;P&gt;For example, a &lt;STRONG&gt;ScaleOffsetFilter&lt;/STRONG&gt; which applies a scale (mutiplier) or offset (addition) to data series values has sub-types &lt;STRONG&gt;XyScaleOffsetFilter&lt;/STRONG&gt;, &lt;STRONG&gt;XyyScaleOffsetFilter&lt;/STRONG&gt;, &lt;STRONG&gt;XyzScaleOffsetFilter&lt;/STRONG&gt; and &lt;STRONG&gt;OhlcScaleOffsetFilter&lt;/STRONG&gt; - one for each type of dataseries.&lt;/P&gt;
&lt;P&gt;All types apart from Ohlc accept any type of DataSeries as input. See &lt;STRONG&gt;[Specifying the Input field]&lt;/STRONG&gt; below.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;ScaleOffsetFilter&lt;/STRONG&gt;&amp;nbsp;- Applies a scale (multiplier) and an offset (addition) to each field value. 
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;XyScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyyScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyzScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;OhlcScaleOffsetFilter&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;LI&gt;&lt;STRONG&gt;XyLinearTrendFilter&lt;/STRONG&gt; -&amp;nbsp;Calculates a straight line best-fit for your dataseries. 
&lt;LI&gt;&lt;STRONG&gt;XyMovingAverageFilter&lt;/STRONG&gt; -&amp;nbsp;Calculates the moving average of your dataseries over the specified length. 
&lt;LI&gt;&lt;STRONG&gt;XyRatioFilter&lt;/STRONG&gt; -&amp;nbsp;Returns a series where each point is the ratio of the original series and the given divisorSeries. 
&lt;LI&gt;&lt;STRONG&gt;CustomFilter&lt;/STRONG&gt; -&amp;nbsp;A class that allows you to create a simple custom filter by just specifying a filter function that will be applied to each data point. 
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;XyCustomFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyyCustomFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyzCustomFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;OhlcCustomFilter&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Updating Data with Filters&lt;/H2&gt;
&lt;P&gt;The beauty of the Filters API is that when the underlying data updates, the filter automatically updates. There is no need to recalculate your filter - SciChart does this for you! Where possible, only the changed points are recalculated.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See the &lt;STRONG&gt;XyMovingAverageFilter&lt;/STRONG&gt; page for an example of how to update charts with filters. All filters have an &lt;STRONG&gt;originalSeries&lt;/STRONG&gt; property which you can use to access the original data, though in Typescript you will need to cast it to the correct type before you can use the data manipulation methods.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Daisy-Chaining Filters&lt;/H2&gt;
&lt;P&gt;Fitlers may be daisy chained or cascaded in order to combine their effects. Changing the underlying DataSeries will cause all filters in the chain to trigger an update.&lt;/P&gt;
&lt;H2&gt;Specifying the Input Field&lt;/H2&gt;
&lt;P&gt;An Xy filter will produce an XyDataSeries, but it can accept any series type as input. The options includes a [field] property of type &lt;STRONG&gt;EDataSeriesField&lt;/STRONG&gt;, which determines which field on the original series will be the input. For Xyy filters there are yField and y1Field, and for Xyz filters there are yField and zField options. See the &lt;STRONG&gt;XyLinearTrendFilter&lt;/STRONG&gt; page for an example.&lt;/P&gt;
&lt;H2&gt;Creating Advanced Custom Filters&lt;/H2&gt;
&lt;P&gt;One of the most powerful features of the Filters API is the ability to create custom filters.&lt;/P&gt;
&lt;P&gt;To create an Advanced Custom Filter we simply override the &lt;STRONG&gt;FilterBase&lt;/STRONG&gt; of the type of series we want ie (&lt;STRONG&gt;XyFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;XyyFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;XyzFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;OhlcFilterBase&lt;/STRONG&gt;). We must then override a few methods to perform the filtering.&lt;/P&gt;
&lt;P&gt;The base class handles the field mapping in the &lt;STRONG&gt;getOriginalYValues&lt;/STRONG&gt; method (and &lt;STRONG&gt;getOriginalY1Values&lt;/STRONG&gt; for Xyy, and similar for the other types). See the &lt;STRONG&gt;CustomFilter&lt;/STRONG&gt; page for more information or the online demo&amp;nbsp;&lt;A href="http://demo.scichart.com/javascript-custom-filters" target=_blank&gt;Realtime Aggregation using Advanced Custom Filter&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Filters API Demos&lt;/H2&gt;
&lt;P&gt;Several demos are included in our JavaScript Chart Examples Suite. Please find them below:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="http://demo.scichart.com/javascript-percentage-change" target=_blank&gt;Percentage Change using XyScaleOffsetFilter Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="http://demo.scichart.com/javascript-trend-ma-ratio" target=_blank&gt;Ratio Filter with Chained Trend and Moving Average Example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="http://demo.scichart.com/javascript-custom-filters" target=_blank&gt;Realtime Aggregation using Advanced Custom Filter Example&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b4c4c424-112a-40c4-94df-e091e43ce6ef" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cce20b3a-f65b-4260-9f46-3c27aab8673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6b2ee7fa-4a6a-4177-801e-1b8e5a9d2348" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2d57bd08-3bcc-42d0-b097-7d90e0eed841" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="064a8784-a0b0-48ad-90dd-2917297856a2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="38e1c78c-1eb0-4d71-a6ae-e8bb16ace2c3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d62d3048-eecd-4e3b-85a0-7115d98a2440" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="709e9163-1b08-40d8-8d9c-d1c5f23d8ca3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="68b69103-2ec3-457f-a1ab-c4b32ed72b37" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="cce20b3a-f65b-4260-9f46-3c27aab8673b" Status="New Topic" CreatedOn="2021-09-16T16:51:47.0615895Z" ModifiedOn="2021-09-29T10:10:21.5934765Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Scale Offset Filters" BuildFlags="">
                <Title m="2021-09-29T09:52:43.4711015Z">Scale Offset Filters</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T09:52:36.8182633Z">&lt;P&gt;The ScaleOffsetFilter Applies a scale (multiplier) and an offset (addition) to each field value in a Data Series. There is a specific filter for each type of dataseries:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;XyScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyyScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;XyzScaleOffsetFilter&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;OhlcScaleOffsetFilter&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Applying Scale &amp;amp; Offset to Chart Data&lt;/H2&gt;
&lt;P&gt;To create an &lt;STRONG&gt;XyScaleOffsetFilter&lt;/STRONG&gt; and apply it to your chart, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Scale and offset data&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyScaleOffsetFilter } from 'scichart/Charting/Model/Filters/XyScaleOffsetFilter';&lt;/P&gt;
&lt;P&gt;...&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create('scichart-div-id');&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;// Original Data&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1, 2, 3, 4],&lt;BR&gt;});&lt;BR&gt;const originalLine = new FastLineRenderableSeries(wasmContext, { dataSeries, stroke: "#5555ff" });&lt;/P&gt;
&lt;P&gt;// Create the filter, passing in the original series&lt;BR&gt;const scaleOffsetFilter = new XyScaleOffsetFilter(dataSeries, { scale: 2, offset: -3 });&lt;BR&gt;const filteredLine = new FastLineRenderableSeries(wasmContext, { dataSeries: scaleOffsetFilter, stroke: "#cc6600" });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(originalLine, filteredLine);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This produces the following chart where the orange filtered data is twice as steep, and shifted down by 3.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_ScaleOffset.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;With the Filters API in SciChart.js, if you update the original data, or any of the parameters of the filter, the chart will automatically redraw.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Note that ScaleOffsetFilter only changes data in the Y direction. If you want to shift data in X, create a&amp;nbsp;&lt;A href="064a8784-a0b0-48ad-90dd-2917297856a2"&gt;Complex Custom Filter&lt;/A&gt;. The other ScaleOffsetFilters apply the same transformation to every non-x field. If you want to apply different filters to different fields, create a&amp;nbsp;&lt;A href="064a8784-a0b0-48ad-90dd-2917297856a2"&gt;Complex Custom Filter&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Specifying the Input Field&lt;/H2&gt;
&lt;P&gt;An Xy filter will produce an XyDataSeries, but it can accept any series type as input. The options includes a &lt;STRONG&gt;field&lt;/STRONG&gt; property of type &lt;STRONG&gt;EDataSeriesField&lt;/STRONG&gt;, which determines which field on the original series will be the input. For Xyy filters there are yField and y1Field, and for Xyz filters there are yField and zField options.&lt;/P&gt;
&lt;H2&gt;Percentage Change&lt;/H2&gt;
&lt;P&gt;You can use a ScaleOffset filter to show the percentage change in a series, which is useful for comparing data at different scales. For a running example of this with code see our&amp;nbsp;&lt;A href="http://demo.scichart.com/javascript-percentage-change" target=_blank&gt;Percentage Change demo&lt;/A&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5696922c-76d4-48d5-8850-260252060eeb" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="681061b4-68ce-47a5-8b9c-920651d9dc6c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="04d5b7f5-fbd4-4d47-88f4-84477d6d2aba" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="79201a75-b185-4a8c-8114-50ad35a14ad4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="064a8784-a0b0-48ad-90dd-2917297856a2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="44146a32-ab86-4adc-8947-9cdefb5a9c4a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d62d3048-eecd-4e3b-85a0-7115d98a2440" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="24da6ff7-ea1f-494e-9b35-10606c03fa25" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="68b69103-2ec3-457f-a1ab-c4b32ed72b37" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" Status="New Topic" CreatedOn="2021-09-16T16:57:20.236363Z" ModifiedOn="2021-09-29T10:10:35.7721442Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Linear Trendline Filter" BuildFlags="">
                <Title m="2021-09-29T10:05:35.5602649Z">Linear Trendline Filter</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T10:05:27.945582Z">&lt;P&gt;The Linear Trend filter calculates a straight line best-fit for your DataSeries. This can then be plotted as a line series on the chart.&lt;/P&gt;
&lt;H2&gt;Applying&amp;nbsp;a Linear Trendline&amp;nbsp;to Chart Data&lt;/H2&gt;
&lt;P&gt;To calculate a Linear Trendline use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Linear Trendline&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyScatterRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyLinearTrendFilter } from 'scichart/Charting/Model/Filters/XyLinearTrendFilter';&lt;BR&gt;...&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create('scichart-div-id-2');&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;// Original Data&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1, 3, 2, 4, 6],&lt;BR&gt;});&lt;BR&gt;const originalLine = new XyScatterRenderableSeries(wasmContext, { dataSeries });&lt;/P&gt;
&lt;P&gt;// Create the filter, passing in the original series&lt;BR&gt;const linearTrendFilter = new XyLinearTrendFilter(dataSeries);&lt;BR&gt;const filteredLine = new FastLineRenderableSeries(wasmContext, { dataSeries: linearTrendFilter, stroke: "#cc6600" });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(originalLine, filteredLine);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Trendline1.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Accessing Trendline Properties&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;XyLinearTrendFilter&lt;/STRONG&gt; has properties for slope, intercept and correlation which you can use to access the parameters of the trend line.&lt;/P&gt;
&lt;P&gt;For example you could display them using an annotation like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Trendline properties&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { TextAnnotation } from "scichart/Charting/Visuals/Annotations/TextAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;const textAnnotation = new TextAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 20,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; text: `Slope: ${linearTrendFilter.slope}, y-intercept: ${linearTrendFilter.intercept}, correlation: ${linearTrendFilter.correlation.toFixed(3)}`&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.annotations.add(textAnnotation);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Trendline2.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Specifying the Input Field&lt;/H2&gt;
&lt;P&gt;The XyLinearTrendFilter produces an XyDataSeries, but it can accept any series type as input. The options includes a&amp;nbsp;&lt;STRONG&gt;field&lt;/STRONG&gt; property of type &lt;STRONG&gt;EDataSeriesField&lt;/STRONG&gt;, which determines which field on the original series will be the input.&lt;/P&gt;
&lt;P&gt;This example takes a OHLC Series as input and plots separate trendlines for the High and Low values:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Trendline properties&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { OhlcDataSeries } from 'scichart/Charting/Model/OhlcDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { FastCandlestickRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastCandlestickRenderableSeries';&lt;BR&gt;import { XyLinearTrendFilter } from 'scichart/Charting/Model/Filters/XyLinearTrendFilter';&lt;BR&gt;import { EDataSeriesField } from "scichart/Charting/Model/Filters/XyFilterBase";&lt;BR&gt;...&lt;BR&gt;&amp;nbsp;// Original Data&lt;BR&gt;const dataSeries = new OhlcDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; openValues: [1, 3, 2, 4, 6],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; highValues: [5, 4, 7, 6.5, 8],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowValues: [0.5, 2, 1.5, 2.5, 4],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; closeValues: [3, 2.5, 5, 3, 5],&lt;BR&gt;});&lt;BR&gt;const rsCandles = new FastCandlestickRenderableSeries(wasmContext, { dataSeries });&lt;/P&gt;
&lt;P&gt;// Create the filters, passing in the original series and specifying the input field&lt;BR&gt;const linearTrendHigh = new XyLinearTrendFilter(dataSeries, { field: EDataSeriesField.High });&lt;BR&gt;const linearTrendLow = new XyLinearTrendFilter(dataSeries, { field: EDataSeriesField.Low });&lt;BR&gt;const rsHigh = new FastLineRenderableSeries(wasmContext, { dataSeries: linearTrendHigh, stroke: "#ddff33", strokeThickness: 3 });&lt;BR&gt;const rsLow = new FastLineRenderableSeries(wasmContext, { dataSeries: linearTrendLow, stroke: "#ff5599", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(rsCandles, rsHigh, rsLow);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Trendline3.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="11d3a2c7-debb-4473-a3df-e2d981c0517e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="681061b4-68ce-47a5-8b9c-920651d9dc6c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3d2428ba-1244-4e93-ad89-52ed89ec4cf2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cce20b3a-f65b-4260-9f46-3c27aab8673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a4f9c66f-b0a1-497f-a8a0-c53c703f3b19" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="064a8784-a0b0-48ad-90dd-2917297856a2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="930801e0-4703-4d2d-8c84-4bc0c66821aa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d62d3048-eecd-4e3b-85a0-7115d98a2440" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0c423122-1878-4ed4-b47e-04eb021632de" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="68b69103-2ec3-457f-a1ab-c4b32ed72b37" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="68b69103-2ec3-457f-a1ab-c4b32ed72b37" Status="New Topic" CreatedOn="2021-09-29T10:05:53.6729237Z" ModifiedOn="2021-09-29T10:14:10.0454047Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MovingAverageFilter" BuildFlags="">
                <Title m="2021-09-29T10:14:10.0444072Z">Moving Average Filter</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T10:13:59.1064769Z">&lt;P&gt;The XyMovingAverageFilter performs a simple moving average with a specified period length, resulting in a smoothed waveform derived from your data.&lt;/P&gt;
&lt;H2&gt;Applying a Moving Average to Chart Data&lt;/H2&gt;
&lt;P&gt;To calculate a moving average and apply to a chart, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Moving average&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyMovingAverageFilter } from 'scichart/Charting/Model/Filters/XyMovingAverageFilter';&lt;BR&gt;...&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create('scichart-div-id-4');&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.01, 0.01), autoRange: EAutoRange.Always }));&lt;/P&gt;
&lt;P&gt;// A function to get some data - sinewave plus a randm factor&lt;BR&gt;const getData = (start, count) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let xValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let yValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = start; i &amp;lt; start + count; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(2 * Math.sin(i/10) + Math.random());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { xValues, yValues };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Original Data&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, getData(0, 100));&lt;BR&gt;const originalLine = new FastLineRenderableSeries(wasmContext, { dataSeries, stroke: "#5555ff", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;// Create the filter, passing in the original series&lt;BR&gt;const movingAverage = new XyMovingAverageFilter(dataSeries, { length: 10 });&lt;BR&gt;const filteredLine = new FastLineRenderableSeries(wasmContext, { dataSeries: movingAverage, stroke: "#cc6600", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;// Another filter using the same original data, but different length&lt;BR&gt;const movingAverage30 = new XyMovingAverageFilter(dataSeries, { length: 30});&lt;BR&gt;const filteredLine30 = new FastLineRenderableSeries(wasmContext, { dataSeries: movingAverage30, stroke: "#55dd55", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(originalLine, filteredLine, filteredLine30);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_MovingAverage.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Updating Moving Averages Dynamically&lt;/H2&gt;
&lt;P&gt;When the underlying data updates, the filter automatically updates. There is no need to recalculate your filter: SciChart.js does this for you!&lt;/P&gt;
&lt;P&gt;Where possible, only the changed points are recalculated. In addition, updating the parameters of the filter, in this case the length, will also recalulate the filter and redraw.&lt;/P&gt;
&lt;P&gt;If we add the following to the above example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Moving average&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Add some additional data every 100ms&lt;BR&gt;const updateFunc = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (dataSeries.count() &amp;lt; 300) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { xValues, yValues } = getData(dataSeries.count(), 10);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.appendRange(xValues, yValues);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(updateFunc, 100);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Start the update&lt;BR&gt;setTimeout(updateFunc, 1000);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We get this output.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/movingAverage.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="340286db-a061-4c02-a3ac-f08de14ac48c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="681061b4-68ce-47a5-8b9c-920651d9dc6c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5b9d66bc-694c-4f63-bf7f-18d4941af774" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cce20b3a-f65b-4260-9f46-3c27aab8673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fa12f857-702e-4318-acca-0ad30f0749c4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="31a12b4e-f086-4f9e-9e4e-770e9afd07d9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d62d3048-eecd-4e3b-85a0-7115d98a2440" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e199dc3b-bd19-44ae-8c52-1071a038e826" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="064a8784-a0b0-48ad-90dd-2917297856a2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d62d3048-eecd-4e3b-85a0-7115d98a2440" Status="New Topic" CreatedOn="2021-09-16T16:52:55.0398912Z" ModifiedOn="2021-09-29T10:23:40.9014035Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Ratio Filter" BuildFlags="">
                <Title m="2021-09-29T10:23:40.9004063Z">Ratio Filter</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T10:23:23.0914419Z">&lt;P&gt;The XyRatioFilter returns a series where each point is the ratio of the original series and the given divisor DataSeries.&lt;/P&gt;
&lt;P&gt;The original series and divisor series can be different types, and there is a &lt;STRONG&gt;divisorField&lt;/STRONG&gt; option to specify the field to use from the divisorSeries.&lt;/P&gt;
&lt;H2&gt;Calculating a Ratio of Two Chart Series&lt;/H2&gt;
&lt;P&gt;To create a ratio filter and apply to a chart, use the code below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Ratio filter example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyMovingAverageFilter } from 'scichart/Charting/Model/Filters/XyMovingAverageFilter';&lt;BR&gt;...&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create('scichart-div-id-4');&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.01, 0.01), autoRange: EAutoRange.Always }));&lt;/P&gt;
&lt;P&gt;// A function to get some data - sinewave plus a randm factor&lt;BR&gt;const getData = (start, count) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let xValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let yValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = start; i &amp;lt; start + count; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(2 * Math.sin(i/10) + Math.random());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { xValues, yValues };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Original Data&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, getData(0, 100));&lt;BR&gt;const originalLine = new FastLineRenderableSeries(wasmContext, { dataSeries, stroke: "#5555ff", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;// Create the filter, passing in the original series&lt;BR&gt;const movingAverage = new XyMovingAverageFilter(dataSeries, { length: 10 });&lt;BR&gt;const filteredLine = new FastLineRenderableSeries(wasmContext, { dataSeries: movingAverage, stroke: "#cc6600", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;// Another filter using the same original data, but different length&lt;BR&gt;const movingAverage30 = new XyMovingAverageFilter(dataSeries, { length: 30});&lt;BR&gt;const filteredLine30 = new FastLineRenderableSeries(wasmContext, { dataSeries: movingAverage30, stroke: "#55dd55", strokeThickness: 3 });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(originalLine, filteredLine, filteredLine30);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This produces the following chart. We also added a LegendModifier to make it clear which line is which:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_Ratio.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The ratio filter requires that the original series and divisor series have the same number of elements.&lt;/P&gt;
&lt;P&gt;When you add or remove data, the filter will not update until both series have been updated. It does not matter which series you update first.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="aa75e8fa-0300-4f7c-91c4-f40e51e43090" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="681061b4-68ce-47a5-8b9c-920651d9dc6c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eb310202-75ad-4c3d-b5fc-755d9b8077d9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cce20b3a-f65b-4260-9f46-3c27aab8673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2ded269d-8ac2-41eb-94e8-9f27d766e3c7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="338034d6-1bd7-4f28-b90c-ba98bc3376d6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="68b69103-2ec3-457f-a1ab-c4b32ed72b37" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0699b047-1a49-4364-9e3e-51541513ad64" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="064a8784-a0b0-48ad-90dd-2917297856a2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="064a8784-a0b0-48ad-90dd-2917297856a2" Status="New Topic" CreatedOn="2021-09-16T16:52:40.3714293Z" ModifiedOn="2021-09-30T17:13:54.4497595Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating a Custom Filter" BuildFlags="">
                <Title m="2021-09-29T11:24:25.8472673Z">Creating a Custom Filter</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-30T17:13:54.4497595Z">&lt;P&gt;As well as several filters out of the box, such as Moving Average, Linear Trendline, Scale &amp;amp; Offset and Ratio filter, you can also create custom filters or data transforms in SciChart.js&lt;/P&gt;
&lt;P&gt;There are two levels of filter customization, simple and advanced:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;If you just need to apply a transformation or filter function to each data point, use a simple &lt;STRONG&gt;Custom Filter&lt;/STRONG&gt; by creating an instance of one of the CustomFilter types, and set your filter function. 
&lt;LI&gt;If you want to totally reshape your data, or perform transformations that need access to the entire dataSeries, create an &lt;STRONG&gt;Advanced Custom Filter&lt;/STRONG&gt; by extending one of the FilterBase classes. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Simple Custom Filters&lt;/H2&gt;
&lt;P&gt;There are Custom Filter classes for each of the main series types:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;XyCustomFilter 
&lt;LI&gt;XyyCustomFilter 
&lt;LI&gt;XyzCustomFilter 
&lt;LI&gt;OhlcCustomFilter &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;They all have a &lt;STRONG&gt;filterFunction&lt;/STRONG&gt; of type &lt;STRONG&gt;(index: number, y: number) =&amp;gt; number&lt;/STRONG&gt; which will be applied to each&amp;nbsp;data value in the series. The multiValue series types have additional properties for each of the data values.&lt;/P&gt;
&lt;P&gt;E.g. for an XyyCustomFilter you can potentially apply different functions to y and y1 by setting &lt;STRONG&gt;filterfunction&lt;/STRONG&gt; and &lt;STRONG&gt;y1filterFunction&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;For OhlcCustomFilter, the &lt;STRONG&gt;closefilterFunction&lt;/STRONG&gt; will apply to any field which does not have an explicit function set.&lt;/P&gt;
&lt;H3&gt;Worked Example: Excluding data from a chart depending on Y-value&lt;/H3&gt;
&lt;P&gt;The following worked example demonstrates how to create a Simple custom filter. We use a filterFunction and exclude any values that are inside the range y=0.33 to 0.66 by returning NaN.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;simple custom filter&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create('scichart-div-id-6');&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;// A function to get random data&lt;BR&gt;const getData = (start, count) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let xValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let yValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = start; i &amp;lt; start + count; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(Math.random());&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { xValues, yValues };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// Original Data&lt;BR&gt;const dataSeries = new XyDataSeries(wasmContext, getData(0, 1000));&lt;/P&gt;
&lt;P&gt;// A function to exclude the middle thrid of the data&lt;BR&gt;const midRangeFilter = (index, y) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (y &amp;lt; 0.33 || y &amp;gt; 0.66) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Return NaN for data you want to exclude&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return NaN;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// Create the filter, passing in the original series&lt;BR&gt;const customFilter = new XyCustomFilter(dataSeries, { filterFunction: midRangeFilter });&lt;BR&gt;const filteredSeries = new XyScatterRenderableSeries(wasmContext, { dataSeries: customFilter });&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(filteredSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Filters_SimpleCustomFilter.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;When creating a filtering function (as opposed to a transformation function) return NaN for points from the original dataset you want to exclude.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Reusable Simple Custom Filters&lt;/H2&gt;
&lt;P&gt;If you want to be able to reuse your simple filter but with some parameters, you can extend the relevant &lt;STRONG&gt;CustomFilter&lt;/STRONG&gt; class and embed your function in it.&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;class RangeFilter extends XyCustomFilter {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(originalSeries, options) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(originalSeries, options);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.upper = options.upper ?? 0.66;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.lower = options.lower ?? 0.33;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Using an arrow function ensures that 'this' is correct&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setting the property causes filterAll to be run.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.filterFunction = (index, y) =&amp;gt; (y &amp;lt; this.lower || y &amp;gt; this.upper) ? y : NaN;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;...&lt;BR&gt;// Create an instance, passing in parameters&lt;BR&gt;const rangeFilter = new RangeFilter(dataSeries, { upper: 0.5, lower: 0.1 });&lt;BR&gt;const filteredSeries = new XyScatterRenderableSeries(wasmContext, { dataSeries: rangeFilter });&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Options for the filter&lt;BR&gt;interface IRangeFilterOptions extends IXyCustomFilterOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; upper: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; lower: number;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// A Custom Filter that excludes data with a range&lt;BR&gt;class RangeFilter extends XyCustomFilter {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public upper = 0.66;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public lower = 0.33;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(originalSeries: BaseDataSeries, options: IRangeFilterOptions) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(originalSeries, options);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.upper = options?.upper ?? this.upper;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.lower = options?.lower ?? this.lower;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Using an arrow function ensures that 'this' is correct&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setting the property causes filterAll to be run.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.filterFunction = (index, y) =&amp;gt; (y &amp;lt; this.lower || y &amp;gt; this.upper) ? y : NaN;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;...&lt;BR&gt;// Create an instance, passing in parameters&lt;BR&gt;const rangeFilter = new RangeFilter(dataSeries, { upper: 0.5, lower: 0.1 });&lt;BR&gt;const filteredSeries = new XyScatterRenderableSeries(wasmContext, { dataSeries: rangeFilter });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Advanced Custom Filters&lt;/H2&gt;
&lt;P&gt;To create an Advanced Custom Filter we simply extend the FilterBase of the type of series we want ie (&lt;STRONG&gt;XyFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;XyyFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;XyzFilterBase&lt;/STRONG&gt;, &lt;STRONG&gt;OhlcFilterBase&lt;/STRONG&gt;). We must then implement the &lt;STRONG&gt;filterAll&lt;/STRONG&gt; method to perform filtering. Optionally, we can implement one or more of the following to gain performance if our transformation allows for partial recalculation.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;filterOnAppend(count: number): void 
&lt;LI&gt;filterOnUpdate(index: number): void 
&lt;LI&gt;filterOnInsert(startIndex: number, count: number): void 
&lt;LI&gt;filterOnRemove(startIndex: number, count: number): void 
&lt;LI&gt;onClear(): void &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;The base class handles the field mapping in the getOriginalYValues method (and getOriginalY1Values for Xyy, and similar for the other types).&lt;/P&gt;
&lt;P&gt;The constructor should take the originalSeries and an options class, and call super with these. It should also call filterAll if data is available, as this is not done by the base class.&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;simple custom filter&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;constructor(originalSeries: BaseDataSeries, options?: IXyFilterOptions) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(originalSeries, options);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (this.getOriginalCount() &amp;gt; 0) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.filterAll();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Worked Example - Advanced Custom Filters&lt;/H3&gt;
&lt;P&gt;You can find an example of an Advanced Custom Filter in the&amp;nbsp;&lt;A href="481993d4-64bd-4388-bb27-dba9b5784df7"&gt;SciChart.js Examples Suite&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Please see the&amp;nbsp;&lt;A href="http://demo.scichart.com/javascript-custom-filters" target=_blank&gt;Realtime Aggregation using Advanced Custom Filter Example&lt;/A&gt;&amp;nbsp;for more details.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e82b97e0-1472-4f07-8ebb-52a9006cb357" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="681061b4-68ce-47a5-8b9c-920651d9dc6c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="13ca8cfa-d461-4ca9-ae7e-de8fe5bc2eec" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="cce20b3a-f65b-4260-9f46-3c27aab8673b" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f894a780-d970-4794-9998-249a0e884863" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="dfdfc7d3-8a7a-4ad8-ad19-38c8de9c3753" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="beebc976-8f54-441d-856b-c2a2a3eee536" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="68b69103-2ec3-457f-a1ab-c4b32ed72b37" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8ce79687-c9d7-4b2a-bde8-4c93f3f05f8a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d62d3048-eecd-4e3b-85a0-7115d98a2440" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="a269d98f-6e02-493e-aa86-866861049871" AutoIndex="false">
            <Caption m="2016-09-08T12:06:18.271211Z">Styling and Theming</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="5760011e-fce8-440b-bdb5-470621e85012" Status="New Topic" CreatedOn="2019-08-15T08:27:59.6295222Z" ModifiedOn="2023-01-07T10:56:40.7874038Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - ThemeManager API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-07T10:56:40.7874038Z">&lt;P&gt;SciChart ships with a light and dark theme out of the box, which you can select and apply to the charts in your application. Most of the components of SciChart are also&amp;nbsp;stylable, and you can&amp;nbsp;&lt;A href="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a"&gt;create your own themes&lt;/A&gt;, so you can truly customize the chart to fit your application.&lt;/P&gt;
&lt;P&gt;You can view our themes live at the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-themes" target=_blank&gt;ThemeManager example, over at the SciChart.js Examples Suite&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;SciChart Dark Theme&lt;/H2&gt;
&lt;P&gt;SciChart had a dark theme before dark-mode was cool&amp;nbsp;:) Here's our&amp;nbsp;default theme, SciChart Dark,&amp;nbsp;in all it's glory below.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Applying Themes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { SciChartJSDarkv2Theme } from "scichart/Charting/Themes/SciChartJSDarkv2Theme";&lt;BR&gt;&lt;BR&gt;// For best results &amp;amp; applying to the loader animation, apply theme before chart creation&lt;BR&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create("div-element-id", { theme: new SciChartJSDarkv2Theme() });&lt;BR&gt;&lt;BR&gt;// Changing theme after creation&lt;BR&gt;sciChartSurface.applyTheme(new SciChartJSDarkv2Theme());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DarkThemev2.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;SciChart Light Theme&lt;/H2&gt;
&lt;P&gt;For applications with a white or lighter background color, we also ship a light theme. This is how it looks:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;/P&gt;
&lt;P&gt;// For best results &amp;amp; applying to the loader animation, apply theme before chart creation&lt;BR&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create("div-element-id", { theme: new SciChartJSLightTheme() });&lt;/P&gt;
&lt;P&gt;// Changing theme after creation&lt;BR&gt;&amp;nbsp;sciChartSurface.applyTheme(new SciChartJSLightTheme());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_LightTheme.png"&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;SciChart Navy Theme&lt;/H2&gt;
&lt;P&gt;In SciChart.js v3, we've added a new Navy theme. This looks great on both a light &amp;amp; dark background.&amp;nbsp;This can be enabled as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { SciChartJsNavyTheme } from "scichart/Charting/Themes/SciChartJsNavyTheme";&lt;/P&gt;
&lt;P&gt;// For best results &amp;amp; applying to the loader animation, apply theme before chart creation&lt;BR&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create("div-element-id", { theme: new SciChartJsNavyTheme() });&lt;/P&gt;
&lt;P&gt;// Changing theme after creation&lt;BR&gt;&amp;nbsp;sciChartSurface.applyTheme(new SciChartJsNavyTheme());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=left&gt;&lt;IMG border=0 alt="" src="images/ThemeManager_NavyTheme.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="aa9f1f67-9ddb-4981-967b-0b102f7bdbaf" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="270ad1c5-65d8-41c1-abfa-512c92a90061" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9d4694ea-a334-47f5-be19-2fe2f8866339" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a" Status="New Topic" CreatedOn="2020-09-11T16:40:23.5822343Z" ModifiedOn="2022-05-17T19:25:44.1726613Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - Creating a Custom Theme" BuildFlags="">
                <Title m="2021-03-29T17:58:36.8959296Z">Chart Styling - Creating a Custom Theme</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-05-17T19:25:44.1726613Z">&lt;P&gt;As well as the built-in&amp;nbsp;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;Light and Dark theme&lt;/A&gt;, with SciChart.js you can also create a custom theme. To do this, you will need to pass all the properties of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ithemeprovider.html"&gt;IThemeProvider&lt;/A&gt; interface to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#applytheme"&gt;SciChartSurface.applyTheme&lt;/A&gt; function.&lt;/P&gt;
&lt;P&gt;For example, the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;/P&gt;
&lt;P&gt;export async function createCustomTheme(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a custom theme by implementing all the properties from IThemeProvider&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customTheme = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisBorder: "Transparent",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitleColor: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsBackroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis3DBandsFill: "#1F3D6833",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisBandsFill: "#1F3D6833",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisPlaneBackgroundFill: "Transparent",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnFillBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cursorLineBrush: "#6495ED99",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultColorMapBrush: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0, color: "DarkBlue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0.5, color: "CornflowerBlue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 1, color: "#FF22AA" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBandSeriesFillColor: "#52CC5490",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBandSeriesLineColor: "#E26565FF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBodyBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downWickColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gridBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gridBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelBackgroundBrush: "#6495EDAA",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelBorderBrush: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelForegroundBrush: "#EEEEEE",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; legendBackgroundBrush: "#1D2C35",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeriesColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationBackground: "#0D213A",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationForeground: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; majorGridLineBrush: "#1F3D68",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minorGridLineBrush: "#102A47",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainAreaBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; overviewFillBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; planeBorderColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rolloverLineBrush: "#FD9F2533",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandFillBrush: "#99999933",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandStrokeBrush: "#99999977",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBackground: "#0D213A",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarGripsBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarViewportBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarViewportBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; shadowEffectColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotationBackground: "#6495EDAA",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotationForeground: "#EEEEEE",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tickTextBrush: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBandSeriesFillColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBandSeriesLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBodyBrush: "#6495EDA0",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upWickColor: "#6495ED"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.applyTheme(customTheme);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {IThemeProvider} from "scichart/Charting/Themes/IThemeProvider";&lt;/P&gt;
&lt;P&gt;export async function createCustomThemeTs(divId: string) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a custom theme by implementing all the properties from IThemeProvider&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customTheme: IThemeProvider = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisBorder: "Transparent",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitleColor: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsBackroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationsGripsBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis3DBandsFill: "#1F3D6833",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisBandsFill: "#1F3D6833",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisPlaneBackgroundFill: "Transparent",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnFillBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cursorLineBrush: "#6495ED99",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultColorMapBrush: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0, color: "DarkBlue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0.5, color: "CornflowerBlue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 1, color: "#FF22AA" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBandSeriesFillColor: "#52CC5490",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBandSeriesLineColor: "#E26565FF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downBodyBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; downWickColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gridBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gridBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelBackgroundBrush: "#6495EDAA",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelBorderBrush: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelForegroundBrush: "#EEEEEE",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; legendBackgroundBrush: "#1D2C35",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSeriesColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationBackground: "#0D213A",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loadingAnimationForeground: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; majorGridLineBrush: "#1F3D68",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minorGridLineBrush: "#102A47",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainAreaBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; mountainLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; overviewFillBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; planeBorderColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rolloverLineBrush: "#FD9F2533",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandFillBrush: "#99999933",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rubberBandStrokeBrush: "#99999977",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartBackground: "#0D213A",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarGripsBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarViewportBackgroundBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollbarViewportBorderBrush: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; shadowEffectColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotationBackground: "#6495EDAA",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; textAnnotationForeground: "#EEEEEE",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tickTextBrush: "#6495ED",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBandSeriesFillColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBandSeriesLineColor: "white",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upBodyBrush: "#6495EDA0",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; upWickColor: "#6495ED"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.applyTheme(customTheme);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in this output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_CustomTheme.png"&gt;&lt;/P&gt;
&lt;DIV align=center&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; All colors in SciChart.js are strings, which are HTML color codes. Supported values are 6-digit hex codes e.g. "#ADFF2F", 8-digit hex codes in RGBA format where the last two digits are opacity e.g. "#AAFF2F33" and rgba CSS color codes e.g. "rgba(173, 255, 47, 0.3)"&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;You can see an example live of creating a custom theme over at the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-custom-themes" target=_blank&gt;SciChart.js Examples Suite&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Inheriting a Built-In Theme&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;If you want to create a custom theme built on one of the default themes supplied with SciChart.js, you can use the JavaScript spread operator. For example. Say you wanted to base a theme on SciChartJSLightTheme but change the background to a gradient background and override gridline colours,&amp;nbsp;use code like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Inheriting Themes&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;/P&gt;
&lt;P&gt;export async function inheritThemeGradientBackground(divId) {&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a theme and inherit / override some properties&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = {... new SciChartJSLightTheme()};&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Override axis text label&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.tickTextBrush = "#ff6600";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Override gridlines&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.majorGridLineBrush = "#777";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.minorGridLineBrush = "#aaa";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Override background with a gradient&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.sciChartBackground = "radial-gradient(circle, #ffffff 0%, #eeeeee 50%, #AAAAAA 100%)"&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Apply theme&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following custom theme, based off one of our themes:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_InheritTheme.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e8618802-9532-4174-9d39-8c8c1b9b9d24" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="5760011e-fce8-440b-bdb5-470621e85012" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="08dfabf1-4f2c-453e-a785-ff883cd98708" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9d4694ea-a334-47f5-be19-2fe2f8866339" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b1baa67a-9319-47bc-b55b-20d1af724b63" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91ecf8cb-fdb5-494c-a73e-8653cd940de0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="64a2e709-cd5f-4cba-b5d9-4079079a9a9f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0088e945-90ec-4c22-9ebb-77ac52066462" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="9d4694ea-a334-47f5-be19-2fe2f8866339" Status="New Topic" CreatedOn="2020-09-11T16:40:37.1052199Z" ModifiedOn="2022-04-08T08:34:51.9759345Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - Style Chart Parts in Code" BuildFlags="">
                <Title m="2021-03-29T17:58:30.2277849Z">Chart Styling - Style Chart Parts in Code</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-04-08T08:34:51.9759345Z">&lt;P&gt;In addition to our&amp;nbsp;&lt;A href="5760011e-fce8-440b-bdb5-470621e85012"&gt;ThemeManager with light and dark themes&lt;/A&gt;, the ability to&amp;nbsp;&lt;A href="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a"&gt;create a custom theme&lt;/A&gt;, you can also style chart parts in code.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We have an example in our SciChart.js Examples Suite which shows how to do this - the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-styling-theming-in-code" target=_blank&gt;Styling a JavaScript Chart in Code example&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="JavaScript Chart Custom Theme by SciChart.js" src="images/Axis_styling.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt; the Styling Axis Gridlines, Labels example shows how to style chart-parts in code.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Take a look at the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-styling-theming-in-code" target=_blank&gt;Styling a JavaScript Chart in Code example&lt;/A&gt;&amp;nbsp;in our online demo which shows you how to style each individual chart part. The demo has link to source-code showing all the properties.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We also have a page that goes into detail on the various chart parts such as&amp;nbsp;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Axis Gridlines, Axis Ticks, Axis Labels that can be styled here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;and&amp;nbsp;&lt;A href="8deddadd-6171-496a-ab20-7332232c4c16"&gt;styling Axis Borders and Backgrounds here&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="c0cc88a6-9053-4a23-9af0-d69d287d3097" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="522bb84c-264c-4919-aa66-5f8272a72610" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="41a6f7e7-7ff9-4964-8146-0bdcca7eba52" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8deddadd-6171-496a-ab20-7332232c4c16" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6351c2d0-d53e-4a17-acbd-7c0d3554fe87" Status="New Topic" CreatedOn="2021-01-21T17:15:21.6539814Z" ModifiedOn="2021-09-23T14:41:12.2599237Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - Margin and Padding" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-23T14:41:12.2599237Z">&lt;P&gt;In SciChart.js v1.2 and above, we have introduced some properties that let you define the margin/padding inside the SciChartSurface, as well as certain chart parts such as Axis Labels and Axis Titles.&lt;/P&gt;
&lt;P&gt;Find out how to set these below.&lt;/P&gt;
&lt;H1&gt;SciChartSurface Padding&lt;/H1&gt;
&lt;P&gt;The SciChartSurface.padding property can be used to apply a top, right, bottom, left padding to the chart. This defines the spacing around the viewport area and to the chart edge (which includes series, gridlines and axis).&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartSurface_Padding.png"&gt;&lt;/P&gt;
&lt;P&gt;To set the padding, use this code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set SciChartSurface.padding&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Set padding via Thickness constructor&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;const top = 10;&lt;BR&gt;const right = 20;&lt;BR&gt;const bottom = 30;&lt;BR&gt;const left = 40;&lt;BR&gt;sciChartSurface.padding = new Thickness(top, right, bottom, left);&lt;BR&gt;&lt;BR&gt;// Set padding via string. Order is Top, Right, Bottom, Left&lt;BR&gt;sciChartSurface.padding = Thickness.fromString("10 20 30 40");&lt;BR&gt;&lt;BR&gt;// Set padding via single number. Top=Bottom=Right=Left&lt;BR&gt;sciChartSurface.padding = Thickness.fromNumber(10);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For example, to have a padding of zero and&amp;nbsp;make the chart render right to the edges of it's parent canvas, use this code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set chart padding to zero&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.padding = Thickness.fromNumber(0);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SciChartSurface_Padding_Zero.png"&gt;&lt;/P&gt;
&lt;H2&gt;Axis Label Padding&lt;/H2&gt;
&lt;P&gt;The Axis Labels have a default padding of 4 on all sides. This puts some spacing between the axis and the inner and outer edge of the chart.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that horizontal axis ignore axis padding left/right, and vertical axis ignore padding top/bottom.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To set some padding on the axis labels, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set Axis Label&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Set padding via Thickness constructor&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;sciChartSurface.padding = Thickness.fromNumber(10);&lt;BR&gt;&lt;BR&gt;const bottomXAxis = new NumericAxis(wasmContext);&lt;BR&gt;bottomXAxis.labelStyle.padding = new Thickness(10, 0, 30, 0);&lt;BR&gt;bottomXAxis.axisAlignment = EAxisAlignment.Bottom;&lt;BR&gt;sciChartSurface.xAxes.add(bottomXAxis);&lt;BR&gt;&lt;BR&gt;const rightYAxis = new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) });&lt;BR&gt;rightYAxis.labelStyle.padding = new Thickness(0, 30, 0, 10);&lt;BR&gt;rightYAxis.axisAlignment = EAxisAlignment.Right;&lt;BR&gt;sciChartSurface.yAxes.add(rightYAxis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis_LabelPadding.png"&gt;&lt;/P&gt;
&lt;H2&gt;Axis Title Padding&lt;/H2&gt;
&lt;P&gt;The Axis Titles have a default padding of&amp;nbsp;6 on all sides. This puts some spacing between the axis title and&amp;nbsp;row of labels and&amp;nbsp;outer edge of the chart.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that horizontal axis ignore axis padding left/right, and vertical axis ignore padding top/bottom.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To set some padding on the axis title, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Set Axis Label&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;BR&gt;sciChartSurface.debugRendering = false;&lt;BR&gt;sciChartSurface.applyTheme(new SciChartJSLightTheme());&lt;BR&gt;sciChartSurface.padding = Thickness.fromNumber(10);&lt;/P&gt;
&lt;P&gt;const bottomXAxis = new NumericAxis(wasmContext);&lt;BR&gt;bottomXAxis.axisTitle = "Bottom, Padding Top:10,Bottom:30";&lt;BR&gt;bottomXAxis.axisTitleStyle.color = "Black";&lt;BR&gt;bottomXAxis.axisTitleStyle.padding = new Thickness(10, 0, 30, 0);&lt;BR&gt;bottomXAxis.axisAlignment = EAxisAlignment.Bottom;&lt;BR&gt;sciChartSurface.xAxes.add(bottomXAxis);&lt;/P&gt;
&lt;P&gt;const rightYAxis = new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) });&lt;BR&gt;rightYAxis.axisTitle = "Right, Padding Left:10,Right:30";&lt;BR&gt;rightYAxis.axisTitleStyle.color = "Black";&lt;BR&gt;rightYAxis.axisTitleStyle.padding = new Thickness(0, 30, 0, 10);&lt;BR&gt;rightYAxis.axisAlignment = EAxisAlignment.Right;&lt;BR&gt;sciChartSurface.yAxes.add(rightYAxis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Axis_AxisTitlePadding.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e23972b6-27ca-4b68-aded-d48c12aa1230" Status="New Topic" CreatedOn="2021-03-29T17:49:37.8678189Z" ModifiedOn="2021-09-23T14:41:12.2659073Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Series Styling - Dash Line Patterns" BuildFlags="">
                <Title m="2021-03-29T17:57:58.6041074Z">Series Styling - Dash Line Patterns</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-23T14:41:12.2659073Z">&lt;P&gt;In SciChart.js v1.3 and above, we have introduced a property to let you style dashed or dotted lines on certain series.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;We have an example in our SciChart.js Examples Suite which shows how to do this - the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-dashed-line-chart" target=_blank&gt;Dashed Line Chart example&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DashedLineStylingExampleJavascript.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above:&lt;/STRONG&gt;&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-dashed-line-chart" target=_blank&gt;&lt;EM&gt;The Dashed Line Styling example&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;in the SciChart.js demo&lt;/EM&gt;&lt;/P&gt;
&lt;H2&gt;How to set a Stroke Dash&lt;/H2&gt;
&lt;P&gt;Certain series have a &lt;STRONG&gt;StrokeDashArray&lt;/STRONG&gt; property which allows you to define the line pen as having a dotted or dashed pattern. A variety of dash patterns are possible in SciChart.js using this API.&lt;/P&gt;
&lt;P&gt;A StrokeDashArray is an array which defines a dot-dash pattern. For example creating a series with a strokeDashArray as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;The&amp;nbsp;StrokeDashArray property&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const series = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "SteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeDashArray: [10, 3]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DashedLine_10_3.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The dash pattern can be configured to provide dots, dashes and more. For example:&lt;/P&gt;
&lt;H4&gt;strokeDashArray: [2,2]&lt;/H4&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DashedLine_2_2.png"&gt;&lt;/P&gt;
&lt;H4&gt;strokeDashArray: [5,5]&lt;/H4&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DashedLine_5_5.png"&gt;&lt;/P&gt;
&lt;H4&gt;strokeDashArray: [10,25]&lt;/H4&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_DashedLine_10_25.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Which Series support StrokeDashArray?&lt;/H2&gt;
&lt;P&gt;All the line-based series in SciChart.js support StrokeDashArray for dashed or dotted lines. These are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html#strokedasharray"&gt;FastLineRenderableSeries.strokeDashArray&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html#strokedasharray"&gt;FastMountainRenderableSeries.strokeDashArray&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastbandrenderableseries.html#strokedasharray"&gt;FastBandRenderableSeries.strokeDashArray&lt;/A&gt; 
&lt;LI&gt;SplineLineRenderableSeries 
&lt;LI&gt;SplineMountainRenderableSeries 
&lt;LI&gt;SplineBandRenderableSeries &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Chart Parts which support StrokeDashArray&lt;/H2&gt;
&lt;P&gt;The strokeDashArray property also exists on AxisBase2D.majorGridLineStyle, AxisBase2D.minorGridLineStyle, allowing you to apply stroke dash / dot styling to axis gridlines.&lt;/P&gt;
&lt;P&gt;For more information, see the related article&amp;nbsp;&lt;A href="522bb84c-264c-4919-aa66-5f8272a72610"&gt;Axis Styling - Title, Labels, Gridlines and Axis Bands&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="Custom styling or themeing of JavaScript chart parts" src="images/Axis_styling.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="91ecf8cb-fdb5-494c-a73e-8653cd940de0" Status="New Topic" CreatedOn="2021-09-16T17:05:37.8539374Z" ModifiedOn="2021-09-23T09:33:08.1887966Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - Images in Background" BuildFlags="">
                <Title m="2021-09-23T09:31:41.8671493Z">Chart Styling - Image, Transparent or Blurred Backgrounds</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-23T09:33:08.1489029Z">&lt;P&gt;New to SciChart.js v2.x and above, we now support transparent backgrounds, blurred backgrounds or image backgrounds behind charts.&lt;/P&gt;
&lt;P&gt;You can create stunning designs and visual effects with SciChart.js as well as support advanced features such as charting over a background image or tiles of images.&lt;/P&gt;
&lt;P&gt;Read on for how to enable this:&lt;/P&gt;
&lt;H2&gt;Transparent Backgrounds in Charts&lt;/H2&gt;
&lt;P&gt;SciChart.js v2.x and above now properly supports Transparent Backgrounds on charts, allowing you to show through the underlying DOM in your page.&lt;/P&gt;
&lt;P&gt;To use this, simply set sciChartSurface.background = Transparent, or have&amp;nbsp;Transparent in the theme. You can also use semi-transparent backgrounds, e.g. "#FFFFFF33"&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Transparent background&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;!-- HTML --&amp;gt;&lt;BR&gt;&amp;lt;div style="padding: 20px; background: repeating-linear-gradient(45deg, #606dbc, #606dbc 10px,#465298 10px,#465298 20px)"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p style="color: white;"&amp;gt;This chart has a transparent background&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-div-id-1" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&lt;BR&gt;// Js&lt;BR&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;/P&gt;
&lt;P&gt;// Where divId is the ID of the div you wish to place SciChart&lt;BR&gt;export async function transparentBackground(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = {... new SciChartJSLightTheme()};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.tickTextBrush = "White";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // You can set a SciChartSurface background transparent in the theme&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.sciChartBackground = "Transparent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.loadingAnimationBackground = "Transparent";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Or you can set it in code&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // SciChart also supports semi-transparent backgrounds like this&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.background = "#FFFFFF33";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_TransparentBackground.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Image Backgrounds in Charts&lt;/H2&gt;
&lt;P&gt;As Transparent Backgrounds are now supported, so are image backgrounds. You can place an image background behind a chart using the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Transparent background&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;!-- HTML --&amp;gt;&lt;BR&gt;&amp;lt;div style="padding: 20px; background-image: url('https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe'); background-size: 100%"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p style="color: white;"&amp;gt;This chart has an image background&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-div-id-2" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&lt;BR&gt;// JS&lt;BR&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;/P&gt;
&lt;P&gt;// Where divId is the ID of the div you wish to place SciChart&lt;BR&gt;export async function imageBackground(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Ensure background transparent to show the image through&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = {... new SciChartJSLightTheme()};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.tickTextBrush = "White";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.sciChartBackground = "Transparent"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.loadingAnimationBackground = "Transparent";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_ImageBackgrounds.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Blurred / Glass Effect Backgrounds in Charts&lt;/H2&gt;
&lt;P&gt;Since Transparent Backgrounds are supported, a few tricks in CSS and you can now achieve blurred / glass effect backgrounds in SciChart.&lt;/P&gt;
&lt;P&gt;Try modifying the code above as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;BLURRED BACKGROUNDS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;!-- HTML --&amp;gt;&lt;BR&gt;&amp;lt;div style="padding: 20px; background-image: url('https://images.unsplash.com/photo-1618005182384-a83a8bd57fbe'); background-size: 100%"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p style="color: white;"&amp;gt;This chart has a blurred / glass effect background&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-div-id-3" style="backdrop-filter: blur(15px); width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&lt;BR&gt;// JS&lt;BR&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;/P&gt;
&lt;P&gt;// Where divId is the ID of the div you wish to place SciChart&lt;BR&gt;export async function blurredBackground(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Ensure background almost transparent to show the image through&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = {... new SciChartJSLightTheme()};&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.tickTextBrush = "White";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.sciChartBackground = "#FFFFFF22"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.loadingAnimationBackground = "#FFFFFF22";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_BlurredBackground.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Conclusion&lt;/H2&gt;
&lt;P&gt;So you can see now that SciChart.js supports a myriad of options for styling the background of the chart to create stunning visual effects.&lt;/P&gt;
&lt;P&gt;See also our documentation below on styling &amp;amp; themeing, including colouring chart parts and creating custom themes.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="91e6a8df-91ed-43dd-a5a2-dc00ae57d434" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="5760011e-fce8-440b-bdb5-470621e85012" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="66cb4e98-667c-44cf-8d55-463939f5c879" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c5dfd875-2c2a-485a-8e69-2a0b576ec583" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9d4694ea-a334-47f5-be19-2fe2f8866339" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="0088e945-90ec-4c22-9ebb-77ac52066462" Status="New Topic" CreatedOn="2021-09-16T17:06:07.4355645Z" ModifiedOn="2021-09-23T18:47:30.1833923Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart Styling - Themeing of Wait Loader" BuildFlags="">
                <Title m="2021-09-23T18:47:11.1566308Z">Chart Styling - Theming of Wait Loader</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-23T18:47:30.1833923Z">&lt;P&gt;When SciChart.js starts up, a short wait-loader is shown as your server downloads Wasm (webassembly) files and asynchronously initializes our high performance WebGL Graphics engine.&lt;/P&gt;
&lt;P&gt;The wait time is a one-off cost when the page loads, and once WebAssembly files have been cached by your browser, subsequent loads are very fast.&lt;/P&gt;
&lt;P&gt;We show a wait-loader screen in SciChart.js which can be fully customized to match the styling of your app.&lt;/P&gt;
&lt;H2&gt;Default Wait Loader Styling&lt;/H2&gt;
&lt;P&gt;The Wait Loader picks up its styling from the theme. Since the default theme is&amp;nbsp;&lt;STRONG&gt;SciChartJSDarkv2Theme&lt;/STRONG&gt; the wait loader will have a dark background with light foreground.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_WaitLoaderTheme_Default.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Setting Wait Loader Foreground/Background Color&lt;/H2&gt;
&lt;P&gt;You can customize the wait loader foreground and background. To do this, set the &lt;STRONG&gt;IThemeProvider.loadingAnimationBackground&lt;/STRONG&gt; and &lt;STRONG&gt;IThemeProvider.loadingAnimationForeground&lt;/STRONG&gt; properties. This theme must then be passed into the constructor options of SciChartSurface.create, as the loader is shown before asynchronous creation of the chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Wait loader styling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSDarkv2Theme} from "scichart/Charting/Themes/SciChartJSDarkv2Theme";&lt;BR&gt;&lt;BR&gt;// Create a theme based on another theme&lt;BR&gt;const theme = {... new SciChartJSDarkv2Theme()};&lt;BR&gt;&lt;BR&gt;// Set loading Animation foreground / background colours&lt;BR&gt;theme.loadingAnimationForeground = "#ff3333"; // Red&lt;BR&gt;theme.loadingAnimationBackground = "#33ff33"; // Green&lt;/P&gt;
&lt;P&gt;// Must pass theme to create options on SciChartSurface so it's shown before creation&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_WaitLoaderTheme_CustomColours.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Customizing Wait Loader HTML&lt;/H2&gt;
&lt;P&gt;Further customization of the wait loader is possible by implementing a chart loader. You need to create a calss which confirms to the&amp;nbsp;&lt;STRONG&gt;ISciChartLoader&lt;/STRONG&gt; interface and implement&amp;nbsp;&lt;STRONG&gt;addChartLoader()&lt;/STRONG&gt;&amp;nbsp;and &lt;STRONG&gt;removeChartLoader()&lt;/STRONG&gt; functions. This will let you put anything in the chart loader, for example images, a company logo or animations.&lt;/P&gt;
&lt;P&gt;Here's an example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSDarkv2Theme} from "scichart/Charting/Themes/SciChartJSDarkv2Theme";&lt;/P&gt;
&lt;P&gt;export async function waitLoaderThemeing(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loader = new CustomChartLoader();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = new SciChartJSDarkv2Theme();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ loader, theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;export class CustomChartLoader {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; addChartLoader(domChartRoot, theme) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderContainerDiv = document.createElement("div");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.backgroundColor = "#0F151C";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.height = "100%";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.width = "100%";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.display = "flex";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.justifyContent = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.alignItems = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderImage = document.createElement("img");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderImage.src = "&lt;A href="https://i.giphy.com/media/2WjpfxAI5MvC9Nl8U7/giphy.webp"&gt;https://i.giphy.com/media/2WjpfxAI5MvC9Nl8U7/giphy.webp&lt;/A&gt;";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.appendChild(loaderImage);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderText = document.createElement("div");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.marginLeft = "auto";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.marginRight = "auto";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.float = "left";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.bottom = "150px";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.textAlign = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.position = "absolute";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.innerHTML = "Initializing the Awesomeness...";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.color = "#FF6600";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.fontFamily = "Arial";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.appendChild(loaderText);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; domChartRoot.appendChild(loaderContainerDiv);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return loaderContainerDiv;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; removeChartLoader(domChartRoot, loaderElement) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Remove loader after 2000ms timeout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(() =&amp;gt; domChartRoot.removeChild(loaderElement), 100000);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // For instant removal once scichart has loaded, just call domChartRoot.removeChild(loaderElement) without the setTimeout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // domChartRoot.removeChild(loaderElement);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {ISciChartLoader} from "scichart/Charting/Visuals/loader";&lt;BR&gt;import {IThemeProvider} from "scichart/Charting/Themes/IThemeProvider";&lt;BR&gt;import {SciChartJSDarkv2Theme} from "scichart/Charting/Themes/SciChartJSDarkv2Theme";&lt;/P&gt;
&lt;P&gt;export async function waitLoaderThemeingTs(divId: string) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loader = new CustomChartLoader();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = new SciChartJSDarkv2Theme();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ loader, theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;export class CustomChartLoader implements ISciChartLoader {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public type: "Custom";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public loadingText: string = "Initializing the Awesomeness...";&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options?: { loadingText?: string }) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.loadingText = options?.loadingText ?? this.loadingText;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public addChartLoader(domChartRoot: HTMLDivElement, theme: IThemeProvider): HTMLElement {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderContainerDiv = document.createElement("div");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.backgroundColor = "#0F151C";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.height = "100%";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.width = "100%";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.display = "flex";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.justifyContent = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.style.alignItems = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderImage = document.createElement("img") as HTMLImageElement;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderImage.src = "&lt;A href="https://i.giphy.com/media/2WjpfxAI5MvC9Nl8U7/giphy.webp"&gt;https://i.giphy.com/media/2WjpfxAI5MvC9Nl8U7/giphy.webp&lt;/A&gt;";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.appendChild(loaderImage);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const loaderText = document.createElement("div");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.marginLeft = "auto";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.marginRight = "auto";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.float = "left";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.bottom = "150px";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.textAlign = "center";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.position = "absolute";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.innerHTML = this.loadingText;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.color = "#FF6600";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderText.style.fontFamily = "Arial";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; loaderContainerDiv.appendChild(loaderText);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; domChartRoot.appendChild(loaderContainerDiv);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return loaderContainerDiv;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public removeChartLoader(domChartRoot: HTMLDivElement, loaderElement: HTMLElement): void {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Remove loader after 2000ms timeout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(() =&amp;gt; domChartRoot.removeChild(loaderElement), 100000);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // For instant removal once scichart has loaded, just call domChartRoot.removeChild(loaderElement) without the setTimeout&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // domChartRoot.removeChild(loaderElement);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/styling_custom_waitloader.gif"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The wait loader accepts HTML into the DOM. You could make stunning wait screens to match your app using Videos, Gifs, Webp images or animated SVG with a little creativity and input from a UX Designer&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Awaiting multiple charts for synchronized Chart Loaders&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Here's a tip if you have multiple charts in your application. Use &lt;STRONG&gt;Promise.AwaitAll&lt;/STRONG&gt; for the all the &lt;STRONG&gt;SciChartSurface.create()&lt;/STRONG&gt; calls you make. This will ensure all waitloaders start and end at the same time.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Conclusion&lt;/H2&gt;
&lt;P&gt;So you can see now that SciChart.js supports&amp;nbsp;several options for styling the chart wait-loader, to allow charts to fit in with your application theme.&lt;/P&gt;
&lt;P&gt;See also our documentation below on styling &amp;amp; themeing, including colouring chart parts and creating custom themes.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b86693af-9691-44c6-94d3-6ce2e6c0ff5d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1f58b5e7-4bab-4668-b578-9cb691f6dec9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="91ecf8cb-fdb5-494c-a73e-8653cd940de0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eab45ac1-2749-47c8-8c97-74b48f97389f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9d4694ea-a334-47f5-be19-2fe2f8866339" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="db673f2f-0e4d-4908-a533-10defb8e23f0" Status="New Topic" CreatedOn="2021-09-21T12:55:35.321489Z" ModifiedOn="2022-04-07T16:24:14.2381159Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CSS Classes, Ids" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-04-07T16:24:14.2381159Z">&lt;P&gt;SciChart.js adds ids and classes to all DOM elements, such as the parent chart root div, canvas and svg, which makes styling of these chart elements easier.&lt;/P&gt;
&lt;P&gt;Root Elements or SciChart.js layers&lt;/P&gt;
&lt;P&gt;When we create a new SciChartSurface using:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Create scichartsurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create("chart");&lt;BR&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will create a SciChartSurface and add to the &amp;lt;div&amp;gt; with id="chart" in your HTML DOM.&lt;/P&gt;
&lt;P&gt;The following child elements are then added to the div:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Canvas 2D with Id=chart_2D, which is used to draw with render context 
&lt;LI&gt;SVG layer - SVG element with Id=chart_SVG, which is used to draw SVG annotations (CustomAnnotation, TextAnnotation). 
&lt;LI&gt;Adorner layer - SVG element with Id=chart_Adorner, which is used to draw annotation adorners when an annotation is selected. 
&lt;LI&gt;HTML layer - div element with Id=chart_div, which is used to draw legends (LegendModifier) 
&lt;LI&gt;The prefix is always the string you pass into the SciChartSurface.create method. &lt;/LI&gt;&lt;/UL&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Styling_Ids.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Autogenerated Classes for Child Elements&lt;/H2&gt;
&lt;P&gt;Each DOM element which might need styling has class attribute which uses&amp;nbsp;&lt;A href="https://en.bem.info/" target=_blank&gt;BEM approach for naming&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Right now we have following classes:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="84ac3103-a531-43bc-8546-f275d91be35b"&gt;Legend&lt;/A&gt;: Id=&lt;STRONG&gt;scichart__legend&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; Tooltip: &lt;STRONG&gt;scichart__cursor-tooltip&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; tooltip: &lt;STRONG&gt;scichart__rollover-tooltip&lt;/STRONG&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;A href="72e4491f-8140-49cb-8bd3-85b381967f87"&gt;TextAnnotation&lt;/A&gt;: &lt;STRONG&gt;scichart__text-annotation&lt;/STRONG&gt; &lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Classes may consist of three parts, for example &lt;STRONG&gt;scichart__legend__blue&lt;/STRONG&gt;, where &lt;STRONG&gt;scichart&lt;/STRONG&gt; is block, &lt;STRONG&gt;legend&lt;/STRONG&gt; is element and &lt;STRONG&gt;blue&lt;/STRONG&gt; is modificator.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1a30b47b-3dfb-436a-adba-58db7b7b9aad" Status="New Topic" CreatedOn="2023-01-25T12:53:19.1060389Z" ModifiedOn="2023-01-26T15:53:13.1732051Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ChartStyling-AutoColoring" BuildFlags="">
                <Title m="2023-01-25T12:53:45.1914925Z">Chart Styling - Auto Coloring</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-26T15:53:13.1732051Z">&lt;P&gt;One of the challenges when creating a chart with multiple series is picking colours for each series, especially when you are trying to keep to a color scheme.&amp;nbsp; We faced this problem during the recent rethemeing of our demos to match the new website theme.&amp;nbsp; The solution was to create a way to let SciChart automatically pick colours based off a palette.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-websocket-bigdata-demo&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Setting up Auto Coloring&lt;/H2&gt;
&lt;P&gt;In order to use auto coloring you need to set up a strokePalette and/or fillPalette on&amp;nbsp;a theme and apply it to a surface.&amp;nbsp; You can then set a stroke or fill color as AUTO_COLOR and those items will pick colors based on the palette.&amp;nbsp; stroke properties use strokePalette and fill properties use fillPalette.&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The color is picked based on the number of series currently on the chart.&amp;nbsp; If the number of series is less than or equal to the number of entries in the palette, then scichart will pick values directly from the palette.&amp;nbsp; If there are more series than palette entries, scichart will generate a gradient using the palette and then pick colours evenly spaced on that gradient.&lt;/P&gt;
&lt;P&gt;In the example below, the stroke and fill palettes are reversed.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Auto coloring&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { AUTO_COLOR } from "scichart/Charting/Themes/IThemeProvider";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { EllipsePointMarker } from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker"&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;export async function autoColoring(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const theme = new SciChartJSLightTheme();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // configure the palette on the theme&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.strokePalette = ["red", "yellow", "green", "blue"];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme.fillPalette = ["blue", "green", "yellow", "red"];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a sciChartSurface using the theme&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId,{ theme });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1)}));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1)}));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // common x values - 0 to 20&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from(Array(20)).map((_, i) =&amp;gt; i);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create 10 line series with pointmarkers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; 10; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const series = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: AUTO_COLOR,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues, yValues: xValues.map(x =&amp;gt; Math.sin(x/2) + i)}),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: AUTO_COLOR,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: AUTO_COLOR,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(series);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AutoColoring.png"&gt;&lt;/P&gt;
&lt;H2&gt;Overriding&amp;nbsp;Auto Coloring&lt;/H2&gt;
&lt;P&gt;If you need to adjust the color that has been picked, you can override the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#adjustautocolor"&gt;adjustAutoColor&lt;/A&gt; method which exists on renerableSeries and&amp;nbsp;pointMarker.&amp;nbsp; DataLabels also support AUTO_COLOR but for overrides there use getColor instead.&amp;nbsp; See&amp;nbsp;&amp;nbsp;&lt;A href="35a4bfc3-eb1d-4c83-a168-49b68f225ff4"&gt;DataLabel Coloring&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;adjustAutoColor receives a propertyName which is either "stroke" or "fill" along with the color generated.&amp;nbsp; If we add the following code into the loop in the above example&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adjust Auto coloring&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (i === 4) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series.pointMarker.adjustAutoColor = (propertyName, color) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return propertyName === "fill" ? "black" : color;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;we get this&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AutoColorAdjust.png"&gt;&lt;/P&gt;
&lt;P&gt;Using adjustAutoColor&amp;nbsp;like this sets the color property so it no longer auto-colors.&amp;nbsp; If instead you return AUTO_COLOR + "black", then it will use black for the current render, but could be updated by subsequent auto-coloring.&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Controlling When Auto Coloring Occurs&lt;/H2&gt;
&lt;P&gt;By default, colors are assigned to all series on the chart whenever a series is added or removed.&amp;nbsp; If we remove the first three series after the chart has drawn, like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Remove series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;setTimeout(() =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.removeAt(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.removeAt(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.removeAt(0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, 1000);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Then all the series will be re-coloured using the full range of the palette.&amp;nbsp; Note the black fill has not changed.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/AutoColorRemove.png"&gt;&lt;/P&gt;
&lt;P&gt;SciChartSurface has an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#autocolormode"&gt;autoColorMode&lt;/A&gt; property which is an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/eautocolormode.html"&gt;EAutoColorMode&lt;/A&gt;.&amp;nbsp; This defaults to OnAddRemoveSeries but can also be Never, Once or Always.&amp;nbsp; With a fairly large number of series, Auto Coloring&amp;nbsp;can potentially have a performance impact&amp;nbsp;so &lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="ebbbff3e-8993-4281-8791-6c8eaad5c318" Status="New Topic" CreatedOn="2023-04-24T18:51:51.0532322Z" ModifiedOn="2023-04-24T19:53:36.1751901Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ChartTitles" BuildFlags="">
                <Title m="2023-04-24T19:32:28.4751668Z">Chart Styling - Chart Titles</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-04-24T19:53:36.1751901Z">&lt;P&gt;New to SciChart.js v3.1, we've added a Chart Title property allowing for multi-line titles on the top, left, right, bottom of the chart and with various alignment options. &lt;/P&gt;
&lt;P&gt;Adding a chart title is simple, you can do so with the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\Styling\ChartTitles\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\Styling\ChartTitles\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/Styling/ChartTitles/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For an example of multiline chart titles see the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-title" target=_blank&gt;Chart Title demo&lt;/A&gt; in our examples suite.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Title Styling and Positioning&lt;/H2&gt;
&lt;P&gt;For styling and positioning a title we can use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/i2dsurfaceoptions.html#titlestyle"&gt;I2DSurfaceOptions.titleStyle&lt;/A&gt; property in constructor options or a surface property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#titlestyle"&gt;SciChartSurface.titleStyle&lt;/A&gt;. Available styling options are defined by&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tcharttitlestyle"&gt;TChartTitleStyle&lt;/A&gt;&lt;/STRONG&gt; type.&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Note: &lt;/STRONG&gt;When setting via a surface instance, titleStyle should be assigned to an object (or partial object) of type instead of directly setting individual properties. The object then will be merged with the current or default title style.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Text Styling&lt;/H3&gt;
&lt;P&gt;Base text styling options for a chart title are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;fontSize&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;fontFamily&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;color&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Text Styling&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.titleStyle = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontSize: 30,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontFamily: "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; color: "#EC0F6C",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontWeight: "900",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fontStyle: "italic",&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Additionally we can set &lt;STRONG&gt;fontWeight&lt;/STRONG&gt; and &lt;STRONG&gt;fontStyle&lt;/STRONG&gt; for non-native text title. Find out more info about limitations in the &lt;STRONG&gt;Native Text section&lt;/STRONG&gt; of the docs below.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Title Positioning&lt;/H3&gt;
&lt;P&gt;A title could be placed on different sides relative to the surface. The options are defined by&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/etitleposition.html"&gt;ETitlePosition&lt;/A&gt;&lt;/STRONG&gt; enum and are set by &lt;STRONG&gt;TChartTitleStyle.position&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;To specify an anchor for a title using &lt;STRONG&gt;TChartTitleStyle.alignment&lt;/STRONG&gt;, where options are defined in ETextAlignment enum. &lt;/P&gt;
&lt;P&gt;Also it is possible to place a title within the series view area using&lt;STRONG&gt; TChartTitleStyle.placeWithinChart&lt;/STRONG&gt; flag. &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Title Positioning&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ETitlePosition,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ETextAlignment,&lt;BR&gt;} = SciChart;&lt;BR&gt;// or import { ETitlePosition, ETextAlignment } from "scichart";&lt;/P&gt;
&lt;P&gt;sciChartSurface.titleStyle = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: ETitlePosition.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; alignment: ETextAlignment.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; placeWithinChart: true,&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Multiline Chart Titles&lt;/H2&gt;
&lt;P&gt;To set multiline text as a title we can pass it as an array of lines or split lines with the new line character (\n). &lt;/P&gt;
&lt;P&gt;Properties that could be applied to the multiline text are&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;TChartTitleStyle.multilineAlignment&lt;/STRONG&gt;
&lt;LI&gt;&lt;STRONG&gt;TChartTitleStyle.lineSpacing&lt;/STRONG&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The multilineAlignment options are described in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/emultilinealignment.html"&gt;EMultiLineAlignment&lt;/A&gt; enum. The lineSpacing is a multiple of the line height. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Multiline Chart Titles&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { EMultiLineAlignment } = SciChart;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add multiline chart title&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.title = ["First line", "Second line", "Third line"]; // "Or 'FirstLine \n Second line'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Modify multiline text related options for the title&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.titleStyle = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; multilineAlignment: EMultiLineAlignment.Right,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineSpacing: 1.5&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;WebGL Native Text Titles&lt;/H2&gt;
&lt;P&gt;It is possible to enable the Native Text Rendering for the Chart Title. This can improve the rendering performance and allows using custom fonts, but have some differences and limitations compared to the non-native text rendering (e.g. native text doesn't support fontWeight and fontStyle). Find more info about the&amp;nbsp;&lt;A href="e5a3627c-906d-4bb5-a81d-981df6e3e96b"&gt;Native Text API here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The Native Text Rendering for a chart title is set by &lt;STRONG&gt;TChartTitleStyle.useNativeText&lt;/STRONG&gt; flag or uses the default value defined in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartdefaults.html#usenativetext"&gt;SciChartDefaults.useNativeText&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Title Rendering Customisation&lt;/H2&gt;
&lt;P&gt;For an advanced customization of the chart title rendering one may use a custom Chart Title Renderer. &lt;/P&gt;
&lt;P&gt;The Chart Title renderer could be accessed or set with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#charttitlerenderer"&gt;SciChartSurface.chartTitleRenderer&lt;/A&gt; property. &lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;Note: &lt;/STRONG&gt;The default Chart Title Renderer additionally provides a debug rendering and caching of non-native text which could be toggled with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/charttitlerenderer.html#drawdebug"&gt;ChartTitleRenderer.drawDebug&lt;/A&gt; and&amp;nbsp;&lt;STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/charttitlerenderer.html#usecache"&gt;ChartTitleRenderer.useCache&lt;/A&gt;&lt;/STRONG&gt; flags appropriately.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="d329ae80-72d7-48e9-b18d-b8307f5aa2c2" AutoIndex="false">
            <Caption m="2021-09-15T08:51:39.1126137Z">Builder API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="295dec01-f48c-4caf-a4c8-5b5ed765ba9f" Status="New Topic" CreatedOn="2021-09-15T08:51:49.4163826Z" ModifiedOn="2023-03-02T17:44:56.4394621Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Intro to the Builder API" BuildFlags="">
                <Title m="2021-09-17T14:40:33.2422414Z">Intro to the Builder API</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-02T17:44:56.4394621Z">&lt;P&gt;The &lt;STRONG&gt;Builder API&lt;/STRONG&gt; is a new API to SciChart.js v2. In addition to programmatically creating charts with JavaScript or TypeScript code, you can now create charts with a JSON-object API, either with objects in code with discovererable intellisense, or with JSON passed from server to client.&lt;/P&gt;
&lt;P&gt;The Builder API is intended to:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Provide a more familiar api to javascript developers 
&lt;LI&gt;Provide better discoverability of SciChart features when using typescript 
&lt;LI&gt;Enable charts to be defined using pure data, so that they can be serialized and deserialized &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;It is not intended to completely replace the existing API.&amp;nbsp;The two can be used in combination, and the original api is more suitable for some tasks, and required for others. Currently it only supports 2D charts.&lt;/P&gt;
&lt;H2&gt;Discovering the Builder API&lt;/H2&gt;
&lt;P&gt;To use the SciChart.js Builder API, you will need this import.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart";&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;STRONG&gt;chartBuilder&lt;/STRONG&gt; exposes all the builder methods, which can be used to build parts of, or the entire chart from a JSON definition.&lt;/P&gt;
&lt;P&gt;The top level method is &lt;STRONG&gt;buildChart&lt;/STRONG&gt;, which takes the id of the target div, and a definition, which can be a JSON string or an object.&lt;/P&gt;
&lt;P&gt;Note that all the elements are optional. This lets you define partial definitions that you can reuse and combine.&lt;/P&gt;
&lt;H2&gt;Worked Examples of the Builder API&lt;/H2&gt;
&lt;P&gt;We've created some worked examples of the Builder API on the following pages. Also check out our&amp;nbsp;&lt;A href="https://www.github.com/abtsoftware/scichart.js.examples" target=_blank&gt;Github&lt;/A&gt; and&amp;nbsp;&lt;A href="https://demo.scichart.com" target=_blank&gt;SciChart demo&lt;/A&gt; where we have published some examples of the Builder API.&lt;/P&gt;
&lt;H3&gt;Builder API Documentation Pages&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Documentation&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="12d8414b-a252-4fbc-bc7e-0595f40a66f6"&gt;Creating a Simple Chart&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Documentation&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="3d5e0ccc-b961-4c7f-ac00-10289476a61f"&gt;Working with Data&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Documentation&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="5f6559d4-718c-4546-80ce-1ca143a12eec"&gt;Complex Customisation&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Documentation&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="e2d26342-28fb-47d1-8edf-1fcaaebdc2db"&gt;Custom Subtypes&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Builder API Examples&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;Example&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-builder-simple" target=_blank&gt;Simple Chart using Builder API&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Example&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-builder-full" target=_blank&gt;Full Chart using Builder API&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Example&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-from-json" target=_blank&gt;Chart from JSON&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Example&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-shared-data" target=_blank&gt;Reusable Templates with Shared Data&lt;/A&gt; 
&lt;LI&gt;&lt;STRONG&gt;Example&lt;/STRONG&gt;:&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-custom-types" target=_blank&gt;Custom Subtypes with Builder API&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;TypeScript Intellisense&lt;/H2&gt;
&lt;P&gt;The Builder API is best when used with Typescript, so it can guide you as to what types are available or required.&lt;/P&gt;
&lt;P&gt;Intellisense shows which options can be passed to &lt;STRONG&gt;buildChart&lt;/STRONG&gt;:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BuilderApi_TypeScript1.png"&gt;&lt;/P&gt;
&lt;P&gt;Intellisense will show you the series definition must have a type property which is an &lt;STRONG&gt;ESeriesType&lt;/STRONG&gt;. This shows you all the series types that SciChart provides (more than shown in this screenshot).&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BuilderAPI_TypeScript2.png"&gt;&lt;/P&gt;
&lt;P&gt;Once you have selected a series, the properties and types will become specific to that series type:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/BuilderAPI_TypeScript3.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="14a1a5d2-4c02-4248-8458-aac240b87d2c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="12d8414b-a252-4fbc-bc7e-0595f40a66f6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="61a10e66-2253-4c66-9e33-18c16bf52e47" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3d5e0ccc-b961-4c7f-ac00-10289476a61f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="12d8414b-a252-4fbc-bc7e-0595f40a66f6" Status="New Topic" CreatedOn="2021-09-17T15:01:35.2620494Z" ModifiedOn="2021-09-20T08:44:34.6350857Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating a Simple Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-20T08:44:34.6350857Z">&lt;H2&gt;Creating a Series with the Builder API&lt;/H2&gt;
&lt;P&gt;Let’s add a series. A definition must have a type property which is an &lt;STRONG&gt;ESeriesType&lt;/STRONG&gt;. We’ll go into options in more detail later. The data property tells us the shape of data we need. There are a few different ways to supply data, but the simplest is to set the values directly here.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 3, 4, 7, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [10, 6, 7, 2, 16]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This is all we need for a working SciChart chart.&lt;/P&gt;
&lt;P&gt;Notice that the return type of the &lt;STRONG&gt;chartBuilder.buildChart()&lt;/STRONG&gt; function call is a Promise, which returns &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; and &lt;STRONG&gt;wasmContext&lt;/STRONG&gt; just like a call to &lt;STRONG&gt;SciChartSurface.create()&lt;/STRONG&gt;, except it will already be populated with series, default axis and data provided in the builder options.&lt;/P&gt;
&lt;P&gt;Run the code sample above and you will get this output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BuilderApi_CreateSeriesExample1.png"&gt;&lt;/P&gt;
&lt;P align=left&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Customizing Axis, Theme and Modifiers with the Builder API&lt;/H2&gt;
&lt;P&gt;To customise the axes you again need to specify the axis type, then you can set options. The theme can be set in the surface. The theme can be a full theme class, or you can just refer to it by type.&lt;/P&gt;
&lt;P&gt;Use the following code sample to try these out:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { EThemeProviderType } from "scichart/types/ThemeProviderType";&lt;BR&gt;import { EAxisType } from "scichart/types/AxisType";&lt;BR&gt;import { EChart2DModifierType } from "scichart/types/ChartModifierType";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EThemeProviderType.Light&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { stroke: "blue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 3, 4, 7, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [10, 6, 7, 2, 16]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxes: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: "Number of things",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 20),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelPrecision: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifiers: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.Rollover },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.ZoomPan }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following chart output:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/BuilderApi_CreateSeriesExample2.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that visible range for an axis needs to be supplied as a &lt;STRONG&gt;NumberRange&lt;/STRONG&gt; class, however, in a text definition you can write `visibleRange: { min: 0, max: 20 }` .&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Chart Modifiers, like pretty much everything, are `{ type, options }`. Note that series, axes, annotations and modifiers can all be a single definition, or an array.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5914a631-7377-4a72-a63e-e8a8539ca331" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="295dec01-f48c-4caf-a4c8-5b5ed765ba9f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6b27c984-8382-4ab7-bc19-ad7be29a652c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3d5e0ccc-b961-4c7f-ac00-10289476a61f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3d5e0ccc-b961-4c7f-ac00-10289476a61f" Status="New Topic" CreatedOn="2021-09-17T14:42:20.7939032Z" ModifiedOn="2021-10-05T16:00:28.808138Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Working with Data" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-05T16:00:28.808138Z">&lt;H2&gt;Creating or Updating Data on Builder API Created charts&lt;/H2&gt;
&lt;P&gt;Data can be supplied to charts created with the SciChart.js Builder API in one of three ways:&lt;/P&gt;
&lt;H3&gt;1. Supply Data via Values properties&lt;/H3&gt;
&lt;P&gt;Values properties can be supplied within the series definition property.&lt;/P&gt;
&lt;P&gt;This method is demonstrated below.&amp;nbsp;This is also the format you will get by default when you serialise a chart containing data.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 3, 4, 7, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [10, 6, 7, 2, 16]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;2. Reference sharedData using dataId properties&lt;/H3&gt;
&lt;P&gt;Often you will want to define the structure of the chart, and reuse it with different data. Instead of setting `&lt;STRONG&gt;xValues&lt;/STRONG&gt;` and `&lt;STRONG&gt;yValues&lt;/STRONG&gt;`, you set `&lt;STRONG&gt;xDataId&lt;/STRONG&gt;` and `&lt;STRONG&gt;yDataId&lt;/STRONG&gt;` to the names you use in a `&lt;STRONG&gt;sharedData&lt;/STRONG&gt;` section.&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;/P&gt;
&lt;P&gt;const chartDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.LineSeries, xyData: { xDataId: "x", yDataId: "line" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;};&lt;BR&gt;const sharedData = { x: [1, 2, 3, 4, 5], col: [8, 2, 3, 7, 10], line: [10, 6, 7, 2, 16] };&lt;BR&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...chartDefinition,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sharedData&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ISciChart2DDefinition } from "scichart/Builder/buildSurface";&lt;BR&gt;import { TSharedDataDefinition } from "scichart/Builder/buildDataSeries";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;&lt;BR&gt;const chartDefinition: ISciChart2DDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.LineSeries, xyData: { xDataId: "x", yDataId: "line" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;};&lt;BR&gt;const sharedData: TSharedDataDefinition = { x: [1, 2, 3, 4, 5], col: [8, 2, 3, 7, 10], line: [10, 6, 7, 2, 16] };&lt;BR&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...chartDefinition,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sharedData&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This is good for multiple series which share x data, but is not as convenient if you want to be able to update the data later. For this you need to use our DataSeries API.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H3&gt;3. Create a DataSeries and Manually Assign it&lt;/H3&gt;
&lt;P&gt;Once the chart is created, you can use the `&lt;STRONG&gt;wasmContext&lt;/STRONG&gt;` that is returned to create a `&lt;STRONG&gt;dataSeries&lt;/STRONG&gt;` in the normal way.&lt;/P&gt;
&lt;P&gt;Here we’re using &lt;STRONG&gt;build2DChart&lt;/STRONG&gt; rather than &lt;STRONG&gt;buildChart&lt;/STRONG&gt; so that we don’t have to cast the result.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that &lt;STRONG&gt;build2DChart&lt;/STRONG&gt; (and &lt;STRONG&gt;buildChart&lt;/STRONG&gt;) returns a `&lt;STRONG&gt;Promise&lt;/STRONG&gt;` so we need to resolve it to use the result, e.g. use `&lt;STRONG&gt;async/await&lt;/STRONG&gt;` syntax or `Promise chaining`).&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;/P&gt;
&lt;P&gt;// Example 1: Create a SciChartSurface with builder then create and assign an XyDataSeries&lt;BR&gt;export async function drawChartWithManuallyCreatedDataSeries(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const chartDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.LineSeries, xyData: { xDataId: "x", yDataId: "line" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, chartDefinition);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, { xValues: [1, 2, 3, 4, 5], yValues: [8, 2, 3, 7, 10] });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.get(0).dataSeries = dataSeries;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;// Example 2: Create a SciChartSurface then use buildSeries to build the renderableseries&lt;BR&gt;export async function drawChartWithBuiltRenderableSeries(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const chartDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, chartDefinition);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, { xValues: [1, 2, 3, 4, 5], yValues: [8, 2, 3, 7, 10] });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const seriesArray = chartBuilder.buildSeries(wasmContext, { type: ESeriesType.LineSeries, options: { dataSeries } });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(...seriesArray);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ISciChart2DDefinition } from "scichart/Builder/buildSurface";&lt;BR&gt;import { TSharedDataDefinition } from "scichart/Builder/buildDataSeries";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;&lt;BR&gt;// Example 1: Create a SciChartSurface with builder then create and assign an XyDataSeries&lt;BR&gt;export async function drawChartWithManuallyCreatedDataSeries(divElementId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const chartDefinition: ISciChart2DDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.LineSeries, xyData: { xDataId: "x", yDataId: "line" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, chartDefinition);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, { xValues: [1, 2, 3, 4, 5], yValues: [8, 2, 3, 7, 10] });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.get(0).dataSeries = dataSeries;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// Example 2: Create a SciChartSurface then use buildSeries to build the renderableseries&lt;BR&gt;export async function drawChartWithBuiltRenderableSeries(divElementId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const chartDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: ESeriesType.ColumnSeries, xyData: { xDataId: "x", yDataId: "col" } },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, chartDefinition);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, { xValues: [1, 2, 3, 4, 5], yValues: [8, 2, 3, 7, 10] });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const seriesArray = chartBuilder.buildSeries(wasmContext, { type: ESeriesType.LineSeries, options: { dataSeries } });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(...seriesArray);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note that Charts, Series and DataSeries created when using the Builder API can be accessed and modified using the JavaScript programmatic API in SciChart.js. If you want deep customization of the chart but a simple way to create templates, then this API is very powerful!&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using the Filters API with the Builder API&lt;/H2&gt;
&lt;P&gt;SciChart.js v2.x features a new&amp;nbsp;&lt;A href="681061b4-68ce-47a5-8b9c-920651d9dc6c"&gt;Filters API&lt;/A&gt;, which allows you to apply dynamic data transforms to data series which update as your underlying data updates.&lt;/P&gt;
&lt;P&gt;Here is an example of adding a Filter or DataTransform to a SciChartSurface when using the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EDataFilterType } from "scichart/types/DataFilterType";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;const xyData = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5, 6],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [2, 5, 7, 4, 10, 15]&lt;BR&gt;};&lt;BR&gt;chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { stroke: "red" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...xyData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; filter: { type: EDataFilterType.XyLinearTrend }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For more details regarding the Filters API, check the&amp;nbsp;&lt;A href="681061b4-68ce-47a5-8b9c-920651d9dc6c"&gt;Filter API Documentation&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Using PointMetadata with the Builder API&lt;/H2&gt;
&lt;P&gt;SciChart.js v2.x features a new&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;PointMetadata API&lt;/A&gt;, which allows you to tag any X,Y datapoint with a custom object confirming to the IPointMetadata interface.&lt;/P&gt;
&lt;P&gt;This lets you tag datapoints with objects, mark them as selected or deselected, or include further information to display in tooltips, on hit-test or selection etc...&lt;/P&gt;
&lt;P&gt;When working with the Builder API, some extra consideration is needed if you are planning to serialize and deserialize metadata.&lt;/P&gt;
&lt;P&gt;1. You need a copy of the same metadata object applied to every point. This is needed to support datapoint selection. In this case, set the metadata poroperty on the dataSeries options to your desired object and it will be cloned to every point that is added. It will be serialized exactly as added.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;xyData: { metadata: { isSelected: false } }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;2.You need to set an array of metadata with values specific to each data point. As long as your metadata object is pure data, just set the array on the metadata property.&lt;/P&gt;
&lt;P&gt;3.Your metadata object contains functions. Now you need to supply a type name of a registered IMetadataGenerator. This interface can return a single object which will be used to populate each data point, or as I1DMetadataGenerator (or I2DMetadataGenerator for heatmap data) it can return an array which should be the same size as your data. In this case you will probably want to set the data property, which will be passed into the function you register to create your metadataGenerator. In this case, the output of the toJSON method on the metadataGenerator should match the format of data passed in. As before, don’t forget to define and register these things on the client. Hopefully now the type signature of the metadata option makes some sense.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;metadata?: IPointMetadata[] | IPointMetadata | { type: string; data?: any };&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For more information regarding the PointMetadata API, check the&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;PointMetadata API Documentation&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9d8cf460-5671-4a23-b015-aaaa0ccffc34" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="295dec01-f48c-4caf-a4c8-5b5ed765ba9f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="102f5f32-9df3-4018-81d5-45a11c1cf3ab" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="12d8414b-a252-4fbc-bc7e-0595f40a66f6" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="02937367-626b-457f-ab03-a7cd36646980" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="5f6559d4-718c-4546-80ce-1ca143a12eec" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="5f6559d4-718c-4546-80ce-1ca143a12eec" Status="New Topic" CreatedOn="2021-09-17T14:42:41.8551935Z" ModifiedOn="2022-08-18T17:42:13.2139513Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Complex Options" BuildFlags="">
                <Title />
                <ContentsTitle m="2021-10-05T16:21:55.5062708Z">Complex Options</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-08-18T17:42:13.2139513Z">&lt;P&gt;Many things in SciChart.js are customised by providing a particular subclass, eg `PointMarkers`. The type signature in the options in these cases will be something like &lt;STRONG&gt;IPointMarker&lt;/STRONG&gt; | &lt;STRONG&gt;TPointMarkerDefinition&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;Many of these classes require a `&lt;STRONG&gt;wasmContext&lt;/STRONG&gt;` in the constructor, which you won’t have if you are trying to pass everything in a single definition, so instead use the Definition style, which as usual is `{ type, options }`.&lt;/P&gt;
&lt;P&gt;For example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Building with complex options&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EPointMarkerType } from "scichart/types/PointMarkerType";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.ScatterSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: { type: EPointMarkerType.Ellipse, options: { stroke: "red" } }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This works for Themes, PointMarkers, Effects, Animations, PaletteProviders and LabelProviders.&lt;/P&gt;
&lt;P&gt;Alternatively you can take the same approach as for option 3 of creating data and call buildChart or build2DChart&amp;nbsp;with a partial definition, to get your wasmContext, then create an instance of the necessary class, then call buildSeries and pass it in.&amp;nbsp;This is useful if you want to keep a reference to the object to be able to update it later.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Building with complex options&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EllipsePointMarker } from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {});&lt;BR&gt;const pointMarker = new EllipsePointMarker(wasmContext, { stroke: "red" });&lt;BR&gt;const seriesArray = await chartBuilder.buildSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: { xValues: [1, 3, 4, 7, 9], yValues: [10, 6, 7, 2, 16] },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.ScatterSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { pointMarker }&lt;BR&gt;});&lt;BR&gt;sciChartSurface.renderableSeries.add(...seriesArray);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Function Options&lt;/H2&gt;
&lt;P&gt;Some options properties are actually functions, such as the templating functions on RolloverModifier, or the callbacks on SeriesSelectionModifier. These have a signature which is essentially `function | string` eg&lt;/P&gt;
&lt;P&gt;onSelectionChanged?: ((args: SelectionChangedArgs) =&amp;gt; void) | string;&lt;/P&gt;
&lt;P&gt;Here, the choice depends very specifically on whether or not you need to be able to serialise and deserialise the chart to a JSON string. If you don’t need to, just specify the option as a function as normal. If you do need to, then you will need to register your function, and pass the registered name eg:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Building with&amp;nbsp;function options&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Define&amp;nbsp;a function&lt;BR&gt;const logOnSelectionChanged = (args) =&amp;gt; { console.log(args) };&lt;/P&gt;
&lt;P&gt;// Register it&lt;BR&gt;chartBuilder.registerFunction(EBaseType.OptionFunction, "logOnSelectionChanged", logOnSelectionChanged);&lt;/P&gt;
&lt;P&gt;// Use it in a definition&lt;BR&gt;chartBuilder.buildModifiers({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EChart2DModifierType.SeriesSelection,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { onSelectionChanged: "logOnSelectionChanged" }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When the modifier is built, SciChart will look up the function in its registry and assign it. When you serialize the chart, you will get the function name in the definition. It is very important when doing this that the function definition and registration actually occurs before it is needed in a chart.&lt;/P&gt;
&lt;H2&gt;onCreated Function&amp;nbsp;&lt;/H2&gt;
&lt;P&gt;Specific to the builder api, there is an &lt;STRONG&gt;onCreated&lt;/STRONG&gt; option in the&amp;nbsp;&lt;STRONG&gt;ISciChart2DDefinition&lt;/STRONG&gt; which is a callback that is run after the chart is built and takes the sciChartSurface as a parameter.&amp;nbsp; It can be used to run zoomExtents, or perform further configuration using the standard api.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3f6bf02e-0c5f-4303-a730-e33b7b7c5ff2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="295dec01-f48c-4caf-a4c8-5b5ed765ba9f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="17acf702-2281-4f68-90c8-778a5f3558cd" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3d5e0ccc-b961-4c7f-ac00-10289476a61f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c5c2f99f-fe5e-46ce-8e2b-3b8ff06f0ada" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e2d26342-28fb-47d1-8edf-1fcaaebdc2db" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e2d26342-28fb-47d1-8edf-1fcaaebdc2db" Status="New Topic" CreatedOn="2021-09-17T14:42:53.9489197Z" ModifiedOn="2021-09-29T09:40:55.0794329Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Custom Subtypes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T09:40:55.0789368Z">&lt;P&gt;From time to time, you may need to create custom subtypes in order to fully access the powerful, customisable API that SciChart.js has to offer.&lt;/P&gt;
&lt;P&gt;The PaletteProvider API is&amp;nbsp;one example&amp;nbsp;where you may have to provide your own implementation of an interface to a SciChart series. If you want your custom paletteProvider to be serialised and deserialised, you need to implement &lt;STRONG&gt;toJSON&lt;/STRONG&gt; on it.&lt;/P&gt;
&lt;P&gt;Here is an example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EFillPaletteMode, EStrokePaletteMode, IFillPaletteProvider, IStrokePaletteProvider } from "scichart/Charting/Model/IPaletteProvider";&lt;BR&gt;import { parseColorToUIntArgb } from "scichart/utils/parseColor";&lt;BR&gt;import { EBaseType } from "scichart/types/BaseType";&lt;BR&gt;import { EPaletteProviderType } from "scichart/types/PaletteProviderType";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;class ExampleMountainPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.options = options;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.palettedStroke = parseColorToUIntArgb(options.stroke);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.palettedFill = parseColorToUIntArgb(options.fill);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.strokePaletteMode = EStrokePaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.fillPaletteMode = EFillPaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAttached(parentSeries) { }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; onDetached() { }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; overrideFillArgb(xValue, yValue, index) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (yValue &amp;gt; 0.5 &amp;amp;&amp;amp; yValue &amp;lt; 0.75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.palettedFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; overrideStrokeArgb(xValue, yValue, index) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (yValue &amp;gt; 0.5 &amp;amp;&amp;amp; yValue &amp;lt; 0.75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.palettedStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a toJSON method so this can be serialized.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; toJSON() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EPaletteProviderType.Custom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customType: "ExampleMountainPaletteProvider",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: this.options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { EFillPaletteMode, EStrokePaletteMode, IFillPaletteProvider, IStrokePaletteProvider } from "scichart/Charting/Model/IPaletteProvider";&lt;BR&gt;import { parseColorToUIntArgb } from "scichart/utils/parseColor";&lt;BR&gt;import { EBaseType } from "scichart/types/BaseType";&lt;BR&gt;import { EPaletteProviderType } from "scichart/types/PaletteProviderType";&lt;BR&gt;import { TPaletteProviderDefinition } from "scichart/Builder/buildSeries";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;class ExampleMountainPaletteProvider implements IStrokePaletteProvider, IFillPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public static Name: "ExampleMountain";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public readonly strokePaletteMode = EStrokePaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public readonly fillPaletteMode = EFillPaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly palettedStroke: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly palettedFill: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly options: { stroke: string; fill: string };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options: { stroke: string; fill: string }) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.options = options;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.palettedStroke = parseColorToUIntArgb(options.stroke);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.palettedFill = parseColorToUIntArgb(options.fill);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onAttached(parentSeries: IRenderableSeries): void { }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onDetached(): void { }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overrideFillArgb(xValue: number, yValue: number, index: number): number {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (yValue &amp;gt; 0.5 &amp;amp;&amp;amp; yValue &amp;lt; 0.75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.palettedFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overrideStrokeArgb(xValue: number, yValue: number, index: number): number {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (yValue &amp;gt; 0.5 &amp;amp;&amp;amp; yValue &amp;lt; 0.75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return this.palettedStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add a toJSON method so this can be serialized.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public toJSON(): TPaletteProviderDefinition {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EPaletteProviderType.Custom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customType: ExampleMountainPaletteProvider.Name,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: this.options&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Once you have created your custom type and implemented toJSON(), next you will need to register the type with the builder API to be able to use it.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;&lt;BR&gt;// Register it for use by the builder api&lt;BR&gt;chartBuilder.registerType(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; EBaseType.PaletteProvider,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "ExampleMountainPaletteProvider",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; (options) =&amp;gt; new ExampleMountainPaletteProvider(options)&lt;BR&gt;);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now the usage of the custom type can be done as follows. It will appear to the Builder API as just another type like those already existing in SciChart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;&lt;BR&gt;// Build the surface&lt;BR&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.MountainSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Specify the custom palette&amp;nbsp;provider which was previously registered&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; paletteProvider: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EPaletteProviderType.Custom,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customType: "ExampleMountainPaletteProvider",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { stroke: "lime", fill: "yellow" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Remember that the definition of your custom class, and the registration of it, must also occur on the client that will be using it, before it is used in a SciChart chart.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Custom Types Example&lt;/H2&gt;
&lt;P&gt;For a full example of how to use Custom Types with the Builder API, see the SciChart.js demo &lt;A href="https://demo.scichart.com/javascript-custom-types"&gt;https://demo.scichart.com/javascript-custom-types&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4b80afe1-5ed3-415f-9668-7f43e45c13c4" Status="New Topic" CreatedOn="2021-09-17T18:41:12.2859355Z" ModifiedOn="2021-09-18T10:55:34.277978Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Serialization and Deserialization of Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-18T10:55:34.277978Z">&lt;P&gt;Pretty much everything in SciChart now has a &lt;STRONG&gt;toJSON&lt;/STRONG&gt; method that will return the definition form of that object, usually as {type, options}. When you call &lt;STRONG&gt;JSON.stringify&lt;/STRONG&gt; on an object, &lt;STRONG&gt;toJSON&lt;/STRONG&gt; will be called automatically.&lt;/P&gt;
&lt;P&gt;By default, any data set on the chart will be included in the definition. If you want to exclude it, you need to call &lt;STRONG&gt;toJSON&lt;/STRONG&gt; directly, which for the &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; and &lt;STRONG&gt;renderableSeries&lt;/STRONG&gt; has an &lt;STRONG&gt;excludeData&lt;/STRONG&gt; parameter. Then stringify the result.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const definition = sciChartSurface.toJSON(true);&lt;BR&gt;const json = JSON.stringify(definition);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;When handling incoming JSON, you may want to parse the string to a definition object, in order to combine it with something (usually data) before using it to build the chart. To do this you MUST use the &lt;STRONG&gt;chartReviver&lt;/STRONG&gt; on &lt;STRONG&gt;chartBuilder&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;&lt;BR&gt;const definition = JSON.parse(json, chartBuilder.chartReviver);&lt;BR&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(divElementId, definition);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;All of the Builder API functions for building parts of charts can take JSON strings or a definition object.&lt;/P&gt;
&lt;P&gt;Try this code and this JSON to see the output in SciChart.js&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESeriesType } from "scichart/types/SeriesType";&lt;BR&gt;import { EChart2DModifierType } from "scichart/types/ChartModifierType";&lt;BR&gt;import { ISciChart2DDefinition } from "scichart/Builder/buildSurface";&lt;/P&gt;
&lt;P&gt;export async function drawAndSerializeChart(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: { type: ESeriesType.LineSeries, xyData: { xValues: [1, 3, 4, 7, 9], yValues: [10, 6, 7, 2, 16] } }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const definition = sciChartSurface.toJSON(true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const json = JSON.stringify(definition);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("json definition: ");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(json);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;export async function deserializeAndDrawChart(divElementId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const jsonDefinition = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "surface": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "canvasBorder": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#00000000"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "layoutManager": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "type": "Default"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "padding": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "top": 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "right": 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "bottom": 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "left": 10&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "theme": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "type": "Dark"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "viewportBorder": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#00000000"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "xAxes": [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "type": "NumericAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "options": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "autoRange": "Once",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "autoTicks": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisAlignment": "Bottom",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisBandsFill": "#20212333",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisBorder": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderBottom": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderLeft": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderRight": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderTop": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#00000000",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "border": 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisTitleStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontSize": 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontFamily": "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#C8C7C3FF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontStyle": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontWeight": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "padding": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "top": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "right": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "bottom": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "left": 6&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawLabels": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorBands": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorGridLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorTickLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMinorGridLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMinorTickLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "flippedCoordinates": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "id": "DefaultAxisId",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isInnerAxis": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isVisible": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "labelStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontSize": 14,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontFamily": "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#A6A7ACFF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontWeight": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontStyle": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "padding": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "top": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "right": 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "bottom": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "left": 4&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "alignment": "Auto"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "majorGridLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#AAAAAA37"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "majorTickLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "tickSize": 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#AAAAAA37"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "maxAutoTicks": 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorGridLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#77777719"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorTickLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "tickSize": 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#77777719"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorsPerMajor": 5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "yAxes": [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "type": "NumericAxis",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "options": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "autoRange": "Once",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "autoTicks": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisAlignment": "Right",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisBandsFill": "#20212333",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisBorder": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderBottom": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderLeft": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderRight": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "borderTop": 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#00000000",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "border": 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "axisTitleStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontSize": 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontFamily": "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#C8C7C3FF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontStyle": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontWeight": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "padding": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "top": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "right": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "bottom": 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "left": 6&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawLabels": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorBands": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorGridLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMajorTickLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMinorGridLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawMinorTickLines": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "flippedCoordinates": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "id": "DefaultAxisId",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isInnerAxis": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isVisible": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "labelStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontSize": 14,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontFamily": "Arial",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#A6A7ACFF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontWeight": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "fontStyle": "normal",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "padding": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "top": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "right": 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "bottom": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "left": 4&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "alignment": "Auto"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "majorGridLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#AAAAAA37"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "majorTickLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "tickSize": 5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#AAAAAA37"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "maxAutoTicks": 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorGridLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#77777719"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorTickLineStyle": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "tickSize": 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "color": "#77777719"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "minorsPerMajor": 5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "series": [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "type": "LineSeries",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "options": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "id": "2a152f26-3248-474a-8040-203337f2f670",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "drawNaNAs": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isDigitalLine": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isHovered": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isSelected": false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "isVisible": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "opacity": 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "stroke": "#C6E6FFFF",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "strokeThickness": 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "xAxisId": "DefaultAxisId",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "yAxisId": "DefaultAxisId"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "xyData": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "containsNaN": true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "dataIsSortedInX": true&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "modifiers": [],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "annotations": []&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const definition = JSON.parse(json, chartBuilder.chartReviver);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; definition.modifiers = [{ type: EChart2DModifierType.Rollover }];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return chartBuilder.build2DChart(divElementId, definition);&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;You can generate JSON chart definitions as well using the SciChart.js library. For example if you wanted to define a chart definition on the server and send this over to a client as JSON it's possible to do this.&lt;/P&gt;
&lt;P&gt;For more information and a workable example, try the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-chart-from-json" target=_blank&gt;Chart Serialization demo&lt;/A&gt; on our JavaScript Chart Examples&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b90d56c0-b80e-48db-ac14-36b8a86e899e" Status="New Topic" CreatedOn="2021-09-17T18:41:58.5997587Z" ModifiedOn="2021-09-29T09:40:55.0432248Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating a Pie Chart" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-29T09:40:55.0432248Z">&lt;P&gt;In the&amp;nbsp;&lt;A href="12d8414b-a252-4fbc-bc7e-0595f40a66f6"&gt;previous article&lt;/A&gt;, we covered how to create a simple 2D Chart using the SciChart.js Builder API.&lt;/P&gt;
&lt;P&gt;The &lt;STRONG&gt;buildChart&lt;/STRONG&gt; function can be used to build both 2D Charts and Pie Charts, so the returned object type will differ depending on the chart type. In this case you may need to handle the result by checking the shape of the object, for example:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const result = await chartBuilder.buildChart(divElementId, definition);&lt;BR&gt;if ("sciChartSurface" in result) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = result;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // handle 2D Chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;} else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // handle Pie Chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const sciChartPieSurface = result;&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;There are also specific function calls to &lt;STRONG&gt;build2DChart&lt;/STRONG&gt; or &lt;STRONG&gt;buildPieChart&lt;/STRONG&gt; as well. Find some examples below.&lt;/P&gt;
&lt;P&gt;Using buildChart to create a Pie Chart&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { ESciChartSurfaceType } from "scichart/types/SciChartSurfaceType";&lt;/P&gt;
&lt;P&gt;...&lt;/P&gt;
&lt;P&gt;chartBuilder.buildChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESciChartSurfaceType.Pie2D,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; segments: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "This", value: 10, color: "red" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "That", value: 5, color: "blue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "Other", value: 7, color: "green" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Using &lt;STRONG&gt;buildPieChart&lt;/STRONG&gt; to explicitly create a Pie Chart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;&lt;BR&gt;chartBuilder.buildPieChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; segments: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "This", value: 10, color: "red" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "That", value: 5, color: "blue" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { text: "Other", value: 7, color: "green" }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="ec30c144-4369-46c9-af5f-aaa3a30756db" AutoIndex="false">
            <Caption m="2021-09-16T17:07:22.8121989Z">Accessibility</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="ebdbfc5e-2e00-4be7-a70f-fee17836eea0" Status="New Topic" CreatedOn="2021-10-08T11:11:04.9340804Z" ModifiedOn="2021-10-09T06:09:16.5892859Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating Accessible Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-09T06:09:16.5892859Z">&lt;P&gt;&lt;/P&gt;
&lt;P&gt;This is a description of available accessibility features which could be provided by the SciChart. Here we tried to demonstrate how to configure the chart using existing APIs to support some of these features.&lt;/P&gt;
&lt;P&gt;The list of accessibility features:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;A href="d2217f84-91e6-420c-8729-fcee652a45b2"&gt;Voice Over&lt;/A&gt; 
&lt;LI&gt;&lt;A href="f1e9ab82-1c46-40a1-9313-ed7bb8001734"&gt;Color and Contrast&lt;/A&gt; 
&lt;LI&gt;&lt;A href="3be95a45-054e-474c-aeb3-9aa0fc83eb8a"&gt;Keyboard Accessibility&lt;/A&gt; &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d2217f84-91e6-420c-8729-fcee652a45b2" Status="New Topic" CreatedOn="2021-10-08T11:18:37.4040482Z" ModifiedOn="2021-10-09T06:10:00.8709704Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Voice Over" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-08T12:36:50.9056708Z">&lt;P&gt;To achieve voice over the chart elements, data, and some actions, we can use the&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit Test API&lt;/A&gt; and event subscription.&lt;/P&gt;
&lt;P&gt;Possible use-cases:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;User selects axes with the voice over reading the range of the axis that is visible on the screen. &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;User clicks on a series data point with the voice over reading the coordinates of the selected point. &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;User zooms or pans chart with the voice over describing the new visible ranges of the axes.&lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Adding VoiceOver to Data Series using HitTest API&lt;/H2&gt;
&lt;P&gt;This example demonstrates how to add VoiceOver to announce points on&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt;. Voice over functionality is provided by&amp;nbsp;&lt;A href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance" target=_blank&gt;SpeechSynthesisUtterance API&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;1.&amp;nbsp;We will start from a basic chart definition:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId);&lt;BR&gt;const xAxis = new NumericAxis(wasmContext, { axisTitle: "Horizontal Axis" });&lt;BR&gt;const yAxis = new NumericAxis(wasmContext, { axisTitle: "Vertical Axis" });&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: "Primary Data Series",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [8, 6, 7, 2, 16]&lt;BR&gt;});&lt;BR&gt;const renderableSeries = new FastLineRenderableSeries(wasmContext, { strokeThickness: 5, dataSeries });&lt;BR&gt;sciChartSurface.renderableSeries.add(renderableSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { FastLineRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId);&lt;BR&gt;const xAxis = new NumericAxis(wasmContext, { axisTitle: "Horizontal Axis" });&lt;BR&gt;const yAxis = new NumericAxis(wasmContext, { axisTitle: "Vertical Axis" });&lt;BR&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: "Primary Data Series",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [8, 6, 7, 2, 16]&lt;BR&gt;});&lt;BR&gt;const renderableSeries = new FastLineRenderableSeries(wasmContext, { strokeThickness: 5, dataSeries });&lt;BR&gt;sciChartSurface.renderableSeries.add(renderableSeries);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This definition instantiates a chart with named axes and line series.&lt;/P&gt;
&lt;P&gt;2.&amp;nbsp;Subscribe to mouse click events on the chart:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const hitTestDataPoints = (point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // event handler logic&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// add voice over for data points&lt;BR&gt;sciChartSurface.domCanvas2D.addEventListener("mousedown", (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const point = new Point(mouseEvent.offsetX, mouseEvent.offsetY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoints(point);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { Point } from "scichart/Core/Point";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const hitTestDataPoints = (point: Point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // event handler logic&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// add voice over for data points&lt;BR&gt;sciChartSurface.domCanvas2D.addEventListener("mousedown", (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const point = new Point(mouseEvent.offsetX, mouseEvent.offsetY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoints(point);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;3.&amp;nbsp;Add logic to check if line series are clicked in &lt;STRONG&gt;hitTestDataPoints&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { DpiHelper } from "scichart/Charting/Visuals/TextureManager/DpiHelper";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const hitTestDataPoints = (point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.asArray().forEach(series =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (series.hitTestProvider) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = series.hitTestProvider.hitTest(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; point.x * DpiHelper.PIXEL_RATIO,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; point.y * DpiHelper.PIXEL_RATIO,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HIT_TEST_RADIUS,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; voiceOverDataPoint(series, hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { DpiHelper } from "scichart/Charting/Visuals/TextureManager/DpiHelper";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const hitTestDataPoints = (point: Point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.asArray().forEach(series =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (series.hitTestProvider) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = series.hitTestProvider.hitTest(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; point.x * DpiHelper.PIXEL_RATIO,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; point.y * DpiHelper.PIXEL_RATIO,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; HIT_TEST_RADIUS,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // here we will do the VoiceOver&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; voiceOverDataPoint(series, hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Notice that coordinates passed to the Hit Test method are multiplied by &lt;STRONG&gt;DpiHelper.PIXEL_RATIO&lt;/STRONG&gt; to be scaled accordingly to display and browser configurations. See also&amp;nbsp;&lt;A href="d2be691e-df29-43c3-9a57-0130024efa03"&gt;Retina Support and Browser Zoom&lt;/A&gt;,&amp;nbsp;&lt;A href="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0"&gt;Hit Test API&lt;/A&gt; Documentation.&lt;/P&gt;
&lt;P&gt;4.&amp;nbsp;Now let's define the &lt;STRONG&gt;voiceOverDataPoint&lt;/STRONG&gt; function which will format the coordinates and announce them using &lt;STRONG&gt;VoiceOver&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const voiceOverDataPoint = (series, hitTestInfo) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { hitTestPointValues } = hitTestInfo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xCoordValue = series.xAxis.labelProvider.formatLabel(hitTestPointValues.x);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yCoordValue = series.yAxis.labelProvider.formatLabel(hitTestPointValues.y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const pointDescription = `Point at coordinates ${xCoordValue} and ${yCoordValue}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announcePointOnDataSeries(pointDescription);&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { HitTestInfo } from "scichart/Charting/Visuals/RenderableSeries/HitTest/HitTestInfo";&lt;BR&gt;import { IRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/IRenderableSeries";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const voiceOverDataPoint = (series: IRenderableSeries, hitTestInfo: HitTestInfo) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { hitTestPointValues } = hitTestInfo;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xCoordValue = series.xAxis.labelProvider.formatLabel(hitTestPointValues.x);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yCoordValue = series.yAxis.labelProvider.formatLabel(hitTestPointValues.y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const pointDescription = `Point at coordinates ${xCoordValue} and ${yCoordValue}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announcePointOnDataSeries(pointDescription);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;where &lt;STRONG&gt;announcePointOnDataSeries&lt;/STRONG&gt; is implemented as following:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const announceWithSpeechSynthesis = (announcement) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(announcement)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const synthDescription = new SpeechSynthesisUtterance(announcement);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; window.speechSynthesis.speak(synthDescription);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const debounce = (func, timeout = 1000) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let timer;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (...args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; clearTimeout(timer);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer = setTimeout(() =&amp;gt; func(...args), timeout);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const announcePointOnDataSeries = debounce(announceWithSpeechSynthesis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const announceWithSpeechSynthesis = (announcement: string) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log(announcement)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const synthDescription = new SpeechSynthesisUtterance(announcement);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; window.speechSynthesis.speak(synthDescription);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const debounce = (func: (...params: any) =&amp;gt; void, timeout = 1000) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let timer: NodeJS.Timeout;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return (...args: any) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; clearTimeout(timer);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; timer = setTimeout(() =&amp;gt; func(...args), timeout);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;// additionally debounce the speech synthesis generation&lt;BR&gt;const announcePointOnDataSeries = debounce(announceWithSpeechSynthesis);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Now upon clicking on a point of the line series we should get its coordinates announced with speech synthesis and logged to the console.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Accessibility_VoiceOverDataPoints.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;&amp;nbsp;VoiceOver for Axes&lt;/H2&gt;
&lt;P&gt;&lt;STRONG&gt;VoiceOver&lt;/STRONG&gt; upon chart axes also could be easily implemented:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const hitTestAxes = (point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isPointWithinAxis(point, axis)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceAxis(axis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isPointWithinAxis(point, axis)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceAxis(axis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// add voice over for data points and axes&lt;BR&gt;sciChartSurface.domCanvas2D.addEventListener("mousedown", (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const point = new Point(mouseEvent.offsetX, mouseEvent.offsetY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestAxes(point);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoints(point);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const hitTestAxes = (point: Point) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isPointWithinAxis(point, axis)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceAxis(axis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (isPointWithinAxis(point, axis)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceAxis(axis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// add voice over for data points and axes&lt;BR&gt;sciChartSurface.domCanvas2D.addEventListener("mousedown", (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const point = new Point(mouseEvent.offsetX, mouseEvent.offsetY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoints(point);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestAxes(point);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Here we have defined &lt;STRONG&gt;hitTestAxes&lt;/STRONG&gt; function and used it in the event listener. &lt;/P&gt;
&lt;P&gt;The &lt;STRONG&gt;announceAxis&lt;/STRONG&gt; and &lt;STRONG&gt;isPointWithinAxis&lt;/STRONG&gt; will look like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const announceAxis = debounce((axis) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = axis.labelProvider.formatLabel(axis.visibleRange.min);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = axis.labelProvider.formatLabel(axis.visibleRange.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const axisDescription = `${axis.axisTitle} with visible range from ${from} to ${to} `;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceWithSpeechSynthesis(axisDescription);&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const isPointWithinAxis = (point, axis) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return point.x * DpiHelper.PIXEL_RATIO &amp;gt; axis.viewRect.left &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.x * DpiHelper.PIXEL_RATIO &amp;lt; axis.viewRect.right&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.y * DpiHelper.PIXEL_RATIO &amp;gt; axis.viewRect.top &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.y * DpiHelper.PIXEL_RATIO &amp;lt; axis.viewRect.bottom;&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { AxisBase2D } from "scichart/Charting/Visuals/Axis/AxisBase2D";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const announceAxis = debounce((axis: AxisBase2D) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = axis.labelProvider.formatLabel(axis.visibleRange.min);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = axis.labelProvider.formatLabel(axis.visibleRange.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const axisDescription = `${axis.axisTitle} with visible range from ${from} to ${to} `;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceWithSpeechSynthesis(axisDescription);&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const isPointWithinAxis = (point: Point, axis: AxisBase2D) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return point.x * DpiHelper.PIXEL_RATIO &amp;gt; axis.viewRect.left &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.x * DpiHelper.PIXEL_RATIO &amp;lt; axis.viewRect.right&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.y * DpiHelper.PIXEL_RATIO &amp;gt; axis.viewRect.top &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;amp;&amp;amp; point.y * DpiHelper.PIXEL_RATIO &amp;lt; axis.viewRect.bottom;&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This example should result in &lt;STRONG&gt;VoiceOver&lt;/STRONG&gt; describing axis title and its visible range upon clicking.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Accessibility_VoiceOverAxes.jpg"&gt;&lt;/P&gt;
&lt;H2&gt;VoiceOver for visible range updates&lt;/H2&gt;
&lt;P&gt;The visible range changes detection on an axis could be added as following:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Visible range changes detection&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const announceYRangeChange = debounce(announceWithSpeechSynthesis);&lt;BR&gt;const announceXRangeChange = debounce(announceWithSpeechSynthesis);&lt;/P&gt;
&lt;P&gt;// add announcement of axis range changes&lt;BR&gt;yAxis.visibleRangeChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { min, max } = args.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = yAxis.labelProvider.formatLabel(min);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = yAxis.labelProvider.formatLabel(max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const announcement = `${yAxis.axisTitle} range changed, now it's from ${from} to ${to}.`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceYRangeChange(announcement);&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;xAxis.visibleRangeChanged.subscribe((args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { min, max } = args.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = xAxis.labelProvider.formatLabel(min);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = xAxis.labelProvider.formatLabel(max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const announcement = `${xAxis.axisTitle} range changed, now it's from ${from} to ${to}.`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; announceXRangeChange(announcement);&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Let's add some zoom&amp;amp;pan modifiers to demonstrate the result:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Add modifiers&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { ZoomExtentsModifier } from "scichart/Charting/ChartModifiers/ZoomExtentsModifier";&lt;BR&gt;import { ZoomPanModifier } from "scichart/Charting/ChartModifiers/ZoomPanModifier";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;sciChartSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomPanModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ZoomExtentsModifier(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier(),&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Now when using the chart modifiers you should be able to observe them getting logged to the console.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Accessibility_VoiceOverVisisbleRange.jpg"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b7014b24-7477-4929-a4c0-3158bd35c8a4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1e9ab82-1c46-40a1-9313-ed7bb8001734" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5282c8d5-dd27-4106-a13f-1eb9d6153c58" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3be95a45-054e-474c-aeb3-9aa0fc83eb8a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f1e9ab82-1c46-40a1-9313-ed7bb8001734" Status="New Topic" CreatedOn="2021-10-09T05:46:24.9049086Z" ModifiedOn="2021-10-09T06:10:23.1100377Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Color and Contrast" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-09T05:54:57.1697794Z">&lt;P&gt;Since colors and theming are most likely to be custom for each customer, we don't provide out of the box light and dark theme handling (nor special theme for High Contrast). &lt;/P&gt;
&lt;P&gt;But that's easily achievable by using one of the provided themes, or creating a custom one.&lt;/P&gt;
&lt;H2&gt;Default Themes&lt;/H2&gt;
&lt;P&gt;By default SciChart uses &lt;STRONG&gt;SciChartJSDarkv2Theme&lt;/STRONG&gt;. Also SciChart exposes &lt;STRONG&gt;SciChartJSDarkTheme&lt;/STRONG&gt; and &lt;STRONG&gt;SciChartJSLightTheme&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In this example we will show how to set a desired theme depending on user theme settings.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting a Theme&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartJSDarkTheme } from 'scichart/Charting/Themes/SciChartJSDarkTheme';&lt;BR&gt;import { SciChartJSLightTheme } from 'scichart/Charting/Themes/SciChartJSLightTheme';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const isDarkThemeSelected = window.matchMedia &amp;amp;&amp;amp; window.matchMedia("(prefers-color-scheme: dark)").matches;&lt;/P&gt;
&lt;P&gt;const newColorScheme = isDarkThemeSelected&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ? new SciChartJSDarkTheme() &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; : new SciChartJSLightTheme();&lt;/P&gt;
&lt;P&gt;sciChartSurface.applyTheme(newColorScheme);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The snippet above should set the light or dark theme depending on user preferences.&lt;/P&gt;
&lt;P&gt;It's easy to handle the theme change:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const handleSystemThemeChange = (event) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newColorScheme = event.matches &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ? new SciChartJSDarkTheme() &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : new SciChartJSLightTheme();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.applyTheme(newColorScheme)&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handleSystemThemeChange);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const handleSystemThemeChange = (event: MediaQueryListEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newColorScheme = event.matches&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ? new SciChartJSDarkTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; : new SciChartJSLightTheme();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.applyTheme(newColorScheme);&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", handleSystemThemeChange);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Now the chart will detect user dark/light theme preference updates and will use an appropriate theme.&lt;/P&gt;
&lt;H2&gt;Custom Themes&lt;/H2&gt;
&lt;P&gt;Refer to&amp;nbsp;&lt;A href="b21b1ec3-6fbd-4f80-8de1-0c6647638e0a"&gt;Chart Styling - Creating a Custom Theme&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="7194fd3a-12a2-46b1-a904-ba2f89c397c3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d2217f84-91e6-420c-8729-fcee652a45b2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e87e9096-b4c5-4ef0-a125-c0cd8a6d7c01" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3be95a45-054e-474c-aeb3-9aa0fc83eb8a" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="3be95a45-054e-474c-aeb3-9aa0fc83eb8a" Status="New Topic" CreatedOn="2021-10-09T05:53:14.3542213Z" ModifiedOn="2021-10-09T06:11:04.824737Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Keyboard Accessibility" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-09T06:08:29.1697704Z">&lt;P&gt;A chart behavior is easily extendable with the use of Chart Modifiers. So they can be used to add a keyboard accessibility to the chart. See also&amp;nbsp;&lt;A href="f1ace0de-c745-4610-a766-eb59af8cf33d"&gt;What is the ChartModifier API&lt;/A&gt;,&amp;nbsp;&lt;A href="c7ddb5a2-5c58-4351-9336-bafd039a556f"&gt;Common ChartModifiers Features&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Custom Keyboard Interaction Modifier&lt;/H2&gt;
&lt;P&gt;For this example we created a simple custom modifier - &lt;STRONG&gt;KeyboardZoomPanModifier&lt;/STRONG&gt;, which adds an ability to scroll the chart with arrow buttons and to zoom with &lt;STRONG&gt;"+"&lt;/STRONG&gt;/&lt;STRONG&gt;"-"&lt;/STRONG&gt; buttons. The same approach can be used to add more custom keyboard bindings.&lt;/P&gt;
&lt;P&gt;Here is the definition of the &lt;STRONG&gt;KeyboardZoomPanModifier&lt;/STRONG&gt;:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ChartModifierBase2D } from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import { EClipMode } from "scichart/Charting/Visuals/Axis/AxisBase2D";&lt;BR&gt;import { Point } from "scichart/Core/Point";&lt;BR&gt;import { EXyDirection } from "scichart/types/XyDirection";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const DEFAULT_SCROLL_DELTA = 100;&lt;BR&gt;const DEFAULT_ZOOM_DELTA = 120;&lt;/P&gt;
&lt;P&gt;class KeyboardZoomPanModifier extends ChartModifierBase2D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(options);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.type = "KeyboardZoomPan";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Modifies the speed of&amp;nbsp; zoom, for example growFactor = 0.001 means each 'click'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * zooms the chart 0.1%&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growFactor = options &amp;amp;&amp;amp; options.growFactor || 0.001;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Modifies the speed of scroll, for example scrollFactor = 0.001 means each 'click'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * scrolls the chart 0.1%&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scrollFactor = options &amp;amp;&amp;amp; options.scrollFactor || 0.001;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.handleKeyDown = this.handleKeyDown.bind(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scroll(xDelta, yDelta) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Scroll the X,YAxis by the number of pixels since the last update&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const token = this.parentSurface.suspendUpdates();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.XDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = (axis.isHorizontalAxis ? xDelta : -yDelta) * this.scrollFactor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.scroll(axis.flippedCoordinates ? -delta : delta, EClipMode.None);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.YDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = (axis.isHorizontalAxis ? -xDelta : yDelta) * this.scrollFactor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.scroll(axis.flippedCoordinates ? -delta : delta, EClipMode.None);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; token.resume();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set tabIndex attribute of the chart root element if it was not set externally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.tabIndex = this.parentSurface.domChartRoot.tabIndex || 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // subscribe to keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.addEventListener("keydown", this.handleKeyDown);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // unsubscribe from keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.removeEventListener("keydown", this.handleKeyDown);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Performs the zoom operation around the mouse point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param mousePoint The X,Y location of the mouse at the time of the zoom&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param delta the delta factor of zoom&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; performZoom(mousePoint, delta) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fraction = this.growFactor * delta;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.XDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growBy(mousePoint, axis, fraction);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.YDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growBy(mousePoint, axis, fraction);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; handleKeyDown(event) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ignore key combinations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (event.ctrlKey || event.altKey || event.metaKey) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; switch (event.key) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowUp":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(0, DEFAULT_SCROLL_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowDown":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(0, -DEFAULT_SCROLL_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowRight":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(DEFAULT_SCROLL_DELTA, 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowLeft":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(-DEFAULT_SCROLL_DELTA, 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "+": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomPoint = new Point(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.width / 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.height / 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.performZoom(zoomPoint, -DEFAULT_ZOOM_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "-": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomPoint = new Point(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.width / 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.height / 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.performZoom(zoomPoint, DEFAULT_ZOOM_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; default:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // prevent default behavior if the key is used by the modifier&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; event.preventDefault();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ChartModifierBase2D, IChartModifierBaseOptions } from "scichart/Charting/ChartModifiers/ChartModifierBase2D";&lt;BR&gt;import { EClipMode } from "scichart/Charting/Visuals/Axis/AxisBase2D";&lt;BR&gt;import { Point } from "scichart/Core/Point";&lt;BR&gt;import { EXyDirection } from "scichart/types/XyDirection";&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const DEFAULT_SCROLL_DELTA = 100;&lt;BR&gt;const DEFAULT_ZOOM_DELTA = 120;&lt;/P&gt;
&lt;P&gt;interface IKeyboardZoomPanModifierOptions extends IChartModifierBaseOptions {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; growFactor?: number;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; scrollFactor?: number;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;class KeyboardZoomPanModifier extends ChartModifierBase2D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public type = "KeyboardZoomPan";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Modifies the speed of zoom, for example growFactor = 0.001 means each 'click'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * zooms the chart 0.1%&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public growFactor: number = 0.001;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Modifies the speed of scroll, for example scrollFactor = 0.001 means each 'click'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * scrolls the chart 0.1%&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public scrollFactor: number = 0.001;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(options?: IKeyboardZoomPanModifierOptions) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(options);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growFactor = options?.growFactor ?? this.growFactor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scrollFactor = options?.scrollFactor ?? this.scrollFactor;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.handleKeyDown = this.handleKeyDown.bind(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public scroll(xDelta: number, yDelta: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const token = this.parentSurface.suspendUpdates();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Scroll the X,YAxis by the number of pixels since the last update&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.XDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = (axis.isHorizontalAxis ? xDelta : -yDelta) * this.scrollFactor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.scroll(axis.flippedCoordinates ? -delta : delta, EClipMode.None);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.YDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = (y.isHorizontalAxis ? -xDelta : yDelta) * this.scrollFactor;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axis.scroll(axis.flippedCoordinates ? -delta : delta, EClipMode.None);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; token.resume();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set tabIndex attribute of the chart root element if it was not set externally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.tabIndex = this.parentSurface.domChartRoot.tabIndex ?? 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // subscribe to keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.addEventListener("keydown", this.handleKeyDown);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // unsubscribe from keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.removeEventListener("keydown", this.handleKeyDown);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Performs the zoom operation around the mouse point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param mousePoint The X,Y location of the mouse at the time of the zoom&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param delta the delta factor of zoom&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected performZoom(mousePoint: Point, delta: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fraction = this.growFactor * delta;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.XDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.xAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growBy(mousePoint, axis, fraction);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ([EXyDirection.YDirection, EXyDirection.XyDirection].includes(this.xyDirection)) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.yAxes.asArray().forEach(axis =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.growBy(mousePoint, axis, fraction);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private handleKeyDown(event: KeyboardEvent) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ignore key combinations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (event.ctrlKey || event.altKey || event.metaKey) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; switch (event.key) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowUp":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(0, DEFAULT_SCROLL_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowDown":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(0, -DEFAULT_SCROLL_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowRight":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(DEFAULT_SCROLL_DELTA, 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "ArrowLeft":&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.scroll(-DEFAULT_SCROLL_DELTA, 0);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "+": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomPoint = new Point(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.width / 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.height / 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.performZoom(zoomPoint, -DEFAULT_ZOOM_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; case "-": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zoomPoint = new Point(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.width / 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.seriesViewRect.height / 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.performZoom(zoomPoint, DEFAULT_ZOOM_DELTA);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; break;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; default:&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // prevent default behavior if the key is used by the modifier&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; event.preventDefault();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Now let's look closer at the properties and methods of this class. &lt;/P&gt;
&lt;P&gt;First of all the class is extended from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase2d.html"&gt;ChartModifierBase2D&lt;/A&gt;, which provides it with some properties and methods required on a chart modifier.&lt;/P&gt;
&lt;P&gt;Also we defined several optional properties on the class which may be useful for configuring the modifier: &lt;STRONG&gt;type&lt;/STRONG&gt;, &lt;STRONG&gt;growFactor&lt;/STRONG&gt;, &lt;STRONG&gt;scrollFactor&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;To make it possible for a chart to respond to key press events we need to make sure that it is focusable by keyboard navigation and add appropriate event listeners. &lt;/P&gt;
&lt;P&gt;We can do this inside the &lt;STRONG&gt;onAttach&lt;/STRONG&gt;/&lt;STRONG&gt;onDetach&lt;/STRONG&gt; methods, which are called when the modifier is added to the chart:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set tabIndex attribute of the chart root element if it was not set externally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.tabIndex = this.parentSurface.domChartRoot.tabIndex || 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // subscribe to keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.addEventListener("keydown", this.handleKeyDown);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // unsubscribe from keyboard input event&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.removeEventListener("keydown", this.handleKeyDown);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public onAttach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set tabIndex attribute of the chart root element if it was not set externally&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.tabIndex = this.parentSurface.domChartRoot.tabIndex ?? 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.addEventListener("keydown", this.handleKeyDown);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;public onDetach() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.parentSurface.domChartRoot.removeEventListener("keydown", this.handleKeyDown);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;STRONG&gt;KeyboardZoomPanModifier.handleKeyDown&lt;/STRONG&gt; method is the one responsible for handling different keyboard inputs.&lt;/P&gt;
&lt;P&gt;Depending on the key pressed it will call &lt;STRONG&gt;KeyboardZoomPanModifier.scroll&lt;/STRONG&gt; or &lt;STRONG&gt;KeyboardZoomPanModifier.performZoom&lt;/STRONG&gt; to updated the visible ranges.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;KeyboardZoomPanModifier.scroll&lt;/STRONG&gt; uses the &lt;STRONG&gt;SuspendUpdates API&lt;/STRONG&gt; for more info check&amp;nbsp;&lt;A href="498f88e2-6f84-4804-9da5-426e8d72ef00"&gt;Batching updates or Temporary Suspending Drawing&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Finally, the usage of the modifier simply looks like:&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.chartModifiers.add(new KeyboardZoomPanModifier({ scrollFactor: 0.1 })); &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Make sure the chart root element is focused by keyboard navigation for modifier to work. E.g. you can make the element focused by default:&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;// focus on scichart root to allow scichart detect keyboard events &lt;/P&gt;
&lt;P&gt;sciChartSurface.domChartRoot.focus();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="931d7c81-4503-4f49-adf1-b8313daca35f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d2217f84-91e6-420c-8729-fcee652a45b2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="dceb1f55-26ba-44e1-a908-7476e20180fa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f1e9ab82-1c46-40a1-9313-ed7bb8001734" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="36c1ea05-2bbb-4cff-bc70-b58c7427a0c5" AutoIndex="false">
            <Caption m="2021-09-17T08:35:01.1838506Z">Animations API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="9695e2f8-bcd6-4ed4-ba36-244dc476498d" Status="New Topic" CreatedOn="2021-03-30T09:35:19.7043805Z" ModifiedOn="2022-01-12T12:16:48.0250911Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Animations API" BuildFlags="">
                <Title m="2021-09-20T14:37:42.7086854Z">The Animations API</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-01-12T12:16:47.9950779Z">&lt;H2&gt;Animations API Fundamentals&lt;/H2&gt;
&lt;P&gt;In SciChart.js you can use the Animations API to animate&amp;nbsp;&lt;A href="172addbf-995e-4705-9f7d-535415ab322a"&gt;RenderableSeries (Chart Types)&lt;/A&gt;. The Animations API allows you to define a number of different transforms you your chart series during the render pass.&lt;/P&gt;
&lt;P&gt;Additionally there are&amp;nbsp;&lt;A href="fe6c3ce9-2005-4376-9a41-24d2c4f9540c"&gt;Generic Animations&lt;/A&gt;, which are run on the SciChartSurface rather than a particular series, and can be coded to animate almost anything, such as annotations, data, and even things outside the chart.&lt;/P&gt;
&lt;P&gt;The reset of this page introduces Series Animations.&lt;/P&gt;
&lt;P&gt;For example. here is&amp;nbsp;a Wave startup animation:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Wave animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation: new WaveAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zeroLine: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointDurationFraction: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fadeEffect: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; delay: 1000&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Animations_WaveAnimation1.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H2&gt;Types of Animation in SciChart.js&lt;/H2&gt;
&lt;P&gt;There are three types of series&amp;nbsp;animations in the SciChart.js library:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="58192c7b-dfc3-423d-a59e-c0f2ad6444f5"&gt;A start-up animation&lt;/A&gt;&lt;/STRONG&gt;, which runs on start (when a series is shown) 
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="f876af6c-6400-450c-a8e0-86abbddceb22"&gt;A style animation&lt;/A&gt;&lt;/STRONG&gt;, which animates style properties like stroke, strokeThickness and fill 
&lt;LI&gt;&lt;STRONG&gt;&lt;A href="85747712-2b51-4065-9ca9-63bfba49d2d1"&gt;A dataset animation&lt;/A&gt;&lt;/STRONG&gt;, which animates changing data. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Articles above cover these animation types and give you examples of how to use them.&lt;/P&gt;
&lt;H2&gt;Running or Queueing an Animation&lt;/H2&gt;
&lt;P&gt;The API to run any of those animations is the same.&lt;/P&gt;
&lt;P&gt;You can either run an animation immediately, or add it to the queue.&lt;/P&gt;
&lt;H3&gt;Adding Animations to the Queue&lt;/H3&gt;
&lt;P&gt;Internally each renderable series has an animation queue which allows chaining animations. In order to add an animation to the queue call &lt;STRONG&gt;enqueueAnimation:&lt;/STRONG&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Queue Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const someAnimation = new WaveAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; zeroLine: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointDurationFraction: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fadeEffect: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; delay: 1000&lt;BR&gt;});&lt;BR&gt;const lineSeries = new FastLineRenderableSeries(wasmContext);&lt;BR&gt;lineSeries.enqueueAnimation(someAnimation);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Running an Animation Right Away&lt;/H3&gt;
&lt;P&gt;If there is a need to cancel all already running animations and run another animation use &lt;STRONG&gt;runAnimation&lt;/STRONG&gt; method, or, alternatively setting the &lt;STRONG&gt;BaseRenderableSeries.animation&lt;/STRONG&gt; property or passing the animation to the series constructor.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Run&amp;nbsp;Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Cancels running animations and executes a new one immediately&lt;BR&gt;lineSeries.runAnimation(someAnimation);&lt;BR&gt;&lt;BR&gt;// or alternatively&lt;BR&gt;lineSeries.animation = someAnimation;&lt;BR&gt;&lt;BR&gt;// or alternatively&lt;BR&gt;lineSeries = new FastLineRenderableSeries(wasmContext, { animation: someAnimation });&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;See the articles in the &lt;STRONG&gt;See Also&lt;/STRONG&gt; section below for examples of how to use the different animation types.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3f7f0733-c2fa-4b42-9465-5d2fab6ea68f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f876af6c-6400-450c-a8e0-86abbddceb22" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="999f74c1-8adb-4ad8-a4e8-dd3b78961065" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="85747712-2b51-4065-9ca9-63bfba49d2d1" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1dd68c64-9530-49e6-8a1e-2df4b69b1c00" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="58192c7b-dfc3-423d-a59e-c0f2ad6444f5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="52957b52-aa92-44f5-b740-1a3a8d1d2089" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="fe6c3ce9-2005-4376-9a41-24d2c4f9540c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="f876af6c-6400-450c-a8e0-86abbddceb22" Status="New Topic" CreatedOn="2021-09-16T17:06:48.9099602Z" ModifiedOn="2021-09-20T15:34:06.8949655Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Series Style Animations" BuildFlags="">
                <Title m="2021-09-20T14:24:45.40947Z">Style Transition Animations</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-20T15:34:06.8949655Z">&lt;P&gt;SciChart.js v2.x and above features a new API which allows you to animate style properties on different series types. This is useful if you want to provide feedback on mouse-click such as&amp;nbsp;&lt;A href="ae9b10e1-f5ba-444e-9835-6b0f95806007"&gt;data-point selection&lt;/A&gt; or&amp;nbsp;&lt;A href="dc5b75d6-5475-47a1-a5c6-24310f833ba0"&gt;series selection&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Style Animation Types&lt;/H2&gt;
&lt;P&gt;Style animations allow changing series styles like color, stroke thickness, point marker size, etc. These differ from series to series so there is a specific type to animate the properties of each series in SciChart.js.&lt;/P&gt;
&lt;P&gt;Style animation types per-series are as follows:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineanimation.html" target=_blank&gt;LineAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bandanimation.html" target=_blank&gt;BandAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bubbleanimation.html" target=_blank&gt;BubbleAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ohlcanimation.html" target=_blank&gt;OhlcAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/columnanimation.html" target=_blank&gt;ColumnAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mountainanimation.html" target=_blank&gt;MountainAnimation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scatteranimation.html" target=_blank&gt;ScatterAnimation&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Worked Examples&lt;/H2&gt;
&lt;H3&gt;Animating PointMarkers in a Scatter Series&lt;/H3&gt;
&lt;P&gt;The following example&amp;nbsp;will create a style animation for ellipse point marker:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Pointmarker Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;});&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.1, 0.1) }));&lt;/P&gt;
&lt;P&gt;const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 9,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "LightSteelBlue",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "steelblue"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;});&lt;BR&gt;sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;for (let i = 0; i &amp;lt; 20; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, Math.sin(i * 0.5) + 1);&lt;BR&gt;}&lt;BR&gt;scatterSeries.dataSeries = dataSeries;&lt;/P&gt;
&lt;P&gt;const pointMarkerAnimation = new ScatterAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 3000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; styles: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EPointMarkerType.Ellipse,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 40,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 40,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 8,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "Purple",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "White"&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;});&lt;BR&gt;scatterSeries.enqueueAnimation(pointMarkerAnimation);&lt;/P&gt;
&lt;P&gt;sciChartSurface.zoomExtents();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in animating the pointmarker size, stroke and fill on a scatter series:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Animations_PointmarkerStyleAnimation.gif"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="13005d5d-19a1-4906-a629-423dda37731c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9695e2f8-bcd6-4ed4-ba36-244dc476498d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2f91a30d-daed-4789-94a5-9792ca0d6a42" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="58192c7b-dfc3-423d-a59e-c0f2ad6444f5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="10ad260d-742f-429d-be5e-548391fd8391" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="85747712-2b51-4065-9ca9-63bfba49d2d1" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="85747712-2b51-4065-9ca9-63bfba49d2d1" Status="New Topic" CreatedOn="2021-09-20T14:25:07.6699319Z" ModifiedOn="2023-11-10T15:49:25.8117473Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Dataset Animations" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-11-10T15:49:25.8117473Z">&lt;P&gt;SciChart.js v2.x and above features a new API which allows you to animate between datasets on a chart.&amp;nbsp;But the limitation is that the length of data vectors (length of X and Y values and animation values) must be the same.&lt;/P&gt;
&lt;P&gt;Below find an example of animating between two different datasets. Note the Animation type includes style properties and is a specific animation type for the series, as per our&amp;nbsp;&lt;A href="f876af6c-6400-450c-a8e0-86abbddceb22"&gt;Style Transition Animations documentation&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Worked Examples&lt;/H2&gt;
&lt;H3&gt;Animating Data in a Scatter Series&lt;/H3&gt;
&lt;P&gt;You can animate the dataset in a scatter series by using the &lt;STRONG&gt;ScatterAnimation&lt;/STRONG&gt; type. This allows you to set new data and animate to the new position. Find an example below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Scatter dataset animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import {XyScatterRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import {ScatterAnimation} from "scichart/Charting/Visuals/RenderableSeries/Animations/ScatterAnimation";&lt;BR&gt;import { easing} from "scichart/Core/Animations/EasingFunctions";&lt;/P&gt;
&lt;P&gt;export async function scatterDataAnimation(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a scatter series with some initial data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1.3, 2.3, 4, 3.3, 4.5]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 11, height: 11, fill: "#FF3333BB", strokeThickness: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a temp series for passing animation values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animationSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // register this so it is deleted along with the main surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addDeletable(animationSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Update data using data animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animateData = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from({length: 5}, () =&amp;gt; Math.random() * 5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = Array.from({length: 5}, () =&amp;gt; Math.random() * 5);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set the values on the temp series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animationSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animationSeries.appendRange(xValues, yValues);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.runAnimation(new ScatterAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 500,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.outQuad,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Do not create a new DataSeries here or it will leak and eventually crash.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dataSeries: animationSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(animateData, 1000);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(animateData, 1000);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Animations-scatter-data-animation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;H3&gt;Combining Style and Data Animations&lt;/H3&gt;
&lt;P&gt;You can take the example above a step further and combine both style and data animations. Remember the constraint that datasets need the same amount of X,Y datapoints before and after. If this condition is met, you can achieve something like this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Style and data animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaSCript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import {NumericAxis} from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import {EllipsePointMarker} from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;BR&gt;import {XyDataSeries} from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import {NumberRange} from "scichart/Core/NumberRange";&lt;BR&gt;import {XyScatterRenderableSeries} from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import {SciChartJSLightTheme} from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import {ScatterAnimation} from "scichart/Charting/Visuals/RenderableSeries/Animations/ScatterAnimation";&lt;BR&gt;import { easing} from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import {EPointMarkerType} from "scichart/types/PointMarkerType";&lt;/P&gt;
&lt;P&gt;export async function scatterDataAnimationWithStyle(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create a scatter series with some initial data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1.3, 2.3, 4, 3.3, 4.5]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 11, height: 11, fill: "#FF3333BB", strokeThickness: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a temp series for passing animation values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animationSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // register this so it is deleted along with the main surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addDeletable(animationSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Update data using data animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animateDataAndStyle = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from({length: 5}, () =&amp;gt; Math.random() * 5);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = Array.from({length: 5}, () =&amp;gt; Math.random() * 5);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const randomColor = () =&amp;gt; '#'+(0x1000000+Math.random()*0xffffff).toString(16).substr(1,6);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fillColor = randomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const strokeColor = randomColor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const size = Math.random() * 12 + 5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const pointMarkers = [EPointMarkerType.Ellipse, EPointMarkerType.Triangle, EPointMarkerType.Square];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const randomMarker = () =&amp;gt; pointMarkers[Math.floor(Math.random() * 3)];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Set the values on the temp series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animationSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animationSeries.appendRange(xValues, yValues);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.runAnimation(new ScatterAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 500,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.outQuad,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; styles: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: randomMarker(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: size,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: size,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: strokeColor,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: fillColor&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Do not create a new DataSeries here or it will leak and eventually crash.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: animationSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(animateDataAndStyle, 1000);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; setTimeout(animateDataAndStyle, 1000);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Animations-scatter-data-and-style-animation.gif"&gt;&lt;/P&gt;
&lt;H3&gt;Animating Data in a Column Series&lt;/H3&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Column dataset animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;});&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;
&lt;P&gt;const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(176, 196, 222, 1)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#4682b4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.7&lt;BR&gt;});&lt;BR&gt;sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;for (let i = 0; i &amp;lt; 20; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, Math.sin(i * 0.5));&lt;BR&gt;}&lt;BR&gt;columnSeries.dataSeries = dataSeries;&lt;/P&gt;
&lt;P&gt;const dataSeries1 = new XyDataSeries(wasmContext);&lt;BR&gt;for (let i = 0; i &amp;lt; 20; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries1.append(5 + i / 2, Math.cos(i * 0.5));&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;// register this so it is deleted along with the main surface&lt;BR&gt;sciChartSurface.addDeletable(dataSeries1 );&lt;BR&gt;&lt;/P&gt;
&lt;P&gt;columnSeries.runAnimation(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ColumnAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 3000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: dataSeries1&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;);&lt;/P&gt;
&lt;P&gt;sciChartSurface.zoomExtents();&lt;BR&gt;return { wasmContext, sciChartSurface };&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Below is the result.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Animations_Column_Data_Animation.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="58192c7b-dfc3-423d-a59e-c0f2ad6444f5" Status="New Topic" CreatedOn="2021-09-20T14:37:49.5008952Z" ModifiedOn="2021-09-20T15:21:32.5961566Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Series Startup Animations" BuildFlags="">
                <Title />
                <ContentsTitle m="2021-09-20T15:21:32.5951595Z">Series Startup Animations</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-09-20T15:04:05.0965974Z">&lt;P&gt;There are several series startup Animation Types provided out of the box in SciChart.js. These are:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;FadeAnimation&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;ScaleAnimation&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;SweepAnimation&lt;/STRONG&gt; 
&lt;LI&gt;&lt;STRONG&gt;WaveAnimation&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Sweep Startup Animation&lt;/H3&gt;
&lt;P&gt;Let's see a simple example of using Sweep Animation on chart types in SciChart.js&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Sweep Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation: new SweepAnimation({ duration: 1000 }),&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Alternatively&lt;BR&gt;rendSeries.enqueueAnimation(new SweepAnimation({ duration: 1000 }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/SweepAnimationBandSeries.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Fade Startup Animation&lt;/H3&gt;
&lt;P&gt;Now let's see an example&amp;nbsp;of&amp;nbsp;using Fade Animation on some chart types in SciChart.js&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Fade Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation: new FadeAnimation({ duration: 1000 }),&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Alternatively&lt;BR&gt;rendSeries.enqueueAnimation(new FadeAnimation({ duration: 1000 }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/FadeAnimation_RenderableSeries.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: The Sweep, Scale and Wave animations also support fade/opacity by setting the Animation.fadeEffect property to true.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Scale Startup Animation&lt;/H3&gt;
&lt;P&gt;Now let's see an example of the Sweep animation on chart types in SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Scale Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation: new ScaleAnimation({ duration: 1000, zeroLineY: -1.5&amp;nbsp;}),&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Alternatively&lt;BR&gt;rendSeries.enqueueAnimation(new ScaleAnimation({ duration: 1000 }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/ScaleAnimation_RenderableSeries.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;Wave Startup Animation&lt;/H3&gt;
&lt;P&gt;Finally&amp;nbsp;let's see an example of the Wave animation on chart types in SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Wave Animation&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const rendSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation: new WaveAnimation({ duration: 1000, pointDurationFactor: 0.5,&amp;nbsp;zeroLineY: -1.5&amp;nbsp;}),&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Alternatively&lt;BR&gt;rendSeries.enqueueAnimation(new WaveAnimation({ duration: 1000 }));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/WaveAnimation_RenderableSeries.gif"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="7019dee8-129f-47d3-b5f6-f7d576e584ee" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9695e2f8-bcd6-4ed4-ba36-244dc476498d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f5e374bd-6a2c-47bb-b329-1a426b26c947" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="f876af6c-6400-450c-a8e0-86abbddceb22" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="03eb607f-b21c-4095-85e6-3115883a0dc9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="58192c7b-dfc3-423d-a59e-c0f2ad6444f5" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="fe6c3ce9-2005-4376-9a41-24d2c4f9540c" Status="New Topic" CreatedOn="2022-01-12T12:08:57.988134Z" ModifiedOn="2022-01-12T13:08:04.5299359Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Generic Animations" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-01-12T13:08:04.5299359Z">&lt;P&gt;SciChart.js v2.x and above features a new GenericAnimation API which allows you to animate almost everything in the chart and even things outside of the chart, because you have complete control of the onAnimate function. Normally, Generic Animations run at the same time, and for the duration you specify, but by using the onComplete function, you can make one animation start when another ends or create repeating loops.&lt;/P&gt;
&lt;P&gt;The onAnimate function is passed the from and to values, and a progress value, which is between 0 and 1. This is calculated based on the elapsed time and the easing function. You can use this to interpolate between from and to, or ignore it and do something different!&lt;/P&gt;
&lt;P&gt;Here are some simple examples what can be done with new API:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="#Annotations"&gt;Annotations animation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#VisibleRange"&gt;Visible range animation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#Data"&gt;Data and Styles animation&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#Combining"&gt;Combining animations&lt;/A&gt; 
&lt;LI&gt;&lt;A href="#DOM"&gt;Updating the DOM with animations&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;&lt;A id=Annotations name=Annotations&gt;&lt;/A&gt;Animating Annotations&lt;/H3&gt;
&lt;P&gt;All SciChart&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/webframe.html#The Annotations API Overview.html"&gt;annotations&lt;/A&gt; can be animated with Generic Animations API.&lt;BR&gt;This example demonstrates moving a line annotation from one set of coords to another. Any editable property of the annotation can be updated. The key is the use of the arrow function to specify onAnimate, which captures the local context and allows us to update the annotation created earlier.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Annotations&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { DoubleAnimator } from "scichart/Core/Animations/DoubleAnimator";&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(lineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: 4.5, x2: 5.0, y1: 5.0, y2: 4.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 4000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x1 = DoubleAnimator.interpolate(from.x1, to.x1, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y1 = DoubleAnimator.interpolate(from.x2, to.x2, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x2 = DoubleAnimator.interpolate(from.y1, to.y1, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y2 = DoubleAnimator.interpolate(from.y2, to.y2, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Annotations&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { DoubleAnimator } from "scichart/Core/Animations/DoubleAnimator";&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(lineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: 4.5, x2: 5.0, y1: 5.0, y2: 4.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 4000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x1 = DoubleAnimator.interpolate(from.x1, to.x1, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y1 = DoubleAnimator.interpolate(from.x2, to.x2, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x2 = DoubleAnimator.interpolate(from.y1, to.y1, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y2 = DoubleAnimator.interpolate(from.y2, to.y2, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;DIV align=left&gt;&lt;IMG border=0 alt="" src="images/GenericAnimations_line-annotation-moving-animation.gif"&gt;&lt;/DIV&gt;
&lt;H3&gt;&lt;A id=VisibleRange name=VisibleRange&gt;&lt;/A&gt;Animating Visible Range&lt;/H3&gt;
&lt;P&gt;This animation updates visibleRange to zoom the chart. In onComplete we set the from value to the current to value, and then create a new random to value. Calling reset makes the animation start again.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Visible Range&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { NumberRangeAnimator } from "scichart/Core/Animations/NumberRangeAnimator";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastColumnRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries";&lt;/P&gt;
&lt;P&gt;const buildFrom = (xAxis, yAxis) =&amp;gt; ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minX: xAxis.visibleRange.min,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxX: xAxis.visibleRange.max,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minY: yAxis.visibleRange.min,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxY: yAxis.visibleRange.max&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const buildTo = (xAxis, yAxis) =&amp;gt; ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minX: xAxis.visibleRange.min + (Math.random() * 10 + 1) * (Math.random() &amp;gt; .5 ? 1 : -1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxX: xAxis.visibleRange.max + (Math.random() * 10 + 1) * (Math.random() &amp;gt; .5 ? 1 : -1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minY: yAxis.visibleRange.min - Math.random(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxY: yAxis.visibleRange.max + Math.random(),&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;async function drawVisibleRangeAnimationsChart(divId) {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 100) });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, { visibleRange: new NumberRange(-1, 1.5) });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(176, 196, 222, 1)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#4682b4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.7&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; 200; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, 2 * Math.sin(i * 0.2));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnSeries.dataSeries = dataSeries;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const visibleRangeAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: buildFrom(xAxis, yAxis),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: buildTo(xAxis, yAxis),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 3000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xInterpolate = NumberRangeAnimator.interpolate(new NumberRange(from.minX, from.maxX), new NumberRange(to.minX, to.maxX), progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yInterpolate = NumberRangeAnimator.interpolate(new NumberRange(from.minY, from.maxY), new NumberRange(to.minY, to.maxY), progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(xInterpolate.min, xInterpolate.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.visibleRange = new NumberRange(yInterpolate.min, yInterpolate.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.from = visibleRangeAnimation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.to = buildTo(xAxis, yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(visibleRangeAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawVisibleRangeAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Visible Range&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { NumberRangeAnimator } from "scichart/Core/Animations/NumberRangeAnimator";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { FastColumnRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries";&lt;/P&gt;
&lt;P&gt;const buildFrom = (xAxis: NumericAxis, yAxis: NumericAxis) =&amp;gt; ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minX: xAxis.visibleRange.min,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxX: xAxis.visibleRange.max,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minY: yAxis.visibleRange.min,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxY: yAxis.visibleRange.max&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const buildTo = (xAxis: NumericAxis, yAxis: NumericAxis) =&amp;gt; ({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minX: xAxis.visibleRange.min + (Math.random() * 10 + 1) * (Math.random() &amp;gt; .5 ? 1 : -1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxX: xAxis.visibleRange.max + (Math.random() * 10 + 1) * (Math.random() &amp;gt; .5 ? 1 : -1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; minY: yAxis.visibleRange.min - Math.random(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxY: yAxis.visibleRange.max + Math.random(),&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;async function drawVisibleRangeAnimationsChart(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 100) });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, { visibleRange: new NumberRange(-1, 1.5) });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(176, 196, 222, 1)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#4682b4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.7&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; 200; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, 2 * Math.sin(i * 0.2));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; columnSeries.dataSeries = dataSeries;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const visibleRangeAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: buildFrom(xAxis, yAxis),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: buildTo(xAxis, yAxis),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 3000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xInterpolate = NumberRangeAnimator.interpolate(new NumberRange(from.minX, from.maxX), new NumberRange(to.minX, to.maxX), progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yInterpolate = NumberRangeAnimator.interpolate(new NumberRange(from.minY, from.maxY), new NumberRange(to.minY, to.maxY), progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.visibleRange = new NumberRange(xInterpolate.min, xInterpolate.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.visibleRange = new NumberRange(yInterpolate.min, yInterpolate.max);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.delay = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.from = visibleRangeAnimation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.to = buildTo(xAxis, yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRangeAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(visibleRangeAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawVisibleRangeAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/GenericAnimations_visibleRange.gif"&gt;&lt;/P&gt;
&lt;H3&gt;Animating AutoRange&lt;/H3&gt;
&lt;P&gt;The method above is used internally within SciChart to support animating during autoRange. To enable this, set the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#autoRangeAnimation"&gt;autoRangeAnimation&lt;/A&gt; property on an axis.&lt;/P&gt;
&lt;H3&gt;&lt;A id=Data name=Data&gt;&lt;/A&gt;Animating Data and Styles&lt;/H3&gt;
&lt;P&gt;This example shows another way to do&amp;nbsp;&lt;A href="85747712-2b51-4065-9ca9-63bfba49d2d1"&gt;Data Animation&lt;/A&gt;.&amp;nbsp; If you need more flexibility than what the built in series animations provide, then you can use this approach to combine data and style changes, or even animate between different series types. Be aware that the built in animations are well optimised for each series type, so if you are trying to animate large amounts of data, you may get better performance using them.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Data and Styles&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { XyScatterRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import { EllipsePointMarker } from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;/P&gt;
&lt;P&gt;const initialData = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const getData = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; initialData.xValues.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(Math.random() * 5) + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(Math.random() * 5) + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;const interpolateNumber = (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;lt; 0) return from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; 1) return to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return from + (to - from) * progress;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;async function drawDataPointAnimationsChart(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 6) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 6) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // setup data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, initialData);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#189AB4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: initialData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: getData(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 1000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newXValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newYValues = []&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from.xValues.forEach((value, index) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; newXValues.push(interpolateNumber(value, to.xValues[index], progress));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; newYValues.push(interpolateNumber(from.yValues[index], to.yValues[index], progress));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.appendRange(newXValues, newYValues);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.from = dataAnimation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.to = getData();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.pointMarker.width += 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.pointMarker.height += 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Data Point Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(dataAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawDataPointAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Animating Data and Styles&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { XyDataSeries } from "scichart/Charting/Model/XyDataSeries";&lt;BR&gt;import { XyScatterRenderableSeries } from "scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries";&lt;BR&gt;import { EllipsePointMarker } from "scichart/Charting/Visuals/PointMarkers/EllipsePointMarker";&lt;/P&gt;
&lt;P&gt;const initialData = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5]&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const getData = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; initialData.xValues.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues.push(Math.random() * 5) + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues.push(Math.random() * 5) + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;const interpolateNumber = (from: number, to: number, progress: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;lt; 0) return from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; 1) return to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return from + (to - from) * progress;&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;async function drawDataPointAnimationsChart(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 6) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 6) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // setup data&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext, initialData);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 10,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "#189AB4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 0&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: initialData,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: getData(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 1000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newXValues: number[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const newYValues: number[] = []&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from.xValues.forEach((value, index) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; newXValues.push(interpolateNumber(value, to.xValues[index], progress));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; newYValues.push(interpolateNumber(from.yValues[index], to.yValues[index], progress));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.appendRange(newXValues, newYValues);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.from = dataAnimation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.to = getData();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.pointMarker.width += 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; scatterSeries.pointMarker.height += 3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Data Point Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(dataAnimation);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawDataPointAnimationsChart("scichart");&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/GenericAnimations_data.gif"&gt;&lt;/P&gt;
&lt;H3 align=left&gt;&lt;A id=Combining name=Combining&gt;&lt;/A&gt;Combining Animations&lt;/H3&gt;
&lt;P&gt;Here is example of complex animation of different types of annotations.&amp;nbsp;&amp;nbsp;The custom SVG annotation is animated to random coordinates on a repeating loop.&amp;nbsp; The line figure is built up in stages, with animations for the various parts added during the progress of the main animation.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Combining animations&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { DoubleAnimator } from "scichart/Core/Animations/DoubleAnimator";&lt;/P&gt;
&lt;P&gt;const interpolateLine = (from, to, interpolationFactor) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: DoubleAnimator.interpolate(from.x1, to.x1, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: DoubleAnimator.interpolate(from.x2, to.x2, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: DoubleAnimator.interpolate(from.y1, to.y1, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: DoubleAnimator.interpolate(from.y2, to.y2, interpolationFactor)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const getRandomCoords = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: Math.floor(Math.random() * 3 + 1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: Math.floor(Math.random() * 3 + 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const secondLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const thirdLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fourthLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgString = `&amp;lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="30px" height="30px" viewBox="0 0 30 29" version="1.1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;g id="surface1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 29.992188 26.488281 L 29.992188 28.070312 L 0 28.070312 L 0 0.921875 L 1.636719 0.921875 L 1.636719 26.488281 Z M 5.15625 13.300781 C 5.386719 13.300781 5.605469 13.253906 5.8125 13.183594 L 8.84375 17.769531 C 8.421875 18.152344 8.15625 18.695312 8.15625 19.296875 C 8.15625 20.460938 9.132812 21.40625 10.339844 21.40625 C 11.542969 21.40625 12.519531 20.460938 12.519531 19.296875 C 12.519531 18.976562 12.4375 18.671875 12.304688 18.398438 L 16.28125 15.589844 C 16.59375 15.84375 16.988281 16.003906 17.425781 16.003906 C 17.914062 16.003906 18.351562 15.8125 18.671875 15.507812 L 22.742188 17.96875 C 22.53125 18.320312 22.410156 18.726562 22.410156 19.160156 C 22.410156 20.484375 23.523438 21.558594 24.890625 21.558594 C 26.261719 21.558594 27.371094 20.484375 27.371094 19.160156 C 27.371094 17.835938 26.261719 16.761719 24.890625 16.761719 C 24.269531 16.761719 23.699219 16.984375 23.261719 17.351562 L 19.097656 14.835938 C 19.160156 14.664062 19.199219 14.480469 19.199219 14.289062 C 19.199219 13.34375 18.40625 12.578125 17.425781 12.578125 C 16.449219 12.578125 15.65625 13.34375 15.65625 14.289062 C 15.65625 14.527344 15.703125 14.75 15.792969 14.953125 L 11.820312 17.761719 C 11.433594 17.410156 10.914062 17.1875 10.339844 17.1875 C 10.054688 17.1875 9.78125 17.246094 9.53125 17.34375 L 6.503906 12.761719 C 6.851562 12.429688 7.066406 11.964844 7.066406 11.457031 C 7.066406 10.4375 6.210938 9.613281 5.15625 9.613281 C 4.101562 9.613281 3.25 10.4375 3.25 11.457031 C 3.25 12.476562 4.101562 13.300781 5.15625 13.300781 Z M 5.15625 13.300781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/g&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(lineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(secondLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(thirdLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(fourthLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(customAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: 4.5, x2: 5.0, y1: 5.0, y2: 4.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 4000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const interpolatedLine = interpolateLine(from, to, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .25) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addSecondLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .5) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addThirdLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addFourthLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x1 = interpolatedLine.x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y1 = interpolatedLine.y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x2 = interpolatedLine.x2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y2 = interpolatedLine.y2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 2.5, y1: 2.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: getRandomCoords(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 1500,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.cubic,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnimation.to = getRandomCoords();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("SVG Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(svgAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isSecondAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addSecondLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isSecondAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 5.0, x2: 3.5, y1: 4.5, y2: 4.0 }, 3000, secondLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSecondAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isThirdAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addThirdLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isThirdAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 4.5, x2: 4.0, y1: 5.0, y2: 3.5 }, 2000, thirdLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isThirdAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isFourthAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addFourthLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isFourthAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 4.0, x2: 3.5, y1: 3.5, y2: 4.0 }, 2000, fourthLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isFourthAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addLineAnimation = (to, duration, annotation) =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const interpolatedLine = interpolateLine(from, to, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.x1 = interpolatedLine.x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.y1 = interpolatedLine.y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.x2 = interpolatedLine.x2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.y2 = interpolatedLine.y2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Combining Animations&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { ILineAnnotationOptions, LineAnnotation } from "scichart/Charting/Visuals/Annotations/LineAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { DoubleAnimator } from "scichart/Core/Animations/DoubleAnimator";&lt;/P&gt;
&lt;P&gt;const interpolateLine = (from: ILineAnnotationOptions, to: ILineAnnotationOptions, interpolationFactor: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: DoubleAnimator.interpolate(from.x1, to.x1, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: DoubleAnimator.interpolate(from.x2, to.x2, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: DoubleAnimator.interpolate(from.y1, to.y1, interpolationFactor),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: DoubleAnimator.interpolate(from.y2, to.y2, interpolationFactor)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;};&lt;/P&gt;
&lt;P&gt;const getRandomCoords = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: Math.floor(Math.random() * 3 + 1),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: Math.floor(Math.random() * 3 + 1)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const secondLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const thirdLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const fourthLineAnnotation = new LineAnnotation({ stroke: "#FF6600", strokeThickness: 3, x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgString = `&amp;lt;svg xmlns="&lt;A href="http://www.w3.org/2000/svg"&gt;http://www.w3.org/2000/svg&lt;/A&gt;" xmlns:xlink="&lt;A href="http://www.w3.org/1999/xlink"&gt;http://www.w3.org/1999/xlink&lt;/A&gt;" width="30px" height="30px" viewBox="0 0 30 29" version="1.1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;g id="surface1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 29.992188 26.488281 L 29.992188 28.070312 L 0 28.070312 L 0 0.921875 L 1.636719 0.921875 L 1.636719 26.488281 Z M 5.15625 13.300781 C 5.386719 13.300781 5.605469 13.253906 5.8125 13.183594 L 8.84375 17.769531 C 8.421875 18.152344 8.15625 18.695312 8.15625 19.296875 C 8.15625 20.460938 9.132812 21.40625 10.339844 21.40625 C 11.542969 21.40625 12.519531 20.460938 12.519531 19.296875 C 12.519531 18.976562 12.4375 18.671875 12.304688 18.398438 L 16.28125 15.589844 C 16.59375 15.84375 16.988281 16.003906 17.425781 16.003906 C 17.914062 16.003906 18.351562 15.8125 18.671875 15.507812 L 22.742188 17.96875 C 22.53125 18.320312 22.410156 18.726562 22.410156 19.160156 C 22.410156 20.484375 23.523438 21.558594 24.890625 21.558594 C 26.261719 21.558594 27.371094 20.484375 27.371094 19.160156 C 27.371094 17.835938 26.261719 16.761719 24.890625 16.761719 C 24.269531 16.761719 23.699219 16.984375 23.261719 17.351562 L 19.097656 14.835938 C 19.160156 14.664062 19.199219 14.480469 19.199219 14.289062 C 19.199219 13.34375 18.40625 12.578125 17.425781 12.578125 C 16.449219 12.578125 15.65625 13.34375 15.65625 14.289062 C 15.65625 14.527344 15.703125 14.75 15.792969 14.953125 L 11.820312 17.761719 C 11.433594 17.410156 10.914062 17.1875 10.339844 17.1875 C 10.054688 17.1875 9.78125 17.246094 9.53125 17.34375 L 6.503906 12.761719 C 6.851562 12.429688 7.066406 11.964844 7.066406 11.457031 C 7.066406 10.4375 6.210938 9.613281 5.15625 9.613281 C 4.101562 9.613281 3.25 10.4375 3.25 11.457031 C 3.25 12.476562 4.101562 13.300781 5.15625 13.300781 Z M 5.15625 13.300781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/g&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(lineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(secondLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(thirdLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(fourthLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(customAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup animations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: 4.5, x2: 5.0, y1: 5.0, y2: 4.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 4000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.inOutSine,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const interpolatedLine = interpolateLine(from, to, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .25) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addSecondLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .5) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addThirdLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (progress &amp;gt; .75) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addFourthLineAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x1 = interpolatedLine.x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y1 = interpolatedLine.y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.x2 = interpolatedLine.x2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lineAnnotation.y2 = interpolatedLine.y2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 2.5, y1: 2.5 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: getRandomCoords(),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 1500,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.cubic,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnimation.to = getRandomCoords();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnimation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("SVG Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(svgAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isSecondAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addSecondLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isSecondAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 5.0, x2: 3.5, y1: 4.5, y2: 4.0 }, 3000, secondLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isSecondAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isThirdAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addThirdLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isThirdAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 4.5, x2: 4.0, y1: 5.0, y2: 3.5 }, 2000, thirdLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isThirdAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let isFourthAnimationAdded = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addFourthLineAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!isFourthAnimationAdded) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; addLineAnimation({ x1: 4.0, x2: 3.5, y1: 3.5, y2: 4.0 }, 2000, fourthLineAnnotation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isFourthAnimationAdded = true;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const addLineAnimation = (to: ILineAnnotationOptions, duration: number, annotation: LineAnnotation) =&amp;gt; {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineAnimation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: 0.0, x2: 0.5, y1: 0.5, y2: 0.0 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const interpolatedLine = interpolateLine(from, to, progress);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.x1 = interpolatedLine.x1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.y1 = interpolatedLine.y1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.x2 = interpolatedLine.x2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotation.y2 = interpolatedLine.y2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("Line Animation Completed");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(lineAnimation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/GenericAnimations_combining.gif"&gt;&lt;/P&gt;
&lt;H3&gt;&lt;A id=DOM name=DOM&gt;&lt;/A&gt;Updating the DOM with animations&lt;/H3&gt;
&lt;P&gt;Animations are not limited to updating elements of the chart.&amp;nbsp;In this example the animations are started by a&amp;nbsp;button click event and they update the DOM with progress percentage, progress line and coordinate values.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Updateing the DOM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { BoxAnnotation } from "scichart/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#189AB4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(255,50,50,0.3)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 4.5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgString = `&amp;lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="30px" height="30px" viewBox="0 0 30 30" version="1.1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;g id="surface1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(29.803922%,76.470588%,94.901961%);fill-opacity:1;" d="M 15.878906 16.179688 L 21.492188 16.179688 L 22.953125 17.445312 L 25.695312 17.445312 L 28.75 18.949219 L 28.75 20 L 26.3125 20 L 26.3125 20.4375 L 23.679688 20.4375 L 23.679688 20 L 12.328125 20 L 10.367188 18.617188 L 3.1875 17.546875 L 1.523438 11.539062 L 2.003906 11.539062 L 5 16.617188 L 15.886719 16.617188 Z M 15.878906 16.179688 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 7.726562 24.175781 L 11.671875 24.175781 L 11.671875 25.054688 L 7.726562 25.054688 Z M 7.726562 24.175781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 12.550781 24.175781 L 13.429688 24.175781 L 13.429688 25.054688 L 12.550781 25.054688 Z M 12.550781 24.175781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 18.46875 4.945312 L 22.414062 4.945312 L 22.414062 5.824219 L 18.46875 5.824219 Z M 18.46875 4.945312 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 16.710938 4.945312 L 17.589844 4.945312 L 17.589844 5.824219 L 16.710938 5.824219 Z M 16.710938 4.945312 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 24.554688 20 L 25.4375 20 L 25.4375 20.875 L 24.554688 20.875 Z M 24.554688 20 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(29.803922%,76.470588%,94.901961%);fill-opacity:1;" d="M 15.878906 10.5 L 16.765625 10.5 L 16.765625 11.558594 L 15.878906 11.558594 Z M 15.878906 10.5 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(81.176471%,94.509804%,100%);fill-opacity:1;" d="M 15.25 13.976562 L 10.605469 13.976562 L 12.75 12.4375 L 17.355469 12.4375 Z M 15.25 13.976562 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(81.176471%,94.509804%,100%);fill-opacity:1;" d="M 23.28125 16.5625 L 20.476562 14.132812 L 20.476562 12.96875 L 24.621094 16.5625 Z M 23.28125 16.5625 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 26.039062 16.632812 L 20.203125 11.558594 L 17.640625 11.558594 L 17.640625 9.621094 L 16.761719 9.621094 L 16.761719 8.914062 L 25.921875 10.117188 L 26.039062 9.246094 L 19.6875 8.40625 L 26.03125 7.570312 L 25.914062 6.695312 L 16.324219 7.96875 L 6.726562 6.703125 L 6.609375 7.578125 L 12.957031 8.414062 L 6.609375 9.253906 L 6.726562 10.125 L 15.886719 8.917969 L 15.886719 9.628906 L 15.007812 9.628906 L 15.007812 11.566406 L 12.46875 11.566406 L 9.09375 13.980469 L 7.628906 13.980469 L 7.628906 14.859375 L 15.539062 14.859375 L 18.851562 12.445312 L 19.59375 12.445312 L 19.59375 14.539062 L 22.945312 17.449219 L 25.6875 17.449219 L 28.746094 18.953125 L 28.746094 20.003906 L 26.308594 20.003906 L 26.308594 20.882812 L 28.746094 20.882812 L 28.746094 21.765625 L 14.835938 21.765625 L 13.578125 20.882812 L 23.671875 20.882812 L 23.671875 20.003906 L 12.328125 20.003906 L 10.359375 18.621094 L 3.1875 17.546875 L 1.523438 11.539062 L 2 11.539062 L 4.992188 16.617188 L 15.878906 16.617188 L 15.878906 15.738281 L 5.496094 15.738281 L 2.5 10.660156 L 0.367188 10.660156 L 2.492188 18.335938 L 10.023438 19.453125 L 14.554688 22.640625 L 18.460938 22.640625 L 17.5625 23.554688 L 18.179688 24.175781 L 19.71875 22.640625 L 24.21875 22.640625 L 23.296875 23.554688 L 23.917969 24.175781 L 25.453125 22.640625 L 29.632812 22.640625 L 29.632812 18.398438 Z M 15.878906 10.5 L 16.765625 10.5 L 16.765625 11.558594 L 15.878906 11.558594 Z M 15.25 13.976562 L 10.605469 13.976562 L 12.75 12.4375 L 17.359375 12.4375 Z M 23.28125 16.5625 L 20.476562 14.132812 L 20.476562 12.964844 L 24.621094 16.5625 Z M 23.28125 16.5625 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 16.765625 15.738281 L 17.640625 15.738281 L 17.640625 16.617188 L 16.765625 16.617188 Z M 16.765625 15.738281 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 5.871094 13.976562 L 6.75 13.976562 L 6.75 14.851562 L 5.871094 14.851562 Z M 5.871094 13.976562 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/g&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.25,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4.75,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(boxAnnotation, customAnnotation);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgBtn").addEventListener("click", () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; startSvgAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxBtn").addEventListener("click", () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; startBoxAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const SVG_STEPS = [{ x: 0.25, y: 4.75 }, { x: 4.75, y: 4.75 }, { x: 4.75, y: 0.25 }, { x: 0.25, y: 0.25 }];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let indexStep = 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const startSvgAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: SVG_STEPS[0].x, y1: SVG_STEPS[0].y },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: SVG_STEPS[indexStep].x, y1: SVG_STEPS[indexStep].y },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSvgUI(progress, customAnnotation.x1, customAnnotation.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; indexStep &amp;lt; SVG_STEPS.length - 1 ? indexStep++ : indexStep = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.from = animation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.to = { x1: SVG_STEPS[indexStep].x, y1: SVG_STEPS[indexStep].y };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const countEl = document.getElementById("svgInfo").querySelector("span");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; countEl.innerHTML = +countEl.innerHTML + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(animation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const startBoxAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 4.5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 8000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.x2 = from.x2 + (to.x2 - from.x2) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.y2 = from.y2 + (to.y2 - from.y2) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateBoxUI(progress, boxAnnotation.x1, boxAnnotation.y1, boxAnnotation.x2, boxAnnotation.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = animation.from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = animation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.from = to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.to = from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const countEl = document.getElementById("boxInfo").querySelector("span");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; countEl.innerHTML = +countEl.innerHTML + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(animation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateSvgUI = (progress, x, y) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgProgress").innerHTML = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgSpinner").style.width = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgXCoord").innerHTML = 'X: ' + parseFloat(x).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgYCoord").innerHTML = 'Y: ' + parseFloat(y).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateBoxUI = (progress, x1, y1, x2, y2) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxProgress").innerHTML = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxSpinner").style.width = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxX1Coord").innerHTML = 'X1: ' + parseFloat(x1).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxY1Coord").innerHTML = 'Y1: ' + parseFloat(y1).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxX2Coord").innerHTML = 'X2: ' + parseFloat(x2).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxY2Coord").innerHTML = 'Y2: ' + parseFloat(y2).toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Updating the DOM&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from "scichart/Charting/Visuals/SciChartSurface";&lt;BR&gt;import { NumericAxis } from "scichart/Charting/Visuals/Axis/NumericAxis";&lt;BR&gt;import { NumberRange } from "scichart/Core/NumberRange";&lt;BR&gt;import { SciChartJSLightTheme } from "scichart/Charting/Themes/SciChartJSLightTheme";&lt;BR&gt;import { GenericAnimation } from "scichart/Core/Animations/GenericAnimation";&lt;BR&gt;import { easing } from "scichart/Core/Animations/EasingFunctions";&lt;BR&gt;import { BoxAnnotation } from "scichart/Charting/Visuals/Annotations/BoxAnnotation";&lt;BR&gt;import { CustomAnnotation } from "scichart/Charting/Visuals/Annotations/CustomAnnotation";&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "scichart/types/AnchorPoint";&lt;/P&gt;
&lt;P&gt;async function drawAnnotationAnimationsChart(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { visibleRange: new NumberRange(0, 5) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Setup annotations&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const boxAnnotation = new BoxAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: "#189AB4",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: "rgba(255,50,50,0.3)",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 4.5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgString = `&amp;lt;svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="30px" height="30px" viewBox="0 0 30 30" version="1.1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;g id="surface1"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(29.803922%,76.470588%,94.901961%);fill-opacity:1;" d="M 15.878906 16.179688 L 21.492188 16.179688 L 22.953125 17.445312 L 25.695312 17.445312 L 28.75 18.949219 L 28.75 20 L 26.3125 20 L 26.3125 20.4375 L 23.679688 20.4375 L 23.679688 20 L 12.328125 20 L 10.367188 18.617188 L 3.1875 17.546875 L 1.523438 11.539062 L 2.003906 11.539062 L 5 16.617188 L 15.886719 16.617188 Z M 15.878906 16.179688 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 7.726562 24.175781 L 11.671875 24.175781 L 11.671875 25.054688 L 7.726562 25.054688 Z M 7.726562 24.175781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 12.550781 24.175781 L 13.429688 24.175781 L 13.429688 25.054688 L 12.550781 25.054688 Z M 12.550781 24.175781 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 18.46875 4.945312 L 22.414062 4.945312 L 22.414062 5.824219 L 18.46875 5.824219 Z M 18.46875 4.945312 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 16.710938 4.945312 L 17.589844 4.945312 L 17.589844 5.824219 L 16.710938 5.824219 Z M 16.710938 4.945312 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 24.554688 20 L 25.4375 20 L 25.4375 20.875 L 24.554688 20.875 Z M 24.554688 20 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(29.803922%,76.470588%,94.901961%);fill-opacity:1;" d="M 15.878906 10.5 L 16.765625 10.5 L 16.765625 11.558594 L 15.878906 11.558594 Z M 15.878906 10.5 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(81.176471%,94.509804%,100%);fill-opacity:1;" d="M 15.25 13.976562 L 10.605469 13.976562 L 12.75 12.4375 L 17.355469 12.4375 Z M 15.25 13.976562 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(81.176471%,94.509804%,100%);fill-opacity:1;" d="M 23.28125 16.5625 L 20.476562 14.132812 L 20.476562 12.96875 L 24.621094 16.5625 Z M 23.28125 16.5625 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 26.039062 16.632812 L 20.203125 11.558594 L 17.640625 11.558594 L 17.640625 9.621094 L 16.761719 9.621094 L 16.761719 8.914062 L 25.921875 10.117188 L 26.039062 9.246094 L 19.6875 8.40625 L 26.03125 7.570312 L 25.914062 6.695312 L 16.324219 7.96875 L 6.726562 6.703125 L 6.609375 7.578125 L 12.957031 8.414062 L 6.609375 9.253906 L 6.726562 10.125 L 15.886719 8.917969 L 15.886719 9.628906 L 15.007812 9.628906 L 15.007812 11.566406 L 12.46875 11.566406 L 9.09375 13.980469 L 7.628906 13.980469 L 7.628906 14.859375 L 15.539062 14.859375 L 18.851562 12.445312 L 19.59375 12.445312 L 19.59375 14.539062 L 22.945312 17.449219 L 25.6875 17.449219 L 28.746094 18.953125 L 28.746094 20.003906 L 26.308594 20.003906 L 26.308594 20.882812 L 28.746094 20.882812 L 28.746094 21.765625 L 14.835938 21.765625 L 13.578125 20.882812 L 23.671875 20.882812 L 23.671875 20.003906 L 12.328125 20.003906 L 10.359375 18.621094 L 3.1875 17.546875 L 1.523438 11.539062 L 2 11.539062 L 4.992188 16.617188 L 15.878906 16.617188 L 15.878906 15.738281 L 5.496094 15.738281 L 2.5 10.660156 L 0.367188 10.660156 L 2.492188 18.335938 L 10.023438 19.453125 L 14.554688 22.640625 L 18.460938 22.640625 L 17.5625 23.554688 L 18.179688 24.175781 L 19.71875 22.640625 L 24.21875 22.640625 L 23.296875 23.554688 L 23.917969 24.175781 L 25.453125 22.640625 L 29.632812 22.640625 L 29.632812 18.398438 Z M 15.878906 10.5 L 16.765625 10.5 L 16.765625 11.558594 L 15.878906 11.558594 Z M 15.25 13.976562 L 10.605469 13.976562 L 12.75 12.4375 L 17.359375 12.4375 Z M 23.28125 16.5625 L 20.476562 14.132812 L 20.476562 12.964844 L 24.621094 16.5625 Z M 23.28125 16.5625 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 16.765625 15.738281 L 17.640625 15.738281 L 17.640625 16.617188 L 16.765625 16.617188 Z M 16.765625 15.738281 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;path style=" stroke:none;fill-rule:nonzero;fill:rgb(3.921569%,33.333333%,49.803922%);fill-opacity:1;" d="M 5.871094 13.976562 L 6.75 13.976562 L 6.75 14.851562 L 5.871094 14.851562 Z M 5.871094 13.976562 "/&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/g&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const customAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.25,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 4.75,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(boxAnnotation, customAnnotation);&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgBtn").addEventListener("click", () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; startSvgAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxBtn").addEventListener("click", () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; startBoxAnimation();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const SVG_STEPS = [{ x: 0.25, y: 4.75 }, { x: 4.75, y: 4.75 }, { x: 4.75, y: 0.25 }, { x: 0.25, y: 0.25 }];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; let indexStep = 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const startSvgAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: { x1: SVG_STEPS[0].x, y1: SVG_STEPS[0].y },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: { x1: SVG_STEPS[indexStep].x, y1: SVG_STEPS[indexStep].y },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 2000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; customAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateSvgUI(progress, customAnnotation.x1, customAnnotation.y1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; indexStep &amp;lt; SVG_STEPS.length - 1 ? indexStep++ : indexStep = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.from = animation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.to = { x1: SVG_STEPS[indexStep].x, y1: SVG_STEPS[indexStep].y };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const countEl = document.getElementById("svgInfo").querySelector("span");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; countEl.innerHTML = (+countEl.innerHTML + 1).toString();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(animation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const startBoxAnimation = () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const animation = new GenericAnimation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; from: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 4.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 4.5&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x2: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y2: 2.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; duration: 8000,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ease: easing.linear,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onAnimate: (from, to, progress) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.x1 = from.x1 + (to.x1 - from.x1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.y1 = from.y1 + (to.y1 - from.y1) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.x2 = from.x2 + (to.x2 - from.x2) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; boxAnnotation.y2 = from.y2 + (to.y2 - from.y2) * progress;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; updateBoxUI(progress, boxAnnotation.x1, boxAnnotation.y1, boxAnnotation.x2, boxAnnotation.y2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; onCompleted: () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const from = animation.from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const to = animation.to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.from = to;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.to = from;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; animation.reset();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const countEl = document.getElementById("boxInfo").querySelector("span");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; countEl.innerHTML = (+countEl.innerHTML + 1).toString();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.addAnimation(animation);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateSvgUI = (progress: number, x: number, y: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgProgress").innerHTML = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgSpinner").style.width = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgXCoord").innerHTML = 'X: ' + x.toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("svgYCoord").innerHTML = 'Y: ' + y.toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const updateBoxUI = (progress: number, x1: number, y1: number, x2: number, y2: number) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxProgress").innerHTML = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxSpinner").style.width = Math.round(progress * 100) + '%';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxX1Coord").innerHTML = 'X1: ' + x1.toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxY1Coord").innerHTML = 'Y1: ' + y1.toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxX2Coord").innerHTML = 'X2: ' + x2.toFixed(2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; document.getElementById("boxY2Coord").innerHTML = 'Y2: ' + y2.toFixed(2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;drawAnnotationAnimationsChart("scichart");&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/GenericAnimations_manipulating.gif"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5e47162c-b100-4db4-9483-9380c380b450" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9695e2f8-bcd6-4ed4-ba36-244dc476498d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="eaf675c7-d3ad-4522-b7fb-aa1b7849cf79" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="06b6036b-fbc1-41e4-905a-52ec73295788" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="f6df6a70-f2a7-4b84-ba57-2e4b948c8f7b" AutoIndex="false">
            <Caption m="2021-09-17T14:16:32.0021759Z">Hit-Test API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" Status="New Topic" CreatedOn="2016-09-02T09:36:01.882535Z" ModifiedOn="2023-01-23T17:44:42.1268828Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API" BuildFlags="">
                <Title m="2020-09-06T15:16:27.1061828Z">RenderableSeries Hit-Test API</Title>
                <ContentsTitle m="2021-10-01T05:02:56.7594897Z">RenderableSeries Hit-Test API</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-23T17:44:42.1268828Z">&lt;P&gt;In&amp;nbsp;SciChart.js we have &lt;STRONG&gt;Hit-Test API&lt;/STRONG&gt; which allows access to information about the point being clicked on the canvas, such as the nearest data point index, X and Y data values, coordinate values and metadata.&lt;/P&gt;
&lt;P&gt;The Hit-Test API is a&amp;nbsp;set of functions defined on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html"&gt;BaseRenderableSeries class&lt;/A&gt;, and overridden by some of the series types. This API is used internally by tooltips (see&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt;) to transform mouse clicks on screen into data-points, and determine if a&amp;nbsp;mouse event occurs over a point or over a series. You can use the same API to determine if a click or touch event was over a series, and take appropriate action.&lt;/P&gt;
&lt;P&gt;There are three main Hit-Test methods:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;hitTest&lt;/STRONG&gt; which tests against the series body. 
&lt;LI&gt;&lt;STRONG&gt;hitTestDataPoint&lt;/STRONG&gt; which tests against data points. 
&lt;LI&gt;&lt;STRONG&gt;hitTestXSlice&lt;/STRONG&gt; which tests for the vertical slice where only X value is taken into account; used for &lt;STRONG&gt;CursorModifier&lt;/STRONG&gt; and &lt;STRONG&gt;RolloverModifier.&lt;/STRONG&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;In addition, there are other Hit-Test methods specific for chart modifiers. For example, &lt;STRONG&gt;hitTestForDataPointSelectionModifier&lt;/STRONG&gt; is designed for &lt;STRONG&gt;DataPointSelectionModifier&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;To call&amp;nbsp;the &lt;STRONG&gt;hitTest&lt;/STRONG&gt;&amp;nbsp;method, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest call example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = lineSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This is a complete example.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;/P&gt;
&lt;P&gt;export async function hitTest(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = lineSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;HitTest&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;/P&gt;
&lt;P&gt;export async function hitTestTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("mouseClickX", mouseClickX, "mouseClickY", mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = lineSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById("result");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In this example we create a simple line chart using &lt;STRONG&gt;FastLineRenderableSeries&lt;/STRONG&gt; with an annotation which is used to display the point being clicked. Also, we add an event listener for mousedown events. When the mouse button is clicked &lt;STRONG&gt;lineSeries.hitTestProvider.hitTest&lt;/STRONG&gt; method is called to get &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;To support High DPI and Retina displays the canvas is scaled by &lt;STRONG&gt;DpiHelper.PIXEL_RATIO&lt;/STRONG&gt;. Which is why X and Y mouse values must be multiplied by &lt;STRONG&gt;DpiHelper.PIXEL_RATIO&lt;/STRONG&gt; before passing into Hit-Test methods.&lt;/P&gt;
&lt;P&gt;This code produces&amp;nbsp;the line chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_line-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;Let's click on the canvas near the line.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_line-chart2.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;On the canvas we will see&amp;nbsp;the red dot where the click was performed. If the click was within 10 pixels from the line, under the chart we will see &lt;STRONG&gt;isHit = true.&lt;/STRONG&gt; In the browser console the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object itself will be output.&lt;/P&gt;
&lt;H2&gt;IHitTestProvider.hitTest method&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method tests for the series body. If the series body is clicked within a given radius &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; value will be true. The method tests&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Line body for line series 
&lt;LI&gt;Scatter point for scatter series 
&lt;LI&gt;Mountain area for mountain series and stacked mountain series 
&lt;LI&gt;Candlestick body for candle series 
&lt;LI&gt;Column body for column series and stacked column series 
&lt;LI&gt;Band series body for band series 
&lt;LI&gt;Bubble for bubble series 
&lt;LI&gt;The entire heatmap for heatmap series &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;IHitTestProvider.hitTest&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for series body at a specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returning a HitTestInfo type with the results&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTest(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;IHitTestProvider.hitTestDataPoint method&lt;/H2&gt;
&lt;P&gt;&amp;nbsp;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method tests if the click was near a data point.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;XY data point for line series, scatter, bubble, mountain and column data series. 
&lt;LI&gt;XY or XY1 point for band series. 
&lt;LI&gt;Close values for OHLC or candlestick series. 
&lt;LI&gt;Method is not supported for heatmap and stacked series. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;IHitTestProvider.hitTestDataPoint&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for the data point at the specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returning a HitTestInfo type with the results&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestDataPoint(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;IHitTestProvider.hitTestXSlice method&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method tests for the series body. But unlike the hitTest method it finds the nearest point in X direction only, the Y value of the hit-test point is ignored. Moreover, &lt;STRONG&gt;isHit&lt;/STRONG&gt; is always&amp;nbsp;&lt;STRONG&gt;True&lt;/STRONG&gt; if the click was within the data bounds.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;IHitTestProvider.hitTestXSlice&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; /**&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @description Performs a hit-test for the vertical slice at the specific mouse point (X,Y coordinate on the parent SciChartSurface),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * only X value is taken into account, it is used for &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; CursorModifier} and &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; RolloverModifier},&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * returns a HitTestInfo type with the results,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * Only for sorted values&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @remarks For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param x The mouse point X coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param y The mouse point Y coordinate on the parent SciChartSurface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * NOTE: For Retina displays and Browser zoom, ensure that X,Y points are scaled by &lt;A href="mailto:%7B@link"&gt;{@link&lt;/A&gt; DpiHelper.PIXEL_RATIO}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; */&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestXSlice(x: number, y: number, hitTestRadius?: number): HitTestInfo;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;The Hit-Test Results&lt;/H2&gt;
&lt;P&gt;Hit-Test methods return &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; objects which contain the following information.&lt;/P&gt;
&lt;UL style="BOX-SIZING: border-box; FONT-SIZE: 14px; MARGIN-BOTTOM: 16px; FONT-FAMILY: Helvetica, Arial, freesans, sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; MARGIN-TOP: 16px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(8,8,8); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 2em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; font-variant-ligatures: normal; font-variant-caps: normal; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial" md-src-pos="12148..14259"&gt;
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12148..12243"&gt;associatedSeries: The&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="12172..12193"&gt;IRenderableSeries&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;against which the hitTest operation was performed 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12244..12318"&gt;dataSeriesName: The dataSeriesName value from the associated data series 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12319..12375"&gt;dataSeriesType: The type of the associated data series 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12376..12531"&gt;hitTestPoint: The X and Y screen coordinates of the point being clicked relative to the&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="12466..12484"&gt;seriesViewRect&lt;/STRONG&gt;&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;and premultiplied by&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="12506..12531"&gt;DpiHelper.PIXEL_RATIO&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12532..12609"&gt;hitTestPointValues: The X and Y data coordinates of the point being clicked 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12610..12688"&gt;hitTestRadius: The radius in pixels that was used for the hit-test operation 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12689..12738"&gt;dataSeriesIndex: The index of the nearest point 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12739..12898"&gt;metadata: The point metadata from the associated data series, which is useful for displaying tooltips with additional information specific for the data point 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12899..12958"&gt;xCoord: The X-coordinate result of the hit-test operation 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="12959..13018"&gt;yCoord: The Y-coordinate result of the hit-test operation 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13019..13073"&gt;xValue: The X-value result of the hit-test operation 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13074..13128"&gt;yValue: The Y-value result of the hit-test operation 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13129..13213"&gt;y1Value: The Y1-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13196..13213"&gt;XyyDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13214..13296"&gt;zValue: The Z-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13279..13296"&gt;XyzDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13297..13386"&gt;openValue: The Open-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13368..13386"&gt;OhlcDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13387..13476"&gt;highValue: The High-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13458..13476"&gt;OhlcDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13477..13564"&gt;lowValue: The Low-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13546..13564"&gt;OhlcDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13565..13656"&gt;closeValue: The Close-value result of the hit-test operation, only for&lt;SPAN&gt;&amp;nbsp;&lt;/SPAN&gt;&lt;STRONG style="BOX-SIZING: border-box; FONT-WEIGHT: bold" md-src-pos="13638..13656"&gt;OhlcDataSeries&lt;/STRONG&gt; 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13657..13725"&gt;isCategoryAxis: When true, the associated xAxis is a Category Axis 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13726..13772"&gt;isEmpty: When true, the HitTestInfo is empty 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="13773..14035"&gt;isHit: When true, the hit-test operation was a success. For the hitTest method it means that a series body was hit. For the hitTestDataPoint method it means that a data point was hit. For the hitTestXSlice method is means that the click was within data bounds. 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="14036..14145"&gt;isWithinDataBounds: When true the hit-test operation was within the first and the last DataSeries X-values. 
&lt;LI style="BOX-SIZING: border-box" md-src-pos="14146..14259"&gt;point2dataSeriesIndex: The index of the second data-series point when hit-test is performed for the series body &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN md-src-pos="14310..14311"&gt;More information can be found at the &lt;STRONG&gt;TypeDoc website&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;
&lt;H2&gt;&lt;SPAN md-src-pos="14310..14311"&gt;Calling Hit-Test methods on Spline Series&lt;/SPAN&gt;&lt;/H2&gt;
&lt;P&gt;&lt;SPAN md-src-pos="14310..14311"&gt;SciChart.js has three different spline series:&lt;/SPAN&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;SPAN md-src-pos="14310..14311"&gt;&lt;STRONG&gt;SplineLineRenderableSeries&lt;/STRONG&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;SPAN md-src-pos="14310..14311"&gt;&lt;STRONG&gt;SplineBandRenderableSeries&lt;/STRONG&gt;&lt;/SPAN&gt; &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;SPAN md-src-pos="14310..14311"&gt;&lt;STRONG&gt;SplineMountainRenderableSeries&lt;/STRONG&gt;&lt;/SPAN&gt; &lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&lt;SPAN md-src-pos="14310..14311"&gt;Hit-Test methods always use the original values which is why all methods such as &lt;STRONG&gt;hitTest&lt;/STRONG&gt;, &lt;STRONG&gt;hitTestDataPoint&lt;/STRONG&gt;, &lt;STRONG&gt;hitTestXSlice&lt;/STRONG&gt; work the same way as for &lt;STRONG&gt;FastLineRenderableSeries&lt;/STRONG&gt;, &lt;STRONG&gt;FastBandRenderableSeries&lt;/STRONG&gt; and &lt;STRONG&gt;SplineMountainRenderableSeries&lt;/STRONG&gt;.&lt;/SPAN&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0241486d-3bb0-44d3-b83d-5985cc0626ed" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="309a8887-503f-42be-b7eb-4f9adf27b7b4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c30764f3-43b5-46d5-be5f-1df97a44c2f1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="985bd560-7f5a-4d81-8b65-aa1b4cf33256" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a1a64821-579e-41fe-8845-532199a3bafa" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2a065a28-4405-4185-bb71-d28c21e51fd9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6bc8d989-c405-4d90-bacd-90389cc54411" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="00681dda-3a4d-465d-9d54-0ffae4ab3649" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="309a8887-503f-42be-b7eb-4f9adf27b7b4" Status="New Topic" CreatedOn="2021-10-01T04:33:55.570197Z" ModifiedOn="2021-10-01T13:06:32.6402533Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Line Series" BuildFlags="">
                <Title m="2021-10-01T04:34:08.7794847Z">Hit-Test API for Line Series</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:44.526121Z">&lt;H2&gt;The hitTest method on Line Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from the line. The algorithm differs for sorted and unsorted data.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on LineSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = lineSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;For &lt;STRONG&gt;sorted data&lt;/STRONG&gt; the algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest point in X direction. 
&lt;LI&gt;Take the second adjacent point which is on the other side from the hit-test point. 
&lt;LI&gt;Calculate the distance from the hit-test point to the line formed by two points above and update HitTestInfo.isHit property. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;For &lt;STRONG&gt;unsorted data&lt;/STRONG&gt;:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the line segments and find the index with minimal distance to the hit-test point. 
&lt;LI&gt;Compare this distance with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestDataPoint method on Line Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Line Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = lineSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;
&lt;DIV&gt;Iterate over each of the points to find the nearest one on the XY plane. &lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;Compare distance to the nearest point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/DIV&gt;&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is an example of the &lt;STRONG&gt;hitTestDataPoint&lt;/STRONG&gt; method usage.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;/P&gt;
&lt;P&gt;export async function hitTestTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("mouseClickX", mouseClickX, "mouseClickY", mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTestDataPoint&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = lineSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById("result");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;/P&gt;
&lt;P&gt;export async function hitTestTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lineSeries = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(lineSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log("mouseClickX", mouseClickX, "mouseClickY", mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTestDataPoint&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = lineSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById("result");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If we run the example we get this chart.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;IMG border=0 alt="" src="images/HitTestApi_line-chart-hittest-datapoint1.png"&gt;&lt;/P&gt;
&lt;P&gt;Clicking near a data point results is &lt;STRONG&gt;isHit=true&lt;/STRONG&gt;.&amp;nbsp;&amp;nbsp;In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object.&lt;/P&gt;
&lt;H2&gt;&amp;nbsp;The hitTestXSlice method on Line Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Line Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = lineSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to True if the mouse click was within the data bounds. &lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="5e3d0da8-182a-404f-b1fc-2d535c716b47" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2a065a28-4405-4185-bb71-d28c21e51fd9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f6fedc3f-91fb-41e5-bd15-ced6884ad8c9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="00681dda-3a4d-465d-9d54-0ffae4ab3649" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2b29f1ab-a5c8-4baf-9d16-94b5d9c5165a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="34fc166c-b0dc-4749-a87f-50854a179ca8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8725fcff-3f6a-4b77-9bfe-082d063c2808" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="98381ce7-bffe-4157-8818-baa222f88516" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="985bd560-7f5a-4d81-8b65-aa1b4cf33256" Status="New Topic" CreatedOn="2021-10-01T05:01:42.6261403Z" ModifiedOn="2021-10-01T13:05:17.3236509Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Band Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:44.3956696Z">&lt;H2&gt;The hitTest method on Band Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;FastBandRenderableSeries&lt;/A&gt; tests if the click was within the band body.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Band Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bandSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest data point in X direction. 
&lt;LI&gt;Test if the click was within the band body and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Band Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;BR&gt;import { XyyDataSeries } from 'scichart/Charting/Model/XyyDataSeries';&lt;BR&gt;import { FastBandRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastBandRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestBandTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Top }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Right, growBy: new NumberRange(0.4, 0.4) })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const POINTS = 1000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const STEP = (3 * Math.PI) / POINTS;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt;= 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const k = 1 - i / 2000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, Math.sin(i * STEP) * k * 0.7, Math.cos(i * STEP) * k);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const bandSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(bandSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.fill = '#279B2733';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.fillY1 = '#FF191933';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.stroke = '#FF1919FF';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.strokeY1 = '#279B27FF';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = bandSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;BR&gt;import { XyyDataSeries } from 'scichart/Charting/Model/XyyDataSeries';&lt;BR&gt;import { FastBandRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastBandRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestBandTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Top }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, { axisAlignment: EAxisAlignment.Right, growBy: new NumberRange(0.4, 0.4) })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const POINTS = 1000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const STEP = (3 * Math.PI) / POINTS;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt;= 1000; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const k = 1 - i / 2000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, Math.sin(i * STEP) * k * 0.7, Math.cos(i * STEP) * k);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const bandSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(bandSeries);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.fill = '#279B2733';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.fillY1 = '#FF191933';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.stroke = '#FF1919FF';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bandSeries.strokeY1 = '#279B27FF';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = bandSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_band-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If to click inside the band it will be hit. In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object containing &lt;STRONG&gt;y1Value&lt;/STRONG&gt; and &lt;STRONG&gt;y1Coord&lt;/STRONG&gt; properties specific for the series.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Band Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;FastBandRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from XY or XY1 data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Band Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bandSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of XY and XY1 points to find the nearest one on the plane. 
&lt;LI&gt;Compare distance to XY and XY1 points with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property accordingly. &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestXSlice method on Band Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Band Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bandSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds. &lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="43d534a7-56fb-4c65-8a1c-39f515ba7e28" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="309a8887-503f-42be-b7eb-4f9adf27b7b4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3b493250-c2ec-4dc5-8e50-44c12c5a3786" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2a065a28-4405-4185-bb71-d28c21e51fd9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5b48bc4c-6922-49f2-8832-326f62586f29" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="00681dda-3a4d-465d-9d54-0ffae4ab3649" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6d496cc6-4ff7-4cb1-9588-fe8d5bacd97e" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="34fc166c-b0dc-4749-a87f-50854a179ca8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="2a065a28-4405-4185-bb71-d28c21e51fd9" Status="New Topic" CreatedOn="2021-10-01T05:18:06.6294185Z" ModifiedOn="2021-10-01T13:07:08.1378651Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Bubble Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:44.2737162Z">&lt;H2&gt;The hitTest method on Bubble Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;FastBubbleRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a bubble circumference.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Bubble Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bubbleSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Test if the mouse click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a bubble circumference and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property in the result returned. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on the Bubble Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { FastBubbleRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastBubbleRenderableSeries';&lt;BR&gt;import { EllipsePointMarker } from 'scichart/Charting/Visuals/PointMarkers/EllipsePointMarker';&lt;BR&gt;import { XyzDataSeries } from 'scichart/Charting/Model/XyzDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestBubbleTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xBubbleValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yBubbleValues = [0.5, 1.0, 1.8, 2.9, 3.5, 3.0, 2.7, 2.4, 1.7];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zBubbleValues = [24, 12, 13, 16, 12, 15, 12, 19, 12];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const bubbleSeries = new FastBubbleRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'white',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#368BC1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyzDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xBubbleValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yBubbleValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: zBubbleValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(bubbleSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = bubbleSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { FastBubbleRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastBubbleRenderableSeries';&lt;BR&gt;import { EllipsePointMarker } from 'scichart/Charting/Visuals/PointMarkers/EllipsePointMarker';&lt;BR&gt;import { XyzDataSeries } from 'scichart/Charting/Model/XyzDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestBubbleTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xBubbleValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yBubbleValues = [0.5, 1.0, 1.8, 2.9, 3.5, 3.0, 2.7, 2.4, 1.7];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zBubbleValues = [24, 12, 13, 16, 12, 15, 12, 19, 12];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const bubbleSeries = new FastBubbleRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 24,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'white',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#368BC1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyzDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xBubbleValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yBubbleValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: zBubbleValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(bubbleSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = bubbleSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_bubble-chart1.png"&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;If to click inside the bubble it will be hit. In the browser console you will find the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; with zValue property filled for &lt;STRONG&gt;XyzDataSeries&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Bubble Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;FastBubbleRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Bubble Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bubbleSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Compare distance to the nearest point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update HitTestInfo.isHit property accordingly. &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestXSlice method on Bubble Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Bubble Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = bubbleSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds. &lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9614bdb6-9b63-48d0-9c16-1936024a0d58" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="00681dda-3a4d-465d-9d54-0ffae4ab3649" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="d5a415f1-c220-4672-b7f9-54198ae55f59" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="34fc166c-b0dc-4749-a87f-50854a179ca8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="155b127d-f36a-4b15-bf8d-32fbe89c9cf4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="98381ce7-bffe-4157-8818-baa222f88516" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="117bdc8e-e539-421b-a323-14c95a231f35" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ca213a8e-8f6e-4c61-97e9-e8254f56ec41" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="00681dda-3a4d-465d-9d54-0ffae4ab3649" Status="New Topic" CreatedOn="2021-10-01T07:03:19.8487442Z" ModifiedOn="2021-10-01T13:07:39.5590141Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Column Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:44.1143681Z">&lt;H2&gt;The hitTest method on Column Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;FastColumnRenderableSeries&lt;/A&gt; tests if the click was within the Column.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Column Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = columnSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest column in X direction. 
&lt;LI&gt;Test if the click was within column body and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Column Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestColumnTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Column series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xColumnValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yColumnValues = [0, 0.2, 1, 2.0, 2.5, 1.9, 1.9, 1.5, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'rgba(255,255,255,0.9)',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xColumnValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yColumnValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = columnSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestColumnTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Column series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xColumnValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yColumnValues = [0, 0.2, 1, 2.0, 2.5, 1.9, 1.9, 1.5, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'rgba(255,255,255,0.9)',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xColumnValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yColumnValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = columnSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_column-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If to click inside the column it will be hit. In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Column Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;FastColumnRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Column Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = columnSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Compare distance to the point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property accordingly. &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;&amp;nbsp;The hitTestXSlice method on Column Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Column Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = columnSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The way it works:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds. &lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="2bf63482-3ce1-4a54-a422-57f38f8a9c8d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="34fc166c-b0dc-4749-a87f-50854a179ca8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="029e1eb5-6273-4375-b8d3-9cebb01997f3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="98381ce7-bffe-4157-8818-baa222f88516" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b28452c4-189c-4737-b2bc-127cba2c9ddc" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ca213a8e-8f6e-4c61-97e9-e8254f56ec41" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="c28a4cf6-35b1-4a08-aa44-c6aa785bde22" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="11195739-cff6-4237-9987-ea34bfa6179f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="34fc166c-b0dc-4749-a87f-50854a179ca8" Status="New Topic" CreatedOn="2021-10-01T07:22:50.4060986Z" ModifiedOn="2024-03-19T17:29:05.692696Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Heatmap Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2024-03-19T17:29:05.692696Z">&lt;H2&gt;The hitTest method on Heatmap Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;UniformHeatmapRenderableSeries&lt;/A&gt; tests if the click was within the Heatmap.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Heatmap Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = heatmapSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find X and Y index of the tile being clicked. 
&lt;LI&gt;Test if the click was within the Heatmap surface and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Heatmap Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;BR&gt;import { HeatmapColorMap } from 'scichart/Charting/Visuals/RenderableSeries/HeatmapColorMap';&lt;BR&gt;import { UniformHeatmapDataSeries } from 'scichart/Charting/Model/UniformHeatmapDataSeries';&lt;BR&gt;import { UniformHeatmapRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/UniformHeatmapRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;/P&gt;
&lt;P&gt;export async function hitTestHeatmapTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, { axisTitle: 'Heatmap X', growBy: new NumberRange(0.05, 0.05) })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Heatmap Y',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.05, 0.05)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const gradientStops = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0, color: 'yellow' },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 1, color: 'red' }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const colorMap = new HeatmapColorMap({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minimum: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maximum: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gradientStops&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const initialZValues = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [3, 0, 1, 2],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [0, 1, 2, 3]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new UniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStart: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStart: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: initialZValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.hasNaNs = true;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const heatmapSeries = new UniformHeatmapRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colorMap&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(heatmapSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = heatmapSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EAxisAlignment } from 'scichart/types/AxisAlignment';&lt;BR&gt;import { HeatmapColorMap } from 'scichart/Charting/Visuals/RenderableSeries/HeatmapColorMap';&lt;BR&gt;import { UniformHeatmapDataSeries } from 'scichart/Charting/Model/UniformHeatmapDataSeries';&lt;BR&gt;import { UniformHeatmapRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/UniformHeatmapRenderableSeries';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;/P&gt;
&lt;P&gt;export async function hitTestHeatmapTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, { axisTitle: 'Heatmap X', growBy: new NumberRange(0.05, 0.05) })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Heatmap Y',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; growBy: new NumberRange(0.05, 0.05)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const gradientStops = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 0, color: 'yellow' },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { offset: 1, color: 'red' }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const colorMap = new HeatmapColorMap({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; minimum: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maximum: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; gradientStops&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const initialZValues = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [3, 0, 1, 2],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [0, 1, 2, 3]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new UniformHeatmapDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStart: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStart: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yStep: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; zValues: initialZValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.hasNaNs = true;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const heatmapSeries = new UniformHeatmapRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 0.5,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; colorMap&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(heatmapSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = heatmapSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_heatmap-chart1.png"&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;If to click inside the Heatmap surface it will be hit. In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object containing &lt;STRONG&gt;heatmapValue&lt;/STRONG&gt;, &lt;STRONG&gt;heatmapXIndex&lt;/STRONG&gt; and &lt;STRONG&gt;heatmapYIndex&lt;/STRONG&gt; properties which are only for the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformheatmapdataseries.html"&gt;UniformHeatmapDataSeries&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Heatmap Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method works identically as the &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt;.&lt;/P&gt;
&lt;H2&gt;The hitTestXSlice method on Heatmap Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method works identically as the &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b748e33e-1017-4831-9f68-29dd4a98a7e4" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="98381ce7-bffe-4157-8818-baa222f88516" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5f74418a-c62e-4b1d-bc38-c19eaf959349" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ca213a8e-8f6e-4c61-97e9-e8254f56ec41" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6fb9dd79-1432-4b1b-8fe1-6ba61a90c121" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="11195739-cff6-4237-9987-ea34bfa6179f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="66255d8a-d5f5-4bdd-b4da-00712c110a4c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a777396-dc5f-42fd-8145-a6ed9215a557" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="98381ce7-bffe-4157-8818-baa222f88516" Status="New Topic" CreatedOn="2021-10-01T07:36:02.3780635Z" ModifiedOn="2021-10-01T13:08:56.8986183Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API and Metadata" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T07:49:37.4016435Z">&lt;P&gt;Calling any of Hit-Test methods produces a &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object as a result. The &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object has &lt;STRONG&gt;metadata&lt;/STRONG&gt; property. It contains the point metadata from associated data series, which is useful for displaying any additional information for the data point.&lt;/P&gt;
&lt;P&gt;Let's create a column chart with metadata for Forbes world's billionaires. &lt;/P&gt;
&lt;P&gt;First we will create ForbesMetadata class by implementing IPointMetadata interface.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;export class ForbesMetadata {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(name, age, country) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.name = name;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.country = country;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.age = age;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { IPointMetadata } from 'scichart/Charting/Model/IPointMetadata';&lt;/P&gt;
&lt;P&gt;export class ForbesMetadata implements IPointMetadata {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public isSelected: boolean = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public name: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public country: string;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public age: number;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(name: string, age: number, country: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.name = name;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.country = country;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.age = age;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;Next we create an array with the Forbes data.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;export const forbesData = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [203.4, new ForbesMetadata('Elon Musk', 50, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [197.7, new ForbesMetadata('Jeff Bezos', 57, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [175.9, new ForbesMetadata('Bernard Arnault &amp;amp; family', 72, 'France')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [131.0, new ForbesMetadata('Bill Gates', 65, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [126.4, new ForbesMetadata('Mark Zuckerberg', 37, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [120.7, new ForbesMetadata('Larry Page', 48, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [119.6, new ForbesMetadata('Larry Ellison', 77, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [116.3, new ForbesMetadata('Sergey Brin', 48, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [101.5, new ForbesMetadata('Warren Buffett', 91, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [98.5, new ForbesMetadata('Mukesh Ambani', 64, 'India')]&lt;BR&gt;];&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;export const forbesData: Array&amp;lt;[number, ForbesMetadata]&amp;gt; = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [203.4, new ForbesMetadata('Elon Musk', 50, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [197.7, new ForbesMetadata('Jeff Bezos', 57, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [175.9, new ForbesMetadata('Bernard Arnault &amp;amp; family', 72, 'France')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [131.0, new ForbesMetadata('Bill Gates', 65, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [126.4, new ForbesMetadata('Mark Zuckerberg', 37, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [120.7, new ForbesMetadata('Larry Page', 48, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [119.6, new ForbesMetadata('Larry Ellison', 77, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [116.3, new ForbesMetadata('Sergey Brin', 48, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [101.5, new ForbesMetadata('Warren Buffett', 91, 'United States')],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; [98.5, new ForbesMetadata('Mukesh Ambani', 64, 'India')]&lt;BR&gt;];&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt; 
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This is the bit where we use this data to fill&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html"&gt;XyDataSeries&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Filling XyDataSeries&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;forbesData.forEach((data, i) =&amp;gt; dataSeries.append(i + 1, data[0], data[1]));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This is the full example of metadata usage for a line chart.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { forbesData } from './metadata.js';&lt;BR&gt;import { FastColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestLineMetadata(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { axisTitle: 'Forbes Rank' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05), axisTitle: 'Net Worth, bln $' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; forbesData.forEach((data, i) =&amp;gt; dataSeries.append(i + 1, data[0], data[1]));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: '#228B22',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = columnSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const meta = hitTestInfo.metadata;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `Name: ${meta.name}, Age: ${meta.age}, Country: ${meta.country}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = '';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { forbesData, ForbesMetadata } from './metadataTs';&lt;BR&gt;import { FastColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastColumnRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestLineMetadataTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext, { axisTitle: 'Forbes Rank' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05), axisTitle: 'Net Worth, bln $' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries = new XyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; forbesData.forEach((data, i) =&amp;gt; dataSeries.append(i + 1, data[0], data[1]));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnSeries = new FastColumnRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: '#228B22',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(columnSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = columnSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const meta = hitTestInfo.metadata as ForbesMetadata;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (hitTestInfo.isHit) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `Name: ${meta.name}, Age: ${meta.age}, Country: ${meta.country}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = '';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This is the resulting column chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_metadata1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If we click on the column we get metadata displayed at the bottom of the chart. In the browser console you will find output with the metadata property which contains &lt;STRONG&gt;Name&lt;/STRONG&gt;, &lt;STRONG&gt;Age&lt;/STRONG&gt;, &lt;STRONG&gt;Country&lt;/STRONG&gt; and &lt;STRONG&gt;isSelected&lt;/STRONG&gt; fields. The &lt;STRONG&gt;isSelected&lt;/STRONG&gt; is a common property, which is used to select/deselect data points.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9fb0c169-761b-46a8-ad1f-fac800d5f5c0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ca213a8e-8f6e-4c61-97e9-e8254f56ec41" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="932f17f4-4555-47ac-bd28-57483fa21934" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="11195739-cff6-4237-9987-ea34bfa6179f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="10388846-5f07-4aee-8196-e6a54b3e2500" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a777396-dc5f-42fd-8145-a6ed9215a557" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="37b9ed99-600a-477c-9cd4-bd8703d5b310" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="ca213a8e-8f6e-4c61-97e9-e8254f56ec41" Status="New Topic" CreatedOn="2021-10-01T07:54:30.0777763Z" ModifiedOn="2021-10-01T13:09:28.3246264Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Mountain Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:43.6831124Z">&lt;H2&gt;The hitTest method on Mountain Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeries&lt;/A&gt; tests if the click was within the mountain body.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Mountain Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = mountainSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest data point in X direction. 
&lt;LI&gt;Test if the click was within the mountain body and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Mountain Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastMountainRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastMountainRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestMountainTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Column series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = [0, 0.2, 1, 2.0, 2.5, 1.9, 1.9, 1.5, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mountainSeries = new FastMountainRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(mountainSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = mountainSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastMountainRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastMountainRenderableSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestMountainTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Column series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = [0, 0.2, 1, 2.0, 2.5, 1.9, 1.9, 1.5, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mountainSeries = new FastMountainRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: yValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(mountainSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = mountainSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_mountain-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If to click inside the mountain it will be hit. In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Mountain Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Mountain Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = mountainSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Compare distance to the point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property. &lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestXSlice method on Mountain Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Mountain Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = mountainSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds. &lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="3f382ba8-edfd-4b33-a740-3ed9ae43573a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="11195739-cff6-4237-9987-ea34bfa6179f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6353ef2f-a401-46df-9318-c3f7af4f629a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a777396-dc5f-42fd-8145-a6ed9215a557" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6f2a4ada-4e66-4706-9bf2-f15acbfd634b" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3ef96330-2715-419e-b130-65520192c0c7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b7bd274d-c460-4def-aa3d-7dce881e616d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="11195739-cff6-4237-9987-ea34bfa6179f" Status="New Topic" CreatedOn="2021-10-01T08:06:05.8077472Z" ModifiedOn="2021-10-01T13:10:13.6150615Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Candlestick and OHLC Series" BuildFlags="">
                <Title />
                <ContentsTitle m="2021-10-01T12:24:59.4013458Z">Hit-Test API for Candlestick and OHLC Series</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T08:22:05.9617439Z">&lt;H2&gt;The hitTest method on Candlestick or OHLC Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt; or&amp;nbsp;&lt;A href="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d"&gt;FastOhlcRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a candle.&lt;/P&gt;
&lt;P&gt;The algorithm is as follows: &lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Find the nearest candle in X direction. 
&lt;LI&gt;Test if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from the candle body or wicks and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property.&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;A sample source code is below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { FastCandlestickRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastCandlestickRenderableSeries';&lt;BR&gt;import { OhlcDataSeries } from 'scichart/Charting/Model/OhlcDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestCandlestickTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xOhlcValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const openValues = [2.5, 3.5, 3.7, 4.0, 5.0, 5.5, 5.0, 4.0, 3.0];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const highValues = [3.7, 3.8, 4.0, 5.3, 5.9, 5.7, 5.0, 4.3, 3.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lowValues = [2.2, 3.4, 3.3, 3.8, 5.0, 4.8, 3.5, 3.0, 1.8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const closeValues = [3.5, 3.7, 4.0, 5.0, 5.5, 5.0, 4.0, 3.0, 2.0];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const candlestickSeries = new FastCandlestickRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new OhlcDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xOhlcValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; openValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; highValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; closeValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(candlestickSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = candlestickSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { FastCandlestickRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastCandlestickRenderableSeries';&lt;BR&gt;import { OhlcDataSeries } from 'scichart/Charting/Model/OhlcDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestCandlestickTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 10 * DpiHelper.PIXEL_RATIO;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xOhlcValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const openValues = [2.5, 3.5, 3.7, 4.0, 5.0, 5.5, 5.0, 4.0, 3.0];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const highValues = [3.7, 3.8, 4.0, 5.3, 5.9, 5.7, 5.0, 4.3, 3.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const lowValues = [2.2, 3.4, 3.3, 3.8, 5.0, 4.8, 3.5, 3.0, 1.8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const closeValues = [3.5, 3.7, 4.0, 5.0, 5.5, 5.0, 4.0, 3.0, 2.0];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const candlestickSeries = new FastCandlestickRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataPointWidth: 0.3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new OhlcDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: xOhlcValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; openValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; highValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; lowValues,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; closeValues&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(candlestickSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = candlestickSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us the chart below.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_candlestick-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If we click on the candle or wicks within a distance of 10 pixels it will be hit. In the console you will find &lt;STRONG&gt;hitTestInfo&lt;/STRONG&gt; which contains &lt;STRONG&gt;openValue&lt;/STRONG&gt;, &lt;STRONG&gt;highValue&lt;/STRONG&gt;, &lt;STRONG&gt;lowValue&lt;/STRONG&gt; and &lt;STRONG&gt;closeValue&lt;/STRONG&gt; in addition to common &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; properties.&lt;/P&gt;
&lt;H2&gt;&amp;nbsp;The hitTestDataPoint method on Candlestick or OHLC Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt; or&amp;nbsp;&lt;A href="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d"&gt;FastOhlcRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from &lt;STRONG&gt;Close&lt;/STRONG&gt; value of a data point. &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Candlestick Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = candlestickSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Compare the distance to the nearest point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property.&lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestXSlice method on Candlestick or OHLC Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Candlestick Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = candlestickSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds.&lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="59e1c3e7-d4ec-419c-af06-db450fe910b5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="4a777396-dc5f-42fd-8145-a6ed9215a557" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8c698fe4-6d31-432c-9068-45508b1453b8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="45736bbe-e48c-4369-b1da-522d22f6e217" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b7bd274d-c460-4def-aa3d-7dce881e616d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6d48c05f-a9e7-4628-8920-4bfe03c084da" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="4a777396-dc5f-42fd-8145-a6ed9215a557" Status="New Topic" CreatedOn="2021-10-01T08:52:42.4332855Z" ModifiedOn="2021-10-01T13:10:53.5219565Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Scatter Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:26:43.3382379Z">&lt;H2&gt;The hitTest method on Scatter Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;XyScatterRenderableSeries&lt;/A&gt; tests if the click was within the hitTestRadius from the rectangle bounding a point marker.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Scatter Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = scatterSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The algorithm is as follows:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Test if the mouse click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from the rectangle bounding the point marker and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property in the result returned. &lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Scatter Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EllipsePointMarker } from 'scichart/Charting/Visuals/PointMarkers/EllipsePointMarker';&lt;BR&gt;import { XyScatterRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestScatterTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'white',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#368BC1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = scatterSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { EllipsePointMarker } from 'scichart/Charting/Visuals/PointMarkers/EllipsePointMarker';&lt;BR&gt;import { XyScatterRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/XyScatterRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;/P&gt;
&lt;P&gt;export async function hitTestScatterTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const HIT_TEST_RADIUS = 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.05, 0.05) }));&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xLineValues = [0, 1, 2, 3, 4, 5, 6, 7, 8];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yLineValues = [0, 0.5, 1.3, 2.4, 3, 2.5, 2.2, 1.9, 1.2];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const scatterSeries = new XyScatterRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'white',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 2,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#368BC1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { xValues: xLineValues, yValues: yLineValues })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(scatterSeries);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // IHitTestProvider.hitTest&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = scatterSeries.hitTestProvider.hitTest(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestInfo.hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestInfo.hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = `isHit = ${hitTestInfo.isHit}`;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestInfo', hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;This gives us this chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_scatter-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If to click inside the point marker it will be hit. In the browser console you will find output for the &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; object.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Scatter Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;XyScatterRenderableSeries&lt;/A&gt; tests if the click was within the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; from a data point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestDataPoint method on Scatter Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = scatterSeries.hitTestProvider.hitTestDataPoint(premultipliedX, premultipliedY, HIT_TEST_RADIUS);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Iterate over each of the points to find the nearest one on the XY plane. 
&lt;LI&gt;Compare distance to the point with the &lt;STRONG&gt;hitTestRadius&lt;/STRONG&gt; and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property.&lt;/LI&gt;&lt;/OL&gt;
&lt;H2&gt;The hitTestXSlice method on Scatter Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice method on Scatter Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = scatterSeries.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds.&lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="2670671b-396d-45c2-9a25-249481d5cff6" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="7ef3864b-3da6-4c81-ba8a-80a19c1ba2c8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b7bd274d-c460-4def-aa3d-7dce881e616d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="d5746af0-fc33-4a03-be50-c816072ce45a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f16362ce-728f-495e-8193-57a7718e9554" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="985bd560-7f5a-4d81-8b65-aa1b4cf33256" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="ccc3be2e-6fc5-42d3-9ed8-16be48a6adf3" Status="New Topic" CreatedOn="2021-10-01T12:20:43.191373Z" ModifiedOn="2021-10-01T13:11:28.0957484Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Stacked Column Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:49:44.8428932Z">&lt;H2&gt;The hitTest method on Stacked Column Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on&amp;nbsp;&lt;A href="121e373b-412a-4846-8fa8-862f0e716fa2"&gt;StackedColumnRenderableSeries&lt;/A&gt; tests if the click was within a stacked column.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Stacked Column Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = stackedColumnRenderableSeries.hitTestProvider.hitTest(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedY&lt;BR&gt;);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest column in X direction. 
&lt;LI&gt;Test if the click was within the column body and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property.&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Stacked Column Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { StackedColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/StackedColumnRenderableSeries';&lt;BR&gt;import { StackedColumnCollection } from 'scichart/Charting/Visuals/RenderableSeries/StackedColumnCollection';&lt;BR&gt;import { HitTestInfo } from 'scichart/Charting/Visuals/RenderableSeries/HitTest/HitTestInfo';&lt;/P&gt;
&lt;P&gt;export async function hitTestStackedColumnTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const porkData = [10, 13, 7, 16, 4, 6, 20, 14, 16, 10, 24, 11];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const vealData = [12, 17, 21, 15, 19, 18, 13, 21, 22, 20, 5, 10];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tomatoesData = [7, 30, 27, 24, 21, 15, 17, 26, 22, 28, 21, 22];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const cucumberData = [16, 10, 9, 8, 22, 14, 12, 27, 25, 23, 17, 17];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const pepperData = [7, 24, 21, 11, 19, 17, 14, 27, 26, 22, 28, 16];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.growBy = new NumberRange(0, 0.1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries1 = new XyDataSeries(wasmContext, { xValues, yValues: porkData, dataSeriesName: 'Pork' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries2 = new XyDataSeries(wasmContext, { xValues, yValues: vealData, dataSeriesName: 'Veal' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries3 = new XyDataSeries(wasmContext, { xValues, yValues: tomatoesData, dataSeriesName: 'Tomato' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries4 = new XyDataSeries(wasmContext, { xValues, yValues: cucumberData, dataSeriesName: 'Cucumber' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries5 = new XyDataSeries(wasmContext, { xValues, yValues: pepperData, dataSeriesName: 'Pepper' });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries1 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.fill = '#226Fb7';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.stroke = 'black';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.strokeThickness = 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.dataSeries = dataSeries1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.markerColor = '#19548b';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipColor = '#226Fb7';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.stackedGroupId = 'Meat';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries2 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.fill = '#ff9a2e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.dataSeries = dataSeries2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.markerColor = '#db8428';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipColor = '#ff9a2e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.stackedGroupId = 'Meat';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries3 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.fill = '#dc443f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.dataSeries = dataSeries3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.markerColor = '#b83735';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipColor = '#dc443f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries4 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.fill = '#aad34f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.dataSeries = dataSeries4;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.markerColor = '#87a73e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.tooltipColor = '#aad34f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries5 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.fill = '#8562b4';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.dataSeries = dataSeries5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.markerColor = '#715195';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.tooltipColor = '#8562b4';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const verticallyStackedColumnCollection = new StackedColumnCollection(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticallyStackedColumnCollection.dataPointWidth = 0.8;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticallyStackedColumnCollection.add(rendSeries3, rendSeries4, rendSeries5, rendSeries1, rendSeries2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(verticallyStackedColumnCollection);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestResults = verticallyStackedColumnCollection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .asArray()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .reduce((acc, stackedColumnRenderableSeries) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = stackedColumnRenderableSeries.hitTestProvider.hitTest(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedY&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; acc.push(hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return acc;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestResults[0].hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestResults[0].hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = JSON.stringify(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestResults.map((hitTestInfo, index) =&amp;gt; `${index} isHit = ${hitTestInfo.isHit}; `)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestResults', hitTestResults);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { StackedColumnRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/StackedColumnRenderableSeries';&lt;BR&gt;import { StackedColumnCollection } from 'scichart/Charting/Visuals/RenderableSeries/StackedColumnCollection';&lt;BR&gt;import { HitTestInfo } from 'scichart/Charting/Visuals/RenderableSeries/HitTest/HitTestInfo';&lt;/P&gt;
&lt;P&gt;export async function hitTestStackedColumnTs(divId: string) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const porkData = [10, 13, 7, 16, 4, 6, 20, 14, 16, 10, 24, 11];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const vealData = [12, 17, 21, 15, 19, 18, 13, 21, 22, 20, 5, 10];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const tomatoesData = [7, 30, 27, 24, 21, 15, 17, 26, 22, 28, 21, 22];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const cucumberData = [16, 10, 9, 8, 22, 14, 12, 27, 25, 23, 17, 17];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const pepperData = [7, 24, 21, 11, 19, 17, 14, 27, 26, 22, 28, 16];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxis.labelProvider.precision = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.growBy = new NumberRange(0, 0.1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries1 = new XyDataSeries(wasmContext, { xValues, yValues: porkData, dataSeriesName: 'Pork' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries2 = new XyDataSeries(wasmContext, { xValues, yValues: vealData, dataSeriesName: 'Veal' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries3 = new XyDataSeries(wasmContext, { xValues, yValues: tomatoesData, dataSeriesName: 'Tomato' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries4 = new XyDataSeries(wasmContext, { xValues, yValues: cucumberData, dataSeriesName: 'Cucumber' });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries5 = new XyDataSeries(wasmContext, { xValues, yValues: pepperData, dataSeriesName: 'Pepper' });&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries1 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.fill = '#226Fb7';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.stroke = 'black';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.strokeThickness = 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.dataSeries = dataSeries1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.markerColor = '#19548b';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipColor = '#226Fb7';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.stackedGroupId = 'Meat';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries2 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.fill = '#ff9a2e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.dataSeries = dataSeries2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.markerColor = '#db8428';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipColor = '#ff9a2e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.stackedGroupId = 'Meat';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries3 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.fill = '#dc443f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.dataSeries = dataSeries3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.markerColor = '#b83735';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipColor = '#dc443f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries4 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.fill = '#aad34f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.dataSeries = dataSeries4;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.markerColor = '#87a73e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.tooltipColor = '#aad34f';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries4.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries5 = new StackedColumnRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.fill = '#8562b4';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.dataSeries = dataSeries5;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.markerColor = '#715195';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.tooltipColor = '#8562b4';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.rolloverModifierProps.tooltipTextColor = '#fff';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries5.stackedGroupId = 'Vegetables';&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const verticallyStackedColumnCollection = new StackedColumnCollection(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticallyStackedColumnCollection.dataPointWidth = 0.8;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticallyStackedColumnCollection.add(rendSeries3, rendSeries4, rendSeries5, rendSeries1, rendSeries2);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(verticallyStackedColumnCollection);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent: MouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestResults: HitTestInfo[] = verticallyStackedColumnCollection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .asArray()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .reduce((acc: HitTestInfo[], stackedColumnRenderableSeries: StackedColumnRenderableSeries) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = stackedColumnRenderableSeries.hitTestProvider.hitTest(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedY&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; acc.push(hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return acc;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestResults[0].hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestResults[0].hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = JSON.stringify(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestResults.map((hitTestInfo, index) =&amp;gt; `${index} isHit = ${hitTestInfo.isHit}; `)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestResults', hitTestResults);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The &lt;STRONG&gt;StackedColumnCollection&lt;/STRONG&gt; in this example has five&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedcolumnrenderableseries.html"&gt;StackedColumnRenderableSeries&lt;/A&gt;. Therefore, we use &lt;STRONG&gt;reduce&lt;/STRONG&gt; function to iterate over each renderable series and to accumulate the result.&lt;/P&gt;
&lt;P&gt;This gives us the following chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_stacked-column-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;If we click inside the column it will be hit for the corresponding renderable series in the&amp;nbsp;collection. In the browser console you will find output with array of &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; results.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Stacked Column Series &lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method is not supported for&amp;nbsp;&lt;A href="121e373b-412a-4846-8fa8-862f0e716fa2"&gt;StackedColumnRenderableSeries&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;The hitTestXSlice method on Column Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice on Stacked Column Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = stackedColumnRenderableSeries.hitTestProvider.hitTestXSlice(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedX,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; premultipliedY&lt;BR&gt;);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was over the column bar.&lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="0d9753f7-ba63-4754-bd22-71efa582954a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b7bd274d-c460-4def-aa3d-7dce881e616d" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="11f4e73a-2126-431a-bdfb-16655ca134ba" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e28144d5-4aaa-4889-a2e1-d346ca58a4a0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="985bd560-7f5a-4d81-8b65-aa1b4cf33256" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="8f9dc276-4331-4578-a8e2-6931458c8ee9" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="309a8887-503f-42be-b7eb-4f9adf27b7b4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b7bd274d-c460-4def-aa3d-7dce881e616d" Status="New Topic" CreatedOn="2021-10-01T12:39:26.0741355Z" ModifiedOn="2021-10-01T13:12:15.0933732Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Hit-Test API for Stacked Mountain Series" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2021-10-01T12:56:03.9618823Z">&lt;H2&gt;The hitTest method on Stacked Mountain Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTest&lt;/STRONG&gt; method on &lt;STRONG&gt;StackedMountainRenderableSeries&lt;/STRONG&gt; tests if the click was within the band for this stacked mountain series.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTest method on Stacked Mountain Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = stackedMountainRS.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The algorithm is as follows: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Find the nearest data point in X direction. 
&lt;LI&gt;Test if the click was within the band for this stacked mountain series and update &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property.&lt;/LI&gt;&lt;/OL&gt;
&lt;P&gt;This is the full example of the &lt;STRONG&gt;hitTest&lt;/STRONG&gt; method on Stacked Mountain Series.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { DpiHelper } from 'scichart/Charting/Visuals/TextureManager/DpiHelper';&lt;BR&gt;import { CustomAnnotation } from 'scichart/Charting/Visuals/Annotations/CustomAnnotation';&lt;BR&gt;import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from 'scichart/types/AnchorPoint';&lt;BR&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { HitTestInfo } from 'scichart/Charting/Visuals/RenderableSeries/HitTest/HitTestInfo';&lt;BR&gt;import { StackedMountainRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/StackedMountainRenderableSeries';&lt;BR&gt;import { StackedMountainCollection } from 'scichart/Charting/Visuals/RenderableSeries/StackedMountainCollection';&lt;/P&gt;
&lt;P&gt;export async function hitTestStackedMountainTs(divId) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const y1Values = [4, 7, 5.2, 9.4, 3.8, 5.1, 7.5, 12.4, 14.6, 8.1, 11.7, 14.4, 16, 3.7, 5.1, 6.4, 3.5, 2.5];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const y2Values = [15, 10.1, 10.2, 10.4, 10.8, 1.1, 11.5, 3.4, 4.6, 0.1, 1.7, 14.4, 6, 13.7, 10.1, 8.4, 8.5, 12.5];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const y3Values = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 3, 2, 2, 2];&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChartSurface, wasmContext } = await SciChartSurface.create(divId);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxis.growBy = new NumberRange(0, 0.1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries1 = new XyDataSeries(wasmContext, { xValues, yValues: y1Values });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries2 = new XyDataSeries(wasmContext, { xValues, yValues: y2Values });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const dataSeries3 = new XyDataSeries(wasmContext, { xValues, yValues: y3Values });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries1 = new StackedMountainRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.dataSeries = dataSeries1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.fill = '#939899';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.markerColor = '#7b7e80';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipColor = 'rgba(147,152,153,0.7)';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries1.isDigitalLine = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries2 = new StackedMountainRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.dataSeries = dataSeries2;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.fill = '#66838d';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.markerColor = '#495d65';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipColor = 'rgba(102,131,141,0.7)';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries2.isDigitalLine = false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rendSeries3 = new StackedMountainRenderableSeries(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.dataSeries = dataSeries3;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.fill = '#368BC1';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.markerColor = '#2d739e';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipColor = 'rgba(54,139,193,0.7)';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.rolloverModifierProps.tooltipTextColor = '#000';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; rendSeries3.isDigitalLine = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const verticallyStackedMountainCollection = new StackedMountainCollection(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticallyStackedMountainCollection.add(rendSeries1, rendSeries2, rendSeries3);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.renderableSeries.add(verticallyStackedMountainCollection);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Add an SVG annotation to display the mouse click&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const svgAnnotation = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg width="8" height="8"&amp;gt;&amp;lt;circle cx="50%" cy="50%" r="4" fill="#FF0000"/&amp;gt;&amp;lt;/svg&amp;gt;`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isHidden: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.annotations.add(svgAnnotation);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.domCanvas2D.addEventListener('mousedown', (mouseEvent) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickX = mouseEvent.offsetX;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const mouseClickY = mouseEvent.offsetY;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('mouseClickX', mouseClickX, 'mouseClickY', mouseClickY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedX = mouseEvent.offsetX * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const premultipliedY = mouseEvent.offsetY * DpiHelper.PIXEL_RATIO;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('premultipliedX', premultipliedX, 'premultipliedY', premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestResults: HitTestInfo[] = verticallyStackedMountainCollection&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .asArray()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .reduce((acc, stackedMountainRS) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const hitTestInfo = stackedMountainRS.hitTestProvider.hitTest(premultipliedX, premultipliedY);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; acc.push(hitTestInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return acc;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, []);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.x1 = hitTestResults[0].hitTestPointValues.x;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.y1 = hitTestResults[0].hitTestPointValues.y;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgAnnotation.isHidden = false;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resultDiv = document.getElementById('result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resultDiv.innerText = JSON.stringify(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; hitTestResults.map((hitTestInfo, index) =&amp;gt; `${index} isHit = ${hitTestInfo.isHit}; `)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.log('hitTestResults', hitTestResults);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The&amp;nbsp;&lt;A href="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1"&gt;StackedMountainCollection&lt;/A&gt; in this example has three&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/stackedmountainrenderableseries.html"&gt;StackedMountainRenderableSeries&lt;/A&gt;. Therefore, we use &lt;STRONG&gt;reduce&lt;/STRONG&gt; function to iterate over each renderable series and to accumulate the result.&lt;/P&gt;
&lt;P&gt;This gives us this chart. &lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/HitTestApi_stacked-mountain-chart1.png"&gt;&lt;/P&gt;
&lt;P&gt;If we click inside the gray band it will be hit for the&amp;nbsp;&lt;A href="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1"&gt;StackedMountainRenderableSeries&lt;/A&gt; with index 1. In the browser console you will find output with an&amp;nbsp;array of &lt;STRONG&gt;HitTestInfo&lt;/STRONG&gt; results.&lt;/P&gt;
&lt;H2&gt;The hitTestDataPoint method on Stacked Mountain Series&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestDataPoint&lt;/STRONG&gt; method is not supported for&amp;nbsp;&lt;A href="eb3d636b-673c-4f1b-a0cc-1fa8ff7242c1"&gt;StackedMountainRenderableSeries&lt;/A&gt;. &lt;/P&gt;
&lt;H2&gt;The hitTestXSlice method on Stacked Mountain Series &lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;IHitTestProvider.hitTestXSlice&lt;/STRONG&gt; method is used for&amp;nbsp;&lt;A href="ff5c9d10-4cdb-49f2-9e5b-45a4c611ed62"&gt;CursorModifier&lt;/A&gt; and&amp;nbsp;&lt;A href="fac601dc-5435-4c51-abec-1c267f55f193"&gt;RolloverModifier&lt;/A&gt; to get information about the nearest point.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;hitTestXSlice on Stacked Mountain Series&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const hitTestInfo = stackedMountainRS.hitTestProvider.hitTestXSlice(premultipliedX, premultipliedY);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;The way it works: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;Finds the nearest point in X direction. 
&lt;LI&gt;Sets &lt;STRONG&gt;HitTestInfo.isHit&lt;/STRONG&gt; property to &lt;STRONG&gt;True&lt;/STRONG&gt; if the mouse click was within the data bounds.&lt;/LI&gt;&lt;/OL&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="6df09b5b-e236-42b4-be3e-26132b2cd4d5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="bf7f5efa-0109-4ff3-aa52-1bf07c26c9f0" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5f49b9c0-3e6f-41d3-a4d6-6b7c61f2530c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="985bd560-7f5a-4d81-8b65-aa1b4cf33256" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="70cf930b-85bc-4bdc-9818-4af1949e0678" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="309a8887-503f-42be-b7eb-4f9adf27b7b4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="174eac79-d796-4579-818e-0176f98aaded" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2a065a28-4405-4185-bb71-d28c21e51fd9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="e84b68f5-90ed-401c-b36c-8b16d000ed46" AutoIndex="false">
            <Caption m="2021-09-18T19:41:00.9949882Z">PaletteProvider API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="3fb757b4-70d4-4a57-8c0d-97485cb8b722" Status="New Topic" CreatedOn="2021-09-18T19:40:53.2366846Z" ModifiedOn="2023-03-06T15:52:21.3581202Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The PaletteProvider API" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-06T15:52:21.3581202Z">&lt;P&gt;SciChart.js features the ability to change color of series on a point-by-point basis, using the PaletteProvider feature.&lt;/P&gt;
&lt;P&gt;Many series types support PaletteProvider, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Line Series (&lt;A href="e280ed77-6cc5-49cd-84be-ecd143139ca6"&gt;FastLineRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;Mountain Series (&lt;A href="e5693b2a-3d41-4603-b249-8594512d1604"&gt;FastMountainRenderableSeriers&lt;/A&gt;) 
&lt;LI&gt;Band Series (&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;FastBandRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;Bubble Series (&lt;A href="a53bef2b-820c-45a3-9903-ad426d572aae"&gt;FastBubbleRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;Candlestick Series (&lt;A href="b2fc10ad-2614-414b-a173-bed16255aa6f"&gt;FastCandlestickRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;OHLC Series (&lt;A href="37dc17e0-10de-47a3-b255-dd7d6ad1cb0d"&gt;FastOhlcRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;Column Series (&lt;A href="246d21d0-3b1b-4840-be7b-33bc0066e0e1"&gt;FastColumnRenderableSeries&lt;/A&gt;) 
&lt;LI&gt;Scatter Series (&lt;A href="f61a9e5c-34c5-40a5-b239-bdb8ffc15a7c"&gt;XyScatterRenderableSeries&lt;/A&gt;) &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;What is the PaletteProvider API?&lt;/H2&gt;
&lt;P&gt;The PaletteProvider API allows you to achieve per data-point colouring or styling. Here is a quick example below. The following pages have further worked examples for each series type.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-chart-color-points-individually-with-paletteprovider&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;EM&gt;&lt;STRONG&gt;Above&lt;/STRONG&gt;: The&amp;nbsp;&lt;/EM&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;Coloring Series per-point using PaletteProvider&lt;/A&gt;&lt;/A&gt;&lt;EM&gt; from the SciChart.js Demo, showing how to color data-points based on a rule.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The PaletteProvider API is a powerful extension in SciChart.js which allows you to colour line segments, scatter points, candles/columns or mountain chart segments based on a programatic rule.&lt;/P&gt;
&lt;H2&gt;Some common Use-cases for the PaletteProvider&lt;/H2&gt;
&lt;P&gt;Some common use-cases for the PaletteProvider API include:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Changing colour of a line series when value exceeds a threshold. 
&lt;LI&gt;Colouring candlesticks based on volume 
&lt;LI&gt;Changing the Fill of a time-based Histogram based on day of the week 
&lt;LI&gt;Highlighting important Scatter or Bubble points based on additional data. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Use this API any time you want to change the colour, fill or scatter-point colours programmatically on a per-datapoint basis.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Enabling the PaletteProvider&lt;/H2&gt;
&lt;P&gt;To enable the paletting feature, you need to create a class which conforms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmarkerpaletteprovider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt; interfaces and assign a new instance of the class to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/irenderableseries.html#paletteprovider"&gt;IRenderableSeries.paletteProvider&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;The following articles in this section show you how to do this for each series type. &lt;STRONG&gt;Click on the 'See Also'&lt;/STRONG&gt; &lt;STRONG&gt;items&lt;/STRONG&gt; &lt;STRONG&gt;below&lt;/STRONG&gt; to find out:&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="f5637416-19cd-4fda-ba63-9e3187a1e87f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b64e932a-c0f3-4c94-9750-69745955ec39" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="d7722ecc-da64-44c8-84d3-328f2de63e04" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d2584e96-8697-44a9-9732-216fdfe52003" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="0beba0d2-422e-4489-9e1a-0f161515ddd0" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="1ff36030-e9f0-4a84-9ec2-8d863bca5d30" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a0dd2ab9-e8b1-43a7-a5bf-759d2b113b2f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f4f7dfac-b1d2-40c0-a1da-4b9196513292" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="642d697b-5b5c-4f53-a47b-7aa02d0f74b8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="124cb834-7335-4f5f-8e8a-cd2128404b70" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c36e220e-71b3-48f2-a4ab-ac1e7699b269" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="4b641f3c-ff85-4b96-a77a-661f464a22fd" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b3e47563-6702-41ec-b855-caa86a025f11" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f550d060-674c-4ccf-ac93-f885fbc3b6e1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="71c23100-837e-47c7-af5d-667c153ff3a3" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b64e932a-c0f3-4c94-9750-69745955ec39" Status="New Topic" CreatedOn="2021-09-19T14:32:16.9862696Z" ModifiedOn="2023-12-22T12:50:16.6787589Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-point Colouring of Line Segments" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T12:50:16.6787589Z">&lt;P&gt;Line series can be colored per-point or per line-segment using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;. To use this, we must create a class (typescript) or object (javascript)&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt; interface. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#paletteprovider"&gt;FastLineRenderableSeries.paletteProvider&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;Let's start off with the PaletteProvider class:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\LineCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to the line series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\LineCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;JSON-BUILDER&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\LineCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/LineCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;In TypeScript you only need to implement an interface such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt;, whereas in JavaScript you must extend the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/defaultpaletteprovider.html"&gt;DefaultPaletteProvider&lt;/A&gt; class.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Gradient Transitions in Lines&lt;/H2&gt;
&lt;P&gt;Change&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/defaultpaletteprovider.html#strokepalettemode"&gt;strokePaletteMode&lt;/A&gt; to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/estrokepalettemode.html"&gt;EStrokePaletteMode.GRADIENT&lt;/A&gt; to get a gradient color transition:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class LinePaletteProvider extends DefaultPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor(stroke, rule) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.strokePaletteMode = EStrokePaletteMode.GRADIENT;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// ..&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ..&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;class LinePaletteProvider implements IStrokePaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; readonly strokePaletteMode: EStrokePaletteMode = EStrokePaletteMode.GRADIENT;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This now results in gradient color changes between line segments.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/PaletteProvider_Line2.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note: SciChart won't bisect the line at a threshold value but only changes colour between line segments in the data you already have. If you want to have a perfect transistion from one colour to another at a specific Y-value, you will need to include data-points&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="4ec37f6f-c447-4931-8230-038947ef4984" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb757b4-70d4-4a57-8c0d-97485cb8b722" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3deb0274-da28-42b2-bf87-6ff810e4e645" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d2584e96-8697-44a9-9732-216fdfe52003" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="85d22291-1aab-4062-b37b-1294cd12811a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="d9d3c36e-a5fe-4e2d-a582-bf28eac3e795" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a0dd2ab9-e8b1-43a7-a5bf-759d2b113b2f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="2399fa85-859f-4d42-b4bc-cf0f86a40fea" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="642d697b-5b5c-4f53-a47b-7aa02d0f74b8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="f72c35c8-23e1-4b82-9de3-c5b5351d20c2" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c36e220e-71b3-48f2-a4ab-ac1e7699b269" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="230ba6c8-8659-4214-b5c6-681c9b0c68b8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b3e47563-6702-41ec-b855-caa86a025f11" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d2584e96-8697-44a9-9732-216fdfe52003" Status="New Topic" CreatedOn="2021-09-19T14:32:32.0859901Z" ModifiedOn="2023-12-22T12:50:42.3710505Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-point Colouring of Mountain Segments" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T12:50:42.3710505Z">&lt;P&gt;Mountain series can be colored per-point using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;. To use this, we must create a class (typescript) or object (javascript)&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt;&amp;nbsp;interfaces. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html#paletteprovider"&gt;FastMountainRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;First, let's create a PaletteProvider class like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to the series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\MountainCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;The code above results in a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-mountain-chart" target=_blank&gt;JavaScript Mountain Chart&lt;/A&gt; with the following output.&amp;nbsp;XValues &amp;gt;&amp;nbsp;200 are colored red, and XValues &amp;lt;&amp;nbsp;200 are the default series colors.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/MountainCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: SciChart won't bisect the line at a threshold value but only changes colour between line segments in the data you already have. If you want to have a perfect transistion from one colour to another at a specific Y-value, you will need to include data-points&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Colouring Mountain Series&amp;nbsp;Point-Markers with PaletteProvider&lt;/H2&gt;
&lt;P&gt;If applying PointMarkers to the FastMountainRenderableSeries, and you want to adjust per-point coloring of the markers, then you need to implement overridePointMarkerArgb in your paletteprovider.&lt;/P&gt;
&lt;P&gt;Find out how in the documentation page&amp;nbsp;&lt;A href="c36e220e-71b3-48f2-a4ab-ac1e7699b269"&gt;Per-Point Colouring of Scatter Charts (or PointMarkers)&lt;/A&gt;.&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e42dd6b6-bcd9-4e35-b638-268059a63d0f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb757b4-70d4-4a57-8c0d-97485cb8b722" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a3488487-460e-44fb-b35c-554fa6e0325a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b64e932a-c0f3-4c94-9750-69745955ec39" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="28d676b3-3dc0-4ba7-9da9-23bdc74fdd8c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3da312c9-35e5-4311-bf19-5bd0fc324b2d" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a0dd2ab9-e8b1-43a7-a5bf-759d2b113b2f" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="483e573c-8980-48eb-ad34-ef587642c39f" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="642d697b-5b5c-4f53-a47b-7aa02d0f74b8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3d0d7708-d720-4432-9eb2-82353470f7b3" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="c36e220e-71b3-48f2-a4ab-ac1e7699b269" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3b2353db-8f2e-4ffa-84df-9dac43eec363" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b3e47563-6702-41ec-b855-caa86a025f11" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="238fb82f-7bbd-4cca-99cf-400ae1b5a8c9" Status="New Topic" CreatedOn="2021-09-19T14:32:55.8641755Z" ModifiedOn="2022-05-17T18:13:00.5407576Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Band Segments" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-05-17T18:13:00.5407576Z">&lt;H2&gt;Colour Band Series Segments with PaletteProvider&lt;/H2&gt;
&lt;P&gt;Let's create a&amp;nbsp;&lt;A href="7cf91fa8-841d-4bb8-adbd-44a9dd73b238"&gt;FastBandRenderableSeries&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;band series example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await SciChartSurface.create(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; theme: new SciChartJSLightTheme()&lt;BR&gt;&amp;nbsp;});&lt;BR&gt;&amp;nbsp;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;&amp;nbsp;sciChartSurface.yAxes.add(new NumericAxis(wasmContext, { growBy: new NumberRange(0.4, 0.4) }));&lt;/P&gt;
&lt;P&gt;const dataSeries = new XyyDataSeries(wasmContext);&lt;BR&gt;&amp;nbsp;const POINTS = 20;&lt;BR&gt;&amp;nbsp;const STEP = (3 * Math.PI) / POINTS;&lt;BR&gt;&amp;nbsp;for (let i = 0; i &amp;lt;= POINTS; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const k = 1 - i / 2000;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const y = Math.sin(i * STEP) * k * 0.7;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const y1 = Math.cos(i * STEP) * k;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(i, y, y1);&lt;BR&gt;&amp;nbsp;}&lt;BR&gt;&amp;nbsp;const rendSeries = new FastBandRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 7,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: 'rgba(39,155,39,0.7)',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fillY1: 'rgba(255,25,25,0.7)',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#FF1919',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeY1: '#279B27',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 1,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointMarker: new EllipsePointMarker(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 14,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 14,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 4,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#FFFF33',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; fill: '#33FF33',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity: 1&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;});&lt;BR&gt;&amp;nbsp;sciChartSurface.renderableSeries.add(rendSeries);&lt;BR&gt;&amp;nbsp;sciChartSurface.zoomExtents();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/PaletteProvider_Band1.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Next we create a BandPaletteProvider by implementing&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmarkerpaletteprovider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt; interfaces in typescript, or extending&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/defaultpaletteprovider.html"&gt;DefaultPaletteProvider&lt;/A&gt; in JavaScript.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// PaletteProvider implementation which colours stroke, fill and pointmarker&lt;BR&gt;class BandPaletteProvider extends DefaultPaletteProvider {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; constructor() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.strokePaletteMode = EStrokePaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.fillPaletteMode = EFillPaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.limeStroke = parseColorToUIntArgb('lime');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.yellowFill = parseColorToUIntArgb('rgba(255,255,0,0.7)');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.markerRedStroke = parseColorToUIntArgb('red');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; this.markerBlueFill = parseColorToUIntArgb('blue');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; overrideFillArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return opacity !== undefined ? uintArgbColorMultiplyOpacity(this.yellowFill, opacity) : this.yellowFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; overrideStrokeArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return opacity !== undefined ? uintArgbColorMultiplyOpacity(this.limeStroke, opacity) : this.limeStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; overridePointMarkerArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) return { stroke: this.markerRedStroke, fill: this.markerBlueFill };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TypeScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// PaletteProvider implementation which colours stroke, fill and pointmarker&lt;BR&gt;class BandPaletteProvider implements IStrokePaletteProvider, IFillPaletteProvider, IPointMarkerPaletteProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public readonly strokePaletteMode = EStrokePaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public readonly fillPaletteMode = EFillPaletteMode.SOLID;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly limeStroke = parseColorToUIntArgb('lime');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly yellowFill = parseColorToUIntArgb('rgba(255,255,0,0.7)');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly markerRedStroke = parseColorToUIntArgb('red');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private readonly markerBlueFill = parseColorToUIntArgb('blue');&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onAttached(parentSeries: IRenderableSeries): void {}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public onDetached(): void {}&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overrideFillArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity?: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata?: IPointMetadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ): number {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return opacity !== undefined ? uintArgbColorMultiplyOpacity(this.yellowFill, opacity) : this.yellowFill;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overrideStrokeArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity?: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata?: IPointMetadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ): number {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return opacity !== undefined ? uintArgbColorMultiplyOpacity(this.limeStroke, opacity) : this.limeStroke;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public overridePointMarkerArgb(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValue: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; index: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; opacity?: number,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; metadata?: IPointMetadata&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ): TPointMarkerArgb {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (xValue &amp;gt;= 6 &amp;amp;&amp;amp; xValue &amp;lt;= 12) return { stroke: this.markerRedStroke, fill: this.markerBlueFill };&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return undefined;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;To use it, apply to the Paletteprovider property on a RenderableSeries:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;using a paletteprovider&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Usage&lt;BR&gt;const bandSeries = new FastBandRenderableSeries(wasmContext);&lt;BR&gt;bandSeries.paletteProvider = new BandPaletteProvider();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we have a paletted band renderable series with fill, stroke and point markers overridden for X in range from 6 to 12.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/PaletteProvider_Band2.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a0dd2ab9-e8b1-43a7-a5bf-759d2b113b2f" Status="New Topic" CreatedOn="2021-09-19T14:33:07.9305059Z" ModifiedOn="2023-03-16T09:10:11.3007055Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Bubble Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-16T09:10:11.3007055Z">&lt;H2&gt;Colouring&amp;nbsp;Bubble Points Individually with PaletteProvider&lt;/H2&gt;
&lt;P&gt;It is possible to override the Bubble series point-marker fill &amp;amp; stroke colour on a per-datapoint basis in SciChart.js using the PaletteProvider API.&lt;/P&gt;
&lt;P&gt;To use this, we must create a class&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmarkerpaletteprovider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt;&lt;SPAN style="COLOR: rgb(0,0,0)"&gt;&amp;nbsp;&lt;/SPAN&gt;interface. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html#paletteprovider"&gt;XyScatterRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;Let's start off by creating a PaletteProvider class:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It is important that overridePointMarkerArgb returns an object containing&amp;nbsp;both stroke and fill, even if stroke is ignored on the bubble series.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to a Bubble Series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\BubbleCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output. Values above&amp;nbsp;the threshold&amp;nbsp;are coloured red, while values below this threshold use the default colour.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/BubbleCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="9f924194-2380-4cfc-b3dd-37443c35a3e7" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="3fb757b4-70d4-4a57-8c0d-97485cb8b722" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="88b3255a-0c3c-4d6c-9498-9d28dcbfc922" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="b64e932a-c0f3-4c94-9750-69745955ec39" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="642d697b-5b5c-4f53-a47b-7aa02d0f74b8" Status="New Topic" CreatedOn="2021-09-19T14:33:44.7370221Z" ModifiedOn="2023-12-22T12:50:52.140678Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Candlestick Charts" BuildFlags="">
                <Title m="2023-03-06T16:42:50.8202398Z">Per-Point Colouring of Candlestick  / OHLC Charts</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T12:50:52.140678Z">&lt;P&gt;Candlestick series can be colored per-point or per line-segment using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;. To use this, we must create a class (typescript) or object (javascript)&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt; interfaces. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcandlestickrenderableseries.html#paletteprovider"&gt;FastCandlestickRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;First let's create the PaletteProvider class.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, apply the PaletteProvider to the Candlestick series.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\CandlestickCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above results in the following output.&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/CandlestickCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;When the open - close is greater than a 1% range, the candle fill&amp;nbsp;is coloured white.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Using this or similar logic you can add an extra-dimension of data to&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-candlestick-chart" target=_blank&gt;JavaScript Candlestick charts&lt;/A&gt;.&lt;/P&gt;
&lt;H2&gt;Applying PaletteProviders to OHLC Series&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The same technique can be applied to OHLC Bars. Just make sure when creating a class that inherits&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datetimenumericaxis.html"&gt;DefaultPaletteProvide&lt;/A&gt; that the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/defaultpaletteprovider.html#overridestrokeargb"&gt;overrideStrokeArgb&lt;/A&gt; function is defined. As usual, return a color in ARGB format to override this point stroke, else, return undefined for default stroke.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="c36e220e-71b3-48f2-a4ab-ac1e7699b269" Status="New Topic" CreatedOn="2021-09-19T14:34:07.7790502Z" ModifiedOn="2023-03-16T09:12:21.268559Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Scatter Charts" BuildFlags="">
                <Title m="2023-03-06T14:52:25.7881893Z">Per-Point Colouring of Scatter Charts (or PointMarkers)</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-03-16T09:12:21.268559Z">&lt;H2&gt;Colouring&amp;nbsp;Scatter Points Individually with PaletteProvider&lt;/H2&gt;
&lt;P&gt;It is possible to override the Scatter series point-marker fill &amp;amp; stroke colour on a per-datapoint basis in SciChart.js using the PaletteProvider API.&lt;/P&gt;
&lt;P&gt;To use this, we must create a class&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmarkerpaletteprovider.html"&gt;IPointMarkerPaletteProvider&lt;/A&gt;&lt;SPAN style="COLOR: rgb(0,0,0)"&gt;&amp;nbsp;&lt;/SPAN&gt;interface. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyscatterrenderableseries.html#paletteprovider"&gt;XyScatterRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;Let's start off by creating a PaletteProvider class:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;It is important that overridePointMarkerArgb returns an object containing&amp;nbsp;both stroke and fill.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to a Scatter Series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ScatterCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This results in the following output. Values above 0.0 are coloured red, while values below this threshold use the default colour.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ScatterCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b3e47563-6702-41ec-b855-caa86a025f11" Status="New Topic" CreatedOn="2021-09-19T14:34:17.0702638Z" ModifiedOn="2023-12-22T12:51:05.0013038Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Column Charts" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T12:51:05.0013038Z">&lt;P&gt;Column series can be colored per-point or per line-segment using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;. To use this, we must create a class (typescript) or object (javascript)&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt; interfaces. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastcolumnrenderableseries.html#paletteprovider"&gt;FastColumnRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;First, let's create a PaletteProvider class like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ColumnCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to the series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ColumnCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ColumnCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above results in a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;JavaScript Column Chart&lt;/A&gt; with the following output.&amp;nbsp;YValues &amp;gt; 10 are colored red, and YValues &amp;lt; 10 are the default series stroke and fill colors.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ColumnCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="71c23100-837e-47c7-af5d-667c153ff3a3" Status="New Topic" CreatedOn="2022-05-16T13:29:11.7944392Z" ModifiedOn="2023-12-22T12:51:14.295306Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Per-Point Colouring of Impulse Charts" BuildFlags="">
                <Title m="2022-05-16T13:29:26.0415121Z">Per-Point Colouring  of Impulse Charts</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T12:51:14.295306Z">&lt;P&gt;Impulse series can be colored per-point or per data-point using the&amp;nbsp;&lt;A href="3fb757b4-70d4-4a57-8c0d-97485cb8b722"&gt;PaletteProvider API&lt;/A&gt;. To use this, we must create a class (typescript) or object (javascript)&amp;nbsp;which implements or confirms to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/istrokepaletteprovider.html"&gt;IStrokePaletteProvider&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html"&gt;IFillPaletteProvider&lt;/A&gt; interfaces. Then, apply this to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/fastimpulserenderableseries.html#paletteprovider"&gt;FastImpulseRenderableSeries.paletteProvider&lt;/A&gt; property. This allows you to colour data-points based on values, or custom rules with infinite extensiblity.&lt;/P&gt;
&lt;P&gt;First, let's create a PaletteProvider class like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ImpulseCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, we can apply the PaletteProvider to the series. This can be done both with the programmatic API and the Builder API:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ImpulseCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\2DChartTypes\ImpulseCharts\PaletteProvider\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The code above results in a&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;JavaScript Column Chart&lt;/A&gt; with the following output.&amp;nbsp;YValues &amp;gt; 10 are colored red, and YValues &amp;lt; 10 are the default series stroke and fill colors.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/2DChartTypes/ImpulseCharts/PaletteProvider/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="fce94f13-bbc9-4d9d-9675-4eccddb02187" AutoIndex="false">
            <Caption m="2022-08-16T11:14:33.3882107Z">SubCharts API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="e7d484ca-b11c-424e-9d88-0afbabc17bde" Status="New Topic" CreatedOn="2022-08-16T11:14:46.0483534Z" ModifiedOn="2023-01-13T17:24:10.0607387Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="WhatIsTheSubChartsAPI" BuildFlags="">
                <Title m="2022-08-16T11:14:55.5180296Z">What is the SubCharts API?</Title>
                <ContentsTitle m="2023-01-10T14:40:23.2028256Z">What is the SubCharts API?</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-13T17:24:10.0607387Z">&lt;P&gt;The SubCharts API allows to place a separate child chart within a parent chart (Charts within charts). It is possible to have multiple sub-charts within the main SciChartSurface.&lt;/P&gt;
&lt;P&gt;The purpose of the SubCharts API is to allow:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Very large grids of charts, e.g. 10 charts x 10 charts (100 total) and maintain very high performance drawing by sharing a single WebGL Context. 
&lt;LI&gt;Charts within charts, e.g. a 2-dimensional overview 
&lt;LI&gt;Charts placed within axis or other advanced scenarios &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;A sub-chart is represented by the &lt;STRONG&gt;SciChartSubSurface&lt;/STRONG&gt; class, and similarly to &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt; it has its own Axes, Modifiers, Renderable Series and Annotations.&lt;/P&gt;
&lt;P&gt;SubCharts API could be applied to display separate charts simultaneously on a single root element. The API allows to set a position, size , and styling of a sub-chart. Additionally it is possible to add custom HTML elements to the chart, which would be positioned accordingly to the chart layout flow.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-multiple-chart-dashboard-performance-demo"&gt;JavaScript 64-Chart Dashboard Performance Demo&lt;/A&gt; can be found in the&amp;nbsp;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;SciChart.Js Examples Suite&lt;/A&gt;&amp;nbsp;on Github, or our live demo at&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;demo.scichart.com&lt;/A&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-multiple-chart-dashboard-performance-demo&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Discovering the API&lt;/H2&gt;
&lt;P&gt;A sub-chart is represented by an instance of &lt;STRONG&gt;SciChartSubSurface&lt;/STRONG&gt; class, which extends &lt;STRONG&gt;SciChartSurface&lt;/STRONG&gt;. To create a sub-chart on an existing surface we can use &lt;STRONG&gt;SciChartSurface.addSubChart&lt;/STRONG&gt; method.&lt;/P&gt;
&lt;P&gt;The method accepts &lt;STRONG&gt;I2DSubSurfaceOptions&lt;/STRONG&gt; as parameters and returns the created &lt;STRONG&gt;SciChartSubSurface&lt;/STRONG&gt; object. (See the following sections for the usage example of the options argument).&amp;nbsp; It will also add a new sub-surface to the &lt;STRONG&gt;SciChartSurface.subCharts&lt;/STRONG&gt; collection of the main surface object. Then you should be able to access it directly or from the collection and configure similarly as you would do with a regular surface.&lt;/P&gt;
&lt;H2&gt;Basic Subchart (Charts within Charts)&lt;/H2&gt;
&lt;P&gt;Let's demonstrate a simple setup, where we define a sub-chart on a surface. For this we will start from defining a surface with some axes on it. On the surface we will create a sub-chart on a specified area.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;basic subcharts&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { Rect } from 'scichart/Core/Rect';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;// create a main (regular) surface which will contain a sub-chart&lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// axes here are optional, but may be required&lt;BR&gt;// e.g. when using ECoordinateMode.DataValue or drawing renderable series&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;
&lt;P&gt;// Add a sub-chart to the main surface&lt;BR&gt;const subChartSurface = sciChartSurface.addSubChart({ position: new Rect(0, 0, 0.5, 0.5) });&lt;/P&gt;
&lt;P&gt;// Add axes to the sub-surface as well to make sure it will be drawn&lt;BR&gt;subChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;subChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the example above we passed an object as argument of &lt;STRONG&gt;SciChartSurface.addSubChart&lt;/STRONG&gt; method, which contains a position property. The property defines a structure for specifying coordinates and sizes of a sub-chart. By default, the coordinates and size are treated as ratio values in range from 0 to 1, with a canvas viewport used as a base.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/SubCharts_BasicSubchart.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For more details see the section on&amp;nbsp;&lt;A href="d11cc9cc-62cc-4a05-a893-91175f2426f2"&gt;Subchart positioning&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;SubCharts with the Builder API&lt;/H2&gt;
&lt;P&gt;It is also possible to create a sub-chart via &lt;STRONG&gt;Builder API&lt;/STRONG&gt;. For this pass an array of &lt;STRONG&gt;ISubChartDefinition&lt;/STRONG&gt; via &lt;STRONG&gt;ISciChart2DDefinition.subCharts&lt;/STRONG&gt; property.&lt;/P&gt;
&lt;P&gt;For example, the following snippet will give us the same result as Basic Example setup:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Subcharts builder API&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { chartBuilder } from "scichart/Builder/chartBuilder";&lt;BR&gt;import { Rect } from 'scichart/Core/Rect';&lt;BR&gt;import { EAxisType } from 'scichart/types/AxisType';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // axes here are optional, but may be required&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // e.g. when using ECoordinateMode.DataValue or drawing renderable series&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxes: { type: EAxisType.NumericAxis },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxes: { type: EAxisType.NumericAxis },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: { position: new Rect(0, 0, 0.5, 0.5) },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="91567c0c-8cc0-4197-b9e2-faec238f1e8a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="9e21cdd2-483c-4991-9113-12a2399c5796" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="6f5d49d0-4b7d-4f5e-b45c-dfa6a453478c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d078679d-8814-4e65-991a-6cd39152665e" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="ec2f6158-7b7d-4d30-9e5a-e29e21151313" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d11cc9cc-62cc-4a05-a893-91175f2426f2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="e431629a-4877-4728-9fe2-6eb26e1f3656" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a2e07572-2c22-4151-83ed-7edd12983b21" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="bea68771-8e93-4ca6-93e9-a84ca32737ec" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a89292b1-e064-4519-b956-7ced2732f8e8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d078679d-8814-4e65-991a-6cd39152665e" Status="New Topic" CreatedOn="2023-01-10T17:26:37.1139269Z" ModifiedOn="2023-01-10T18:30:41.3283927Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SubSurfaceTransparency" BuildFlags="">
                <Title />
                <ContentsTitle m="2023-01-10T18:26:50.490351Z">Sub Surface Transparency</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-10T18:30:41.3283927Z">&lt;P&gt;In the previous example of&amp;nbsp;&lt;A href="e7d484ca-b11c-424e-9d88-0afbabc17bde"&gt;Setting up a Basic Subchart&lt;/A&gt; (chart within a chart),&amp;nbsp;notice how bands and grid-lines of main chart are still visible under the sub-surface on the basic example.&lt;/P&gt;
&lt;P&gt;Let's add a Renderable Series to the main surface of the previous example to demonstrate how sub-surface stacks with it:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;// axes here are required to draw renderable series&lt;BR&gt;sciChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;sciChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [3, 4, 7, 8, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ESeriesType } from 'scichart/types/SeriesType';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [3, 4, 7, 8, 9],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;
&lt;P&gt;IMAGE&lt;/P&gt;
&lt;P&gt;The example shows that the Line Series will be visible underneath the sub-surface as well. This behavior could be changed using &lt;STRONG&gt;I2DSubSurfaceOptions.isTransparent&lt;/STRONG&gt; option passed to &lt;STRONG&gt;SciChartSurface.addSubChart&lt;/STRONG&gt; or via the &lt;STRONG&gt;SciChartSubSurface.isTransparent&lt;/STRONG&gt; property.&lt;/P&gt;
&lt;P&gt;For example, we could update our code as following:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// ...&lt;BR&gt;// Add a sub-chart with non transparent background&lt;BR&gt;const subChartSurface = sciChartSurface.addSubChart({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 0, 0.5, 0.5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isTransparent: false&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ECoordinateMode } from 'scichart/Charting/Visuals/Annotations/AnnotationBase';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 0, 0.5, 0.5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; isTransparent: false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Which will result into the line series and grid-lines being hidden by the sub-surface.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SubCharts_Transparency.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="e59e52ab-d114-4928-8ed0-5172a15b7c0c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="d11cc9cc-62cc-4a05-a893-91175f2426f2" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="b8c8c1be-0354-4518-9b63-a5a09551dcb8" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a2e07572-2c22-4151-83ed-7edd12983b21" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="bdb7b4c2-6817-4c44-bebb-09cdfe036700" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a89292b1-e064-4519-b956-7ced2732f8e8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d11cc9cc-62cc-4a05-a893-91175f2426f2" Status="New Topic" CreatedOn="2023-01-10T17:26:56.3242999Z" ModifiedOn="2023-01-10T18:51:23.0070489Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SubChartPositioning" BuildFlags="">
                <Title m="2023-01-10T17:27:08.5637467Z">SubCharts Positioning</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-10T18:51:11.653872Z">&lt;P&gt;There are several modes that can be used to position a sub-surface, they are defined in the &lt;STRONG&gt;ECoordinateMode&lt;/STRONG&gt; enum. &lt;/P&gt;
&lt;P&gt;By default, sub-surfaces use&lt;STRONG&gt; ECoordinateMode.Relative&lt;/STRONG&gt; for positioning. To change the coordinate mode use &lt;STRONG&gt;I2DSubSurfaceOptions.coordinateMode&lt;/STRONG&gt; or &lt;STRONG&gt;SciChartSubSurface.coordinateMode&lt;/STRONG&gt; property. &lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note ECoordinateMode.DataValue require axes to be present on the main surface and that they are specified as parent axes of the sub-surface.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;So we can update our basic example as following:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ECoordinateMode } from 'scichart/Charting/Visuals/Annotations/AnnotationBase';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const subChartSurface = sciChartSurface.addSubChart({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; coordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 5, 4, 3),&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { ECoordinateMode } from 'scichart/Charting/Visuals/Annotations/AnnotationBase';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; coordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 5, 4, 3),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This places a chart-within-a-chart at a specific DataValue. &lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SubCharts_DataValueCoordinateMode.png"&gt;&lt;/P&gt;
&lt;P&gt;Next let's look at the case where we have a custom axis id or multiple axes on main surface. &lt;/P&gt;
&lt;P&gt;Since positioning with &lt;STRONG&gt;ECoordinateMode.DataValue&lt;/STRONG&gt; depends on the axis visible ranges, we will have to specify which axes should be used for sub-surface position calculation.&lt;/P&gt;
&lt;P&gt;To do this we can pass &lt;STRONG&gt;I2DSubSurfaceOptions.parentXAxisId&lt;/STRONG&gt; / &lt;STRONG&gt;I2DSubSurfaceOptions.parentYAxisId&lt;/STRONG&gt; via options or use &lt;STRONG&gt;SciChartSubSurface.parentXAxisId&lt;/STRONG&gt; / &lt;STRONG&gt;SciChartSubSurface.parentYAxisId&lt;/STRONG&gt; properties. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(divElementId);&lt;/P&gt;
&lt;P&gt;// define multiple X and Y Axes&lt;BR&gt;const mainSurfaceXAxis1 = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceXAxis1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'X Axis 1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 10),&lt;BR&gt;});&lt;BR&gt;const mainSurfaceXAxis2 = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceXAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'X Axis 2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(-5, 5),&lt;BR&gt;});&lt;BR&gt;const mainSurfaceYAxis1 = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceYAxis1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Y Axis 1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 10),&lt;BR&gt;});&lt;BR&gt;const mainSurfaceYAxis2 = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceYAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Y Axis 2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(-5, 5),&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(mainSurfaceXAxis1, mainSurfaceXAxis2);&lt;BR&gt;sciChartSurface.yAxes.add(mainSurfaceYAxis1, mainSurfaceYAxis2);&lt;/P&gt;
&lt;P&gt;// create a sub-surface positioned accordingly to coordinates on mainSurfaceXAxis2 and mainSurfaceYAxis2&lt;BR&gt;const subChartSurface = sciChartSurface.addSubChart({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; coordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; parentXAxisId: mainSurfaceXAxis2.id,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; parentYAxisId: mainSurfaceYAxis2.id,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 5, 4, 3),&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;subChartSurface.xAxes.add(new NumericAxis(wasmContext));&lt;BR&gt;subChartSurface.yAxes.add(new NumericAxis(wasmContext));&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { NumberRange } from 'scichart/Core/NumberRange';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // define multiple X and Y Axes&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxes: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceXAxis1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'X Axis 1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 10),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceXAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'X Axis 2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(-5, 5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxes: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceYAxis1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Y Axis 1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 10),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: 'mainSurfaceYAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisTitle: 'Y Axis 2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(-5, 5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a sub-surface positioned accordingly to coordinates on mainSurfaceXAxis2 and mainSurfaceYAxis2&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; coordinateMode: ECoordinateMode.DataValue,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; parentXAxisId: 'mainSurfaceXAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; parentYAxisId: 'mainSurfaceYAxis2',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 5, 4, 3),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;STRONG&gt;TODO IMAGE REQUIRED&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;Updating SubChart Position&lt;/H2&gt;
&lt;P&gt;SciChart allows to change a sub-surface position dynamically using the &lt;STRONG&gt;SciChartSubSurface.subPosition&lt;/STRONG&gt; property. &lt;/P&gt;
&lt;P&gt;Let's demonstrate this by updating the coordinate mode and subPosition of the sub-chart from previous section&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// modify sub-chart position&lt;BR&gt;subChartSurface.coordinateMode = ECoordinateMode.Pixel;&lt;BR&gt;subChartSurface.subPosition = new Rect(100, 100, 200, 200);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// get the sub-chart surface from collection&lt;BR&gt;const [subChartSurface] = sciChartSurface.subCharts;&lt;/P&gt;
&lt;P&gt;// modify sub-chart position&lt;BR&gt;subChartSurface.coordinateMode = ECoordinateMode.Pixel;&lt;BR&gt;subChartSurface.subPosition = new Rect(100, 100, 200, 200);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will move and resize the Sub Chart:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SubCharts_UpdatedPosition.png"&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="a18df998-8a82-43f0-b003-96cf54e1e213" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a2e07572-2c22-4151-83ed-7edd12983b21" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="3d1c5e71-27b9-458c-9aec-253f2f2ddb92" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a89292b1-e064-4519-b956-7ced2732f8e8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a2e07572-2c22-4151-83ed-7edd12983b21" Status="New Topic" CreatedOn="2023-01-10T17:27:25.1228252Z" ModifiedOn="2023-01-10T19:05:09.5428209Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SubChartsHtmlContainer" BuildFlags="">
                <Title m="2023-01-10T17:27:32.4452289Z">SubCharts Html Container</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-10T19:05:06.3310175Z">&lt;P&gt;Another feature of the SubChartsAPI is an ability to add custom HTML content around a sub-chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/SubCharts_CustomHtml.png"&gt;&lt;/P&gt;
&lt;P&gt;This is achieved by composing following required HTML elements: &lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;EM&gt;chart-container -&lt;/EM&gt;&amp;nbsp;the outermost element that holds a main chart and custom html for sub-charts.
&lt;LI&gt;&lt;EM&gt;scichart-root-element&lt;/EM&gt; - the element used to create the main surface. 
&lt;LI&gt;&lt;EM&gt;sub-chart-container&lt;/EM&gt; - the element which will be displayed at the sub-surface position. It will have the sub-surface and custom html inside; more sub-chart containers could be added if there are many sub-charts. 
&lt;LI&gt;&lt;EM&gt;chart-html-section&lt;/EM&gt; - the element which will hold the actual custom HTML content; sections are placed to the sides of a sub-surface accordingly to their class names: left-section, right-section, top-section, bottom-section.&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note:&lt;/STRONG&gt; Also it is important for those elements to have appropriate CSS styles to be positioned properly.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here is the setup required for the example: We will start from adding HTML markup which corresponds to the descriptions above:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;subcharts-html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;div class="chart-container"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root-1" class="scichart-root-element"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the div where a custom HTML elements could reside, its size and position will be managed by SciChartSurface --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="sub-chart-container-id-1" class="sub-chart-container"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div class="chart-html-section left-section"&amp;gt;A left section of the sub-chart.&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div class="chart-html-section right-section"&amp;gt;Right Section&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div class="chart-html-section top-section"&amp;gt;Top Section&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div class="chart-html-section bottom-section"&amp;gt;Bottom Section&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;BR&gt;&amp;lt;/div&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Where the CSS class definitions are as follows: &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;subcharts-CSS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;CSS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;.chart-container {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: relative;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; max-width: 1080px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; max-height: 720px;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.scichart-root-element {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: relative;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 100%;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 100%;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.sub-chart-container {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: absolute;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.chart-html-section {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; pointer-events: all;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: absolute;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.left-section {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 100px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 100%;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; background-color: rgba(212, 245, 66, 0.5);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.right-section {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; top: 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; right: 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: 100px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 100%;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; background-color: rgba(226, 78, 14, 0.5);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.top-section {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; top: 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: calc(100% - 200px);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 50px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: absolute;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; left: 100px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; background-color: rgba(236, 66, 245, 0.5);&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;.bottom-section {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; bottom: 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; width: calc(100% - 200px);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; height: 50px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: absolute;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; left: 100px;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; background-color: rgba(66, 245, 224, 0.5);&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now let's update the chart setup from the basic example and specify that we want to use a custom HTML content container.&lt;/P&gt;
&lt;P&gt;For this we will pass the id of the container via &lt;STRONG&gt;I2DSubSurfaceOptions.subChartContainerId&lt;/STRONG&gt; property. So, in this case &lt;STRONG&gt;subChartDivElementId&lt;/STRONG&gt; is &lt;STRONG&gt;"sub-chart-container-id-1&lt;/STRONG&gt;" Also we can specify class names that will identify the sections of the container.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Add a sub-chart to the main surface&lt;BR&gt;const subChartSurface = sciChartSurface.addSubChart({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 0, 0.5, 0.5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isTransparent: false,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subChartContainerId: subChartDivElementId,&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// optionally specify class names of section elements within the sub-chart container&lt;BR&gt;subChartSurface.topSectionClass = 'top-section';&lt;BR&gt;subChartSurface.leftSectionClass = 'left-section';&lt;BR&gt;subChartSurface.bottomSectionClass = 'bottom-section';&lt;BR&gt;subChartSurface.rightSectionClass = 'right-section';&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const { wasmContext, sciChartSurface } = await chartBuilder.build2DChart(divElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 0, 0.5, 0.5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; subChartContainerId: subChartContainer,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ],&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const [subChartSurface] = sciChartSurface.subCharts;&lt;/P&gt;
&lt;P&gt;// specify class names of section elements within the sub-chart container&lt;BR&gt;subChartSurface.topSectionClass = 'top-section';&lt;BR&gt;subChartSurface.leftSectionClass = 'left-section';&lt;BR&gt;subChartSurface.bottomSectionClass = 'bottom-section';&lt;BR&gt;subChartSurface.rightSectionClass = 'right-section';&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;As a result the container will be drawn with the position and sizes specified when creating the sub-surface, while the sub-surface itself will shrink accordingly to the space occupied by the custom content sections. &lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt; left-section, right-section, top-section, bottom-section are the default values used for the class names of sections.&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Alternatively, we can pass a reference to the sub-chart container element. For example, if we have the reference: &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Get subchart container&lt;BR&gt;const subChartContainer = document.getElementById(subChartDivElementId);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we can simply pass it instead of the ID:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;const subChartSurface = sciChartSurface.addSubChart({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Rect(0, 0, 0.5, 0.5),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subChartContainerId: subChartContainer,&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;EM&gt;&lt;STRONG&gt;Note&lt;/STRONG&gt;: Also, sometimes, passing an id of HTML element may not work properly (e.g while using Shadow DOM, or having multiple elements with the same id).&lt;/EM&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="da81a1be-0249-4129-9094-37a46795d37a" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="a89292b1-e064-4519-b956-7ced2732f8e8" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="a89292b1-e064-4519-b956-7ced2732f8e8" Status="New Topic" CreatedOn="2023-01-10T17:27:39.2669062Z" ModifiedOn="2023-01-10T19:13:29.9920658Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="SubChartsWorkedExample10x10Grid" BuildFlags="">
                <Title m="2023-01-10T17:28:16.3561402Z">Worked Example: Using SubCharts to create a Large Dashboard</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-01-10T19:13:29.9520076Z">&lt;P&gt;SubCharts API gives an ability to create multiple charts while providing a great rendering performance. All the charts on a SubChart use a single, shared WebGL context. This means 100s of charts can be placed on screen and update very fast. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;SciChart supports unlimited charts on a page at different locations in the HTML&amp;nbsp;DOM via our innovative, Shared WebGL context technology. See the section on&amp;nbsp;&lt;A href="6fec8d55-2d62-4262-ba23-beca67cfbb06"&gt;SciChartSurface.create() vs. createSingle()&lt;/A&gt; for more background information about WebGL context limits.&lt;/P&gt;
&lt;P&gt;The following SubCharts method provides a higher-performance way of creating large grids&amp;nbsp;of charts&amp;nbsp;in similar locations.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In this section we will show how to generate a 10x10 grid of sub-charts to demonstrate the abilities of the SubCharts API.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/SubCharts_MultipleCharts.png"&gt;
&lt;DIV align=left&gt;&amp;nbsp;&lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { SciChartSurface } from 'scichart/Charting/Visuals/SciChartSurface';&lt;BR&gt;import { Rect } from 'scichart/Core/Rect';&lt;BR&gt;import { Thickness } from 'scichart/Core/Thickness';&lt;BR&gt;import { NumericAxis } from 'scichart/Charting/Visuals/Axis/NumericAxis';&lt;BR&gt;import { FastLineRenderableSeries } from 'scichart/Charting/Visuals/RenderableSeries/FastLineRenderableSeries';&lt;BR&gt;import { XyDataSeries } from 'scichart/Charting/Model/XyDataSeries';&lt;BR&gt;import { ZoomPanModifier } from 'scichart/Charting/ChartModifiers/ZoomPanModifier';&lt;BR&gt;import { MouseWheelZoomModifier } from 'scichart/Charting/ChartModifiers/MouseWheelZoomModifier';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(rootDivElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; padding: Thickness.fromNumber(0),&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;for (let subChartIndex = 0; subChartIndex &amp;lt; subChartsNumber; ++subChartIndex) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { rowIndex, columnIndex } = getSubChartPositionIndexes(subChartIndex, columnsNumber);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = 1 / columnsNumber;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = 1 / rowsNumber;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const position = new Rect(columnIndex * width, rowIndex * height, width, height);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const subChartOptions: I2DSubSurfaceOptions = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; subChartPadding: Thickness.fromNumber(10),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: `subChart-${subChartIndex}`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; };&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const subSurface = sciChartSurface.addSubChart(subChartOptions);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subSurface.xAxes.add(new NumericAxis(wasmContext, { isVisible: false }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subSurface.yAxes.add(new NumericAxis(wasmContext, { isVisible: false }));&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subSurface.renderableSeries.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, { containsNaN: false, isSorted: true, ...getData(0, 1000) }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: '#44C8F1',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; strokeThickness: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subSurface.chartModifiers.add(new ZoomPanModifier(), new MouseWheelZoomModifier())&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JSON-Builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { Rect } from 'scichart/Core/Rect';&lt;BR&gt;import { EChart2DModifierType } from 'scichart/types/ChartModifierType';&lt;BR&gt;import { ESeriesType } from 'scichart/types/SeriesType';&lt;BR&gt;import { chartBuilder } from 'scichart/Builder/chartBuilder';&lt;BR&gt;import { Thickness } from 'scichart/Core/Thickness';&lt;BR&gt;import { EAxisType } from 'scichart/types/AxisType';&lt;/P&gt;
&lt;P&gt;// ...&lt;/P&gt;
&lt;P&gt;const subChartsNumber = 100;&lt;BR&gt;let columnsNumber = 10;&lt;BR&gt;let rowsNumber = 10;&lt;/P&gt;
&lt;P&gt;const modifiers = [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.ZoomPan },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; { type: EChart2DModifierType.MouseWheelZoom },&lt;BR&gt;];&lt;/P&gt;
&lt;P&gt;const subCharts = [];&lt;BR&gt;for (let subChartIndex = 0; subChartIndex &amp;lt; subChartsNumber; ++subChartIndex) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { rowIndex, columnIndex } = getSubChartPositionIndexes(subChartIndex, columnsNumber);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const width = 1 / columnsNumber;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const height = 1 / rowsNumber;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const position = new Rect(columnIndex * width, rowIndex * height, width, height);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts.push({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; id: `subChart-${subChartIndex}`,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; subChartPadding: Thickness.fromNumber(10),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; position,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xAxes: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { isVisible: false },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yAxes: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: EAxisType.NumericAxis,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { isVisible: false },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; series: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type: ESeriesType.LineSeries,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xyData: { containsNaN: false, isSorted: true, ...getData(0, 1000) },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; options: { stroke: '#44C8F1', strokeThickness: 3 },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; modifiers,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;const { sciChartSurface, wasmContext } = await chartBuilder.build2DChart(rootDivElementId, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface: { padding: Thickness.fromNumber(0) },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subCharts,&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Where &lt;STRONG&gt;getSubChartPositionIndexes&lt;/STRONG&gt; and &lt;STRONG&gt;getData&lt;/STRONG&gt; are helper functions.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;STRONG&gt;getSubChartPositionIndexes&lt;/STRONG&gt; is used to calculate where a sub-chart should be placed on the grid&lt;/DIV&gt;
&lt;LI&gt;
&lt;DIV&gt;&lt;STRONG&gt;getData&lt;/STRONG&gt; - to generate X and Y values. &lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;For example, in this case: &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;function getSubChartPositionIndexes(chartIndex, columnNumber) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rowIndex = Math.floor(chartIndex / columnNumber);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnIndex = chartIndex % columnNumber;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { rowIndex, columnIndex };&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;function getData(shift, points) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from(Array(points).keys());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const harmonics = 20;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const arr = Array(harmonics).fill(1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = getSpectrum(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; points,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arr.map((_, i) =&amp;gt; i / 50 + (i / 50) * Math.random() * 0.05),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arr,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; shift&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { xValues, yValues };&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;function getSpectrum(points, frequencies, amplitudes, shift) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const values = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; points; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let y = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; frequencies.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y = y + amplitudes[i] * Math.sin((x + shift) * frequencies[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; values.push(y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return values;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code Section" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;TS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;function getSubChartPositionIndexes(chartIndex: number, columnNumber: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const rowIndex = Math.floor(chartIndex / columnNumber);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const columnIndex = chartIndex % columnNumber;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { rowIndex, columnIndex };&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;function getData(shift: number, points: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xValues = Array.from(Array(points).keys());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const harmonics = 20;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const arr = Array(harmonics).fill(1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yValues = getSpectrum(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; points,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arr.map((_, i) =&amp;gt; i / 50 + (i / 50) * Math.random() * 0.05),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; arr,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; shift&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; );&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return { xValues, yValues };&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;function getSpectrum(points: number, frequencies: number[], amplitudes: number[], shift: number) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const values: number[] = [];&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let x = 0; x &amp;lt; points; x++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; let y = 0;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (let i = 0; i &amp;lt; frequencies.length; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; y = y + amplitudes[i] * Math.sin((x + shift) * frequencies[i]);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; values.push(y);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return values;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Additionally we can synchronize the sub-charts to display the same X visible range when zooming or panning:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Subcharts sync&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;sciChartSurface.subCharts.forEach((subSurface) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // synchronise x ranges&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; subSurface.xAxes.get(0).visibleRangeChanged.subscribe((data) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChartSurface.subCharts.forEach((otherSubSurface) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (subSurface !== otherSubSurface) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; otherSubSurface.xAxes.get(0).visibleRange = data.visibleRange;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;});&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="70ebdcd2-8e06-43a1-9ed4-bf5ffa4bf074" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="e7d484ca-b11c-424e-9d88-0afbabc17bde" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="02ea2016-3a2c-4a85-b2e4-5a273bf0936e" AutoIndex="false">
            <Caption m="2023-01-07T19:21:31.3139063Z">DataLabels API</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225" Status="New Topic" CreatedOn="2022-08-16T15:56:02.4169013Z" ModifiedOn="2023-07-07T20:24:57.4200676Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="AddingDataLabels" BuildFlags="">
                <Title m="2023-01-07T19:26:48.6150907Z">Adding DataLabels to a Chart Series</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-07T20:24:57.4200676Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;&lt;/A&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;The DataLabels API&lt;/H2&gt;
&lt;P&gt;Each RenderableSeries as a&amp;nbsp;&lt;SPAN style="COLOR: rgb(255,0,0)"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#datalabelprovider"&gt;dataLabelProvider&lt;/A&gt;&lt;/SPAN&gt; property. Many also accept Data Label configuration via&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ibaserenderableseriesoptions.html#datalabelprovider"&gt;constructor options&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;These defines whether text labels are rendered for data-points, and the style and positioning of these text labels.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-datalabels&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;&lt;/A&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Adding Data Labels&lt;/H2&gt;
&lt;P&gt;You an configure data labels for almost any series by setting a valid style on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ibaselinerenderableseriesoptions.html#datalabels"&gt;dataLabels property&lt;/A&gt; in the series options:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\BasicExample\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\BasicExample\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/BasicExample/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Standard Label Formatting&lt;/H2&gt;
&lt;P&gt;Datalabels supports the same numeric format and precision options as axis labels. By default the Y-value is printed to the label. The numericFormat option is one of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/enumericformat.html"&gt;ENumericFormat&lt;/A&gt; values.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\BasicLabelFormatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\BasicLabelFormatting\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The precision is now increased to 4 decimal places&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/BasicLabelFormatting/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;DIV align=left&gt;&lt;/DIV&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Data Labels formatting uses similar code to the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;LabelProvider&lt;/A&gt; for axis labels. This means that labels can be formatted as dates, exponents or scientific notation.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="8c0b3ec1-a34e-4f4c-b58e-4ff6074362a0" Status="New Topic" CreatedOn="2023-01-07T19:29:31.9548041Z" ModifiedOn="2023-07-08T08:36:27.8007364Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataLabelsFromMetadata" BuildFlags="">
                <Title m="2023-01-07T19:29:39.2556944Z">Getting Labels from Metadata</Title>
                <ContentsTitle m="2023-01-07T19:42:03.4814979Z">Getting Labels from Metadata</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T08:36:27.8007364Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Formatting a DataLabel using metaDataSelector&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Metadata allows you to assign optional&amp;nbsp;javascript objects to individual x,y datapoints. To learn more about the&amp;nbsp;&lt;A href="8990ef25-dc00-4e2f-a07a-0d4cb1d8dc71"&gt;Metadata API, see here&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;DataLabels support rendering text from metadata as standard. You just need to provide a function to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#metadataselector"&gt;metaDataSelector&lt;/A&gt; option that tells SciChart how to turn your metaData into text.&lt;/P&gt;
&lt;P&gt;Find an example below:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\Metadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\Metadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/Metadata/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Accessing Metadata from getText() and DataLabelState&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#metadataselector"&gt;metaDataSelector&lt;/A&gt;&amp;nbsp;option allows you to return values stored in the metadata of a dataSeries, but what if you wanted to have more complex formatting mixing index, x, y value or the metadata values?&lt;/P&gt;
&lt;P&gt;You can also access metadata via a custom&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#gettext"&gt;DataLabelProvider.getText()&lt;/A&gt; function. This technique is covered in the article Custom DataLabel Formatting. &lt;/P&gt;
&lt;P&gt;Once you've setup a custom formatting function, you can&amp;nbsp;then use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelstate.html#getmetadata"&gt;dataLabelState.getMetaData()&lt;/A&gt; to get the metaData for the current point.&lt;/P&gt;
&lt;P&gt;Here's an example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\MetadataViaGetText\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/MetadataViaGetText/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="6c10b207-c6b8-4550-b2b9-5eda54932801" Status="New Topic" CreatedOn="2023-01-07T19:35:43.1098796Z" ModifiedOn="2023-07-07T21:09:58.02569Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataLabelFormattingAdvanced" BuildFlags="">
                <Title m="2023-01-07T19:35:52.0159451Z">Custom DataLabel Formatting with getText()</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-07T21:09:58.02569Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;In the article&amp;nbsp;&lt;A href="7ded97cf-3870-4fdf-b8b9-b6e74e1d8225"&gt;Adding DataLabels to Chart Series&lt;/A&gt; we showed you how to apply simple formatting rules to change the number of decimal places on Data Labels. What if you needed more complex Data Label formatting rules? Enter custom label formatting...&lt;/P&gt;
&lt;H2&gt;Custom Label Formatting&lt;/H2&gt;
&lt;P&gt;To take full control of the label text, override the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#gettext"&gt;dataLabelProvider.getText()&lt;/A&gt; function on the series&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/baserenderableseries.html#datalabelprovider"&gt;renderableSeries.dataLabelProvider&lt;/A&gt;.&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#gettext"&gt;getText&lt;/A&gt; has a single parameter of type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelstate.html"&gt;DataLabelState&lt;/A&gt;. This has a number of helper functions that allow you to get the x and y values and coordinates without having to worry about which way the axes run or if you are using a vertical chart.&lt;/P&gt;
&lt;P&gt;This example outputs both X and Y Values. DataLabels are rendered using the new native text system, so they support multiline using \n for newlines. The dataLabels style option has &lt;STRONG&gt;multiLineAlignment&lt;/STRONG&gt; and &lt;STRONG&gt;lineSpacing&lt;/STRONG&gt; properties for controlling multiline text.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\GetText\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;json-builder&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;jS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\GetText\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in custom text formatting output where a multiline label including index, [x: xValue, y: yValue] are drawn at each label:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/GetText/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelstate.html"&gt;DataLabelState&lt;/A&gt; type for what data is passed into the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#gettext"&gt;getText()&lt;/A&gt; function for each label&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="57b160a9-3476-4f80-89aa-ff7182023873" Status="New Topic" CreatedOn="2023-01-07T19:44:17.6040827Z" ModifiedOn="2023-07-08T12:28:54.3453984Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataLabelPositioning" BuildFlags="">
                <Title m="2023-07-07T21:16:12.5080755Z">Data Label Positioning</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T12:28:54.3444002Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Label Positioning&lt;/H2&gt;
&lt;P&gt;The text positioning rules vary a little for different series. For line series the default behaviour is to place the label above the line if it is moving down, and below if it is moving up. This avoids the text overlapping the line in many situations, but often you will want to take more control.&lt;/P&gt;
&lt;P&gt;You can disable the default behviour by setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineseriesdatalabelprovider.html#abovebelow"&gt;LineSeriesDataLabelProvider.aboveBelow&lt;/A&gt; false, then you can make use of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineseriesdatalabelprovider.html#horizontaltextpositionproperty"&gt;horizontalTextPosition&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineseriesdatalabelprovider.html#verticaltextpositionproperty"&gt;verticalTextPosition&lt;/A&gt; properties along with the padding on the style.&lt;/P&gt;
&lt;P&gt;The position properties are where the text should be relative to the data point, so &lt;EM&gt;horizontalTextPosition: EHorizontalTextPosition.Left&lt;/EM&gt; means place the text to the left of the point (ie the text is anchored on the right.) This example also demonstrates the use of the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatalabelskipmode.html#skipifsame"&gt;SkipIfSame&lt;/A&gt; option for&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatalabelskipmode.html"&gt;skipMode&lt;/A&gt; on a digital line. The other skipMode options are discussed in the section on 'Labels for many points' below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\Positioning\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/Positioning/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Positioning Rules for Data Labels&lt;/H2&gt;
&lt;P&gt;This table summarises the built in positioning behaviour for the various series types.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE class=code-line data-line="153"&gt;
&lt;THEAD class=code-line style="POSITION: relative" data-line="153"&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="153"&gt;
&lt;TH style="BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Series Type&lt;/TH&gt;
&lt;TH style="BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;DataLabelProvider type&lt;/TH&gt;
&lt;TH style="BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Positioning rules&lt;/TH&gt;
&lt;TH style="BORDER-BOTTOM: 1px solid; PADDING-BOTTOM: 5px; TEXT-ALIGN: left; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Type specific options&lt;/TH&gt;&lt;/TR&gt;&lt;/THEAD&gt;
&lt;TBODY class=code-line style="POSITION: relative" data-line="155"&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="155"&gt;
&lt;TD style="PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Line&lt;/TD&gt;
&lt;TD style="PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/lineseriesdatalabelprovider.html"&gt;LineSeriesDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;If &lt;STRONG&gt;aboveBelow&lt;/STRONG&gt; is true (default), place the label above the line if it is moving down, and below if it is moving up. Otherwise use &lt;STRONG&gt;horizontalTextPosition&lt;/STRONG&gt; and &lt;STRONG&gt;verticalTextPosition&lt;/STRONG&gt; (default: Right, Above)&lt;/TD&gt;
&lt;TD style="PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;aboveBelow: boolean&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="156"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Column / Impulse&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/columnseriesdatalabelprovider.html"&gt;ColumnSeriesDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Label is centered and outside the column (above for columns above the zeroLine, below if below). &lt;STRONG&gt;positionMode&lt;/STRONG&gt; can be set to Inside to reverse this, or to position to use the value of the &lt;STRONG&gt;verticalTextPosition&lt;/STRONG&gt; (or &lt;STRONG&gt;horizontalTextPosition&lt;/STRONG&gt; for a vertical chart) property.&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;positionMode:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/ecolumndatalabelposition.html"&gt;EColumnDataLabelPosition&lt;/A&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="157"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Bubble&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bubbleseriesdatalabelprovider.html"&gt;BubbleSeriesDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Label is centered within the bubble. If &lt;STRONG&gt;horizontalTextPosition&lt;/STRONG&gt; or &lt;STRONG&gt;verticalTextPosition&lt;/STRONG&gt; is not Center, label is placed outside the bubble on the specified side&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="158"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Band&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/bandseriesdatalabelprovider.html"&gt;BandSeriesDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;By default, each line of the band has its own label which follow the rules for line series. Set &lt;STRONG&gt;singleLabel&lt;/STRONG&gt; true to render a single label in the middle of the band, containing both y and y1 values.&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;singleLabel: boolean&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="159"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Heatmap&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapdatalabelprovider.html"&gt;HeatmapDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Labels are centered in the cell&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="160"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;NonUniformHeatmap&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/heatmapdatalabelprovider.html"&gt;HeatmapDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Labels are centered in the cell&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="161"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Contours&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/contoursdatalabelprovider.html"&gt;ContoursDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;This places 10 rows of labels on the contour lines. The rows are evenly spaced. Set &lt;STRONG&gt;labelRowCount&lt;/STRONG&gt; to adjust the number of rows&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;labelRowcount: number&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="162"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Text&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/textdatalabelprovider.html"&gt;TextDataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Labels placed above, right of the point. Set &lt;STRONG&gt;calculateTextBounds&lt;/STRONG&gt; false for a performance boost if you are rendering many labels and do not care about their size.&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;calculateTextBounds: boolean&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="163"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;XYScatter&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html"&gt;DataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Labels placed above, right of the point&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="164"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;CandleStick/Ohlc&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html"&gt;DataLabelProvider&lt;/A&gt;&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Labels placed above, right of the close value&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR class=code-line style="POSITION: relative" data-line="165"&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;Stacked Series&lt;/TD&gt;
&lt;TD style="BORDER-TOP: 1px solid; PADDING-BOTTOM: 5px; PADDING-TOP: 5px; PADDING-LEFT: 10px; PADDING-RIGHT: 10px"&gt;DataLabels not yet supported&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;BR class=Apple-interchange-newline&gt;
&lt;H2&gt;Custom Positioning&lt;/H2&gt;
&lt;P&gt;To take full control of label positioning, override the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#getposition"&gt;dataLabelProvider.getPosition()&lt;/A&gt; function. This takes&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelstate.html"&gt;DataLabelState&lt;/A&gt; and a &lt;STRONG&gt;TSRTextBounds&lt;/STRONG&gt; (a WebAssembly exported type) which describes the size of the label.&lt;/P&gt;
&lt;P&gt;It should return a Point { x: number, y: number } which will be the left, baseline point for the label. See &lt;STRONG&gt;Native Text Api&lt;/STRONG&gt; for details on &lt;STRONG&gt;TSRTextBounds&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Positioning Labels from Multiple Series&lt;/H2&gt;
&lt;P&gt;Normally, the layout for dataLabels is done per series, so labels from different series could overlap. If you want to prevent this or want to do some other adjustment of label positioning after all labels for all series have been generated, but before they are drawn, you can create an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/idatalabellayoutmanager.html"&gt;IDataLabelLayoutManager&lt;/A&gt; and attach it to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#datalabellayoutmanager"&gt;sciChartSurface.dataLabelLayoutManager&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;This has a single method,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/idatalabellayoutmanager.html#performtextlayout"&gt;performTextLayout&lt;/A&gt; where you can access and update the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#datalabels"&gt;dataLabelProvider.dataLabels&lt;/A&gt; array on all the series.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Although you have access to the full surface and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/renderpassinfo.html"&gt;renderPassInfo&lt;/A&gt; in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/idatalabellayoutmanager.html#performtextlayout"&gt;performTextLayout&lt;/A&gt;&amp;nbsp;function, be aware that this is run at the very end of the render process, so only changes to the contents of the dataLabels arrays will have an effect on what is drawn. Updating other things on the surface from this function is not advised.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The example below hides labels from the second series which overlap those on the first.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\GlobalLayout\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/GlobalLayout/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Above: Text layout is overridden to take into account label bounds across series. For each label, if the label overlaps an existing label (or is within 2 pixels of the edge of an existing label), skip drawing the label.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="35a4bfc3-eb1d-4c83-a168-49b68f225ff4" Status="New Topic" CreatedOn="2023-01-07T19:48:04.3315485Z" ModifiedOn="2023-07-07T21:49:40.3084124Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataLabelColouring" BuildFlags="">
                <Title m="2023-01-07T19:48:18.128374Z">Data Label Colouring</Title>
                <ContentsTitle m="2023-07-07T21:37:47.1950944Z">Data Label Colouring</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-07T21:49:40.3084124Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Label Colouring&lt;/H2&gt;
&lt;P&gt;The color property on the dataLabels option sets the color for all labels, but you can do per-label coloring by overriding the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#getcolor"&gt;getColor()&lt;/A&gt; function on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html"&gt;dataLabelProvider&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;This function hsa to return the integer color codes used by SciChart's engine, so you need to use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#parsecolortouintargb"&gt;parseColorToUIntArgb&lt;/A&gt; helper function to convert from html colors. It is a good idea to pre-calculate integer colour codes, rather than compute them each time labels are drawn, as in the example below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\DataLabels\Coloring\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/DataLabels/Coloring/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b0932024-2071-49b7-be0a-d6a9a37ec6d1" Status="New Topic" CreatedOn="2023-01-07T19:51:32.3681967Z" ModifiedOn="2023-07-08T09:52:22.2259444Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="DataLabelCulling" BuildFlags="">
                <Title m="2023-01-07T19:51:39.9173079Z">DataLabel SkipModes and Culling</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-08T09:52:22.2259444Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;New to SciChart.js v3! DataLabels allow per data-point text labels to be drawn on series, or arbitrary text labels at x,y positions on the chart.&lt;/P&gt;
&lt;P&gt;You can see several datalabel examples on the SciChart.js demo:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;The Line Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-column-chart" target=_blank&gt;The Column Chart example&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-chart-color-points-individually-with-paletteprovider" target=_blank&gt;The PaletteProvider example&lt;/A&gt; and 
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-datalabels" target=_blank&gt;The DataLabels demo&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Explore these for some rich examples of how to use this API.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Labels for Many Points&lt;/H2&gt;
&lt;P&gt;SciChart's native text rendering means that it can potentially draw tens of thousands of labels relatively fast, but in practise with many points there is no point drawing so many labels that they become unreadable. SciChart has a number of options for dealing with this. If you really want to show all labels even if they overlap, set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipmode"&gt;skipMode&lt;/A&gt; to &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatalabelskipmode.html"&gt;EDataLabelSkipMode.ShowAll&lt;/A&gt;&lt;/P&gt;
&lt;H3&gt;Hide overlapping labels&lt;/H3&gt;
&lt;P&gt;The default for the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipmode"&gt;skipMode&lt;/A&gt;&amp;nbsp;property is&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatalabelskipmode.html"&gt;EDataLabelSkipMode.SkipIfOverlapPrevious&lt;/A&gt;. This means a label will not be drawn if it would overlap the bounds of the previous label. This means that even if you have 1000 points on a line series, you will only see a few dozen non-overlpping labels (depending on the shape of your data).&lt;/P&gt;
&lt;P&gt;The downside of this is that SciChart has to calculate the text, size and position of every label, and then throw most of them away, which is potentially inefficient. Also, it is often unclear which points on the line are actually being labeled.&amp;nbsp;The alternative to this is to calculate less labels (use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipnumber"&gt;skipNumber&lt;/A&gt;) or to not draw labels at all if there are too many to display (use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#pointgapthreshold"&gt;pointGapThreshold&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#pointcountthreshold"&gt;pointCountThreshold&lt;/A&gt;).&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipmode"&gt;skipMode&lt;/A&gt;&amp;nbsp;also has a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edatalabelskipmode.html"&gt;EDataLabelSkipMode.SkipIfOverlapNext&lt;/A&gt; option. This is useful if you have labels of significantly varying lengths, as it means long labels tend to be skipped in favour of shorter ones.&lt;/P&gt;
&lt;H3&gt;Improve performance with many points using skipNumber&lt;/H3&gt;
&lt;P&gt;Setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipnumber"&gt;skipNumber&lt;/A&gt;&amp;nbsp;greater than 0 will make SciChart skip that many points between each label it generates. The number of labels generated is therefore pointCount / ( skipNumber + 1). You will see performance warnings in the console if more than 80% of labels were skipped.&lt;/P&gt;
&lt;H3&gt;Showing Labels Past a Threshold&lt;/H3&gt;
&lt;P&gt;The alternative is to only show labels when the chart is sufficiently zoomed in so that there are a sensible number of labels to display, or room to show them.&lt;/P&gt;
&lt;H4&gt;pointGapThreshold&lt;/H4&gt;
&lt;P&gt;If your labels are a consistent size and your data is evenly spaced and does not have large y variation (ie it is smooth, not jagged), then setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#pointgapthreshold"&gt;pointGapThreshold&lt;/A&gt;&amp;nbsp;to around 1 will cause labels to appear only when there is room to show them.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#pointgapthreshold"&gt;pointGapThreshold&lt;/A&gt;&amp;nbsp;is the gap between the first points divided by the size of the first label, so 1 means the spacing between points is equal to the label size. Values less than 1 will cause labels to be drawn sooner, but they may overlap. Values greater than 1 mean that you will need to zoom in more, but labels are less likely to overlap.&lt;/P&gt;
&lt;H4&gt;pointCountThreshold&lt;/H4&gt;
&lt;P&gt;If your data is unevenly spaced, is jagged, or your label text has significant variation in width, then&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#pointcountthreshold"&gt;pointCountThreshold&lt;/A&gt;&amp;nbsp;may give more predictable results. It is simply the number of points in view, below which labels will be drawn.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipmode"&gt;skipMode&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#skipnumber"&gt;skipNumber&lt;/A&gt;&amp;nbsp;still apply when these threshold options are set.&lt;/P&gt;
&lt;H4&gt;Custom thresholds&lt;/H4&gt;
&lt;P&gt;If you don't like either of those options, you can write your own threshold by overriding the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#shouldgenerate"&gt;shouldGenerate&lt;/A&gt; function on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html"&gt;dataLabelProvider&lt;/A&gt;. This receives a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelstate.html"&gt;DataLabelState&lt;/A&gt; which will return values for the first label. If&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/datalabelprovider.html#shouldgenerate"&gt;shouldGenerate&lt;/A&gt;&amp;nbsp;returns true, labels will be generated. If false, they will not. Below is the standard implementation of shouldGenerate.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;shouldGenerate example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;public shouldGenerate(state: DataLabelState): boolean {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (state.pointCount &amp;gt; this.pointCountThresholdProperty) return false;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const firstlabel = this.getText(state);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const bounds = getTextBounds(this.webAssemblyContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; state.font.CalculateStringBounds(firstlabel ?? "", bounds, this.style?.lineSpacing ?? 2);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return state.pointGap &amp;gt; bounds.m_fWidth * this.pointGapThreshold;&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
      <TopicCategory Id="9fbddf37-3662-4f08-913b-e9a0952a356e" AutoIndex="false">
        <Caption m="2020-08-03T14:43:23.1665548Z">SciChart JS 3D Charts</Caption>
        <ChildTopicCategories>
          <TopicCategory Id="d9bdbdfa-dc94-4ce6-8f55-f54b9c350f98" AutoIndex="false">
            <Caption m="2020-09-11T17:08:38.7403503Z">Tutorials 3D (JavaScript)</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="1fb26b6a-1169-49bf-8d6a-981425483ff8" Status="New Topic" CreatedOn="2020-09-11T17:10:56.4132953Z" ModifiedOn="2022-10-24T09:21:30.0297598Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="3D Tutorial 01 - Setting up a 3D Chart Project with SciChart.js" BuildFlags="">
                <Title m="2020-09-11T17:22:40.4512952Z">3D Tutorial 01 - Setting up a 3D Chart Project with SciChart.js</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2022-10-24T09:21:30.0297598Z">&lt;H2&gt;Creating a New SciChart.js Project&lt;/H2&gt;
&lt;P&gt;In this tutorial we will create a simple 3D Chart with SciChart.js. We'll show you how to&amp;nbsp;create a new JavaScript project in&amp;nbsp;&lt;A href="https://code.visualstudio.com/" target=_blank&gt;VSCode&lt;/A&gt; and adding SciChart libraries as dependencies to it.&lt;/P&gt;&lt;innovasys:widget type="Movie (YouTube)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Movieid"&gt;PFYpCrZwqwU&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoplay"&gt;False&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Showrelated"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Autoresize"&gt;True&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Width"&gt;640&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Height"&gt;390&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Theme"&gt;dark&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Source code for this tutorial can be found at our&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.Js.Examples" target=_blank&gt;SciChart.Js.Examples Github Repository&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Pre-requisites&lt;/H2&gt;
&lt;H3&gt;VSCode&lt;/H3&gt;
&lt;P&gt;If you haven't done so already go ahead and download VSCode from&amp;nbsp;&lt;A href="https://code.visualstudio.com/"&gt;https://code.visualstudio.com/&lt;/A&gt;. We will be using this for tutorials, but you can equally use&amp;nbsp;&lt;A href="https://www.jetbrains.com/webstorm/" target=_blank&gt;WebStorm&lt;/A&gt;&amp;nbsp;or any other IDE or text editor of your choice.&lt;/P&gt;
&lt;H3&gt;NPM / Node.js&lt;/H3&gt;
&lt;P&gt;You will also need to have npm installed. You can get npm from here:&amp;nbsp;&lt;A href="https://www.npmjs.com/get-npm"&gt;https://www.npmjs.com/get-npm&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Creating the Project&lt;/H2&gt;
&lt;P&gt;Go ahead and open up VSCode and enter the terminal. Create a&amp;nbsp;directory to host your tutorial, and type in the following command.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm init&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Choose defaults, I have named it tutorial1 and I want to use &lt;STRONG&gt;index.js&lt;/STRONG&gt; for my package.json. SciChart.js supports both TypeScript and JavaScript ES6, however for the purposes of these tutorials we're going to be using plain JavaScript.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminit.PNG"&gt;&lt;/P&gt;
&lt;H2&gt;Installing SciChart via npm&lt;/H2&gt;
&lt;P&gt;SciChart.js is hosted on npm.org, so to install the package to your project simply use the command npm install scichart.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm install scichart&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminstallscichart.png"&gt;&lt;/P&gt;
&lt;H2&gt;Configuring Webpack&lt;/H2&gt;
&lt;P&gt;We're going to use webpack to make the smallest possible node.js JavaScript application for our tutorials. To install this, add the following commands.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Initialising an npm project&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;gt; npm install --save-dev webpack&lt;BR&gt;&amp;gt; npm install --save-dev webpack-dev-server&lt;BR&gt;&amp;gt; npm install --save-dev webpack-cli&lt;BR&gt;&amp;gt; npm install --save-dev copy-webpack-plugin&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-npminstallwebpack.png"&gt;&lt;/P&gt;
&lt;H2&gt;Add Scripts to Package.json&lt;/H2&gt;
&lt;P&gt;By our our package.json should look something&amp;nbsp;like this.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Package.json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;{&lt;BR&gt;&amp;nbsp; "name": "tutorial1",&lt;BR&gt;&amp;nbsp; "version": "1.0.0",&lt;BR&gt;&amp;nbsp; "description": "",&lt;BR&gt;&amp;nbsp; "main": "index.js",&lt;BR&gt;&amp;nbsp; "scripts": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "test": "echo \"Error: no test specified\" &amp;amp;&amp;amp; exit 1",&lt;BR&gt;&amp;nbsp; },&lt;BR&gt;&amp;nbsp; "author": "",&lt;BR&gt;&amp;nbsp; "license": "ISC",&lt;BR&gt;&amp;nbsp; "dependencies": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "scichart": "^2.2.0"&lt;BR&gt;&amp;nbsp; },&lt;BR&gt;&amp;nbsp; "devDependencies": {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "copy-webpack-plugin": "^6.0.3",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack": "^4.44.1",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack-cli": "^3.3.12",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "webpack-dev-server": "^3.11.0"&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Let's add a few more items to it so we can build the application.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Package.json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;...&lt;BR&gt;&amp;nbsp; "scripts": {&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "build": "webpack",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; "start": "webpack-dev-server"&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp; },&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Your package.json should look like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-packagejson.png"&gt;&lt;/P&gt;
&lt;H2&gt;Creating webpack.config.js&lt;/H2&gt;
&lt;P&gt;Add a file to your project called webpack.config.js, and paste in the following code.&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;Note, the following highlighted&amp;nbsp;lines are required to copy SciChart's WebAssembly files to your build directory.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Package.json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;json&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;const path = require("path");&lt;BR&gt;const CopyPlugin = require("copy-webpack-plugin");&lt;BR&gt;const webpack = require("webpack");&lt;/P&gt;
&lt;P&gt;module.exports = {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; mode: "production",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; entry: "./src/index.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; module: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; rules: []&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; resolve: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; extensions: [".js"]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; output: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; filename: "bundle.js",&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; path: path.resolve(__dirname, "build")&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; plugins: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new CopyPlugin({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; patterns: [&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "src/index.html", to: "" },&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "node_modules/scichart3d/_wasm/scichart3d.data", to: "" },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; { from: "node_modules/scichart3d/_wasm/scichart3d.wasm", to: "" }&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; new webpack.IgnorePlugin(/(fs)/)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ]&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Your project with webpack.config.js should look like this. In particular, &lt;STRONG&gt;notice the two lines which copy scichart3d.data and scichart3d.wasm to the output folder&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-webpack-config-js.png"&gt;&lt;/P&gt;
&lt;H2&gt;Creating Index.js / Index.html&lt;/H2&gt;
&lt;P&gt;We're going to create a simple Index.js / Index.html. Create and add these two files to the root of your project, and add this code.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;src/index.html&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;HTML&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;SciChart.js Tutorial 1&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body { font-family: 'Arial'}&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Hello SciChart.js world!&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;In this example we setup webpack, scichart and create a simple 3d chart with an X,Y and Z axis&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&lt;STRONG&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px;"&amp;gt;&amp;lt;/div&amp;gt;&lt;/STRONG&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;SciChart.js simply needs a Div in your application to host the chart. We've added one above and given it the id=scichart-root.&lt;/P&gt;
&lt;P&gt;Next we're going to add index.js, where we initialize and create a&amp;nbsp;&lt;STRONG&gt;SciChart3DSurface&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;src/index.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChart3DSurface} from "scichart3D/charting/Visuals/SciChart3DSurface";&lt;BR&gt;import {NumericAxis3D} from "scichart3D/charting/Visuals/Axis/NumericAxis3D";&lt;/P&gt;
&lt;P&gt;async function initSciChart() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create the SciChart3DSurface in the div 'scichart-root'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // The sciChart3DSurface, and webassembly context 'wasmContext' are paired. This wasmContext&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // instance must be passed to other types that exist on the same surface.&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const {sciChart3DSurface, wasmContext} = await SciChart3DSurface.create("scichart-root");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Create an X,Y Axis and add to the chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const xAxis = new NumericAxis3D(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const yAxis = new NumericAxis3D(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const zAxis = new NumericAxis3D(wasmContext);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChart3DSurface.xAxis = xAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChart3DSurface.yAxis = yAxis;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChart3DSurface.zAxis = zAxis;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // That's it! You just created your first SciChart3DSurface!&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;initSciChart();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The SciChart.js API is pretty simple. In the code sample above we declare an instance of a SciChart3DSurface like this.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring a SciChartSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// the div ID where you want to host the chart&lt;BR&gt;const divId = "scichart-root";&lt;BR&gt;&lt;BR&gt;// Create the SciChart3DSurface instance&lt;BR&gt;const {sciChart3DSurface, wasmContext} = await SciChart3DSurface.create("scichart-root");&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This function returns a&amp;nbsp;&lt;STRONG&gt;SciChart3DSurface&lt;/STRONG&gt; instance and a wasmContext (WebAssembly Context). You will need this context for all chart parts related to this chart. &lt;STRONG&gt;Don't share the wasmContext between charts!&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Next, we add an X,Y,Z Axis. We do this by creating several &lt;STRONG&gt;NumericAxis3D&lt;/STRONG&gt;, and setting them on the &lt;STRONG&gt;SciChartSurface.xAxis, yAxis&lt;/STRONG&gt;&amp;nbsp;and &lt;STRONG&gt;SciChartSurface.zAxis&lt;/STRONG&gt; collections.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Declaring a SciChart3DSurface&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create an X,Y Axis and add to the chart&lt;BR&gt;const xAxis = new NumericAxis3D(wasmContext);&lt;BR&gt;const yAxis = new NumericAxis3D(wasmContext);&lt;BR&gt;const zAxis = new NumericAxis3D(wasmContext);&lt;/P&gt;
&lt;P&gt;sciChart3DSurface.xAxis = xAxis;&lt;BR&gt;sciChart3DSurface.yAxis = yAxis;&lt;BR&gt;sciChart3DSurface.zAxis = zAxis;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;That's it! You have just created your first SciChart3DSurface using SciChart.js!&lt;/P&gt;
&lt;H2&gt;Building and Running the App&lt;/H2&gt;
&lt;P&gt;Ok now that we've set that all up, building and running should be pretty easy!&lt;/P&gt;
&lt;P&gt;In the command line, simply type the following command.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Running the Tutorial&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Command line&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;gt; npm start&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now visit &lt;A href="http://localhost:8080"&gt;http://localhost:8080&lt;/A&gt; in your browser and voila! You should see a SciChart.js Chart!&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Tutorial-01-scichart-js.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;A Note on Licensing SciChart.&lt;/STRONG&gt;&lt;BR&gt;&lt;BR&gt;The SciChart.js control comes with a fully-functional 30-day trial. You will need to apply a trial license to the applications that you build, including the tutorial.&lt;/P&gt;
&lt;P&gt;A license key can be applied following the instructions at &lt;A href="https://www.scichart.com/licensing-scichart-javascript" target=_blank&gt;www.scichart.com/licensing-scichart-javascript&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="66c2a477-19b7-4c68-9aea-10c01c54774f" Status="New Topic" CreatedOn="2019-08-30T13:01:32.6708223Z" ModifiedOn="2020-09-11T17:11:48.7905449Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial  01 - Charting Concepts" BuildFlags="">
                <Title m="2020-09-11T17:11:48.7875532Z">OLD 3D Tutorial  01 - Charting Concepts</Title>
                <ContentsTitle m="2019-09-23T16:36:08.8189086Z">Charting Concepts</ContentsTitle>
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T18:07:25.7951881Z">&lt;H2&gt;Understanding Charts, Basic Definitions&lt;/H2&gt;
&lt;P&gt;In order to understand charts, it is necessary to learn some basic concepts first.&lt;/P&gt;
&lt;P&gt;Here we will cover:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Two Dimensional Charts 
&lt;LI&gt;3D charts 
&lt;LI&gt;Right Hand Coordinates 
&lt;LI&gt;Left-hand Charts 
&lt;LI&gt;Camera 3D 
&lt;LI&gt;World Coordinates &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Two Dimensional Charts&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;Cartesian Plane&lt;/STRONG&gt; is how data is represented in two dimensions.&lt;/P&gt;
&lt;P&gt;The two dimensions are &lt;STRONG&gt;height&lt;/STRONG&gt; and &lt;STRONG&gt;width&lt;/STRONG&gt;. In mathematics these are the x and y axes, respectively. A 3D chart adds &lt;STRONG&gt;depth&lt;/STRONG&gt;, which is labelled Z. The cartesian plane looks this this, where the pink line is the function y=f(x), where y is some function, like sales = 2 * ad budget. The points x-y are given (x,y). The &lt;STRONG&gt;origin&lt;/STRONG&gt; is the point where x=0 and y=0.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/cartesianPlane.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;3D Charts&lt;/H2&gt;
&lt;P&gt;In 3D charts, we introduce a 3rd axis, &lt;STRONG&gt;z&lt;/STRONG&gt;. Points on the chart are (x,y,z). This z axis is at a right angle to x and y. This creates the illusion that the graph is 3 dimensional.&lt;/P&gt;
&lt;H2&gt;Right-Hand Coordinates&lt;/H2&gt;
&lt;P&gt;When the z axis points outward this is called a &lt;STRONG&gt;right-handed coordinate system&lt;/STRONG&gt;. When it points inward it is called &lt;STRONG&gt;left-handed&lt;/STRONG&gt;.&lt;/P&gt;
&lt;P&gt;In the &lt;STRONG&gt;right-handed coordinate system&lt;/STRONG&gt; positive rotation about the axis is counter clockwise.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rightHandCoordinate.jpg"&gt;&lt;/P&gt;
&lt;P&gt;Charts in SciChart are left-hand by default with the y axis point up, the x axis horizontal, and the z axis pointing inward. Rotation is clockwise. Rotation about the vertical axis is called &lt;STRONG&gt;yaw&lt;/STRONG&gt; and &lt;STRONG&gt;rotation&lt;/STRONG&gt; about the horizontal axis is called pitch, just like the terms used in aviation.&lt;/P&gt;
&lt;H2&gt;Left-Hand Coordinates&lt;/H2&gt;
&lt;P&gt;In the chart below the chart is rotated (yaw) 45 degrees in the clockwise direction. In the chart on the right it is 90 degrees. For both charts the rotation about the axis is 45 degrees, which is the default value.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TH&gt;
&lt;P align=center&gt;45 degrees&lt;/P&gt;&lt;/TH&gt;
&lt;TH&gt;
&lt;P align=center&gt;90 degrees&lt;/P&gt;&lt;/TH&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD align=center&gt;&lt;IMG border=0 alt="" src="images/yaw45min.jpg" width="75%"&gt;&lt;/TD&gt;
&lt;TD align=center&gt;&lt;IMG border=0 alt="" src="images/yaw90min.jpg" width="75%"&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;Here is the xyz origin and axis in the middle of the box as it is when using the World Coordinate System&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/leftHand1.png" p=""&gt;&lt;/P&gt;
&lt;H2&gt;Camera 3D&lt;/H2&gt;
&lt;P&gt;The &lt;STRONG&gt;Camera&lt;/STRONG&gt; is a SciChart object. Think of this as the location from which you are viewing the chart, just like you were floating above the surface and looking down at it with a pair of binoculars. We explain this using the concepts below. A camera has an xyz position and &lt;STRONG&gt;pitch&lt;/STRONG&gt; (up and down) and &lt;STRONG&gt;yaw&lt;/STRONG&gt; (rotation).&lt;/P&gt;
&lt;P&gt;&lt;STRONG&gt;Camera coordinates&lt;/STRONG&gt; are three dimensional &lt;STRONG&gt;world coordinates&lt;/STRONG&gt; projected on a two dimensional plane.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/Camera3DExplanation.png"&gt;&lt;/P&gt;
&lt;P&gt;This graphic shows how you can change the pitch and yaw of the camera. Notice that the red, green, and blue xyz graphic to show the orientation of the world coordinate system.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/ModifyCamera3DProperties.gif"&gt;&lt;/P&gt;
&lt;H2&gt;World Coordinates&lt;/H2&gt;
&lt;P&gt;World coordinates are the (x,y,z) coordinates used to locate an object in 3D space. You can transform camera coordinates to world coordinates and vice versa. SciChart does this mathematics when it renders a 3D object onto 2D surface of a tablet or mobile device screen.&lt;/P&gt;
&lt;P&gt;In terms of charting, the origin (0,0,0) is located in the middle of the box shown below which represents 3D space.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/worldcoordinates1.png"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="da59b1bf-d8bb-4126-bb2b-a9823bc1e380" CategoryId="" TopicLinkCategorySource="SpecificValue" Target="ms-its:Univerity of Amsterdam,Image Processing and Computer Vision::/Univerity of Amsterdam,Image Processing and Computer Vision" BuildFlags="">
                    <Title m="2019-09-24T09:11:02.067747Z">University of Amsterdam, Image Processing and Computer Vision</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b6028fd1-9906-48ac-9d08-dd81e45997dd" Status="New Topic" CreatedOn="2019-09-02T10:38:10.9905454Z" ModifiedOn="2020-09-11T17:12:03.2366438Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial  02 - Add SciChart Libraries to Android Studio" BuildFlags="">
                <Title m="2020-09-11T17:12:03.2366438Z">OLD 3D Tutorial  02 - Add SciChart Libraries to Android Studio</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T18:11:58.6027116Z">&lt;P&gt;You can use Gradle or Maven to include the .aar files in Android Studio. Here we use Gradle.&lt;/P&gt;
&lt;H2&gt;Create Android Basic Activity App&lt;/H2&gt;
&lt;P&gt;1. First, in Android Studio create a project with a &lt;STRONG&gt;Basic&lt;/STRONG&gt; activity.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/configureYourProject.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Using Gradle&lt;/H2&gt;
&lt;P&gt;2. Open the "&lt;STRONG&gt;build.gradle&lt;/STRONG&gt;" that says &lt;STRONG&gt;(Module:app)&lt;/STRONG&gt; and declare a new Maven repository in the "&lt;STRONG&gt;repositories&lt;/STRONG&gt;" node inside the "&lt;STRONG&gt;allprojects&lt;/STRONG&gt;" node. Use the URL from above.&lt;/P&gt;
&lt;P&gt;The screenshot below shows where the file can be found in the Project window in Android Studio:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/gradle2.png"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;3. Download and unzip &lt;STRONG&gt;SciChart Android v3&lt;/STRONG&gt;. Copy these files into the folder &lt;STRONG&gt;app/libs&lt;/STRONG&gt; in your project folder:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;charting-release.aar 
&lt;LI&gt;drawing-release.aar 
&lt;LI&gt;charting3d-release.aar 
&lt;LI&gt;extensions-release.aar 
&lt;LI&gt;core-release.aar 
&lt;LI&gt;extensions3d-release.aar 
&lt;LI&gt;data-release.aar &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;4. Add to sections first &lt;STRONG&gt;flatDir&lt;/STRONG&gt; to tell Gradle what folder to look into:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;repositories&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;repositories {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add app\libs folder as libs source&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; flatDir {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dirs 'libs'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;5. Then add the SciChart .aar files to the &lt;STRONG&gt;dependencies&lt;/STRONG&gt; section:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;dependencies&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:recyclerview-v7:28.0.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:appcompat-v7:28.0.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.android.support:design:28.0.0'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'de.greenrobot:eventbus:2.4.0'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.daasuu:EasingInterpolator:1.0.0'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.jakewharton:butterknife:8.8.1'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // you can reference aar from app\libs folder&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:charting:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:charting3d:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:core:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:drawing:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:data:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:extensions:+@aar'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation 'com.scichart:extensions3d:+@aar'&amp;nbsp;&lt;BR&gt;}&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="b490bbc1-b301-4485-9bdc-6cf2154d0f79" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="2247b20c-4be1-42cb-ad24-125310703f67" BuildFlags="">
                    <Title m="2019-09-24T09:14:22.8396314Z">Referencing from Maven and java docs</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="699aad4b-9271-4f53-bcff-48cd49a70752" Status="New Topic" CreatedOn="2019-09-23T16:15:11.006571Z" ModifiedOn="2020-09-11T17:12:08.1236238Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial  03 - Creating a Chart and Add a Data Series" BuildFlags="">
                <Title m="2020-09-11T17:12:08.1236238Z">OLD 3D Tutorial  03 - Creating a Chart and Add a Data Series</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-25T17:58:04.7475946Z">&lt;P&gt;There are four key files here. Two Java classes and two layouts:&lt;/P&gt;
&lt;P&gt;1. MainActivity.java&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Create a reference to &lt;STRONG&gt;CreateScatter3DChartFragment exampleFragment&lt;/STRONG&gt; 
&lt;LI&gt;Reads the SciChart license. 
&lt;LI&gt;Inits &lt;STRONG&gt;SciChartBuilder.init(this)&lt;/STRONG&gt; and &lt;STRONG&gt;SciChart3DBuilder.init(this)&lt;/STRONG&gt;; 
&lt;LI&gt;Inflates &lt;STRONG&gt;activity_main&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;2. CreateScatter3DChartFragment.java&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Extends &lt;STRONG&gt;android.app.Fragment&lt;/STRONG&gt;. 
&lt;LI&gt;Inflates &lt;STRONG&gt;R.layout.example_single_chart3d_fragment&lt;/STRONG&gt;. 
&lt;LI&gt;Creates a &lt;STRONG&gt;Camera3D camera&lt;/STRONG&gt; which is used to project world coordinates (x,y,z) onto a 2D plane, i.e., the device screen. 
&lt;LI&gt;Populates &lt;STRONG&gt;XyzDataSeries3D dataSeries&lt;/STRONG&gt; with data. 
&lt;LI&gt;Inits a &lt;STRONG&gt;SciChart3DBuilder&lt;/STRONG&gt; which it uses to create &lt;STRONG&gt;SciChartSurface3D surface3d&lt;/STRONG&gt;. 
&lt;LI&gt;Creates an &lt;STRONG&gt;EllipsePointMarker3D pointMarker3D&lt;/STRONG&gt;. 
&lt;LI&gt;Passes the &lt;STRONG&gt;dataseries&lt;/STRONG&gt; and &lt;STRONG&gt;pointMarker3D&lt;/STRONG&gt; into the RenderableSeries &lt;STRONG&gt;ScatterRenderableSeries3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;3. activity_main.xml&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Contains the fragment &lt;STRONG&gt;com.scichart.examples.fragments.charts3d.CreateScatter3DChartFragment&lt;/STRONG&gt; in a &lt;STRONG&gt;LinearLayout&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;4. example_single_chart3D_fragment.xml&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Inflates &lt;STRONG&gt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Step by step, this is:&lt;/P&gt;
&lt;H2&gt;Add the license to MainActivity&lt;/H2&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;License&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;super.onCreate(bundle);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String license = "&amp;lt;LicenseContract&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;Customer&amp;gt;xxxxxxxx&amp;lt;/Customer&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;OrderId&amp;gt;Documentation Use Only&amp;lt;/OrderId&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;LicenseCount&amp;gt;1&amp;lt;/LicenseCount&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;IsTrialLicense&amp;gt;true&amp;lt;/IsTrialLicense&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;SupportExpires&amp;gt;10/01/2019 00:00:00&amp;lt;/SupportExpires&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;ProductCode&amp;gt;SC-ANDV3-PRO&amp;lt;/ProductCode&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;nbsp; &amp;lt;KeyCode&amp;gt;xxxxx&amp;lt;/KeyCode&amp;gt;\n" +&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "&amp;lt;/LicenseContract&amp;gt;";&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; try {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface.setRuntimeLicenseKey(license);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; catch (Exception e) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Log.e("scichart", e.printStackTrace();)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;First we inflate a &lt;STRONG&gt;LinearLayout R.layout.activity_main&lt;/STRONG&gt; which contains the &lt;STRONG&gt;Fragment com.scichart.examples.fragments.charts3d.CreateScatter3DChartFragment&lt;/STRONG&gt;: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class MainActivity extends Activity {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private CreateScatter3DChartFragment exampleFragment;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private CustomDrawerLayout drawerLayout;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private ImageButton settingsButton;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void onCreate(Bundle bundle) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartBuilder.init(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChart3DBuilder.init(this);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setContentView(R.layout.activity_main);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;We use &lt;A href="https://github.com/JakeWharton/butterknife" target=_blank&gt;ButterKnife&lt;/A&gt;, which is an SDK that lets you use annotation to inflate layouts, to inflate a &lt;STRONG&gt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;/STRONG&gt;. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class CreateScatter3DChartFragment extends Fragment {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected final SciChart3DBuilder sciChart3DBuilder = SciChart3DBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @BindView(R.id.chart3d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;This inflates &lt;STRONG&gt;example_single_chart3d_fragment.xml&lt;/STRONG&gt;: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;lt;com.scichart.charting3d.visuals.SciChartSurface3D&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; android:id="@+id/chart3d"&lt;/innovasys:widgetproperty&gt; &lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Now the heavy lifting begins in &lt;STRONG&gt;CreateScatter3DChartFragment.init()&lt;/STRONG&gt;. We first create some data: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected void initExample() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withGrowBy(.1, .1).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; dataSeries = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = i;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Then we make an &lt;STRONG&gt;EllipsePointMarker3D pointMarker3D&lt;/STRONG&gt; and &lt;STRONG&gt;ScatterRenderableSeries3D rs&lt;/STRONG&gt; and bind that to the &lt;STRONG&gt;XyzDataSeries3D dataseries&lt;/STRONG&gt;. A pointMarker means the type, color, and size of the points in the graph. &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final EllipsePointMarker3D pointMarker3D = sciChart3DBuilder.newEllipsePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;UL&gt;
&lt;LI&gt;Now we set the Camera, XYZ axes, and render the chart: &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget layout="block" type="Colorized Example Code"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The resulting chart looks like this:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial1Scatter1.jpg"&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="d5f6befd-6b5b-4650-a207-d63f648a4f8e" Status="New Topic" CreatedOn="2019-09-02T14:12:14.8733503Z" ModifiedOn="2020-09-11T17:12:14.3954551Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial 04 - Changing the Axes Length and Chart Pitch and Yaw" BuildFlags="">
                <Title m="2020-09-11T17:12:14.3954551Z">OLD 3D Tutorial 04 - Changing the Axes Length and Chart Pitch and Yaw</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T09:51:37.4149205Z">&lt;P&gt;In the &lt;A href=""&gt;previous tutorial&lt;/A&gt;, it was hard to see the coordinates, because the axis range was much larger than the data range. So the points were small. And it was hard to understand where the coordinates are located, because they are in 3D.&lt;/P&gt;
&lt;P&gt;So to address the first issue, we set the axis range close to the data range to make the points easier to see.&lt;/P&gt;
&lt;P&gt;Specifically our data ranges from 1 to 6 we&amp;nbsp;want the axis length to be, say, 0 and 6. So we set:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;com.scichart.data.model.DoubleRange = (Min = 1.0, Max = 5.0) 
&lt;LI&gt;com.scichart.data.model.DoubleRange = (Min = 0.0, Max = 6.0) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;With:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;BR&gt;final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;And to address the second issue, it's understand the position of the coordinates x,y,z in 3D space if we set one axis to zero. Below we have modified the code to create the points thus setting z to zero.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;(1,1,0) 
&lt;LI&gt;(2,2,0) 
&lt;LI&gt;(3,3,0) 
&lt;LI&gt;(4,4,0) 
&lt;LI&gt;(5,5,0) &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Now you can more easily see that this is the graph of y = x, since we are looking at the xy plane from the side.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/flattenChart.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;If we set all three axes to (1,1,1) ... (5,5,5) we get the chart in the previous tutorial where the line appeared to be pointing straight out from the screen at a 45 degree angle.&lt;/P&gt;
&lt;P&gt;At the bottom left as you rotate and title the screen with your fingers, meaning change the pitch and yaw. A graphic shows the orientation of the chart. It's small on the screen, so here it is enlarged:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/littleXPY.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Below is the modified code. The default Yaw and Pitch are 45 so we use camera.setOrbitalYaw(54).&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;camera.setOrbitalYaw(54)&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;protected void initExample() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final Camera3D camera = sciChart3DBuilder.newCamera3D().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final XyzDataSeries3D&amp;lt;Double, Double, Double&amp;gt; dataSeries = new XyzDataSeries3D&amp;lt;&amp;gt;(Double.class, Double.class, Double.class);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 1; i &amp;lt;= 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = 0;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final EllipsePointMarker3D pointMarker3D = sciChart3DBuilder.newEllipsePointMarker3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withFill(ColorUtil.LimeGreen)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSize(2f)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final ScatterRenderableSeries3D rs = sciChart3DBuilder.newScatterSeries3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withDataSeries(dataSeries)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPointMarker(pointMarker3D)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withSeriesInfoProvider(new CustomSeriesInfo3DProvider())&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D xAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D yAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final NumericAxis3D zAxis = sciChart3DBuilder.newNumericAxis3D().withVisibleRange(0,6).withGrowBy(1, 1).build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withOrbitModifier3D().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier3D().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; camera.setOrbitalYaw(54);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; camera.setOrbitalPitch(45);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Pitch and Yaw&lt;/H2&gt;Since the chart is &lt;STRONG&gt;left-handed&lt;/STRONG&gt; and the y axis it vertical rotation about the y axis (&lt;STRONG&gt;yaw&lt;/STRONG&gt;) is in the counterclockwise direction. You could call this &lt;STRONG&gt;left&lt;/STRONG&gt;. In terms of aviation, that makes sense as turning left and turning counterclockwise if the same thing. Since the x axis is horizontal rotation about the x axis (&lt;STRONG&gt;pitch&lt;/STRONG&gt;) is counterclockwise. You could call this&amp;nbsp;&lt;STRONG&gt;down&lt;/STRONG&gt;. Again this makes sense when you think of an aircraft. 
&lt;H3&gt;Pitch Down&lt;/H3&gt;
&lt;P&gt;We started with this chart. This is oriented at the default yaw=45 and pitch=45.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/tutorial1Scatter.jpg"&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;yaw=45 and pitch=45&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;camera.setOrbitalYaw(45); &lt;/P&gt;
&lt;P&gt;camera.setOrbitalPitch(90);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;To make the chart tilt straight down, we change the pitch to 90 degrees. We change the yaw the same 45 degrees.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/pitchDown.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;This clearly looks like the chart has tiled straight down.&lt;/P&gt;
&lt;H3&gt;Rotate Left&lt;/H3&gt;
&lt;P&gt;To turn left degrees we change yaw to -45 degrees, since rotation in the positive direction in a left-hand coordinate system is clockwise. So we want to go 90 degrees in the other direction. &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;camera.setOrbitalYaw(-45); &lt;/P&gt;
&lt;P&gt;camera.setOrbitalPitch(45);&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rotateLeft.jpg"&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Look at the small graphic in the corner of the Android screen and you can see the new orientation of the xyz axes. The x axis has swung around 90 degrees:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/rotateLeft90xyz.jpg"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="15f98772-959e-40e9-8d86-32f07faea52c" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="88e23fb1-2693-454f-bc8f-512d816ca961" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="5b2aee27-ddd0-4f07-ada5-304ba13d5c66" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                  <TopicLink Id="140182b7-2495-419a-b4e0-541fa229f714" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="b302958a-29d2-4089-9b36-8ff8acd30627" Status="New Topic" CreatedOn="2019-09-02T15:14:36.8281591Z" ModifiedOn="2020-09-11T17:12:18.6755628Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial 05 - Zooming and Rotating" BuildFlags="">
                <Title m="2020-09-11T17:12:18.6755628Z">OLD 3D Tutorial 05 - Zooming and Rotating</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-10-28T09:43:37.8265699Z">&lt;P&gt;So far we created a 3D chart, added XAxis, YAxis and ZAxis and 3D scatter series. In this tutorial we're going to add some interactivity for 3D chart and in the end we should get ability to zoom and rotate camera around the chart.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H2&gt;Zooming and Rotation Definitions:&lt;/H2&gt;
&lt;P&gt;&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;zoom&lt;/STRONG&gt; — means to enlarge the chart by zooming in on a section. You use two fingers to do this. But it's more than just zooming into a 2D drawing, the perspective changes as you move throughout the 3D space, creating the illusion that you are moving inside the cube which is the chart. 
&lt;LI&gt;&lt;STRONG&gt;rotate&lt;/STRONG&gt; — means to move rotate the camera and move it up and down. Remember that the &lt;STRONG&gt;camera&lt;/STRONG&gt; is your perspective, or the projection from your eye of the chart onto the 2D surface of the screen. &lt;/LI&gt;&lt;/UL&gt;
&lt;H1&gt;3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;In SciChart 3D, chart interactions are defined by 3D ChartModifiers. In addition to the default SciChart modifiers you can write custom modifiers or extends existing ones.&lt;/P&gt;
&lt;P&gt;The default modifiers includes:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;PinchZoomModifier3D 
&lt;LI&gt;ObitModifier3D 
&lt;LI&gt;FreeLookModifier3d 
&lt;LI&gt;ZoomExtentsModifier3D 
&lt;LI&gt;TooltipModifier3D 
&lt;LI&gt;VertexSelectionModifier3D 
&lt;LI&gt;LegendModifier3D &lt;/LI&gt;&lt;/UL&gt;
&lt;H1&gt;Adding 3D ChartModifiers&lt;/H1&gt;
&lt;P&gt;Now we are going to create and configure a couple of modifiers using SciChartBuilder3D and add them to the modifier collection of the SciChartSurfac3D:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final ModifierGroup3D modifierGroup3D = sciChart3DBuilder.newModifierGroup()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withPinchZoomModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withOrbitModifier3D().withReceiveHandledEvents(true).build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withZoomExtentsModifier3D().build()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then to add them into collection:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.getChartModifiers().add(modifierGroup3D);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="6c10afbe-fd7a-4fa9-b26b-25d47ea9a2c1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" BuildFlags="">
                    <Title m="2019-10-28T09:46:31.4385931Z">PinchZoomModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="fd9d4d72-f8e5-4720-a130-6d76ea508949" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" BuildFlags="">
                    <Title m="2019-10-28T09:48:40.4281627Z">ObitModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="91a7ead9-2c8b-47a4-a060-e304f8e7dca5" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" BuildFlags="">
                    <Title m="2019-10-28T09:49:31.6138953Z">FreeLookModifier3D</Title>
                    <Category />
                  </TopicLink>
                  <TopicLink Id="a32f5061-c887-45b1-aec6-16d2eee44313" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="0f31338f-c416-4129-8e9b-cc357faf1082" BuildFlags="">
                    <Title m="2019-10-28T09:49:44.5854368Z">ZoomExtentsModifier3D</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="57a08ab7-2fd2-4ee1-8268-30acf5c474c3" Status="New Topic" CreatedOn="2019-09-02T16:02:59.1689118Z" ModifiedOn="2020-09-11T17:12:23.5475964Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial 06 - Cursors and Tooltips" BuildFlags="">
                <Title m="2020-09-11T17:12:23.5475964Z">OLD 3D Tutorial 06 - Cursors and Tooltips</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T11:47:33.2557949Z">&lt;P&gt;In the&amp;nbsp;&lt;A href="b302958a-29d2-4089-9b36-8ff8acd30627"&gt;previous tutorial&lt;/A&gt;, we showed how to create a chart and add data. In this tutorial we show how to add a cursor and tooltip to that chart.&lt;/P&gt;
&lt;H3&gt;Definitions&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;STRONG&gt;cursor&lt;/STRONG&gt; ⁠— a tablet or cell phone obviously does not have a mouse. Instead the mouse is your finer and the cursor is where you place your finger. It appears as a small &lt;STRONG&gt;x&lt;/STRONG&gt; (cross). 
&lt;LI&gt;&lt;STRONG&gt;tooltip⁠&lt;/STRONG&gt; — is text that displays when you push the cursor onto an object, like a point plotted on a chart. You have to push the cursor onto the coordinate for the text to appear. In the case of the example below you probably need to use two fingers to zoom into the chart to make the points appear large enough to that you can see them. &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Tooltip&lt;/H2&gt;
&lt;P&gt;At the bottom of &lt;A href="699aad4b-9271-4f53-bcff-48cd49a70752"&gt;CreateScatter3DChartFragment&lt;/A&gt;&amp;nbsp;we added a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.ModifierGroup3D.html"&gt;ModifierGroup3D&lt;/A&gt; in the previous tutorial. This gives the chart the panning and zooming ability.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We can add more additional charts on the surface by simple adding them to &lt;STRONG&gt;surface3d.getRenderableSeries().add(CHART)&lt;/STRONG&gt;. Similarly we an add additional modifiers, such as a &lt;A href="SciChart.Charting3D~com.scichart.charting3d.modifiers.TooltipModifier3D.html"&gt;TooltipModifier&lt;/A&gt;, to the surface3D object using &lt;STRONG&gt;surface3d.getChartModifiers().add&lt;/STRONG&gt;. &lt;/P&gt;
&lt;P&gt;So in &lt;A href="7915ac64-f37b-4acd-a5c7-521a0259d63c"&gt;CreateScatter3DChartFragment&lt;/A&gt; we create a &lt;STRONG&gt;TooltipModifier3D&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;final TooltipModifier3D tooltipModifier3D = new TooltipModifier3D();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipModifier3D.setIsEnabled(true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; //tooltipModifier3D.setExecuteOnPointerCount(1);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; tooltipModifier3D.setCrosshairMode(CrosshairMode.Lines);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(new ModifierGroup3D(tooltipModifier3D));&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Then we assign the &lt;STRONG&gt;CustomXyzSeriesTooltip3D&lt;/STRONG&gt;, defined further below in the class &lt;STRONG&gt;CustomSeriesInfo3DProvider&lt;/STRONG&gt;, with &lt;STRONG&gt;return new CustomXyzSeriesTooltip3D(context, seriesInfo)&lt;/STRONG&gt; to the &lt;STRONG&gt;CustomSeriesInfo3DProvider&lt;/STRONG&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;class CustomSeriesInfo3DProvider extends DefaultXyzSeriesInfo3DProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected ISeriesTooltip3D getSeriesTooltipInternal(Context context, XyzSeriesInfo3D&amp;lt;? extends XyzRenderableSeries3DBase&amp;gt; seriesInfo, Class&amp;lt;?&amp;gt; modifierType) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(modifierType == TooltipModifier3D.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomXyzSeriesTooltip3D(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return super.getSeriesTooltipInternal(context, seriesInfo, modifierType);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;We define the behavior of the tooltip by extending &lt;STRONG&gt;XyzSeriesTooltip3D&lt;/STRONG&gt;. Here we add the text that we want to appear in the tooltip. In this case we pass it a description and the x,y,z coordinates or the point you touch. Use a line feed &lt;STRONG&gt;\n&lt;/STRONG&gt; at the end of each line.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example Title&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;class CustomSeriesInfo3DProvider extends DefaultXyzSeriesInfo3DProvider {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected ISeriesTooltip3D getSeriesTooltipInternal(Context context, XyzSeriesInfo3D&amp;lt;? extends XyzRenderableSeries3DBase&amp;gt; seriesInfo, Class&amp;lt;?&amp;gt; modifierType) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(modifierType == TooltipModifier3D.class) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return new CustomXyzSeriesTooltip3D(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; } else {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return super.getSeriesTooltipInternal(context, seriesInfo, modifierType);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private static class CustomXyzSeriesTooltip3D extends XyzSeriesTooltip3D {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public CustomXyzSeriesTooltip3D(Context context, XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super(context, seriesInfo);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void internalUpdate(XyzSeriesInfo3D&amp;lt;?&amp;gt; seriesInfo) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SpannableStringBuilder sb = new SpannableStringBuilder();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("This is Custom Tooltip").append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("VertexId: ").append(Integer.toString(seriesInfo.vertexId)).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("X: ").append(seriesInfo.getFormattedXValue()).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Y: ").append(seriesInfo.getFormattedYValue()).append("\n");&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.append("Z: ").append(seriesInfo.getFormattedZValue());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setText(sb);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setSeriesColor(seriesInfo.seriesColor);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;}&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here is the result:&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/customtooltip.jpg"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="da0d621a-f710-4761-a3bf-4b0454648587" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="7915ac64-f37b-4acd-a5c7-521a0259d63c" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="5eb89f7b-2486-4a91-bb5d-2a567a4cdd16" Status="New Topic" CreatedOn="2019-09-02T12:26:48.1021752Z" ModifiedOn="2020-09-11T17:12:28.5004035Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OLD 3D Tutorial 07 - Plotting Realtime Data" BuildFlags="">
                <Title m="2020-09-11T17:12:28.4994068Z">OLD 3D Tutorial 07 - Plotting Realtime Data</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-09-24T11:48:45.1702818Z">&lt;P&gt;Go back to the code &lt;A href=""&gt;Creating a Chart and Add a Data Series&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Before we add realtime updates to the chart it is necessary to use the &lt;A href=""&gt;UpdateSuspender&lt;/A&gt; object to create the chart instead of the approach we used before, which was just to run a series of steps in &lt;STRONG&gt;initExample()&lt;/STRONG&gt;. UpdateSuspender is disposable class which allows nested suspend/resume operations on an &lt;A href=""&gt;ISuspendable&lt;/A&gt; target.&lt;/P&gt;
&lt;P&gt;Then change this:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;... to this code shown below. Build and run the project to make sure that it still works.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&lt;BR&gt;UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setCamera(camera);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getRenderableSeries().add(rs);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.getChartModifiers().add(sciChart3DBuilder.newModifierGroupWithDefaultModifiers().build());&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now we add the code below to update the chart in real time. As you can see updating the chart is as simple as changing the data and running that in a thread.&lt;/P&gt;
&lt;P&gt;First add ScheduledExecutorService and ScheduledFuture to the top:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;public class CreateScatter3DChartFragment extends ExampleBaseFragment {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @BindView(R.id.chart3d)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; private ScheduledFuture&amp;lt;?&amp;gt; schedule;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Now put this at the bottom:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void initExample() {&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // ...&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; schedule = scheduledExecutorService.scheduleWithFixedDelay(new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; private final DoubleValues buffer = new DoubleValues();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; UpdateSuspender.using(surface3d, new Runnable() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void run() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.clear();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double randomDouble = Math.random();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; randomDouble = randomDouble * 5 + 1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int randomInt = (int) randomDouble;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; for (int i = 0; i &amp;lt; 5; i++) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double x = i*randomInt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double y = i*randomInt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; final double z = i*randomInt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries.append(x, y, z);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }, 0, 33, TimeUnit.MILLISECONDS);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Override&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; public void onDestroyView() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; super.onDestroyView();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (schedule != null)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; schedule.cancel(true);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The complete code for the modified &lt;STRONG&gt;CreateScatter3DChartFragment&lt;/STRONG&gt; is &lt;A href="b6028fd1-9906-48ac-9d08-dd81e45997dd"&gt;here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;The resulting chart is the same except values plotted on the screen change in real time.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/RealtimeAndroid.gif"&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="13d7487c-cf17-4ec6-aef1-a78860c2ecb1" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="498f88e2-6f84-4804-9da5-426e8d72ef00" BuildFlags="">
                    <Title m="2019-09-24T11:38:43.3581343Z">Suspending Updates of Chart</Title>
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="f2a1bf7b-58d6-4576-a9db-52f9b204dec7" AutoIndex="false">
            <Caption m="2019-07-08T10:32:17.0279208Z">Axis3D APIs</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="1f42648d-b868-4793-8ab7-b44504f33f99" Status="New Topic" CreatedOn="2019-07-08T10:32:21.0237301Z" ModifiedOn="2023-07-12T15:34:57.03915Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis Types in SciChart3D" BuildFlags="">
                <Title m="2023-07-12T15:34:57.03915Z">Numeric and Date Axis in SciChart3D</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-11T17:55:21.4518429Z">&lt;P&gt;SciChart.js 3D features several axis types. All inherit from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html"&gt;AxisBase3D&lt;/A&gt;. The Axis&amp;nbsp;are the logical representation of the XZ, ZY, YX planes in the Axis Cube.&lt;/P&gt;
&lt;P&gt;X,Y,Z axis are required to measure the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#renderableseries"&gt;sciChart3DSurface.renderableSeries&lt;/A&gt;, for instance, an axis is responsible for the transformation between data-values (provided by your code) and world coordinates (X,Y,Z values in 3D Space).&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;See the article on&amp;nbsp;&lt;A href="0a96bb3a-89bf-4886-9ad9-e11ad6f32c4e"&gt;Coordinates in 3D Space&lt;/A&gt; to explain the difference between World and Data coordinates and how to define the dimensions of the Axis Cube. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;NumericAxis3D&lt;/H2&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis3d.html"&gt;NumericAxis3D&lt;/A&gt; is a Value-Axis and is suitable when the data on that axis is numeric (e.g. JavaScript number - 64-bit double precision values).&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;The API between SciChart.js 2D and 3D is shared, so all properties related to&amp;nbsp;&lt;A href="d66c2e84-028d-4bb7-930c-df91beb840db"&gt;showing/hiding gridlines&lt;/A&gt;,&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;formatting labels&lt;/A&gt; or&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;spacing of labels&lt;/A&gt; are shared between 2D &amp;amp; 3D charts. &lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Here's a short example showing how to configure this axis type. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\NumericAxis3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/NumericAxis3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Date Axis 3D&lt;/H2&gt;
&lt;P&gt;At the time of writing, there is no date-specific axis in SciChart.js 3D. However, it is still possible to use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/numericaxis3d.html"&gt;NumericAxis3D&lt;/A&gt; with date formatting, assuming your data is included as linux timestamps / 1000.&lt;/P&gt;
&lt;P&gt;For this to work, the values in the X-direction must be linux timestamps / 1000 (seconds since 01-01-1970). Axis.visibleRange also expects values in this format.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\DateAxis3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/DateAxis3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1d18444a-b912-4bcc-ae02-96bde1620a21" Status="New Topic" CreatedOn="2019-07-08T11:53:54.69086Z" ModifiedOn="2023-12-22T14:00:57.6524082Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis3D APIs" BuildFlags="">
                <Title m="2023-07-12T15:30:27.1472048Z">Axis3D APIs Overview</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T14:00:57.6524082Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;SciChart.js 3D shares the same&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;AxisCore&lt;/A&gt; as SciChart.js 2D. Many features such as &lt;STRONG&gt;Text Formatting&lt;/STRONG&gt;, &lt;STRONG&gt;Autorange&lt;/STRONG&gt; (zooming to fit) and &lt;STRONG&gt;Styling&lt;/STRONG&gt; &lt;STRONG&gt;are&lt;/STRONG&gt; &lt;STRONG&gt;shared&lt;/STRONG&gt;.&amp;nbsp;For your convenience, some of the documentation has been duplicated here, with some referring to other sections of the user manual.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;The Axis Types in SciChart all inherit from&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;AxisCore&lt;/A&gt;&amp;nbsp;and 3D axis inherit&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html"&gt;AxisBase3D&lt;/A&gt;. Below you can find an inheritance diagram. In the next section we're going to go over the main properties, types and what you can do with SciChart.js 3D Axis.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/AxisBase2D_InheritenceDiagram.png"&gt;&lt;/P&gt;
&lt;H3&gt;The AxisCore Type&lt;/H3&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;AxisCore&lt;/A&gt; properties and methods can be seen at the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html"&gt;TypeDoc documentation&lt;/A&gt;. We've also included a table of important properties below. Click on each link to jump to the TypeDoc documentation where you can see a description and type information.&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#allowfastmath"&gt;allow&lt;WBR&gt;Fast&lt;WBR&gt;Math&lt;/A&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#animatedvisiblerange"&gt;animated&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autorange"&gt;auto&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#autoticks"&gt;auto&lt;WBR&gt;Ticks&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#axisbandsfill"&gt;axis&lt;WBR&gt;Bands&lt;WBR&gt;Fill&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#axistitle"&gt;axis&lt;WBR&gt;Title&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#axistitlestyle"&gt;axis&lt;WBR&gt;Title&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#cursortextformatting"&gt;cursor&lt;WBR&gt;Text&lt;WBR&gt;Formatting&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#deltacalculator"&gt;delta&lt;WBR&gt;Calculator&lt;/A&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#dpiadjustedaxistitlestyle"&gt;dpi&lt;WBR&gt;Adjusted&lt;WBR&gt;Axis&lt;WBR&gt;Title&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawlabels"&gt;draw&lt;WBR&gt;Labels&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawmajorbands"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Bands&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawmajorgridlines"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawmajorticklines"&gt;draw&lt;WBR&gt;Major&lt;WBR&gt;Tick&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawminorgridlines"&gt;draw&lt;WBR&gt;Minor&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#drawminorticklines"&gt;draw&lt;WBR&gt;Minor&lt;WBR&gt;Tick&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#flippedcoordinates"&gt;flipped&lt;WBR&gt;Coordinates&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#growby"&gt;grow&lt;WBR&gt;By&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#id"&gt;id&lt;/A&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#iscategoryaxis"&gt;is&lt;WBR&gt;Category&lt;WBR&gt;Axis&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#isvisible"&gt;is&lt;WBR&gt;Visible&lt;/A&gt; 
&lt;LI class="tsd-kind-get-signature tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#isxaxis"&gt;isXAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#labelprovider"&gt;label&lt;WBR&gt;Provider&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majordelta"&gt;major&lt;WBR&gt;Delta&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majorgridlinestyle"&gt;major&lt;WBR&gt;Grid&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majorticklinestyle"&gt;major&lt;WBR&gt;Tick&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#maxautoticks"&gt;max&lt;WBR&gt;Auto&lt;WBR&gt;Ticks&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minordelta"&gt;minor&lt;WBR&gt;Delta&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorgridlinestyle"&gt;minor&lt;WBR&gt;Grid&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorticklinestyle"&gt;minor&lt;WBR&gt;Tick&lt;WBR&gt;Line&lt;WBR&gt;Style&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minorspermajor"&gt;minors&lt;WBR&gt;Per&lt;WBR&gt;Major&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#textformatting"&gt;text&lt;WBR&gt;Formatting&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#tickcoordinatesprovider"&gt;tick&lt;WBR&gt;Coordinates&lt;WBR&gt;Provider&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#tickprovider"&gt;tick&lt;WBR&gt;Provider&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#visiblerange"&gt;visible&lt;WBR&gt;Range&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;Some important properties to note: &lt;STRONG&gt;autoRange&lt;/STRONG&gt;, &lt;STRONG&gt;textFormatting&lt;/STRONG&gt;, &lt;STRONG&gt;major/minorGridLineStyle&lt;/STRONG&gt; and properties like &lt;STRONG&gt;drawLabels&lt;/STRONG&gt;, &lt;STRONG&gt;drawMajorGridlines&lt;/STRONG&gt; etc...&amp;nbsp;&amp;nbsp;We're going to explain more on how to use these later.&lt;/P&gt;
&lt;H3&gt;The AxisBase3D Type&lt;/H3&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html"&gt;AxisBase3D&lt;/A&gt; inherits AxisCore and has some additional properties specific to 3D charts. These include:&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#axisplanebackgroundfill"&gt;axis&lt;WBR&gt;Plane&lt;WBR&gt;Background&lt;WBR&gt;Fill&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#backgroundcolor"&gt;background&lt;WBR&gt;Color&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#labeldepthtestenabled"&gt;label&lt;WBR&gt;Depth&lt;WBR&gt;Test&lt;WBR&gt;Enabled&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#negativesideclipping"&gt;negative&lt;WBR&gt;Side&lt;WBR&gt;Clipping&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#planebordercolor"&gt;plane&lt;WBR&gt;Border&lt;WBR&gt;Color&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#planeborderthickness"&gt;plane&lt;WBR&gt;Border&lt;WBR&gt;Thickness&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#positivesideclipping"&gt;positive&lt;WBR&gt;Side&lt;WBR&gt;Clipping&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#ticklabelalignment"&gt;tick&lt;WBR&gt;Label&lt;WBR&gt;Alignment&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#ticklabelsoffset"&gt;tick&lt;WBR&gt;Labels&lt;WBR&gt;Offset&lt;/A&gt; 
&lt;LI class="tsd-kind-accessor tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#titleoffset"&gt;title&lt;WBR&gt;Offset&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Basic Examples of how to declare an Axis&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For a super-simple primer with code sample on how to declare an axis in SciChart.js 3D, see the article&amp;nbsp;&lt;A href="1f42648d-b868-4793-8ab7-b44504f33f99"&gt;Numeric and Date Axis in SciChart3D&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Axis 3D APIs&lt;/H2&gt;
&lt;P&gt;Below are the key things you can do with the axis in SciChart.js 3D and where to find more information.&lt;/P&gt;
&lt;H3&gt;Axis 3D Text (Label) Formatting&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;All Axis in SciChart use the labelProviders to format text for the axis labels and cursor (tooltip) labels.&lt;/P&gt;
&lt;P&gt;Background information can be found&amp;nbsp;found at the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis LabelProvider API Overview&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;Specific example code for formatting 3D Axis text labels can be found in the article&amp;nbsp;&lt;A href="8f08a07b-da4d-4872-83de-412850826296"&gt;Axis3D Text (Label) Formatting)&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Axis 3D AutoRanging &amp;amp; Setting VisibleRange&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html"&gt;AxisBase3D&lt;/A&gt; derived Types also have auto-ranging behaviour as per the 2D axis types. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#autorange"&gt;axis.autoRange&lt;/A&gt; property defines how the axis will autorange when data is changed.&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#visiblerange"&gt;axis.visibleRange&lt;/A&gt; property allows you to set or get the min, max on the axis.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#growby"&gt;axis.growBy&lt;/A&gt; allows you to set padding on the visibleRange.&lt;/P&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#visiblerangechanged"&gt;axis.visibleRangeChanged&lt;/A&gt; is an event or callback which fires when the range is updated.&lt;/P&gt;
&lt;P&gt;For more info see:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="f43a75da-4a63-41a6-8db9-ff0ea13a5198"&gt;Axis Ranging - AutoRanging&lt;/A&gt; 
&lt;LI&gt;&lt;A href="dfe50e75-c34a-4d96-98c7-9ce9855956cd"&gt;Axis Ranging - Setting and Getting VisibleRange&lt;/A&gt; 
&lt;LI&gt;&lt;A href="75091468-bbf7-49ad-9841-c5d935660429"&gt;Axis Ranging - Listen to VisibleRange Changes&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;EM&gt;&lt;STRONG&gt;NOTE&lt;/STRONG&gt;: In a 3D Axis, AutoRanging means ‘given a fixed size of Axis in 3D world coordinates, change the VisibleRange Max/Min to fit the data’.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;Dynamically positioning the camera to view all of the 3D Chart would require updating the camera position, target. See the&amp;nbsp;&lt;/EM&gt;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;&lt;EM&gt;article on Camera 3D&lt;/EM&gt;&lt;/A&gt; &lt;EM&gt;for more information.&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Axis 3D Tick / Label Frequency&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;In SciChart.js, the ticks are small marks around the chart on an axis. They Also define the spacing of Gridlines, Axis Labels and Axis Bands.&lt;/P&gt;
&lt;P&gt;AxisBase3D tick intervals can be changed using the same APIs as SciChart 2D. For further information see&amp;nbsp;&lt;A href="7e505bd8-0973-4529-a8fb-4510d84addb6"&gt;Axis 3D Gridline and Label Spacing&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Axis 3D Element Styling&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;For styling gridlines, labels and titles, the rules in SciChart.js 3D are the same as 2D charts.&lt;/P&gt;
&lt;P&gt;There are some addditional elements on the 3D chart which can be styled, such as the axis walls. For more info see the article on&amp;nbsp;&lt;A href="9d4694ea-a334-47f5-be19-2fe2f8866339"&gt;Styling Gridlines, Labels and Elements&lt;/A&gt;.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks>
                  <TopicLink Id="ccd191bf-9391-4e40-9334-0184c5cba428" CategoryId="" TopicLinkCategorySource="TargetItemCategory" Target="1f42648d-b868-4793-8ab7-b44504f33f99" BuildFlags="">
                    <Title />
                    <Category />
                  </TopicLink>
                </TopicLinks>
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="8f08a07b-da4d-4872-83de-412850826296" Status="New Topic" CreatedOn="2023-07-12T15:42:58.9154944Z" ModifiedOn="2023-07-12T18:16:49.9148567Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis3DTextFormatting" BuildFlags="">
                <Title m="2023-07-12T15:43:21.6856768Z">Axis3D Text (Label) Formatting</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-12T18:16:49.9148567Z">&lt;P&gt;Axis 3D Label Formatting obeys the same rules as SciChart 2D.&lt;/P&gt;
&lt;P&gt;Each axis has a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#labelprovider"&gt;labelProvider&lt;/A&gt; property, which allows you to attach pre-built classes to format numbers, dates, as well as create your own. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Background reading: Read the&amp;nbsp;&lt;A href="1325dcad-b236-42e7-8491-af7a8137d6e7"&gt;Axis LabelProvider API Overview&lt;/A&gt; to learn more about this powerful API&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Simple examples of formatting Labels&lt;/H2&gt;
&lt;P&gt;Axis can have simple label formatting via constructor options. Things like setting the &lt;STRONG&gt;number of decimal places&lt;/STRONG&gt;, &lt;STRONG&gt;prefix&lt;/STRONG&gt; and &lt;STRONG&gt;postfix&lt;/STRONG&gt;, and &lt;STRONG&gt;scientific notation&lt;/STRONG&gt; can be achieved by just setting some properties.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\NumericAxis3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/NumericAxis3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Date Formatting&lt;/H2&gt;
&lt;P&gt;There is no date axis in SciChart.js 3D, however it is possible to achieve date or time formatting using labelProviders. Take a look at this quick example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\DateAxis3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/DateAxis3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Custom Label Formatting Rules&lt;/H2&gt;
&lt;P&gt;Using the labelProvider API, more complex rules can be created to format axis labels in SciChart.js 3D.&lt;/P&gt;
&lt;P&gt;Below we've adapted the example from&amp;nbsp;&lt;A href="e9747ecc-a3cd-456b-9180-c47daead66ef"&gt;2D Charts - Custom LabelProviders: Readable Numbers&lt;/A&gt; to apply it to a 3D axis.&lt;/P&gt;
&lt;P&gt;First, delcare the custom LabelProvider class by inheriting one of the available base types in SciChart.js.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\LabelProviderNumeric3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Next, attach to a chart axis like this:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\LabelProviderNumeric3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/LabelProviderNumeric3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="7e505bd8-0973-4529-a8fb-4510d84addb6" Status="New Topic" CreatedOn="2023-07-12T15:43:32.3936572Z" ModifiedOn="2023-07-13T13:44:07.6308763Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Axis3DLabelInterval" BuildFlags="">
                <Title m="2023-07-12T15:44:28.622138Z">Axis3D Gridline and Label Spacing (Interval)</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-13T13:44:07.6308763Z">&lt;P&gt;Axis 3D Gridline and Label Spacing obeys the same rules as SciChart 2D. Here are the key principles.&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Each axis has a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majordelta"&gt;axisCore.MajorDelta&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minordelta"&gt;axisCore.MinorDelta&lt;/A&gt;, which specify the interval of major gridlines / labels and minor gridlines respectively. These are normally calculated automatically. They can be&amp;nbsp;set manually along with&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#autoticks"&gt;axis.autoTicks&lt;/A&gt; = false to achieve user-defined intervals. 
&lt;LI&gt;You can also set hints such as&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#maxautoticks"&gt;axis.maxAutoTicks&lt;/A&gt; or&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#minorspermajor"&gt;axis.minorsPerMajor&lt;/A&gt; to adjust the number of gridlines using the automatic built-in intervals.
&lt;LI&gt;Or, if you want fine-grained control over gridline spacing and to apply custom or dynamic rules, you can create a&amp;nbsp;&lt;A href="31e819ca-a224-4e7a-8fa1-4c8301fb6108"&gt;TickProvider plugin&lt;/A&gt; to do it&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Background reading: Read the&amp;nbsp;&lt;A href="463d136b-fe1f-4960-85ac-9cb15ceb1d21"&gt;Axis Ticks - Gridline and Label Spacing&lt;/A&gt; and the advanced article&amp;nbsp;&lt;A href="31e819ca-a224-4e7a-8fa1-4c8301fb6108"&gt;Axis Ticks - Programmatic Gridline Spacing&lt;/A&gt; to learn more about this powerful API.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Simple Example of spacing Gridlines &lt;/H2&gt;
&lt;P&gt;Here is a code sample that demonstrates the three ways to space gridlines.&lt;/P&gt;
&lt;H3&gt;Automatic Spacing&lt;/H3&gt;
&lt;P&gt;Automatic gridline and label spacing (default) can be adjusted by setting the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#maxautoticks"&gt;axis.maxAutoTicks&lt;/A&gt; and &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#minorspermajor"&gt;axis.minorsPerMajor&lt;/A&gt;&amp;nbsp;properties. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\GridlineLabelSpacing\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Manual Spacing&lt;/H3&gt;
&lt;P&gt;To manually specify gridline and label intervals, set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase3d.html#autoticks"&gt;axis.autoTicks&lt;/A&gt; = false&amp;nbsp;then set&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#majordelta"&gt;axisCore.MajorDelta&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axiscore.html#minordelta"&gt;axisCore.MinorDelta&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\GridlineLabelSpacing\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleB&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Custom Spacing&lt;/H3&gt;
&lt;P&gt;Finally, to specify custom spacing or irregular spacing, you can create a class which inherits from NumericTickProvider and attach to the axis like this. &lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;SPAN&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/SPAN&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\GridlineLabelSpacing\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleC&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Putting this all together, we've created an example to show you all three spacing methods in one 3D chart. &lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/GridlineLabelSpacing/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="52a1498f-8169-4c7e-abfb-bae331217e72" AutoIndex="false">
            <Caption m="2019-07-10T07:58:05.7072369Z">3D Chart Types</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="4390d675-fd3c-45d8-8357-09b747d5071c" Status="New Topic" CreatedOn="2019-07-10T07:58:09.7294709Z" ModifiedOn="2023-07-14T18:06:35.1979001Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Scatter 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-14T18:06:35.1979001Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Scatter 3D Chart can be found in the SciChart.js Demo app which can be viewed on our website, or downloaged from SciChart.Js.Examples Github Repository&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-3d-bubble-chart" target=_blank&gt;SciChart.js Demo app&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;All examples on Github&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;3D Scatter Charts are provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scatterrenderableseries3d.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; type. This draws a single PointMarker at an X,Y,Z location in the 3D world. Charts can be static or dynamic, and updated in real-time if required.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-3d-bubble-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;STRONG&gt;&lt;EM&gt;Above: The&amp;nbsp;&lt;/EM&gt;&lt;/STRONG&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-3d-bubble-chart" target=_blank&gt;JavaScript 3D Bubble Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing how to create a Scatter/Bubble 3D chart with variable size and color of points.&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scatterrenderableseries3d.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; supports multiple pointmarkers, including:&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spherepointmarker3d.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cubepointmarker3d.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pyramidpointmarker3d.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cylinderpointmarker3d.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pixelpointmarker3d.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/quadpointmarker.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ellipsepointmarker3d.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/trianglepointmarker3d.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a 3D Scatter Series&lt;/H2&gt;
&lt;P&gt;To declare a 3D Scatter Series with PointMarker use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Scatter3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Scatter3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Coloring Individual Scatter Points&lt;/H2&gt;
&lt;P&gt;Scatter points may be colored or scaled individually using the PointMetada3D API. To do this, set a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata3d.html"&gt;PointMetadata3D&lt;/A&gt; instance with property &lt;STRONG&gt;vertexColor&lt;/STRONG&gt; at each data-point in the XyzDataSeries3D.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Scatter3DMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Scatter3DMetadata/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata3d.html"&gt;IPointMetadata3D&lt;/A&gt; can be any javascript object but the property &lt;STRONG&gt;vertexColor&lt;/STRONG&gt; is used to determine scatter 3D datapoint colour. This is in hex format Alpha, Red, Green, Blue, so 0xFFFF0000 would correspond to red. The helper function&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#parseColorToUIntArgb"&gt;parseColorToUIntArgb&lt;/A&gt; can convert Javascript Hex codes to this format.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="07c999cf-2895-4b49-ae5f-77d283a51741" Status="New Topic" CreatedOn="2019-07-10T07:58:54.1113574Z" ModifiedOn="2023-07-14T18:07:36.6817412Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The Bubble 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-14T18:07:36.6817412Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Scatter/Bubble 3D Chart can be found in the SciChart.js Demo app which can be viewed on our website, or downloaged from SciChart.Js.Examples Github Repository&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-3d-bubble-chart" target=_blank&gt;SciChart.js Demo app&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;All examples on Github&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;3D Bubble Charts are provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scatterrenderableseries3d.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; type. This draws a single PointMarker at an X,Y,Z location in the 3D world with a per-point scaling factor.&amp;nbsp;Charts can be static or dynamic, and updated in real-time if required.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-3d-bubble-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;STRONG&gt;&lt;EM&gt;Above: The&amp;nbsp;&lt;/EM&gt;&lt;/STRONG&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-3d-bubble-chart" target=_blank&gt;JavaScript 3D Bubble Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing how to create 3D Bubble/Scatter charts with variable size and color of points&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scatterrenderableseries3d.html"&gt;ScatterRenderableSeries3D&lt;/A&gt; allows creation of 3D Bubble charts and supports multiple pointmarkers, including:&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spherepointmarker3d.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cubepointmarker3d.html"&gt;CubePointMarker3D&lt;/A&gt; - 3D Cube at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pyramidpointmarker3d.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cylinderpointmarker3d.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pixelpointmarker3d.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/quadpointmarker.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ellipsepointmarker3d.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/trianglepointmarker3d.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a 3D Bubble Series with custom Sizes &amp;amp; Colors&lt;/H2&gt;
&lt;P&gt;To declare a 3D Bubble Series with individual sizes &amp;amp; colors, use the following code.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\BubbleSeries3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/BubbleSeries3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata3d.html"&gt;IPointMetadata3D&lt;/A&gt; can be any javascript object but the property &lt;STRONG&gt;vertexColor&lt;/STRONG&gt; is used to determine scatter 3D datapoint colour. This is in hex format Alpha, Red, Green, Blue, so 0xFFFF0000 would correspond to red. The helper function&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#parseColorToUIntArgb"&gt;parseColorToUIntArgb&lt;/A&gt; can convert Javascript Hex codes to this format.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="33cbcf3e-8a70-4e28-a69f-3132493fcec7" Status="New Topic" CreatedOn="2023-07-10T16:17:52.721901Z" ModifiedOn="2023-07-14T18:07:36.6957629Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ThePointLine3DChartType" BuildFlags="">
                <Title m="2023-07-10T16:18:08.7985719Z">The Lines 3D Chart Type</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-14T18:07:36.6957629Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Lines 3D Chart can be found in the SciChart.js Demo app which can be viewed on our website, or downloaged from SciChart.Js.Examples Github Repository&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/javascript-3d-point-line-chart" target=_blank&gt;SciChart.js Demo app&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;All examples on Github&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;3D Line Charts are provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pointlinerenderableseries3d.html"&gt;PointLineRenderableSeries3D&lt;/A&gt; type. This draws line segments from X,Y,Z data in the 3D world, with an optional point-marker. Charts can be static or dynamic, and updated in real-time if required.&lt;/P&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-3d-point-line-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&lt;STRONG&gt;&lt;EM&gt;Above: The&amp;nbsp;&lt;/EM&gt;&lt;/STRONG&gt;&lt;A href="https://demo.scichart.com/javascript-line-chart" target=_blank&gt;&lt;/A&gt;&lt;A href="https://demo.scichart.com/javascript-3d-point-line-chart" target=_blank&gt;JavaScript 3D Point Lines Chart example&lt;/A&gt; &lt;EM&gt;from the SciChart.js Demo, showing how to draw a Waterfall chart in 3D using SciChart.js&lt;/EM&gt;&lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pointlinerenderableseries3d.html"&gt;PointLineRenderableSeries3D&lt;/A&gt; requires X,Y,Z data to render, stored in an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries3d.html"&gt;XyzDataSeries3D&lt;/A&gt;. This series supports an optional pointmarker of multiple types, including:&lt;/P&gt;
&lt;H3&gt;3D Marker Types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/spherepointmarker3d.html"&gt;SpherePointMarker3D&lt;/A&gt; - a 3D Sphere at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cubepointmarker3d.html"&gt;CubePointMarker3D&lt;/A&gt; - a 3D Cube at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pyramidpointmarker3d.html"&gt;PyramidPointMarker3D&lt;/A&gt; - a 3D Pyramid at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cylinderpointmarker3d.html"&gt;CylinderPointMarker3D&lt;/A&gt; - a 3D Cylinder at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;Fast 2D Marker types&lt;/H3&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pixelpointmarker3d.html"&gt;PixelPointMarker3D&lt;/A&gt; - a single pixel at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/quadpointmarker.html"&gt;QuadPointMarker3D&lt;/A&gt; - a Quad (flat square) facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/ellipsepointmarker3d.html"&gt;EllipsePointMarker3D&lt;/A&gt; - a flat ellipse facing the camera at each point 
&lt;LI&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/trianglepointmarker3d.html"&gt;TrianglePointMarker3D&lt;/A&gt; - a flat triangle facing the camera at each point &lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring a 3D Point-Line Series&lt;/H2&gt;
&lt;P&gt;To declare a 3D Point-Line Series with use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\PointLineSeries3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/PointLineSeries3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Coloring Individual Line Segments&lt;/H2&gt;
&lt;P&gt;Line segments in SciChart.js 3D points may be colored or scaled individually using the PointMetada3D API. To do this, set a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata3d.html"&gt;PointMetadata3D&lt;/A&gt; instance with property &lt;STRONG&gt;vertexColor&lt;/STRONG&gt; at each data-point in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/xyzdataseries3d.html"&gt;XyzDataSeries3D&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Colors are in UInt Argb format. For this example below we use the helper functions&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#parsecolortouintargb"&gt;parseColorToUIntArgb()&lt;/A&gt; to convert from a JavaScript hex code to UInt32, and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#uintargbcolorlerp"&gt;uintArgbColorLerp()&lt;/A&gt; to linearly interpolate two colours.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\PointLineSeries3DMetadata\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/PointLineSeries3DMetadata/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Note:&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/ipointmetadata3d.html"&gt;IPointMetadata3D&lt;/A&gt;&amp;nbsp;can be any javascript object but the property &lt;STRONG&gt;vertexColor&lt;/STRONG&gt; is used to determine scatter 3D datapoint colour. This is in hex format Alpha, Red, Green, Blue, so 0xFFFF0000 would correspond to red.&amp;nbsp;The helper function&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#parseColorToUIntArgb"&gt;parseColorToUIntArgb&lt;/A&gt; can convert Javascript Hex codes to this format.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="e5fc78ef-475f-45ae-b38c-d42ba9e6ed50" Status="New Topic" CreatedOn="2019-07-22T12:12:50.6890873Z" ModifiedOn="2023-07-16T09:22:55.8536277Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The SurfaceMesh 3D Chart Type" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-16T09:22:55.8536277Z">&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Examples for the Surface Mesh 3D Chart can be found in the SciChart.js Demo app which can be viewed on our website, or downloaged from SciChart.Js.Examples Github Repository&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;A href="https://demo.scichart.com/iframe/javascript-3d-surface-mesh-chart" target=_blank&gt;SciChart.js Demo app&lt;/A&gt; 
&lt;LI&gt;&lt;A href="https://github.com/abtsoftware/scichart.js.examples" target=_blank&gt;All examples on Github&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;3D Surface (topology, grid) Mesh Charts are provided by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt; type. The surface mesh renders a two-dimensional array as a heightmap. This allows a number of configurable chart types in SciChart.js 3D, including:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;Dynamic, updating Surfaces (terrains or height maps) 
&lt;LI&gt;Texturing of surfaces or terrains or height maps 
&lt;LI&gt;Contour mapping or wireframe on terrain or height maps&lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="iFrame" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="iFrameAllow"&gt;&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameWidth"&gt;100%&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameHeight"&gt;500px&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="iFrameUrl"&gt;https://demo.scichart.com/iframe/javascript-3d-surface-mesh-chart&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Background reading: it may be helpful to read the&amp;nbsp;&lt;A href="d53b2f8b-665d-4804-bb72-9e19b3c84ed0"&gt;2D Heatmap documentation&lt;/A&gt;. Heatmaps share a lot of similarities with 3D Surface Mesh charts as both use 2-dimensional number[][] arrays, and both use colorMaps to map cell values to cell color.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Declaring a Surface Mesh with Uniform Data&lt;/H2&gt;
&lt;P&gt;To declare a Surface Mesh with uniform data, use the following code:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\SurfaceMesh3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;this results in the following output&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/SurfaceMesh3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;Breaking this down:&lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;We create a 2-dimensional array of numbers to store the heights (yValues). This is in the format number[][] and contains double precision values. 
&lt;LI&gt;Height values are applied to a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformgriddataseries3d.html"&gt;UniformGridDataSeries3D&lt;/A&gt;. The dataSeries is set on the dataSeries property of a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html"&gt;SurfaceMeshRenderableSeries3D&lt;/A&gt;
&lt;LI&gt;Data-values are mapped to colours using a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/meshcolorpalette.html"&gt;MeshColorPalette&lt;/A&gt;. In this example we use&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/gradientcolorpalette.html"&gt;GradientColorPalette&lt;/A&gt; to map heights to a list of gradient stops.
&lt;LI&gt;Other properties are set to control wireframe, X,Y,Z axis and drawing.&lt;/LI&gt;&lt;/OL&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The dimensions of the yValues height 2D array are [zIndex][xIndex]&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Applying Color Palettes (Heightmaps)&amp;nbsp;to Surfaces&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/uniformgriddataseries3d.html#setyvalues"&gt;yValues&lt;/A&gt; in the UniformGridDataSeries3D are a 2-dimensional array of type number[][]. These are mapped to heights in the 3D world, and are also mapped to colors using the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#meshcolorpalette"&gt;SurfaceMeshRenderableSeries3D.meshColorPalette&lt;/A&gt;&amp;nbsp;property. &lt;/P&gt;
&lt;P&gt;The mapping is similar to the method used by the&amp;nbsp;&lt;A href="5f664da7-9d4d-42e9-bcac-736d69110d96"&gt;2D Heatmap Series&lt;/A&gt;. Let's explain by digging into a simple example below. &lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\SurfaceMesh3DColorMaps\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/SurfaceMesh3DColorMaps/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;What this means:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The GradientStop at Offset = 0 with corresponds to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#minimum"&gt;SurfaceMeshRenderableSeries3D.minimum&lt;/A&gt; value of 0
&lt;LI&gt;The GradientStop at Offset = 1 corresponds to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#maximum"&gt;SurfaceMeshRenderableSeries3D.maximum&lt;/A&gt; value of 14.
&lt;LI&gt;Data within this range will be blended according to the gradient stops between 0 and 1
&lt;LI&gt;Data outside this range will be clamped to the minimum or maximum colors in the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/gradientcolorpalette.html"&gt;GradientColorPalette&lt;/A&gt;&lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Overlaying a Heightmap Legend on the Surface&lt;/H2&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;Adding a Legend to a 3D Surface Mesh can be done with the HeatmapLegend control. See the&amp;nbsp;&lt;A href="https://demo.scichart.com/javascript-3d-surface-mesh-chart" target=_blank&gt;Surface Mesh Demo&lt;/A&gt; at demo.scichart.com for a code sample showing how.&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Configuring the Wireframe on the Surface&lt;/H2&gt;
&lt;P&gt;The wireframe on the Surface Mesh can be configured with the following properties:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#stroke"&gt;stroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke color of the wireframe.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#strokethickness"&gt;strokeThickness&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The strokethickness of the wireframe.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#drawmeshas"&gt;drawMeshAs&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Enumeration defines whether the wireframe is drawn or not. Set to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edrawmeshas.html"&gt;EDrawMeshAs&lt;/A&gt;.&lt;STRONG&gt;WIREFRAME&lt;/STRONG&gt;, &lt;STRONG&gt;SOLID_WIREFRAME&lt;/STRONG&gt; or &lt;STRONG&gt;SOLID_WIREFRAME_WITH_CONTOURS&lt;/STRONG&gt; to enable mesh wireframe drawing.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;H2&gt;Configuring Contours on the Surface&lt;/H2&gt;
&lt;P&gt;Contours may be configured on the mesh by setting additional properties. &lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#contourstroke"&gt;contourStroke&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke color of contours.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#contourstrokethickness"&gt;contourStrokeThickness&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The strokethickness of contours.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#contouroffset"&gt;contourOffset&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A constant offset of where to start calculating contours from&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#contourinterval"&gt;contourInterval&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A factor defining the interval of Y-value between contours&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#drawmeshas"&gt;drawMeshAs&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Enumeration defines whether the contours are&amp;nbsp;drawn or not. Set to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/enums/edrawmeshas.html"&gt;EDrawMeshAs&lt;/A&gt;.&lt;STRONG&gt;CONTOURS&lt;/STRONG&gt;, &lt;STRONG&gt;SOLID_WITH_CONTOURS&lt;/STRONG&gt; or &lt;STRONG&gt;SOLID_WIREFRAME_WITH_CONTOURS&lt;/STRONG&gt; to enable mesh wireframe drawing.&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Additional Surface Mesh Properties&lt;/H2&gt;
&lt;P&gt;Additional properties can be set to control surface mesh rendering and appearance. These are found below.&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#meshpalettemode"&gt;meshPaletteMode&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Defines how cells are filled by palettes. E.g. interpolated, or solid cells, or textured. &lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#drawskirt"&gt;drawSkirt&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When true, draws a wall to zero around the edges of the surface mesh&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD height=49&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#heightscalefactor"&gt;heightScaleFactor&lt;/A&gt;&lt;/TD&gt;
&lt;TD height=49&gt;Scaling factor for heights. Default = 1, when between 0..1 this is a multiplier on the final height of the mesh.&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#lightingfactor"&gt;lightingFactor&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Setting from 0..1&amp;nbsp;which affects surface mesh rendering shininess or lightning. &lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/surfacemeshrenderableseries3d.html#yoffset"&gt;yOffset&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;A constant offset applied to a surface mesh in the Y-direction (height). &lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
          <TopicCategory Id="c23f4a6a-f3e6-4765-b11c-43a4d0dcd48d" AutoIndex="false">
            <Caption m="2020-10-05T15:36:08.0714662Z">ChartModifier3D API</Caption>
            <ChildTopicCategories>
              <TopicCategory Id="d1f8ce98-2a8e-4938-9762-2f8c184ab016" AutoIndex="false">
                <Caption m="2019-07-22T13:16:35.2406484Z">ZoomingPanning</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="02e0ff0e-aa3f-4ed3-8227-4ca9e6217352" Status="New Topic" CreatedOn="2019-07-22T13:17:51.5313463Z" ModifiedOn="2023-07-18T17:01:05.4255143Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="OrbitModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-18T17:01:05.4255143Z">&lt;P&gt;Zooming and Panning a Chart in SciChart.js is achieved by moving the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple panning of the camera to the chart then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;OrbitModifier3D&lt;/A&gt; performs orbital motion of the camera giving the appearance of the chart rotating.&lt;/P&gt;
&lt;H2&gt;Declaring an OrbitModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;OrbitModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;SciChart3DSurface.chartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a group.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\OrbitModifier3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behaviour added to the chart.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/OrbitModifier3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="8cc4d206-bdd4-4d42-8ff4-4c09fddcb317" Status="New Topic" CreatedOn="2019-07-22T13:18:02.3361727Z" ModifiedOn="2023-07-16T09:52:01.771455Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="MouseWheelZoomModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle m="2023-07-15T10:49:38.2161332Z">Mouse Wheel Zoom Modifier 3D</ContentsTitle>
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-16T09:52:01.771455Z">&lt;P&gt;Zooming and Panning a Chart in SciChart.js is achieved by moving the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple zooming in/out of the camera to the chart then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier3d.html"&gt;MouseWheelZoomModifier3D&lt;/A&gt; performs&amp;nbsp;movement of the camera by adjusting the radius proprerty,&amp;nbsp; giving the appearance of the chart zooming.&lt;/P&gt;
&lt;H2&gt;Declaring an MouseWheelZoomModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier3d.html"&gt;MouseWheelZoomModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;SciChart3DSurface.chartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a group.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\MouseWheelZoomModifier3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behaviour added to the chart.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/MouseWheelZoomModifier3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0f6660f9-8d3a-4fa9-b228-36376c2d79d4" Status="New Topic" CreatedOn="2019-07-22T13:18:37.0670368Z" ModifiedOn="2023-07-18T17:05:53.5800105Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="PinchZoomModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-18T17:05:53.5800105Z">&lt;P&gt;Zooming and Panning a Chart in SciChart.js is achieved by moving the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you want to add simple Pinch Zooming via Touch to the chart then you can do so using our ChartModifiers API. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pinchzoommodifier3d.html"&gt;PinchZoomModifier3D&lt;/A&gt; was added to SciChart.js v3.2 and&amp;nbsp;performs adjustment of the camera radius giving the appearance of the chart zooming.&lt;/P&gt;
&lt;H2&gt;Declaring an PinchZoomModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/pinchzoommodifier3d.html"&gt;PinchZoomModifier3D&lt;/A&gt;&amp;nbsp; is as simple as adding one to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;SciChart3DSurface.chartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a group.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\PinchZoom3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behaviour added to the chart.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/PinchZoom3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                  <Topic Id="0f31338f-c416-4129-8e9b-cc357faf1082" Status="New Topic" CreatedOn="2019-07-22T13:18:56.2971418Z" ModifiedOn="2023-07-16T11:16:37.0331738Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ResetCamera3DModifier" BuildFlags="">
                    <Title m="2023-07-15T10:50:24.682461Z">Reset Camera Modifier 3D</Title>
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-16T11:16:37.0331738Z">&lt;P&gt;Zooming and Panning a Chart in SciChart.js is achieved by moving the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.camera&lt;/A&gt; to a new location.&lt;/P&gt;
&lt;P&gt;The article&amp;nbsp;&lt;A href="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1"&gt;"The SciChart3DSurface Camera"&lt;/A&gt; goes into detail how this camera class works and how to manipulate it programatically to achieve various views.&lt;/P&gt;
&lt;P&gt;If you add any zooming or panning to the chart you might want to reset the viewport to it's original state. You can do this with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/resetcamera3dmodifier.html"&gt;ResetCamera3DModifier&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;How this modifier works:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;When the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/resetcamera3dmodifier.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;ResetCamera3DModifier&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;is attached to the chart, it saves the current&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;camera&lt;/A&gt; state.
&lt;LI&gt;An optional destination object of type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/index.html#tcamerastate"&gt;TCameraState&lt;/A&gt;&amp;nbsp;may be set to override this state.
&lt;LI&gt;When you double click on the chart, the &lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/resetcamera3dmodifier.html"&gt;&lt;U&gt;&lt;FONT color=#0066cc&gt;ResetCamera3DModifier&lt;/FONT&gt;&lt;/U&gt;&lt;/A&gt;&amp;nbsp;animates the camera position to the initial camera state.&lt;/LI&gt;&lt;/UL&gt;
&lt;H2&gt;Declaring an ResetCameraModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/resetcamera3dmodifier.html"&gt;ResetCamera3DModifier&lt;/A&gt;&amp;nbsp;is as simple as adding one to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;SciChart3DSurface.chartModifiers&lt;/A&gt; property. This can be done as a single modifier, or as part of a group.&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\ResetCameraModifier3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behaviour added to the chart.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/ResetCameraModifier3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="7a500011-ed7b-43fe-922b-1fabfc61ff6a" AutoIndex="false">
                <Caption m="2019-07-22T13:16:17.711584Z">Tooltips</Caption>
                <ChildTopicCategories />
                <Topics>
                  <Topic Id="7915ac64-f37b-4acd-a5c7-521a0259d63c" Status="New Topic" CreatedOn="2019-07-22T13:17:38.0598147Z" ModifiedOn="2023-07-16T14:12:02.3600005Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="TooltipModifier3D" BuildFlags="">
                    <Title />
                    <ContentsTitle />
                    <Notes></Notes>
                    <TopicSections>
                      <TopicSection Name="BodyText">
                        <Content m="2023-07-16T14:12:02.3600005Z">&lt;P&gt;Tooltips in SciChart.js 3D are performed by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/tooltipmodifier3d.html"&gt;TooltipModifier3D&lt;/A&gt;. This is a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/chartmodifierbase3d.html"&gt;ChartModifierBase3D&lt;/A&gt; derived type which executes on touch over the data point and&amp;nbsp;shows tooltips for the data-points under the mouse.&lt;/P&gt;
&lt;H2&gt;Declaring a TooltipModifier3D&lt;/H2&gt;
&lt;P&gt;Declaring a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/tooltipmodifier3d.html"&gt;TooltipModifier3D&lt;/A&gt; is as simple as adding one to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/orbitmodifier3d.html"&gt;SciChart3DSurface.chartModifiers&lt;/A&gt;&amp;nbsp;property. This can be done as a single modifier, or as part of a group.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Tooltips3D\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following behaviour added to the chart.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Tooltips3D/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Styling the Tooltip Output&lt;/H2&gt;
&lt;H3&gt;Properties which affect Tooltip style&lt;/H3&gt;
&lt;P&gt;Some simple properties which affect the tooltip style are:&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;isCrosshairVisible&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;When true (default), a crosshair is drawn from the hovered datapoint to the far axis wall&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;crosshairStroke&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke color as a Hex code of the crosshair line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;crosshairStrokeThickness&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;The stroke thickness of the crosshair line&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;tooltipContainerBackground&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;The background color of the tooltip container as a Hex code&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;tooltipLegendOffsetX&lt;/STRONG&gt; / Y&lt;/TD&gt;
&lt;TD&gt;Offset in pixels of the tooltip from the hovered datapoint&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;tooltipTextStroke&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;The text color on the tooltip&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;For further customisation of the tooltip content &amp;amp; container, read on.&lt;/P&gt;
&lt;H3&gt;Tooltip Text Formatting&lt;/H3&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Tooltips obey formatting rules on the Axis. These can be defined by setting&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html"&gt;axis.labelProvider.cursorPrecision&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html#cursornumericformat"&gt;cursorNumericFormat&lt;/A&gt; or overriding&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/labelprovider.html#formatcursorlabel"&gt;formatCursorLabel&lt;/A&gt;. For more information on text formatting, see the&amp;nbsp;&lt;A href="8f08a07b-da4d-4872-83de-412850826296"&gt;LabelProvider documentation&lt;/A&gt;.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Modifying the Tooltip Content&lt;/H3&gt;
&lt;P&gt;You can modify the content output by tooltip via the &lt;STRONG&gt;TooltipModifier3D.tooltipDataTemplate&lt;/STRONG&gt; property. This accepts a function with &lt;STRONG&gt;SeriesInfo3D&lt;/STRONG&gt; and&amp;nbsp;&lt;STRONG&gt;TooltipSvgAnnotation3D&lt;/STRONG&gt; arguments where you can access data about the series that was hit.&lt;/P&gt;
&lt;P&gt;Here's an example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Tooltips3DCustomisation\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output.&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Tooltips3DCustomisation/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;The arguments to the &lt;STRONG&gt;tooltipDataTemplate&lt;/STRONG&gt; function are &lt;STRONG&gt;SeriesInfo3D&lt;/STRONG&gt; and &lt;STRONG&gt;TooltipSvgAnnotation3D&lt;/STRONG&gt;. You can access any info about the series, parent chart or axis from SeriesInfo3D. Inspect these types in the TypeDoc to see what properties are available.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Modifying the Tooltip Container&lt;/H3&gt;
&lt;P&gt;The container of the tooltip can be modified as well. Extending the example above further, we override &lt;STRONG&gt;TooltipModifier3D.tooltipSvgTemplate&lt;/STRONG&gt; to customize the background/foreground color before rendering the tooltip.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Tooltips3DCustomContainer\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Tooltips3DCustomContainer/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Placing the Tooltip as a Separate Legend&lt;/H2&gt;
&lt;P&gt;The tooltip can be placed as a legend in the corner of the chart by using the &lt;STRONG&gt;TooltipModifier3D.placementDivId&lt;/STRONG&gt; property. This simply changes the location in the HTML Dom where tooltips are placed. &lt;/P&gt;
&lt;P&gt;Here's a quick example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\Tooltips3DPlacementDiv\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/Tooltips3DPlacementDiv/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                      </TopicSection>
                    </TopicSections>
                    <TopicLinks />
                    <TopicKeywords />
                    <PropertyDefinitionValues />
                    <ExcludedOtherFiles />
                  </Topic>
                </Topics>
              </TopicCategory>
              <TopicCategory Id="7255c88f-abce-425e-9c21-4b50da1d9490" AutoIndex="false">
                <Caption m="2019-07-22T13:16:40.4006076Z">Selection</Caption>
                <ChildTopicCategories />
                <Topics />
              </TopicCategory>
            </ChildTopicCategories>
            <Topics />
          </TopicCategory>
          <TopicCategory Id="e54cd013-f39f-4da3-9c8d-4e0df473d2fe" AutoIndex="false">
            <Caption m="2019-08-04T13:24:13.9029458Z">SciChart3D Basics</Caption>
            <ChildTopicCategories />
            <Topics>
              <Topic Id="e3c137ff-6d4e-44e5-9542-bbb00b65e3c1" Status="New Topic" CreatedOn="2019-08-04T13:24:21.2822269Z" ModifiedOn="2023-07-11T17:34:09.9923763Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="The SciChartSurface Camera" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-11T17:34:09.9923763Z">&lt;P&gt;The property&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.Camera&lt;/A&gt; defines an&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/interfaces/icameracontroller.html"&gt;ICameraController&lt;/A&gt; instance. By default this interface is implemented&amp;nbsp;in&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html"&gt;CameraController&lt;/A&gt;&amp;nbsp;class.&lt;/P&gt;
&lt;P&gt;By default, the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.Camera&lt;/A&gt; is set to a new&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html"&gt;CameraController&lt;/A&gt;&amp;nbsp;instance which defines the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;position&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#target"&gt;target&lt;/A&gt; (in world coordinates) of the camera, and whether the camera is in Perspective or Orthogonal projection modes.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Chart3D_Camera.png"&gt;&lt;/P&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Above: the representation of a Camera in 3D Space. The camera is attached to the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#camera"&gt;SciChart3DSurface.Camera&lt;/A&gt;&amp;nbsp;property and is defined by a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;position&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;target&lt;/A&gt;, plus other properties which define the properties of the viewport.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;Camera Position, Target and other Properties&lt;/H2&gt;
&lt;P&gt;The camera is defined by a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;position&lt;/A&gt;,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;target&lt;/A&gt; which are XYZ vectors in World Coordinates. These can be set in the create() function of SciChart3DSurface or after creation of the chart.&lt;/P&gt;
&lt;P&gt;Other properties which define the viewport as seen by the camera include:&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;TABLE&gt;
&lt;TBODY&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;STRONG&gt;Property&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Description&lt;/STRONG&gt;&lt;/TD&gt;
&lt;TD&gt;&lt;STRONG&gt;Default&lt;/STRONG&gt;&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;position&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The position of the camera as a 3-component vector in World coordinates&lt;/TD&gt;
&lt;TD&gt;-&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#target"&gt;target&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The target (look-at) of the camera as a 3-component vector in World coordinates&lt;/TD&gt;
&lt;TD&gt;-&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orbitalpitch"&gt;orbitalPitch&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The pitch (vertical rotation angle) above or below the target in degrees.&lt;/TD&gt;
&lt;TD&gt;-&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orbitalyaw"&gt;orbitalYaw&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;The yaw (horizontal rotation angle) around the target in degrees&lt;/TD&gt;
&lt;TD&gt;-&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#projectionmode"&gt;projectionMode&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;Defines if the camera is perspectie or orthogonal&lt;/TD&gt;
&lt;TD&gt;Perspective&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#fieldofview"&gt;fieldOfView&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When projectionMode=Perspective, defines the field of view in degrees&lt;/TD&gt;
&lt;TD&gt;60&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#radius"&gt;radius&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;When projectionMode=Perspective get or set the distance of the camera position to target in World units.&lt;/TD&gt;
&lt;TD&gt;-&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthowidth"&gt;orthoWidth&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;defines the width of the projected viewport when in projectionMode Orthogonal&lt;/TD&gt;
&lt;TD&gt;600&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthoheight"&gt;orthoHeight&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;defines the height of the projected viewport when in projectionMode Perspective&lt;/TD&gt;
&lt;TD&gt;400&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#nearclip"&gt;nearClip&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;objects closer than nearClip will be hidden&lt;/TD&gt;
&lt;TD&gt;1&lt;/TD&gt;&lt;/TR&gt;
&lt;TR&gt;
&lt;TD&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#farclip"&gt;farClip&lt;/A&gt;&lt;/TD&gt;
&lt;TD&gt;objects further than farClip will be hidden&lt;/TD&gt;
&lt;TD&gt;4000&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;A full list of properties, methods can be seen at the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html"&gt;CameraController&lt;/A&gt; Typedoc page.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Debugging Camera Properties&lt;/H3&gt;
&lt;P&gt;You can be notified if any property on the camera is updated by subscribing to&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#propertychanged"&gt;camera.propertyChanged&lt;/A&gt;. Note that this event will fire for properties set in code, or user input such as rotating, zooming or panning the chart.&lt;/P&gt;
&lt;P&gt;It's also possible to debug the camera position &amp;amp; properties by calling&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#debugoutput"&gt;camera.debugOutput()&lt;/A&gt;. This logs properties to the console window. The same function also returns an array of strings, which you can use to update the UI.&lt;/P&gt;
&lt;P&gt;Putting these together you can create the following example:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\CameraProperties\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/CameraProperties/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Camera Perspective vs. Orthogonal Mode&lt;/H2&gt;
&lt;P&gt;SciChart.js 3D also has an orthogonal mode. In this mode, there is no perspective effect of lines converging or diverging and all lines in the same X,Y or Z plane are parallel.&lt;/P&gt;
&lt;H3&gt;In Perspective Mode&lt;/H3&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#position"&gt;Camera.position&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#target"&gt;camera.target&lt;/A&gt; are obeyed.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#radius"&gt;Camera.radius&lt;/A&gt; can be get/set to adjust the distance between position &amp;amp; target.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#fieldofview"&gt;Camera.fieldOfView&lt;/A&gt; is obeyed.&lt;/P&gt;
&lt;H3&gt;In Orthogonal Mode&lt;/H3&gt;
&lt;P&gt;Apparent distance to target is defined by&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthowidth"&gt;camera.orthoWidth&lt;/A&gt;&amp;nbsp;and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthoheight"&gt;orthoHeight property&lt;/A&gt;. Camera.radius is ignored.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;when&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#projectionmode"&gt;projectionMode = ECameraProjectionMode.Orthogonal&lt;/A&gt;, instead of a pyramid shape for the camera view, imagine a box with parallel sides. The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthowidth"&gt;orthoWidth&lt;/A&gt; and&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#orthoheight"&gt;orthoHeight&lt;/A&gt; specify the width and height of the view in 3D world coordinates.&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/cameracontroller.html#radius"&gt;Camera.radius&lt;/A&gt; makes no difference to apparent closeness to target as there is no persective (closer objects are not larger).&lt;BR&gt;&lt;IMG border=0 alt="" src="images/Chart3D_Camera_Ortho.png"&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P align=center&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;In this mode, &lt;STRONG&gt;radius&lt;/STRONG&gt; and &lt;STRONG&gt;fieldOfView&lt;/STRONG&gt; are ignored. Update the &lt;STRONG&gt;orthoWidth&lt;/STRONG&gt; and &lt;STRONG&gt;orthoHeight&lt;/STRONG&gt; property to modify apparent zoom. Camera &lt;STRONG&gt;position&lt;/STRONG&gt;, &lt;STRONG&gt;target&lt;/STRONG&gt;&amp;nbsp;as well as &lt;STRONG&gt;orbitalPitch&lt;/STRONG&gt;, &lt;STRONG&gt;orbitalYaw&lt;/STRONG&gt; can be set to define camera orientation.&lt;/P&gt;
&lt;P&gt;Find an example demonstrating camera orthogonal projection below.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\OrthogonalProjection\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/OrthogonalProjection/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="01b31f4f-bced-419a-a232-e11ae17a7255" Status="New Topic" CreatedOn="2019-08-05T08:01:00.2329662Z" ModifiedOn="2023-07-10T15:51:37.3551661Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Creating your first SciChartSurface3D" BuildFlags="">
                <Title m="2020-10-05T15:08:39.2148037Z">Creating your first SciChartSurface3D</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-10T15:51:37.3551661Z">&lt;P&gt;The root 3D chart view is called the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html"&gt;SciChart3DSurface&lt;/A&gt;. This is the JavaScript chart&amp;nbsp;control you will be adding to your applications wherever you need a 3D chart. You can add more than one&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html"&gt;SciChart3DSurface&lt;/A&gt; to an HTML page, you can configure them independently.&lt;/P&gt;
&lt;P&gt;Let's start by declaring one:&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\BasicChart\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output:&lt;/P&gt;&lt;innovasys:widget type="Content from Web Page" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Uri"&gt;http://localhost:3000/3DChartTypes/BasicChart/docembed&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="RootTagName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="ElementId"&gt;codepen-wrapper&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="ElementClassName"&gt;&lt;/innovasys:widgetproperty&gt;&lt;innovasys:widgetproperty layout="inline" name="CreateLocalImages"&gt;False&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Click on &lt;STRONG&gt;Edit in Codepen&lt;/STRONG&gt; above to create a copy of this example in codepen that you can edit. Note in codepen settings the reference to&amp;nbsp;&lt;A href="https://cdn.jsdelivr.net/npm/scichart/index.min.js"&gt;https://cdn.jsdelivr.net/npm/scichart/index.min.js&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Breaking the example down&lt;/H2&gt;
&lt;H3&gt;Referencing SciChart library &amp;amp; Imports&lt;/H3&gt;
&lt;P&gt;First need to have the correct scripts and imports. When loading SciChart.js in pure javascript (no npm), this is done by including index.min.js from &lt;A href="https://www.jsdelivr.com/package/npm/scichart"&gt;jsdelivr.com/package/npm/scichart&lt;/A&gt;&amp;nbsp;and declaring constants as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports for SciChart3D.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;&amp;lt;script src="&lt;A href="https://cdn.jsdelivr.net/npm/scichart/index.min.js"&gt;https://cdn.jsdelivr.net/npm/scichart/index.min.js&lt;/A&gt;"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&lt;BR&gt;const {&lt;BR&gt;&amp;nbsp; SciChart3DSurface,&lt;BR&gt;&amp;nbsp; NumericAxis3D,&lt;BR&gt;&amp;nbsp; Vector3,&lt;BR&gt;&amp;nbsp; SciChartJsNavyTheme,&lt;BR&gt;&amp;nbsp; MouseWheelZoomModifier3D,&lt;BR&gt;&amp;nbsp; OrbitModifier3D,&lt;BR&gt;&amp;nbsp; ResetCamera3DModifier,&lt;BR&gt;} = SciChart;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If using npm, instead you can import types from "scichart":&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports for SciChart3D.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// npm install scichart&lt;BR&gt;&lt;BR&gt;import {&lt;BR&gt;&amp;nbsp; SciChart3DSurface,&lt;BR&gt;&amp;nbsp; NumericAxis3D,&lt;BR&gt;&amp;nbsp; Vector3,&lt;BR&gt;&amp;nbsp; SciChartJsNavyTheme,&lt;BR&gt;&amp;nbsp; MouseWheelZoomModifier3D,&lt;BR&gt;&amp;nbsp; OrbitModifier3D,&lt;BR&gt;&amp;nbsp; ResetCamera3DModifier,&lt;BR&gt;} from "scichart";&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Creating the 3D SciChartSurface&lt;/H3&gt;
&lt;P&gt;Once you have referenced the library and have the correct imports or constants, you can now use SciChart's API to create a 3D chart surface.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports for SciChart3D.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;// Create a SciChart3DSurface in the host &amp;lt;div id=".." /&amp;gt;&lt;BR&gt;const { wasmContext, sciChart3DSurface } = await SciChart3DSurface.create(divElementId, {&lt;BR&gt;&amp;nbsp; // Optional theme&lt;BR&gt;&amp;nbsp; theme: new SciChartJsNavyTheme(),&lt;BR&gt;&amp;nbsp; // Optional dimensions of the axis cube (X,Y,Z) in World coordinates&lt;BR&gt;&amp;nbsp; worldDimensions: new Vector3(300, 200, 300),&lt;BR&gt;&amp;nbsp; // Optional initial camera position and target&lt;BR&gt;&amp;nbsp; cameraOptions: {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; position: new Vector3(300, 300, 300),&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; target: new Vector3(0, 50, 0),&lt;BR&gt;&amp;nbsp; }&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;// SciChart.js 3D supports only a single x,y,z axis. Declare your axis like this&lt;BR&gt;sciChart3DSurface.xAxis = new NumericAxis3D(wasmContext, { axisTitle: "X Axis" });&lt;BR&gt;sciChart3DSurface.yAxis = new NumericAxis3D(wasmContext, { axisTitle: "Y Axis" })&lt;BR&gt;sciChart3DSurface.zAxis = new NumericAxis3D(wasmContext, { axisTitle: "Z Axis" });&lt;BR&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This will now show a 3D chart on the screen with default sizing of the X,Y,Z axis and position of the 3D camera.&lt;/P&gt;
&lt;H3&gt;Serving Wasm (WebAssembly) and Data Files&lt;/H3&gt;
&lt;P&gt;At this point you may get an error in the console depending on your environment:&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Could not load SciChart WebAssembly module. Check your build process and ensure that your scichart3d.wasm, scichart3d.data and scichart3d.js files are from the same version&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If so, find out how to resolve this at the page&amp;nbsp;&lt;A href="e09e931b-15a2-4e8f-ac78-4c2822394a62"&gt;Deploying Wasm and Data files&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;Adding Optional Zoom &amp;amp; Pan Behaviour&lt;/H3&gt;
&lt;P&gt;The last step, In SciChart.js interactivity is provided by ChartModifiers. These are classes which inherit &lt;STRONG&gt;ChartModifierBase&lt;/STRONG&gt; which receive events such as mouseDown, mouseMove, mouseUp. All the zooming, panning, tooltip and interaction behaviour in SciChart.js comes from the modifier API which is shared between 2D and 3D SciChart.&lt;/P&gt;
&lt;P&gt;You can declare and add some built-in modifiers to add zooming, panning behaviour to the chart. Find these below:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Imports for SciChart3D.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;// Optional: add zooming, panning for the example&lt;BR&gt;&amp;nbsp; sciChart3DSurface.chartModifiers.add(&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new MouseWheelZoomModifier3D(), // provides camera zoom on mouse wheel&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new OrbitModifier3D(), // provides 3d rotation on left mouse drag&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; new ResetCamera3DModifier()); // resets camera position on double-click&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Congratulations! You have just created your first SciChart3DSurface!&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="0a96bb3a-89bf-4886-9ad9-e11ad6f32c4e" Status="New Topic" CreatedOn="2019-08-05T08:43:36.5689615Z" ModifiedOn="2023-12-22T13:17:40.7294864Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Coordinates in 3D Space" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-12-22T13:17:40.7294864Z">&lt;H2&gt;Coordinate Systems&lt;/H2&gt;
&lt;H3&gt;The Left Handed Coordinate System (LHS)&lt;/H3&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html"&gt;SciChartSurface3D&lt;/A&gt; by default renders a 3D world using the Left Handed Coordinate system or LHS (as is common to WebGL). In the LHS X and Z form the horizontal plane, and Y is always up YDirection=(0,1,0). It is helpful to think of the 3D world as a 2D Chart in X-Y and Z goes ‘into the screen’.&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Chart3D_LeftHandCoords.png"&gt;&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/chart3d_xyz_axis.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;Left handed coordinate system. X-Z is a horizontal plane, Y is up.&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;World Coordinates&lt;/H2&gt;
&lt;P&gt;World Coordinates is the term used to describe coordinates in the 3D World. These are the raw X,Y,Z coordinates of a vertex. By default the origin (0,0,0) is in the centre, bottom of the chart.&lt;/P&gt;
&lt;H3&gt;WorldDimensions and the Axis Cube&lt;/H3&gt;
&lt;P&gt;The box in the chart is called the Axis Cube. The AxisCube size is defined by the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#worlddimensions"&gt;SciChartSurface3D.WorldDimensions&lt;/A&gt; property.&lt;/P&gt;
&lt;P&gt;The WorldDimensions is a single&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/vector3.html"&gt;Vector3&lt;/A&gt; with X,Y,Z size, but defines the size of a cube as follows:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Chart3D_World_vs_data_coords2.png"&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;How WorldDimensions Relates to the AxisCube in SciChart3D&lt;/STRONG&gt;&lt;/P&gt;
&lt;P&gt;Therefore…&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;The size of the AxisCube in the X Direction extends from -WorldDimensions.X/2 to +WorldDimensions.X/2 
&lt;LI&gt;The size of the AxisCube in the Y Direction extends from 0 to +WorldDimensions.Y 
&lt;LI&gt;The size of the AxisCube in the Z Direction extends from -WorldDimensions.Z/2 to +WorldDimensions.Z/2 &lt;/LI&gt;&lt;/UL&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;NOTE: By default,&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#worlddimensions"&gt;SciChart3DSurface.WorldDimensions&lt;/A&gt; property is set to X=300, Y=200, Z=300.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Setting the WorldDimensions Property&lt;/H3&gt;
&lt;P&gt;To set the WorldDimensions Property, simply use the following code to define a Vector3 (3-component vector):&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Setting WorldDimensions&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;import { SciChart3DSurface, Vector3 } from "scichart";&lt;BR&gt;&lt;BR&gt;// World dimensions can be set at creation of the chart&lt;BR&gt;const { wasmContext, sciChart3DSurface } = await SciChart3DSurface.create(divElementId, {&lt;BR&gt;&amp;nbsp; // Optional dimensions of the axis cube (X,Y,Z) in World coordinates&lt;BR&gt;&amp;nbsp; worldDimensions: new Vector3(300, 200, 300),&lt;BR&gt;});&lt;BR&gt;&lt;BR&gt;// Or, it can be set later&lt;BR&gt;sciChart3DSurface.worldDimensions = new Vector3(300, 200, 300);&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Data Coordinates&lt;/H2&gt;
&lt;P&gt;By contrast to WorldCoordinates, which are absolute coordinates in the 3D World, in SciChart 3D there is the concept of Data Coordinates.&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;All Data in SciChart3D is provided in Data Coordinates. They are converted to World Coordinates by SciChart 3D for display on the chart.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Data Coordinates are measured on an Axis, for example, the YAxis (which is UP) might have a size of 200 in the World Coordinates, but might display a VisibleRange of 0...10. Therefore, Data which falls int he range 0...10 will be spaced on this axis from 0...200 World Coordinates.&lt;/P&gt;
&lt;P&gt;The difference between World Coordinates, Data Coordinates is shown in the following diagram:&lt;/P&gt;
&lt;P align=center&gt;&lt;IMG border=0 alt="" src="images/Chart3D_World_vs_data_coords.png"&gt;&lt;/P&gt;
&lt;DIV align=left&gt; &lt;/DIV&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P align=center&gt;&lt;STRONG&gt;How WorldDimensions Relates to the AxisCube in SciChart3D&lt;/STRONG&gt;&lt;/P&gt;
&lt;H2&gt;Converting from World to Data Coordinates&lt;/H2&gt;
&lt;P&gt;The conversion between Data Coordinates and World Coordinates is done by the Axis. For example. the following code converts from Data to World Coordinates on the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#xaxis"&gt;SciChartSurface3D.xAxis&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Example Code Tab Strip" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code From File (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Javascript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JS&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Filename"&gt;..\src\3DChartTypes\CoordinateConversion\demo.js&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="Region"&gt;ExampleA&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="1166d665-4a40-4ee8-8ec8-b40a1db4d7c5" Status="New Topic" CreatedOn="2019-08-13T10:53:13.5002512Z" ModifiedOn="2019-08-13T11:58:48.7966745Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="Chart 3D Builders Helper Classes" BuildFlags="">
                <Title />
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2019-08-13T11:58:48.7966745Z">&lt;P&gt;Like&amp;nbsp;&lt;A href="2142a982-921e-4adf-adfa-77c7cc635c5c"&gt;2D Chart&lt;/A&gt; SciChart Android 3D&amp;nbsp;provides Builder API for creation and configuring of a&amp;nbsp;&lt;A href="SciChart.Charting3D~com.scichart.charting3d.visuals.SciChartSurface3D.html"&gt;SciChartSurface3D&lt;/A&gt;. They follow the &lt;STRONG&gt;XXXBuilder&lt;/STRONG&gt; naming pattern and allow to initialize virtually anything in an easier and more convenient way. Different property of classes can be preset via the &lt;STRONG&gt;withXXX(…)&lt;/STRONG&gt; methods&amp;nbsp;of the&amp;nbsp;helpers, a.k.a. "&lt;EM&gt;chart&lt;/EM&gt; &lt;EM&gt;builders&lt;/EM&gt;".&lt;/P&gt;
&lt;H2&gt;Referencing SciChart Builders&lt;/H2&gt;
&lt;P&gt;SciChart builders for&amp;nbsp;3D charts&amp;nbsp;provided as seperate library which is called 'extensions3d'. If you&amp;nbsp;want to use&amp;nbsp;then you'll need to&amp;nbsp;add it into your project as&amp;nbsp;dependency. This is available from our&amp;nbsp;&lt;A href="https://www.myget.org/feed/abtsoftware/package/maven/com.scichart.library/extensions" target=_blank&gt;Maven feed&lt;/A&gt;, or in the Android Charts SDK at &lt;A href="https://www.scichart.com/downloads"&gt;www.scichart.com/downloads&lt;/A&gt;.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Adding extension library&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="LanguageName"&gt;Gradle&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;dependencies { &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart3D libraries as module dependencies&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'charting-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'charting3d-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'drawing-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'data-release', ext:'aar')&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'core-release', ext:'aar'&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Declare SciChart extension library as module dependency&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;implementation (name:'extensions-release', ext:'aar')&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Declare SciChart3D extension library as module dependency&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; implementation (name:'extensions3d-release', ext:'aar')&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Using Chart Builders in Code&lt;/H2&gt;
&lt;P&gt;The main chart builder class is called &lt;STRONG&gt;SciChart3DBuilder&lt;/STRONG&gt;. It acts as a factory&amp;nbsp;of builders of other types, representing different&amp;nbsp;chart aspects.&lt;/P&gt;
&lt;P&gt;Using chart builders,&amp;nbsp;the code snippet for chart initialization from the section above can be rewritten as follows:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Example&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;Java&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;@Override&lt;BR&gt;public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Inflate the layout from “base_scichart_layout.xml”&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; View view = inflater.inflate(R.layout.base_scichart_layout, container, false);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // find the surface by id&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChartSurface3D surface3d = view.findViewById(R.id.chart);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // need to init SciChart3DBuilder class with application context before using&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; SciChart3DBuilder.init(this);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // obtain the SciChart3DBuilder instance&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final SciChart3DBuilder sciChart3dBuilder = SciChart3DBuilder.instance();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create numeric X axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D xAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(-5, 15)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a numeric Y axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D yAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(0, 100)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create a numeric Z axis&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; final IAxis3D zAxis = sciChart3dBuilder.newNumericAxis3D()&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .withVisibleRange(0, 100)&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // create interactivity modifiers&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; ModifierGroup3D chartModifiers = sciChart3dBuilder.newModifierGroupWithDefaultModifiers().build();&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // set axes for 3D chart&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setXAxis(xAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setYAxis(yAxis);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; surface3d.setZAxis(zAxis);&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // add the interactions to the ChartModifiers collection of the surface&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; Collections.addAll(surface3d.getChartModifiers(), chartModifiers);&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; return view;&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;Usually this approach to chart&amp;nbsp;initialization&amp;nbsp;results in more concise and elegent code. It is preferred for the vast majority of examples from the&amp;nbsp;&lt;A href="https://www.scichart.com/android-chart-examples/"&gt;Android Examples Suite&lt;/A&gt;. We would recommend using it in applications too. However, it doesn't give any other benefits except those stated above, so the standard way of objects initialization is equally fine.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
              <Topic Id="ff022bdc-cb4d-4a6b-a941-6a84a59b0f04" Status="New Topic" CreatedOn="2023-07-10T15:36:18.8282114Z" ModifiedOn="2023-07-10T15:52:16.0517896Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="CreateVsCreateSingle3D" BuildFlags="">
                <Title m="2023-07-10T15:36:37.1898397Z">SciChart3DSurface.create() vs. createSingle()</Title>
                <ContentsTitle />
                <Notes></Notes>
                <TopicSections>
                  <TopicSection Name="BodyText">
                    <Content m="2023-07-10T15:52:16.0517896Z">&lt;P&gt;Instantiating a new&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html"&gt;SciChart3DSurface&lt;/A&gt; (a new Chart) is accomplished with the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#create" target=_blank&gt;SciChart3DSurface.create()&lt;/A&gt; function. We have some variations on this function which can be used in different scenarios. We'll go through these as well as WebAssembly (wasm) file loading below.&lt;/P&gt;
&lt;H2&gt;SciChart3DSurface.create()&lt;/H2&gt;
&lt;P&gt;The first function to create a 3D chart in SciChart.js is simply&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#create" target=_blank&gt;SciChart3DSurface.create()&lt;/A&gt;. This is an &lt;STRONG&gt;asynchronous static function&lt;/STRONG&gt; which places a SciChart3DSurface (a single chart with X, Y, Z axis and one to many series) into the HTML Dom. It will also load WebAssembly files and initialise our 3D WebGL engine for the first chart load.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChart3DSurface.create()&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChart3DSurface} from "scichart";&lt;/P&gt;
&lt;P&gt;async function initSciChart1() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assumes a div in your HTML &amp;lt;div id="scichart-div-1"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChart3DSurface, wasmContext } = await SciChart3DSurface.create("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Now manipulate the SciChart3DSurface, adding axis, series and more&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When&amp;nbsp;you exit the page and no longer&amp;nbsp;want the chart to draw, call .delete() to free memory&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChart3DSurface.delete();&lt;BR&gt;}&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#create" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#create"&gt;SciChart3DSurface.create()&lt;/A&gt; &lt;STRONG&gt;uses a single, shared WebGL context for all chart surfaces on the screen&lt;/STRONG&gt;. This bypasses the maximum number of WebGL contexts and you can have 10, 20, 30 or even 100 charts on an HTML page. The only limit is performance of the browser in rendering the chart surfaces. &lt;STRONG&gt;For a higher performance solution which uses one WebGL context per chart, see&amp;nbsp;&lt;/STRONG&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#createsingle" target=_blank&gt;&lt;/A&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#createSingle"&gt;SciChart3DSurface.createSingle()&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;STRONG&gt;Ensure that you await SciChart3DSurface.create().&lt;/STRONG&gt; The return type is an object containing SciChart3DSurface and its wasmContext (WebAssembly Context) which must be passed to other chart parts on this SciChart3DSurface.&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;
&lt;H2&gt;SciChart3DSurface.createSingle()&lt;/H2&gt;
&lt;P&gt;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichart3dsurface.html#createSingle" target=_blank&gt;SciChart3DSurface.createSingle()&lt;/A&gt; is also an asynchronous static function which places a SciChart3DSurface into the DOM. However, this variation forces one WebGL context per chart. This can improve performance in multi-chart scenarios but you must obey the WebGL Context Limits per browser. More on this in our&amp;nbsp;&lt;A href="31c1fa0b-34ae-472f-b888-2de129265d50"&gt;Performance Tips&lt;/A&gt; article.&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;SciChart3DSurface.createsingle()&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import {SciChartSurface} from "scichart";&lt;/P&gt;
&lt;P&gt;async function initSciChart1() {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Assumes a div in your HTML &amp;lt;div id="scichart-div-1"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const { sciChart3DSurface, wasmContext } = await SciChart3DSurface.createSingle("scichart-div-id");&lt;/P&gt;
&lt;P&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Now manipulate the SciChart3DSurface, adding axis, series and more&lt;BR&gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; // When you exit the page and no longer want the chart to draw, call .delete() to free memory&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; sciChart3DSurface.delete();&lt;BR&gt;}&amp;nbsp;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H3&gt;Resolving Wasm errors on load&lt;/H3&gt;
&lt;P&gt;If you get an error when loading a SciChart3DSurface as follows:&lt;/P&gt;&lt;innovasys:widget type="Caution Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;Could not load SciChart WebAssembly module. Check your build process and ensure that your scichart3d.wasm, scichart3d.data and scichart3d.js files are from the same version&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;If so, find out how to resolve this at the page&amp;nbsp;&lt;A href="e09e931b-15a2-4e8f-ac78-4c2822394a62"&gt;Deploying Wasm and Data files&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
                  </TopicSection>
                </TopicSections>
                <TopicLinks />
                <TopicKeywords />
                <PropertyDefinitionValues />
                <ExcludedOtherFiles />
              </Topic>
            </Topics>
          </TopicCategory>
        </ChildTopicCategories>
        <Topics />
      </TopicCategory>
      <TopicCategory Id="09daf6b9-8b2d-4bc0-a3ff-19cc199120c9" AutoIndex="false">
        <Caption m="2022-08-16T21:23:55.3568943Z">Worked Examples</Caption>
        <ChildTopicCategories />
        <Topics>
          <Topic Id="384b299e-39bf-4806-bf38-b1e5f00ba51e" Status="New Topic" CreatedOn="2022-08-16T15:49:55.0306836Z" ModifiedOn="2022-08-17T10:40:59.2442847Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="HowToPanChartWithMousewheel" BuildFlags="">
            <Title m="2022-08-16T15:50:03.7806083Z">How to: Pan the Chart with the MouseWheel</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-08-17T10:40:59.2442847Z">&lt;H2&gt;Question&lt;/H2&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;SciChart.js Forums:&lt;/STRONG&gt; &lt;A href="https://www.scichart.com/questions/js/zoom-and-pan-behaviour" target=_blank&gt;&lt;STRONG&gt;Zoom and Pan Behaviour&lt;/STRONG&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;Currently when we scroll the mouse pointer the zoom level is increasing/decreasing and when we click and drag the pan the chart. What I want is when we scroll the chart it should change the visible range (Pan chart), and clicking and selecting the area need to zoom like RubberBandXyZoomModifier. But I need to zoom only the X axis. Y axis should be the same as before zoom. Is this possible with SciChart.js?&lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Discussion&lt;/H2&gt;
&lt;P&gt;Read the discussion at&amp;nbsp;&lt;A href="https://www.scichart.com/questions/js/zoom-and-pan-behaviour" target=_blank&gt;SciChart.js Forum: Zoom and Pan Behaviour&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Full Solution&lt;/H2&gt;
&lt;P&gt;We posted a solution on&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/CustomerExamples/MouseWheelPanning" target=_blank&gt;Github here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;To add the MouseWheel panning behaviour to the chart, we start off with a&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier&lt;/A&gt;, but we override the function modifierMouseWheel.&lt;/P&gt;
&lt;P&gt;In here we perform a scroll on the X-Axis using the mouseWheelDelta value:&lt;/P&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Tab Caption&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;import { MouseWheelZoomModifier } from "scichart/Charting/ChartModifiers/MouseWheelZoomModifier";&lt;BR&gt;import { EClipMode } from "scichart/Charting/Visuals/Axis/AxisBase2D";&lt;/P&gt;
&lt;P&gt;const mouseWheelModifier = new MouseWheelZoomModifier();&lt;BR&gt;mouseWheelModifier.modifierMouseWheel = (args) =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; const delta = args.mouseWheelDelta * 0.1;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; mouseWheelModifier.parentSurface.xAxes.asArray().forEach(x =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; x.scroll(delta, EClipMode.None);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;};&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the panning (scrolling) on mousewheel in the chart.&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/mouse-wheel-panning-scrolling-scichartjs.gif"&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;This example makes use of JavaScript's ability to override a function. By assigning&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermousewheel"&gt;mouseWheelModifier.modifierMouseWheel&lt;/A&gt; = (args) =&amp;gt; { } we are able to complete override the default mouse wheel handling.&lt;/P&gt;
&lt;P&gt;The args are of type&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/modifiermouseargs.html"&gt;ModifierMouseArgs&lt;/A&gt;. This contains a property for the mouseWheelDelta.&lt;/P&gt;
&lt;P&gt;Finally, we can access the parent SciChartSurface via the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#parentsurface"&gt;mouseWheelModifier.parentSurface&lt;/A&gt; property, then access the&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/scichartsurface.html#xaxes"&gt;SciChartSurface.xaxes&lt;/A&gt; collection and finally call&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#scroll"&gt;AxisBase2D.scroll()&lt;/A&gt;.&lt;/P&gt;
&lt;H3&gt;The MouseWheelZoomModifier documentation page&lt;/H3&gt;
&lt;P&gt;To find out about the capabilities of the MouseWheelZoomModifier, see it's dedicated documentation page here.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;&lt;A href="30ee889c-86dd-41d2-bc3f-ec0415855433"&gt;The MousewheelZoomModifier documentation&lt;/A&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&lt;/P&gt;
&lt;H3&gt;MouseWheelZoomModifier functions and properties&lt;/H3&gt;
&lt;P&gt;For a list of available functions on&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html"&gt;MouseWheelZoomModifier&lt;/A&gt; that can be overridden see the TypeDoc page for this type.&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#applytheme"&gt;apply&lt;WBR&gt;Theme&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#delete"&gt;delete&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#getallseries"&gt;get&lt;WBR&gt;All&lt;WBR&gt;Series&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#getaxissize"&gt;get&lt;WBR&gt;Axis&lt;WBR&gt;Size&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#getincludedxaxis"&gt;get&lt;WBR&gt;IncludedXAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#getincludedyaxis"&gt;get&lt;WBR&gt;IncludedYAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#growby"&gt;grow&lt;WBR&gt;By&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#includeallaxes"&gt;include&lt;WBR&gt;All&lt;WBR&gt;Axes&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#includexaxis"&gt;includeXAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#includeyaxis"&gt;includeYAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifierdoubleclick"&gt;modifier&lt;WBR&gt;Double&lt;WBR&gt;Click&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermousedown"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Down&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermouseenter"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Enter&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermouseleave"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Leave&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermousemove"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Move&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermouseup"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Up&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifiermousewheel"&gt;modifier&lt;WBR&gt;Mouse&lt;WBR&gt;Wheel&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#modifierpointercancel"&gt;modifier&lt;WBR&gt;Pointer&lt;WBR&gt;Cancel&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#notifypropertychanged"&gt;notify&lt;WBR&gt;Property&lt;WBR&gt;Changed&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#onattach"&gt;on&lt;WBR&gt;Attach&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#onattachseries"&gt;on&lt;WBR&gt;Attach&lt;WBR&gt;Series&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#ondetach"&gt;on&lt;WBR&gt;Detach&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#ondetachseries"&gt;on&lt;WBR&gt;Detach&lt;WBR&gt;Series&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#onparentsurfacerendered"&gt;on&lt;WBR&gt;Parent&lt;WBR&gt;Surface&lt;WBR&gt;Rendered&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#performpan"&gt;perform&lt;WBR&gt;Pan&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#performzoom"&gt;perform&lt;WBR&gt;Zoom&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#setparentsurface"&gt;set&lt;WBR&gt;Parent&lt;WBR&gt;Surface&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#testpropertychanged"&gt;test&lt;WBR&gt;Property&lt;WBR&gt;Changed&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/mousewheelzoommodifier.html#tojson"&gt;toJSON&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;H3&gt;AxisBase2D functions and properties&lt;/H3&gt;
&lt;P&gt;For a list of further functions on the axis see&amp;nbsp;&lt;A href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html"&gt;AxisBase&lt;/A&gt; in the TypeDoc.&lt;/P&gt;
&lt;UL class=tsd-index-list style='LIST-STYLE-TYPE: none; FONT-SIZE: 16px; FONT-FAMILY: "Segoe UI", sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: 400; COLOR: rgb(34,34,34); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; ORPHANS: 2; WIDOWS: 2; MARGIN: 1em 0px; LETTER-SPACING: normal; LINE-HEIGHT: 1.33em; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; column-count: 3; column-gap: 20px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial'&gt;
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#animatevisiblerange"&gt;animate&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#applytheme"&gt;apply&lt;WBR&gt;Theme&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#clearcoordcalccache"&gt;clear&lt;WBR&gt;Coord&lt;WBR&gt;Calc&lt;WBR&gt;Cache&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#coercezerovisiblerange"&gt;coerce&lt;WBR&gt;Zero&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#delete"&gt;delete&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#draw"&gt;draw&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawaxisbands"&gt;draw&lt;WBR&gt;Axis&lt;WBR&gt;Bands&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawaxisbandsandgridlines"&gt;draw&lt;WBR&gt;Axis&lt;WBR&gt;Bands&lt;WBR&gt;And&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawdebug"&gt;draw&lt;WBR&gt;Debug&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#drawgridlines"&gt;draw&lt;WBR&gt;Grid&lt;WBR&gt;Lines&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getcurrentcoordinatecalculator"&gt;get&lt;WBR&gt;Current&lt;WBR&gt;Coordinate&lt;WBR&gt;Calculator&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getcurrentcoordinatecalculatorinternal"&gt;get&lt;WBR&gt;Current&lt;WBR&gt;Coordinate&lt;WBR&gt;Calculator&lt;WBR&gt;Internal&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getdefaultnonzerorange"&gt;get&lt;WBR&gt;Default&lt;WBR&gt;Non&lt;WBR&gt;Zero&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getisvalidfordrawing"&gt;get&lt;WBR&gt;IsValid&lt;WBR&gt;For&lt;WBR&gt;Drawing&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getisxcategoryaxis"&gt;get&lt;WBR&gt;IsXCategory&lt;WBR&gt;Axis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getlabels"&gt;get&lt;WBR&gt;Labels&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getmaxautoticks"&gt;get&lt;WBR&gt;Max&lt;WBR&gt;Auto&lt;WBR&gt;Ticks&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getmaxxrange"&gt;get&lt;WBR&gt;MaxXRange&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getmaximumrange"&gt;get&lt;WBR&gt;Maximum&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getticksmaxsize"&gt;get&lt;WBR&gt;Ticks&lt;WBR&gt;Max&lt;WBR&gt;Size&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getwindowedyrange"&gt;get&lt;WBR&gt;WindowedYRange&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getxdatarange"&gt;getXData&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#getxvisiblerange"&gt;getXVisible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#hasdefaultvisiblerange"&gt;has&lt;WBR&gt;Default&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#hasvalidvisiblerange"&gt;has&lt;WBR&gt;Valid&lt;WBR&gt;Visible&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#isvalidrange"&gt;is&lt;WBR&gt;Valid&lt;WBR&gt;Range&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#measure"&gt;measure&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-overwrite tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#notifypropertychanged"&gt;notify&lt;WBR&gt;Property&lt;WBR&gt;Changed&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#onattach"&gt;on&lt;WBR&gt;Attach&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#preparerenderdata"&gt;prepare&lt;WBR&gt;Render&lt;WBR&gt;Data&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#scale"&gt;scale&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#scroll"&gt;scroll&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class tsd-is-inherited tsd-is-protected" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#setisxaxis"&gt;set&lt;WBR&gt;IsXAxis&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#tojson"&gt;toJSON&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: none; POSITION: relative; COLOR: rgb(77,166,255); PADDING-LEFT: 20px; DISPLAY: block; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#zoom"&gt;zoom&lt;/A&gt; 
&lt;LI class="tsd-kind-method tsd-parent-kind-class" style="break-inside: avoid"&gt;&lt;A class=tsd-kind-icon style="TEXT-DECORATION: underline; POSITION: relative; COLOR: rgb(77,166,255); OUTLINE-WIDTH: 0px; OUTLINE-STYLE: none; PADDING-LEFT: 20px; DISPLAY: block; OUTLINE-COLOR: invert; TEXT-INDENT: -20px" href="https://www.scichart.com/documentation/js/current/typedoc/classes/axisbase2d.html#zoomby"&gt;zoom&lt;WBR&gt;By&lt;/A&gt; &lt;/LI&gt;&lt;/UL&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="33c0efb1-e43e-4fb0-bd5f-e145b8c07cbb" Status="New Topic" CreatedOn="2022-08-16T21:24:16.8696688Z" ModifiedOn="2022-08-17T08:34:06.5529341Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="WorkedExamplesHome" BuildFlags="">
            <Title m="2022-08-16T21:24:38.3580873Z">How do I? ... Worked Examples with SciChart.js</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-08-17T08:34:06.5529341Z">&lt;P&gt;SciChart.js is more than just a javascript chart library. Our API is designed to be flexible, powerful and deeply customisable, enabling real-world applications with interactive &amp;amp; visual charts.&lt;/P&gt;
&lt;P&gt;This section contains some workarounds provided after user requests. For example how to have a custom interaction, customise a legend or a tooltip, or achieve something different to our out-of-the-box features.&lt;/P&gt;
&lt;H2&gt;How to Submit&lt;/H2&gt;
&lt;H3&gt;If you have a Question or Requirement&lt;/H3&gt;
&lt;P&gt;If you have&amp;nbsp;a question "How do I do this in SciChart.js", go to our &lt;SPAN style="COLOR: rgb(255,0,0)"&gt;forums &lt;/SPAN&gt;and ask a question. Be specific about what you want to achieve, and what you've tried so far.&lt;/P&gt;
&lt;H3&gt;If you have a Workaround or Solution&lt;/H3&gt;
&lt;P&gt;You can email us your solutions to &lt;A href="mailto:support@scichart.com"&gt;support@scichart.com&lt;/A&gt;!&lt;/P&gt;
&lt;P&gt;Or, submit a PR to &lt;A href="https://github.com/abtsoftware/scichart.js.examples"&gt;https://github.com/abtsoftware/scichart.js.examples&lt;/A&gt;&amp;nbsp;under the folder Sandbox/CustomerExamples&lt;/P&gt;
&lt;H2&gt;Table of Contents&lt;/H2&gt;
&lt;P&gt;Below find the table of contents for worked examples published (so far)!&lt;/P&gt;&lt;innovasys:widget type="Mini Table of Contents" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="tocnodeid"&gt;c4e7c1de-d106-4ece-9c01-4a8b6d81cc24&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;&amp;nbsp;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
          <Topic Id="62d0aa25-e713-442c-bd55-da924e96cca4" Status="New Topic" CreatedOn="2022-08-17T10:41:56.4881975Z" ModifiedOn="2022-08-17T10:50:30.0451442Z" PageTypeName="" AutoIndex="true" HelpContextIds="" Name="ExportImageFromChart" BuildFlags="">
            <Title m="2022-08-17T10:42:13.4278959Z">How to: Export an Image From Chart</Title>
            <ContentsTitle />
            <Notes></Notes>
            <TopicSections>
              <TopicSection Name="BodyText">
                <Content m="2022-08-17T10:50:30.0451442Z">&lt;H2&gt;Question&lt;/H2&gt;&lt;innovasys:widget type="Note Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt; 
&lt;P&gt;&lt;STRONG&gt;SciChart.js Forums:&lt;/STRONG&gt; &lt;A href="https://www.scichart.com/questions/js/zoom-and-pan-behaviour" target=_blank&gt;&lt;A href="https://www.scichart.com/questions/js/how-do-you-export-or-save-a-chart-as-an-image-in-js-library" target=_blank&gt;How do you export or save a chart as an image in JS library?&lt;/A&gt;&lt;/A&gt;&lt;/P&gt;
&lt;P&gt;&lt;EM&gt;Fairly simple question: How do you export or save a chart as an image in the SciChart.js JavaScript Chart library? &lt;/EM&gt;&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;H2&gt;Discussion&lt;/H2&gt;
&lt;P&gt;Read the discussion at&amp;nbsp;&lt;A href="https://www.scichart.com/questions/js/how-do-you-export-or-save-a-chart-as-an-image-in-js-library" target=_blank&gt;SciChart.js Forum: How do you export or save a chart as an image in JS library?&lt;/A&gt;&lt;/P&gt;
&lt;H2&gt;Full Solution&lt;/H2&gt;
&lt;P&gt;We posted a solution on&amp;nbsp;&lt;A href="https://github.com/ABTSoftware/SciChart.JS.Examples/tree/master/Sandbox/CustomerExamples" target=_blank&gt;Github here&lt;/A&gt;.&lt;/P&gt;
&lt;P&gt;This example uses dom-to-image npm module to export the chart to PNG image. This package exports html (used for legends), svg (used for annotations) and canvas (used everything else) elements. &lt;/P&gt;
&lt;P&gt;To download the image we use the file-saver module. &lt;/P&gt;&lt;innovasys:widget type="Tip Box" layout="block"&gt;&lt;innovasys:widgetproperty layout="block" name="Content"&gt;For the export to work correctly &lt;STRONG&gt;position: relative&lt;/STRONG&gt; should be set on the chart root element. &lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;&lt;innovasys:widget type="Colorized Example Code (Tab Style)" layout="block"&gt;&lt;innovasys:widgetproperty layout="inline" name="Title"&gt;Tab Caption&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="inline" name="LanguageName"&gt;JavaScript&lt;/innovasys:widgetproperty&gt; &lt;innovasys:widgetproperty layout="block" name="Content"&gt;
&lt;P&gt;&amp;lt;!-- Html --&amp;gt;&lt;BR&gt;&amp;lt;html lang="en-us"&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;head&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta charset="utf-8" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type" /&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;title&amp;gt;Demo VS Code TypeScript Debugging&amp;lt;/title&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;script async type="text/javascript" src="bundle.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;style&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; body {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; font-family: "Arial";&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/style&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;/head&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;body&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;h1&amp;gt;Export Chart to Image Demo&amp;lt;/h1&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;p&amp;gt;Click buttons to export the chart as PNG. &amp;lt;br/&amp;gt;Drag the pulsing green CustomAnnotation and export again.&amp;lt;/p&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div style="margin-bottom: 10px; display: flex"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;button id="export_append"&amp;gt;Generate PNG and append&amp;lt;/button&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;button id="export_download" style="margin-left: 6px"&amp;gt;Download PNG&amp;lt;/button&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;!-- the Div where the SciChartSurface will reside --&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="scichart-root" style="width: 800px; height: 600px; position: relative"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;div id="export_image_result" style="margin-top: 10px"&amp;gt;&amp;lt;/div&amp;gt;&lt;BR&gt;&amp;nbsp; &amp;lt;/body&amp;gt;&lt;BR&gt;&amp;lt;/html&amp;gt;&lt;BR&gt;&lt;BR&gt;// JavaScript&lt;BR&gt;// &lt;BR&gt;const { sciChartSurface, wasmContext } = await SciChartSurface.create(chartDivId);&lt;/P&gt;
&lt;P&gt;// Create an X,Y Axis and add to the chart&lt;BR&gt;const xAxis = new NumericAxis(wasmContext);&lt;/P&gt;
&lt;P&gt;const yAxis = new NumericAxis(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; axisAlignment: EAxisAlignment.Left,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; labelStyle: { color: 'white' },&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; visibleRange: new NumberRange(0, 8)&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.xAxes.add(xAxis);&lt;BR&gt;sciChartSurface.yAxes.add(yAxis);&lt;/P&gt;
&lt;P&gt;const customAnnotation1 = new CustomAnnotation({&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; x1: 3,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; y1: 6,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; isEditable: true,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; xCoordShift: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; yCoordShift: 0,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; horizontalAnchorPoint: EHorizontalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; verticalAnchorPoint: EVerticalAnchorPoint.Center,&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; svgString: `&amp;lt;svg id="two" width="50" height="50"&amp;nbsp; xmlns="&lt;A href="http://www.w3.org/2000/svg"&gt;http://www.w3.org/2000/svg&lt;/A&gt;"&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;rect width="100%" height="100%" style="fill:#00ff00"&amp;gt;&amp;lt;animate attributeName="rx" values="0;25;0" dur="2s" repeatCount="indefinite" /&amp;gt;&amp;lt;/rect&amp;gt;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;lt;/svg&amp;gt;`&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;const lineSeries1 = new FastLineRenderableSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; stroke: 'white',&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeries: new XyDataSeries(wasmContext, {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; xValues: [1, 2, 3, 4, 5],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; yValues: [3, 4, 3, 4, 3],&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; dataSeriesName: 'white series'&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;sciChartSurface.renderableSeries.add(lineSeries1);&lt;BR&gt;sciChartSurface.annotations.add(customAnnotation1);&lt;/P&gt;
&lt;P&gt;sciChartSurface.chartModifiers.add(new MouseWheelZoomModifier(), new ZoomExtentsModifier(), new LegendModifier());&lt;/P&gt;
&lt;P&gt;document.getElementById('export_append').addEventListener('click', () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; domtoimage&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .toPng(document.getElementById(chartDivId))&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .then(function(dataUrl: any) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const img = new Image();&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; img.src = dataUrl;&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; const resElement = document.getElementById('export_image_result');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resElement.innerHTML = '';&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; resElement.appendChild(img);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; })&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .catch(function(error: any) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; console.error('oops, something went wrong!', error);&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;});&lt;/P&gt;
&lt;P&gt;document.getElementById('export_download').addEventListener('click', () =&amp;gt; {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; domtoimage.toBlob(document.getElementById(chartDivId)).then(function(blob: any) {&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; saveAs(blob, 'scichart.png');&lt;BR&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; });&lt;BR&gt;});&lt;/P&gt;&lt;/innovasys:widgetproperty&gt;&lt;/innovasys:widget&gt;
&lt;P&gt;This results in the following output&lt;/P&gt;
&lt;P&gt;&lt;IMG border=0 alt="" src="images/javascript-chart-export-to-image.png"&gt;&lt;/P&gt;
&lt;H2&gt;Further Reading&lt;/H2&gt;
&lt;P&gt;This example makes use of the&amp;nbsp;&lt;A href="https://www.npmjs.com/package/dom-to-image" target=_blank&gt;dom-to-image package on npm&lt;/A&gt;. This is a library which turns arbitrary DOM node into a vector (SVG) or raster (PNG, JPEG) image. &lt;/P&gt;
&lt;P&gt;The&amp;nbsp;&lt;A href="https://www.npmjs.com/package/file-saver" target=_blank&gt;npm package file-saver&lt;/A&gt; is used to save an in-memory image to PNG or JPEG file.&lt;/P&gt;
&lt;P&gt;&lt;/P&gt;</Content>
              </TopicSection>
            </TopicSections>
            <TopicLinks />
            <TopicKeywords />
            <PropertyDefinitionValues />
            <ExcludedOtherFiles />
          </Topic>
        </Topics>
      </TopicCategory>
    </TopicCategories>
    <CustomTopicPropertyDefinitions />
    <PropertyDefinitionValues />
    <AutoNameDigits>0</AutoNameDigits>
    <AutoNameLastNumber>0</AutoNameLastNumber>
    <AutoNameEnabled>false</AutoNameEnabled>
    <AutoNamePrefix></AutoNamePrefix>
    <IncludeTopicNameInTitle>false</IncludeTopicNameInTitle>
    <TopicEditorState>
      <Attributes>
        <Attribute key="dtscrollpos" valuetype="integer">0</Attribute>
        <Attribute key="scrollPosition" valuetype="integer">494</Attribute>
      </Attributes>
    </TopicEditorState>
  </TopicsProjectPlugin>
  <WidgetsProjectPlugin>
    <WidgetTypes Version="2011.1" />
  </WidgetsProjectPlugin>
  <TemplateFileFeaturesProjectPlugin />
  <ProjectSearchProjectPlugin>
    <ProjectSearchDefinitions />
  </ProjectSearchProjectPlugin>
  <ContentSources>
    <DefaultQuipAccessToken></DefaultQuipAccessToken>
  </ContentSources>
  <ShortFileNames IsSaveMappingsEnabled="true" MappingProvider="DEFAULT" IsLengthLimitationEnabled="true" LengthLimit="170" />
  <VersionsAndEditions>
    <ContentDiscoveryUrl></ContentDiscoveryUrl>
    <NavigationUrl></NavigationUrl>
    <Versions Id="version">
      <Caption m="2019-01-31T16:32:58.9033696Z">Version</Caption>
      <VersionDefinitions />
    </Versions>
    <Editions Id="edition">
      <Caption m="2019-01-31T16:32:58.9033696Z">Edition</Caption>
      <VersionDefinitions />
    </Editions>
  </VersionsAndEditions>
  <Publishing />
  <ProjectProfiles>
    <ProjectProfile Id="6b2cfb6d-7340-49af-9cfb-d31ec7a4a0d5" Name="Online and CHM">
      <DefaultItemQualifiedName>SciChart_JS_User_Manual</DefaultItemQualifiedName>
      <StripMetadata>true</StripMetadata>
      <AlwaysCopyTemplateFiles>true</AlwaysCopyTemplateFiles>
      <OutputFileExtension>.html</OutputFileExtension>
      <Title m="2020-11-25T18:22:43.4903747Z">SciChart.js Documentation</Title>
      <ClearOutputDirectoryBeforeBuild>true</ClearOutputDirectoryBeforeBuild>
      <IsNewIndicatorEnabled>false</IsNewIndicatorEnabled>
      <IsNewDateTime></IsNewDateTime>
      <PublishingTargets />
      <PropertyDefinitionValues>
        <PropertyDefinitionValue PropertyDefinitionId="f9e699b0-25d1-488a-8da8-38cd78e87918">
          <PropertyValue m="2011-11-29T17:23:16.9964319Z" />
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="d6063a70-1b08-4745-82fe-e59caa2d54bf">
          <PropertyValue m="2011-11-29T17:23:19.7157909Z" />
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="4762301e-2f7f-49ae-a6d9-51a79750d8b3">
          <PropertyValue m="2020-08-03T15:04:24.854012Z">SciChart_JS_User_Manual.html</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="31a70858-084a-43e7-a307-43e2cdae0808">
          <PropertyValue m="2020-11-04T17:50:50.8988554Z">https://www.scichart.com/documentation/js/current/</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="c58acc35-6e43-42f0-bf51-b3afa633f0cc">
          <PropertyValue m="2020-11-04T17:50:41.7073038Z">https://www.scichart.com/javascript-chart-features/</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="d50d68a0-b78a-435c-aa4a-79a1a79209c5">
          <PropertyValue m="2020-08-03T15:01:34.13942Z">JavaScript</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="dffa9b8e-bb62-4b2f-be87-ccd1375cf6b9">
          <PropertyValue m="2023-01-13T17:13:13.9884312Z">v3.x</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="08de2c63-c533-49c3-a1d7-52b3995b9bec">
          <PropertyValue m="2024-01-12T16:58:30.920619Z">SCICHART ® is a Registered Trademark in the UK, US and EU. Copyright SciChart Ltd 2011-2024.</PropertyValue>
        </PropertyDefinitionValue>
        <PropertyDefinitionValue PropertyDefinitionId="76de16a8-8dcb-462c-b636-b20ff0b3c3a1">
          <PropertyValue m="2023-12-11T16:20:11.3037271Z">&lt;a href="%%DocumentationRoot%%sitemap.xml" target="_blank"&gt;Sitemap&lt;/a&gt; | &lt;a href="mailto:support@scichart.com?subject=Documentation Feedback: %%FileName%%"&gt;Send Feedback&lt;/a&gt;</PropertyValue>
        </PropertyDefinitionValue>
      </PropertyDefinitionValues>
      <DefaultTemplateName>Material</DefaultTemplateName>
      <IsTidyXhtmlEnabled>true</IsTidyXhtmlEnabled>
      <CommunityOptions UseLocalProxyUrl="false" Enabled="false">
        <ServerType>PublicEvaluation</ServerType>
        <LocalProxyUrl></LocalProxyUrl>
        <HostingAccessKey></HostingAccessKey>
        <PrivateServerUrl></PrivateServerUrl>
        <PrivateServerAccessKey></PrivateServerAccessKey>
        <ProjectKey />
      </CommunityOptions>
      <CommunityProjectProfilePlugin IsEnabled="false">
        <IsCompiledHelpReadinessWarningDisabled>false</IsCompiledHelpReadinessWarningDisabled>
      </CommunityProjectProfilePlugin>
      <DotNet>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <IncludeSystemObjectMembers>false</IncludeSystemObjectMembers>
        <InterfacesToIgnoreInSyntax>System.*</InterfacesToIgnoreInSyntax>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <LinkToExternalDocs>true</LinkToExternalDocs>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <UseExternalXmlCommentFiles>false</UseExternalXmlCommentFiles>
        <NoInheritedMemberTopicsExternal>true</NoInheritedMemberTopicsExternal>
        <NoInheritedInLists>false</NoInheritedInLists>
        <ExcludeEditorBrowsable>true</ExcludeEditorBrowsable>
        <ExcludeBrowsableFalse>false</ExcludeBrowsableFalse>
        <ExcludeObsolete>false</ExcludeObsolete>
        <ExcludeCompilerGenerated>false</ExcludeCompilerGenerated>
        <ExcludeDebuggerNonUserCode>false</ExcludeDebuggerNonUserCode>
        <GenerateXmlCommentFile>false</GenerateXmlCommentFile>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeAssemblyBreadcrumb>false</IncludeAssemblyBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <IncludeAttributes>true</IncludeAttributes>
        <AttributeFilterType>Exclude</AttributeFilterType>
        <AttributeFilter></AttributeFilter>
        <XmlIsland></XmlIsland>
        <IdentifyAccessInTitles>false</IdentifyAccessInTitles>
        <XmlCommentUsage>UseIfBlank</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="3" ShareSize="false">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>6</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="16" />
            </CommonStyle>
            <ObjectItemStyle Font="Verdana" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FF99CCFF" BorderBrush="#FFFFFFFF" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Verdana" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFFFCC66" BorderBrush="#FF000000" BorderThickness="-0" EndCap="Point" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>PropertiesOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <IncludeVbNetDefaultConstructor>false</IncludeVbNetDefaultConstructor>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootAssemblyName></RootAssemblyName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>false</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>false</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <SyntaxSectionStyle>TemplateDefault</SyntaxSectionStyle>
        <IsVbSyntaxMerged>false</IsVbSyntaxMerged>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <IncludeExtensionMethods>false</IncludeExtensionMethods>
        <UseContentFromBaseMember>false</UseContentFromBaseMember>
        <IsEnumValuesEnabled>false</IsEnumValuesEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
        <ExcludedLanguages>
          <ExcludedLanguage>Delphi</ExcludedLanguage>
          <ExcludedLanguage>JScript</ExcludedLanguage>
          <ExcludedLanguage>CPP</ExcludedLanguage>
        </ExcludedLanguages>
      </DotNet>
      <Javascript>
        <IsBrowserCompatibilityIncluded>true</IsBrowserCompatibilityIncluded>
        <IsBrowserCompatibilityIncludedOnEveryPage>true</IsBrowserCompatibilityIncludedOnEveryPage>
        <UseDollarPrefix>true</UseDollarPrefix>
        <WrapInDomReady>false</WrapInDomReady>
        <IsIncludeParametersInUsageSyntaxEnabled>true</IsIncludeParametersInUsageSyntaxEnabled>
        <IsGenerateTypeMemberPagesEnabled>false</IsGenerateTypeMemberPagesEnabled>
        <SyntaxIndentParametersLength>60</SyntaxIndentParametersLength>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>true</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Javascript>
      <Ajax>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeComponentBreadcrumb>false</IncludeComponentBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="0" PageNestingLevels="0" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootComponentName></RootComponentName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Classic</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
      </Ajax>
      <Java>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <IncludeInheritanceHierarchies>true</IncludeInheritanceHierarchies>
        <NoInheritedMemberTopicsInternal>true</NoInheritedMemberTopicsInternal>
        <UseXmlCommentFile>true</UseXmlCommentFile>
        <NoInheritedInLists>false</NoInheritedInLists>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <IncludeFriendMembers>false</IncludeFriendMembers>
        <IncludeProtectedFriendMembers>false</IncludeProtectedFriendMembers>
        <IncludeProtectedMembers>true</IncludeProtectedMembers>
        <XmlIsland></XmlIsland>
        <XmlCommentUsage>Merge</XmlCommentUsage>
        <DiagramSettings OverviewNestingLevels="3" PageNestingLevels="2" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>MethodsOnly</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>false</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <UseOverloadSummaryForMasterSummary>true</UseOverloadSummaryForMasterSummary>
        <LinkOverriddenMembersToBaseImplementation>false</LinkOverriddenMembersToBaseImplementation>
        <GenericIndicator>ArgumentsInBrackets</GenericIndicator>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Classic</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <ExcludeAllFriendTypes>true</ExcludeAllFriendTypes>
        <ExcludeAllProtectedTypes>false</ExcludeAllProtectedTypes>
        <ExcludeAllProtectedFriendTypes>false</ExcludeAllProtectedFriendTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <IncludeCodeContracts>false</IncludeCodeContracts>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Java>
      <Com>
        <IncludeRelationshipDiagrams>true</IncludeRelationshipDiagrams>
        <UseHelpStrings>true</UseHelpStrings>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeProjectBreadcrumb>false</IncludeProjectBreadcrumb>
        <IncludePrivateMembers>false</IncludePrivateMembers>
        <HelpStringUsage>Merge</HelpStringUsage>
        <DiagramSettings OverviewNestingLevels="2" PageNestingLevels="3" DiagramStyleSource="Template">
          <SuppressSingleObjectDiagrams>true</SuppressSingleObjectDiagrams>
          <DiagramStyle>
            <CommonStyle OuterMargin="10" ShareSize="true">
              <IsNewBrush>#FFFF0000</IsNewBrush>
              <IsNewSize>10</IsNewSize>
              <UseDropShadow>false</UseDropShadow>
              <DropShadowOpacity>0.3</DropShadowOpacity>
              <DropShadowDepth>3</DropShadowDepth>
              <DropShadowColor>#FF000000</DropShadowColor>
              <DropShadowDirection>300</DropShadowDirection>
              <Connector Brush="#FF808080" Thickness="1.5" StyleName="Solid" Indent="30" />
            </CommonStyle>
            <ObjectItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
            <CollectionItemStyle Font="Tahoma" FontSize="12" FontBrush="#FF000000" FontWeight="Normal" FontStyle="Normal" TextPadding="5" HorizontalAlignment="Left" BackgroundBrush="#FFADD8E6" BorderBrush="#FF808080" BorderThickness="0" EndCap="Rounded" />
          </DiagramStyle>
          <DiagramRelationshipsFrom>All</DiagramRelationshipsFrom>
          <IncludeFields>false</IncludeFields>
          <DiagramDefaultCollectionMemberOnly>true</DiagramDefaultCollectionMemberOnly>
        </DiagramSettings>
        <RootProjectName></RootProjectName>
        <IncludeConstructorsOnAbstractTypes>false</IncludeConstructorsOnAbstractTypes>
        <TemplateName>Material</TemplateName>
        <ExcludeAllPrivateTypes>true</ExcludeAllPrivateTypes>
        <IncludeMemberIndexKeywords>false</IncludeMemberIndexKeywords>
        <GroupExamples>false</GroupExamples>
        <ColorizeSyntax>false</ColorizeSyntax>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Com>
      <Database>
        <TemplateName>Material</TemplateName>
        <IncludeSqlServerSystemObjects>false</IncludeSqlServerSystemObjects>
        <IncludeSourceForViews>true</IncludeSourceForViews>
        <IncludeSourceForTriggers>true</IncludeSourceForTriggers>
        <IncludeSourceForUserDefinedFunctions>true</IncludeSourceForUserDefinedFunctions>
        <IncludeSourceForStoredProcedures>true</IncludeSourceForStoredProcedures>
        <IncludeScriptForTables>true</IncludeScriptForTables>
        <IncludeScriptForOtherItems>true</IncludeScriptForOtherItems>
        <RemoveTaggedCommentsFromSource>true</RemoveTaggedCommentsFromSource>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <IncludeSchemaInformation>true</IncludeSchemaInformation>
        <CheckAllExtendedProperties>false</CheckAllExtendedProperties>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <MaximumDependencyLevel>5</MaximumDependencyLevel>
        <UseSqlServerDataTypeNames>true</UseSqlServerDataTypeNames>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Database>
      <Xsd>
        <TemplateName>Material</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <IncludeOverview>true</IncludeOverview>
        <IncludeOverviewReferencedChildren>false</IncludeOverviewReferencedChildren>
        <OverviewLevels>5</OverviewLevels>
        <DiagramStyle>
          <DefaultTextOptions></DefaultTextOptions>
          <Options></Options>
        </DiagramStyle>
        <IncludeAttributesInDiagrams>true</IncludeAttributesInDiagrams>
        <SuppressSingleObjectDiagrams>false</SuppressSingleObjectDiagrams>
        <DiagramItemMaxExtendedRecurse>3</DiagramItemMaxExtendedRecurse>
        <DiagramItemMaxRecurse>3</DiagramItemMaxRecurse>
        <GenerateDiagrams>true</GenerateDiagrams>
        <IsOverrideTemplateDiagramStyleEnabled>false</IsOverrideTemplateDiagramStyleEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </Xsd>
      <Filters />
      <WebService>
        <TemplateName>Material</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <SourceContentUsage>Merge</SourceContentUsage>
        <UseSourceContent>true</UseSourceContent>
        <GroupExamples>true</GroupExamples>
        <IncludeRequestBodyDiagram>true</IncludeRequestBodyDiagram>
        <IncludeResponseBodyDiagram>true</IncludeResponseBodyDiagram>
        <IncludeRequestBodyOverview>true</IncludeRequestBodyOverview>
        <IncludeResponseBodyOverview>true</IncludeResponseBodyOverview>
        <IncludeRequestBodySampleData>true</IncludeRequestBodySampleData>
        <IncludeResponseBodySampleData>true</IncludeResponseBodySampleData>
        <IsSampleDataColorized>true</IsSampleDataColorized>
        <ImplyJsonSchemas>true</ImplyJsonSchemas>
        <IsGroupedByResource>false</IsGroupedByResource>
        <IncludeFullResourceUriInOperationPages>true</IncludeFullResourceUriInOperationPages>
        <UseAbsolutePathForResourcePaths>true</UseAbsolutePathForResourcePaths>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </WebService>
      <HelpCompiler CompileHelpFile="false" IsWebOutputEnabled="true" IsMarkOfTheWebEnabled="false">
        <MarkOfTheWebDomain>(0014)about:internet</MarkOfTheWebDomain>
        <HelpFileVersion>Help2</HelpFileVersion>
        <Help2Namespace>newprojecttest1</Help2Namespace>
        <Help2FileId>Default</Help2FileId>
        <Help2PluginToNamespaces></Help2PluginToNamespaces>
        <Help2Plugin>false</Help2Plugin>
        <RuntimeMerge></RuntimeMerge>
        <IncludeTextPopupFile>false</IncludeTextPopupFile>
        <Help3BuildIdentifier></Help3BuildIdentifier>
        <Help3VendorName></Help3VendorName>
        <Help3CatalogName>VS</Help3CatalogName>
        <Help3CatalogVersion>100</Help3CatalogVersion>
        <Help3CatalogLocaleText>en-US</Help3CatalogLocaleText>
        <Help3TemplateName></Help3TemplateName>
        <Help3ProductName></Help3ProductName>
        <Help3BookName></Help3BookName>
        <IsHelp3CreateRegistrationScriptEnabled>true</IsHelp3CreateRegistrationScriptEnabled>
        <IsHelp3RegisterLocallyEnabled>true</IsHelp3RegisterLocallyEnabled>
        <IsHelp3SigningEnabled>false</IsHelp3SigningEnabled>
        <IsHelp3ValidationEnabled>false</IsHelp3ValidationEnabled>
        <IsHelp3KeywordsEnabled>false</IsHelp3KeywordsEnabled>
        <BrowserHelpTemplateName>SciChart 2021</BrowserHelpTemplateName>
        <IsCustomHtmlHelpWindowSettings>false</IsCustomHtmlHelpWindowSettings>
        <CustomHtmlHelpWindowSettings>
          <IsExpandVisible>true</IsExpandVisible>
          <IsBackVisible>true</IsBackVisible>
          <IsForwardVisible>true</IsForwardVisible>
          <IsStopVisible>false</IsStopVisible>
          <IsRefreshVisible>false</IsRefreshVisible>
          <IsHomeVisible>false</IsHomeVisible>
          <IsLocateVisible>true</IsLocateVisible>
          <IsOptionsVisible>true</IsOptionsVisible>
          <IsPrintVisible>true</IsPrintVisible>
          <IsZoomVisible>false</IsZoomVisible>
          <IsPreviousVisible>false</IsPreviousVisible>
          <IsNextVisible>false</IsNextVisible>
          <NavigationPaneWidth>200</NavigationPaneWidth>
          <IsNavigationPaneInitiallyClosed>false</IsNavigationPaneInitiallyClosed>
          <IsAutoSyncWithTocEnabled>true</IsAutoSyncWithTocEnabled>
          <IsSearchTabVisible>true</IsSearchTabVisible>
          <IsHistoryTabVisible>false</IsHistoryTabVisible>
          <IsFavoritesTabVisible>true</IsFavoritesTabVisible>
          <DefaultTab>Contents</DefaultTab>
          <IsSaveUserWindowSettingsEnabled>true</IsSaveUserWindowSettingsEnabled>
          <WindowSizeHeight>400</WindowSizeHeight>
          <WindowSizeWidth>600</WindowSizeWidth>
          <WindowLocationLeft>0</WindowLocationLeft>
          <WindowLocationTop>0</WindowLocationTop>
        </CustomHtmlHelpWindowSettings>
        <IsWebOutputRootPageLinkEnabled>true</IsWebOutputRootPageLinkEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
        <HelpFileName></HelpFileName>
      </HelpCompiler>
      <RuleEngine>
        <Rules MatchType="All" Caption="" IsReadOnly="false" Id="root">
          <Rules>
            <RuleGroup MatchType="All" Caption="" IsReadOnly="false" Id="standard">
              <Rules>
                <Rule MatchType="All" Caption="" IsReadOnly="false" Id="outputtype">
                  <Conditions>
                    <RuleCondition Caption="" IsReadOnly="false" BuildFlagMatchType="None" Id="4c7ca296-f253-4ae9-9d90-ef8cb42183a8" Designer="BUILDFLAGS">
                      <BuildFlags>{46CEF21D-3301-4517-A875-A0906828390E}</BuildFlags>
                    </RuleCondition>
                  </Conditions>
                </Rule>
              </Rules>
            </RuleGroup>
            <RuleGroup MatchType="All" Caption="" IsReadOnly="false" Id="custom">
              <Rules />
            </RuleGroup>
          </Rules>
        </Rules>
      </RuleEngine>
      <ShortFileNames GenerateShortFileNames="true" />
      <TopicsProjectProfilePlugin>
        <TemplateName>SciChart 2021 Topics</TemplateName>
        <IncludeBreadcrumbs>true</IncludeBreadcrumbs>
        <AutoGenerateTopicIndexEntries>true</AutoGenerateTopicIndexEntries>
        <AutoGenerateCategoryIndexEntries>true</AutoGenerateCategoryIndexEntries>
        <IncludeOnlyCompletedTopics>false</IncludeOnlyCompletedTopics>
        <IsNewSource>CreationDateTime</IsNewSource>
        <IsNewCustomTopicPropertyId></IsNewCustomTopicPropertyId>
        <IsAnchorParsingEnabled>false</IsAnchorParsingEnabled>
        <PropertyBag>
          <Property Name="TEMPLATEFILEFEATURE_RESPONSIVE">True</Property>
        </PropertyBag>
      </TopicsProjectProfilePlugin>
      <BookletsProjectProfilePlugin>
        <TemplateName></TemplateName>
      </BookletsProjectProfilePlugin>
      <WidgetsProjectProfilePlugin>
        <IsIncludeInThisTopicWidgetEnabled>false</IsIncludeInThisTopicWidgetEnabled>
        <InThisTopicWidgetHeadingsMinimum>5</InThisTopicWidgetHeadingsMinimum>
        <InThisTopicWidgetTagName>H1</InThisTopicWidgetTagName>
        <InThisTopicWidgetPrefix>$$In_This_Topic$$</InThisTopicWidgetPrefix>
        <WidgetTypes Version="2011.1">
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="iFrame" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2023-01-10T20:38:04.2176634Z">&lt;iframe type="text/html" frameborder="0" style="width: 100%; aspect-ratio: 1.333;" src="%%iframeUrl%%" allow="%%iFrameAllow%%"&gt;&lt;/iframe&gt;</Content>
            <DesignTimeContent m="2023-01-10T20:36:37.7976737Z">&lt;div class="i-widget-container-box"&gt;
    &lt;h2 class="i-widget-title"&gt;iFrame Content&lt;/h2&gt;

    &lt;p&gt;Paste your iFrame URL below in the form. This will be rendered as a full-width iFrame when docs are compiled&lt;/p&gt;

    &lt;form&gt;
        &lt;div class="input-block"&gt;
            &lt;label&gt;iFrame URL=&lt;/label&gt;%%iFrameUrl:defaultValue=https://demo.scichart.com/iframe/javascript-bubble-chart,input=text%%
        &lt;/div&gt;

        &lt;div class="input-block"&gt;
            &lt;label&gt;allow=&lt;/label&gt;%%iFrameAllow%%
        &lt;/div&gt;
    &lt;/form&gt;
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2023-01-10T12:37:55.3457937Z">Custom: iFrame</Caption>
            <Description m="2023-01-10T12:37:46.516967Z">inserts an iFrame into the page</Description>
            <Resources />
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="false" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Caution Box" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2016-03-06T18:36:25.8404005Z">&lt;div class="i-box i-box-caution"&gt;
%%Content:defaultvalue=Type your Caution Box content here.%%
&lt;/div&gt;</Content>
            <DesignTimeContent m="2016-03-25T10:34:56.855918Z">&lt;div class="i-box i-box-caution"&gt;
%%Content:defaultvalue=Type your Caution Box content here.%%
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2016-03-06T18:36:02.1769115Z">Caution Box</Caption>
            <Description m="2016-03-06T18:36:05.3706758Z">Insert a Caution box, using any selected HTML as the content</Description>
            <Resources />
            <Gestures>
              <Gesture Kind="Key">Ctrl+Shift+C</Gesture>
            </Gestures>
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Collapsible Heading" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2016-05-01T10:43:26.9926747Z">&lt;div class="i-section-heading" id="i-%%SectionId:hidden=true,blankvalue=guid1%%-section-heading"&gt;
    &lt;span class="i-section-heading-icon"&gt;&lt;span class="i-hidden"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span class="i-section-heading-text"&gt;%%Heading:defaultvalue=Heading
    Text%%&lt;/span&gt;
&lt;/div&gt;

&lt;div id="i-%%SectionId:hidden=true,blankvalue=guid1%%-section-content" class="i-section-content"&gt;
    %%Content:defaultvalue=Type your Collapsible Section text here.%%
&lt;/div&gt;</Content>
            <DesignTimeContent m="2016-05-01T11:26:07.871458Z">&lt;div class="i-section-heading" id="i-%%SectionId:hidden=true,blankvalue=guid1%%-section-heading"&gt;
    &lt;span class="i-section-heading-icon"&gt;&lt;span class="i-hidden"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;span class="i-section-heading-text" data-designtime-initialize="true"&gt;%%Heading:defaultvalue=Heading
    Text%%&lt;/span&gt;
&lt;/div&gt;

&lt;div id="i-%%SectionId:hidden=true,blankvalue=guid1%%-section-content" class="i-section-content"&gt;
    %%Content:defaultvalue=Type your Collapsible Section text here.%%
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2016-03-25T10:37:29.9399785Z">Collapsible Heading</Caption>
            <Description m="2016-03-25T10:37:34.7705882Z">Create a heading and associated content section that collapses / expands when clicked. Collapsible headings retain their collapsed state between page views.</Description>
            <Resources />
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Movie (YouTube)" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2016-05-02T09:03:39.1872793Z">&lt;div id="moviecontainer_%%guid1%%" class="i-video-youtube" data-autoplay="%%autoplay%%" data-autoresize="%%autoresize%%" data-showrelated="%%showrelated%%" data-movieid="%%movieid%%" data-theme="%%theme%%" data-width="%%width%%" data-height="%%height%%"&gt;
    &lt;iframe type="text/html" frameborder="0" &gt;&lt;/iframe&gt;
&lt;/div&gt;</Content>
            <DesignTimeContent m="2016-05-02T09:07:10.4667444Z">&lt;div id="moviecontainer_%%guid1%%"&gt;
    &lt;div class="i-widget-container-box" style="BACKGROUND-IMAGE: url(%%resourcepath%%/images/youtube.png)"&gt;
        &lt;h2 class="i-widget-title"&gt;YouTube Movie&lt;/h2&gt;

        &lt;p&gt;Your movie will appear in this box in Preview or when the help system is built&lt;/p&gt;

        &lt;form&gt;
            &lt;div class="input-block"&gt;
                &lt;label&gt;Movie Id:&lt;/label&gt;%%movieid:defaultvalue=M7lc1UVf-VE,isused=true,input=text%% &lt;span style="font-style: italic"&gt;e.g.
                http://www.youtube.com/watch?v=&lt;strong&gt;M7lc1UVf-VE&lt;/strong&gt;&lt;/span&gt;
            &lt;/div&gt;

            &lt;div class="input-block" title="Automatically play the movie when the page loads"&gt;
                &lt;label&gt;Autoplay:&lt;/label&gt;%%autoplay:defaultvalue=false,isused=true,input=checkbox%%
            &lt;/div&gt;

            &lt;div class="input-block" title="Show related movies when playback of this movie ends"&gt;
                &lt;label&gt;Show Related:&lt;/label&gt;%%showrelated:defaultvalue=false,isused=true,input=checkbox%%
            &lt;/div&gt;

            &lt;div class="input-block"&gt;
                &lt;label&gt;Theme:&lt;/label&gt;%%theme:isused=true,input=select,options=dark;light%%
            &lt;/div&gt;

            &lt;div class="input-block" title="Automatically resize the movie to available space"&gt;
                &lt;label&gt;Auto Resize:&lt;/label&gt;%%autoresize:defaultvalue=true,isused=true,input=checkbox%%
            &lt;/div&gt;&lt;span class="movie-size-label"&gt;- or -&lt;/span&gt;

            &lt;div class="input-block"&gt;
                &lt;label&gt;Width:&lt;/label&gt;%%width:defaultvalue=640,isused=true,input=text%%
            &lt;/div&gt;

            &lt;div class="input-block"&gt;
                &lt;label&gt;Height:&lt;/label&gt;%%height:defaultvalue=390,isused=true,input=text%%
            &lt;/div&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2016-05-02T09:03:21.8410801Z">Movie (YouTube)</Caption>
            <Description m="2016-05-02T09:03:18.2256873Z">Embed a YouTube Movie</Description>
            <Resources />
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Dynamic Image" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2016-05-01T14:01:12.7975564Z">&lt;div class="i-thumbnail-container" title="$$Click to Enlarge$$"&gt;
    &lt;a data-href="%%FullSizeImageUrl:hidden=true%%" class="i-thumbnail" rel="lightbox" title="%%ImageTitle:hidden=true%%"&gt;&lt;img alt="%%ImageTitle:hidden=true,striphtmltags=true%%" src=
    "%%ThumbnailURL:hidden=true%%" /&gt;&lt;/a&gt;

    &lt;p&gt;%%ImageTitle%%&lt;/p&gt;
&lt;/div&gt;</Content>
            <DesignTimeContent m="2016-05-01T14:02:07.6352694Z">&lt;div class="i-thumbnail-container" title="$$Click to Enlarge$$"&gt;
    &lt;span style="display: none"&gt;%%ThumbnailURL:hidden=true%%&lt;/span&gt; &lt;a data-href="%%FullSizeImageUrl:hidden=true%%" class="i-thumbnail" rel=
    "lightbox" title="%%ImageTitle:hidden=true%%"&gt;&lt;img alt="%%ImageTitle:hidden=true,striphtmltags=true%%" src="%%ThumbnailURL:hidden=true%%" /&gt;&lt;/a&gt;

    &lt;p&gt;%%ImageTitle:defaultvalue=Image Title%%&lt;/p&gt;
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2016-03-06T18:40:29.4264533Z">Dynamic Image</Caption>
            <Description m="2016-03-06T18:41:22.6761853Z">Insert a thumbnail that can be enlarged by clicking with the mouse. This Widget uses a version of the open source Slimbox 2 jQuery plugin (http://www.digitalia.be/software/slimbox2) which is free software released under the MIT license.</Description>
            <Resources />
            <Gestures>
              <Gesture Kind="Key">Ctrl+Shift+I</Gesture>
            </Gestures>
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="View in Github Button" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content />
            <DesignTimeContent />
            <Caption m="2023-01-10T20:20:17.1129197Z">Custom: Github Button</Caption>
            <Description m="2023-01-10T20:20:53.5048762Z">Adds a button with Github icon</Description>
            <Resources />
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType Name="Colorized Example Code From File (Tab Style)" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="false" WidgetLayout="Block" Designer="COLORIZEDCODEWIDGETDESIGNER">
            <Caption m="2012-08-29T08:48:57.2767067Z">Colorized Example Code From File (Tab Style)</Caption>
            <Description m="2012-08-29T08:49:03.4287067Z">Creates a colorized example code block using the tab header style that reads content from an external file.</Description>
            <Resources />
            <DefaultLanguage>CS</DefaultLanguage>
            <ChildWidgetTypeName>Language Filtered Code Box From File (Tab Style)</ChildWidgetTypeName>
            <DefaultTitle>Tab Caption</DefaultTitle>
            <DefaultContent>Type your example code here. It will be automatically colorized when you switch to Preview or build the help system.</DefaultContent>
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Language Filtered Code Box From File (Tab Style)" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTWIDGETDESIGNER">
            <Content m="2016-03-25T19:35:22.2098015Z">
      &lt;div class="i-filtered-content-%%LanguageName:hidden=true,defaultvalue=CS%% i-tab-container i-tab-container-widget" data-itemid=
      "%%LanguageName:hidden=true,defaultvalue=CS%%" data-title="%%Title:defaultvalue=Title Text%%"&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;a href="#i-tab-content-%%Guid1%%"&gt;%%Title:defaultvalue=Title Text%%&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;div id="i-tab-content-%%Guid1%%" class="i-filtered-content i-code"&gt;
      %%Content:defaultvalue=Type your code here.%%
      &lt;/div&gt;
      &lt;/div&gt;
    </Content>
            <DesignTimeContent m="2016-03-25T19:35:19.4341039Z">
      &lt;div class="i-tab-container i-tab-container-widget ui-tabs ui-widget ui-widget-content ui-corner-all" data-itemid="%%LanguageName:hidden=true,defaultvalue=CS%%"
      data-title="%%Title:defaultvalue=Title Text,hidden=true%%"&gt;
      &lt;ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all"&gt;
      &lt;li class="ui-state-default ui-corner-top ui-tabs-selected ui-tabs-active ui-state-active"&gt;&lt;a class="ui-tabs-anchor" href="#i-tab-content-%%Guid1%%"&gt;%%Title:defaultvalue=Title Text%%
      %%LanguageName:defaultvalue=CS,hidden=false%%&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;

      &lt;div id="i-tab-content-%%Guid1%%" class="i-filtered-content ui-tabs-panel ui-widget-content ui-corner-bottom"&gt;
      &lt;div&gt;&lt;div class="i-widget-container-box" style="background-image: url(%%resourcepath%%/images/code.png);"&gt;
        &lt;h2 class="i-widget-title"&gt;Code from File&lt;/h2&gt;

        &lt;p&gt;Your code content will appear in this box in Preview or when the help system is built&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;File Name (full path and filename&amp;nbsp;or path and filename relative to project):&lt;/strong&gt;&lt;br /&gt;
        %%filename:layout=inline,defaultvalue="codefile.cs"%%&lt;/p&gt;

        &lt;p&gt;Leave the Region field below blank if you want to use the whole file. See the &lt;span designcommand="showhelp:widgetcontentfromfile.html"&gt;&lt;a href=
        "#"&gt;Widget Content from a File&lt;/a&gt;&lt;/span&gt; Topic in the online help for more info on marking named sections in example code files.&lt;/p&gt;

        &lt;p&gt;&lt;strong&gt;Region:&lt;/strong&gt;&lt;br /&gt;
        %%Region:layout=inline%%&lt;/p&gt;
    &lt;/div&gt;
&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </DesignTimeContent>
            <Caption m="2016-03-25T10:48:04.8285496Z">Language Filtered Code Box From File (Tab Style)</Caption>
            <Description m="2016-03-25T10:48:09.6353964Z">Insert a code box that reads content from an external file and that will work with language filtering, using the tab style header.</Description>
            <Resources />
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Content from Web Page" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTSOURCE">
            <Content />
            <DesignTimeContent m="2014-07-21T10:34:07.1583545Z">&lt;div&gt;
    &lt;div class="WidgetContainerBox" style="background-image: url(%%resourcepath%%/images/webpage.png);"&gt;
        &lt;h2&gt;Content from Web Page&lt;/h2&gt;

        &lt;p&gt;This Widget will be replaced with content from a Web Page in Preview and when building the generated output.&lt;/p&gt;

        &lt;form&gt;
            &lt;div style="DISPLAY: none"&gt;
                &lt;span contenteditable="true"&gt;value&lt;/span&gt;
            &lt;/div&gt;

            &lt;div class="input-block" title=
            "The fully qualified Uri of the Web Page from which the content will be sourced."&gt;
            &lt;label style="width: 11em;"&gt;Source Uri:&lt;/label&gt;%%Uri:defaultvalue=,isused=true,input=text,style="width:60%"%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title=
            "The tag name containing the content to use from the source uri. e.g. BODY. The tag name is not required if either an Element Id or Element Class value are specified."&gt;
            &lt;label style="width: 11em;"&gt;Tag Name:&lt;/label&gt;%%RootTagName:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title=
            "If the desired content is contained in an element with a specific Id, specify it here."&gt;
            &lt;label style="width: 11em;"&gt;Element Id (optional):&lt;/label&gt;%%ElementId:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;

			&lt;div class="input-block" title=
            "If the desired content is contained in an element with a specific class name, specify it here."&gt;
            &lt;label style="width: 11em;"&gt;Element Class (optional):&lt;/label&gt;%%ElementClassName:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title="Enable this option to download and create local copies of remote images referenced by the source content, so that the page content is readable without the original image sources."&gt;
                &lt;label style="width: 11em;"&gt;Create local images:&lt;/label&gt;%%CreateLocalImages:defaultvalue=false,isused=true,input=checkbox%%
            &lt;/div&gt;

        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2014-07-21T10:09:04.6435Z">Content from Web Page</Caption>
            <Description m="2014-07-21T10:31:43.6285842Z">Includes content from a Web Page</Description>
            <Resources />
            <ContentSourceName>WEBPAGE</ContentSourceName>
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
          <WidgetType HasSeparateDesignTimeContent="true" ReplaceSelectedParagraph="false" IsResourceOnly="false" Name="Codepen Embed from Web Page" IsHidden="false" SupportsSpellCheck="false" IsSelectionCollapsedAfterInsertion="true" WidgetLayout="Block" Designer="CONTENTSOURCE">
            <Content m="2023-03-13T18:30:29.6358945Z">&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js" type="text/javascript"&gt;&lt;/script&gt;</Content>
            <DesignTimeContent m="2014-07-21T10:34:07.1583545Z">&lt;div&gt;
    &lt;div class="WidgetContainerBox" style="background-image: url(%%resourcepath%%/images/webpage.png);"&gt;
        &lt;h2&gt;Content from Web Page&lt;/h2&gt;

        &lt;p&gt;This Widget will be replaced with content from a Web Page in Preview and when building the generated output.&lt;/p&gt;

        &lt;form&gt;
            &lt;div style="DISPLAY: none"&gt;
                &lt;span contenteditable="true"&gt;value&lt;/span&gt;
            &lt;/div&gt;

            &lt;div class="input-block" title=
            "The fully qualified Uri of the Web Page from which the content will be sourced."&gt;
            &lt;label style="width: 11em;"&gt;Source Uri:&lt;/label&gt;%%Uri:defaultvalue=,isused=true,input=text,style="width:60%"%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title=
            "The tag name containing the content to use from the source uri. e.g. BODY. The tag name is not required if either an Element Id or Element Class value are specified."&gt;
            &lt;label style="width: 11em;"&gt;Tag Name:&lt;/label&gt;%%RootTagName:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title=
            "If the desired content is contained in an element with a specific Id, specify it here."&gt;
            &lt;label style="width: 11em;"&gt;Element Id (optional):&lt;/label&gt;%%ElementId:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;

			&lt;div class="input-block" title=
            "If the desired content is contained in an element with a specific class name, specify it here."&gt;
            &lt;label style="width: 11em;"&gt;Element Class (optional):&lt;/label&gt;%%ElementClassName:defaultvalue=,isused=true,input=text%%
            &lt;/div&gt;
			
			&lt;div class="input-block" title="Enable this option to download and create local copies of remote images referenced by the source content, so that the page content is readable without the original image sources."&gt;
                &lt;label style="width: 11em;"&gt;Create local images:&lt;/label&gt;%%CreateLocalImages:defaultvalue=false,isused=true,input=checkbox%%
            &lt;/div&gt;

        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;</DesignTimeContent>
            <Caption m="2023-03-13T18:30:12.3380141Z">Embed from Web Page</Caption>
            <Description m="2023-03-13T18:30:18.7862876Z">Includes content from a Web Page with codepen script</Description>
            <Resources />
            <ContentSourceName>WEBPAGE</ContentSourceName>
            <Gestures />
            <ResourcePath>widgets\resources</ResourcePath>
          </WidgetType>
        </WidgetTypes>
      </WidgetsProjectProfilePlugin>
      <OtherFiles>
        <IsLogoEnabled>true</IsLogoEnabled>
        <LogoOtherFileName>images\SciChartLogo.png</LogoOtherFileName>
        <IsGoogleAnalyticsEnabled>false</IsGoogleAnalyticsEnabled>
        <GoogleAnalyticsId></GoogleAnalyticsId>
        <IsOtherHeadContentEnabled>true</IsOtherHeadContentEnabled>
        <OtherHeadContent>&lt;meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"/&gt; 
&lt;meta name="keywords" content="JavaScript,Chart, Charting, JavaScript Chart, JavaScript Charting, JavaScript Realtime Chart, JavaScript High Performance Chart, Fast JavaScript Charts, Best JavaScript Charts, Fastest JavaScript Chart"/&gt;
&lt;meta property="og:locale" content="en_US"/&gt;
&lt;meta property="og:type" content="article"/&gt;
&lt;meta property="og:description" content="JavaScript Chart Documentation for the SciChart JavaScript v3.x SDK. Featuring many JavaScript Chart Types, you can create rich JavaScript, React and TypeScript applications with our powerful API"/&gt;
&lt;meta name="twitter:card" content="summary"/&gt;
&lt;meta name="twitter:description" content="JavaScript Chart Documentation for the SciChart JavaScript v3.x SDK. Featuring many JavaScript Chart Types, you can create rich JavaScript, React and TypeScript applications with our powerful API"/&gt;
&lt;meta name="twitter:site" content="@scichart"/&gt;
&lt;meta name="twitter:creator" content="@scichart"/&gt;
&lt;!-- Script to embed codepens at runtime only --&gt;
&lt;script&gt;
	var isDesigner = location.protocol === 'about:';
	if (!isDesigner) {
		function appendScript(scriptSrc, charSet) {
			var head = document.getElementsByTagName('head')[0];
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.src = scriptSrc;
			if (charSet) {
				script.charset = charSet;
			}
			head.appendChild(script);
			console.log(`appended script ` + scriptSrc + `!`);
		}
	   	
		appendScript('https://static.codepen.io/assets/embed/ei.js', undefined);
		appendScript('https://scichart.activehosted.com/f/embed.php?id=25', 'utf-8');	
	}
&lt;/script&gt;
&lt;style&gt;.cp_embed_iframe { aspect-ratio:1.333 }&lt;/style&gt;</OtherHeadContent>
      </OtherFiles>
      <VersionsAndEditions>
        <EditionId></EditionId>
      </VersionsAndEditions>
      <Publishing />
      <OutputDirectory>DocsOut</OutputDirectory>
    </ProjectProfile>
  </ProjectProfiles>
  <HelpContextIDHeaderFile></HelpContextIDHeaderFile>
  <PrimaryLocale CultureId="-">
    <ExportDateTime></ExportDateTime>
    <Dictionary></Dictionary>
    <Notes></Notes>
    <PhraseCultureId></PhraseCultureId>
    <EncodingCulture></EncodingCulture>
    <IsEnhancedWordBreakAnalysisEnabled>false</IsEnhancedWordBreakAnalysisEnabled>
    <IgnoreWordList>
      <IgnoreWord>Misc</IgnoreWord>
      <IgnoreWord>Subcharts</IgnoreWord>
    </IgnoreWordList>
  </PrimaryLocale>
  <IsNewProject>false</IsNewProject>
</DocumentXProject>