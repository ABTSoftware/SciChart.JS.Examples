import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DStylingAndThemingMultiStyleSeries",
        imagePath: "javascript-chart-multi-style-series.jpg",
        description:
            "Demonstrates how to use multiple styles on a single series on **JavaScript Charts** using SciChart.js, High Performance JavaScript Charts. This uses a RenderDataTransform to split the data so that we can draw the selected points using additional customised drawingProviders. This means that modifiers still see a single series with the original data.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to use multiple styles on a single series on **JavaScript Charts** using SciChart.js, High Performance JavaScript Charts. This uses a RenderDataTransform to split the data so that we can draw the selected points using additional customised drawingProviders. This means that modifiers still see a single series with the original data.",
                title: "JavaScript Chart with Multi-Style Series",
                pageTitle: "JavaScript Chart with Multi-Style Series",
                metaDescription:
                    "Demonstrates how to apply multiple different styles to a single series using RenderDataTransform",
                markdownContent:
                    "# Multi-Style Series Example - Vanilla JavaScript\n\n### Overview\nThis example demonstrates how to apply multiple visual styles to a single series in a SciChart.js chart using vanilla JavaScript. The primary goal is to render selected data points differently from unselected data by leveraging a custom render transform alongside multiple drawing providers. This approach ensures that all interactive modifiers perceive the data as one unified series while the display is conditionally tailored based on metadata.\n\n### Technical Implementation\nThe implementation centers around a custom render transform, implemented in the SplitRenderDataTransform class, which processes XY data and converts it into an OHLC-like format. Here, each data point is checked for a metadata flag (i.e. whether it is selected) and then assigned to specific fields that control different drawing providers. For example, a portion of the data is used to render columns with gradient fills, while another subset is used to draw a line series with differently styled point markers and dashed line segments. This technique of conditional data transformation ensures that even when the appearance changes, the underlying series remains intact. Developers interested in efficient data transformation techniques can explore the [RenderDataTransform API](https://www.scichart.com/documentation/js/current/RenderDataTransform%20API.html) for a deeper understanding.\n\n### Features and Capabilities\nThe example showcases several advanced features: \n- **Custom Render Transforms:** The SplitRenderDataTransform examines metadata to split the series data so that selected points appear with alternate styling. This mechanism is vital for achieving dynamic visual differentiation and is closely related to [conditional rendering with metadata](https://www.scichart.com/documentation/js/current/DataSeries%20PointMetaData%20Api.html).\n- **Multiple Drawing Providers:** Different drawing providers are used to render various aspects of the series. For instance, a ColumnSeriesDrawingProvider handles gradient styling for column series while LineSeriesDrawingProvider and PointMarkerDrawingProvider manage dashed line segments and custom point markers respectively. More details on configuring drawing providers can be found in the [BaseSeriesDrawingProvider API documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/baseseriesdrawingprovider.html) and through practical examples such as [custom line styling and dashed lines](https://www.scichart.com/blog/how-to-change-the-dash-stroke-or-point-style-of-a-specific-section-of-a-line-chart-in-javascript/).\n- **Interactive Modifiers:** The use of the DataPointSelectionModifier enables interactive chart features. Users can click and drag to change selections on the chart, triggering a re-transformation of the render data. This interactivity is crucial for real-time updates and dynamic visual feedback, as described in the [DataPoint Selection documentation](https://www.scichart.com/documentation/js/current/DataPointSelection.html).\n- **Gradient Styling and Fills:** The column series is styled with dynamic gradient fills using the GradientParams API. This creates a visually appealing differentiation between selected and unselected columns. For more on gradient fills in SciChart.js, see the [GradientParams API Documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/gradientparams.html).\n\n### Integration and Best Practices\nThe example is crafted entirely in vanilla JavaScript, showcasing how to integrate SciChart.js without relying on advanced frameworks. Despite the example being wrapped in a React component for display purposes, the core logic uses direct JavaScript calls to initialize the SciChartSurface, set up axes, create series, and apply interactivity. This approach highlights the benefits of leveraging [WebAssembly for high performance](https://www.scichart.com/blog/surpassing-limits-javascript-bigdata-webassembly/) while keeping the implementation straightforward. Developers are encouraged to review the [Advanced JavaScript Chart and Graph Library](https://www.scichart.com/javascript-chart-features/) documentation for more tailored strategies on integrating SciChart.js into vanilla JavaScript applications.\n\nThis comprehensive example not only provides a blueprint for multi-style series rendering but also demonstrates best practices in managing complex data transformations, interactivity, and performance optimizations in modern JavaScript charting.",
            },
            react: {
                subtitle:
                    "Demonstrates how to use multiple styles on a single series on **React Charts** using SciChart.js, High Performance JavaScript Charts. This uses a RenderDataTransform to split the data so that we can draw the selected points using additional customised drawingProviders. This means that modifiers still see a single series with the original data.",
                title: "React Chart with Multi-Style Series",
                pageTitle: "React Chart with Multi-Style Series",
                metaDescription:
                    "Demonstrates how to apply multiple different styles to a single series using RenderDataTransform",
                markdownContent:
                    "# Multi Style Series (React)\n\n### Overview\nThis example demonstrates how to create a multi-style series in SciChart.js using React. It shows how to display charts where selected data points are styled differently from the rest, by leveraging a custom render data transform (SplitRenderDataTransform) and multiple drawing providers. The example uses high-performance series such as FastLineRenderableSeries and FastColumnRenderableSeries, and integrates interactive modifiers like DataPointSelectionModifier to enable dynamic selection.\n\n### Technical Implementation\nThe core technical concept is the use of a custom **RenderDataTransform** to split the original data into segments that can be rendered with multiple visual styles. This is achieved by processing each data point and, based on custom metadata (i.e. whether a point is selected), assigning different values for drawing providers. The transform is applied to both the line and column series to determine which segments should display different styles. For more details, see the [React Chart with Multi-Style Series - SciChart.js Demo](https://demo.scichart.com/react/multi-style-series).\n\n### Features and Capabilities\nThe example highlights several advanced features: \n- **Custom Drawing Providers:** Additional drawing providers are used to render selected points with customized styles, such as dashed lines and alternative point markers. This customization is explained in resources like [How to change the dash, stroke or point style of a specific section of a line chart in JavaScript](https://www.scichart.com/blog/how-to-change-the-dash-stroke-or-point-style-of-a-specific-section-of-a-line-chart-in-javascript/).\n- **Gradient Fill Styling:** The column series uses gradient fills via the GradientParams API to differentiate between selected and unselected columns. Learn more from the [GradientParams | API Documentation for SciChart.js - v3.5.723](https://www.scichart.com/documentation/js/current/typedoc/classes/gradientparams.html).\n- **Interactive Modifiers:** The DataPointSelectionModifier allows users to click and drag to change the selection on the chart, which then triggers a re-transform of the render data. This interactivity is further detailed in the [Data Point Selection - JavaScript Chart - SciChart](https://www.scichart.com/example/javascript-chart/javascript-datapoint-selection/).\n\n### Integration and Best Practices\nThis example is fully integrated with React through the SciChartReact component. The implementation follows best practices for React integration by encapsulating the chart initialization within a dedicated React component and leveraging the WebAssembly (WASM) context for optimal performance. Developers can explore more about efficient React integration in the [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/). Additionally, performance is optimized by using fast-rendering series and handling data updates efficiently with the render data transform.\n\nThis comprehensive approach combining real-time data transformation, custom drawing customization, and interactive components provides a robust template for developers looking to create dynamic and performant charts using SciChart.js in React.",
            },
            angular: {
                subtitle:
                    "Demonstrates how to use multiple styles on a single series on **Angular Charts** using SciChart.js, High Performance JavaScript Charts. This uses a RenderDataTransform to split the data so that we can draw the selected points using additional customised drawingProviders. This means that modifiers still see a single series with the original data.",
                title: "Angular Chart with Multi-Style Series",
                pageTitle: "Angular Chart with Multi-Style Series",
                metaDescription:
                    "Demonstrates how to apply multiple different styles to a single series using RenderDataTransform",
                markdownContent:
                    "# Angular Chart with Multi-Style Series (Angular)\n\n### Overview\nThis example demonstrates how to create a multi-style chart using SciChart.js specifically for Angular applications. It showcases how to style selected and unselected data points differently within a single series by leveraging a custom **RenderDataTransform** to process data based on metadata.\n\n### Technical Implementation\nThe implementation utilizes a custom transform, SplitRenderDataTransform, that converts standard XY data into OHLC-like data where selected points are rendered distinctly. By checking a metadata attribute provided in the XyDataSeries, the transform assigns specific values to the data series. This approach allows the same series to be rendered using multiple **drawing providers** for different visual styles, such as gradient fills for column series and dashed lines for sections of the line series. The chart is initialized using a WebAssembly context for high-performance rendering, in line with practices outlined in the [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) documentation.\n\n### Features and Capabilities\nKey features of this example include real-time updates through interactive modifiers, such as the [DataPointSelectionModifier](https://www.scichart.com/documentation/js/current/DataPointSelection.html), which allow for dynamic selection changes on the chart. Advanced customization is achieved by applying multiple drawing providers. For instance, the column series applies a gradient fill using GradientParams, as seen in techniques from the [Angular Column Chart](https://demo.scichart.com/angular/column-chart) demo, and the line series uses additional drawing providers to render customized point markers and dashed segments. Conditional rendering based on data series metadata is central to this implementation, following approaches outlined in the [DataSeries PointMetaData API](https://www.scichart.com/documentation/js/current/DataSeries%20PointMetaData%20Api.html).\n\n### Integration and Best Practices\nFor Angular developers, this example represents best practices by combining high-performance WebAssembly-based rendering with advanced styling capabilities. The use of a custom RenderDataTransform to manage multi-style rendering ensures that all interactive modifiers perceive a unified data series, ensuring consistency while allowing for advanced visual differentiation. Additional drawing provider customization is achieved using techniques similar to those described in the [Tutorial 02 - Adding Series and Data](https://www.scichart.com/documentation/js/current/Tutorial%2002%20-%20Adding%20Series%20and%20Data.html) guide. This integration approach provides a robust template for building dynamic and highly optimized charts in Angular with SciChart.js.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html",
                title: "The PaletteProvider API documentation",
                linkTitle: "SciChart.js PaletteProvider documentation",
            },
        ],
        path: "multi-style-series",
        metaKeywords: "multiple styles, api, chart, javascript, webgl, canvas",
        onWebsite: false,
        filepath: "Charts2D/StylingAndTheming/MultiStyleSeries",
        thumbnailImage: "javascript-chart-multi-style-series.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const multiplePointMarkersExampleInfo = createExampleInfo(metaData);
