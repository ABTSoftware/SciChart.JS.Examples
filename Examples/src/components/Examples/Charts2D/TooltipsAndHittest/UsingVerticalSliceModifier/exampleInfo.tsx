import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        reactComponent: "UsingVerticalSliceModifier",
        id: "chart2D_tooltipsAndHittest_VerticalSliceModifier",
        imagePath: "javascript-chart-vertical-slice-modifier.jpg",
        description:
            "Demonstrates how to use **tooltips at fixed positions** using SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to use **tooltips at fixed positions** using SciChart.js, High Performance JavaScript Charts",
                title: "Using VerticalSliceModifier",
                pageTitle: "Using VerticalSliceModifier",
                metaDescription:
                    "Demonstrates adding Tooltips at certain positions to a JavaScript Chart with SciChart.js VerticalSliceModifier",
                markdownContent:
                    "## Using Vertical Slice Modifier (JavaScript)\n\n### Overview\nThis example demonstrates how to integrate SciChart.js into a JavaScript application using a Vertical Slice Modifier to enhance rollover interactivity. The chart is created by instantiating a `SciChartSurface` with `NumericAxis` and three `FastLineRenderableSeries` populated with Fourier series data. It then adds two `VerticalSliceModifier` tools that support custom tooltip templates and dynamic annotations, providing a rich interactive experience.\n\n### Technical Implementation\nThe core implementation is found in the `drawExample` module. Here, the chart is created using the standard SciChart.js API, without relying on any frameworks. Axes are defined with specific number ranges and label formats, and the `FastLineRenderableSeries` is used to render high performance line series data. The example leverages the [VerticalSliceModifier](https://www.scichart.com/documentation/js/current/VerticalSliceModifier.html) to enable rollover tooltips and interactive vertical slice behavior by configuring properties such as `xCoordinateMode`, `isDraggable`, and tooltip templates which are customized by functions like `getTooltipDataTemplate` and `getTooltipLegendTemplate`. Additionally, dynamic updates are implemented via `preRender` event subscriptions that reposition `NativeTextAnnotations` to follow the vertical slice. For further details on custom tooltip templates, refer to [Using Rollover Modifier Tooltips](https://www.scichart.com/demo/javascript/chart-rollovermodifier-tooltips).\n\n### Features and Capabilities\nThe example showcases several advanced features of SciChart.js including:\n\n- **Custom Tooltip Templates:** The default tooltips provided by the `VerticalSliceModifier` are overridden using custom functions, enabling detailed, formatted information display during rollover interactions.\n\n- **Coordinate Modes:** By using different values for `ECoordinateMode` (such as `DataValue` and `Relative`), the example demonstrates how to position modifiers and annotations precisely.\n\n- **High Performance Rendering:** Employing `FastLineRenderableSeries` together with the performance benefits of the WASM context highlights best practices for handling large and complex datasets. For performance optimization tips, see [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n\n- **Interactive Modifiers:** In addition to the Vertical Slice Modifier, other chart modifiers like `ZoomPanModifier`, `ZoomExtentsModifier`, and `MouseWheelZoomModifier` are added to grant users comprehensive navigation capabilities.\n\n- **Resource Cleanup:** The vanilla implementation shows a destructor pattern to properly dispose of chart resources when no longer needed, ensuring efficient memory management. This approach is discussed in various resource cleanup guidelines provided in SciChart documentation and related best practices.\n\n### Integration and Best Practices\nThis example is built entirely using JavaScript, demonstrating that SciChart.js can be integrated without additional frameworks. The minimal setup involves simply importing the `drawExample` module and invoking it with a target DOM element. Best practices include proper resource cleanup via a destructor function and the use of event subscriptions (such as `preRender`) for dynamic UI updates. Developers interested in integrating SciChart.js into non-framework scenarios can refer to the [Tutorial 01 - Including SciChart.js in an HTML Page using CDN](https://www.scichart.com/documentation/js/current/Tutorial01IncludingSciChartjsHTMLPage.html) and [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/).\n\nBy following these patterns and leveraging built-in features such as custom tooltips, precise coordinate modes, and fast rendering techniques, the example provides a robust template for creating highly interactive and performance-optimized charts in JavaScript.",
            },
            react: {
                subtitle:
                    "Demonstrates how to use **tooltips at fixed positions** using SciChart.js, High Performance JavaScript Charts",
                title: "Using VerticalSliceModifier",
                pageTitle: "Using VerticalSliceModifier",
                metaDescription:
                    "Demonstrates adding Tooltips at certain positions to a React Chart with SciChart.js VerticalSliceModifier",
                markdownContent:
                    "## Using Vertical Slice Modifier in React\n\n### Overview\nThis example demonstrates how to integrate SciChart.js into a React application by utilizing the `VerticalSliceModifier` to implement custom tooltips and annotations at fixed positions. The example creates an interactive chart with multiple line series rendered using high performance WebGL via WebAssembly and illustrates how to add **draggable vertical slices** for advanced hit testing and dynamic data display.\n\n### Technical Implementation\nThe chart is integrated into React using the [SciChart React](https://www.scichart.com/blog/react-charts-with-scichart-js/) package. The initialization function, passed as a prop to the `<SciChartReact/>` component, sets up the chart surface, configures `NumericAxis` with specific label formatting and precision, and adds several line series created with the `FastLineRenderableSeries` to ensure optimal rendering performance. The example leverages the `VerticalSliceModifier` to display tooltips at specified data and relative coordinates, utilizing the custom callback functions to format tooltip text. Furthermore, event subscriptions on the chart’s `preRender` event dynamically update the position of annotations linked to the vertical slices, following best practices outlined in the [Annotations API Overview](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html).\n\n### Features and Capabilities\nThis example highlights several advanced features including real-time updates of tooltip information and dynamic annotation positioning. The `VerticalSliceModifier` allows for both data-bound (using `DataValue` coordinate mode) and fixed (using `Relative` coordinate mode) positions, with parameters that enable tooltip customization through [custom tooltip templates](https://www.scichart.com/documentation/js/current/CursorModifier_CustomisingContainer.html). Additionally, the integration supports interactive features such as zooming and panning via modifiers like the `ZoomPanModifier`, enhancing the overall user experience with sophisticated data exploration capabilities.\n\n### Integration and Best Practices\nThe implementation follows best practices for React integration by encapsulating the SciChart initialization within a dedicated function that is passed to the `<SciChartReact/>` component. Developers are encouraged to use the provided [SciChart React documentation](https://www.scichart.com/blog/react-charts-with-scichart-js/) for guidance on constructing reusable chart components. Performance optimizations are achieved with the FastLineRenderableSeries and efficient WebGL rendering underlined in the [Performance Tips](https://www.scichart.com/documentation/js/current/Performance%20Tips.html). Additionally, the use of vertical slices combined with dynamic event handling provides a robust solution for implementing interactive tooltip and annotation features in high performance charts.\n\nFor further reading on interactive modifiers, refer to the official [SciChart.js VerticalSliceModifier Documentation](https://www.scichart.com/documentation/js/current/VerticalSliceModifier.html).",
            },
            angular: {
                subtitle:
                    "Demonstrates how to use **tooltips at fixed positions** using SciChart.js, High Performance JavaScript Charts",
                title: "Using VerticalSliceModifier",
                pageTitle: "Using VerticalSliceModifier",
                metaDescription:
                    "Demonstrates adding Tooltips at certain positions to a Angular Chart with SciChart.js VerticalSliceModifier",
                markdownContent:
                    "## Using Vertical Slice Modifier - Angular\n\n### Overview\nThis Angular example demonstrates how to integrate SciChart.js into an Angular application using the `ScichartAngularComponent`. The purpose of the example is to showcase how to add draggable vertical slices to a high-performance chart, enabling tooltips at fixed positions and dynamic annotation updates.\n\n### Technical Implementation\nThe example leverages Angular’s property binding to pass an asynchronous chart initialization function (`drawExample`) to the `ScichartAngularComponent`. The `drawExample` function creates a `SciChartSurface` with asynchronously loaded WebAssembly content using `SciChartSurface.create()`, as described in the [SciChartSurface.create documentation](https://www.scichart.com/documentation/js/current/SciChartSurface.create%20and%20createSingle.html). Axes are configured using `NumericAxis` with specific label format settings and precision to ensure clear data presentation. Multiple line series are added with the `FastLineRenderableSeries`, each utilizing custom point markers. The key feature, the `VerticalSliceModifier`, is applied in two configurations: one using data-bound coordinates (`ECoordinateMode.DataValue`) and another using relative coordinates. This modifier not only displays a rollover line but also implements custom tooltips using callback functions, aligning with the concepts detailed in the [SciChart.js VerticalSliceModifier Documentation](https://www.scichart.com/documentation/js/current/VerticalSliceModifier.html). Additionally, Angular’s asynchronous operations are smoothly integrated with WebAssembly-based chart rendering and event handling.\n\n### Features and Capabilities\nThe example highlights several advanced features: \n- **Real-time Updates:** The chart uses `preRender` event subscriptions to dynamically update annotation positions linked to the draggable vertical slices, in line with principles found in [The Annotations API Overview](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html).\n- **Custom Tooltips and Legends:** Custom callback functions format tooltip text and legends, displaying precise data values for each data series.\n- **Interactive Modifiers:** Additional modifiers like `ZoomPanModifier`, `ZoomExtentsModifier`, and `MouseWheelZoomModifier` enhance the interactivity, allowing users to pan, zoom, and explore the data effectively.\n\n### Integration and Best Practices\nThe integration process encapsulates the initialization logic within a standalone Angular component using [scichart-angular](https://www.npmjs.com/package/scichart-angular) which simplifies the process of embedding a SciChart.js chart within an Angular application. This example demonstrates best practices in managing asynchronous operations, dynamic event handling, and resource cleanup in Angular. For a deeper understanding of Angular component binding and lifecycle management, developers can refer to relevant articles on integrating asynchronous data with Angular components, such as the [How to use property binding with asynchronous data?](https://stackoverflow.com/questions/55867314/how-to-use-property-binding-with-asynchronous-data) discussion. Moreover, performance optimization techniques for WebGL charts are inherent in the use of `FastLineRenderableSeries` and efficient rendering, aligning with the best practices outlined in the [Performance Optimisation of JavaScript Applications & Charts](https://www.scichart.com/blog/performance-optimisation-of-javascript-applications-charts/) guide.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/VerticalSliceModifier.html",
                title: "SciChart.js VerticalSliceModifier Documentation",
                linkTitle: "VerticalSliceModifier documentation",
            },
        ],
        path: "chart-vertical-slice-modifier",
        metaKeywords: "tooltips, modifier, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/TooltipsAndHittest/UsingVerticalSliceModifier",
        thumbnailImage: "javascript-chart-vertical-slice-modifier.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
        isNew: false,
    };
//// End of computer generated metadata

export const usingVerticalSliceModifierExampleInfo = createExampleInfo(metaData);
export default usingVerticalSliceModifierExampleInfo;
