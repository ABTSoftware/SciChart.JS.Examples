import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DModifyAxisBehaviorVerticallyStackedAxes",
        imagePath: "javascript-vertically-stacked-axes.jpg",
        description:
            "Vertically-Stacked Axis in SciChart.js allows several traces with independent Y-axis to be placed on the same chart, stacking the Y-Axis and enabling an ECG/EEG-style trace. Great for neurological apps, medical apps, earthquake monitoring.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Vertically-Stacked Axis in SciChart.js allows several traces with independent Y-axis to be placed on the same chart, stacking the Y-Axis and enabling an ECG/EEG-style trace. Great for neurological apps, medical apps, earthquake monitoring.",
                title: "JavaScript Chart with Vertically Stacked Axes",
                pageTitle: "JavaScript Chart with Vertically Stacked Axes",
                metaDescription:
                    "Demonstrates Vertically Stacked Axes on a JavaScript Chart using SciChart.js, allowing data to overlap",
                markdownContent:
                    "# Vertically Stacked Axes Example with Vanilla JavaScript\n\n## Overview\nThis example demonstrates how to create a high-performance chart using SciChart.js with vanilla JavaScript. It showcases a custom setup where multiple independent Y-axes are vertically stacked to allow overlapping data traces similar to ECG/EEG visualizations. The chart is initialized asynchronously and leverages native JavaScript for a straightforward integration in web applications.\n\n## Technical Implementation\nThe chart is created by calling [SciChartSurface.create](https://www.scichart.com/documentation/js/current/SciChartSurface.create%20and%20createSingle.html) asynchronously, ensuring that the WebAssembly context is fully loaded before rendering. A custom axis layout is implemented using the **LeftAlignedOuterVerticallyStackedAxisLayoutStrategy** as described in the [Vertically Stacked Axis Layout](https://www.scichart.com/documentation/js/current/Axis%20Layout%20-%20Vertically%20Stacked%20Axis.html) documentation and detailed in the [API documentation for LeftAlignedOuterVerticallyStackedAxisLayoutStrategy](https://www.scichart.com/documentation/js/current/typedoc/classes/leftalignedouterverticallystackedaxislayoutstrategy.html). Each data series is associated with its own Y-axis, configured with a specific visible range and border styling. Data for each series is generated dynamically using a sine wave algorithm via the **XyDataSeries**, which aligns with best practices as shown in the [Tutorial on Adding Series and Data](https://www.scichart.com/documentation/js/current/Tutorial%2002%20-%20Adding%20Series%20and%20Data.html). In addition, multiple interactive modifiers such as **YAxisDragModifier**, **XAxisDragModifier**, **RubberBandXyZoomModifier**, and **MouseWheelZoomModifier** are added to enhance user interactivity.\n\n## Features and Capabilities\nThe example emphasizes several advanced features: \n- **Multiple Y-Axes**: Each data trace is plotted against its own Y-axis, enabling a stacked layout that is ideal for overlapping visualizations.\n- **High-Performance Rendering**: The use of **FastLineRenderableSeries** ensures smooth rendering of large data sets. More details can be found in the [FastLineRenderableSeries API Documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html).\n- **Interactive Modifiers**: Advanced interactivity is provided through drag and zoom modifiers, allowing dynamic exploration of the chart.\n- **Annotations**: A text annotation is incorporated using **NativeTextAnnotation** to offer contextual information directly on the chart.\n\n## Integration and Best Practices\nThis implementation is a prime example of integrating SciChart.js with vanilla JavaScript. Developers can follow the asynchronous initialization pattern and proper lifecycle management evidenced by the cleanup function which calls `sciChartSurface.delete()`. For more information on vanilla JavaScript integration, refer to the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) guide. Additionally, proper memory management and disposal practices are covered in the [Deleting DataSeries Memory](https://www.scichart.com/documentation/js/current/DataSeries_DeletingMemory.html) documentation. By adopting these techniques, developers can ensure optimal performance and maintainability in their web applications.",
            },
            react: {
                subtitle:
                    "Vertically-Stacked Axis in SciChart.js allows several traces with independent Y-axis to be placed on the same chart, stacking the Y-Axis and enabling an ECG/EEG-style trace. Great for neurological apps, medical apps, earthquake monitoring.",
                title: "React Chart with Vertically Stacked Axes",
                pageTitle: "React Chart with Vertically Stacked Axes",
                metaDescription:
                    "Demonstrates Vertically Stacked Axes on a React Chart using SciChart.js, allowing data to overlap",
                markdownContent:
                    "# React Chart with Vertically Stacked Axes\n\n## Overview\nThis example demonstrates how to create a React-based chart using SciChart.js to display multiple data traces with independent Y-axes that are vertically stacked. The chart is particularly suited for applications such as ECG/EEG visualizations, where overlapping traces are required.\n\n## Technical Implementation\nThe implementation is built using React and integrates SciChart.js through the SciChartReact component. The chart initialization is handled by passing a function (drawExample) to the initChart property of the SciChartReact component. This function sets up a custom layout strategy using the LeftAlignedOuterVerticallyStackedAxisLayoutStrategy to align multiple Y-axes vertically, ensuring the traces can overlap appropriately. Interactive modifiers such as pan, zoom, and drag are added to enable advanced chart interactivity. The source leverages [SciChart.js documentation on vertically stacked axes](https://www.scichart.com/documentation/js/current/Axis%20Layout%20-%20Vertically%20Stacked%20Axis.html) for guidance on configuring these layout strategies.\n\n## Features and Capabilities\nThe example highlights several advanced features: \n- **Multiple Y-Axes**: Each data series is associated with its own Y-axis, configured with a custom visible range and axis borders to emphasize clear separation, yet visually overlapping for ECG/EEG style charts.\n- **High-Performance Rendering**: FastLineRenderableSeries is used to efficiently render large numbers of data points, which is critical for performance-sensitive applications. For additional performance optimization details, refer to the [Performance Tips & Tricks in SciChart.js](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n- **Interactive Chart Modifiers**: The chart employs several interactive modifiers including mouse wheel zoom, drag modifiers on both X and Y axes, and rubber band zoom. These modifiers provide a smooth and responsive user experience as explained in the [Tutorial on Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html).\n- **Annotations**: A text annotation is added to provide context for the stacked layout, demonstrating how annotations can be used to incorporate additional information directly onto the chart.\n\n## Integration and Best Practices\nThe example illustrates best practices for integrating SciChart.js into a React application using the SciChartReact component. Developers new to SciChart in React can learn how to initialize charts asynchronously using the initChart prop. This approach is further detailed in [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/). Furthermore, the custom layout strategies and interactive modifiers showcase how to tailor the chart behavior to specific application needs. By following these practices, developers can build highly interactive and performant charts in React.\n\nOverall, this example serves as a comprehensive guide to implementing vertically stacked axes in a React environment using SciChart.js, emphasizing custom layouts, performance optimization, and advanced chart interactivity.",
            },
            angular: {
                subtitle:
                    "Vertically-Stacked Axis in SciChart.js allows several traces with independent Y-axis to be placed on the same chart, stacking the Y-Axis and enabling an ECG/EEG-style trace. Great for neurological apps, medical apps, earthquake monitoring.",
                title: "Angular Chart with Vertically Stacked Axes",
                pageTitle: "Angular Chart with Vertically Stacked Axes",
                metaDescription:
                    "Demonstrates Vertically Stacked Axes on a Angular Chart using SciChart.js, allowing data to overlap",
                markdownContent:
                    "# Angular Chart with Vertically Stacked Axes - Vertically Stacked Axes in Angular\n\n## Overview\nThis example demonstrates how to build an Angular chart integrating SciChart.js that stacks several independent Y-axes vertically, allowing multiple data traces to overlap for ECG/EEG-style visualizations. The implementation uses the [scichart-angular](https://www.npmjs.com/package/scichart-angular) package and Angular standalone components as outlined in [Getting started with standalone components - Angular](https://angular.io/guide/standalone-components).\n\n## Technical Implementation\nThe chart is initialized asynchronously via the SciChartAngularComponent by passing an asynchronous initialization function to the initChart property. This function sets up the SciChartSurface with a custom layout strategy using the **LeftAlignedOuterVerticallyStackedAxisLayoutStrategy** to vertically align multiple Y-axes. Each Y-axis is created with its own visible range and borders, and dynamic data is fed into the chart using a custom sine wave generator that leverages the **XyDataSeries**. High-performance rendering is achieved using the **FastLineRenderableSeries**. Interactive modifiers such as **YAxisDragModifier**, **XAxisDragModifier**, **RubberBandXyZoomModifier**, and **MouseWheelZoomModifier** are added for advanced zooming and panning capabilities. For further technical details, see the [Vertically Stacked Axis Layout documentation](https://www.scichart.com/documentation/js/current/Axis%20Layout%20-%20Vertically%20Stacked%20Axis.html).\n\n## Features and Capabilities\nThis example highlights several key features: \n- **Multiple Y-Axes**: Each data trace is associated with its own Y-axis, stacked vertically to allow overlapping visualizations. \n- **High-Performance Rendering**: Utilizing the FastLineRenderableSeries ensures efficient management of large data sets, as illustrated in the [SciChart.js Performance Demo](https://www.scichart.com/blog/scichart-js-performance-demo-1-million-datapoints-70ms/). \n- **Interactive Chart Modifiers**: Advanced modifiers facilitate smooth panning, zooming, and dragging interactions, enhancing the user experience. \n- **Annotations**: The addition of a NativeTextAnnotation provides context directly on the chart, further detailed in the [NativeTextAnnotation documentation](https://www.scichart.com/documentation/js/current/NativeTextAnnotation.html).\n\n## Integration and Best Practices\nIntegrating SciChart.js with Angular is made efficient with standalone components and asynchronous chart initialization. Developers are encouraged to explore [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) for foundational knowledge. The example also demonstrates how to optimize chart performance and interactivity by combining custom layout strategies with advanced modifiers. These techniques represent best practices for building responsive, high-performing charts in Angular.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#Axis%20Layout%20-%20Vertically%20Stacked%20Axis.html",
                title: "The specific page for the SciChart.js documentation for the Vertically Stacked Axes to help you to get started",
                linkTitle: "SciChart.js Stacked Axes Documentation",
            },
        ],
        path: "vertically-stacked-axes",
        metaKeywords: "multiple, stacked, overlap, axis, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/ModifyAxisBehavior/VerticallyStackedAxes",
        thumbnailImage: "javascript-vertically-stacked-axes.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const verticallyStackedAxesExampleInfo = createExampleInfo(metaData);
