import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DModifyAxisBehaviorMultipleXAxes",
        imagePath: "javascript-chart-with-multiple-x-axis.jpg",
        description:
            "Demonstrates how to create a **JavaScript Chart with multiple X,Y axis** using SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to create a **JavaScript Chart with multiple X,Y axis** using SciChart.js, High Performance JavaScript Charts",
                title: "JavaScript Chart with Multiple X Axes",
                pageTitle: "JavaScript Chart with Multiple X Axes",
                metaDescription:
                    "Demonstrates Multiple X & Y Axis on a JavaScript Chart using SciChart.js. SciChart supports unlimited left, right, top, bottom X, Y axis with configurable alignment and individual zooming, panning",
                markdownContent:
                    "## Multiple X Axes Example in Vanilla JavaScript\n\n### Overview\nThis example demonstrates how to create a high-performance chart with multiple X and Y axes using vanilla JavaScript and SciChart.js. Its purpose is to showcase the configuration of two independent pairs of numeric axes along with binding data series via unique axis IDs, while integrating interactive modifiers and custom annotations for an enhanced user experience.\n\n### Technical Implementation\nThe implementation begins by initializing a SciChartSurface with a custom theme. Two sets of numeric axes are added: the primary (blue) set aligned to the bottom and left, and the secondary (orange) set aligned to the top and right. Data is generated through a random walk generator, and each data series is bound to its corresponding axis by specifying unique axis IDs. Interactive modifiers, including axis drag, zoom, and pan, are then added. Developers seeking further details on multi-axis configuration may refer to the [Tutorial 08 - Adding Multiple Axis](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html) and for interactivity see the [Tutorial 03 - Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html).\n\n### Features and Capabilities\nThe chart offers several advanced features:\n- **Multiple Axes Styling**: Each numeric axis is customized with properties such as alignment, border configuration, and background styling, providing distinct visual themes. More details can be found in the [Tutorial 08 - Adding Multiple Axis](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html).\n- **Axis Binding**: By assigning axis IDs to data series, each series is rendered within its designated axis pair, ensuring clear separation and accurate scaling.\n- **Interactive Modifiers**: Modifiers like XAxisDragModifier, YAxisDragModifier, ZoomPanModifier, and MouseWheelZoomModifier enable dynamic interaction, helping users adjust the view in real time.\n- **Annotations**: Both native and text annotations are used to overlay contextual information on the chart, enhancing data interpretation. Learn more about customizing annotations in the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html).\n- **WASM Performance**: Utilizing a WebAssembly (wasm) context provides superior rendering performance, ensuring the chart remains efficient even with complex datasets. Additional insights are available at [Pushing the Boundaries of JavaScript Chart Dashboard Performance](https://www.scichart.com/blog/pushing-the-boundaries-of-javascript-chart-dashboard-performance/).\n\n### Integration and Best Practices\nAlthough this example is implemented using vanilla JavaScript, it illustrates best practices for resource cleanup and the management of the SciChartSurface lifecycle, as outlined in the [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) guide. Even though a React component wrapper is provided for integration into larger applications, the core functionality relies solely on vanilla JavaScript, making it adaptable across various frameworks. This approach ensures that developers can easily integrate and expand upon the chart in different environments without the overhead of additional abstraction layers.",
            },
            react: {
                subtitle:
                    "Demonstrates how to create a **React Chart with multiple X,Y axis** using SciChart.js, High Performance JavaScript Charts",
                title: "React Chart with Multiple X Axes",
                pageTitle: "React Chart with Multiple X Axes",
                metaDescription:
                    "Demonstrates Multiple X & Y Axis on a React Chart using SciChart.js. SciChart supports unlimited left, right, top, bottom X, Y axis with configurable alignment and individual zooming, panning",
                markdownContent:
                    "## React Chart with Multiple X Axes\n\n### Overview\nThis example demonstrates how to create a high performance chart using SciChart.js within a React application. It highlights the configuration of multiple X and Y axes, binding data series to specific axes, and enriching the chart with interactive modifiers and annotations.\n\n### Technical Implementation\nThe implementation begins by initializing a SciChartSurface with a custom theme in the drawExample function. Two pairs of numeric axes are defined—one pair for the primary (blue) series and another for the secondary (orange) series. Each axis is customized with properties such as alignment, title, label style, and borders. Data series are bound to these axes by specifying axis IDs, ensuring that each series is rendered within its designated axis pair. Interactive modifiers such as XAxisDragModifier, YAxisDragModifier, ZoomPanModifier, and MouseWheelZoomModifier are added to allow dynamic zooming and panning. This setup is described in the [SciChart.js tutorial](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html) for multi-axis configuration and interactive behavior.\n\n### Features and Capabilities\nThe chart showcases several advanced features: \n- **Multi-axis configuration:** The example creates and binds two sets of X,Y axes, enabling the visualization of different data series on separate axes. For more details, refer to the [Multi-Axis Tutorial](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html).\n- **Interactive Modifiers:** With functionality for dragging, zooming, and panning, the chart allows users to interact directly with both the axes and the data. Explore more about these interactions in the [Zoom and Pan Demo](https://demo.scichart.com/react/zoom-pan-multiple-modifiers).\n- **Custom Annotations:** The use of both native and standard text annotations adds informative overlays to the chart, providing context about the data series. Learn about annotation customization in the [Annotations Documentation](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html).\n- **Performance Optimization:** By utilizing the WebAssembly (wasm) context for rendering and maintaining efficient resource management, the chart ensures optimal performance—a best practice emphasized in the [React integration guide](https://www.scichart.com/documentation/js/current/TutorialSetupProjectWithSciChartReact.html).\n\n### Integration and Best Practices\nThe chart is encapsulated within a React component that uses the SciChartReact wrapper to initialize the chart using the drawExample function. This integration highlights essential React practices such as component-based design and proper resource cleanup. Developers are encouraged to review the [React integration tutorial](https://www.scichart.com/blog/how-to-make-charts-in-react/) to understand how to efficiently implement similar multi-axis charts in their own applications.\n\nThis example clearly illustrates how to build an interactive multi-axis chart in React using SciChart.js, combining robust data visualization with modern performance and integration practices.",
            },
            angular: {
                subtitle:
                    "Demonstrates how to create a **Angular Chart with multiple X,Y axis** using SciChart.js, High Performance JavaScript Charts",
                title: "Angular Chart with Multiple X Axes",
                pageTitle: "Angular Chart with Multiple X Axes",
                metaDescription:
                    "Demonstrates Multiple X & Y Axis on a Angular Chart using SciChart.js. SciChart supports unlimited left, right, top, bottom X, Y axis with configurable alignment and individual zooming, panning",
                markdownContent:
                    "## Angular Chart with Multiple X Axes\n\n### Overview\nThis example demonstrates how to create a high performance Angular chart using SciChart.js with multiple X and Y axes. It showcases an implementation where two distinct sets of axes are defined — one pair for a blue series and one pair for an orange series — enabling the visualization of different data series on designated axes. The chart incorporates interactive modifiers and custom annotations to enhance interactivity and user experience.\n\n### Technical Implementation\nThe chart is initialized by creating a SciChartSurface with a custom theme and configuring two sets of numeric axes with unique identifiers. The primary axes (bottom and left) and the secondary axes (top and right) are styled individually with custom titles, label styles, and border settings. Data series are bound to these axes using specific axis IDs, ensuring that each series is rendered within its designated axis system. Interactive features such as axis drag, panning, and zooming are provided by modifiers. Detailed configuration for setting up multiple axes is explained in the [Tutorial 08 - Adding Multiple Axis](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html) documentation.\n\n### Features and Capabilities\nThis example provides several advanced features and customizations:\n- **Multi-axis Configuration:** Independent configuration of axis alignments and styles allows for flexible data representation.\n- **Interactive Modifiers:** Drag, pan, and zoom capabilities are implemented to enable dynamic chart interactivity. For more details on interactive modifiers, refer to the [Tutorial 03 - Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) guide.\n- **Custom Annotations:** Both native and text annotations are added to the chart to provide contextual information about the data series. Further customization options are discussed in the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html) documentation.\n- **High Performance Rendering:** The chart leverages WebAssembly for rendering, achieving optimal performance with complex data sets. More performance details are available in the [SciChart.js Performance Demo](https://www.scichart.com/blog/scichart-js-performance-demo-1-million-datapoints-70ms/) article.\n\n### Integration and Best Practices\nIn Angular applications, it is crucial to manage resources effectively. This example illustrates how to initialize the chart within an Angular context and emphasizes proper cleanup of the SciChartSurface to prevent memory leaks, as outlined in the [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) guide. The implementation also demonstrates best practices for binding data series to specific axes and customizing axis styling, ensuring that developers can tailor the chart to meet their unique project requirements.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/Axis%20Alignment%20-%20Setting%20Axis%20Alignment.html",
                title: "SciChart.js Multiple XAxis Documentation",
                linkTitle: "SciChart.js Documentation Home",
            },
        ],
        path: "chart-with-multiple-x-axis",
        metaKeywords: "multiple, axis, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/ModifyAxisBehavior/MultipleXAxes",
        thumbnailImage: "javascript-chart-with-multiple-x-axis.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const multipleXAxesExampleInfo = createExampleInfo(metaData);
