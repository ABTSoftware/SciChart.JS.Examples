import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DCreateStockChartsSubChartStockCharts",
        imagePath: "javascript-subcharts-multi-pane-stock-charts.jpg",
        description:
            "Using the new Sub-Charts API, create a multi-pane stock chart example with indicator panels on a single WebGL chart surface. This allows for higher-performance since the WebGL context is shared. Zooming, panning, cursors are synchronised between the charts. ",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Using the new Sub-Charts API, create a multi-pane stock chart example with indicator panels on a single WebGL chart surface. This allows for higher-performance since the WebGL context is shared. Zooming, panning, cursors are synchronised between the charts. ",
                title: "JavaScript Multi-Pane Stock Charts using Subcharts",
                pageTitle: "JavaScript Multi-Pane Stock Chart using Subcharts | View JavaScript Charts",
                metaDescription:
                    "Create a JavaScript Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## JavaScript Multi-Pane Stock Charts using Subcharts\n\n### Overview\nThis example demonstrates how to implement a high-performance multi-pane stock chart using vanilla JavaScript. It leverages the SciChart.js Sub-Charts API to render several synchronized panes—including a candlestick series, a MACD indicator with divergence and band series, and an RSI chart—on a single shared WebGL chart surface. This approach optimizes rendering performance while keeping interactions such as zooming, panning, and crosshair updates in sync across all panes.\n\n### Technical Implementation\nThe chart is constructed using the Builder API with JSON configuration via the call to [chartBuilder.build2DChart](https://www.scichart.com/example/javascript-chart/javascript-chart-from-json/). This method initializes the primary SciChartSurface along with multiple sub-chart surfaces positioned dynamically using [Rect](https://www.scichart.com/documentation/js/current/Working%20with%20Data.html) definitions. For enhanced interactivity, custom chart modifiers and SVG annotations, such as the FinChartLegendModifier and FinChartLegendAnnotation, are implemented to provide real-time tooltips and interactive legends. These modifiers update dynamically based on mouse movements and are closely integrated with the axis synchronization logic, which is achieved by subscribing to the visibleRangeChanged event on the x-axes of each sub-chart. For further technical details on creating custom annotations, refer to the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html).\n\n### Features and Capabilities\nThe example showcases a wide array of advanced features including: \n\n- **Sub-Charts API usage**: All sub-charts share a single WebGL context, significantly boosting performance and ensuring synchronized interactions. More details on this approach can be found in the [JavaScript Multi-Pane Stock Chart using Subcharts - Demo](https://demo.scichart.com/javascript/multi-pane-stock-charts).\n- **Axis Synchronization**: Axis ranges across different panes are linked using event subscriptions, ensuring a unified zoom and pan experience as described in the [Synchronizing Multiple Charts](https://www.scichart.com/documentation/js/current/Synchronizing%20Multiple%20Charts.html) documentation.\n- **Custom Chart Modifiers and SVG Annotations**: Interactive SVG legends are generated via custom modifiers that update in real-time based on pointer events.\n- **Dynamic Technical Indicator Calculation**: The MACD and RSI values are computed on-the-fly using vanilla JavaScript, allowing for immediate feedback as the data updates.\n- **Custom Palette Providers**: Conditional coloring is applied through custom palette providers to visually distinguish between rising and falling values. Developers may consult the [The PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html) for further customization options.\n\n### Integration and Best Practices\nThis implementation is built entirely in vanilla JavaScript and follows best practices for high-performance charting with SciChart.js. The use of a shared WebGL context, efficient JSON-based Builder API configuration, and dynamically synchronized axes demonstrates a robust approach to trading chart applications. In addition, the example includes custom event handling for drag-resize logic, which allows users to adjust the sub-chart pane sizes on the fly. To learn more about optimizing performance, developers can review the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) guide.\n",
            },
            react: {
                subtitle:
                    "Using the new Sub-Charts API, create a multi-pane stock chart example with indicator panels on a single WebGL chart surface. This allows for higher-performance since the WebGL context is shared. Zooming, panning, cursors are synchronised between the charts. ",
                title: "React Multi-Pane Stock Charts using Subcharts",
                pageTitle: "React Multi-Pane Stock Chart using Subcharts | View JavaScript Charts",
                metaDescription:
                    "Create a React Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## Sub Chart Stock Charts Example with React\n\n### Overview\nThis example demonstrates how to build a high-performance multi-pane stock chart in a React application using SciChart.js. It leverages the new Sub-Charts API to render multiple sub-charts on a single WebGL chart surface. This design allows for the sharing of the WebGL context, which in turn significantly improves rendering performance, and synchronizes features such as zooming, panning, and cursor crosshairs across the panes.\n\n### Technical Implementation\nThe implementation makes use of the SciChartReact component for easy integration within a React application. The chart is constructed using the Builder API with a JSON configuration through the call to [chartBuilder.build2DChart](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html). Three distinct sub-charts are configured: a candlestick chart displaying OHLC data, a MACD chart with divergence and band series, and an RSI chart for technical analysis. Advanced customizations are implemented via custom chart modifiers such as FinChartLegendModifier and FinChartLegendAnnotation, which provide interactive SVG legends and tooltips. Developer-defined palette providers further enhance visual clarity by conditionally coloring volume and MACD histogram series.\n\n### Features and Capabilities\nThe example showcases several advanced features including synchronized axis ranges across sub-charts, real-time legend updates driven by mouse movements, and interactive annotations powered by SVG. Custom drag-resizing logic has been integrated to allow users to adjust pane sizes dynamically. The shared WebGL context not only boosts performance but also ensures that all sub-charts respond uniformly to user interactions. For more details on implementing such techniques in a React environment, consult the [React Charts with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/) guide and explore performance tips in [Optimizing SciChartJS Performance](https://stackoverflow.com/questions/77781766/reactjs-sweep-line-optimizing-scichartjs-performance-reusing-wasmcontext-for-m).\n\n### Integration and Best Practices\nThis example follows best practices for integrating SciChart.js in React by encapsulating chart initialization within the SciChartReact component and using the Builder API for clear, maintainable configuration. Efficient handling of events and state synchronization across multiple sub-chart surfaces has been implemented to deliver a smooth interactive experience. Developers are encouraged to review related resources such as [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) and guides on custom chart modifiers to further optimize their React chart applications.",
            },
            angular: {
                subtitle:
                    "Using the new Sub-Charts API, create a multi-pane stock chart example with indicator panels on a single WebGL chart surface. This allows for higher-performance since the WebGL context is shared. Zooming, panning, cursors are synchronised between the charts. ",
                title: "Angular Multi-Pane Stock Charts using Subcharts",
                pageTitle: "Angular Multi-Pane Stock Chart using Subcharts | View JavaScript Charts",
                metaDescription:
                    "Create a Angular Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## Angular Multi-Pane Stock Charts using Subcharts\n\n### Overview\nThis example demonstrates an advanced multi-pane stock chart implementation in Angular using SciChart.js. The chart leverages the new Sub-Charts API to render multiple synchronized panels—including a candlestick view with OHLC data, MACD and RSI indicators, and a volume histogram—on a single WebGL surface. This design not only optimizes performance by sharing the WebGL context but also ensures that interactions such as zooming, panning, and crosshair movements are synchronized across all sub-charts.\n\n### Technical Implementation\nThe chart is constructed using the Builder API with a JSON configuration that defines the main chart and its sub-charts. Each pane is configured with its own axes, series, and custom modifiers to handle interactions and real-time updates. The implementation uses custom SVG annotations and chart modifiers to update financial legends and manage crosshair behavior. For more details on using the Sub-Charts API in Angular, refer to the [SubCharts API documentation](https://www.scichart.com/documentation/js/current/WhatIsTheSubChartsAPI.html) and explore the capabilities outlined in the [Advanced JavaScript Chart and Graph Library](https://www.scichart.com/javascript-chart-features/).\n\n### Features and Capabilities\nThe example exhibits several advanced features including real-time legend updates, dynamic custom annotations for displaying OHLC and indicator values, and conditional series coloring using custom palette providers. It also includes custom event handling for drag-resize functionality, which enables dynamic layout adjustments when the user resizes chart panes. These capabilities ensure that the chart remains highly interactive and performance-optimized, as detailed in the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) guide.\n\n### Integration and Best Practices\nThis Angular implementation follows best practices by encapsulating chart initialization and event handling within Angular components. Custom chart modifiers are integrated to synchronize zooming, panning, and crosshair functionality across the sub-charts. Moreover, the example employs dynamic layout and resizing logic to adjust pane sizes on the fly, ensuring a responsive and efficient charting experience. Developers can further enhance performance by reviewing the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) and techniques for synchronizing chart interactions discussed in [How to Link JavaScript Charts and Synchronise zooming, panning, and crosshairs](https://www.scichart.com/blog/how-to-link-javascript-charts-and-synchronise-zooming-panning-crosshairs/).",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html",
                title: "The SciChart.js documentation contains loads of useful information on how to use our High Performance JavaScript Charts",
                linkTitle: "SciChart.js Documentation Home",
            },
        ],
        path: "multi-pane-stock-charts",
        metaKeywords: "multi-pane, stock, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/CreateStockCharts/SubChartStockCharts",
        thumbnailImage: "javascript-subcharts-multi-pane-stock-charts.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const subChartStockChartsExampleInfo = createExampleInfo(metaData);
