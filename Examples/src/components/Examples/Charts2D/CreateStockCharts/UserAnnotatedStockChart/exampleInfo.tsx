import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DCreateStockChartsUserAnnotatedStockChart",
        imagePath: "javascript-user-annotated-stock-chart.jpg",
        description:
            "This demo shows you how to create a **JavaScript User Annotated Stock Chart** using SciChart.js. Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "This demo shows you how to create a **JavaScript User Annotated Stock Chart** using SciChart.js. Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                title: "JavaScript User Annotated Stock Chart",
                pageTitle: "JavaScript User Annotated Stock Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "This demo shows you how to create a <strong>{frameworkName} User Annotated Stock Chart</strong> using\n        SciChart.js.  Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                markdownContent:
                    "# User Annotated Stock Chart in Vanilla JavaScript\n\n### Overview\nThis example demonstrates how to build an interactive candlestick stock chart using SciChart.js in a vanilla JavaScript application. It offers advanced customization features, including the ability to add custom line annotations and trade markers for enhanced financial charting. The implementation also leverages state serialization to save and reload chart configurations, ensuring a persistent and responsive user experience.\n\n### Technical Implementation\nThe chart is initialized asynchronously using the SciChartSurface.create method, which sets up the WebGL rendering context for high-performance graphics. Custom chart modifiers such as the **CreateLineAnnotationModifier** and **CreateTradeMarkerModifier** extend the SciChart.js ChartModifierBase2D class to handle mouse events and enable interactive annotation creation. Coordinate conversions are performed with the translateFromCanvasToSeriesViewRect utility, which transforms canvas pixel positions into data coordinates. This approach is detailed in the [Custom Chart Modifier API](https://www.scichart.com/documentation/js/current/CustomChartModifierAPI.html) and the [Axis APIs - Convert Pixel to Data Coordinates](https://www.scichart.com/documentation/js/current/Axis%20APIs%20-%20Convert%20Pixel%20to%20Data%20Coordinates.html) documentation.\n\n### Features and Capabilities\nThe example integrates several advanced features: \n- **Real-Time Data Processing:** Fast candlestick rendering combined with moving average filters ensures efficient data visualization.\n- **Interactive Controls:** Users can switch between pan, line drawing, and marker placement modes, facilitating dynamic interactions with the chart.\n- **Custom Annotations:** Custom line and trade marker annotations are created and modified on-the-fly, allowing for detailed chart analysis. More information is available in [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html).\n- **State Persistence:** The entire chart state, including annotations and data, is serialized to JSON and stored using the localStorage API. This mechanism is explained in the [Serialization and Deserialization of Charts](https://www.scichart.com/documentation/js/current/Serialization%20and%20Deserialization%20of%20Charts.html) guide.\n\n### Integration and Best Practices\nThis vanilla JavaScript implementation follows best practices for asynchronous module initialization and performance optimization. By leveraging WebGL for rendering and maintaining chart state through JSON configurations, developers can achieve both high performance and robust interactivity. For further details on asynchronous setup, see [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/). The example also demonstrates practical techniques for managing persistent state via the localStorage API, ensuring that user annotations and configurations are preserved across sessions.\n\nOverall, this example serves as a comprehensive guide to building high-performance, interactive financial charts in vanilla JavaScript with SciChart.js, combining advanced customization, real-time data processing, and robust state persistence.",
            },
            react: {
                subtitle:
                    "This demo shows you how to create a **React User Annotated Stock Chart** using SciChart.js. Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                title: "React User Annotated Stock Chart",
                pageTitle: "React User Annotated Stock Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "This demo shows you how to create a <strong>{frameworkName} User Annotated Stock Chart</strong> using\n        SciChart.js.  Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                markdownContent:
                    "# React User Annotated Stock Chart\n\n### Overview\nThis example demonstrates how to create a user annotated stock chart in a React application using SciChart.js. The chart allows users to draw custom line annotations and trade markers on a candlestick chart, with the capability to save and reload the entire chart configuration including data and annotations.\n\n### Technical Implementation\nThe implementation leverages React by integrating the SciChartReact component for asynchronous chart initialization. The chart is configured in an async function that returns both the SciChartSurface and control functions for saving, resetting, and applying chart definitions in JSON. Users interact with the chart through custom modifiers such as CreateLineAnnotationModifier and CreateTradeMarkerModifier, which handle mouse events for drawing and editing annotations. Material UI components like ToggleButtonGroup, TextField, Button, and Select are used to manage chart modes (pan, line, marker) and to persist chart state in localStorage. Developers can learn more about setting up and managing asynchronous chart components in React from the [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) guide.\n\n### Features and Capabilities\nThe example supports real-time updates and interactivity with features including: \n\n- **Custom Annotations**: Users can draw editable line annotations and trade markers via custom modifiers.\n- **Data Streaming and Moving Averages**: The chart renders candlestick series with moving averages calculated through SciChart's filters. \n- **State Serialization**: The entire chart state, including annotations and data, can be saved to and loaded from JSON definitions, ensuring persistence between sessions.\n\nThis approach highlights techniques for [real-time data streaming and annotation handling](https://www.scichart.com/blog/react-charts-with-scichart-js/) within high-performance charting environments.\n\n### Integration and Best Practices\nThe example follows best practices for React integration by using hooks such as useRef and useEffect to manage asynchronous initialization and to store mutable chart control objects effectively. Material UI is seamlessly integrated for UI controls, with components such as ToggleButtonGroup managing chart mode toggling following guidelines from the [MUI Toggle Button Group](https://mui.com/material-ui/react-toggle-button/?srsltid=AfmBOoqzosIk5kQbWesQSz5kzG_3RCp9oXTzKUBTSk7T6_ZIKdHSdUHX) documentation. Moreover, localStorage is utilized for chart state persistence, aligning with practices discussed in [working with React useEffect & local storage](https://stackoverflow.com/questions/75536903/working-with-react-useeffect-local-storage). The integration of custom chart modifiers within the React lifecycle demonstrates efficient state updates and performance optimization techniques for interactive data visualization.",
            },
            angular: {
                subtitle:
                    "This demo shows you how to create a **Angular User Annotated Stock Chart** using SciChart.js. Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                title: "Angular User Annotated Stock Chart",
                pageTitle: "Angular User Annotated Stock Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "This demo shows you how to create a <strong>{frameworkName} User Annotated Stock Chart</strong> using\n        SciChart.js.  Custom modifiers allow you to add lines and markers, then use the built in serialisation functions to save and reload the chart, including the data and all your custom annotations.",
                markdownContent:
                    "# Angular User Annotated Stock Chart\n\n### Overview\nThis example demonstrates how to build an interactive stock chart with user annotations in an Angular application using SciChart.js. It showcases how to draw custom line annotations and trade markers on a candlestick chart while leveraging Angular Material for a clean and intuitive user interface.\n\n### Technical Implementation\nThe implementation uses a standalone Angular component that integrates the SciChartAngularComponent. The chart is asynchronously initialized in the ngOnInit lifecycle hook and utilizes custom modifiers such as CreateLineAnnotationModifier and CreateTradeMarkerModifier to process mouse events for drawing annotations. Chart state including data, annotations, and visible ranges is serialized to JSON for saving and reloading using localStorage. This approach follows the patterns described in the [scichart-angular integration documentation](https://www.npmjs.com/package/scichart-angular) and the [Getting Started with SciChart JS guide](https://www.scichart.com/getting-started/scichart-javascript/).\n\n### Features and Capabilities\nThe chart supports real-time updates including panning, drawing lines, and placing markers. It integrates complex financial chart features such as candlestick rendering and moving averages while ensuring high-performance with WebGL rendering. The built-in JSON configuration allows developers to save and reload complete chart states effortlessly. Advanced modifications and event handling are performed via custom modifiers, enhancing the interactive experience.\n\n### Integration and Best Practices\nThis example follows Angular best practices by integrating Angular Material components like the Button Toggle Group for mode selection and TextField for user input, with effective event binding provided by ngModel. Asynchronous initialization is carefully managed to ensure the chart loads seamlessly. For more detailed information on integrating third-party libraries in Angular, refer to [Angular asynchronous initialization practices](https://stackoverflow.com/questions/76841802/how-to-deal-with-async-initialized-data-in-angular-component) and guidelines on [Managing Local Storage in Angular](https://blog.briebug.com/blog/managing-local-storage-in-angular). Additionally, the [Angular Material Button Toggle documentation](https://material.angular.io/components/button-toggle) offers valuable insights into creating effective and dynamic UIs.\n",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Candlestick%20Series%20type.html",
                title: "This specific page in the JavaScript Candlestick Chart documentation will help you to get started",
                linkTitle: "JavaScript Candlestick Chart Documentation",
            },
        ],
        path: "user-annotated-stock-chart",
        metaKeywords: "candlestick, chart, annotations, lines, markers, save, load, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/CreateStockCharts/UserAnnotatedStockChart",
        thumbnailImage: "javascript-user-annotated-stock-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const userAnnotatedStockChartExampleInfo = createExampleInfo(metaData);
