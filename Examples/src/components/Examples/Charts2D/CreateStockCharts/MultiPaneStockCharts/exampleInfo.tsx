import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        reactComponent: "MultiPaneStockCharts",
        id: "chart2D_createStockCharts_MultiPaneStockCharts",
        imagePath: "javascript-multi-pane-stock-charts.jpg",
        description:
            "Using the default multi-chart sync APIs, create a multi-pane stock chart example with indicator panels. Zooming, panning, cursors are synchronised between the charts. This is a simpler way to create charts than subcharts, but will have a performance hit on some browsers.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Using the default multi-chart sync APIs, create a multi-pane stock chart example with indicator panels. Zooming, panning, cursors are synchronised between the charts. This is a simpler way to create charts than subcharts, but will have a performance hit on some browsers.",
                title: "JavaScript Multi-Pane Stock Charts using Sync Multi-Chart",
                pageTitle: "JavaScript Multi-Pane Stock Chart | View JavaScript Charts",
                metaDescription:
                    "Create a JavaScript Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## Multi Pane Stock Charts using Sync Multi-Chart and JavaScript\n\n### Overview\nThis example demonstrates a multi-pane stock chart built exclusively with JavaScript and SciChart.js. It features a primary price chart along with indicator panels for MACD and RSI, plus an additional overview chart that synchronizes with the main charts.\n\n### Technical Implementation\nThe charts are initialized asynchronously using functions such as `drawPriceChart`, `drawMacdChart`, `drawRsiChart`, and `drawOverview`. These functions leverage the [SciChartSurface.create](https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html) method to establish high-performance WebGL charts. Custom palette providers are implemented for the volume and MACD histogram series by extending the `IStrokePaletteProvider` and `IFillPaletteProvider` interfaces, as detailed in [The PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html). Additionally, the charts are grouped using the `SciChartVerticalGroup` and synchronized by subscribing to the x-axis `visibleRangeChanged` events, which is explained in the [Tutorial 09 - Linking Multiple Charts](https://www.scichart.com/documentation/js/current/Tutorial%2009%20-%20Linking%20Multiple%20Charts.html).\n\n### Features and Capabilities\nThe example supports real-time chart updates, advanced technical analysis through moving average filters (see [XyMovingAverageFilter API Documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/xymovingaveragefilter.html)), and interactive tooltips configured via the `RolloverModifier`. The integration of chart modifiers such as `ZoomPanModifier`, `ZoomExtentsModifier`, and `MouseWheelZoomModifier` ensures seamless navigation and interaction.\n\n### Integration and Best Practices\nBuilt with JavaScript, this implementation follows asynchronous initialization best practices outlined in [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/), and employs performance optimization techniques recommended in [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html). The synchronized overview chart, created using the `transformRenderableSeries` feature, further enhances usability by providing a compact visual summary, as described in [How to Link JavaScript Charts and Synchronise zooming, panning ...](https://www.scichart.com/blog/how-to-link-javascript-charts-and-synchronise-zooming-panning-crosshairs/).\n\nOverall, the example offers a comprehensive demonstration of chart synchronization, advanced customization, and efficient performance optimizations, making it a valuable reference for developers building high-performance financial charting applications using SciChart.js and JavaScript.",
            },
            react: {
                subtitle:
                    "Using the default multi-chart sync APIs, create a multi-pane stock chart example with indicator panels. Zooming, panning, cursors are synchronised between the charts. This is a simpler way to create charts than subcharts, but will have a performance hit on some browsers.",
                title: "React Multi-Pane Stock Charts using Sync Multi-Chart",
                pageTitle: "React Multi-Pane Stock Chart | View JavaScript Charts",
                metaDescription:
                    "Create a React Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## Multi Pane Stock Charts and React\n\n### Overview\nThis example demonstrates a multi-pane stock charts implementation using SciChart.js with React. The app features a primary price chart, along with MACD and RSI indicator panels, and an overview chart that synchronizes zooming, panning, and crosshair interactions across all panes.\n\n### Technical Implementation\nThe React integration utilizes the `<SciChartReact/>` component from the  [scichart-react](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) package to initialize charts dynamically. React state management (with `useState`) is employed to set the main chart before the overview is initialized, and the synchronization across multiple panels is achieved by subscribing to visible range changes on the x-axes. The core of the example is contained within `Index.tsx` where multiple instances of the SciChart chart component are instantiated. These instances are initialized with functions from the initialization API, such as `drawPriceChart`, `drawMacdChart`, `drawRsiChart`, and `drawOverview`. Each initialization function configures its respective chart using the `SciChartSurface` API, allowing for dynamic chart creation and synchronization. Axis synchronization is implemented by subscribing to the `visibleRangeChanged` events on the x-axes across the different chart panels.\n\n### Features and Capabilities\nKey features include advanced real-time updates, custom palette providers for rendering volume and MACD series, and enhanced customizations such as annotated watermarks. The implementation leverages moving average filters and bespoke tooltips configured via custom palette providers, providing detailed visual insights. For more details on creating custom palette providers, check out the [PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html).\n\n### Integration and Best Practices\nThe example is built using a flexible CSS flexbox layout to host multiple chart panels, ensuring responsiveness and consistency in UI rendering. Chart synchronization is efficiently handled using techniques described in the [Synchronizing Multiple Charts](https://www.scichart.com/documentation/js/current/Synchronizing%20Multiple%20Charts.html) documentation. Additionally, the approach shows how to pass initialization functions as props in the `<SciChartReact/>` component, following [best practices for React integration](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html).",
            },
            angular: {
                subtitle:
                    "Using the default multi-chart sync APIs, create a multi-pane stock chart example with indicator panels. Zooming, panning, cursors are synchronised between the charts. This is a simpler way to create charts than subcharts, but will have a performance hit on some browsers.",
                title: "Angular Multi-Pane Stock Charts using Sync Multi-Chart",
                pageTitle: "Angular Multi-Pane Stock Chart | View JavaScript Charts",
                metaDescription:
                    "Create a Angular Multi-Pane Candlestick / Stock Chart with indicator panels, synchronized zooming, panning and cursors. Get your free trial of SciChart.js now.",
                markdownContent:
                    "## Angular Multi-Pane Stock Charts using Sync Multi-Chart\n\n### Overview\nThis Angular example demonstrates the creation of a synchronized multi-pane stock chart application using SciChart.js. The application renders several chart panels including a primary price chart, MACD and RSI indicator panels, and an overview chart that appears once the main charts are initialized. It leverages Angular standalone components for modular and dynamic chart rendering.\n\n### Technical Implementation\nThe core of the example is contained within the Angular component where multiple instances of the SciChart chart component are instantiated. These instances are initialized with functions from the initialization API, such as `drawPriceChart`, `drawMacdChart`, `drawRsiChart`, and `drawOverview`. Each initialization function configures its respective chart using the `SciChartSurface` API, allowing for dynamic chart creation and synchronization. Axis synchronization is implemented by subscribing to the `visibleRangeChanged` events on the x-axes across the different chart panels. For more details on subscribing to these events, refer to the [Axis Ranging - How to Listen to VisibleRange Changes](https://www.scichart.com/documentation/js/current/Axis%20Ranging%20-%20How%20to%20Listen%20to%20VisibleRange%20Changes.html) documentation. Additionally, asynchronous initialization of charts is handled in a way that once the primary charts are ready, the overview chart is dynamically rendered using Angular mechanisms. This approach is aligned with Angular’s best practices for managing asynchronous operations, as discussed in [Component Lifecycle - Angular](https://angular.io/guide/lifecycle-hooks).\n\n### Features and Capabilities\nThe example not only showcases real-time charting capabilities with synchronized zooming, panning, and cursor interactions but also includes advanced customizations like custom palette providers for volume and MACD histogram series. The flexible use of CSS flexbox layout ensures that the UI is responsive and that charts adjust to various screen sizes. The implementation highlights the importance of performance considerations when dealing with dynamic, high-performance charting applications in Angular. For more on performance optimization in multi-chart scenarios, see [How to Link JavaScript Charts and Synchronise zooming, panning ...](https://www.scichart.com/blog/how-to-link-javascript-charts-and-synchronise-zooming-panning-crosshairs/).\n\n### Integration and Best Practices\nThis example is built entirely on Angular, using standalone components to integrate SciChart.js seamlessly into an Angular application. The use of [scichart-angular](https://www.npmjs.com/package/scichart-angular) makes it easy to pass initialization functions as component properties, thereby streamlining the component interaction process as described in [Component interaction - Angular](https://angular.io/guide/component-interaction). The synchronization of visual ranges across multiple charts ensures a coherent user experience, and the dynamic rendering approach improves both performance and flexibility. For additional insights into dynamic component rendering and lazy loading in Angular, consider reviewing resources such as [Implementing Angular Lazy Loading with Dynamic Chart ...](https://medium.com/@kesavan.keshav/implementing-angular-lazy-loading-with-dynamic-chart-component-synonyms-for-india-vs-pakistan-c933a9c099a2).\n\nOverall, this Angular multi-pane stock chart example demonstrates effective usage of SciChart.js in an Angular environment, emphasizing modular design, performance optimization, and advanced visual sync capabilities for stock charting applications.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html",
                title: "The SciChart.js documentation contains loads of useful information on how to use our High Performance JavaScript Charts",
                linkTitle: "SciChart.js Documentation Home",
            },
        ],
        path: "multi-pane-stock-charts-sync-technique",
        metaKeywords: "multi-pane, stock, chart, javascript, webgl, canvas",
        onWebsite: false,
        filepath: "Charts2D/CreateStockCharts/MultiPaneStockCharts",
        thumbnailImage: "javascript-multi-pane-stock-charts.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

const multiPaneStockChartsExampleInfo = createExampleInfo(metaData);
export default multiPaneStockChartsExampleInfo;
