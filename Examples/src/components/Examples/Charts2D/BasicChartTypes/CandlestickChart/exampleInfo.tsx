import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DBasicChartTypesCandlestickChart",
        imagePath: "javascript-candlestick-chart.jpg",
        description:
            "This demo shows you how to create a **JavaScript Candlestick Chart** or Stock Chart using SciChart.js. Data is fetched from Binance and placed on the chart. Two moving averages are added. Zooming, panning and tooltips as well. Switch between Candlestick or Ohlc, or see the **Realtime Ticking Stock Charts** demo which shows how to add live updates.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "This demo shows you how to create a **JavaScript Candlestick Chart** or Stock Chart using SciChart.js. Data is fetched from Binance and placed on the chart. Two moving averages are added. Zooming, panning and tooltips as well. Switch between Candlestick or Ohlc, or see the **Realtime Ticking Stock Charts** demo which shows how to add live updates.",
                title: "JavaScript Candlestick Chart",
                pageTitle: "JavaScript Candlestick Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "Discover how to create a JavaScript Candlestick Chart or Stock Chart using SciChart.js. For high Performance JavaScript Charts, get your free demo now.",
                markdownContent:
                    "## Candlestick Chart Example using Vanilla JavaScript\n\n### Overview\nThis example demonstrates a high-performance candlestick chart built with SciChart.js using vanilla JavaScript. It visualizes financial data using candlestick and OHLC series, complemented by moving averages and volume bars to provide a comprehensive view of market trends.\n\n### Technical Implementation\nThe chart is initialized by creating a SciChartSurface with WebAssembly rendering for optimal performance, following the guidelines from the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) documentation. It sets up a DateTimeNumericAxis for time-based data and multiple NumericAxes for price and volume, with the latter serving as a secondary axis for additional data visualization. Data is fetched and mapped directly into the appropriate series types without using additional builder APIs, ensuring full control over the chart’s configuration.\n\n### Features and Capabilities\nThe example integrates both candlestick and OHLC series, as detailed in the [OHLC Series Type](https://www.scichart.com/documentation/js/current/The%20OHLC%20Series%20Type.html) documentation, allowing users to toggle between the two views. It further applies moving average filters using the [XyMovingAverageFilter](https://www.scichart.com/documentation/js/current/MovingAverageFilter.html) to smooth data trends, and implements a custom IFillPaletteProvider to dynamically color volume bars based on price movements, as described in the [IFillPaletteProvider](https://www.scichart.com/documentation/js/current/typedoc/interfaces/ifillpaletteprovider.html) documentation. Additionally, interactive modifiers such as zooming, panning, and custom SVG tooltips enhance user engagement, with tooltip customization techniques available in [this guide](https://www.scichart.com/documentation/js/current/CursorModifier_CustomisingContainer.html).\n\n### Integration and Best Practices\nBy using vanilla JavaScript, this implementation avoids reliance on framework-specific constructs, offering a lean and direct approach to building high-performance financial charts. Best practices for setting up axes, integrating multiple series, and enabling smooth interactivity are followed rigorously, as highlighted in the [interactive zooming and panning](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) documentation. This example serves as a solid foundation for developers looking to leverage SciChart.js in vanilla JavaScript environments without additional abstraction layers.",
            },
            react: {
                subtitle:
                    "This demo shows you how to create a **React Candlestick Chart** or Stock Chart using SciChart.js. Data is fetched from Binance and placed on the chart. Two moving averages are added. Zooming, panning and tooltips as well. Switch between Candlestick or Ohlc, or see the **Realtime Ticking Stock Charts** demo which shows how to add live updates.",
                title: "React Candlestick Chart",
                pageTitle: "React Candlestick Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "Discover how to create a React Candlestick Chart or Stock Chart using SciChart.js. For high Performance JavaScript Charts, get your free demo now.",
                markdownContent:
                    "## Candlestick Chart Example (React)\n\n### Overview\nThis example demonstrates how to implement a high performance candlestick chart using SciChart.js within a React framework. The chart is designed to render financial data, visualize candlestick and OHLC series, and integrate advanced features such as moving average filters and a custom volume palette provider. Additionally, it leverages a chart overview component to provide users with a synchronized miniature view of the main chart.\n\n### Technical Implementation\nThe chart is initialized by asynchronously creating a SciChartSurface and its associated WebAssembly context using the [SciChartSurface.create](https://www.scichart.com/documentation/js/current/TutorialSetupProjectWithSciChartReact.html) method. DateTime and Numeric axes are set up with precise configuration of visible ranges and auto-ranging options. Data is mapped into an OhlcDataSeries and rendered with a FastCandlestickRenderableSeries. Moving average filters are applied with the [XyMovingAverageFilter](https://www.scichart.com/documentation/js/current/typedoc/classes/xymovingaveragefilter.html) to dynamically update trend lines as new data arrives. A custom palette provider is implemented to automatically color volume bars based on candle data. Interactivity is enhanced through modifiers such as [ZoomPanModifier](https://www.scichart.com/documentation/js/current/ZoomPanModifier.html) and [CursorModifier](https://www.scichart.com/documentation/js/current/CursorModifier.html), providing users with responsive zooming, panning, and tooltip capabilities.\n\n### Features and Capabilities\n- **Real-time Data Updates:** The example supports dynamic data sources, toggling between random and external API data, which demonstrates best practices for handling live data in a React state workflow. Learn more about real-time update techniques in the [Realtime Updates Tutorial](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html).\n- **Moving Average Filtering:** Automatic recomputation of moving averages when the underlying data changes ensures a smooth visual transition and accurate trend analysis.\n- **Custom Volume Palette Provider:** A custom implementation dynamically assigns colors to volume bars based on individual candle performance, enhancing visual insights into trading volumes.\n- **Interactive Modifiers:** The integration of various modifiers such as zoom, pan, and custom tooltips allows users to explore the chart data interactively.\n- **Overview Chart Integration:** The use of [SciChartNestedOverview](https://www.scichart.com/blog/react-charts-with-scichart-js/) provides a synchronized, miniature view of the main chart, making navigation through large datasets more intuitive.\n\n### Integration and Best Practices\nThe example is built with React using components like SciChartReact for chart rendering and Material-UI’s ToggleButtonGroup for user interaction. React hooks manage dynamic state changes, such as toggling between candlestick and OHLC series and switching data sources. For instance, the Material-UI ToggleButtonGroup is employed to change series visibility, enhancing the user interface. Refer to the [Material UI ToggleButtonGroup documentation](https://mui.com/material-ui/react-toggle-button/?srsltid=AfmBOopG4WUUgiLhsrhYIa41vCfo6v3y5p49A97uLjh_XFlgLBc6CLCJ) for more details on its configuration.\n\nPerformance optimizations are achieved through efficient WebAssembly integration and the use of optimized data structures, as highlighted in the [Why SciChart High Performance Realtime Big Data Charts](https://www.scichart.com/why-scichart-high-performance-realtime-big-data-charts/) article. Overall, this example provides a comprehensive guide for developers looking to build interactive, high-performance financial charts in React using SciChart.js.",
            },
            angular: {
                subtitle:
                    "This demo shows you how to create a **Angular Candlestick Chart** or Stock Chart using SciChart.js. Data is fetched from Binance and placed on the chart. Two moving averages are added. Zooming, panning and tooltips as well. Switch between Candlestick or Ohlc, or see the **Realtime Ticking Stock Charts** demo which shows how to add live updates.",
                title: "Angular Candlestick Chart",
                pageTitle: "Angular Candlestick Chart | Chart Examples | SciChart.js",
                metaDescription:
                    "Discover how to create a Angular Candlestick Chart or Stock Chart using SciChart.js. For high Performance JavaScript Charts, get your free demo now.",
                markdownContent:
                    "## Angular Candlestick Chart\n\n### Overview\nThis example demonstrates an Angular integration of SciChart.js to create a high-performance candlestick chart. It fetches financial price data and displays it using both candlestick and OHLC series, alongside moving average filters and volume rendering. The implementation leverages Angular standalone components as outlined in [Angular Standalone Components](https://angular.io/guide/standalone-components).\n\n### Technical Implementation\nThe chart is initialized via a dedicated function passed as an input property to a SciChart Angular component, illustrating the use of Angular input binding as described in [Accepting Data with Input Properties](https://angular.dev/guide/components/inputs). The initialization function (drawExample) creates a SciChartSurface with WebAssembly-enabled rendering for optimal performance, an approach further detailed in [Leveraging WebAssembly in Angular](https://www.linkedin.com/pulse/leveraging-webassembly-angular-comprehensive-guide-vutukuri-vxnte). The implementation configures axes, multiple series, and interactive modifiers to deliver a responsive charting experience.\n\n### Features and Capabilities\nKey features include dynamic series toggling between candlestick and OHLC views using SciChart.js’ visibility APIs as outlined in the [Series isVisible and isVisibleChanged API](https://www.scichart.com/documentation/js/current/Series%20isVisible%20and%20isVisibleChanged%20API.html). The example also applies advanced financial data filters such as moving averages, a technique described in the [Moving Average Filter documentation](https://www.scichart.com/documentation/js/current/MovingAverageFilter.html), to assist with trend analysis and data smoothing.\n\n### Integration and Best Practices\nIntegration with Angular Material is evident through the use of toolbars and toggle buttons for interactive chart control. In addition, careful management of Angular’s change detection with external libraries is addressed, helping to optimize performance as discussed in [Angular Change Detection with External Libraries](https://stackoverflow.com/questions/66115688/angular-prevent-external-library-to-trigger-change-detection). This example serves as a practical guide for developers seeking to integrate high-performance financial charting into Angular applications while adhering to best practices in component design and performance optimization.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Candlestick%20Series%20type.html",
                title: "This specific page in the JavaScript Candlestick Chart documentation will help you to get started",
                linkTitle: "JavaScript Candlestick Chart Documentation",
            },
        ],
        path: "candlestick-chart",
        metaKeywords: "candlestick, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/BasicChartTypes/CandlestickChart",
        thumbnailImage: "javascript-candlestick-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const candlestickChartExampleInfo = createExampleInfo(metaData);
