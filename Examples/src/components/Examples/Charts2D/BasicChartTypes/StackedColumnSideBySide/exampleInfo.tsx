import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DBasicChartTypesStackedColumnSideBySide",
        imagePath: "javascript-stacked-grouped-column-chart.jpg",
        description:
            "We have created a simple example that shows you how to create a **JavaScript Stacked Column Chart Side-by-side** using our JavaScript Chart Framework.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "We have created a simple example that shows you how to create a **JavaScript Stacked Column Chart Side-by-side** using our JavaScript Chart Framework.",
                title: "JavaScript Stacked Column Side by Side",
                pageTitle: "JavaScript Stacked Group Column Chart | View Examples Now",
                metaDescription:
                    "Design JavaScript Stacked Group Column Chart side-by-side using our 5-star rated JavaScript Chart Framework, SciChart.js. Get  your free demo now.",
                markdownContent:
                    "## Stacked Column Side By Side on Vanilla JavaScript for SciChart.js Example\n\n### Overview\nThis example demonstrates how to create a sophisticated stacked and grouped column chart using vanilla JavaScript with SciChart.js. In this example, multiple data series (for example, representing tomato, pepper and cucumber data) are rendered side by side by assigning different **stackedGroupId** values. The chart is initialized asynchronously using WebAssembly-powered performance via the SciChartSurface.\n\n### Technical Implementation\nThe chart creation begins with an asynchronous initialization using async/await, as shown in the implementation which mirrors the techniques described in the [asynchronous initialization documentation](https://www.scichart.com/documentation/js/current/Tutorial01IncludingSciChartjsHTMLPage.html). The **NumericAxis** for both the X and Y dimensions is configured with custom label precision and formatting settings; developers can refer to the [Numeric Axis documentation](https://www.scichart.com/documentation/js/current/NumericAxis.html) for more details on this. Data series are created with the **StackedColumnRenderableSeries** and then assembled into a **StackedColumnCollection** to achieve the grouped (side-by-side) stacked effect. More information on these series types is available in the [Stacked Column Series Type documentation](https://www.scichart.com/documentation/js/current/The%20Stacked%20Column%20Series%20Type.html). In addition, data labels are styled with custom fonts, padding, and precision settings following best practices outlined in the [Data Label Positioning documentation](https://www.scichart.com/documentation/js/current/DataLabelPositioning.html).\n\n### Features and Capabilities\nThis implementation includes several advanced features:\n\n- **Animated Series Transitions:** A WaveAnimation is applied to the series to create smooth startup animations. This enhances the visual appeal and is discussed in the [Series Style Animations documentation](https://www.scichart.com/documentation/js/current/Series%20Style%20Animations.html).\n\n- **Interactive Chart Modifiers:** The chart supports interactive functionalities such as zooming and panning through the integration of ZoomExtentsModifier, ZoomPanModifier, and MouseWheelZoomModifier. Developers can learn more about these interactive modifiers in the [ZoomExtentsModifier documentation](https://www.scichart.com/documentation/js/current/ZoomExtentsModifier.html). Additionally, the inclusion of a LegendModifier enhances the user experience by providing interactive legends, as explained in the [Legend Modifier documentation](https://www.scichart.com/documentation/js/current/LegendModifier.html).\n\n### Integration and Best Practices\nThe example is implemented using vanilla JavaScript without reliance on frameworks or custom hooks, ensuring a lightweight integration process. Resource cleanup is handled through a destructor pattern that deletes the SciChartSurface when it is no longer needed, aligning with the guidelines provided in the [Memory Best Practices documentation](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html). Furthermore, performance optimization is achieved by leveraging the wasmContext for efficient WebAssembly-powered computations, ensuring the chart remains responsive even with complex data. Custom theming is also supported via the appTheme, and developers interested in visual customization can refer to the [Chart Styling - Creating a Custom Theme documentation](https://www.scichart.com/documentation/js/current/Chart%20Styling%20-%20Creating%20a%20Custom%20Theme.html).\n\nThis example represents an excellent demonstration of building highly interactive and customizable charts with SciChart.js in a vanilla JavaScript environment, adhering to best practices in asynchronous programming, data visualization configuration, and resource management.",
            },
            react: {
                subtitle:
                    "We have created a simple example that shows you how to create a **React Stacked Column Chart Side-by-side** using our JavaScript Chart Framework.",
                title: "React Stacked Column Side by Side",
                pageTitle: "React Stacked Group Column Chart | View Examples Now",
                metaDescription:
                    "Design React Stacked Group Column Chart side-by-side using our 5-star rated JavaScript Chart Framework, SciChart.js. Get  your free demo now.",
                markdownContent:
                    '# React Stacked Column Side by Side\n\n### Overview\nThis example demonstrates how to create a **stacked column chart side-by-side** using SciChart.js within a React framework. The chart visualizes data for produce items by grouping individual series (for tomatoes, peppers, and cucumbers) into separate side-by-side columns, providing a clear visual comparison of data over a series of years.\n\n### Technical Implementation\nThe chart is constructed using the SciChart.js API by first configuring the X and Y axes with numeric parameters and then creating individual **StackedColumnRenderableSeries** for each data series. Each series is assigned a unique stacking group identifier (using the property "stackedGroupId") to ensure they appear side-by-side rather than being stacked on top of each other. The setup includes the use of interactive modifiers such as **ZoomExtentsModifier**, **ZoomPanModifier**, and **MouseWheelZoomModifier** to enhance usability, and a smooth appearance is achieved through the implementation of [WaveAnimation](https://www.scichart.com/documentation/js/current/typedoc/classes/waveanimation.html). The React integration is streamlined by using the SciChartReact component with the initChart property, as explained in the [Tutorial 02 - Creating a Chart with scichart-react](https://www.scichart.com/documentation/js/current/Tutorial02CreatingChartsWithInitChart.html).\n\n### Features and Capabilities\nThis example showcases advanced chart grouping by organizing multiple data series into distinct stacking groups for a side-by-side presentation. Key features include dynamic chart animations, interactive data exploration through pan and zoom controls, and a customizable legend to clearly indicate each data series. The grouping logic and chart configuration align with the methods demonstrated in the [React Stacked Group Column Chart Demo](https://demo.scichart.com/react/stacked-grouped-column-chart-side-by-side) and are grounded in the principles detailed in the [JavaScript Stacked Column Chart Documentation](https://www.scichart.com/documentation/js/current/The%20Stacked%20Column%20Series%20Type.html).\n\n### Integration and Best Practices\nIntegrating SciChart.js with React is efficiently handled by the SciChartReact component, which accepts an initialization function via the initChart prop to render the chart within a React component. This method supports the best practices outlined in [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/). In addition, applying interactivity modifiers such as ZoomPanModifier is essential for responsive chart behavior, as documented in the [ZoomPanModifier documentation](https://www.scichart.com/documentation/js/current/ZoomPanModifier.html). Furthermore, developers looking to optimize performance can refer to the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) for guidance on efficient rendering and data handling in large-scale React applications.',
            },
            angular: {
                subtitle:
                    "We have created a simple example that shows you how to create a **Angular Stacked Column Chart Side-by-side** using our JavaScript Chart Framework.",
                title: "Angular Stacked Column Side by Side",
                pageTitle: "Angular Stacked Group Column Chart | View Examples Now",
                metaDescription:
                    "Design Angular Stacked Group Column Chart side-by-side using our 5-star rated JavaScript Chart Framework, SciChart.js. Get  your free demo now.",
                markdownContent:
                    '# Stacked Column Side By Side in Angular\n\n### Overview\nThis example demonstrates how to integrate SciChart.js into an Angular application using a standalone Angular component. The example renders a "stacked column side by side" chart by initializing the SciChartSurface with numeric axes, a grouped stacked column collection (using the concept of series stacking with different stackedGroupIds), and interactive modifiers such as zooming and panning. The chart is animated using a wave animation effect and includes a legend for series identification.\n\n### Technical Implementation\nThe implementation uses a standalone Angular component that imports the [scichart-angular](https://www.npmjs.com/package/scichart-angular) component. Inside the component, the chart is initialized by assigning the asynchronous function `drawExample` to a component property which sets up the SciChartSurface, adds numeric axes ([Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/)), and creates multiple renderable series that are grouped side by side via different stackedGroupIds. The asynchronous pattern using async/await ensures that the WebAssembly based SciChartSurface is created before further configuration and is integrated seamlessly into Angular’s component lifecycle.\n\n### Features and Capabilities\nThe example highlights several advanced features of SciChart.js including:\n\n- **Stacked Column Grouping:** Series are differentiated by setting the `stackedGroupId` property, allowing columns to be displayed side by side instead of stacking strictly on top of each other.\n\n- **Animation:** A [wave animation](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) is applied to the entire collection to enhance the visual appeal.\n\n- **Interactivity:** Modifiers for zoom extents, pan, and mouse wheel zoom provide interactive performance for end users.\n\n### Integration and Best Practices\nThe Angular integration leverages best practices for using third-party libraries in standalone components. The chart instance is encapsulated within the Angular component via the `[initChart]` input on the `<scichart-angular>` component. This design follows recommendations for Angular component architecture, including proper lifecycle management, which can be further explored in the [Component Lifecycle - Angular](https://angular.io/guide/lifecycle-hooks) documentation. The asynchronous initialization logic in the example ensures that the chart is fully rendered before the component interacts with it, following guidance from several asynchronous integration discussions such as [Angular Async/Await: How To Use It](https://www.infragistics.com/community/blogs/b/infragistics/posts/angular-async-await). Additionally, memory and resource cleanup is handled through SciChartSurface.delete() when required, resonating with best practices outlined in [Memory Best Practices | JavaScript Chart Documentation - SciChart](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) and strategies for third-party component encapsulation [Using Angular Components with Third-Party Libraries](https://medium.com/netanelbasal/using-angular-components-with-third-party-libraries-522a1f33003).\n\nThe example also demonstrates how to integrate Angular’s asynchronous patterns for initialization, ensuring that the chart is created only after the necessary resources are loaded. Developers can further explore Angular standalone components in the [Getting started with standalone components - Angular](https://angular.io/guide/standalone-components) documentation.\n\nOverall, the implementation provides a comprehensive approach to embedding a sophisticated, WebAssembly powered chart inside an Angular application while ensuring optimal performance and a clean component lifecycle.',
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Stacked%20Column%20Series%20Type.html",
                title: "The specific page for the JavaScript Stacked Column Chart documentation will help you to get started",
                linkTitle: "JavaScript Stacked Column Chart Documentation",
            },
        ],
        path: "stacked-grouped-column-chart-side-by-side",
        metaKeywords: "stacked, column, side-by-side, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/BasicChartTypes/StackedColumnSideBySide",
        thumbnailImage: "javascript-stacked-grouped-column-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const stackedColumnSideBySideExampleInfo = createExampleInfo(metaData);
