import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DBasicChartTypesMountainChart",
        imagePath: "javascript-mountain-chart.jpg",
        description:
            "Use our Mountain Chart example to learn how to create a **JavaScript Mountain Chart** using SciChart.js, our in-house built JavaScript Chart framework.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Use our Mountain Chart example to learn how to create a **JavaScript Mountain Chart** using SciChart.js, our in-house built JavaScript Chart framework.",
                title: "JavaScript Mountain Chart",
                pageTitle: "JavaScript Mountain Chart | View Examples Now | SciChart.js",
                metaDescription:
                    "Create JavaScript Mountain Chart with SciChart.js. Zero line can be zero or a specific value. Fill color can be solid or gradient as well. Get a free demo now.",
                markdownContent:
                    "# Vanilla JavaScript Mountain Chart Example\n\n## Overview\nThis example demonstrates how to create a high-performance, interactive **Mountain Chart** using SciChart.js in a vanilla JavaScript environment. The chart visualizes a dynamically generated random walk series with an engaging mountain chart rendering that includes gradient fills and a wave animation effect.\n\n## Technical Implementation\nThe chart is initialized asynchronously using async/await, which creates a SciChartSurface with a WebAssembly context for enhanced performance as explained in the [WebAssembly Initialization Tutorial](https://www.scichart.com/documentation/js/current/Tutorial02IncludeIndexMinJSWebassemblyFilesOffline.html). Numeric axes are configured with the [NumericAxis](https://www.scichart.com/documentation/js/current/NumericAxis.html) and custom range settings to ensure optimal scaling. The data series is generated using a random walk algorithm and rendered via the [FastMountainRenderableSeries](https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html) that supports both solid and gradient fill properties configured through [GradientParams](https://www.scichart.com/documentation/js/current/The%20Mountain%20(Area)%20Series%20Type.html). A [WaveAnimation](https://www.scichart.com/documentation/js/current/typedoc/classes/waveanimation.html) is applied to bring fluid motion to the chart.\n\n## Features and Capabilities\nThe example offers advanced features including dynamic data updates implementing a smooth random walk, a gradient fill that transitions from a solid color to transparency, and interactive modifiers such as zoom extents, rubber band zoom, and mouse wheel zoom. These features are integrated to provide an intuitive, real-time experience, further supported by the [Interactive Chart Modifiers](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) documentation.\n\n## Integration and Best Practices\nBy leveraging vanilla JavaScript, developers can easily integrate this example into any web application without additional frameworks. The asynchronous pattern ensures efficient resource management, and proper cleanup of the SciChartSurface prevents memory leaks, aligning with recommended [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html). This implementation showcases how to harness the performance benefits of WebGL and WebAssembly for demanding charting applications while maintaining high levels of interactivity and visual appeal.",
            },
            react: {
                subtitle:
                    "Use our Mountain Chart example to learn how to create a **React Mountain Chart** using SciChart.js, our in-house built JavaScript Chart framework.",
                title: "React Mountain Chart",
                pageTitle: "React Mountain Chart | View Examples Now | SciChart.js",
                metaDescription:
                    "Create React Mountain Chart with SciChart.js. Zero line can be zero or a specific value. Fill color can be solid or gradient as well. Get a free demo now.",
                markdownContent:
                    "# React Mountain Chart Example in React\n\n## Overview\nThis example demonstrates the creation of a **React Mountain Chart** using SciChart.js, showcasing how to integrate advanced charting functionality into a React application. The chart visualizes a dynamic dataset generated by a random walk and is rendered with a mountain series that features both a gradient fill and an animated wave effect.\n\n## Technical Implementation\nThe chart is initialized via an asynchronous function which creates a SciChartSurface and configures it with numeric X and Y axes. A mountain series is added using the FastMountainRenderableSeries with configurable properties such as stroke thickness, gradient fills (using GradientParams), and a wave animation effect. The component is integrated into React by passing the initialization function as a prop to the SciChartReact component, following best practices from [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/).\n\n## Features and Capabilities\nThe example emphasizes several advanced features: interactive zooming and panning through modifiers like ZoomExtentsModifier, RubberBandXyZoomModifier, and MouseWheelZoomModifier; dynamic data generation using a RandomWalk generator; and visually appealing animations on the mountain series. This comprehensive feature set aligns with recommendations found in [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) and the detailed mountain chart documentation available in the [SciChart.js Mountain Chart Documentation](https://www.scichart.com/documentation/js/current/The%20Mountain%20(Area)%20Series%20Type.html).\n\n## Integration and Best Practices\nIntegrating SciChart.js into a React application is streamlined by the use of the SciChartReact component, which accepts a function prop for asynchronous chart initialization. This pattern supports effective resource management, especially with WebGL and WebAssembly contexts, and allows for efficient performance optimization. Developers can further explore techniques in asynchronous React patterns through [Using async/await inside a React functional component](https://stackoverflow.com/questions/57847626/using-async-await-inside-a-react-functional-component). Overall, this example serves as an instructive guide on implementing high-performance, interactive charts in React while following robust coding and integration best practices.",
            },
            angular: {
                subtitle:
                    "Use our Mountain Chart example to learn how to create a **Angular Mountain Chart** using SciChart.js, our in-house built JavaScript Chart framework.",
                title: "Angular Mountain Chart",
                pageTitle: "Angular Mountain Chart | View Examples Now | SciChart.js",
                metaDescription:
                    "Create Angular Mountain Chart with SciChart.js. Zero line can be zero or a specific value. Fill color can be solid or gradient as well. Get a free demo now.",
                markdownContent:
                    "# Angular Mountain Chart Example\n\n## Overview\nThis example demonstrates how to integrate SciChart.js into an Angular application to create a high-performance, interactive mountain chart. The chart is rendered using the standalone Angular component provided by the [scichart-angular](https://www.npmjs.com/package/scichart-angular) package and is initialized asynchronously to optimize resource management.\n\n## Technical Implementation\nThe chart is created by an asynchronous initialization function that sets up a SciChartSurface with WebAssembly for enhanced performance. Numeric axes are added to the surface, and a mountain series is rendered using a dynamic data series generated by a random walk algorithm. The mountain series features a gradient fill configured using GradientParams from the [JavaScript Mountain Chart Documentation](https://www.scichart.com/documentation/js/current/The%20Mountain%20(Area)%20Series%20Type.html) and includes a wave animation effect as implemented by the [WaveAnimation](https://www.scichart.com/documentation/js/current/typedoc/classes/waveanimation.html) class. Additionally, interactive modifiers such as ZoomExtentsModifier, RubberBandXyZoomModifier, and MouseWheelZoomModifier are incorporated to enhance the user experience.\n\n## Features and Capabilities\nThe example highlights several advanced features including dynamic data updates, gradient fills, and engaging animation effects. Real-time interaction is enabled through sophisticated zooming and panning capabilities, which allow users to explore the chart data intuitively. These features are critical for creating responsive and visually appealing data visualizations.\n\n## Integration and Best Practices\nThis implementation leverages Angular standalone components to integrate SciChart.js seamlessly within an Angular environment, following modern Angular architectural practices. Asynchronous chart initialization, as outlined in the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) guide and [Tutorial 01 - Setting up a npm Project with SciChart.js](https://www.scichart.com/documentation/js/current/Tutorial%2001%20-%20Setting%20up%20a%20Project%20with%20SciChart.js.html), ensures efficient resource handling and performance optimization via WebAssembly. Furthermore, the inclusion of interactive chart modifiers for zoom and pan operations is supported by best practices found in [Tutorial 03 - Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html).",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Mountain%20(Area)%20Series%20Type.html",
                title: "This specific page in the JavaScript Mountain Chart documentation will help you to get started",
                linkTitle: "JavaScript Mountain Chart Documentation",
            },
        ],
        path: "mountain-chart",
        metaKeywords: "mountain, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/BasicChartTypes/MountainChart",
        thumbnailImage: "javascript-mountain-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const mountainChartExampleInfo = createExampleInfo(metaData);
