import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DLegendsChartLegendsAPI",
        imagePath: "javascript-chart-legends.jpg",
        description:
            "Demonstrates how to add a legend to a **JavaScript Chart** using SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to add a legend to a **JavaScript Chart** using SciChart.js, High Performance JavaScript Charts",
                title: "Chart Legends API",
                pageTitle: "Chart Legends API",
                metaDescription:
                    "Demonstrates how to add a Legends to a JavaScript Line Chart using SciChart.js. The legend is created when you add a LegendModifier type to the sciChartSurface.chartModifiers collection.",
                markdownContent:
                    "# Chart Legends API Example (Vanilla JavaScript)\n\n## Overview\nThis example demonstrates how to integrate an interactive legend into a high performance 2D chart using SciChart.js in a vanilla JavaScript environment. The example sets up a SciChartSurface with numeric axes, multiple Fourier series based line renderable series, and a dynamic legend that can be customized through properties like placement, orientation, checkboxes, and series markers. Developers can get started with this approach by exploring the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) documentation.\n\n## Technical Implementation\nThe chart is initialized by calling SciChartSurface.create, which returns a WebAssembly context (wasmContext) used to optimize rendering performance. Numeric axes are configured using the NumericAxis class with custom label formatting and precision as described in the [Numeric Axis documentation](https://www.scichart.com/documentation/js/current/NumericAxis.html). Multiple FastLineRenderableSeries are added based on Fourier series data generated by ExampleDataProvider, demonstrating the performance benefits for real-time data visualization as outlined in the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html). The dynamic legend is created by instantiating a LegendModifier with configurable properties such as placement (using ELegendPlacement) and orientation (using ELegendOrientation), enabling advanced legend customization as detailed in the [Legend Modifier documentation](https://www.scichart.com/documentation/js/current/LegendModifier.html).\n\n## Features and Capabilities\nThis example highlights several advanced features including the ability to dynamically update legend properties such as visibility, checkbox display, and series markers. The Fourier series data generation provides a practical demonstration of handling real-world chart data, while the use of WebAssembly context underlines performance optimization strategies. Additionally, the configuration of chart theming through appTheme indicates how developers can maintain consistent styling across the chart, as described in the [Chart Styling - Creating a Custom Theme](https://www.scichart.com/documentation/js/current/Chart%20Styling%20-%20Creating%20a%20Custom%20Theme.html) guide.\n\n## Integration and Best Practices\nAlthough this example is implemented using vanilla JavaScript, it follows best practices by encapsulating chart creation logic within a dedicated function and leveraging modular design for setting up axes, series, and modifiers. The integration of WebAssembly to enhance rendering performance is a key strategy for efficient real-time data visualization, as explained in [Creating a new SciChartSurface and loading Wasm](https://www.scichart.com/documentation/js/current/SciChartSurface.create%20and%20createSingle.html). Developers are encouraged to explore these techniques to build responsive and high performance chart applications.",
            },
            react: {
                subtitle:
                    "Demonstrates how to add a legend to a **React Chart** using SciChart.js, High Performance JavaScript Charts",
                title: "Chart Legends API",
                pageTitle: "Chart Legends API",
                metaDescription:
                    "Demonstrates how to add a Legends to a JavaScript Line Chart using SciChart.js. The legend is created when you add a LegendModifier type to the sciChartSurface.chartModifiers collection.",
                markdownContent:
                    "# Chart Legends API - React\n\n## Overview\nThis example demonstrates how to integrate a dynamic legend into a SciChart.js chart within a React application. The example creates multiple line series and attaches a customizable legend using the SciChart.js LegendModifier, enabling interactive control over the legend's visibility, placement, and orientation.\n\n## Technical Implementation\nThe chart is initialized in a dedicated function that uses SciChartSurface.create along with react components from the SciChartReact package. The created chart contains several renderable series, each provided with its own data series, and the legend is configured by adding a LegendModifier to the chartModifiers collection. Key to this implementation is the use of React refs and state in conjunction with the onInit callback, which allows the component to update legend properties dynamically. Developers interested in learning more about integrating SciChart.js with React can refer to the [React Charts with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/) guide and the [Tutorial 02 - Creating a Chart with scichart-react](https://www.scichart.com/documentation/js/current/Tutorial02CreatingChartsWithInitChart.html).\n\n## Features and Capabilities\nThe example highlights several advanced features including real-time update capabilities for the legend through dynamic state management. Users can toggle the legend's visibility, enable or disable checkboxes, and alter both the placement and orientation of the legend on the chart. This dynamic interactivity leverages React’s state and event handling mechanisms to update the SciChart.js LegendModifier seamlessly. More details can be found in the [Legend Modifier Documentation](https://www.scichart.com/documentation/js/current/LegendModifier.html) and by exploring the [Chart Legends API - SciChart.js Demo](https://demo.scichart.com/react/chart-legends).\n\n## Integration and Best Practices\nThe implementation follows best practices for integrating third-party WebGL charts into React by utilizing the SciChartReact component to manage chart lifecycles and performance. By using React refs and state, the application efficiently synchronizes user interactions with the underlying chart, ensuring optimal performance and responsiveness. This approach not only streamlines the dynamic update of the chart’s legend but also facilitates a clear separation between the chart logic and the React component UI, an important principle in modern React development. For further reading on performance and integration strategies, developers are encouraged to review the [ReactJS Sweep Line: Optimizing SciChartJS Performance](https://stackoverflow.com/questions/77781766/reactjs-sweep-line-optimizing-scichartjs-performance-reusing-wasmcontext-for-m) article.",
            },
            angular: {
                subtitle:
                    "Demonstrates how to add a legend to a **Angular Chart** using SciChart.js, High Performance JavaScript Charts",
                title: "Chart Legends API",
                pageTitle: "Chart Legends API",
                metaDescription:
                    "Demonstrates how to add a Legends to a JavaScript Line Chart using SciChart.js. The legend is created when you add a LegendModifier type to the sciChartSurface.chartModifiers collection.",
                markdownContent:
                    "# Chart Legends API for Angular\n\n## Overview\nThis example demonstrates how to seamlessly integrate SciChart.js's **LegendModifier** within an Angular application. The sample sets up a SciChartSurface with numeric axes and multiple Fourier series line renderable series, then dynamically adds an interactive legend to the chart. Developers can leverage Angular's data binding and event handling to toggle legend visibility, checkboxes, and series markers. For a detailed overview of the legend functionality, refer to the [Legend Modifier Documentation](https://www.scichart.com/documentation/js/current/LegendModifier.html).\n\n## Technical Implementation\nIn this example, the chart is initialized by creating a SciChartSurface and adding numeric axes along with several line series that represent Fourier series data. The integration focuses on setting up the **LegendModifier** to handle dynamic updating of legend properties such as placement and orientation. Angular’s event binding techniques are used to capture user interactions and update the chart in real time. Integration with Angular's lifecycle hooks ensures proper initialization and cleanup of the chart components, as discussed in the [Component Lifecycle - Angular](https://angular.io/guide/lifecycle-hooks) documentation.\n\n## Features and Capabilities\nThe example highlights several advanced features including **real-time updates** of legend properties. Users can modify the legend placement (Top-Left, Top-Right, Bottom-Left, Bottom-Right) and orientation (Vertical, Horizontal) dynamically. Additional interactive controls allow the toggling of series markers and checkboxes within the legend. This flexibility enables developers to create highly customizable and interactive charting experiences. Best practices for data binding in Angular, such as those outlined in [A Complete Guide to Data Binding in Angular](https://www.moontechnolabs.com/blog/data-binding-in-angular/), are implicitly applied to manage these dynamic updates.\n\n## Integration and Best Practices\nEfficient integration of SciChart.js with Angular is achieved by leveraging Angular’s robust event handling and lifecycle management. Initializing the SciChartSurface during Angular's component initialization ensures optimal performance, while using Angular reactive techniques helps in the dynamic update of legend properties without negatively impacting the application’s responsiveness. Developers are encouraged to explore strategies for performance optimization and effective event handling in Angular further, as noted in resources like [Angular Event Handling Techniques](https://stackoverflow.com/questions/55759247/angular-with-chart-js-legend-position) and the [Component Lifecycle - Angular](https://angular.io/guide/lifecycle-hooks) guide.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#LegendModifier.html",
                title: "The specific page for the SciChart.js Legends documentation will help you to get started",
                linkTitle: "Legend API Documentation",
            },
        ],
        path: "chart-legends",
        metaKeywords: "legend, api, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/Legends/ChartLegendsAPI",
        thumbnailImage: "javascript-chart-legends.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const chartLegendsAPIExampleInfo = createExampleInfo(metaData);
