import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DChartAnnotationsBackgroundAnnotations",
        imagePath: "javascript-background-annotations.jpg",
        description:
            "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js, High Performance JavaScript Charts",
                title: "JavaScript Quadrant Chart using Background Annotations",
                pageTitle: "JavaScript Quadrant Chart using Background Annotations",
                metaDescription:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js Annotations API",
                markdownContent:
                    '## JavaScript Background Annotations Example\n\n### Overview\nThis example demonstrates a high-performance bubble chart built with JavaScript using SciChart.js. The chart visualizes data for "Happiness vs GDP", where bubble sizes represent a logarithmic transformation of population figures, and dynamic background annotations are used to highlight chart quadrants. This implementation leverages SciChart.js for efficient WebGL rendering and real-time data updates.\n\n### Technical Implementation\nThe chart is created by instantiating a `SciChartSurface` with a `LogarithmicAxis` to display GDP per capita and a `NumericAxis` for happiness scores. Dynamic background annotations are implemented using multiple `BoxAnnotations` that update their boundaries during the `preRender` event to always fill the visible area. For an in-depth explanation of this technique, refer to the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html). A custom palette provider named `ContinentPaletteProvider` is also used to assign bubble colors based on continent metadata, a concept detailed in the [PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html). Additionally, a legend is provided by the `LegendModifier` and Data Labels are enabled via the `dataLabels` property on `FastBubbleRenderableSeries`.\n\nInteractive modifiers such as `ZoomPanModifier`, `MouseWheelZoomModifier`, and `CursorModifier` enhance user interaction by providing smooth zooming, panning, and custom tooltips, as described in the [Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) documentation. Data binding is achieved through the `XyzDataSeries`, which efficiently handles multi-dimensional data and integrates with a `SweepAnimation` to animate the appearance of the bubbles.\n\n### Features and Capabilities\n**Real-Time Updates:** Background annotations are updated dynamically on each `preRender` event, ensuring that quadrant highlights automatically adjust to the current visible range.\n\n**Advanced Customizations:** The example includes custom tooltips, interactive zooming and panning, and a manual legend that maps bubble colors to continents, all of which demonstrate the flexibility provided by SciChart.js.\n\n**Performance Optimization:** By leveraging efficient WebGL rendering and proper event handling, this implementation maintains excellent performance even with large datasets. For additional optimization techniques, see the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n\n### Integration and Best Practices\nThis JavaScript implementation emphasizes proper resource management by providing a destructor function to delete the `SciChartSurface` when it is no longer needed. Developers should follow best practices in memory management, as outlined in the [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) documentation. The example serves as a comprehensive guide for integrating SciChart.js in JavaScript projects, showing how to combine dynamic annotations, interactive modifiers, and custom palette providers for a rich, responsive charting experience.',
            },
            react: {
                subtitle:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js, High Performance JavaScript Charts",
                title: "React Quadrant Chart using Background Annotations",
                pageTitle: "React Quadrant Chart using Background Annotations",
                metaDescription:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js Annotations API",
                markdownContent:
                    "## React Quadrant Chart using Background Annotations\n\n### Overview\nThis example demonstrates a high-performance bubble chart implemented in React using SciChart.js. It visualizes data for GDP per capita versus happiness, with bubble sizes representing a logarithmic transformation of population data. The chart uses dynamic background annotations to create quadrant areas, offering a clear visual reference, and leverages the `<SciChartReact/>` component for seamless React integration. For more on React integration, refer to [React Charts with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/) and [Setting up a project with scichart-react](https://www.scichart.com/documentation/js/current/TutorialSetupProjectWithSciChartReact.html).\n\n### Technical Implementation\nThe chart is built by creating a `SciChartSurface` with a `LogarithmicAxis` for the X-axis and a `NumericAxis` for the Y-axis. Background annotations are implemented using multiple `BoxAnnotations` which update dynamically during the chart's preRender event to always fill the visible area. Furthermore, a custom palette provider named `ContinentPaletteProvider` is used to assign colors to bubbles based on continent information. Additionally, a legend is provided by the `LegendModifier` and Data Labels are enabled via the `dataLabels` property on `FastBubbleRenderableSeries`. The implementation details are compliant with the [SciChart.js Annotations API Documentation](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html) and carefully utilizes event handling to update annotations just before rendering, ensuring dynamic and responsive chart behavior.\n\n### Features and Capabilities\nThe example offers advanced interactive features such as zooming, panning, and custom tooltips via the `CursorModifier`. Data is bound using the `XyzDataSeries`, which maps GDP, happiness, and a logarithmically transformed population value to the chart. Further, the renderable series incorporates a `SweepAnimation` to smoothly animate the bubble data, and the custom palette provider dynamically colors bubbles by continent. These design choices showcase how real-time data updates and dynamic visualizations can be achieved, similar to the techniques outlined in the [Custom PaletteProvider example](https://www.scichart.com/example/javascript-chart/javascript-chart-color-points-individually-with-paletteprovider/) and [JavaScript Bubble Chart examples](https://www.scichart.com/example/javascript-chart/javascript-bubble-chart/).\n\n### Integration and Best Practices\nThe integration leverages the `<SciChartReact/>` component to seamlessly render the chart within a React application. Developers are encouraged to follow best practices for event handling and performance optimization, taking advantage of SciChart.js's efficient WebGL rendering. The use of dynamic background annotations and interactive modifiers not only improves usability but also demonstrates advanced configuration techniques. For additional guidance on interactive features such as tooltips and optimized performance, explore the [CursorModifier documentation](https://www.scichart.com/documentation/js/current/CursorModifier.html) and [Performance Optimisation Tips](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n",
            },
            angular: {
                subtitle:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js, High Performance JavaScript Charts",
                title: "Angular Quadrant Chart using Background Annotations",
                pageTitle: "Angular Quadrant Chart using Background Annotations",
                metaDescription:
                    "Demonstrates how to color areas of the chart surface using background Annotations using SciChart.js Annotations API",
                markdownContent:
                    "## Angular Quadrant Chart using Background Annotations\n\n### Overview\nThis example demonstrates how to create a high-performance bubble chart using SciChart.js in an Angular application. The chart visualizes GDP per capita versus happiness, with bubble sizes corresponding to a logarithmic transformation of population data, and utilizes dynamic background annotations to highlight chart quadrants. The integration is achieved using the scichart-angular component, as described in the [scichart-angular npm page](https://www.npmjs.com/package/scichart-angular).\n\n### Technical Implementation\nThe chart is implemented by creating a `SciChartSurface` with a `LogarithmicAxis` for the X-axis and a `NumericAxis` for the Y-axis. Dynamic background annotations are set up using multiple `BoxAnnotations` that update during the `preRender` event, ensuring they always cover the visible data area. Additionally, a custom palette provider named `ContinentPaletteProvider` assigns colors to bubbles (`FastBubbleRenderableSeries`) based on continent metadata, following guidelines in the [PaletteProvider API documentation](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html). Interactive modifiers such as `ZoomPanModifier`, `MouseWheelZoomModifier`, and `CursorModifier` are incorporated to provide smooth zooming, panning, and custom tooltips, details of which can be explored in the [Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) tutorial. Data binding is achieved through the `XyzDataSeries`, ensuring a robust and efficient rendering of real-time data updates.\n\n### Features and Capabilities\nThis example showcases real-time update capabilities with smooth animations using `SweepAnimation` for the bubble renderable series. It includes advanced features such as dynamic quadrant highlighting via `BoxAnnotations`, custom tooltips that display detailed data on GDP, happiness, and population, and a manual legend that explains the visual mapping of continents to bubble colors. These features emphasize the flexibility of SciChart.js when used within an Angular framework.\n\n### Integration and Best Practices\nThe Angular integration leverages component-based patterns to render charts efficiently using the `ScichartAngularComponent`. The use of event handling mechanisms, such as the `preRender` update for annotations, demonstrates an effective approach to dynamic data visualization. Developers can further enhance these implementations by following [performance optimization tips](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) and using best practices for interactive chart modifiers. This example serves as a practical guide for integrating SciChart.js in Angular applications and achieving high-performance, interactive data visualizations.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html",
                title: "The specific page for the SciChart.js Annotations documentation will help you to get started",
                linkTitle: "Annotations API Documentation",
            },
        ],
        path: "chart-background-annotations",
        metaKeywords: "annotations, chart, api, javascript, webgl, canvas",
        onWebsite: false,
        filepath: "Charts2D/ChartAnnotations/BackgroundAnnotations",
        thumbnailImage: "javascript-background-annotations.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const backgroundAnnotationsExampleInfo = createExampleInfo(metaData);
