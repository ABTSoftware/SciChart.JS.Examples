import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "Charts2DChartAnnotationsAnnotationLayers",
        imagePath: "javascript-chart-annotation-layers.jpg",
        description:
            "Demonstrates how Annotation layering a **JavaScript Chart** using SciChart.js, High Performance JavaScript Charts\nNotice the difference between annotations rendered to SVG and Canvas, as well as **annotationLayer** property effect.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how Annotation layering a **JavaScript Chart** using SciChart.js, High Performance JavaScript Charts\nNotice the difference between annotations rendered to SVG and Canvas, as well as **annotationLayer** property effect.",
                title: "JavaScript Chart Annotation Layers",
                pageTitle: "JavaScript Chart Annotation Layers",
                metaDescription: "Demonstrates how layering works a JavaScript Chart using SciChart.js Annotations API",
                markdownContent:
                    '# Annotation Layers with Vanilla JavaScript\n\n## Overview\nThis example demonstrates how to build a rich, interactive chart using SciChart.js in a vanilla JavaScript setting. The "Annotation Layers" example focuses on organizing chart annotations into multiple layers such as **Background**, **BelowChart**, and **AboveChart**. This layering allows developers to clearly separate different types of visual data and interactions on the chart.\n\n## Technical Implementation\nThe chart is initialized using the asynchronous method `SciChartSurface.create`, which sets up a new chart surface along with a WebAssembly context. Numeric axes are added and configured with custom grid line styles and grow-by ranges. Built-in chart modifiers like **ZoomPanModifier**, **ZoomExtentsModifier**, and **MouseWheelZoomModifier** are incorporated to enable interactive features such as zooming and panning. For detailed initialization techniques, refer to the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) documentation.\n\nDynamic annotation updates are implemented using the `preRender` event. This event subscription allows the example to adjust annotation properties immediately before each render cycle, ensuring annotations stay aligned with their associated chart elements. Developers looking for performance insights when updating annotations in real-time should review the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) documentation.\n\n## Features and Capabilities\nThis example highlights several advanced features:\n\n- **Annotation Layers:** Annotations such as `BoxAnnotation`, `TextAnnotation`, and `NativeTextAnnotation` are assigned to different layers (Background, BelowChart, AboveChart) to control rendering order. More details can be found in the [Annotations API Overview](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html).\n\n- **Interactive and Editable Annotations:** All annotations are marked as editable (using the `isEditable` property), which allows end users to interact with and modify annotations. For further reading, check out the [Editable Annotations](https://www.scichart.com/documentation/js/current/EditableAnnotations.html) guide.\n\n- **Mixed Annotation Types:** The example uses both SVG-based `TextAnnotation` and HTML-based `NativeTextAnnotation` to demonstrate versatility in text rendering, offering developers customization options based on their performance and styling needs. Additional context is available in the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html) documentation.\n\n## Integration and Best Practices\nAlthough implemented directly in vanilla JavaScript, the techniques shown here are easily adaptable to frameworks such as Angular or React, as seen in the additional source files provided. The example adheres to best practices by clearly separating chart initialization, annotation configuration, and interactive modifier integration. Developers seeking to integrate multiple annotation layers and renderable series in complex projects can learn more from the [SciChart.JS Changelog](https://www.scichart.com/changelog/scichart-js/), which details recent enhancements and integration strategies.\n\nOverall, this example efficiently demonstrates how to leverage SciChart.js for creating interactive, high-performance charts with advanced annotation capabilities using vanilla JavaScript.',
            },
            react: {
                subtitle:
                    "Demonstrates how Annotation layering a **React Chart** using SciChart.js, High Performance JavaScript Charts\nNotice the difference between annotations rendered to SVG and Canvas, as well as **annotationLayer** property effect.",
                title: "React Chart Annotation Layers",
                pageTitle: "React Chart Annotation Layers",
                metaDescription: "Demonstrates how layering works a React Chart using SciChart.js Annotations API",
                markdownContent:
                    "# React Chart Annotation Layers\n\n## Overview\nThis example demonstrates how to create a high-performance 2D chart with advanced annotation layering using SciChart.js in a React environment. The chart integrates multiple annotation types—such as box and text annotations—across different layers (background, below chart, and above chart) to enhance visual clarity and interactivity.\n\n## Technical Implementation\nThe chart is initialized using the SciChartReact component, which accepts an initialization function (drawExample) that builds the chart by adding numeric axes, a fast line renderable series, and a variety of annotations. The implementation sets custom styling through an application theme and utilizes the preRender event to dynamically update the positions of native text annotations relative to their associated box annotations. For more details on how annotations are handled, refer to the [Annotations API Overview](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html).\n\n## Features and Capabilities\nThe example showcases real-time annotation updates and advanced customization options. Multiple chart modifiers such as ZoomPanModifier, MouseWheelZoomModifier, and ZoomExtentsModifier are added to enable intuitive zooming and panning functionalities, which are essential for interactive data exploration. The dynamic linking of annotation positions using the preRender event demonstrates a practical approach to maintain annotation alignment during chart interactions. Read more about integrating zooming and panning in [Adding Zooming and Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html).\n\n## Integration and Best Practices\nThe integration with React is achieved through the SciChartReact component, illustrating best practices for incorporating SciChart.js into a React application. Developers can follow the guidance in [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/) to set up and optimize their projects. The example emphasizes performance optimization by leveraging efficient rendering techniques for both SVG and canvas-based annotations, as well as dynamic update capabilities using React’s component lifecycle. This approach ensures that even complex charts remain responsive and interactive.\n\nThis example serves as a practical guide for developers looking to build interactive, high-performance React charts with advanced annotation features using SciChart.js.",
            },
            angular: {
                subtitle:
                    "Demonstrates how Annotation layering a **Angular Chart** using SciChart.js, High Performance JavaScript Charts\nNotice the difference between annotations rendered to SVG and Canvas, as well as **annotationLayer** property effect.",
                title: "Angular Chart Annotation Layers",
                pageTitle: "Angular Chart Annotation Layers",
                metaDescription: "Demonstrates how layering works a Angular Chart using SciChart.js Annotations API",
                markdownContent:
                    "# Angular Chart Annotation Layers\n\n## Overview\nThis example demonstrates how to integrate SciChart.js into an Angular standalone component, showcasing advanced annotation layering techniques. The chart is designed to display high-performance 2D data visualization featuring multiple annotation layers, including background, below chart, and above chart, that help differentiate various annotation types.\n\n## Technical Implementation\nThe implementation uses the [scichart-angular](https://classic.yarnpkg.com/en/package/scichart-angular) component to embed the chart into an Angular environment. A SciChartSurface is created and configured with numeric axes, a fast line renderable series, and custom styling using an Angular-friendly theme. Dynamic annotations, both SVG and native, are added to the chart and linked to update automatically via the preRender event. More details on adding such dynamic annotations are available in the [Tutorial 06 - Adding Annotations](https://www.scichart.com/documentation/js/current/Tutorial%2006%20-%20Adding%20Annotations.html) guide.\n\n## Features and Capabilities\nThis example highlights several advanced features including real-time updates of annotations, interactive editable annotations, and multiple layers of annotation rendering (Background, Below Chart, Above Chart). The integration of chart modifiers such as [ZoomPanModifier](https://www.scichart.com/documentation/js/current/ZoomPanModifier.html), MouseWheelZoomModifier, and ZoomExtentsModifier enhances the user experience by enabling intuitive zooming and panning functionalities.\n\n## Integration and Best Practices\nThe angular integration leverages input property binding to initialize the chart through a dedicated function, ensuring that the charting component remains modular and easily replaceable. Best practices for setting up a SciChart.js project in Angular can be reviewed in the [Tutorial 01 - Setting up a npm Project with SciChart.js](https://www.scichart.com/documentation/js/current/Tutorial%2001%20-%20Setting%20up%20a%20Project%20with%20SciChart.js.html) documentation. Additionally, the example demonstrates performance optimization by employing efficient WebGL rendering techniques and utilizing dynamic event handling to manage annotation positioning, while custom theming enhances visual clarity as described in the [Chart Styling - Creating a Custom Theme](https://www.scichart.com/documentation/js/current/Chart%20Styling%20-%20Creating%20a%20Custom%20Theme.html) documentation.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#The%20Annotations%20API%20Overview.html",
                title: "The specific page for the SciChart.js Annotations documentation will help you to get started",
                linkTitle: "Annotations API Documentation",
            },
        ],
        path: "annotation-layers",
        metaKeywords: "annotations, chart, api, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "Charts2D/ChartAnnotations/AnnotationLayers",
        thumbnailImage: "javascript-chart-annotation-layers.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const annotationLayersExampleInfo = createExampleInfo(metaData);
