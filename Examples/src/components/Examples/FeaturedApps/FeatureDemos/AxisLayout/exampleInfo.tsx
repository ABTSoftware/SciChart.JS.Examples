import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "FeaturedAppsFeatureDemosAxisLayout",
        imagePath: "javascript-axis-layout.jpg",
        description:
            "The same data is rendered many to show the Axis Layout options in SciChart.js. Charts support outer, inner, central and stacked axes, and use of axis alignment to create vertical charts. Series may be registered on specific X,Y axis pairs for infinite layout configuration.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "The same data is rendered many to show the Axis Layout options in SciChart.js. Charts support outer, inner, central and stacked axes, and use of axis alignment to create vertical charts. Series may be registered on specific X,Y axis pairs for infinite layout configuration.",
                title: "JavaScript Chart Axis Layout Options",
                pageTitle: "JavaScript Chart Axis Layout Options",
                metaDescription:
                    "Demonstrates outer, inner, central and stacked axes, and use of axis alignment to create vertical charts",
                markdownContent:
                    "# AxisLayout Example with Vanilla JS\n\n## Overview\n\nThis example demonstrates how to create a highly customizable and responsive chart using SciChart.js in a plain Vanilla JavaScript application. The focus is on advanced **axis layout** techniques, enabling developers to design custom axis placements and achieve real-time data updates while taking advantage of WebGL for optimal rendering performance.\n\n## Technical Implementation\n\nThe chart is initialized using the SciChartSurface API, which can be configured as part of a JSON-driven setup. Developers can follow the step-by-step process detailed in the [Tutorial 01 - Including SciChart.js in an HTML Page using CDN](https://www.scichart.com/documentation/js/current/Tutorial01IncludingSciChartjsHTMLPage.html) to get started. The example makes extensive use of the Builder API to specify chart properties, enabling customizations for axis layout that adhere to the guidance in the [Inner Axis Layout](https://www.scichart.com/documentation/js/current/Axis%20Layout%20-%20Inside%20and%20Central%20Axis.html) documentation.\n\nFurthermore, advanced axis customization techniques are employed to control gridline and label placements, as elaborated in the [Axis Overview in SciChart.js](https://www.scichart.com/documentation/js/current/StartHere-AxisOverview.html) documentation. Performance considerations are also addressed by leveraging SciChart.js’s efficient rendering capabilities; for further optimization strategies, see the [Performance Tips](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n\n## Features and Capabilities\n\nKey features in this example include:\n\n- **Real-Time Axis Updates**: The implementation efficiently handles live data streams, supporting responsive updates and interactive visualizations, as demonstrated in SciChart's [Realtime Chart Updates](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html).\n\n- **Advanced Axis Customization**: Through flexible API configurations, the example shows how to adjust gridlines, label spacing, and overall axis appearance, aligning with best practices outlined in the [SciChart JS User Manual](https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html).\n\n- **Responsive Design**: The layout adapts gracefully to different viewport sizes, ensuring seamless performance across devices by employing design principles highlighted in modern charting best practices.\n\n- **WebGL Integration**: By utilizing WebGL for rendering, the chart delivers high-performance, real-time graphics. Developers looking for optimized rendering methods can refer to the [SciChart.js for Web](https://www.scichart.com/scichart-js-for-web-a-fast-realtime-2d-3d-chart-component-for-html5-javascript-apps/) documentation.\n\n## Integration and Best Practices\n\nThis example follows best practices for integrating SciChart.js into a plain JavaScript project. Code organization emphasizes a clear separation between configuration and rendering, which improves maintainability and scalability. Developers are encouraged to review the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) guide for insights into structuring Vanilla JS projects, along with tips on performance optimization and efficient event handling.\n\nBy combining clear JSON configuration, modular code structures, and advanced WebGL rendering techniques, this AxisLayout example serves as a practical blueprint for building high-performance, interactive charts using SciChart.js with Vanilla JavaScript.",
            },
            react: {
                subtitle:
                    "The same data is rendered many to show the Axis Layout options in SciChart.js. Charts support outer, inner, central and stacked axes, and use of axis alignment to create vertical charts. Series may be registered on specific X,Y axis pairs for infinite layout configuration.",
                title: "React Chart Axis Layout Options",
                pageTitle: "React Chart Axis Layout Options",
                metaDescription:
                    "Demonstrates outer, inner, central and stacked axes, and use of axis alignment to create vertical charts",
                markdownContent:
                    "# AxisLayout Example - React\n\n## Overview\nThe AxisLayout example demonstrates the integration of SciChart.js in a React application. It highlights techniques such as utilizing **React Hooks** for setting up and managing SciChart components, as well as leveraging the flexibility of custom axis rendering to create dynamic and responsive charts. Developers can explore more on integrating SciChart.js in React in the [SciChart React Component tutorial](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html).\n\n## Technical Implementation\nThis example employs a robust implementation where the Builder API works in conjunction with JSON data to configure the chart and axis layout dynamically. The use of **custom axis renderers** allows for detailed control over the appearance and behavior of axes, similar to the strategies discussed in the [React Dashboard example for SciChart.js](https://www.scichart.com/blog/creating-a-react-dashboard-with-scichart-js-scichart-react-and-deepseek-r1/). To optimize performance, critical React hooks like useMemo and useCallback are utilized, ensuring that computational overhead is minimized — for more insights on these techniques, see the [Mastering useCallback and useMemo deep dive](https://javascript.plainenglish.io/mastering-usecallback-and-usememo-in-react-a-deep-dive-into-performance-optimization-263a33962a29).\n\n## Features and Capabilities\nThe example is designed with several advanced features in mind: \n- **Real-time update capabilities**: The integration allows for dynamic data changes without compromising performance. \n- **Advanced customizations**: With the ability to define custom axis layouts and renderers, users can tailor the visual output extensively. \n- **High-performance rendering**: Leveraging [WebGL rendering](https://www.scichart.com/scichart-js-for-web-a-fast-realtime-2d-3d-chart-component-for-html5-javascript-apps/) ensures that charts operate efficiently, even under heavy loads.\n\n## Integration and Best Practices\nEffective integration in React is achieved through careful use of lifecycle methods and state management. The example demonstrates how to update the SciChart components in sync with React’s state changes, promoting a smooth user experience. For practical insights into this, refer to [React Lifecycle Integration with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/). Additionally, implementing best practices such as code splitting and lazy loading for SciChart.js modules, as explained in the [React Code Splitting documentation](https://legacy.reactjs.org/docs/code-splitting.html), can significantly improve performance in larger applications.\n\nBy adhering to these integration strategies and optimization techniques, developers can successfully create high-performance, interactive charts within a React framework using SciChart.js.",
            },
            angular: {
                subtitle:
                    "The same data is rendered many to show the Axis Layout options in SciChart.js. Charts support outer, inner, central and stacked axes, and use of axis alignment to create vertical charts. Series may be registered on specific X,Y axis pairs for infinite layout configuration.",
                title: "Angular Chart Axis Layout Options",
                pageTitle: "Angular Chart Axis Layout Options",
                metaDescription:
                    "Demonstrates outer, inner, central and stacked axes, and use of axis alignment to create vertical charts",
                markdownContent:
                    '# AxisLayout Example - Angular\n\n## Overview\nThe AxisLayout example demonstrates how to integrate SciChart.js within an Angular framework to create dynamic and responsive axis layouts. This example leverages Angular component lifecycle hooks and dependency injection to manage chart initialization and updates, ensuring that the axis layouts adjust dynamically as the underlying data changes.\n\n## Technical Implementation\nThe implementation utilizes a Builder API approach where JSON configuration data defines the chart\'s axis layout and properties. Through the Angular component lifecycle, developers can initialize the chart in the appropriate lifecycle hook and clean up resources on component destruction. For details on leveraging these hooks, see [SciChart AxesPanelTemplate with dynamic grid](https://stackoverflow.com/questions/56262986/scichart-axespaneltemplate-with-dynamic-grid).\n\nIntegration is further enhanced through **Angular Dependency Injection** to seamlessly include third-party libraries such as SciChart.js. This showcases a practical example of integrating external libraries into Angular, as also discussed in [How to integrate third party libraries in Angular library?](https://stackoverflow.com/questions/63945675/how-to-integrate-third-party-libraries-in-angular-library). Additionally, the design considers Angular’s change detection mechanism and zones to optimize performance, an approach explained in [Angular change detection and runtime optimization](https://angular.io/guide/change-detection) and [Best and Easy Explanation for "Zone.js"](https://www.reddit.com/r/angular/comments/1fqexbf/best_and_easy_explanation_for_zonejs/).\n\n## Features and Capabilities\n- **Real-Time Updates:** The example incorporates Angular Observables to handle streaming data and update chart elements in real-time. This technique is in line with the approaches detailed in [DataSeries Realtime Updates](https://www.scichart.com/documentation/js/current/DataSeries_RealtimeUpdates.html).\n- **Dynamic Axis Layout Management:** Custom Angular directives and component encapsulation are employed to achieve advanced axis layout configurations. Developers can refer to [Creating Custom Directives in Angular: Step-by-Step Tutorial](https://www.angularminds.com/blog/creating-custom-directives-in-angular) for further guidance.\n- **Performance Optimization:** The chart seamlessly integrates [WebGL-based rendering](https://www.scichart.com/scichart-js-update-fast-realtime-javascript-charts/) for optimal performance and adheres to Angular best practices for lazy loading and component communication, ensuring a scalable and responsive application.\n\n## Integration and Best Practices\nThe example emphasizes best practices in Angular by encapsulating SciChart.js components within Angular modules and services, promoting efficient component communication and reusability. Developers are encouraged to explore strategies such as lazy loading for large-scale applications (see [Lazy Loading in Angular: How to Optimize for Speed and Performance](https://medium.com/@ramajonnada/lazy-loading-in-angular-how-to-optimize-for-speed-and-performance-632098e16a20)) and view encapsulation to maintain style isolation, as outlined in [Angular view encapsulation with external libraries](https://stackoverflow.com/questions/69753636/angular-view-encapsulation-with-external-libraries).\n\nThis comprehensive example serves as a robust starting point for developers aiming to integrate high-performance, real-time charting into Angular applications using SciChart.js, combining modern Angular practices with advanced rendering techniques.',
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#StartHere-AxisOverview.html",
                title: "SciChart.js Axis Documentation",
                linkTitle: "Scichart.js Axis Documentation",
            },
        ],
        path: "chart-axis-layout-options",
        metaKeywords: "stacked, axis, layout, alignment, vertical, javascript, webgl, canvas",
        onWebsite: false,
        filepath: "FeaturedApps/FeatureDemos/AxisLayout",
        thumbnailImage: "javascript-axis-layout.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const axisLayoutExampleInfo = createExampleInfo(metaData);
