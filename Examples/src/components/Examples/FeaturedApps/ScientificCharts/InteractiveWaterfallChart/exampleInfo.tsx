import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "FeaturedAppsScientificChartsInteractiveWaterfallChart",
        imagePath: "javascript-interactive-waterfall-chart.jpg",
        description:
            "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                title: "Interactive Waterfall Spectral Chart",
                pageTitle: "Interactive Waterfall Chart",
                metaDescription:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                markdownContent:
                    "# Interactive Waterfall Chart (Vanilla JavaScript)\n\n## Overview\nThis example demonstrates an interactive waterfall chart implementation using SciChart.js in a vanilla JavaScript environment. The chart visualizes spectral data generated by performing a Fourier transform on simulated time series data with the help of the Radix2FFT class. The waterfall design is achieved by layering multiple series – each with its own custom offset for the X and Y axes – across a main chart, while two additional cross-section charts update dynamically based on user interaction.\n\n## Technical Implementation\nThe implementation creates the waterfall effect by configuring a unique pair of numeric axes for each of the fifty series using properties such as the overrideOffset. Each series’ data is generated by simulating time-based signals and then applying a Fourier transform to extract a limited number of spectral components. Data rendering is optimized using the FastLineRenderableSeries, which is designed for high performance with large datasets. In addition, a custom palette provider is implemented to dynamically adjust the stroke colors of the series – for instance, to highlight values around a user-draggable annotation. For details on custom palette providers and extending the chart’s appearance, refer to the [PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html) and [Custom Subtypes](https://www.scichart.com/documentation/js/current/Custom%20Subtypes.html).\n\nInteractive elements are integrated through chart modifiers such as zoom pan, mouse wheel zoom, and the series selection modifier. The example uses a draggable annotation – implemented via SciChart.js’s [Editable Annotations](https://www.scichart.com/documentation/js/current/EditableAnnotations.html) – to allow users to select a specific spectral slice. This selection is then synchronized with the cross-section charts using the [Series Selection](https://www.scichart.com/documentation/js/current/SeriesSelection.html) functionality. Additionally, the setup for multiple axes is illustrated in the [Adding Multiple Axis Tutorial](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html).\n\n## Features and Capabilities\n**Multi-Axis Configuration**: Each series in the waterfall chart uses its own X and Y axes with distinct offsets, a technique that produces the layered waterfall effect. More details on configuring multiple axes can be found in the [Tutorial on Adding Multiple Axes](https://www.scichart.com/documentation/js/current/Tutorial%2008%20-%20Adding%20Multiple%20Axis.html).\n\n**Performance Optimization**: By using the FastLineRenderableSeries, the example ensures a smooth rendering experience even with numerous series and large datasets. Developers looking to learn more about performance optimizations in SciChart.js should consult the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) documentation.\n\n**Interactive Annotations and Cross-Chart Communication**: The example leverages interactive, draggable annotations to update cross-sectional views in real time. This synchronization across multiple chart surfaces demonstrates how to implement cross-chart interactions using the [Annotations API Overview](https://www.scichart.com/documentation/js/current/The%20Annotations%20API%20Overview.html) and the series selection modifier detailed in the [Series Selection](https://www.scichart.com/documentation/js/current/SeriesSelection.html) documentation.\n\n## Integration and Best Practices\nThis implementation is done entirely with vanilla JavaScript, which means that it directly utilizes SciChart.js’s robust API without additional framework abstractions such as Angular or React. Developers are encouraged to incorporate efficient data processing techniques – for example, generating spectral data through Fourier transforms – and to structure the chart using modular functions that update only when necessary. For enhanced visual presentation, advanced rendering features like gradient fills in area series can be explored in the [FastMountainRenderableSeries Documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/fastmountainrenderableseries.html).\n\nOverall, this example provides a comprehensive guide to building interactive and high-performance waterfall charts with SciChart.js, showcasing the ability to customize series coloring, manage multiple axes, and synchronize interactive updates across chart surfaces in a pure vanilla JavaScript environment.",
            },
            react: {
                subtitle:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                title: "Interactive Waterfall Spectral Chart",
                pageTitle: "Interactive Waterfall Chart",
                metaDescription:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                markdownContent:
                    "# Interactive Waterfall Chart (React)\n\n## Overview\nThis example demonstrates the creation of an interactive waterfall spectrogram chart using SciChart.js in a React application. The main chart displays multiple spectral series arranged in a waterfall layout, while two cross-section charts dynamically update based on user interactions such as dragging annotations and series selection.\n\n## Technical Implementation\nThe implementation leverages React components like SciChartReact and ChartGroupLoader to initialize and layout the charts. Each chart is created using the SciChartSurface.create method with custom axes, series, and annotations. For instance, a custom annotation is used to determine the data slice for the cross-section chart via a drag event, and an interactive series selection modifier highlights data series based on user actions. This approach is in line with best practices explained in the [React Charts with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/) article and the [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) tutorial.\n\n## Features and Capabilities\nThe example supports real-time updating and synchronization across multiple charts. It uses high-performance renderable series, such as FastLineRenderableSeries and FastMountainRenderableSeries, which are optimized for handling large datasets. The custom palette provider dynamically adjusts series colors, particularly upon selection or hover events, ensuring a responsive and visually intuitive interactive experience. Detailed implementations for series selection can be reviewed in the [Series Selection | JavaScript Chart Documentation - SciChart](https://www.scichart.com/documentation/js/current/SeriesSelection.html).\n\n## Integration and Best Practices\nIntegration within a React application is achieved through the use of stateful hooks to initialize and manage chart components. Post-initialization callbacks allow further configuration of synchronizing interactions—such as linking the movable annotation in the main chart to updates in the cross-section views—demonstrating effective techniques for multi-chart synchronization as described in [Synchronizing Multiple Charts](https://www.scichart.com/documentation/js/current/Synchronizing%20Multiple%20Charts.html). Moreover, the implementation of interactive and editable annotations adheres to the practices outlined in the [Editable Annotations](https://www.scichart.com/documentation/js/current/EditableAnnotations.html) documentation. Developers seeking to extend this example further can explore customized color updates via the [PaletteProvider API](https://www.scichart.com/documentation/js/current/The%20PaletteProvider%20API.html) and advanced zooming and panning functionalities detailed in the [Tutorial 03 - Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) guide.",
            },
            angular: {
                subtitle:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                title: "Interactive Waterfall Spectral Chart",
                pageTitle: "Interactive Waterfall Chart",
                metaDescription:
                    "Demonstrates how to create a Waterfall chart in SciChart.js, showing chromotragraphy data with interactive selection of points.",
                markdownContent:
                    "# Interactive Waterfall Chart - Angular\n\n## Overview\nThis example demonstrates how to create an **interactive waterfall spectral chart** using SciChart.js within an Angular standalone component. The main chart displays spectral data arranged in a waterfall layout, while two additional charts provide cross-sectional views that update dynamically based on user interactions.\n\n## Technical Implementation\nThe implementation utilizes Angular’s input bindings through the SciChartAngularComponent to initialize each chart asynchronously. Chart initialization is handled by a shared API, which sets up multiple SciChart surfaces via the SciChartSurface.create method. Key features include the configuration of axes, renderable series, interactive annotations, and event subscriptions. For detailed guidance on initializing charts in Angular, refer to [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) and [How to instantiate chart after the html has rendered in Angular](https://stackoverflow.com/questions/73329716/how-to-instantiate-chart-after-the-html-has-rendered-in-angular).\n\n## Features and Capabilities\nThe example illustrates real-time updates through interactive annotations and series selection. Custom palette providers are used to modify series appearance in response to user interactions, providing a visually engaging experience. Additionally, multi-chart synchronization is achieved, allowing cross-section charts to update in real-time as users manipulate the main chart. This approach is consistent with effective [chart synchronization techniques](https://www.scichart.com/documentation/js/current/Synchronizing%20Multiple%20Charts.html) for high-performance visualizations.\n\n## Integration and Best Practices\nThis example follows best practices for integrating high-performance charting libraries into Angular applications. It leverages Angular standalone components and service-like patterns to manage multiple SciChart surfaces and synchronize their interactions. Developers can utilize the [scichart-angular - Yarn](https://www.npmjs.com/package/scichart-angular) package to streamline integration further, while also taking advantage of Angular’s robust event binding and asynchronous handling for performance optimization. Additional insights on managing interactive annotations and dynamic series updates can be found in the [SciChart JS documentation](https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html).",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html",
                title: "The SciChart.js documentation contains loads of useful information on how to use our High Performance JavaScript Charts",
                linkTitle: "Scichart.js Documentation",
            },
        ],
        path: "interactive-waterfall-chart",
        metaKeywords: "waterfall, chart, interactive, javascript, webgl, canvas",
        onWebsite: false,
        filepath: "FeaturedApps/ScientificCharts/InteractiveWaterfallChart",
        thumbnailImage: "javascript-interactive-waterfall-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "max-width",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const waterfallChartExampleInfo = createExampleInfo(metaData);
