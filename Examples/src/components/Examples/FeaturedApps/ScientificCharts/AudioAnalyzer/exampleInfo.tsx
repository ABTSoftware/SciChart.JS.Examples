import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        reactComponent: "AudioAnalyzer",
        id: "featuredApps_scientificCharts_AudioAnalyzerDemo",
        imagePath: "javascript-audio-analyzer-fft-example.jpg",
        description:
            "Demonstrates how to create a **JavaScript Frequency / Audio Analyzer** with Fourier Transform (Frequency spectra) and a real-time frequency history using heatmaps. ***Note: this example requires microphone permissions to run.***",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to create a **JavaScript Frequency / Audio Analyzer** with Fourier Transform (Frequency spectra) and a real-time frequency history using heatmaps. ***Note: this example requires microphone permissions to run.***",
                title: "Realtime Audio Analyzer Demo",
                pageTitle: "Realtime Audio Analyzer Demo",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create a JavaScript Audio Analyzer and visualize the Fourier-Transform of an audio waveform in realtime.",
                markdownContent:
                    "## JavaScript Audio Spectral Analyzer\n\n### Overview\nThe Audio Analyzer example demonstrates real-time audio analysis using the Web Audio API in JavaScript. It captures microphone input via the browser by using `navigator.mediaDevices.getUserMedia` ([MDN getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)) and processes the audio signal in real time. The processed audio data is visualized using three charts: an audio waveform, an FFT spectrum, and a spectrogram heatmap.\n\n### Technical Implementation\nThe implementation captures audio from the user and applies real-time buffering with a FIFO mechanism to ensure smooth scrolling updates. This approach is similar to techniques discussed in articles like [Creating an Interactive Audio Visualizer with JavaScript](https://medium.com/@konjkar/creating-an-interactive-audio-visualizer-with-vanilla-javascript-46640283b91b).\n\nA key aspect of the example is the FFT analysis, which is implemented via a `Radix2FFT` algorithm that utilizes bit reversal and butterfly calculations. For a deeper understanding of these processes, one can refer to [FFT: Bit Reversing and Butterfly](https://connorg93.wordpress.com/2013/11/07/fft-bit-reversing-and-butterfly/).\n\n### Features and Capabilities\n**Real-time Visualization:** The example renders an audio waveform using a `FastLineRenderableSeries`, an FFT spectrum via a `FastMountainRenderableSeries` with a gradient palette created by ` PaletteFactory.createGradient()`, and a scrolling real-time spectrogram using a `UniformHeatmapDataSeries`. The spectrogram implementation leverages the concepts outlined in [The Uniform Heatmap Chart Type](https://www.scichart.com/documentation/js/current/The-Uniform-Heatmap-Chart-Type.html).\n\n**Performance Optimizations:** Smooth real-time updates are achieved through efficient animation loops using `setInterval`. Additionally, the application considers performance enhancements for handling complex arithmetic operations within the FFT computation, aligning with strategies found in [Performance Optimisation of JavaScript Charts](https://www.scichart.com/documentation/js/current/Performance%20Tips.html).\n\n### Integration and Best Practices\nThe code follows best practices for secure and efficient real-time audio processing in JavaScript. It ensures that microphone permissions are obtained securely and that the audio context is managed properly. The modular design allows for extensibility and customization, while the careful handling of data buffering and real-time updates provides a responsive user experience. This example is ideal for developers looking to integrate the Web Audio API with advanced charting libraries such as SciChart.js to build high-performance, interactive audio visualizations.",
            },
            react: {
                subtitle:
                    "Demonstrates how to create a **JavaScript Frequency / Audio Analyzer** with Fourier Transform (Frequency spectra) and a real-time frequency history using heatmaps. ***Note: this example requires microphone permissions to run.***",
                title: "Realtime Audio Analyzer Demo",
                pageTitle: "Realtime Audio Analyzer Demo",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create a JavaScript Audio Analyzer and visualize the Fourier-Transform of an audio waveform in realtime.",
                markdownContent:
                    "## React Audio Spectral Analyzer\n\n### Overview\nThis example demonstrates a real-time audio analyzer built with React and SciChart.js. It leverages the Web Audio API to capture microphone input, processes the audio data with a Fast Fourier Transform using a custom `Radix2FFT` implementation, and visualizes the results in three different SciChart.js charts: an audio waveform chart, an FFT spectrum chart, and a spectrogram heatmap. This application requires microphone permissions and shows how to create advanced, real-time data visualizations in a React environment.\n\n### Technical Implementation\nThe example integrates SciChart.js into React by using the `<SciChartReact/>` component along with `SciChartGroup` to manage multiple charts in a React application. The chart initialization is handled asynchronously via hooks such as `useState` and `useRef`. Once the charts are initialized, an interval is set up to periodically fetch audio data, update the associated data series, and perform an FFT calculation on the incoming data. The use of `fifoCapacity` in the `XyDataSeries` enables efficient real-time streaming and auto-discarding of old data. Developers interested in understanding how SciChart.js integrates with React can refer to the [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/) article and the [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) tutorial for additional context.\n\n### Features and Capabilities\n**Real-Time Updates:** The application continuously updates all three charts in real time by capturing microphone input and processing it through a Fourier Transform algorithm. The FFT and spectrogram charts offer dynamic visual feedback on frequency components, while the audio chart displays the raw waveform. For more details on real-time data handling, developers can review [Adding Realtime Updates | JavaScript Chart Documentation - SciChart](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html).\n\n**Advanced Customizations:** The charts are highly customizable with options for axes configuration, color palettes, and rendering series. The spectrogram chart, for instance, utilizes a `UniformHeatmapDataSeries` and a custom `HeatmapColorMap` to translate FFT data into a visual heatmap.\n\n### Integration and Best Practices\nThe React integration is achieved using standard hooks like `useState` and `useRef` to manage chart instance references and asynchronous initialization routines. The `SciChartGroup` component is used for composing multiple charts together in a seamless layout, in line with best practices for component composition in React. Cleanup is properly handled by stopping the data update interval and closing the audio context when the component is unmounted, which can be seen as a practical example of [React cleanup patterns](https://www.scichart.com/blog/react-charts-with-scichart-js/). Additionally, the example demonstrates the integration of browser media APIs for microphone access, ensuring that all necessary permissions are acquired before initiating the data stream. For further insights on integrating media APIs within a React component, consider reading [How to Access Microphones Through the Browser API | Speechmatics](https://blog.speechmatics.com/browser-microphone-access).\n\n### Performance Considerations\nEfficient performance is achieved by utilizing techniques such as `fifoCapacity` in data series, reducing unnecessary redraws and memory allocations. Furthermore, the continuous update cycle via `setInterval` is optimized to handle high-frequency data updates while maintaining smooth rendering. For more information on performance optimization in React with SciChart.js, check out the article [Creating a React Drag & Drop Chart Dashboard Performance Demo with 100 Charts](https://www.scichart.com/blog/creating-a-react-drag-drop-chart-dashboard/).",
            },
            angular: {
                subtitle:
                    "Demonstrates how to create a **JavaScript Frequency / Audio Analyzer** with Fourier Transform (Frequency spectra) and a real-time frequency history using heatmaps. ***Note: this example requires microphone permissions to run.***",
                title: "Realtime Audio Analyzer Demo",
                pageTitle: "Realtime Audio Analyzer Demo",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create a JavaScript Audio Analyzer and visualize the Fourier-Transform of an audio waveform in realtime.",
                markdownContent:
                    "## Angular Audio Spectral Analyzer\n\n### Overview\nThis example demonstrates a real-time audio analyzer built with Angular and SciChart.js. It captures live microphone input using the Web Audio API and visualizes both time-domain and frequency-domain data through multiple SciChart charts embedded via the `ScichartAngularComponent`. Microphone permissions are required, and the example showcases how to leverage Angular standalone components for high-performance charting.\n\n### Technical Implementation\nThe implementation is encapsulated in an Angular standalone component which is imported from [scichart-angular](https://www.npmjs.com/package/scichart-angular). The component makes use of Angular's template features with inline CSS styling (using `ngStyle`) to dynamically apply themes, as explained in [Getting started with standalone components - Angular](https://angular.io/guide/standalone-components). Chart initialization occurs asynchronously through the `(onInit)` event, allowing each chart instance (audio waveform, FFT spectrum, and spectrogram) to be configured when ready. Real-time updates are managed with a `setInterval` loop, echoing techniques from [setInterval and updating values AngularJS](https://stackoverflow.com/questions/32629939/setinterval-and-updating-values-angularjs). Furthermore, the audio data is processed by a custom FFT implementation `Radix2FFT`, ensuring that computational optimizations are in place for live data streaming.\n\n### Features and Capabilities\n**Real-Time Data Updates:** The demo continuously processes incoming audio data to update three separate chart instances, offering dynamic visual feedback.\n\n**Advanced Customizations:** Each chart is specifically configured with custom axes, FIFO data series for auto scrolling, and tailored renderable series, which improves performance and clarity. For further details on managing multiple chart instances, developers can refer to [Tutorial 09 - Linking Multiple Charts](https://www.scichart.com/documentation/js/current/Tutorial%2009%20-%20Linking%20Multiple%20Charts.html).\n\n### Integration and Best Practices\nThe Angular integration utilizes standard lifecycle events such as onInit to handle asynchronous chart initialization and resource management. The example follows best practices by leveraging Angular's dynamic styling capabilities via ngStyle, as highlighted in [Using ngStyle in Angular for dynamic styling - Ultimate Courses](https://ultimatecourses.com/blog/using-ngstyle-in-angular-for-dynamic-styling). Additionally, cleanup procedures are implemented to properly manage subscriptions and intervals in line with insights from [Angular component cleanup patterns](https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription). The integration of the Web Audio API is seamlessly achieved within the Angular framework, following the guidelines provided in [Using the Web Audio API - MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API).\n\n### Conclusion\nThis Realtime Audio Analyzer Demo (Angular) showcases how to build an advanced, real-time audio analysis application using Angular and SciChart.js. It combines dynamic theming, asynchronous chart initialization, and efficient resource management techniques to deliver high-performance visualizations in a modern Angular environment.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/SciChart_JS_User_Manual.html",
                title: "The SciChart.js documentation contains loads of useful information on how to use our High Performance JavaScript Charts",
                linkTitle: "SciChart.js Documentation Home",
            },
        ],
        path: "audio-analyzer-fft-example",
        metaKeywords: "audio, analyzer, demo, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "FeaturedApps/ScientificCharts/AudioAnalyzer",
        thumbnailImage: "javascript-audio-analyzer-fft-example.jpg",
        sandboxConfig: {
            infiniteLoopProtection: false,
            hardReloadOnChange: false,
            view: "browser",
        },
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const audioAnalyzerExampleInfo = createExampleInfo(metaData);
export default audioAnalyzerExampleInfo;
