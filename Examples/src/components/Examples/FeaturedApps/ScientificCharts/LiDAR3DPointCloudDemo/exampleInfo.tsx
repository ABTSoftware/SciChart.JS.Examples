import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "FeaturedAppsScientificChartsLiDAR3DPointCloudDemo",
        imagePath: "javascript-3d-lidar-visualization.jpg",
        description:
            "Demonstrates how to visualize **LiDAR UAV Data** from the Defra survey using SciChart.js. A 1km x 1km slice of London is visualised as a 3D point-cloud with contour map overlaid. A heatmap legend on the right indicates the heightmap.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates how to visualize **LiDAR UAV Data** from the Defra survey using SciChart.js. A 1km x 1km slice of London is visualised as a 3D point-cloud with contour map overlaid. A heatmap legend on the right indicates the heightmap.",
                title: "LiDAR 3D Point Cloud of Geospatial Data",
                pageTitle: "LiDAR 3D Point Cloud of Geospatial Data",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create JavaScript 3D Point Cloud charts and visualize LiDAR data from the UK Defra Survey.",
                markdownContent:
                    "# LiDAR 3D Point Cloud Demo (Vanilla JavaScript)\n\n### Overview\nThis example demonstrates a sophisticated 3D LiDAR point cloud visualization using SciChart.js in a vanilla JavaScript environment. It renders both a scatter point-cloud and a corresponding 3D topological (heightmap) mesh with an integrated heatmap legend, providing a comprehensive view of geospatial data in real time.\n\n### Technical Implementation\nThe implementation starts with asynchronous data loading via async/await. The LiDAR data, stored in the ASC file format, is parsed by a custom helper class (AscReader) that converts the textual data into numerical arrays suitable for charting. This processing includes generating X, Y, and Z coordinate arrays and applying an optional linear color mapping function (using linearColorMapLerp) to map height values to colors. The parsed data is then fed into two primary series: a ScatterRenderableSeries3D and a SurfaceMeshRenderableSeries3D. The scatter series uses a pixel point marker to depict individual points in the point cloud with color information embedded via metadata. Meanwhile, the surface mesh uses a UniformGridDataSeries3D to transform the point cloud into a 2D height map for contour visualization. Configuration of the 3D scene is handled by setting world dimensions using a Vector3 instance (e.g. new Vector3(1000, 200, 1000)) and attaching a CameraController for interactive camera manipulation. Developers can refer to the [SciChartSurface Camera documentation](https://www.scichart.com/documentation/js/current/The%20SciChartSurface%20Camera.html) for further details on 3D scene configuration.\n\n### Features and Capabilities\nKey features include:\n\n- **Real-time Data Streaming and Asynchronous Loading:** The use of async/await ensures that large datasets are loaded without blocking UI updates, aligning with [working with data](https://www.scichart.com/documentation/js/current/Working%20with%20Data.html) best practices.\n\n- **3D Point Cloud Rendering:** A scatter renderable series is used to display individual LiDAR points, leveraging the [Scatter 3D Chart Type](https://www.scichart.com/documentation/js/current/The%20Scatter%203D%20Chart%20Type.html) for high-performance WebGL rendering.\n\n- **Topological Mesh and Heightmap Generation:** The UniformGridDataSeries3D forms the basis of a surface mesh renderable series, with gradient color palettes provided by a GradientColorPalette. This is particularly useful for visualizing terrain and contours as described in the [SurfaceMesh 3D Chart Type documentation](https://www.scichart.com/documentation/js/current/The%20SurfaceMesh%203D%20Chart%20Type.html).\n\n- **Heatmap Legend Integration:** A dedicated heatmap legend is created and synchronized with the mesh renderable series. For more detailed usage, please consult the [HeatmapLegend documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/heatmaplegend.html).\n\n- **Interactive 3D Controls:** The example enhances user interactivity with 3D modifiers such as MouseWheelZoomModifier3D and OrbitModifier3D, enabling intuitive zooming and panning. This mirrors [best practices for 3D camera control](https://www.scichart.com/documentation/js/current/The%20SciChartSurface%20Camera.html) in SciChart.js.\n\n### Integration and Best Practices\nBy using vanilla JavaScript for instantiation and configuration, this example avoids framework-specific abstractions, ensuring that developers get direct access to all lower-level SciChart.js APIs. Performance optimizations are a priority; the example follows recommendations from the [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) documentation to efficiently render large point clouds. Additionally, data transformation techniques, such as converting one-dimensional arrays into 2D height maps (using functions like zeroArray2D), are implemented to ensure smooth integration between raw LiDAR data and visual rendering.\n\nOverall, this demo provides a robust reference for creating interactive, high-performance 3D LiDAR visualizations using SciChart.js in vanilla JavaScript, offering insights into asynchronous data handling, advanced color mapping, and detailed 3D scene configuration.",
            },
            react: {
                subtitle:
                    "Demonstrates how to visualize **LiDAR UAV Data** from the Defra survey using SciChart.js. A 1km x 1km slice of London is visualised as a 3D point-cloud with contour map overlaid. A heatmap legend on the right indicates the heightmap.",
                title: "LiDAR 3D Point Cloud of Geospatial Data",
                pageTitle: "LiDAR 3D Point Cloud of Geospatial Data",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create JavaScript 3D Point Cloud charts and visualize LiDAR data from the UK Defra Survey.",
                markdownContent:
                    "# LiDAR 3D Point Cloud Demo in React\n\n### Overview\nThis example demonstrates a comprehensive visualization of LiDAR UAV data as a 3D point cloud using SciChart.js in a React environment. The demo visualizes a 1km x 1km slice of London with a point cloud overlaid by a contour map, and it includes a dynamic heatmap legend to indicate elevation values.\n\n### Technical Implementation\nThe example leverages the SciChartReact component to integrate SciChart.js 3D charts into a React application, ensuring a smooth and native integration as outlined in the [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/) guide. The main chart is initialized using the asynchronous function drawExample, which sets up the 3D scene with a custom camera, numeric axes, and both a point cloud (using ScatterRenderableSeries3D) and a surface mesh with contours (using SurfaceMeshRenderableSeries3D). Data is fetched asynchronously from a server, parsed using a custom AscReader for ASC formatted LiDAR data, and then integrated into the chart. Performance is further optimized by leveraging WebAssembly via the wasmContext, ensuring smooth rendering of complex 3D datasets as described in the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) documentation.\n\n### Features and Capabilities\nThe demo showcases advanced features including real-time data integration, interactive 3D manipulation with modifiers like OrbitModifier3D and MouseWheelZoomModifier3D, and dynamic color mapping implemented through a gradient palette. The heatmap legend, rendered by the additional SciChartReact instance, provides visual context for the elevation data, making use of the [Heatmap ColorMaps and Legends](https://www.scichart.com/documentation/js/current/Uniform-Heatmap-Colormaps.html) approach to dynamically map elevation values to colors.\n\n### Integration and Best Practices\nIntegration into React is achieved by rendering multiple SciChartReact components simultaneously, which is efficient for dashboard scenarios as discussed in [Efficiently Rendering Multiple Components in Your React Applications](https://www.dhiwise.com/post/efficiently-rendering-multiple-components-in-react/). The implementation follows best practices for asynchronous data loading and chart initialization, ensuring that data is properly fetched and parsed before rendering the charts. Developers can further customize chart interactivity and apply performance optimizations by reusing the wasmContext, a technique recommended in related performance discussions available on the [SciChart Documentation](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) pages.\n\nThis demo exemplifies how to combine asynchronous operations, advanced 3D rendering, and interactive controls in a React application, resulting in a powerful tool for scientific visualization of geospatial LiDAR data.",
            },
            angular: {
                subtitle:
                    "Demonstrates how to visualize **LiDAR UAV Data** from the Defra survey using SciChart.js. A 1km x 1km slice of London is visualised as a 3D point-cloud with contour map overlaid. A heatmap legend on the right indicates the heightmap.",
                title: "LiDAR 3D Point Cloud of Geospatial Data",
                pageTitle: "LiDAR 3D Point Cloud of Geospatial Data",
                metaDescription:
                    "Demonstrating the capability of SciChart.js to create JavaScript 3D Point Cloud charts and visualize LiDAR data from the UK Defra Survey.",
                markdownContent:
                    "# LiDAR 3D Point Cloud Demo in Angular\n\n### Overview\nThis example demonstrates a comprehensive 3D visualization of LiDAR UAV data using Angular and SciChart.js. The demo visualizes a 1km x 1km section of geospatial data as both a 3D point cloud and a contour map, enhanced by a dynamic heatmap legend that indicates elevation.\n\n### Technical Implementation\nThe implementation leverages Angular standalone components with the SciChartAngularComponent to integrate high-performance 3D charts into an Angular application. The chart initialization is performed asynchronously, setting up a custom 3D camera via the SciChart.js [CameraController](https://www.scichart.com/documentation/js/current/The%20SciChartSurface%20Camera.html) and configuring numeric axes to define the world dimensions. The example fetches ASC formatted LiDAR data, parses it to extract coordinate and elevation information, and applies a dynamic gradient color mapping for height visualization as discussed in the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) documentation.\n\n### Features and Capabilities\nAdvanced features include real-time interactive 3D controls utilizing modifiers such as [OrbitModifier3D](https://www.scichart.com/documentation/js/current/OrbitModifier3D.html) and [MouseWheelZoomModifier3D](https://www.scichart.com/documentation/js/current/OrbitModifier3D.html) to enable smooth navigation around the point cloud. Furthermore, a detailed heatmap legend is rendered, which maps the elevation data to a vibrant color gradient, showcasing techniques from the [Heatmap ColorMaps and Legends](https://www.scichart.com/documentation/js/current/Uniform-Heatmap-Colormaps.html) guide. The integration of WebAssembly via the SciChart.js backend ensures that even complex datasets render smoothly and efficiently, as highlighted in the [SciChart.js for Web](https://www.scichart.com/scichart-js-for-web-a-fast-realtime-2d-3d-chart-component-for-html5-javascript-apps/) overview.\n\n### Integration and Best Practices\nThis demo follows best practices for Angular integration by utilizing standalone components as detailed in the [Angular Standalone Components](https://angular.io/guide/standalone-components) guide. Multiple SciChartAngular components are rendered on a single page to separate the main 3D chart from the heatmap legend, demonstrating effective techniques for managing complex chart layouts. The asynchronous data fetching and initialization ensure that charts update in real-time, and performance optimizations are achieved through efficient WebAssembly integration. Developers seeking further insights into component rendering and performance optimizations can refer to discussions on [multiple component rendering](https://stackoverflow.com/questions/44492610/rendering-multiple-view-using-a-single-component-in-angular) and [Angular Performance Optimization](https://davembush.medium.com/angular-performance-optimization-5ec630d2b8f1).",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/The%20Scatter%203D%20Chart%20Type.html",
                title: "SciChart.js 3D Chart Documentation",
                linkTitle: "JavaScript 3D Charts Documentation",
            },
        ],
        path: "3d-lidar-visualization",
        metaKeywords: "lidar, 3d, point, cloud, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "FeaturedApps/ScientificCharts/LiDAR3DPointCloudDemo",
        thumbnailImage: "javascript-3d-lidar-visualization.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const lidar3DPointCloudExampleInfo = createExampleInfo(metaData);
