import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "FeaturedAppsPerformanceDemosLoad500By500",
        imagePath: "javascript-chart-load-500-series-by-500-points.jpg",
        description:
            "Demonstrates loading **500 series, each with 500 points (250k points total) instantly**. Click the **Reload** button at the bottom of the demo to see the chart draw again.",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates loading **500 series, each with 500 points (250k points total) instantly**. Click the **Reload** button at the bottom of the demo to see the chart draw again.",
                title: "Load 500 Series x 500 Points Performance Demo",
                pageTitle: "Load 500 Series x 500 Points Performance Demo",
                metaDescription:
                    "This demo showcases the incredible performance of our JavaScript Chart by loading 500 series with 500 points (250k points) instantly!",
                markdownContent:
                    "# Load 500 Series by 500 Points (Vanilla JavaScript)\n\n## Overview\nThis example demonstrates how to render a performance‐focused chart using SciChart.js and vanilla JavaScript. The example pre-creates 500 empty series with 500 data points each and then updates them periodically, providing real-time performance measurements. The chart displays custom watermark annotations and leverages WebGL rendering for optimal performance.\n\n## Technical Implementation\nThe chart is initialized using the SciChartSurface.create method with a WebAssembly context (wasmContext), which is detailed in the [Creating a new SciChartSurface and loading Wasm](https://www.scichart.com/documentation/js/current/SciChartSurface.create%20and%20createSingle.html) documentation. Numeric axes are configured with fixed visible ranges and autoRange set to Never, ensuring that the chart always displays the full extent of the 500 data points. For more information on axis configuration, refer to the [Axis Ranging - Set Range and Zoom to Fit](https://www.scichart.com/documentation/js/current/Axis%20Ranging%20-%20Setting%20and%20Getting%20VisibleRange.html) documentation.\n\nPre-creation of rendering series is done by creating arrays of XyDataSeries and FastLineRenderableSeries. Data is generated in batches and appended via XyDataSeries.appendRange – a recommended approach for optimizing the update of large-scale data sets. More details on data series management can be found in the [Append, Insert, Update, Remove](https://www.scichart.com/documentation/js/current/DataSeries_AppendInsertUpdateRemove.html) documentation.\n\nThe example uses setInterval to periodically update the data series and measure performance timing for data generation, appending, and rendering the first frame. For insights into timer-based updates, see the [Window: setInterval() method](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval) documentation. Additionally, performance optimizations such as the usage of FastLineRenderableSeries for optimal WebGL rendering are explained in the [FastLineRenderableSeries API Documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/fastlinerenderableseries.html) and [Performance Tips & Tricks](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) guides.\n\n## Features and Capabilities\n**Real-time updates:** The chart periodically reloads data every 200 milliseconds to simulate a continuously updating data stream, while performance results such as data generation duration, appending time, and rendering performance are measured and displayed.\n\n**Custom annotations:** Watermark text annotations are layered on top of the chart using relative coordinates. These annotations include dynamic text such as the series count and total data points. For further details on annotations, refer to the [TextAnnotation Documentation](https://www.scichart.com/documentation/js/current/TextAnnotation.html).\n\n**Interactivity:** The integration of chart modifiers like ZoomExtentsModifier, ZoomPanModifier, and MouseWheelZoomModifier enables users to interact with the chart. Detailed guidance on these features is available in the [Tutorial 03 - Adding Zooming, Panning Behavior](https://www.scichart.com/documentation/js/current/Tutorial%2003%20-%20Adding%20Zooming,%20Panning%20Behavior.html) resource.\n\n## Integration and Best Practices\nThis implementation is built entirely in vanilla JavaScript without reliance on framework-specific APIs. It is structured in a modular way, allowing the core drawing function to be invoked from different contexts (e.g., Angular, React) while maintaining the simplicity and performance benefits of vanilla JavaScript. Best practices for performance optimization are observed by pre-allocating data series, batching data appends, and using WebGL for rendering large datasets. Developers looking for additional performance optimization techniques may review the [JavaScript performance optimization](https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Performance/JavaScript) guide on MDN.\n\nOverall, this example serves as a robust template for implementing high-performance, real-time updating charts using SciChart.js with vanilla JavaScript, and it showcases several advanced features and optimizations that developers can leverage for building sophisticated data visualization applications.",
            },
            react: {
                subtitle:
                    "Demonstrates loading **500 series, each with 500 points (250k points total) instantly**. Click the **Reload** button at the bottom of the demo to see the chart draw again.",
                title: "Load 500 Series x 500 Points Performance Demo",
                pageTitle: "Load 500 Series x 500 Points Performance Demo",
                metaDescription:
                    "This demo showcases the incredible performance of our React Chart by loading 500 series with 500 points (250k points) instantly!",
                markdownContent:
                    "# Load 500 Series x 500 Points Performance Demo - React\n\n## Overview\nThis example demonstrates how to integrate SciChart.js into a React application to efficiently render and update a high-performance chart featuring 500 series with 500 data points each, totaling 250k points. The demo highlights real-time performance measurement and dynamic data reloading, making it suitable for applications requiring sophisticated visualizations with rapid updates.\n\n## Technical Implementation\nThe chart is initialized using the SciChartReact component, which leverages React hooks such as useRef and useState for managing component state and accessing chart controls. The core chart setup is performed via an asynchronous function that uses SciChartSurface.create to instantiate the WebGL accelerated chart. Data generation for each series is optimized by pre-allocating arrays and appending batches of points efficiently, ensuring minimal rendering delay. Developers looking for detailed guidance on React component creation with SciChart.js can refer to the [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) documentation.\n\n## Features and Capabilities\nThe demo supports real-time data updates with controls to start, pause, and reload data at a regular interval (every 200 milliseconds). Advanced event handling is implemented by subscribing to the chart’s rendered events, which captures performance metrics such as data generation, data appending, and frame rendering times. With WebGL rendering at its core, the chart maintains high responsiveness even under heavy data loads. The integration of Material UI components for control elements also demonstrates how to build a polished user interface alongside powerful charting capabilities, as seen in [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/).\n\n## Integration and Best Practices\nThis implementation highlights key best practices for integrating SciChart.js into a React framework. It effectively uses React’s lifecycle management and hooks to initialize the chart, manage real-time updates, and ensure proper cleanup of chart resources upon component deletion. The use of useRef facilitates direct access to chart controls, enabling dynamic data reloading and update management—a pattern supported by [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/). Additionally, the demo applies performance optimization techniques such as pre-creating renderable series and batch appending of large data sets, further aligning with the strategies discussed in [Performance Optimisation of JavaScript Applications & Charts](https://www.scichart.com/blog/performance-optimisation-of-javascript-applications-charts/).",
            },
            angular: {
                subtitle:
                    "Demonstrates loading **500 series, each with 500 points (250k points total) instantly**. Click the **Reload** button at the bottom of the demo to see the chart draw again.",
                title: "Load 500 Series x 500 Points Performance Demo",
                pageTitle: "Load 500 Series x 500 Points Performance Demo",
                metaDescription:
                    "This demo showcases the incredible performance of our Angular Chart by loading 500 series with 500 points (250k points) instantly!",
                markdownContent:
                    "# Load 500 Series by 500 Points Performance Demo - Angular\n\n## Overview\nThe Load 500 Series by 500 Points Performance Demo illustrates how to integrate SciChart.js with Angular to render a high-performance chart containing 500 series, each with 500 data points (a total of 250k points). This example demonstrates the power of Angular’s standalone component architecture combined with SciChart.js rendering capabilities for real-time data visualization.\n\n## Technical Implementation\nThe implementation leverages an Angular standalone component, integrating the [scichart-angular](https://www.npmjs.com/package/scichart-angular) package to encapsulate and initialize the charting functionality. The chart initialization is performed asynchronously by calling SciChartSurface.create, and Angular lifecycle hooks ensure proper initialization and cleanup of the chart instance. Event binding is used to subscribe to render events for capturing performance metrics such as data generation, data appending, and the rendering of the first frame. For more on Angular’s methods for handling component lifecycles, please refer to the [Component Lifecycle](https://angular.io/guide/lifecycle-hooks) documentation.\n\n## Features and Capabilities\nThis demo supports **real-time data updates** by reloading chart data at regular intervals (every 200 milliseconds). The implementation efficiently pre-creates 500 renderable series and appends data in batches, ensuring minimal rendering delay. Additionally, interactive features like zooming, panning, and mouse wheel zoom are integrated, providing a dynamic and responsive user experience. Angular Material components are used for controls, offering a seamless and modern user interface.\n\n## Integration and Best Practices\nAdhering to Angular integration best practices, the example uses dependency injection and Angular’s change detection strategies to manage state updates and performance metrics effectively. The use of asynchronous initialization and event handlers ensures that the chart updates are both efficient and observable. Developers are encouraged to review the [Angular Performance Optimization](https://davembush.medium.com/angular-performance-optimization-5ec630d2b8f1) techniques and the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) guide for further insights into large-scale chart rendering and real-time updates in Angular applications.\n",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#Common%20RenderableSeries%20Features.html",
                title: "Go to the Performance Tips and Tricks page in the SciChart.js Documentation",
                linkTitle: "SciChart.js Performance Tips and Tricks",
            },
        ],
        path: "load-500-series-x-500-points-performance-demo",
        metaKeywords: "performance, demo, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "FeaturedApps/PerformanceDemos/Load500By500",
        thumbnailImage: "javascript-chart-load-500-series-by-500-points.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const load500By500ExampleInfo = createExampleInfo(metaData);
