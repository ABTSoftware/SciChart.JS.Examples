import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        exampleId: "FeaturedAppsPerformanceDemosRealtimeGhostedTraces",
        imagePath: "javascript-realtime-ghosted-traces-oscilloscope-chart.jpg",
        description:
            "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our JavaScript Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    "# RealtimeGhostedTraces - Vanilla JavaScript\n\n## Overview\nThis example demonstrates a high-performance, real-time charting solution using vanilla JavaScript. The focus is on rendering fast, dynamic charts with features such as ghosted traces that fade over time, ensuring that previous data remains subtly visible. The implementation leverages SciChart.js to stream live data efficiently while maintaining smooth visual updates.\n\n## Technical Implementation\nThe chart is configured through a JSON-driven Builder API, where chart properties and data series are defined using a straightforward JSON configuration. This approach simplifies customization and ensures rapid deployment of real-time updates. Developers can reference the [Adding Realtime Updates | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html) for detailed insights into implementing live data updates. Additionally, the example incorporates [Realtime Ghosted Traces](https://www.scichart.com/example/javascript-chart/javascript-realtime-ghosted-traces-chart/) to enhance visual continuity, ensuring that chart traces fade gracefully without overwhelming the viewer.\n\n## Features and Capabilities\nThe implementation includes several advanced features and customizations.\n\n- **Real-Time Updates:** The chart continuously updates with live data streams, offering a responsive and interactive visualization. Techniques described in the [Performance Tips & Tricks | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) help maintain smooth performance even with high-frequency updates.\n\n- **Ghosted Traces:** By rendering faded traces of previous data points, the chart provides historical context without clutter. This is particularly useful in time-series analyses where context is key.\n\n- **WebGL Rendering:** For handling large datasets, the example leverages WebGL rendering, which takes advantage of GPU acceleration. Detailed information on these techniques can be found in the [SciChart.js Javascript 3D Charts with WebGL & WebAssembly](https://www.scichart.com/blog/scichart-js-fast-javascript-3d-charts-update-june-2020/) documentation.\n\n## Integration and Best Practices\nThe integration is designed to work seamlessly within a vanilla JavaScript environment. By including the SciChart.js library via a CDN, developers can quickly embed advanced charting capabilities into their web applications, as outlined in the [Tutorial 01 - Including SciChart.js in an HTML Page using CDN](https://www.scichart.com/documentation/js/current/Tutorial01IncludingSciChartjsHTMLPage.html).\n\nDevelopers should also consider memory management and performance optimization strategies when constructing real-time charts. Best practices in efficiently handling resources and reducing CPU load are essential for maintaining responsiveness as data volumes grow. This example serves as a practical implementation guide for achieving these goals.\n\nOverall, the design showcases how to combine advanced charting features such as ghosted traces with fast, real-time rendering using SciChart.js and vanilla JavaScript, offering a robust solution for dynamic data visualization.",
            },
            react: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our React Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    "# RealtimeGhostedTraces - React Example\n\n## Overview\nThis example demonstrates a real-time chart implementation using SciChart.js within a React framework. It focuses on dynamically updating chart data and applying a unique **ghosted trace effect** to create fading trails, providing a visually engaging and high-performance user experience.\n\n## Technical Implementation\nThe implementation leverages the Builder API with JSON configurations to easily construct and modify chart components. Real-time updates are integrated using asynchronous data streams, as explained in the [Adding Realtime Updates](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html) guide. Moreover, advanced chart animations are implemented using custom techniques that enable ghost trails, detailed in the [Realtime Ghosted Traces](https://demo.scichart.com/react/realtime-ghosted-traces-chart) demo. The use of React Hooks for state management and component lifecycle events ensures updates are efficiently handled, aligning with best practices highlighted in [React Charts with SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/).\n\n## Features and Capabilities\n- **Real-time Data Streaming:** The chart continuously receives and displays live data, ensuring that visualizations are always up-to-date.\n- **Ghosted Trace Effects:** The fading trail effect provides a historical view of recent data points, enhancing the visual appeal and clarity of the data trends.\n- **Advanced Animations:** Custom animation configurations allow for smooth transitions and dynamic visual effects, leveraging techniques similar to those shown in the [React Chart Data Animation](https://demo.scichart.com/react/data-animation) example.\n- **Performance Optimizations:** Memory management and WebGL rendering are carefully optimized to maintain high performance, especially under rapid data updates. Detailed performance practices can be found in related resources, such as [Performance Optimisation of JavaScript Applications & Charts](https://www.scichart.com/blog/performance-optimisation-of-javascript-applications-charts/).\n\n## Integration and Best Practices\nThe example exhibits robust React integration by using established patterns for component lifecycle management, state handling, and real-time data processing. It incorporates best practices for embedding SciChart.js within React, ensuring that the chart components are both modular and maintainable. Developers are encouraged to explore additional tips for optimizing performance and enhancing visual effects by referring to the [React integration techniques for SciChart.js](https://www.scichart.com/blog/react-charts-with-scichart-js/) and related documentation on efficient memory management and WebGL integration.\n",
            },
            angular: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our Angular Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    "# RealtimeGhostedTraces - Angular Example\n\n## Overview\nThe RealtimeGhostedTraces example demonstrates how to integrate SciChart.js into an Angular application to achieve high-performance, real-time data visualizations. This example leverages Angular’s component architecture along with SciChart.js’s advanced charting capabilities to render dynamic, ghosted trace effects using WebGL.\n\n## Technical Implementation\nThe example is built using Angular components and services that manage the lifecycle of SciChart.js chart instances. Angular dependency injection is employed to configure and manage these instances, following best practices as described in the [Understanding dependency injection - Angular](https://angular.io/guide/dependency-injection) documentation. Additionally, the implementation takes advantage of Angular lifecycle hooks (see [Component Lifecycle - Angular](https://angular.io/guide/lifecycle-hooks)) to set up and tear down charts efficiently, ensuring that real-time data updates occur smoothly. The configuration utilizes JSON data structures which are processed by the Builder API to streamline the setup of chart properties and series. For more details on handling real-time updates in such environments, refer to [Adding Realtime Updates | JavaScript Chart Documentation - SciChart](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html).\n\n## Features and Capabilities\nThis Angular-based example offers several advanced features:\n\n- **Real-time Update Capabilities**: The chart updates in real-time, incorporating ghost trails for data traces which enhance the visualization of transient events.\n\n- **Advanced Chart Customizations**: Developers can modify appearance and behavior using JSON-based configurations, allowing for scalable customization. The demo highlights techniques detailed in the [Realtime Ghosted Traces - SciChart.js Demo](https://demo.scichart.com/javascript/realtime-ghosted-traces-chart) documentation.\n\n- **Reactive Programming**: By integrating RxJS observable streams, the application efficiently handles dynamic data changes, inspired by practices such as those described in [Dynamically add operator to Rxjs observable in Angular application](https://stackoverflow.com/questions/64527869/dynamically-add-operator-to-rxjs-observable-in-angular-application).\n\n## Integration and Best Practices\nThe example follows several best practices for integrating advanced charting libraries into Angular applications:\n\n- **Angular Integration**: It uses the [Angular Impulse Chart | JavaScript Charts - Demo | SciChart](https://demo.scichart.com/angular/impulse-chart) as a reference for best practices in embedding SciChart.js within Angular components, ensuring that the chart lifecycle aligns with Angular’s change detection mechanism and component rendering strategies.\n\n- **Performance Considerations**: Advanced change detection strategies are used to optimize performance during high-frequency updates. Developers are encouraged to explore techniques with detailed insights provided in articles on Angular performance optimization, ensuring that real-time chart rendering does not degrade user experience.\n\n- **Service Integration**: Using Angular services for state management decouples the business logic from the UI components, facilitating cleaner and more maintainable code. This approach is useful for scaling real-time applications and can be compared to state management techniques discussed in related resources.\n\nThis comprehensive integration of SciChart.js with Angular not only demonstrates the use of modern dependency injection and reactive programming but also provides a robust framework for real-time data visualization, perfect for demanding applications that require both speed and flexibility.",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/webframe.html#Common%20RenderableSeries%20Features.html",
                title: "Go to the Performance Tips and Tricks page in the SciChart.js Documentation",
                linkTitle: "SciChart.js Performance Tips and Tricks",
            },
        ],
        path: "realtime-ghosted-traces-chart",
        metaKeywords: "realtime, ghosted, traces, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "FeaturedApps/PerformanceDemos/RealtimeGhostedTraces",
        thumbnailImage: "javascript-realtime-ghosted-traces-oscilloscope-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
    };
//// End of computer generated metadata

export const realtimeGhostedTracesExampleInfo = createExampleInfo(metaData);
