import { createExampleInfo } from "../../../exampleInfoUtils";
import { IExampleMetadata } from "../../../IExampleMetadata";

const metaData: IExampleMetadata =
    //// This metadata is computer generated - do not edit!
    {
        reactComponent: "RealtimeGhostedTraces",
        id: "featuredApps_performanceDemos_RealtimeGhostedTraces",
        imagePath: "javascript-realtime-ghosted-traces-oscilloscope-chart.jpg",
        description:
            "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
        tips: [],
        frameworks: {
            javascript: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our JavaScript Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    "## Real-Time Ghosted Traces (JavaScript)\n\n### Overview\nThis example demonstrates how to create a realtime oscilloscope‐style chart with ghosted traces using SciChart.js in JavaScript. The chart is built by manually configuring chart components such as axes, renderable series, and custom layout managers without relying on higher-level frameworks. The purpose of the example is to simulate continuous data updates, creating a layered “ghosting” effect by stacking multiple traces with decreasing opacity.\n\n### Technical Implementation\nThe core of the implementation is found in the `drawExample.js` file. A new chart is created via the call to `SciChartSurface.create()`, following the guidelines in the [Getting Started with SciChart JS](https://www.scichart.com/getting-started/scichart-javascript/) documentation and the [Tutorial 01 - Including SciChart.js in an HTML Page using CDN](https://www.scichart.com/documentation/js/current/Tutorial01IncludingSciChartjsHTMLPage.html). Two `NumericAxis` objects are added, one for the x-axis and one for the y-axis, and a `CentralAxesLayoutManager` is used to position the axes centrally as detailed in the [Central Axis Layout](https://www.scichart.com/documentation/js/current/CentralAxisLayout.html) documentation. The example constructs ten instances of `FastLineRenderableSeries` with a glow effect created via `GlowEffect` and links them to noisy sinewave data generated using a `ExampleDataProvider`. To simulate realtime data, a function continuously reassigns the data series from one renderable series to the next and creates a new data series for the first trace. The process uses a recursive `setTimeout` (every 20ms) to update the data, a pattern that is explained in the [DataSeries Realtime Updates](https://www.scichart.com/documentation/js/current/DataSeries_RealtimeUpdates.html) documentation. To manage memory, the example ensures that every old data series is deleted once it has been replaced, following best practices available in the [Memory Best Practices](https://www.scichart.com/documentation/js/current/MemoryBestPractices.html) guide.\n\n### Features and Capabilities\nThe example showcases several advanced features of SciChart.js including:\n\n- **Realtime Data Updates:** The chart avoids redrawing by reassigning data series across layers, as demonstrated in the implementation of the realtime updating loop.\n- **Ghosted Traces Effect:** Multiple `FastLineRenderableSeries` are rendered with the same color but with decreasing opacity to produce a fading ghost effect. Additional visual polish is achieved by applying a [Glow Effect](https://www.scichart.com/documentation/js/current/Glow%20and%20DropShadow%20Shader%20Effects.html) to each series.\n- **Data Series Management:** The use of `XyDataSeries` to generate and update the noisy sinewave data is central to the technique, as referenced in the [XyDataSeries API documentation](https://www.scichart.com/documentation/js/current/typedoc/classes/xydataseries.html).\n\n### Integration and Best Practices\nAlthough this example is implemented in JavaScript, its techniques can be adapted for integration within other frameworks. The core logic of realtime updates, memory management, and visual customization is separated from any framework-specific code. This approach allows developers to integrate similar implementations into Angular, React or other environments by simply referencing the core drawing function. Additionally, the performance implications of using recursive setTimeout for realtime updates are discussed in various [performance optimization guides](https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Performance/JavaScript), which can be helpful when adapting this example for high-frequency data updates.\n",
            },
            react: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our React Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    '# Realtime Ghosted Traces - React Example\n\n### Overview\nThis example demonstrates a high-performance, real-time oscilloscope chart implemented in a React framework using SciChart.js. It renders multiple line series with dynamic ghosted trace effects, where older data fades gradually, providing a visually engaging history of data changes.\n\n### Technical Implementation\nThe chart is initialized within a React component using the `<SciChartReact/>` component. Once the asynchronous creation of the `SciChartSurface` completes, `NumericAxis` and several `FastLineRenderableSeries` are instantiated and configured. A timer-based mechanism continuously reassigns data series between the traces to simulate the fading "ghost" effect. The real-time data streaming approach is detailed in the [Adding Realtime Updates | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html) and leverages React Hooks such as `useState` and `useRef` for state management and lifecycle handling. Material UI components are used to provide interactive controls, illustrating best practices in integrating UI libraries with SciChart.js as discussed in [React Charts with SciChart.js: Introducing “SciChart React”](https://www.scichart.com/blog/react-charts-with-scichart-js/).\n\n### Features and Capabilities\n- **Real-Time Data Streaming:** The chart is continuously updated using a timer that reassigns data between series, effectively simulating live data arrival.\n- **Ghosted Trace Effects:** Each series is rendered with a different opacity level as well as a `GlowEffect` to create a fading trail effect, offering a persistent visual history of previous data points.\n- **Performance Optimization:** Utilizing WebGL for rendering and efficient memory management ensures smooth animations and high frame rates even during frequent updates. Developers can refer to the [Performance Tips & Tricks | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Performance%20Tips.html) for further performance considerations.\n\n### Integration and Best Practices\nThis example showcases robust React integration by encapsulating the chart logic within dedicated components and managing state via React Hooks. The `<SciChartReact/>` component abstracts boilerplate code for initializing and disposing of the chart, while Material UI integration demonstrates effective UI control usage. For developers seeking to build similar implementations, resources such as [Creating a SciChart React Component from the Ground Up](https://www.scichart.com/documentation/js/current/TutorialReusableReactComponent.html) provide additional guidance on best practices and component lifecycle management. Overall, the example combines advanced charting features with modern React methodologies to offer an optimal real-time data visualization solution.',
            },
            angular: {
                subtitle:
                    "Demonstrates real-time oscilloscope style effects with SciChart.js, High Performance JavaScript Charts",
                title: "Realtime Ghosted Traces",
                pageTitle: "Realtime Ghosted Traces",
                metaDescription:
                    "This demo showcases the realtime performance of our Angular Chart by animating several series with thousands of data-points at 60 FPS",
                markdownContent:
                    "## Realtime Ghosted Traces - Angular Example\n\n### Overview\nThis example demonstrates how to integrate SciChart.js into an Angular application to achieve high-performance, real-time data visualizations with advanced ghosted trace effects. The implementation showcases the dynamic updating of multiple line series while maintaining visual historical context with fading traces.\n\n### Technical Implementation\nThe chart is initialized within an Angular standalone component using the `ScichartAngularComponent` within the [scichart-angular](https://www.npmjs.com/package/scichart-angular) library. The core chart is set up in a function that creates axes with a central layout using SciChart.js’s [Central Axis Layout](https://www.scichart.com/documentation/js/current/CentralAxisLayout.html) and applies a [GlowEffect](https://www.scichart.com/documentation/js/current/Glow%20and%20DropShadow%20Shader%20Effects.html) to each series. Real-time updates are simulated by reassigning data series between multiple `FastLineRenderableSeries`, ensuring older traces gradually fade, which is a key aspect of ghosted trace effects. These updates are managed through a timer-based mechanism that ensures smooth transitions and efficient memory management by deleting unused data series. For detailed guidance on setting up real-time chart updates, refer to the [Adding Realtime Updates | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Tutorial%2004%20-%20Adding%20Realtime%20Updates.html).\n\n### Features and Capabilities\n- **Real-time Data Streaming:** The chart continuously updates by reassigning data among multiple `XyDataSeries`, creating a visually engaging oscilloscope style effect.\n- **Ghosted Trace Effects:** By varying the opacity of each series from 1.0 downwards, the example effectively demonstrates ghosted traces where previous data is still visible in a subdued manner.\n- **Advanced Visual Effects:** The use of the [GlowEffect](https://www.scichart.com/documentation/js/current/Glow%20and%20DropShadow%20Shader%20Effects.html) enhances the visual appeal, making it easier to track changes over time.\n- **Central Axes Layout:** The implementation uses a `CentralAxesLayoutManager` that repositions the axes in the center of the chart to create an oscilloscope-like view, which is configurable via JSON-like structure and block options.\n\n### Integration and Best Practices\nThis Angular example follows best practices by leveraging Angular’s component lifecycle and dependency injection for managing the SciChart.js instance. Developers can learn more about the underlying mechanisms of Angular dependency injection in the [Angular Dependency Injection Guide](https://angular.io/guide/dependency-injection). In addition, the efficient handling of real-time updates and performance optimization, as detailed in the [Performance Tips & Tricks | JavaScript Chart Documentation](https://www.scichart.com/documentation/js/current/Performance%20Tips.html), ensures that the chart remains responsive even with high data throughput. The component structure separates the chart logic from the UI controls, allowing for seamless integration with Angular’s change detection mechanism and ensuring modular code that is easier to maintain.\n",
            },
        },
        documentationLinks: [
            {
                href: "https://www.scichart.com/documentation/js/current/Common%20RenderableSeries%20Features.html",
                title: "Go to the Performance Tips and Tricks page in the SciChart.js Documentation",
                linkTitle: "SciChart.js Performance Tips and Tricks",
            },
        ],
        path: "realtime-ghosted-traces-chart",
        metaKeywords: "realtime, ghosted, traces, chart, javascript, webgl, canvas",
        onWebsite: true,
        filepath: "FeaturedApps/PerformanceDemos/RealtimeGhostedTraces",
        thumbnailImage: "javascript-realtime-ghosted-traces-oscilloscope-chart.jpg",
        sandboxConfig: {},
        markdownContent: null,
        pageLayout: "default",
        extraDependencies: {},
        isNew: false,
    };
//// End of computer generated metadata

const realtimeGhostedTracesExampleInfo = createExampleInfo(metaData);
export default realtimeGhostedTracesExampleInfo;
